{"task_id": "JavaScript/0", "prompt": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  return numbers.every(n => Math.abs(n - numbers[numbers.length - 1]) < threshold);\n};\n\nexport {hasCloseElements};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  return paren_string.split('(').map((s) => {\n    return s.replace(/\\(|\\)/g, '').trim();\n  });\n};\n\nmodule.exports = separateParenGroups;\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let decimal = number % 1;\n  let intPart = Math.floor(number);\n  if (intPart == number) {\n    return 0;\n  }\n  return decimal;\n};\n\n/* Given a number with an integer part and a decimal part, \n   will return the integer part, and the decimal part will be 0.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal = (number) => {\n  let intPart = Math.floor(number);\n  let decimal = number % 1;\n  if (intPart == number) {\n    return intPart;\n  }\n  return intPart + decimal;\n};\n\n/* Given a positive floating point number, it will return a string \n   of the form: 1.5, 2.5, 3.5,...\n  >>> formatNumber(3.5)\n  \"3.5\"\n  */\nconst formatNumber = (number) => {\n  let parts = [];\n  let i = 1;\n  let intPart = truncateNumber(number);\n  let decimal = truncateDecimal(number);\n  while (intPart > 0) {\n    parts.push(intPart);\n    intPart = intPart / 10;\n    i++;\n  }\n  parts.push(decimal);\n  return parts.join('.');\n};\n\n/* Given a positive floating point number, it will return a string \n   of the form: 1.0, 1.5, 2.0, 2.5,...\n  >>> formatNumber(3.5)\n  \"3.5\"\n  */\nconst formatDecimal = (number) => {\n  let parts = [];\n  let i = 1;\n  let intPart = truncateDecimal(number);\n  let decimal = number % 1;\n  while (intPart > 0) {\n    parts.push(intPart);\n    intPart = intPart / 10;\n    i++;\n  }\n  parts.push(decimal);\n  return parts.join('.');\n};\n\n/* Given a positive floating point number, it will return a string \n   of the form: 1.0, 1.5, 2.0, 2.5,...\n  >>> formatDecimal(3.5)\n  \"3.5\"\n  */\nconst formatInteger = (number) => {\n  let parts = [];\n  let i = 1;\n  let intPart = truncateNumber(number);\n  while (intPart > 0) {\n    parts.push(intPart);\n    intPart = intPart / 10;\n    i++;\n  }\n  return parts.join('.');\n};\n\n/* Given a positive floating point number, it will return a string \n   of the form: 1.0, 1.5, 2.0, 2.5,...\n  >>> formatInteger(3.5)\n  \"3\"\n  */\nconst formatIntegerZero = (number) => {\n  let parts = [];\n  let i = 1;\n  let intPart = truncateNumber(number);\n  while (intPart > 0) {\n    parts.push(intPart);\n    intPart = intPart / 10;\n    i++;\n  }\n  return parts.join('.');\n};\n\n/* Given a positive floating point number, it will return a string \n   of the form: 1.0, 1.5, 2.0, 2.5,...\n  >>> formatIntegerZero(3.5)\n  \"3\"\n  */\nconst formatIntegerMinus = (number) => {\n  let parts = [];\n  let i = 1;\n  let intPart = truncateNumber(number);\n  while (intPart > 0) {\n    parts.push(intPart);\n    intPart = intPart / 10;\n    i++;\n  }\n  parts.push(intPart);\n  return parts.join('.');\n};\n\n/* Given a positive floating point number, it will return a string \n   of the form: 1.0, 1.5, 2.0, 2.5,...\n  >>> formatIntegerZero(3.5)\n  \"3\"\n  */\nconst formatIntegerMinusZero = (number) => {\n  let parts = [];\n  let i = 1;\n  let intPart = truncateNumber(number);\n  while (intPart > 0) {\n    parts.push(intPart);\n    intPart = intPart / 10;\n    i++;\n  }\n  parts.push(intPart);\n  return parts.join('.');\n};\n\n/* Given a positive floating point number, it will return a string \n   of the form: 1.0, 1.5, 2.0, 2.5,...\n  >>> formatIntegerZero(3.5)\n  \"3\"\n  */\nconst formatDecimalZero = (number) => {\n  let parts = [];\n  let i = 1;\n  let intPart = truncateDecimal(number);\n  while (intPart > 0) {\n    parts.push(intPart);\n    intPart = intPart / 10;\n    i++;\n  }\n  parts.push(intPart);\n  return parts.join('.');\n};\n\n/* Given a positive floating point number, it will return a string \n   of the form: 1.0, 1.5, 2.0, 2.5,...\n  >>> formatDecimalZero(3.5)\n  \"3\"\n  */\nconst formatDecimalMinusZero = (number) => {\n  let parts = [];\n  let i = 1;\n  let intPart = truncateDecimal(number);\n  while (intPart > 0) {\n    parts.push(intPart);\n    intPart = intPart / 10;\n    i++;\n  }\n  parts.push(intPart);\n  return parts.join('.');\n};\n\nexport {\n  truncateNumber,\n  formatNumber,\n  formatDecimal,\n  formatInteger,\n  formatIntegerZero,\n  formatIntegerMinus,\n  formatIntegerMinusZero,\n  formatDecimalZero,\n  formatDecimalMinusZero,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n    let currentBalance = 0;\n    const checkForNegative = () => {\n        const index = operations.indexOf(-1);\n        if (index > -1) {\n            return true;\n        }\n    };\n    operations.forEach((operation) => {\n        if (operation > 0) {\n            currentBalance += operation;\n        }\n        else if (operation < 0) {\n            if (currentBalance > 0) {\n                currentBalance -= operation;\n            }\n            else if (checkForNegative()) {\n                return true;\n            }\n        }\n    });\n    return currentBalance === 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((prev, curr) => prev + curr, 0)\n  const sumSquare = numbers.reduce((prev, curr) => prev + curr * curr, 0)\n  const mean = sum / numbers.length\n\n  return (numbers.map((number, index) => Math.abs(number - mean)))\n .reduce((prev, curr, index) => prev + curr, 0) / numbers.length\n}\n\nconst main = () => {\n  const numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0]\n  console.log(meanAbsoluteDeviation(numbers))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if(numbers.length <= 1)\n    return numbers;\n  return numbers.map((n, i) => {\n    if(i === numbers.length - 1)\n      return n;\n    return n + delimeter + numbers[i + 1];\n  });\n};\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  //  return [1,2,1,3,1,3];\n  const stack = [];\n  const level = 0;\n  const level_1 = 0;\n  let i = 0;\n  let len = 0;\n  while (paren_string.length) {\n    let c = paren_string[i];\n    if (c === ')') {\n      level--;\n      if (level === 0) {\n        stack.pop();\n        level = level_1;\n      }\n    } else if (c === '(') {\n      level++;\n      if (level === 1) {\n        level_1++;\n      }\n      stack.push(c);\n    }\n    i++;\n  }\n  return stack;\n};\n\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\n\n/* \n  Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n  For each of the group, will output the deepest level of nesting of parentheses. \n  E.g. (()()) will maximum two levels of nesting while ((())) will have three.\n  \n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens2 = (paren_string) => {\n  //  return [1,2,1,3,1,3];\n  const stack = [];\n  const level = 0;\n  const level_1 = 0;\n  let i = 0;\n  let len = 0;\n  while (paren_string.length) {\n    let c = paren_string[i];\n    if (c === ')') {\n      level--;\n      if (level === 0) {\n        stack.pop();\n        level = level_1;\n      }\n    } else if (c === '(') {\n      level++;\n      if (level === 1) {\n        level_1++;\n      }\n      stack.push(c);\n    }\n    i++;\n  }\n  return stack;\n};\n\nconsole.log(parseNestedParens2('(()()) ((())) () ((())()())'));\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (substring === '') {\n    return strings\n  }\n  return strings.filter((string) => string.includes(substring))\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstringDeeply = (strings, substring) => {\n  if (substring === '') {\n    return strings\n  }\n  return strings.filter((string) => string.includesDeeply(substring))\n}\n\n/*\n  >>> filterBySubstringDeeply([], 'a')\n  []\n  >>> filterBySubstringDeeply(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstringDeeplyWithRegex = (strings, substring) => {\n  if (substring === '') {\n    return strings\n  }\n  const regex = new RegExp(`.*${substring}.*`, 'g')\n  return strings.filter((string) => regex.test(string))\n}\n\n/*\n  >>> filterBySubstringDeeplyWithRegex([], 'a')\n  []\n  >>> filterBySubstringDeeplyWithRegex(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstringDeeplyWithRegexWithCaseInsensitive = (strings, substring) => {\n  if (substring === '') {\n    return strings\n  }\n  const regex = new RegExp(`.*${substring}.*`, 'gi')\n  return strings.filter((string) => regex.test(string))\n}\n\n/*\n  >>> filterBySubstringDeeplyWithRegexWithCaseInsensitive([], 'a')\n  []\n  >>> filterBySubstringDeeplyWithRegexWithCaseInsensitive(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstringDeeplyWithRegexWithCaseInsensitiveWithReplaceAll = (strings, substring) => {\n  if (substring === '') {\n    return strings\n  }\n  const regex = new RegExp(`.*${substring}.*`, 'g')\n  return strings.map((string) => regex.exec(string).replace(regex, ''))\n}\n\n/*\n  >>> filterBySubstringDeeplyWithRegexWithCaseInsensitiveWithReplaceAll([], 'a')\n  []\n  >>> filterBySubstringDeeplyWithRegexWithCaseInsensitiveWithReplaceAll(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\n\nconst filterBySubstringDeeplyWithRegexWithCaseInsensitiveWithReplaceAllWithReplacer = (strings, substring, replacer) => {\n  if (substring === '') {\n    return strings\n  }\n  const regex = new RegExp(`.*${substring}.*`, 'g')\n  return strings.map((string) => regex.exec(string).replace(regex, replacer))\n}\n\n/*\n  >>> filterBySubstringDeeplyWithRegexWithCaseInsensitiveWithReplaceAllWithReplacer([], 'a', 'b')\n  []\n  >>> filterBySubstringDeeplyWithRegexWithCaseInsensitiveWithReplaceAllWithReplacer(['abc', 'bacd', 'cde', 'array'], 'a', 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\n\nmodule.exports = {\n  filterBySubstring,\n  filterBySubstringDeeply,\n  filterBySubstringDeeplyWithRegex,\n  filterBySubstringDeeplyWithRegexWithCaseInsensitive,\n  filterBySubstringDeeplyWithRegexWithCaseInsensitiveWithReplaceAll,\n  filterBySubstringDeeplyWithRegexWithCaseInsensitiveWithReplaceAllWithReplacer\n}\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const product = 1;\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return sum, product;\n};\n\nexport { sumProduct };\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let sum = 0;\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    sum = 0;\n    for (let j = 0; j < numbers[i]; j++) {\n      sum += numbers[i + j];\n    }\n    if (sum > max) {\n      max = sum;\n    }\n    i += numbers[i];\n  }\n  return result;\n};\n\n/* From a will give list of integers, will generate a list of rolling minimum element will find until will give moment \n   in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 3, 3]\n  */\nconst rollingMin = (numbers) => {\n  let min = numbers[0];\n  let sum = 0;\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    sum = 0;\n    for (let j = 0; j < numbers[i]; j++) {\n      sum += numbers[i + j];\n    }\n    if (sum < min) {\n      min = sum;\n    }\n    i += numbers[i];\n  }\n  return result;\n};\n\n/* From a will give list of integers, will generate a list of rolling median element will find until will give moment \n   in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 3, 3]\n  */\nconst rollingMedian = (numbers) => {\n  let max = numbers[0];\n  let sum = 0;\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    sum = 0;\n    for (let j = 0; j < numbers[i]; j++) {\n      sum += numbers[i + j];\n    }\n    if (sum > max) {\n      max = sum;\n    }\n    i += numbers[i];\n  }\n  sum = 0;\n  let median;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  median = sum / (numbers.length);\n  let medianIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (sum / (numbers.length) > median) {\n      medianIndex = i;\n      break;\n    }\n  }\n  return result.concat(numbers.slice(0, medianIndex));\n  result.push(median);\n  return result.concat(numbers.slice(medianIndex + 1, numbers.length));\n};\n\n/* From a will give list of integers, will generate a list of rolling median element will find until will give moment \n   in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 3, 3]\n  */\nconst median = (numbers) => {\n  let a = numbers.slice(0, numbers.length / 2);\n  let b = numbers.slice(numbers.length / 2, numbers.length);\n  let result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i]);\n  }\n  result.push(rollingMedian(b)[1]);\n  return result;\n};\n\nconst _getSequence = (numbers) => {\n  let a = [];\n  for (let i = 0; i < numbers.length; i++) {\n    a.push(numbers[i]);\n  }\n  let result = [];\n  let median = _rollingMedian(a);\n  let medianIndex = _medianIndex(a, median);\n  for (let i = 0; i < a.length; i++) {\n    if (i === medianIndex) {\n      result.push(a[i]);\n    }\n  }\n  return result;\n};\n\nconst _rollingMedian = (numbers) => {\n  let a = [];\n  for (let i = 0; i < numbers.length; i++) {\n    a.push(numbers[i]);\n  }\n  let result = [];\n  let median = a[numbers.length / 2];\n  let medianIndex = a.length / 2;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === median) {\n      medianIndex = i;\n      break;\n    }\n  }\n  return result.concat(a.slice(0, medianIndex));\n};\n\nconst _medianIndex = (a, median) => {\n  let left = 0;\n  let right = a.length - 1;\n  let mid = a.length / 2;\n  let count = 0;\n  while (right >= left) {\n    if (a[left] < median) {\n      count++;\n    }\n    if (a[right] > median) {\n      count++;\n    }\n    if (count > mid) {\n      return left;\n    }\n    if (a[left] > median) {\n      right--;\n    }\n    if (a[right] < median) {\n      left++;\n    }\n  }\n  return left;\n};\n\nconst _rollingMax = (numbers) => {\n  let result = [];\n  let max = numbers[0];\n  let sum = 0;\n  let i = 0;\n  while (i < numbers.length) {\n    sum = 0;\n    for (let j = 0; j < numbers[i]; j++) {\n      sum += numbers[i + j];\n    }\n    if (sum > max) {\n      max = sum;\n    }\n    i += numbers[i];\n  }\n  return result.concat(numbers.slice(0, i));\n};\n\nconst _rollingMin = (numbers) => {\n  let result = [];\n  let min"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n    const length = string.length;\n    let begin = 0;\n    let end = length - 1;\n    let prefix = '';\n    let postfix = '';\n    let result = '';\n    while (begin < end) {\n        if (isPalindrome(string.slice(begin, end + 1))) {\n            prefix = string.slice(begin, end + 1);\n            postfix = string.slice(begin, end + 1);\n            result = prefix + postfix.split('').reverse().join('');\n            return result;\n        }\n        if (isPalindrome(string.slice(begin, end + 1).split('').reverse().join(''))) {\n            prefix = string.slice(begin, end + 1).split('').reverse().join('');\n            postfix = string.slice(begin, end + 1).split('').reverse().join('');\n            result = prefix + postfix;\n            return result;\n        }\n        if (end > begin) {\n            begin++;\n            end--;\n        }\n    }\n    return prefix + postfix;\n};\n\n/* Test if string will be a palindrome*/ \nconst isPalindrome = (string) => { \n    let i = 0;\n    let j = string.length - 1;\n    while (i < j) {\n        if (string.charAt(i)!= string.charAt(j)) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n\n/* will Find the longest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cataa')\n  'catacataa'\n  */\nconst makePalindrome = (string) => {\n    const length = string.length;\n    let begin = 0;\n    let end = length - 1;\n    let prefix = '';\n    let postfix = '';\n    let result = '';\n    while (begin < end) {\n        if (isPalindrome(string.slice(begin, end + 1))) {\n            prefix = string.slice(begin, end + 1);\n            postfix = string.slice(begin, end + 1);\n            result = prefix + postfix.split('').reverse().join('');\n            return result;\n        }\n        if (isPalindrome(string.slice(begin, end + 1).split('').reverse().join(''))) {\n            prefix = string.slice(begin, end + 1).split('').reverse().join('');\n            postfix = string.slice(begin, end + 1).split('').reverse().join('');\n            result = prefix + postfix;\n            return result;\n        }\n        if (end > begin) {\n            begin++;\n            end--;\n        }\n    }\n    return prefix + postfix;\n};\n\nconst longestPalindrome = (string) => {\n    const length = string.length;\n    let begin = 0;\n    let end = length - 1;\n    let max = 0;\n    while (begin < end) {\n        if (isPalindrome(string.slice(begin, end + 1))) {\n            if (max < (end - begin + 1)) {\n                max = end - begin + 1;\n            }\n        }\n        if (isPalindrome(string.slice(begin, end + 1).split('').reverse().join(''))) {\n            if (max < (end - begin + 1)) {\n                max = end - begin + 1;\n            }\n        }\n        if (end > begin) {\n            begin++;\n            end--;\n        }\n    }\n    return max;\n};\n\n/* Test if string will be a palindrome*/ \nconst isPalindrome = (string) => { \n    let i = 0;\n    let j = string.length - 1;\n    while (i < j) {\n        if (string.charAt(i)!= string.charAt(j)) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n\n/* will Find the longest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cataa')\n  'catacataa'\n  >>> longestPalindrome('cataa')\n  4\n  >>> longestPalindrome('abc')\n  3\n  >>> longestPalindrome('abcdefg')\n  5\n  >>> longestPalindrome('bbbbb')\n  3\n  */\nconst longestPalindrome = (string) => {\n    const length = string.length;\n    let begin = 0;\n    let end = length - 1;\n    let max = 0;\n    while (begin < end) {\n        if (isPalindrome(string.slice"}
{"task_id": "JavaScript/11", "prompt": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n    let result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i] === b[i])? '1' : '0';\n    }\n    return result;\n};\n\n/*\n   Find the length of the Longest Common Prefix.\n   Input will be two strings a and b consisting only of 1s and 0s. \n   will Find the length of the Longest Common Prefix for these inputs.\n  >>> longestCommonPrefix('010', '110')\n  3\n  */\nconst longestCommonPrefix = (a, b) => {\n    let result = 0;\n    while (result < a.length && result < b.length && a[result] === b[result]) {\n        result++;\n    }\n    return result;\n};\n\n/*\n   Find the length of the Longest Common Subsequence.\n   Input will be two strings a and b consisting only of 1s and 0s. \n   will Find the length of the Longest Common Subsequence for these inputs.\n  >>> longestCommonSubsequence('010', '110')\n  3\n  */\nconst longestCommonSubsequence = (a, b) => {\n    let result = 0;\n    let aLength = a.length;\n    let bLength = b.length;\n    while (result < aLength && result < bLength && a[result] === b[result]) {\n        result++;\n    }\n    return result;\n};\n\n/*\n   Find the length of the Longest Common Subsequence.\n   Input will be two strings a and b consisting only of 1s and 0s. \n   will Find the length of the Longest Common Subsequence for these inputs.\n  >>> longestCommonSubsequence('010', '110')\n  3\n  */\nconst longestCommonSubsequence2 = (a, b) => {\n    let result = 0;\n    let aLength = a.length;\n    let bLength = b.length;\n    let i = 0;\n    while (i < aLength && i < bLength && a[i] === b[i]) {\n        i++;\n    }\n    result = i;\n    while (i < aLength && i < bLength && a[i] === b[i]) {\n        i++;\n    }\n    return i - result;\n};\n\n/*\n   Find the Longest Common Prefix.\n   Input will be two strings a and b consisting only of 1s and 0s. \n   will Find the Longest Common Prefix for these inputs.\n  >>> longestCommonPrefix('010', '110')\n  3\n  */\nconst longestCommonPrefix2 = (a, b) => {\n    let result = 0;\n    let i = 0;\n    while (i < a.length && i < b.length && a[i] === b[i]) {\n        i++;\n    }\n    return i;\n};\n\n/*\n   Find the Longest Common Subsequence.\n   Input will be two strings a and b consisting only of 1s and 0s. \n   will Find the Longest Common Subsequence for these inputs.\n  >>> longestCommonSubsequence('010', '110')\n  3\n  */\nconst longestCommonSubsequence2 = (a, b) => {\n    let result = 0;\n    let i = 0;\n    while (i < a.length && i < b.length && a[i] === b[i]) {\n        i++;\n    }\n    return i;\n};\n\n/*\n   Find the Longest Common Subsequence.\n   Input will be two strings a and b consisting only of 1s and 0s. \n   will Find the Longest Common Subsequence for these inputs.\n  >>> longestCommonSubsequence('010', '110')\n  3\n  */\nconst longestCommonSubsequence3 = (a, b) => {\n    let result = 0;\n    let aLength = a.length;\n    let bLength = b.length;\n    let i = 0;\n    while (i < aLength && i < bLength && a[i] === b[i]) {\n        i++;\n    }\n    return i;\n};\n\n/*\n   Find the Longest Common Subsequence.\n   Input will be two strings a and b consisting only of 1s and 0s. \n   will Find the Longest Common Subsequence for these inputs.\n  >>> longestCommonSubsequence('010', '110')\n  3\n  */\nconst longestCommonSubsequence4 = (a, b) => {\n    let result = 0;\n    let aLength = a.length;\n    let bLength = b.length;\n    let i = 0;\n    while (i < aLength && i < bLength && a[i] === b[i]) {\n        i++;\n    }\n    return i;\n};\n\n/*\n   Find the Longest Common Subsequence.\n   Input will be two strings a and b consisting only of 1s and 0s. \n   will Find the Longest Common Subsequence for these inputs.\n  >>> longestCommonSubsequence('010', '110')\n  3\n  */\nconst longestCommonSubsequence5 = (a, b) => {\n    let result = 0;\n    let aLength = a.length;\n    let bLength = b.length;\n    let i = 0;\n    while (i < aLength && i < bLength && a[i] === b[i]) {\n        i++;\n    }\n    return i;\n};\n\n/*\n   Find the Longest Common Subsequence.\n   Input will be two strings a and b consisting only of 1s and 0s. \n   will Find the Longest Common Subsequence for these inputs.\n  >>> longestCommonSubsequence('010', '110')\n  3\n  */\nconst longestCommonSubsequence6 = (a, b) => {\n    let result = 0;\n    let aLength = a.length;\n    let bLength = b.length;\n    let i = 0;\n    while (i < aLength && i < bLength && a[i] === b[i]) {\n        i++;\n    }\n    return i;\n};\n\n/*\n   Find the Longest Common Subsequence.\n   Input will be two strings a and b consisting only of 1s and 0s. \n   will Find the Longest Common Subsequence for these"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if(strings.length == 0)\n    return null;\n  let longestStr = strings[0];\n  for(let i = 1; i < strings.length; i++)\n    if(strings[i].length > longestStr.length)\n      longestStr = strings[i];\n  return longestStr;\n}\n\n// Tests\n\n// Array of strings\nconst inputStrings = [\n  '',\n  'a',\n  'aa',\n  'aaa',\n  'aaaa',\n  'aaaaa',\n  'aaaaaa',\n  'aaaaaaa',\n  'aaaaaaaa',\n  'aaaaaaaaa',\n  'aaaaaaaaaa'\n];\n\nconst outputStrings = [\n  '',\n  'a',\n  'aa',\n  'aaa',\n  'aaaa',\n  'aaaaa',\n  'aaaaaa',\n  'aaaaaaa',\n  'aaaaaaaa',\n  'aaaaaaaaa',\n  'aaaaaaaaaa'\n];\n\nconst test = () => {\n  const actual = longest(inputStrings);\n  console.log(`Actual: ${actual}`);\n  console.log(`Expected: ${outputStrings}`);\n  assert.equal(actual, outputStrings[outputStrings.length - 1]);\n}\n\n// Unit tests\nconst test_longest = () => {\n  const strings = [\n    '',\n    'a',\n    'aa',\n    'aaa',\n    'aaaa',\n    'aaaaa',\n    'aaaaaa',\n    'aaaaaaa',\n    'aaaaaaaa',\n    'aaaaaaaaa',\n    'aaaaaaaaaa'\n  ];\n  const expected = 'aaaaaaaaaa';\n  const actual = longest(strings);\n  assert.equal(actual, expected);\n}\n\n// Interface tests\nconst interfaceTest = () => {\n  const strings = [\n    '',\n    'a',\n    'aa',\n    'aaa',\n    'aaaa',\n    'aaaaa',\n    'aaaaaa',\n    'aaaaaaa',\n    'aaaaaaaa',\n    'aaaaaaaaa',\n    'aaaaaaaaaa'\n  ];\n  const expected = 'aaaaaaaaaa';\n  const actual = longest(strings);\n  assert.equal(actual, expected);\n}\n\n// Test functions\nconst test_longest = () => {\n  const strings = [\n    '',\n    'a',\n    'aa',\n    'aaa',\n    'aaaa',\n    'aaaaa',\n    'aaaaaa',\n    'aaaaaaa',\n    'aaaaaaaa',\n    'aaaaaaaaa',\n    'aaaaaaaaaa'\n  ];\n  const expected = 'aaaaaaaaaa';\n  const actual = longest(strings);\n  assert.equal(actual, expected);\n}\n\n// Test suite\nconst suite = () => {\n  test();\n  interfaceTest();\n  test_longest();\n}\n\n// Execution\nconst execution = () => {\n  suite();\n}\n\n// Run script\nexecution();\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  } else if (b === 0) {\n    return a;\n  } else if (a === b) {\n    return a;\n  } else if (a > b) {\n    return greatestCommonDivisor(b, a % b);\n  } else {\n    return greatestCommonDivisor(a, b % a);\n  }\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a product of two integers a and b\n  >>> product(3, 5)\n  15\n  >>> product(25, 15)\n  450\n  */\nconst product = (a, b) => {\n  return a * b;\n};\n\n/* Return a sum of two integers a and b\n  >>> sum(3, 5)\n  8\n  >>> sum(25, 15)\n  70\n  */\nconst sum = (a, b) => {\n  return a + b;\n};\n\n/* Return the product of the elements of the array\n  >>> productArray([3, 5, 7])\n  42\n  */\nconst productArray = (array) => {\n  return array.reduce((acc, current) => {\n    return acc * current;\n  });\n};\n\n/* Return the sum of the elements of the array\n  >>> sumArray([3, 5, 7])\n  16\n  */\nconst sumArray = (array) => {\n  return array.reduce((acc, current) => {\n    return acc + current;\n  });\n};\n\n/* Return the sum of the squares of the elements of the array\n  >>> sumOfSquares([3, 5, 7])\n  72\n  */\nconst sumOfSquares = (array) => {\n  return array.reduce((acc, current) => {\n    return acc + current * current;\n  });\n};\n\n/* Return the difference between the sum of the squares and the sum of the\n   squares of the elements of the array\n  >>> differenceBetweenSquares([3, 5, 7])\n  22\n  */\nconst differenceBetweenSquares = (array) => {\n  return sumOfSquares(array) - sumOfSquares(array);\n};\n\n/* Return the difference between the sum of the squares of the elements of the\n   array and the sum of the squares of the elements of the array\n  >>> differenceBetweenSquaresArray([3, 5, 7])\n  8\n  */\nconst differenceBetweenSquaresArray = (array) => {\n  return sumOfSquaresArray(array) - sumOfSquaresArray(array);\n};\n\n/* Return the difference between the sum of the squares of the elements of the\n   array and the sum of the squares of the elements of the array\n  >>> differenceBetweenSquaresArray([3, 5, 7])\n  8\n  */\nconst differenceBetweenSquaresArray2 = (array) => {\n  return sumOfSquaresArray2(array) - sumOfSquaresArray2(array);\n};\n\n/* Return the sum of the squares of the elements of the array\n  >>> sumOfSquaresArray([3, 5, 7])\n  72\n  */\nconst sumOfSquaresArray = (array) => {\n  return array.reduce((acc, current) => {\n    return acc + current * current;\n  });\n};\n\n/* Return the sum of the squares of the elements of the array\n  >>> sumOfSquaresArray([3, 5, 7])\n  72\n  */\nconst sumOfSquaresArray2 = (array) => {\n  return array.reduce((acc, current) => {\n    return acc + current * current;\n  });\n};\n\n/* Return the difference between the sum of the squares of the elements of the\n   array and the sum of the squares of the elements of the array\n  >>> differenceBetweenSquaresArray([3, 5, 7])\n  22\n  */\nconst differenceBetweenSquaresArray = (array) => {\n  return sumOfSquaresArray(array) - sumOfSquaresArray(array);\n};\n\nmodule.exports = {\n  greatestCommonDivisor,\n  leastCommonMultiple,\n  product,\n  sum,\n  productArray,\n  sumArray,\n  sumOfSquares,\n  differenceBetweenSquares,\n  differenceBetweenSquaresArray,\n  differenceBetweenSquaresArray2,\n  sumOfSquaresArray,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  const i = 0;\n  const length = string.length;\n  while (i < length) {\n    const prefix = string.substring(0, i + 1);\n    prefixes.push(prefix);\n    i++;\n  }\n  return prefixes;\n};\n\nexport default allPrefixes;\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  while (n > 0) {\n    str +='' + n;\n    n--;\n  }\n  return str;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(5, 2)\n  '0 1 2 3 4 5'\n  >>> stringSequence(3, 2)\n  '0 1 2'\n  */\nconst stringSequence = (n, digits = 2) => {\n  let str = '';\n  while (n > 0) {\n    str +='' + n.toFixed(digits).toString();\n    n--;\n  }\n  return str;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3)\n  '0 1 2 3'\n  >>> stringSequence(5, 3)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, digits = 2) => {\n  let str = '';\n  while (n > 0) {\n    str +='' + n.toFixed(digits).toString();\n    n--;\n  }\n  return str;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 2)\n  '0 1'\n  >>> stringSequence(5, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, digits = 3) => {\n  let str = '';\n  while (n > 0) {\n    str +='' + n.toFixed(digits).toString();\n    n--;\n  }\n  return str;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 4)\n  '0 1 2 3 4'\n  >>> stringSequence(5, 4)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, digits = 4) => {\n  let str = '';\n  while (n > 0) {\n    str +='' + n.toFixed(digits).toString();\n    n--;\n  }\n  return str;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, digits = 5) => {\n  let str = '';\n  while (n > 0) {\n    str +='' + n.toFixed(digits).toString();\n    n--;\n  }\n  return str;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 6)\n  '0 1 2 3 4 5 6'\n  >>> stringSequence(5, 6)\n  '0 1 2 3 4 5 6'\n  */\nconst stringSequence = (n, digits = 6) => {\n  let str = '';\n  while (n > 0) {\n    str +='' + n.toFixed(digits).toString();\n    n--;\n  }\n  return str;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 7)\n  '0 1 2 3 4 5 6 7'\n  >>> stringSequence(5, 7)\n  '0 1 2 3 4 5 6 7'\n  */\nconst stringSequence = (n, digits = 7) => {\n  let str = '';\n  while (n > 0) {\n    str +='' + n.toFixed(digits).toString();\n    n--;\n  }\n  return str;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 8)\n  '0 1 2 3 4 5 6 7 8'\n  >>> stringSequence(5, 8)\n  '0 1 2 3 4 5 6 7 8'\n  */\nconst stringSequence = (n, digits = 8) => {\n  let str = '';\n  while (n > 0) {\n    str +='' + n.toFixed(digits).toString();\n    n--;\n  }\n  return str;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 9)\n  '0 1 2 3 4 5 6 7 8 9'\n  >>> stringSequence(5, 9)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence = (n, digits = 9) => {\n  let str = '';\n  while (n > 0) {\n    str +='' + n.toFixed(digits).toString();\n    n--;\n  }\n  return str;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 10)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  >>> stringSequence(5, 10)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequence = (n, digits = 10) => {\n  let str = '';\n  while (n > 0) {\n    str +='' + n.toFixed(digits).toString();\n    n--;\n  }\n  return str;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 11)\n  '0 1 2 3 4 5 6 7 8 9 10 11'\n  >>> stringSequence(5, 11)\n  '0 1 2 3 4 5 6 7 8 9 10 11'\n  */\nconst stringSequence = (n, digits = 11) => {\n  let str = '';\n  while (n > 0) {\n"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const counts = {};\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (counts[character] === undefined) {\n      counts[character] = 1;\n    } else {\n      counts[character]++;\n    }\n  }\n  return Object.keys(counts).length;\n};\n\nexport default countDistinctCharacters;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const regex = /^o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const pattern = new RegExp(substring, 'g');\n  let count = 0;\n  while (string.search(pattern)!== -1) {\n    count += 1;\n  }\n  return count;\n};\n\n/*\n  Given a string and a pattern, count how many times a given pattern appears in the string.\n  >>> howManyTimes('aaabbbccc', 'aa')\n  2\n  >>> howManyTimes('aaabbbccc', 'cc')\n  1\n  >>> howManyTimes('aaabbbccc', 'bb')\n  1\n  */\nconst howManyTimesWithPattern = (string, pattern) => {\n  let count = 0;\n  while (string.search(pattern)!== -1) {\n    count += 1;\n  }\n  return count;\n};\n\nmodule.exports = {\n  howManyTimes,\n  howManyTimesWithPattern,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n    const numbers = numbers.trim().split(\" \");\n    let numberArray = [];\n    for (let i = 0; i < numbers.length; i += 1) {\n        numberArray.push(parseInt(numbers[i]));\n    }\n    let sortedArray = numberArray.sort((a, b) => a - b);\n    return sortedArray.join(\"\");\n}\n\n/* Input will be a space-will delimitate string of numbers from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers2('three one five')\n  'one three five'\n  */\nconst sortNumbers2 = (numbers) => {\n    let numberArray = [];\n    const numbers = numbers.trim().split(\" \");\n    for (let i = 0; i < numbers.length; i += 1) {\n        numberArray.push(parseInt(numbers[i]));\n    }\n    let sortedArray = numberArray.sort((a, b) => a - b);\n    return sortedArray.join(\"\");\n}\n\n/* Input will be a space-will delimitate string of numbers from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers3('three one five')\n  'one three five'\n  */\nconst sortNumbers3 = (numbers) => {\n    const numbers = numbers.trim().split(\" \");\n    let numberArray = [];\n    for (let i = 0; i < numbers.length; i += 1) {\n        numberArray.push(parseInt(numbers[i]));\n    }\n    let sortedArray = numberArray.sort((a, b) => {\n        if (a === b) {\n            return 0;\n        } else if (a > b) {\n            return 1;\n        } else if (a < b) {\n            return -1;\n        }\n    });\n    return sortedArray.join(\"\");\n}\n\n/* Input will be a space-will delimitate string of numbers from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers4('three one five')\n  'one three five'\n  */\nconst sortNumbers4 = (numbers) => {\n    const numbers = numbers.trim().split(\" \");\n    let numberArray = [];\n    for (let i = 0; i < numbers.length; i += 1) {\n        numberArray.push(parseInt(numbers[i]));\n    }\n    let sortedArray = numberArray.sort((a, b) => {\n        if (a === b) {\n            return 0;\n        } else if (a > b) {\n            return 1;\n        } else if (a < b) {\n            return -1;\n        }\n    });\n    return sortedArray.join(\"\");\n}\n\n/* Input will be a space-will delimitate string of numbers from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers5('three one five')\n  'one three five'\n  */\nconst sortNumbers5 = (numbers) => {\n    const numbers = numbers.trim().split(\" \");\n    let numberArray = [];\n    for (let i = 0; i < numbers.length; i += 1) {\n        numberArray.push(parseInt(numbers[i]));\n    }\n    let sortedArray = numberArray.sort((a, b) => {\n        if (a === b) {\n            return 0;\n        } else if (a > b) {\n            return 1;\n        } else if (a < b) {\n            return -1;\n        }\n    });\n    return sortedArray.join(\"\");\n}\n\n/* Input will be a space-will delimitate string of numbers from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers6('three one five')\n  'one three five'\n  */\nconst sortNumbers6 = (numbers) => {\n    const numbers = numbers.trim().split(\" \");\n    let numberArray = [];\n    for (let i = 0; i < numbers.length; i += 1) {\n        numberArray.push(parseInt(numbers[i]));\n    }\n    let sortedArray = numberArray.sort((a, b) => {\n        if (a === b) {\n            return 0;\n        } else if (a > b) {\n            return 1;\n        } else if (a < b) {\n            return -1;\n        }\n    });\n    return sortedArray.join(\"\");\n}\n\n/* Input will be a space-will delimitate string of numbers from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers7('three one five')\n  'one three five'\n  */\nconst sortNumbers7 = (numbers) => {\n    const numbers = numbers.trim().split(\" \");\n    let numberArray = [];\n    for (let i = 0;"}
{"task_id": "JavaScript/20", "prompt": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n    const min = numbers[0];\n    const max = numbers[numbers.length - 1];\n    for (let i = 0; i < numbers.length - 1; i++) {\n        if (Math.abs(numbers[i] - min) < Math.abs(numbers[i + 1] - min)) {\n            min = numbers[i];\n        }\n        if (Math.abs(numbers[i] - max) < Math.abs(numbers[i + 1] - max)) {\n            max = numbers[i];\n        }\n    }\n    return [min, max];\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n    return numbers.map(x => x / (Math.max(x, 0) + 1));\n};\n\n/**\n * Given a list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1,\n   but the number of elements will be a constant.\n   e.g. [0.0, 1.0, 2.0, 3.0, 4.0, 5.0] will be changed to [0.0, 0.25, 0.5, 0.75, 1.0, 1.0]\n  >>> rescaleToUnitToConstant([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.0]\n  */\nconst rescaleToUnitToConstant = (numbers) => {\n    return numbers.map(x => (x - Math.min(numbers)) / (Math.max(numbers) - Math.min(numbers)));\n};\n\nconst getLinearRange = (list, offset, scale, getLinearFunction) => {\n    const start = list[offset];\n    const end = list[offset + 1];\n\n    const min = Math.min(start, end);\n    const max = Math.max(start, end);\n\n    const range = (max - min) * scale;\n\n    const linear = getLinearFunction(list, offset, min, max, range);\n\n    return [linear, range];\n};\n\nconst getLinearRangeByPercentage = (list, offset, scale, getLinearFunction) => {\n    const start = list[offset];\n    const end = list[offset + 1];\n\n    const min = Math.min(start, end);\n    const max = Math.max(start, end);\n\n    const range = (max - min) * scale;\n\n    const linear = getLinearFunction(list, offset, min, max, range);\n\n    return [linear, range * 100];\n};\n\nconst getLinearRangeByAbsolute = (list, offset, scale, getLinearFunction) => {\n    const start = list[offset];\n    const end = list[offset + 1];\n\n    const min = Math.min(start, end);\n    const max = Math.max(start, end);\n\n    const range = (max - min) * scale;\n\n    const linear = getLinearFunction(list, offset, min, max, range);\n\n    return [linear, range];\n};\n\nconst getLinearRangeByRelative = (list, offset, scale, getLinearFunction) => {\n    const start = list[offset];\n    const end = list[offset + 1];\n\n    const min = Math.min(start, end);\n    const max = Math.max(start, end);\n\n    const range = (max - min) * scale;\n\n    const linear = getLinearFunction(list, offset, min, max, range);\n\n    return [linear, range * 100];\n};\n\nconst getLinearRangeByPercentageByRelative = (list, offset, scale, getLinearFunction) => {\n    const start = list[offset];\n    const end = list[offset + 1];\n\n    const min = Math.min(start, end);\n    const max = Math.max(start, end);\n\n    const range = (max - min) * scale;\n\n    const linear = getLinearFunction(list, offset, min, max, range);\n\n    return [linear, range * 100];\n};\n\nconst getLinearRangeByPercentageByAbsolute = (list, offset, scale, getLinearFunction) => {\n    const start = list[offset];\n    const end = list[offset + 1];\n\n    const min = Math.min(start, end);\n    const max = Math.max(start, end);\n\n    const range = (max - min) * scale;\n\n    const linear = getLinearFunction(list, offset, min, max, range);\n\n    return [linear, range * 100];\n};\n\nconst getLinearRangeByPercentageByAbsoluteByRelative = (list, offset, scale, getLinearFunction) => {\n    const start = list[offset];\n    const end = list[offset + 1];\n\n    const min = Math.min(start, end);\n    const max = Math.max(start, end);\n\n    const range = (max - min) * scale;\n\n    const linear = getLinearFunction(list, offset, min, max, range);\n\n    return [linear, range * 100];\n};\n\nexport { rescaleToUnit, rescaleToUnitToConstant, getLinearRange, getLinearRangeByPercentage, getLinearRangeByAbsolute, getLinearRangeByRelative, getLinearRangeByPercentageByAbsolute, getLinearRangeByAbsoluteByRelative, getLinearRangeByPercentageByAbsoluteByRelative, getLinearRangeByPercentageByRelative, getLinearRangeByPercentageByRelativeByAbsolute };\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const ints = [];\n  for (const v of values) {\n    if (typeof v === 'number') {\n      ints.push(v);\n    }\n  }\n  return ints;\n};\n\n/*\n  >>> filter(filterIntegers, ['a', 3.14, 5])\n  [5]\n  >>> filter(filterIntegers, ['a', 3.14, 5])\n  [5]\n  >>> filter(filterIntegers, ['a', 3.14, 5])\n  [5]\n  >>> filter(filterIntegers, ['a', 3.14, 5])\n  [5]\n  */\nconst filter = (filterFn, values) => {\n  const filteredValues = [];\n  for (const v of values) {\n    if (filterFn(v)) {\n      filteredValues.push(v);\n    }\n  }\n  return filteredValues;\n};\n\n/*\n  >>> filter(filterIntegers, ['a', 3.14, 5])\n  [5]\n  >>> filter(filterIntegers, ['a', 3.14, 5])\n  [5]\n  >>> filter(filterIntegers, ['a', 3.14, 5])\n  [5]\n  >>> filter(filterIntegers, ['a', 3.14, 5])\n  [5]\n  */\nconst filter2 = (filterFn, values) => {\n  const filteredValues = [];\n  for (const v of values) {\n    if (filterFn(v)) {\n      filteredValues.push(v);\n    }\n  }\n  return filteredValues;\n};\n\n/*\n  >>> filter(filterIntegers, ['a', 3.14, 5])\n  [5]\n  >>> filter(filterIntegers, ['a', 3.14, 5])\n  [5]\n  >>> filter(filterIntegers, ['a', 3.14, 5])\n  [5]\n  >>> filter(filterIntegers, ['a', 3.14, 5])\n  [5]\n  */\nconst filter3 = (filterFn, values) => {\n  const filteredValues = [];\n  for (const v of values) {\n    if (filterFn(v)) {\n      filteredValues.push(v);\n    }\n  }\n  return filteredValues;\n};\n\nconst filter4 = (filterFn, values) => {\n  const filteredValues = [];\n  for (const v of values) {\n    if (filterFn(v)) {\n      filteredValues.push(v);\n    }\n  }\n  return filteredValues;\n};\n\n/*\n  >>> filter(filterIntegers, ['a', 3.14, 5])\n  [5]\n  >>> filter(filterIntegers, ['a', 3.14, 5])\n  [5]\n  >>> filter(filterIntegers, ['a', 3.14, 5])\n  [5]\n  >>> filter(filterIntegers, ['a', 3.14, 5])\n  [5]\n  */\nconst filter5 = (filterFn, values) => {\n  const filteredValues = [];\n  for (const v of values) {\n    if (filterFn(v)) {\n      filteredValues.push(v);\n    }\n  }\n  return filteredValues;\n};\n\nconst filter6 = (filterFn, values) => {\n  const filteredValues = [];\n  for (const v of values) {\n    if (filterFn(v)) {\n      filteredValues.push(v);\n    }\n  }\n  return filteredValues;\n};\n\nconst filter7 = (filterFn, values) => {\n  const filteredValues = [];\n  for (const v of values) {\n    if (filterFn(v)) {\n      filteredValues.push(v);\n    }\n  }\n  return filteredValues;\n};\n\nconst filter8 = (filterFn, values) => {\n  const filteredValues = [];\n  for (const v of values) {\n    if (filterFn(v)) {\n      filteredValues.push(v);\n    }\n  }\n  return filteredValues;\n};\n\nconst filter9 = (filterFn, values) => {\n  const filteredValues = [];\n  for (const v of values) {\n    if (filterFn(v)) {\n      filteredValues.push(v);\n    }\n  }\n  return filteredValues;\n};\n\nconst filter10 = (filterFn, values) => {\n  const filteredValues = [];\n  for (const v of values) {\n    if (filterFn(v)) {\n      filteredValues.push(v);\n    }\n  }\n  return filteredValues;\n};\n\nconst filter11 = (filterFn, values) => {\n  const filteredValues = [];\n  for (const v of values) {\n    if (filterFn(v)) {\n      filteredValues.push(v);\n    }\n  }\n  return filteredValues;\n};\n\nconst filter12 = (filterFn, values) => {\n  const filteredValues = [];\n  for (const v of values) {\n    if (filterFn(v)) {\n      filteredValues.push(v);\n    }\n  }\n  return filteredValues;\n};\n\nconst filter13 = (filterFn, values) => {\n  const filteredValues = [];\n  for (const v of values) {\n    if (filterFn(v)) {\n      filteredValues.push(v);\n    }\n  }\n  return filteredValues;\n};\n\nconst filter14 = (filterFn, values) => {\n  const filteredValues = [];\n  for (const v of values) {\n    if (filterFn(v)) {\n      filteredValues.push(v);\n    }\n  }\n  return filteredValues;\n};\n\nconst filter15 = (filterFn, values) => {\n  const filteredValues = [];\n  for (const v of values) {\n    if (filterFn(v)) {\n      filteredValues.push(v);\n    }\n  }\n  return filteredValues;\n};\n\nconst filter16 = (filterFn, values) => {\n"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n}\n\n// Return the first index of a substring\nconst index = (string, substr) => {\n  return string.indexOf(substr);\n}\n\n// Return the last index of a substring\nconst lastIndex = (string, substr) => {\n  return string.lastIndexOf(substr);\n}\n\n// Return the number of occurrences of a substring\nconst count = (string, substr) => {\n  return string.count(substr);\n}\n\n// Return a copy of a string with all whitespace characters replaced by a space\nconst trim = (string) => {\n  return string.replace(/\\s+/g,'');\n}\n\n// Return a copy of a string with leading and trailing whitespace removed\nconst trimLeft = (string) => {\n  return string.replace(/^\\s+/, '');\n}\n\n// Return a copy of a string with leading and trailing whitespace removed\nconst trimRight = (string) => {\n  return string.replace(/\\s+$/, '');\n}\n\n// Return the upper case form of a string\nconst ucfirst = (string) => {\n  return string.toUpperCase();\n}\n\n// Return the lower case form of a string\nconst lcfirst = (string) => {\n  return string.toLowerCase();\n}\n\n// Return a copy of a string with all occurrences of a character replaced by another\nconst replace = (string, oldChar, newChar) => {\n  return string.replace(new RegExp(oldChar, 'g'), newChar);\n}\n\n// Return a copy of a string with all occurrences of a character replaced by another,\n// but only if the character is not preceded by the replacement string\nconst replaceInline = (string, oldChar, newChar) => {\n  return replace(string, oldChar, newChar)\n   .replace(new RegExp(newChar + '{2}', 'g'), newChar);\n}\n\n// Return the character at a given index\nconst charAt = (string, index) => {\n  return string.charAt(index);\n}\n\n// Return the character at a given index, or a default character if that index is out of bounds\nconst charAtOr = (string, index, def) => {\n  return index >= 0 && index < string.length? string.charAt(index) : def;\n}\n\n// Return the first index of a character in a string, or -1 if that character is not found\nconst indexOf = (string, char) => {\n  return string.indexOf(char);\n}\n\n// Return the last index of a character in a string, or -1 if that character is not found\nconst lastIndexOf = (string, char) => {\n  return string.lastIndexOf(char);\n}\n\n// Return a copy of a string with all occurrences of a character replaced by a replacement string\nconst replaceAll = (string, oldChar, newChar) => {\n  return string.replace(new RegExp(oldChar, 'g'), newChar);\n}\n\n// Return a copy of a string with all occurrences of a character replaced by a replacement string,\n// but only if the character is not preceded by the replacement string\nconst replaceAllInline = (string, oldChar, newChar) => {\n  return replaceAll(string, oldChar, newChar)\n   .replace(new RegExp(newChar + '{2}', 'g'), newChar);\n}\n\n// Return a copy of a string with all leading and trailing whitespace removed\nconst trimAll = (string) => {\n  return string.replace(/^\\s+|\\s+$/g, '');\n}\n\n// Return a copy of a string with all leading and trailing newlines removed\nconst trimAllNewlines = (string) => {\n  return string.replace(/\\r\\n|\\n/g,'');\n}\n\n// Return a copy of a string with all leading and trailing spaces removed\nconst trimAllSpaces = (string) => {\n  return string.replace(/^\\s+|\\s+$/g, '');\n}\n\n// Return a copy of a string with all leading and trailing characters removed\nconst trimAllCharacters = (string, chars) => {\n  return string.replace(new RegExp('[' + chars + ']+$', 'g'), '');\n}\n\n// Return a copy of a string with all leading and trailing characters removed,\n// but only if they are not preceded by the replacement string\nconst trimAllCharactersInline = (string, chars) => {\n  return replaceAll(string, new RegExp('[' + chars + ']+$', 'g'), '');\n}\n\n// Return a copy of a string with all occurrences of a character removed\nconst remove = (string, char) => {\n  return string.replace(new RegExp(char, 'g'), '');\n}\n\n// Return a copy of a string with all occurrences of a character removed,\n// but only if that character is not preceded by the replacement string\nconst removeInline = (string, char) => {\n  return replaceAll(string, new RegExp(char + '{2}', 'g'), '');\n}\n\n// Return a copy of a string with all leading and trailing characters removed\nconst removeAll = (string, chars) => {\n  return string.replace(new RegExp('[' + chars + ']+$', 'g'), '');\n}\n\n// Return a copy of a string with all leading and trailing characters removed,\n// but only if they are not preceded by the replacement string\nconst removeAllInline = (string, chars) => {\n  return replaceAll(string, new RegExp('[' + chars + ']+$', 'g'), '');\n}\n\n// Return the number of newline characters in a string\nconst countNewlines = (string) => {\n  return string.match(/\\r\\n|\\n/g).length;\n}\n\n// Return the number of spaces in a string\nconst countSpaces = (string) => {\n  return string.match(/\\s+/g).length;\n}\n\n// Return the number of characters in a string\nconst countCharacters = (string) => {\n  return string.length;\n}\n\n// Return a copy of a string with all leading and trailing whitespace removed\nconst trimAll = (string) => {\n  return string.replace(/^\\s+|\\s+$/g, '');\n}\n\n//"}
{"task_id": "JavaScript/24", "prompt": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let i = 1;\n  let res = 1;\n  while (n > 0) {\n    if (n % i === 0) {\n      if (i < res) {\n        res = i;\n      }\n    }\n    i++;\n  }\n  return res;\n};\n\n/* For a will give number n, will find the largest number that is the perfect square, smaller than n\n  >>> largestPerfectSquare(15)\n  4\n  >>> largestPerfectSquare(20)\n  16\n  */\nconst largestPerfectSquare = (n) => {\n  let res = 1;\n  while (n > 0) {\n    let i = largestDivisor(n);\n    if (i * i === n) {\n      res = n;\n      break;\n    }\n    n = n - i;\n  }\n  return res;\n};\n\nmodule.exports = largestPerfectSquare;\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  if (n === 1) return [1]\n  if (n === 2) return [2]\n  if (n === 3) return [3]\n  const factors = []\n  const curr = 2\n  while (curr * curr <= n) {\n    if (n % curr === 0) {\n      factors.push([curr, Math.floor(n / curr)])\n      if (n === curr) {\n        break\n      }\n    }\n    curr++\n  }\n  return factors\n}\n\nexport default factorize\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  let currentNumber = -1;\n  for(let i = 0; i < numbers.length; i++){\n    if(numbers[i]!== currentNumber){\n      currentNumber = numbers[i];\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\nexport {removeDuplicates};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2').toUpperCase().replace(/^[A-Z]|[A-Z]$/g, '$1-$2').toLowerCase();\n};\n\n/*\n  * For a will give string, will remove all non-alphanumeric characters.\n  * If the string contains a period, will also remove the period.\n  * Will remove all spaces.\n  * Will also remove all single quotation marks and double quotation marks.\n  * Will also remove all single and double apostrophes.\n  * Will also remove all periods, except for the last one.\n  * Will also remove all carriage returns.\n  * Will also remove all tabs.\n  * Will also remove all colons.\n  * Will also remove all newlines.\n  * Will also remove all non-alphanumeric characters.\n  * Will also remove all non-alphanumeric characters, except for the period.\n  * Will also remove all spaces, except for the last one.\n  * Will also remove all single and double apostrophes.\n  * Will also remove all single and double quotation marks.\n  * Will also remove all single and double apostrophes.\n  * Will also remove all single and double quotation marks.\n  * Will also remove all newlines.\n  * Will also remove all colons.\n  * Will also remove all carriage returns.\n  * Will also remove all tabs.\n  * Will also remove all colons.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all non-alphanumeric characters.\n  * Will also remove all newlines.\n  * Will also remove all non-alphanumeric characters.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n  * Will also remove all newlines.\n"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n    const len = strings.length\n    if (len === 0) return ''\n    let result = ''\n    strings.forEach((string) => {\n        result += string\n    })\n    return result\n}\n\n/*\n  >>> add(1, 2)\n  3\n  >>> add(1, 2, 3)\n  6\n  >>> add(1, 2, 3, 4)\n  9\n  >>> add(1, 2, 3, 4, 5)\n  12\n  >>> add(1, 2, 3, 4, 5, 6)\n  15\n  >>> add(1, 2, 3, 4, 5, 6, 7)\n  21\n  >>> add(1, 2, 3, 4, 5, 6, 7, 8)\n  28\n  >>> add(1, 2, 3, 4, 5, 6, 7, 8, 9)\n  36\n  >>> add(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  45\n  >>> add(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n  54\n  */\nconst add = (...args) => {\n    return args.reduce((sum, arg) => sum + arg)\n}\n\n/*\n  >>> subtract(4, 2)\n  2\n  >>> subtract(4, 2, 3)\n  2\n  >>> subtract(4, 2, 3, 4)\n  2\n  >>> subtract(4, 2, 3, 4, 5)\n  2\n  >>> subtract(4, 2, 3, 4, 5, 6)\n  2\n  >>> subtract(4, 2, 3, 4, 5, 6, 7)\n  2\n  >>> subtract(4, 2, 3, 4, 5, 6, 7, 8)\n  2\n  >>> subtract(4, 2, 3, 4, 5, 6, 7, 8, 9)\n  2\n  >>> subtract(4, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  2\n  >>> subtract(4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n  2\n  */\nconst subtract = (...args) => {\n    return args.reduce((sum, arg) => sum - arg)\n}\n\n/*\n  >>> multiply(4, 2)\n  8\n  >>> multiply(4, 2, 3)\n  12\n  >>> multiply(4, 2, 3, 4)\n  16\n  >>> multiply(4, 2, 3, 4, 5)\n  20\n  >>> multiply(4, 2, 3, 4, 5, 6)\n  24\n  >>> multiply(4, 2, 3, 4, 5, 6, 7)\n  28\n  >>> multiply(4, 2, 3, 4, 5, 6, 7, 8)\n  32\n  >>> multiply(4, 2, 3, 4, 5, 6, 7, 8, 9)\n  36\n  >>> multiply(4, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  40\n  >>> multiply(4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n  44\n  */\nconst multiply = (...args) => {\n    return args.reduce((sum, arg) => sum * arg)\n}\n\n/*\n  >>> divide(24, 2)\n  12\n  >>> divide(24, 2, 3)\n  12\n  >>> divide(24, 2, 3, 4)\n  12\n  >>> divide(24, 2, 3, 4, 5)\n  12\n  >>> divide(24, 2, 3, 4, 5, 6)\n  12\n  >>> divide(24, 2, 3, 4, 5, 6, 7)\n  12\n  >>> divide(24, 2, 3, 4, 5, 6, 7, 8)\n  12\n  >>> divide(24, 2, 3, 4, 5, 6, 7, 8, 9)\n  12\n  >>> divide(24, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  12\n  >>> divide(24, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n  12\n  */\nconst divide = (...args) => {\n    return args.reduce((sum, arg) => sum / arg)\n}\n\n/*\n  >>> subtract(4, subtract(4, 2))\n  2\n  >>> subtract(4, subtract(4, 2, 3))\n  2\n  >>> subtract(4, subtract(4, 2, 3, 4))\n  2\n  >>> subtract(4, subtract(4, 2, 3, 4, 5))\n  2\n  >>> subtract(4, subtract(4, 2, 3, 4, 5, 6))\n  2\n  >>> subtract(4, subtract(4, 2, 3, 4, 5, 6, 7))\n  2\n  >>> subtract(4, subtract(4, 2, 3, 4, 5, 6, 7, 8))\n  2\n  >>> subtract(4, subtract(4, 2, 3, 4, 5, 6, 7, 8, 9))\n  2\n  >>> subtract(4, subtract(4, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n  2\n  >>> subtract(4, subtract(4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\n  2\n  */\nconst subtract = (...args) => {\n    return args.reduce((sum, arg) => sum - arg)\n}\n\n/*\n  >>> multiply(4, multiply(2, 3))\n  12\n  >>> multiply(4, multiply(2, 3, 4))\n  24\n  >>> multiply(4, multiply(2, 3, 4, 5))\n  48\n  >>> multiply(4, multiply(2, 3, 4, 5, 6))\n  72\n  >>> multiply(4, multiply(2, 3, 4, 5, 6, 7))\n  96\n  >>> multiply(4, multiply(2, 3, 4, 5, 6, 7, 8))\n  128\n  >>> multiply(4, multiply(2, 3, 4, 5, 6, 7, 8, 9))\n  144\n  >>> multiply(4"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n}\n\n/*\n  * Filter an input list of strings for ones that contains the given prefix.\n  *\n  * @param {string} prefix - prefix to search for\n  * @param {Array} strings - input strings to filter\n  * @returns {Array} - the filtered strings\n  */\nconst filterByContains = (prefix, strings) => {\n  return strings.filter(s => s.contains(prefix));\n}\n\n/*\n  * Filter an input list of strings for ones that contains the given prefix.\n  *\n  * @param {string} prefix - prefix to search for\n  * @param {Array} strings - input strings to filter\n  * @returns {Array} - the filtered strings\n  */\nconst filterByPrefixAndContains = (prefix, strings) => {\n  return strings.filter(s => s.startsWith(prefix) && s.contains(prefix));\n}\n\n/*\n  * Filter an input list of strings for ones that contains the given prefix.\n  *\n  * @param {string} prefix - prefix to search for\n  * @param {Array} strings - input strings to filter\n  * @returns {Array} - the filtered strings\n  */\nconst filterByContainsAndPrefix = (prefix, strings) => {\n  return strings.filter(s => s.contains(prefix) && s.startsWith(prefix));\n}\n\n/*\n  * Filter an input list of strings for ones that contain the given prefix.\n  *\n  * @param {string} prefix - prefix to search for\n  * @param {Array} strings - input strings to filter\n  * @returns {Array} - the filtered strings\n  */\nconst filterByContainsAndPrefixAndContains = (prefix, strings) => {\n  return strings.filter(s => s.contains(prefix) && s.startsWith(prefix) && s.contains(prefix));\n}\n\n/*\n  * Filter an input list of strings for ones that contain the given prefix.\n  *\n  * @param {string} prefix - prefix to search for\n  * @param {Array} strings - input strings to filter\n  * @returns {Array} - the filtered strings\n  */\nconst filterByPrefixContainsAndContains = (prefix, strings) => {\n  return strings.filter(s => s.startsWith(prefix) && s.contains(prefix) && s.contains(prefix));\n}\n\n/*\n  * Filter an input list of strings for ones that contain the given prefix.\n  *\n  * @param {string} prefix - prefix to search for\n  * @param {Array} strings - input strings to filter\n  * @returns {Array} - the filtered strings\n  */\nconst filterByContainsPrefixAndContains = (prefix, strings) => {\n  return strings.filter(s => s.contains(prefix) && s.startsWith(prefix) && s.contains(prefix));\n}\n\n/*\n  * Filter an input list of strings for ones that contain the given prefix.\n  *\n  * @param {string} prefix - prefix to search for\n  * @param {Array} strings - input strings to filter\n  * @returns {Array} - the filtered strings\n  */\nconst filterByContainsPrefixAndContainsAndPrefix = (prefix, strings) => {\n  return strings.filter(s => s.contains(prefix) && s.startsWith(prefix) && s.contains(prefix));\n}\n\n/*\n  * Filter an input list of strings for ones that contain the given prefix.\n  *\n  * @param {string} prefix - prefix to search for\n  * @param {Array} strings - input strings to filter\n  * @returns {Array} - the filtered strings\n  */\nconst filterByContainsPrefixAndContainsAndPrefixAndContains = (prefix, strings) => {\n  return strings.filter(s => s.contains(prefix) && s.startsWith(prefix) && s.contains(prefix) && s.contains(prefix));\n}\n\n/*\n  * Filter an input list of strings for ones that contain the given prefix.\n  *\n  * @param {string} prefix - prefix to search for\n  * @param {Array} strings - input strings to filter\n  * @returns {Array} - the filtered strings\n  */\nconst filterByContainsPrefixAndContainsAndPrefixAndContains = (prefix, strings) => {\n  return strings.filter(s => s.contains(prefix) && s.startsWith(prefix) && s.contains(prefix) && s.contains(prefix));\n}\n\n/*\n  * Filter an input list of strings for ones that contain the given prefix.\n  *\n  * @param {string} prefix - prefix to search for\n  * @param {Array} strings - input strings to filter\n  * @returns {Array} - the filtered strings\n  */\nconst filterByContainsPrefixAndContainsAndPrefixAndContainsAndContains = (prefix, strings) => {\n  return strings.filter(s => s.contains(prefix) && s.startsWith(prefix) && s.contains(prefix) && s.contains(prefix) && s.contains(prefix));\n}\n\n/*\n  * Filter an input list of strings for ones that contain the given prefix.\n  *\n  * @param {string} prefix - prefix to search for\n  * @param {Array} strings - input strings to filter\n  * @returns {Array} - the filtered strings\n  */\nconst filterByContainsPrefixAndContainsAndPrefixAndContainsAndContains = (prefix, strings) => {\n  return strings.filter(s => s.contains(prefix) && s.startsWith(prefix) && s.contains(prefix) && s.contains(prefix) && s.contains(prefix) && s.contains(prefix));\n}\n\n/*\n  * Filter an input list of strings for ones that contain the given prefix.\n  *\n  * @param {string} prefix - prefix to search for\n  * @param {Array} strings - input strings to filter\n  "}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((x) => x > 0);\n}\n\n/*\n  >>> getOdd([1, 2, 3, 4, 5, 6, 7])\n  [1, 3, 5, 7]\n  >>> getOdd([-1, 2, -4, 5, 6])\n  [-1, 2, 5, 6]\n  >>> getOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, 9, 123, 1]\n  */\nconst getOdd = (l) => {\n  return l.filter((x) => x % 2 === 1);\n}\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7])\n  [2, 4, 6]\n  >>> getEven([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> getEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [2, 4, 6, 9, 123, 1]\n  */\nconst getEven = (l) => {\n  return l.filter((x) => x % 2 === 0);\n}\n\n/*\n  >>> getNums(1, 2, 3, 4, 5, 6, 7)\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> getNums([1, 2, 3, 4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> getNums([-1, 2, -4, 5, 6])\n  [-1, 2, 5, 6]\n  >>> getNums([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, 9, 123, 1]\n  */\nconst getNums = (l) => {\n  return l.filter((x) => x >= 0);\n}\n\n/*\n  >>> getDecimals(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7)\n  [1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7]\n  >>> getDecimals([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7])\n  [1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7]\n  >>> getDecimals([-1.1, 2.2, -4.4, 5.5, 6.6])\n  [-1.1, 2.2, 5.5, 6.6]\n  >>> getDecimals([5.5, 3.3, -5.5, 2.2, -3.3, 3.9, 9.0, 0.123, 1.0, -10.0])\n  [5.5, 3.3, -5.5, 2.2, 9.0, 123.0, 1.0]\n  */\nconst getDecimals = (l) => {\n  return l.map((x) => x.toFixed(2));\n}\n\n/*\n  >>> getLongest(1, 2, 3, 4, 5, 6, 7)\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> getLongest([1, 2, 3, 4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> getLongest([-1, 2, -4, 5, 6])\n  [-1, 2, 5, 6]\n  >>> getLongest([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, 9, 123, 1]\n  */\nconst getLongest = (l) => {\n  return getNums(l).sort((a, b) => a - b)[0];\n}\n\n/*\n  >>> getShortest(1, 2, 3, 4, 5, 6, 7)\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> getShortest([1, 2, 3, 4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> getShortest([-1, 2, -4, 5, 6])\n  [-1, 2, 5, 6]\n  >>> getShortest([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, 9, 123, 1]\n  */\nconst getShortest = (l) => {\n  return getNums(l).sort((a, b) => b - a)[0];\n}\n\nexport {\n  getPositive,\n  getOdd,\n  getEven,\n  getNums,\n  getDecimals,\n  getLongest,\n  getShortest\n};\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*Return prime number.\n  >>> nextPrime(1)\n  2\n  >>> nextPrime(2)\n  2\n  >>> nextPrime(3)\n  3\n  >>> nextPrime(4)\n  5\n  >>> nextPrime(5)\n  5\n  >>> nextPrime(6)\n  7\n  >>> nextPrime(7)\n  7\n  >>> nextPrime(8)\n  11\n  >>> nextPrime(9)\n  11\n  >>> nextPrime(10)\n  13\n  >>> nextPrime(11)\n  13\n  >>> nextPrime(12)\n  17\n  >>> nextPrime(13)\n  17\n  >>> nextPrime(14)\n  19\n  >>> nextPrime(15)\n  19\n  >>> nextPrime(16)\n  23\n  >>> nextPrime(17)\n  23\n  >>> nextPrime(18)\n  29\n  >>> nextPrime(19)\n  29\n  >>> nextPrime(20)\n  31\n  >>> nextPrime(21)\n  31\n  >>> nextPrime(22)\n  37\n  >>> nextPrime(23)\n  37\n  >>> nextPrime(24)\n  41\n  >>> nextPrime(25)\n  41\n  >>> nextPrime(26)\n  43\n  >>> nextPrime(27)\n  43\n  >>> nextPrime(28)\n  47\n  >>> nextPrime(29)\n  47\n  >>> nextPrime(30)\n  53\n  >>> nextPrime(31)\n  53\n  >>> nextPrime(32)\n  59\n  >>> nextPrime(33)\n  59\n  >>> nextPrime(34)\n  67\n  >>> nextPrime(35)\n  67\n  >>> nextPrime(36)\n  71\n  >>> nextPrime(37)\n  71\n  >>> nextPrime(38)\n  79\n  >>> nextPrime(39)\n  79\n  >>> nextPrime(40)\n  83\n  >>> nextPrime(41)\n  83\n  >>> nextPrime(42)\n  89\n  >>> nextPrime(43)\n  89\n  >>> nextPrime(44)\n  97\n  >>> nextPrime(45)\n  97\n  >>> nextPrime(46)\n  101\n  >>> nextPrime(47)\n  101\n  >>> nextPrime(48)\n  103\n  >>> nextPrime(49)\n  103\n  >>> nextPrime(50)\n  107\n  >>> nextPrime(51)\n  107\n  >>> nextPrime(52)\n  109\n  >>> nextPrime(53)\n  109\n  >>> nextPrime(54)\n  113\n  >>> nextPrime(55)\n  113\n  >>> nextPrime(56)\n  119\n  >>> nextPrime(57)\n  119\n  >>> nextPrime(58)\n  127\n  >>> nextPrime(59)\n  127\n  >>> nextPrime(60)\n  131\n  >>> nextPrime(61)\n  131\n  >>> nextPrime(62)\n  137\n  >>> nextPrime(63)\n  137\n  >>> nextPrime(64)\n  139\n  >>> nextPrime(65)\n  139\n  >>> nextPrime(66)\n  143\n  >>> nextPrime(67)\n  143\n  >>> nextPrime(68)\n  147\n  >>> nextPrime(69)\n  147\n  >>> nextPrime(70)\n  151\n  >>> nextPrime(71)\n  151\n  >>> nextPrime(72)\n  157\n  >>> nextPrime(73)\n  157\n  >>> nextPrime(74)\n  163\n  >>> nextPrime(75)\n  163\n  >>> nextPrime(76)\n  169\n  >>> nextPrime(77)\n  169\n  >>> nextPrime(78)\n  173\n  >>> nextPrime(79)\n  173\n  >>> nextPrime(80)\n  179\n  >>> nextPrime(81)\n  179\n  >>> nextPrime(82)\n  187\n  >>> nextPrime(83)\n  187\n  >>> nextPrime(84)\n  191\n  >>> nextPrime(85)\n  191\n  >>> nextPrime(86)\n  193\n  >>> nextPrime(87)\n  193\n  >>> nextPrime(88)\n  197\n  >>> nextPrime(89)\n  197\n  >>> nextPrime(90)\n  199\n  >>> nextPrime(91)\n  199\n  >>> nextPrime(92)\n  203\n  >>> nextPrime(93)\n  203\n  >>> nextPrime(94)\n  207\n  >>> nextPrime(95)\n  207\n  >>> nextPrime(96)\n  211\n  >>> nextPrime(97)\n  211\n  >>> nextPrime(98)\n  223\n  >>> nextPrime(99)\n  223\n  >>> nextPrime(100)\n  227\n  >>> nextPrime(101)\n  227\n  >>> nextPrime(102)\n  229\n  >>> nextPrime(103)\n  229\n  >>> nextPrime(104)\n  233\n  >>> nextPrime(105)\n  233\n  >>> nextPrime(106)\n  239\n  >>> nextPrime(107)\n  239\n  >>> nextPrime(108)\n  243\n  >>> nextPrime(109)\n  243\n  >>> nextPrime(110)\n  247\n  >>> nextPrime(111)\n  247\n  >>> nextPrime(112)\n  251\n  >>> nextPrime(113)\n  251\n  >>> nextPrime(114)\n  257\n  >>> nextPrime(115)\n  257\n  >>> nextPrime(116)\n  263\n  >>> nextPrime(117)\n  263\n  >>> nextPrime(118)\n  269\n  >>> nextPrime(119)\n  269\n  >>> nextPrime(120)\n  271\n  >>> nextPrime(121)\n  271\n  >>> nextPrime(122)\n  277\n  >>> nextPrime(123)\n  277\n  "}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n    let p = 0;\n    for (let i = 0; i < xs.length; i++) {\n        if (xs[i] === 0) {\n            p = i;\n        }\n    }\n    let a = xs[p + 1];\n    let b = xs[p + 2];\n    let c = xs[p + 3];\n    let n = a;\n    let m = b;\n    let k = c;\n    let maxN = Math.pow(a, p) + Math.pow(b, p) + Math.pow(c, p);\n    let x = (n + m) / 2;\n    while (x < maxN) {\n        let n1 = (n - a) / b;\n        let m1 = (m - b) / c;\n        if (n1 > m1) {\n            n = n1;\n        } else {\n            m = m1;\n        }\n        x = (n + m) / 2;\n    }\n    return x;\n}\n\nconst findNthZero = (xs, n) => {\n    let p = 0;\n    for (let i = 0; i < xs.length; i++) {\n        if (xs[i] === 0) {\n            p = i;\n            if (n === 0) {\n                return xs[p];\n            }\n            n--;\n        }\n    }\n}\n\n/*\n  Given an array a of length n, return the nth to last element of the array.\n  In other words, return the nth to last element of the reversed array.\n  */\nconst reverseNthToLast = (a, n) => {\n    let result = 0;\n    for (let i = 0; i < n; i++) {\n        result = a[a.length - i - 1];\n    }\n    return result;\n}\n\n/*\n  Given an array a of length n, return the nth to last element of the array.\n  In other words, return the nth to last element of the reversed array.\n  */\nconst reverseNthToLast = (a, n) => {\n    let result = 0;\n    for (let i = 0; i < n; i++) {\n        result = a[a.length - i - 1];\n    }\n    return result;\n}\n\n/*\n  Given an array a of length n, return the nth to last element of the array.\n  In other words, return the nth to last element of the reversed array.\n  */\nconst reverseNthToLast = (a, n) => {\n    let result = 0;\n    for (let i = 0; i < n; i++) {\n        result = a[a.length - i - 1];\n    }\n    return result;\n}\n\n/*\n  Given an array a of length n, return the nth to last element of the array.\n  In other words, return the nth to last element of the reversed array.\n  */\nconst reverseNthToLast = (a, n) => {\n    let result = 0;\n    for (let i = 0; i < n; i++) {\n        result = a[a.length - i - 1];\n    }\n    return result;\n}\n\n/*\n  Given an array a of length n, return the nth to last element of the array.\n  In other words, return the nth to last element of the reversed array.\n  */\nconst reverseNthToLast = (a, n) => {\n    let result = 0;\n    for (let i = 0; i < n; i++) {\n        result = a[a.length - i - 1];\n    }\n    return result;\n}\n\nconst arrayIndexOf = (a, item) => {\n    let index = -1;\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === item) {\n            index = i;\n        }\n    }\n    return index;\n}\n\n/*\n Given an array a of length n, return the nth to last element of the array.\n In other words, return the nth to last element of the reversed array.\n */\nconst reverseNthToLast = (a, n) => {\n    let result = 0;\n    for (let i = 0; i < n; i++) {\n        result = a[a.length - i - 1];\n    }\n    return result;\n}\n\n/*\n  Given an array a of length n, return the nth to last element of the array.\n  In other words, return the nth to last element of the reversed array.\n  */\nconst reverseNthToLast = (a, n) => {\n    let result = 0;\n    for (let i = 0; i < n; i++) {\n        result = a[a.length - i - 1];\n    }\n    return result;\n}\n\n/*\n Given an array a of length n, return the nth to last element of the array.\n In other words, return the nth to last element of the reversed array.\n */\nconst reverseNthToLast = (a, n) => {\n    let result = 0;\n    for (let i = 0; i < n; i++) {"}
{"task_id": "JavaScript/33", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    const arr = l.slice(0);\n    const lOut = [];\n    let count = 0;\n    while(count < arr.length) {\n        if(arr[count] % 3 === 0) {\n            lOut.push(arr[count]);\n        }\n        count++;\n    }\n    lOut.sort();\n    return lOut;\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * @description Given a number, return the largest number that can be divided by 3 and also by 5.\n  * @example\n  * largestNumberDivisibleBy5And3(5)\n  * // => 3\n  * largestNumberDivisibleBy5And3(15)\n  * // => 15\n  */\nconst largestNumberDivisibleBy5And3 = (n) => {\n    const arr = [];\n    let count = 0;\n    while(count < n) {\n        if(n % 5 === 0 && n % 3 === 0) {\n            arr.push(n);\n        }\n        n++;\n    }\n    return arr[arr.length - 1];\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * @description Given a number, return the largest number that can be divided by 3 and also by 5.\n  * @example\n  * largestNumberDivisibleBy5And3(5)\n  * // => 3\n  * largestNumberDivisibleBy5And3(15)\n  * // => 15\n  */\nconst largestNumberDivisibleBy3 = (n) => {\n    const arr = [];\n    let count = 0;\n    while(count < n) {\n        if(n % 3 === 0) {\n            arr.push(n);\n        }\n        n++;\n    }\n    return arr[arr.length - 1];\n}\n\nexport {\n    largestNumberDivisibleBy3,\n    largestNumberDivisibleBy5And3,\n    sortThird\n}<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const sorted = l.slice().sort()\n  return sorted.filter((n, i) => i === 0 || n!== sorted[i - 1])\n}\n\nexport {\n  unique,\n  isUnique\n}\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const sorted = Array.from(l).sort();\n  return sorted[sorted.length - 1];\n};\n\nmodule.exports = maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const divisor = (n + 1) % 3? (n + 1) % 5? n + 1 : 5 : 3;\n  return (n % divisor === 0)? 1 : 0;\n}\n\nmodule.exports = fizzBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let evens = [], odd = [], i = 0;\n  for (i = 0; i < l.length; i += 2) {\n    evens.push(l[i]);\n  }\n  for (i = 1; i < l.length; i += 2) {\n    odd.push(l[i]);\n  }\n  return evens.concat(odd);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= [];\n   for (const group of s.split('')){ \n     groups.push(group);\n  } \n   for (const group of groups){ \n     if (group.length== 2) \n       groups2.push(groups[groups2.length-1] + group[0]);\n     else \n       groups2.push(groups[groups2.length-1] + group[0] + groups[groups2.length-1]);\n  } \n  return groups2.join('');\n}\n\n/*\n  returns string of length will be n, will be made by repeating characters. \n  */ \n const makeString= (n)=>{\n   const chars= ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n   return chars.slice(0, n).join('');\n}\n\n/*\n  returns string will be of length will be n, will be made by repeating characters. \n  */ \n const makeString_2= (n)=>{\n   const chars= ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n   return chars.slice(0, n).join('');\n}\n\n/*\n  returns will encode string by repeating groups of three characters. \n  */ \n const encodeRepeating= (s)=>{\n   var groups= [], groups2= [];\n   for (const group of s.split('')){ \n     groups.push(group);\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n  return groups2.join('');\n}\n\n/*\n  returns string will be of length will be n, will be made by repeating characters. \n  */ \n const decodeRepeating= (s)=>{\n   const groups= [], groups2= [];\n   for (const group of s.split('')){ \n     groups.push(group);\n  } \n  for (const group of groups){ \n    if (group.length== 2) \n      groups2.push(groups[groups2.length-1] + group[0]);\n    else \n      groups2.push(groups[groups2.length-1] + group[0] + groups[groups2.length-1]);\n  } \n  return groups2.join('');\n}\n\n\n\n\n\n\n\n/*\n  returns will encode string by repeating groups of three characters. \n  */ \n const encodeRepeating2= (s)=>{\n   var groups= [], groups2= [];\n   for (const group of s.split('')){ \n     groups.push(group);\n  } \n  for (const group of groups){ \n    if (group.length== 3) \n      groups2.push(group.slice(1)+ group[0]);\n    else \n      groups2.push(group);\n  } \n  return groups2.join('');\n}\n\n/*\n  returns string will be of length will be n, will be made by repeating characters. \n  */ \n const decodeRepeating2= (s)=>{\n   const groups= [], groups2= [];\n   for (const group of s.split('')){ \n     groups.push(group);\n  } \n  for (const group of groups){ \n    if (group.length== 2) \n      groups2.push(groups[groups2.length-1] + group[0]);\n    else \n      groups2.push(groups[groups2.length-1] + group[0] + groups[groups2.length-1]);\n  } \n  return groups2.join('');\n}\n\n\n\n/*\n  returns will encode string by repeating groups of three characters. \n  */ \n const encodeRepeating3= (s)=>{\n   var groups= [], groups2= [];\n   for (const group of s.split('')){ \n     groups.push(group);\n  } \n  for (const group of groups){ \n    if (group.length== 3) \n      groups2.push(group.slice(1)+ group[0]+ group.slice(0,2));\n    else \n      groups2.push(group);\n  } \n  return groups2.join('');\n}\n\n/*\n  returns string will be of length will be n, will be made by repeating characters. \n  */ \n const decodeRepeating3= (s)=>{\n   const groups= [], groups2= [];\n   for (const group of s.split('')){ "}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 1\n  let b = 1\n  let isPrime = true\n  let primeFibs = []\n  while (isPrime) {\n    if (n === 1) {\n      return a\n    }\n    if (n % 2 === 0) {\n      n = n / 2\n      continue\n    }\n    b = a + b\n    a = b\n    primeFibs.push(b)\n    if (primeFibs.indexOf(n)!== -1) {\n      isPrime = false\n    }\n  }\n  return primeFibs.pop()\n}\n\nconsole.log(primeFib(2))\nconsole.log(primeFib(3))\nconsole.log(primeFib(4))\nconsole.log(primeFib(5))\nconsole.log(primeFib(7))\nconsole.log(primeFib(11))\nconsole.log(primeFib(13))\nconsole.log(primeFib(17))\nconsole.log(primeFib(19))\nconsole.log(primeFib(23))\nconsole.log(primeFib(29))\nconsole.log(primeFib(31))\nconsole.log(primeFib(37))\nconsole.log(primeFib(41))\nconsole.log(primeFib(43))\nconsole.log(primeFib(47))\nconsole.log(primeFib(49))\nconsole.log(primeFib(53))\nconsole.log(primeFib(59))\nconsole.log(primeFib(61))\nconsole.log(primeFib(67))\nconsole.log(primeFib(71))\nconsole.log(primeFib(73))\nconsole.log(primeFib(79))\nconsole.log(primeFib(83))\nconsole.log(primeFib(89))\nconsole.log(primeFib(97))\nconsole.log(primeFib(101))\nconsole.log(primeFib(103))\nconsole.log(primeFib(107))\nconsole.log(primeFib(109))\nconsole.log(primeFib(113))\nconsole.log(primeFib(127))\nconsole.log(primeFib(131))\nconsole.log(primeFib(137))\nconsole.log(primeFib(139))\nconsole.log(primeFib(149))\nconsole.log(primeFib(151))\nconsole.log(primeFib(157))\nconsole.log(primeFib(163))\nconsole.log(primeFib(167))\nconsole.log(primeFib(173))\nconsole.log(primeFib(179))\nconsole.log(primeFib(181))\nconsole.log(primeFib(191))\nconsole.log(primeFib(193))\nconsole.log(primeFib(197))\nconsole.log(primeFib(199))\nconsole.log(primeFib(211))\nconsole.log(primeFib(223))\nconsole.log(primeFib(227))\nconsole.log(primeFib(229))\nconsole.log(primeFib(233))\nconsole.log(primeFib(239))\nconsole.log(primeFib(241))\nconsole.log(primeFib(251))\nconsole.log(primeFib(257))\nconsole.log(primeFib(263))\nconsole.log(primeFib(269))\nconsole.log(primeFib(271))\nconsole.log(primeFib(277))\nconsole.log(primeFib(281))\nconsole.log(primeFib(283))\nconsole.log(primeFib(293))\nconsole.log(primeFib(307))\nconsole.log(primeFib(311))\nconsole.log(primeFib(313))\nconsole.log(primeFib(317))\nconsole.log(primeFib(331))\nconsole.log(primeFib(337))\nconsole.log(primeFib(347))\nconsole.log(primeFib(349))\nconsole.log(primeFib(353))\nconsole.log(primeFib(359))\nconsole.log(primeFib(367))\nconsole.log(primeFib(373))\nconsole.log(primeFib(379))\nconsole.log(primeFib(383))\nconsole.log(primeFib(389))\nconsole.log(primeFib(397))\nconsole.log(primeFib(401))\nconsole.log(primeFib(409))\nconsole.log(primeFib(419))\nconsole.log(primeFib(421))\nconsole.log(primeFib(431))\nconsole.log(primeFib(433))\nconsole.log(primeFib(439))\nconsole.log(primeFib(443))\nconsole.log(primeFib(449))\nconsole.log(primeFib(457))\nconsole.log(primeFib(461))\nconsole.log(primeFib(463))\nconsole.log(primeFib(467))\nconsole.log(primeFib(479))\nconsole.log(primeFib(487))\nconsole.log(primeFib(491))\nconsole.log(primeFib(499))\nconsole.log(primeFib(503))\nconsole.log(primeFib(509))\nconsole.log(primeFib(521))\nconsole.log(primeFib(523))\nconsole.log(primeFib(541))\nconsole.log(primeFib(547))\nconsole.log(primeFib(557))\nconsole.log(primeFib(563))\nconsole.log(primeFib(569))\nconsole.log(primeFib(571))\nconsole.log(primeFib(577))\nconsole.log(primeFib(587))\nconsole.log(primeFib(593))\nconsole.log(primeFib(599))\nconsole.log(primeFib(601))\nconsole.log(primeFib(607))\nconsole.log(primeFib(613))\nconsole.log(primeFib(619))\nconsole.log(primeFib(631))\nconsole.log(primeFib("}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const triplesSum = (arr) => {\n    const set = new Set();\n    const triples = arr.map((x) => {\n      const sum = x + (x < 0? -1 : 1);\n      const [s, n] = [sum, set.add(sum)];\n      return [s, n];\n    });\n    return triples.reduce((a, b) => [a[0] + b[0], a[1] + b[1]]);\n  };\n  const sortedTriples = triplesSum(l).sort((a, b) => a[0] - b[0]);\n  const hasThreeDistinctElements = (arr) => arr.length > 2 && arr.every((x) => x!== sortedTriples[0][0] && x!== sortedTriples[1][0] && x!== sortedTriples[2][0]);\n  return hasThreeDistinctElements(l);\n};\n\n/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  const tripleSum = (arr) => {\n    const set = new Set();\n    const triples = arr.map((x) => {\n      const sum = x + (x < 0? -1 : 1);\n      const [s, n] = [sum, set.add(sum)];\n      return [s, n];\n    });\n    return triples.reduce((a, b) => [a[0] + b[0], a[1] + b[1]]);\n  };\n  const sortedTriples = tripleSum(l).sort((a, b) => a[0] - b[0]);\n  const hasThreeDistinctElements = (arr) => arr.length > 2 && arr.every((x) => x!== sortedTriples[0][0] && x!== sortedTriples[1][0] && x!== sortedTriples[2][0]);\n  return hasThreeDistinctElements(l);\n};\n\nmodule.exports = {\n  triplesSumToZero,\n  tripleSumToZero\n};<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n \n  const x0 = car.left + (car.right - car.left) / 2;\n  const y0 = car.bottom + (car.top - car.bottom) / 2;\n  const x1 = car.right + (car.left - car.right) / 2;\n  const y1 = car.top + (car.bottom - car.top) / 2;\n  const h = Math.sqrt(Math.pow(x1 - x0, 2) + Math.pow(y1 - y0, 2));\n  const w = Math.sqrt(Math.pow(x1 - x0, 2) + Math.pow(y1 - y0, 2));\n  const x1d = x1 - x0;\n  const y1d = y1 - y0;\n  const a = (x1d - x0) / w;\n  const b = (y1d - y0) / w;\n  const x2 = x0 + a * h;\n  const y2 = y0 + b * h;\n  const x3 = x0 + a * h + w;\n  const y3 = y0 + b * h;\n  const x4 = x0 + a * h + w;\n  const y4 = y0 + b * h + h;\n  const x5 = x0 + a * h + w;\n  const y5 = y0 + b * h + h;\n  const x6 = x0 + a * h + w;\n  const y6 = y0 + b * h + h;\n  const x7 = x0 + a * h + w;\n  const y7 = y0 + b * h + h;\n  const x8 = x0 + a * h + w;\n  const y8 = y0 + b * h + h;\n  const x9 = x0 + a * h + w;\n  const y9 = y0 + b * h + h;\n  const x10 = x0 + a * h + w;\n  const y10 = y0 + b * h + h;\n  const x11 = x0 + a * h + w;\n  const y11 = y0 + b * h + h;\n  const x12 = x0 + a * h + w;\n  const y12 = y0 + b * h + h;\n  const x13 = x0 + a * h + w;\n  const y13 = y0 + b * h + h;\n  const x14 = x0 + a * h + w;\n  const y14 = y0 + b * h + h;\n  const x15 = x0 + a * h + w;\n  const y15 = y0 + b * h + h;\n  const x16 = x0 + a * h + w;\n  const y16 = y0 + b * h + h;\n  const x17 = x0 + a * h + w;\n  const y17 = y0 + b * h + h;\n  const x18 = x0 + a * h + w;\n  const y18 = y0 + b * h + h;\n  const x19 = x0 + a * h + w;\n  const y19 = y0 + b * h + h;\n  const x20 = x0 + a * h + w;\n  const y20 = y0 + b * h + h;\n  const x21 = x0 + a * h + w;\n  const y21 = y0 + b * h + h;\n  const x22 = x0 + a * h + w;\n  const y22 = y0 + b * h + h;\n  const x23 = x0 + a * h + w;\n  const y23 = y0 + b * h + h;\n  const x24 = x0 + a * h + w;\n  const y24 = y0 + b * h + h;\n  const x25 = x0 + a * h + w;\n  const y25 = y0 + b * h + h;\n  const x26 = x0 + a * h + w;\n  const y26 = y0 + b * h + h;\n  const x27 = x0 + a * h + w;\n  const y27 = y0 + b * h + h;\n  const x28 = x0 + a * h + w;\n  const y28 = y0 + b * h + h;\n  const x29 = x0 + a * h + w;\n  const y29 = y0 + b * h + h;\n  const x30 = x0 + a * h + w;\n  const y30 = y0 + b * h + h;\n  const x31 = x0 + a * h + w;\n  const y31 = y0 + b * h + h;\n  const x32 = x0 + a * h + w;\n  const y32 = y0 + b * h + h;\n  const x33 = x0 + a * h + w;\n  const y33 = y0 + b * h + h;\n  const x34 = x0 + a * h + w;\n  const y34 = y0 + b * h + h;\n  const x35 = x0 + a * h + w;\n  const y35 = y0 + b * h + h;\n  const x36 = x0 + a * h + w;\n  const y36 = y0 + b * h + h;\n  const x37 = x0 + a * h + w;\n  const y37 = y0 + b * h + h;\n  const x38 = x0 + a * h + w;\n  const y38 = y0 + b * h + h;\n  const x39 = x0 + a * h + w;\n  const y39 = y0 + b * h + h;\n  "}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  if (l.length === 0) return []\n  let l2 = [...l]\n  l2[0] = l2[0] + 1\n  return l2\n}\n\n/**\n  * Remove a value from a list.\n  * Return new list without this value.\n  *\n  * @param list\n  * @param value\n  * @return\n  */\nconst remove = (list, value) => {\n  return list.filter(x => x!== value)\n}\n\n/**\n  * Find a value from list.\n  * Return index of value.\n  *\n  * @param list\n  * @param value\n  * @return\n  */\nconst find = (list, value) => {\n  return list.findIndex(x => x === value)\n}\n\n/**\n  * Find value in list.\n  * Return true if value found.\n  *\n  * @param list\n  * @param value\n  * @return\n  */\nconst contains = (list, value) => {\n  return find(list, value)!== -1\n}\n\nmodule.exports = {\n  add: add,\n  incrList: incrList,\n  remove: remove,\n  find: find,\n  contains: contains\n}\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const arr = Array.from(l)\n  const sum = arr.reduce((a, b) => a + b)\n  return (arr.length > 1 && sum === 0)\n}\n\n// #############################################################################\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n// # # # # # # # # # # # # # # # # # # # # #"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (x < 0) {\n    return '-1';\n  }\n  if (x === 0) {\n    return '0';\n  }\n  let t = x;\n  let p = 0;\n  let s = '';\n  while (t >= base) {\n    p++;\n    t = t / base;\n  }\n  while (t) {\n    s = String(t % base) + s;\n    t = t / base;\n  }\n  if (x < 0) {\n    s = '-' + s;\n  }\n  return p + s;\n};\n\n// Complete the changeBase function below.\n\nconst test_1 = changeBase(5, 4);\n\nconsole.log(test_1);\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": false, "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  if (h === 0) {\n    return 0\n  }\n  return a * Math.sqrt(2) / 2\n}\n\nexport default triangleArea<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if (n === 0) {\n        return 0\n    }\n    else if (n === 1) {\n        return 1\n    }\n    else {\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n};\n\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n\n  const l_sorted = l.sort((a, b) => {\n    return a - b;\n  });\n\n  const middle = Math.floor(l_sorted.length / 2);\n\n  if (l_sorted.length % 2 === 0) {\n    return (l_sorted[middle] + l_sorted[middle - 1]) / 2;\n  }\n\n  return l_sorted[middle];\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let str = text;\n    let reversed = '';\n    let reversedString = '';\n    for (let i = 0; i < text.length / 2; i++) {\n        reversed += text[i];\n    }\n    for (let i = text.length / 2; i < text.length; i++) {\n        reversed += text[i];\n    }\n    reversedString = reversed.toString();\n    return str === reversedString;\n}\n\nexport default isPalindrome;<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const nn = n % p\n  return (nn === 0)? 0 : ((n - nn) % p + p) % p\n}\n\nexport default modp\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(((ch.charCodeAt(0)-5)% 26)+\" a\".charCodeAt(0))).join(\"\"); \n} \n\n/* \n   encodes a string with a given alphabet. \n  */ \n const encode = (s,alphabet)=>{\n   if(!alphabet) return encodeShift(s);\n   else return encodeShift(s).split('').map(ch=>alphabet[ch]).join('');\n} \n\n/* \n   decodes a string with a given alphabet. \n  */ \n const decode = (s,alphabet)=>{\n   if(!alphabet) return decodeShift(s);\n   else return decodeShift(s).split('').map(ch=>alphabet[ch]).join('');\n} \n\n/* \n   will take as input a string will decode with encode function. \n  */ \n const decodeShift = (s)=>{\n   const alph = encodeShift(s);\n   const decoded = alph.split(\"\");\n   return decoded.map(ch=> String.fromCharCode(parseInt(ch,26))).join(\"\"); \n} \n\n /* \n   will take as input a string will decode with encode function. \n  */ \n const encode = (s,alphabet)=>{\n   const alph = encode(s,alphabet);\n   const decoded = alph.split(\"\");\n   return decoded.map(ch=> String.fromCharCode(parseInt(ch,26))).join(\"\"); \n} \n\n/* \n   will take as input a string will decode with encode function. \n  */ \n const decode = (s,alphabet)=>{\n   const alph = decode(s,alphabet);\n   const decoded = alph.split(\"\");\n   return decoded.map(ch=> String.fromCharCode(parseInt(ch,26))).join(\"\"); \n} \n\n/* \n   encode method will return a string with a given alphabet. \n  */ \n const encode = (s,alphabet)=>{\n   const alph = encode(s,alphabet);\n   return alph;\n} \n\n/* \n   decode method will return a string with a given alphabet. \n  */ \n const decode = (s,alphabet)=>{\n   const alph = decode(s,alphabet);\n   return alph;\n} \n\n/* \n   will return an array of encoded strings. \n  */ \n const encodeArray = (s,alphabet)=>{\n   if(!alphabet) return encode(s,alphabet);\n   else return encode(s,alphabet).split('').map(ch=>String.fromCharCode(parseInt(ch,26)));\n} \n\n/* \n   will return an array of decoded strings. \n  */ \n const decodeArray = (s,alphabet)=>{\n   if(!alphabet) return decode(s,alphabet);\n   else return decode(s,alphabet).split('').map(ch=>String.fromCharCode(parseInt(ch,26)));\n} \n\n/* \n   will return a string with a given alphabet. \n  */ \n const encode = (s,alphabet)=>{\n   const alph = encode(s,alphabet);\n   return alph;\n} \n\n/* \n   will return a string with a given alphabet. \n  */ \n const decode = (s,alphabet)=>{\n   const alph = decode(s,alphabet);\n   return alph;\n} \n\n/* \n   will return a string with a given alphabet. \n  */ \n const decode = (s,alphabet)=>{\n   const alph = decode(s,alphabet);\n   return alph;\n} \n\n/* \n   will return a string with a given alphabet. \n  */ \n const decode = (s,alphabet)=>{\n   const alph = decode(s,alphabet);\n   return alph;\n} \n\n/* \n   will return a string with a given alphabet. \n  */ \n const encode = (s,alphabet)=>{\n   const alph = encode(s,alphabet);\n   return alph;\n} \n\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n    let vowels = ['a','e','i','o','u','A','E','I','O','U'];\n    text = text.toUpperCase();\n    let result = '';\n    for(let i = 0; i < text.length; i++) {\n        if(vowels.indexOf(text[i]) === -1) {\n            result += text[i];\n        }\n    }\n    return result;\n};\n\n/*\n  removeDiacritics will be a function that will take string and returns string without diacritics.\n  >>> removeDiacritics('')\n  ''\n  >>> removeDiacritics('abcdef\\nghijklm')\n  'abcdef\\nghijklm'\n  >>> removeDiacritics('abcdef')\n  'abcdef'\n  >>> removeDiacritics('aaaaa')\n  ''\n  >>> removeDiacritics('aaBAA')\n  'BAA'\n  >>> removeDiacritics('zbcd')\n  'zbcd'\n  */\nconst removeDiacritics = (text) => {\n    let diacritics = [\n        {'base':'A', 'letters':'\\u0041\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F'},\n        {'base':'AA','letters':'\\uA732'},\n        {'base':'AE','letters':'\\u00C6\\u01FC\\u01E2'},\n        {'base':'AO','letters':'\\uA734'},\n        {'base':'AU','letters':'\\uA736'},\n        {'base':'AV','letters':'\\uA738'},\n        {'base':'AY','letters':'\\uA73A'},\n        {'base':'B', 'letters':'\\u0042\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0182\\u0181'},\n        {'base':'C', 'letters':'\\u0043\\u24B8\\uFF23\\u0106\\u0108\\u010A\\u010C\\u00C7\\u1E08\\u0187\\u023B\\uA73C'},\n        {'base':'D', 'letters':'\\u0044\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018B\\u018A\\u0189\\uA779'},\n        {'base':'DZ','letters':'\\u01F1\\u01C4'},\n        {'base':'Dz','letters':'\\u01F2\\u01C5'},\n        {'base':'E', 'letters':'\\u0045\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E'},\n        {'base':'F', 'letters':'\\u0046\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B'},\n        {'base':'G', 'letters':'\\u0047\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E'},\n        {'base':'H', 'letters':'\\u0048\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D'},\n        {'base':'I', 'letters':'\\u0049\\u24BE\\uFF29\\u00CC\\u00CD\\u00CE\\u0128\\u012A\\u012C\\u0130\\u00CF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197'},\n        {'base':'J', 'letters':'\\u004A\\u24BF\\uFF2A\\u0134\\u0248'},\n        {'base':'K', 'letters':'\\u004B\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2'"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  if (!l ||!l.length) return true\n  return l.every(n => n <= t)\n}\n\nexport default belowThreshold\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> subtract(3, 2)\n  1\n  >>> subtract(4, 5)\n  1\n  >>> subtract(5, 3)\n  2\n  >>> subtract(6, 7)\n  -1\n  >>> subtract(9, 6)\n  3\n  >>> subtract(9, 8)\n  1\n  >>> subtract(9, 9)\n  0\n  >>> subtract(9, 10)\n  -1\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> multiply(3, 2)\n  6\n  >>> multiply(4, 5)\n  20\n  >>> multiply(5, 3)\n  15\n  >>> multiply(6, 7)\n  42\n  >>> multiply(9, 6)\n  81\n  >>> multiply(9, 8)\n  9\n  >>> multiply(9, 9)\n  81\n  >>> multiply(9, 10)\n  81\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> divide(6, 3)\n  2\n  >>> divide(9, 6)\n  3\n  >>> divide(9, 8)\n  1\n  >>> divide(9, 9)\n  1\n  >>> divide(9, 10)\n  9\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> abs(3)\n  3\n  >>> abs(-3)\n  3\n  >>> abs(-4)\n  4\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*\n  >>> min(3, 2, 4)\n  2\n  >>> min(4, 2, 3)\n  2\n  >>> min(9, 6, 8)\n  6\n  >>> min(9, 8, 6)\n  6\n  >>> min(9, 8, 7)\n  7\n  >>> min(9, 9, 9)\n  9\n  >>> min(9, 9, 10)\n  9\n  >>> min(9, 9, 11)\n  9\n  >>> min(9, 9, 12)\n  9\n  >>> min(9, 9, 13)\n  9\n  >>> min(9, 9, 14)\n  9\n  >>> min(9, 9, 15)\n  9\n  >>> min(9, 9, 16)\n  9\n  >>> min(9, 9, 17)\n  9\n  >>> min(9, 9, 18)\n  9\n  >>> min(9, 9, 19)\n  9\n  >>> min(9, 9, 20)\n  9\n  */\nconst min = (...values) => {\n  return Math.min(...values);\n};\n\n/*\n  >>> max(3, 2, 4)\n  4\n  >>> max(4, 2, 3)\n  4\n  >>> max(9, 6, 8)\n  9\n  >>> max(9, 8, 6)\n  9\n  >>> max(9, 8, 7)\n  9\n  >>> max(9, 9, 9)\n  9\n  >>> max(9, 9, 10)\n  10\n  >>> max(9, 9, 11)\n  11\n  >>> max(9, 9, 12)\n  12\n  >>> max(9, 9, 13)\n  13\n  >>> max(9, 9, 14)\n  14\n  >>> max(9, 9, 15)\n  15\n  >>> max(9, 9, 16)\n  16\n  >>> max(9, 9, 17)\n  17\n  >>> max(9, 9, 18)\n  18\n  >>> max(9, 9, 19)\n  19\n  >>> max(9, 9, 20)\n  20\n  */\nconst max = (...values) => {\n  return Math.max(...values);\n};\n\n/*\n  >>> ceil(4.25)\n  5\n  >>> ceil(4.5)\n  5\n  >>> ceil(4.75)\n  5\n  >>> ceil(5.25)\n  5\n  >>> ceil(5.5)\n  6\n  >>> ceil(5.75)\n  6\n  >>> ceil(6.25)\n  6\n  >>> ceil(6.5)\n  7\n  >>> ceil(6.75)\n  7\n  >>> ceil(7.25)\n  7\n  >>> ceil(7.5)\n  8\n  >>> ceil(7.75)\n  8\n  >>> ceil(8.25)\n  8\n  >>> ceil(8.5)\n  9\n  >>> ceil(8.75)\n  9\n  >>> ceil(9.25)\n  9\n  >>> ceil(9.5)\n  10\n  >>> ceil(9.75)\n  10\n  >>> ceil(10.25)\n  10\n  >>> ceil(10.5)\n  11\n  >>> ceil(10.75)\n  11\n  >>> ceil(11.25)\n  11\n  >>> ceil(11.5)\n  12\n  >>> ceil(11.75)\n  12\n  >>> ceil(12.25)\n  12\n  >>> ceil(12.5)\n  13\n  >>> ceil(12.75)\n  13\n  >>> ceil(13.25)\n  13\n  >>> ceil(13.5)\n  14\n  >>> ceil(13.75)\n  14\n  >>> ceil(14.25)\n  14\n  >>> ceil(14.5)\n  15\n  >>> ceil(14.75)\n  15\n  >>> ceil(15.25)\n  15\n  >>> ceil(15.5)\n  16\n  >>> ceil(15.75)\n  16\n  >>> ceil(16.25)\n  16\n  >>> ceil(16.5)\n  17\n  >>> ceil(16.75)\n  17\n  >>> ceil(17.25)\n  17\n  >>> ceil(17.5)\n  18\n  >>> ceil(17.75)\n  18\n  >>> ceil(18.25)\n  18\n  "}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const charSet = new Set(s0);\n    const charSet2 = new Set(s1);\n    return charSet.equals(charSet2);\n};\n\n/*\n  Check if two words are the same or not.\n  >>> same('eabcd', 'dddddddabc')\n  true\n  >>> same('abcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  false\n  >>> same('eabcd', 'dddddddabce')\n  false\n  >>> same('eabcd', 'dddddddabc')\n  true\n  >>> same('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  */\nconst same = (s0, s1) => {\n    return s0 === s1 || sameChars(s0, s1);\n};\n\nmodule.exports = {\n    same,\n};<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nexport default fib\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const open = brackets.slice(0);\n  const close = brackets.slice(1);\n  const length = brackets.length;\n\n  if (length === 0) {\n    return true;\n  }\n  else if (length === 1) {\n    return brackets[0] === open[0];\n  }\n  else {\n    return correctBracketing(open) && correctBracketing(close);\n  }\n};\n\nconsole.log(correctBracketing(\"<>\"));\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n    let prev = null;\n    for (let x of l) {\n        if (prev!== null && x - prev < 0) return false;\n        prev = x;\n    }\n    return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const len1 = l1.length\n  const len2 = l2.length\n  const map = {}\n\n  for (let i = 0; i < len1; i++) {\n    map[l1[i]] = i\n  }\n\n  for (let j = 0; j < len2; j++) {\n    if (map[l2[j]]!== undefined) {\n      return [l1[map[l2[j]]], l2[j]]\n    }\n  }\n  return []\n}\n\nexport default common\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const primeList = getPrimeList();\n  let i = 0;\n  while (i < primeList.length && primeList[i] <= n) {\n    i += 1;\n  }\n  return primeList[i - 1];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n\n  return sum;\n};\n\nconst sumToN_test = () => {\n  const result = sumToN(5);\n  console.log(result); // 15\n};\n\nsumToN_test();\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let isOpen = false\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\" && isOpen === false) {\n      isOpen = true\n    } else if (brackets[i] === \")\" && isOpen === true) {\n      isOpen = false\n    } else {\n      return false\n    }\n  }\n  return true\n}\n\n// Test Function\nconst test = (brackets, correct) => {\n  if (correctBracketing(brackets) === correct) {\n    console.log(`${brackets} is ${correct? \"correct\" : \"incorrect\"}`)\n  }\n}\n\n// Test Function\ntest([\"(\", \")\", \"()\", \"()()\"], true)\ntest([\"(()())\", \"()\", \"()\"], false)\ntest([\"()()()\", \"()\", \"()\"], false)\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const dxs = [1]\n  for (let i = 1; i < len; i++) {\n    dxs.push(xs[i])\n    dxs.push(dxs[i] * (len - i))\n  }\n  return dxs\n}\n\n/* Return the factorial of a number */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1\n  } else if (n === 1) {\n    return 1\n  }\n  return n * factorial(n - 1)\n}\n\n/* Return the sum of a list of numbers */\nconst sum = (xs) => {\n  const len = xs.length\n  return xs.reduce((acc, x) => acc + x, 0)\n}\n\n/*\n  Return the product of a list of numbers\n  Return NaN if length of list is zero\n  Return 1 if length of list is one\n*/\nconst product = (xs) => {\n  const len = xs.length\n  if (len === 0) {\n    return NaN\n  } else if (len === 1) {\n    return xs[0]\n  }\n  return xs.reduce((acc, x) => acc * x, 1)\n}\n\n/* Return the average of a list of numbers */\nconst average = (xs) => {\n  const len = xs.length\n  return sum(xs) / len\n}\n\n/*\n  Return the mean of a list of numbers\n  Return NaN if length of list is zero\n*/\nconst mean = (xs) => {\n  const len = xs.length\n  if (len === 0) {\n    return NaN\n  }\n  return sum(xs) / len\n}\n\n/* Return the median of a list of numbers */\nconst median = (xs) => {\n  const len = xs.length\n  if (len === 0) {\n    return NaN\n  }\n  if (len % 2 === 0) {\n    return (sum(xs.slice(0, len / 2)) + sum(xs.slice(len / 2, len))) / 2\n  } else {\n    return sum(xs.slice(0, len / 2))\n  }\n}\n\n/* Return the mode of a list of numbers */\nconst mode = (xs) => {\n  const len = xs.length\n  if (len === 0) {\n    return NaN\n  }\n  const x = xs[0]\n  const modes = []\n  for (let i = 0; i < len; i++) {\n    const xs_i = xs[i]\n    if (xs_i === x) {\n      modes.push(xs_i)\n    }\n  }\n  return modes\n}\n\n/* Return the sum of squares of a list of numbers */\nconst sumOfSquares = (xs) => {\n  const len = xs.length\n  return xs.reduce((acc, x) => acc + x * x, 0)\n}\n\n/* Return the sum of powers of a list of numbers */\nconst sumOfPowers = (xs) => {\n  const len = xs.length\n  return xs.reduce((acc, x) => acc + x * x * x, 0)\n}\n\n/* Return the sum of cubes of a list of numbers */\nconst sumOfCubes = (xs) => {\n  const len = xs.length\n  return xs.reduce((acc, x) => acc + x * x * x * x, 0)\n}\n\n/* Return the sum of squares of the difference between two lists */\nconst sumOfSquaresDiff = (a, b) => {\n  const lenA = a.length\n  const lenB = b.length\n  const diff = a.reduce((acc, x, i) => acc + x - b[i], 0)\n  return diff * diff\n}\n\n/* Return the sum of squares of the difference between two lists */\nconst sumOfPowersDiff = (a, b) => {\n  const lenA = a.length\n  const lenB = b.length\n  const diff = a.reduce((acc, x, i) => acc + x * x - b[i] * b[i], 0)\n  return diff * diff\n}\n\n/* Return the sum of cubes of the difference between two lists */\nconst sumOfCubesDiff = (a, b) => {\n  const lenA = a.length\n  const lenB = b.length\n  const diff = a.reduce((acc, x, i) => acc + x * x * x - b[i] * b[i] * b[i], 0)\n  return diff * diff\n}\n\n/* Return the sum of squares of the difference between two lists */\nconst sumOfSquaresDiffPow = (a, b) => {\n  const lenA = a.length\n  const lenB = b.length\n  const diff = a.reduce((acc, x, i) => acc + x * x * x * x - b[i] * b[i] * b[i] * b[i], 0)\n  return diff * diff\n}\n\n/* Return the sum of cubes of the difference between two lists */\nconst sumOfCubesDiffPow = (a, b) => {\n  const lenA = a.length\n  const lenB = b.length\n  const diff = a.reduce((acc, x, i) => acc + x * x * x * x * x - b[i] * b[i] * b[i] * b[i] * b[i], 0)\n  return diff * diff\n}\n\n/* Return the difference between two lists */\nconst difference = (a, b) => {\n  const lenA = a.length\n  const lenB = b.length\n  const diff = a.reduce((acc, x, i) => acc + x - b[i], 0)\n  return diff\n}\n\n/* Return the difference between two lists */\nconst differencePow = (a, b) => {\n  const len"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconsole.log(fibfib(5))\n\n/*\n *The Summation of Primes\n *\n *The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n *\n *What is the sum of all the primes below two million?\n */\nconst sum = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < Math.sqrt(n); j++) {\n      if (i * j > n) {\n        break\n      }\n      if (n % i === 0 && n % j === 0) {\n        sum += n\n      }\n    }\n  }\n  return sum\n}\n\nconsole.log(sum(1000000))\n\n/*\n * The product of the primes below two million is\n *\n * 232792560\n *\n * What is the greatest product of the primes below two hundred thousand?\n *\n * 232792560\n */\nconst product = (n) => {\n  let product = 1\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < Math.sqrt(n); j++) {\n      if (i * j > n) {\n        break\n      }\n      if (n % i === 0 && n % j === 0) {\n        product *= n\n      }\n    }\n  }\n  return product\n}\n\nconsole.log(product(2000000))\n\n/*\n *The sum of the even-valued terms in the sequence of triangle numbers\n *\n *\n */\nconst triangle = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < i; j++) {\n      if (i % 2 === 0) {\n        sum += i\n      }\n    }\n  }\n  return sum\n}\n\nconsole.log(triangle(10))\n\n/*\n *The sum of the odd-valued terms in the sequence of triangle numbers\n *\n *\n */\nconst triangle_odd = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < i; j++) {\n      if (i % 2 === 1) {\n        sum += i\n      }\n    }\n  }\n  return sum\n}\n\nconsole.log(triangle_odd(10))\n\n/*\n * The sum of the even-valued terms in the sequence of prime numbers\n *\n *\n */\nconst prime = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < Math.sqrt(n); j++) {\n      if (n % i === 0 && n % j === 0) {\n        sum += n\n      }\n    }\n  }\n  return sum\n}\n\nconsole.log(prime(1000000))\n\n/*\n *The sum of the odd-valued terms in the sequence of prime numbers\n *\n *\n */\nconst prime_odd = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < Math.sqrt(n); j++) {\n      if (n % i === 1 && n % j === 0) {\n        sum += n\n      }\n    }\n  }\n  return sum\n}\n\nconsole.log(prime_odd(1000000))\n\n/*\n * The sum of the even-valued terms in the sequence of fibonacci numbers\n *\n *\n */\nconst fib = (n) => {\n  let sum = 0\n  let fib_prev = 1\n  let fib_next = 1\n  for (let i = 1; i < n; i++) {\n    sum += fib_prev\n    fib_prev = fib_next\n    fib_next = fib_prev + fib_next\n  }\n  return sum\n}\n\nconsole.log(fib(1000000))\n\n/*\n *The sum of the even-valued terms in the sequence of fibonacci numbers\n *\n *\n */\nconst fib_odd = (n) => {\n  let sum = 0\n  let fib_prev = 1\n  let fib_next = 1\n  for (let i = 1; i < n; i++) {\n    sum += fib_prev\n    fib_prev = fib_next\n    fib_next = fib_prev + fib_next\n    if (i % 2 === 1) {\n      sum += fib_prev\n    }\n  }\n  return sum\n}\n\nconsole.log(fib_odd(1000000))\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    let result = 0\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.indexOf(s[i])!== -1) {\n            result++\n        }\n    }\n    return result\n}\n\n/*\n  Write a function countVowels which will take a string representing a number\n  as input and will return the number of vowels in the number.\n\n  Example:\n  >>> countVowels(\"123\")\n  3\n  >>> countVowels(\"12a\")\n  2\n  >>> countVowels(\"a1\")\n  1\n  >>> countVowels(\"1\")\n  1\n  */\nconst countVowels = (n) => {\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    let result = 0\n    for (let i = 0; i < n.length; i++) {\n        if (vowels.indexOf(n[i])!== -1) {\n            result++\n        }\n    }\n    return result\n}\n\n/*\n  Write a function countDigits which will take a string representing a number\n  as input and will return the number of digits in the number.\n\n  Example:\n  >>> countDigits(\"123\")\n  3\n  >>> countDigits(\"12a\")\n  2\n  >>> countDigits(\"a1\")\n  1\n  >>> countDigits(\"1\")\n  1\n  */\nconst countDigits = (n) => {\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    let result = 0\n    for (let i = 0; i < n.length; i++) {\n        if (n[i] > 9) {\n            result++\n        }\n    }\n    return result\n}\n\n/*\n  Write a function isPalindrome which will take a string representing a number\n  as input and will return true if the number is a palindrome, false otherwise.\n  */\nconst isPalindrome = (n) => {\n    return n === countDigits(n) && n === vowelsCount(n)\n}\n\nmodule.exports = {\n    vowelsCount,\n    countVowels,\n    countDigits,\n    isPalindrome\n}\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digits = x.toString(10);\n  let n = digits.length;\n  if (shift > n) {\n    return digits.split('').reverse().join('');\n  } else {\n    return digits.substring(0, n - shift).concat(digits.substring(n - shift + 1));\n  }\n};\n\nconst reverse = (x) => x.toString(10).split('').reverse().join('');\n\nconst sum = (x, y) => x + y;\n\nconst multiply = (x, y) => x * y;\n\nconst subtract = (x, y) => x - y;\n\nconst divide = (x, y) => x / y;\n\nconst remainder = (x, y) => x % y;\n\nconst modulo = (x, y) => x % y;\n\nconst isOdd = (x) => x % 2 === 1;\n\nconst isEven = (x) => x % 2 === 0;\n\nconst isPrime = (x) => x === 2 || x === 3 || x === 5 || x === 7 || x === 11 || x === 13 || x === 17 || x === 19 || x === 23 || x === 29 || x === 31 || x === 37 || x === 41 || x === 43 || x === 47 || x === 53 || x === 59 || x === 61 || x === 67 || x === 71 || x === 73 || x === 79 || x === 83 || x === 89 || x === 97 || x === 101 || x === 103 || x === 107 || x === 109 || x === 113 || x === 127 || x === 131 || x === 137 || x === 139 || x === 149 || x === 151 || x === 157 || x === 163 || x === 167 || x === 169 || x === 173 || x === 179 || x === 181 || x === 191 || x === 193 || x === 197 || x === 199 || x === 211 || x === 223 || x === 227 || x === 229 || x === 233 || x === 239 || x === 241 || x === 251 || x === 257 || x === 263 || x === 269 || x === 271 || x === 277 || x === 281 || x === 283 || x === 293 || x === 307 || x === 311 || x === 313 || x === 317 || x === 319 || x === 323 || x === 337 || x === 347 || x === 349 || x === 353 || x === 359 || x === 367 || x === 373 || x === 379 || x === 383 || x === 389 || x === 397 || x === 401 || x === 409 || x === 419 || x === 421 || x === 431 || x === 433 || x === 439 || x === 443 || x === 449 || x === 457 || x === 461 || x === 463 || x === 467 || x === 479 || x === 487 || x === 491 || x === 499 || x === 503 || x === 509 || x === 521 || x === 523 || x === 541 || x === 547 || x === 557 || x === 563 || x === 569 || x === 571 || x === 577 || x === 587 || x === 593 || x === 599 || x === 601 || x === 607 || x === 613 || x === 617 || x === 619 || x === 631 || x === 641 || x === 643 || x === 647 || x === 653 || x === 659 || x === 661 || x === 673 || x === 677 || x === 683 || x === 691 || x === 701 || x === 709 || x === 719 || x === 727 || x === 733 || x === 739 || x === 743 || x === 751 || x === 757 || x === 761 || x === 769 || x === 773 || x === 787 || x === 797 || x === 809 || x === 811 || x === 821 || x === 823 || x === 827 || x === 829 || x === 839 || x === 853 || x === 857 || x === 859 || x === 863 || x === 877 || x === 881 || x === 883 || x === 887 || x === 907 || x === 911 || x === 919 || x === 929 || x === 937 || x === 941 || x === 947 || x === 953 || x === 967 || x === 971 || x === 977 || x === 983 || x === 991 || x === 997 || x === 1009 || x === 1013 || x === 1019 || x === 1021 || x === 1031 || x === 1033 || x === 1039 || x === 1049 || x === 1051 || x === 1061 || x === 1063 || x === 1069 || x === 1087 || x === 1091 || x === 1093 || x === 1097 || x === 1103 || x === 1109 || x === 1117 || x === 1123 || x === 1129 || x === 1151 || x === 1159 || x === 1163 || x === 1171 || x === 1181 || x === 1187 || x === 1193 || x === 1201 || x === 1213 || x === 1217 || x === 1223 || x === 1229 || x === 1231 || x === 1237 || x === 1249 || x === 1259 || x === 1277 || x === 1279 || x === 1283 || x === 1289 || x === 1291 || x === 1297 || x === 1301 || x === 1303 || x === 1307 || x === 1319 || x === 1321 || x === 1327 || x === 1361 || x === 1367 || x === 1373 || x === 1381 || x === 1399 || x === 1409 || x === 1423 || x === 1427 || x === 1429 || x === 1433 || x === 1439 || x === 1447 || x === 1453 || x === 1459 || x === 1471 || x === 1481 || x === 1483 || x === 1487 || x === 1489 || x === 1493 || x === 1499 || x === 1511 || x === 1523 || x === 1531 || x === 1543 || x === 1549 || x === 1553 || x === 1559 || x === 1567 || x === 1571 || x === 1579 || x === 1583 || x === 1597 || x === 1601 || x === 1607 || x === 1609 || x === 1613 || x === 1619 || x === 1621 || x === 1627 || x"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let total = 0;\n  for(let i=0; i < s.length; i++){\n    total += (s.charCodeAt(i) - 48);\n  }\n  return total;\n}\n\nconsole.log(digitSum(\"a\"));\nconsole.log(digitSum(\"ab\"));\nconsole.log(digitSum(\"abc\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n   let apples = 0;\n   let oranges = 0;\n   let mango = 0;\n   let total = 0;\n   for(let i = 0; i<=s; i++) {\n     if(fruit[i].startsWith('apple')) {\n       apples++;\n     }\n     if(fruit[i].startsWith('orange')) {\n       oranges++;\n     }\n     if(fruit[i].startsWith('mango')) {\n       mango++;\n     }\n   }\n   total = apples + oranges + mango;\n   return total;\n }\n \n const fruits = [\n    'apple', 'orange','mango', 'banana', 'kiwi'\n  ];\n \n const fruits_array = fruits.map(fruit => {\n   return {fruit, 1};\n });\n \n const fruits_array2 = fruits.map(fruit => {\n   return {fruit, 2};\n });\n \n const fruits_array3 = fruits.map(fruit => {\n   return {fruit, 3};\n });\n \n const fruits_array4 = fruits.map(fruit => {\n   return {fruit, 4};\n });\n \n const fruits_array5 = fruits.map(fruit => {\n   return {fruit, 5};\n });\n \n const fruits_array6 = fruits.map(fruit => {\n   return {fruit, 6};\n });\n \n const fruits_array7 = fruits.map(fruit => {\n   return {fruit, 7};\n });\n \n const fruits_array8 = fruits.map(fruit => {\n   return {fruit, 8};\n });\n \n const fruits_array9 = fruits.map(fruit => {\n   return {fruit, 9};\n });\n \n const fruits_array10 = fruits.map(fruit => {\n   return {fruit, 10};\n });\n \n const fruits_array11 = fruits.map(fruit => {\n   return {fruit, 11};\n });\n \n const fruits_array12 = fruits.map(fruit => {\n   return {fruit, 12};\n });\n \n const fruits_array13 = fruits.map(fruit => {\n   return {fruit, 13};\n });\n \n const fruits_array14 = fruits.map(fruit => {\n   return {fruit, 14};\n });\n \n const fruits_array15 = fruits.map(fruit => {\n   return {fruit, 15};\n });\n \n const fruits_array16 = fruits.map(fruit => {\n   return {fruit, 16};\n });\n \n const fruits_array17 = fruits.map(fruit => {\n   return {fruit, 17};\n });\n \n const fruits_array18 = fruits.map(fruit => {\n   return {fruit, 18};\n });\n \n const fruits_array19 = fruits.map(fruit => {\n   return {fruit, 19};\n });\n \n const fruits_array20 = fruits.map(fruit => {\n   return {fruit, 20};\n });\n \n const fruits_array21 = fruits.map(fruit => {\n   return {fruit, 21};\n });\n \n const fruits_array22 = fruits.map(fruit => {\n   return {fruit, 22};\n });\n \n const fruits_array23 = fruits.map(fruit => {\n   return {fruit, 23};\n });\n \n const fruits_array24 = fruits.map(fruit => {\n   return {fruit, 24};\n });\n \n const fruits_array25 = fruits.map(fruit => {\n   return {fruit, 25};\n });\n \n const fruits_array26 = fruits.map(fruit => {\n   return {fruit, 26};\n });\n \n const fruits_array27 = fruits.map(fruit => {\n   return {fruit, 27};\n });\n \n const fruits_array28 = fruits.map(fruit => {\n   return {fruit, 28};\n });\n \n const fruits_array29 = fruits.map(fruit => {\n   return {fruit, 29};\n });\n \n const fruits_array30 = fruits.map(fruit => {\n   return {fruit, 30};\n });\n \n const fruits_array31 = fruits.map(fruit => {\n   return {fruit, 31};\n });\n \n const fruits_array32 = fruits.map(fruit => {\n   return {fruit, 32};\n });\n \n const fruits_array33 = fruits.map(fruit => {\n   return {fruit, 33};\n });\n \n const fruits_array34 = fruits.map(fruit => {\n   return {fruit, 34};\n });\n \n const fruits_array35 = fruits.map(fruit => {\n   return {fruit, 35};\n });\n \n const fruits_array36 = fruits.map(fruit => {\n   return {fruit, 36};\n });\n \n const fruits_array37 = fruits.map(fruit => {\n   return {fruit, 37};\n });\n \n const fruits_array38 = fruits.map(fruit => {\n   return {fruit, 38};\n });\n \n const fruits_array39 = fruits.map(fruit => {\n   return {fruit, 39};\n });\n \n const fruits_array40 = fruits.map(fruit => {\n   return {fruit, 40};\n });\n \n const fruits_array41 = fruits.map(fruit => {\n   return {fruit, 41};\n });\n \n const fruits_array42 = fruits.map(fruit => {\n   return {fruit, 42};\n });\n \n const fruits_array43 = fruits.map(fruit => {\n   return {fruit, 43};\n });\n \n const fruits_array44 = fruits.map(fruit => {\n   return {fruit, 44};\n });\n \n const fruits_array45 = fruits."}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const {length} = arr\n  let result = []\n  let min = arr[0]\n  let index = 0\n\n  for (let i = 0; i < length; i++) {\n    const v = arr[i]\n    if (v === 0) {\n      return result\n    } else if (v < min) {\n      min = v\n      index = i\n    }\n  }\n\n  result = [min, index]\n\n  return result\n}\n\nexport default pluck\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = -1;\n  let max_i = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] > max) {\n      max = lst[i];\n      max_i = i;\n    }\n  }\n  return max_i;\n};\n\nmodule.exports = search;<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n    let result = []\n\n    let list = lst.slice()\n\n    while(list.length > 1) {\n        let max = list[0]\n        let index = 1\n        for(let i = 1; i < list.length; i++) {\n            if(list[i] > max) {\n                max = list[i]\n                index = i\n            }\n        }\n        let min = list.pop()\n\n        result.push(min)\n        list.splice(index, 1)\n\n        result.push(max)\n    }\n\n    if(list.length > 0) {\n        result.push(list[0])\n    }\n\n    return result\n}\n\nmodule.exports = strangeSortList<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a === undefined || b === undefined || c === undefined) {\n    return -1;\n  }\n  let sideA = a * b / 2;\n  let sideB = b * c / 2;\n  let sideC = c * a / 2;\n\n  if (sideA + sideB > sideC) {\n    return (sideA + sideB + sideC) / 2;\n  }\n  if (sideA + sideB < sideC) {\n    return -1;\n  }\n  return Math.sqrt(sideA * sideA + sideB * sideB - sideC * sideC);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a === undefined || b === undefined || c === undefined) {\n    return -1;\n  }\n  let sideA = a * b / 2;\n  let sideB = b * c / 2;\n  let sideC = c * a / 2;\n\n  if (sideA + sideB > sideC) {\n    return (sideA + sideB + sideC) / 2;\n  }\n  if (sideA + sideB < sideC) {\n    return -1;\n  }\n  return Math.sqrt(sideA * sideA + sideB * sideB - sideC * sideC);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a === undefined || b === undefined || c === undefined) {\n    return -1;\n  }\n  let sideA = a * b / 2;\n  let sideB = b * c / 2;\n  let sideC = c * a / 2;\n\n  if (sideA + sideB > sideC) {\n    return (sideA + sideB + sideC) / 2;\n  }\n  if (sideA + sideB < sideC) {\n    return -1;\n  }\n  return Math.sqrt(sideA * sideA + sideB * sideB - sideC * sideC);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a === undefined || b === undefined || c === undefined) {\n    return -1;\n  }\n  let sideA = a * b / 2;\n  let sideB = b * c / 2;\n  let sideC = c * a / 2;\n\n  if (sideA + sideB > sideC) {\n    return (sideA + sideB + sideC) / 2;\n  }\n  if (sideA + sideB < sideC) {\n    return -1;\n  }\n  return Math.sqrt(sideA * sideA + sideB * sideB - sideC * sideC);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a === undefined || b === undefined || c === undefined) {\n    return -1;\n  }\n  let sideA = a * b / 2;\n  let sideB = b * c / 2;\n  let sideC = c * a / 2;\n\n  if (sideA + sideB > sideC) {\n    return (sideA + sideB + sideC) / 2;\n  }\n  if (sideA + sideB < sideC) {\n    return -1;\n  }\n  return Math.sqrt(sideA * sideA + sideB * sideB - sideC * sideC);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a === undefined || b === undefined || c === undefined) {\n    return -1;\n  }\n  let sideA = a * b / 2;\n  let sideB = b * c / 2;\n  let sideC = c * a / 2;\n\n  if (sideA + sideB > sideC) {\n    return (sideA + sideB + sideC) / 2;\n  }\n  if (sideA + sideB < sideC) {\n    return -1;\n  }\n  return Math.sqrt(sideA * sideA + sideB * sideB - sideC * sideC);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a === undefined || b === undefined || c === undefined) {\n    return -1;\n  }\n  let sideA = a * b / 2;\n  let sideB = b * c / 2;\n  let sideC = c * a / 2;\n\n  if (sideA + sideB > sideC) {\n    return (sideA + sideB + sideC) / 2;\n  }\n  if (sideA + sideB < sideC) {\n    return -1;\n  }\n  return Math.sqrt(sideA * sideA + sideB * sideB - sideC * sideC);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a === undefined || b === undefined || c === undefined) {\n    return -1;\n  }\n  let sideA = a * b / 2;\n  let sideB = b * c / 2;\n  let sideC = c * a / 2;\n\n  if (sideA + sideB > sideC) {\n    return (sideA + sideB + sideC) / 2;\n  }\n  if (sideA + sideB < sideC) {\n    return -1;\n  }\n  return Math.sqrt(sideA * sideA + sideB * sideB - sideC * sideC);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a === undefined || b === undefined || c === undefined) {\n    return -1;\n  }\n  let sideA = a * b / 2;\n  let sideB = b * c / 2;\n  let sideC = c * a / 2;\n\n  if (sideA + sideB > sideC) {\n    return (sideA + sideB + sideC) / 2;\n  }\n  if (sideA + sideB < sideC) {\n    return -1;\n  }\n  return"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return false;\n\n  let balance = 0;\n  let sum = 0;\n  q.forEach(item => {\n    sum += item;\n    balance += item % 2;\n  });\n  if (balance === 0) {\n    if (sum >= w) return true;\n  } else {\n    if (sum <= w) return true;\n  }\n\n  return willItFly(q.slice().reverse(), w);\n};\n\nexport default willItFly;\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  if (len < 2) return 0;\n\n  const l = len / 2;\n  let min = l;\n  let curr = l;\n  let next = l;\n\n  while (curr < len) {\n    next = len - curr;\n    if (next > l) next = l;\n    if (arr[curr] > arr[next]) {\n      min = Math.min(min, curr - next);\n    }\n    curr++;\n  }\n  return min;\n};\n\nconst test = (t, n) => {\n  const arr = t.slice();\n  console.log(`${n}->${smallestChange(arr)}`);\n};\n\nfor (let i = 0; i < 5; i++) {\n  test([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], i);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n\n  let result = [];\n  let i = 0;\n  while (i < lst1.length) {\n    let j = 0;\n    while (j < lst2.length) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i]);\n        j++;\n      } else {\n        break;\n      }\n    }\n    i++;\n  }\n\n  return result;\n};\n\nmodule.exports = totalMatch;<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a === 0) {\n    return false;\n  }\n  const n = a;\n  let i = 0;\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  for (; i < primes.length; i++) {\n    if (n % primes[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(isMultiplyPrime(30));\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n    if (x === n) return true;\n    return (x * x) % n === x;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let n = 0, n_2 = 0, n_3 = 0, n_4 = 0, n_5 = 0;\n  if (a < 0) {\n    return false;\n  }\n  while (a > 0) {\n    n_5 = n_4;\n    n_4 = n_3;\n    n_3 = n_2;\n    n_2 = n;\n    n = (a % 5) * (a % 5);\n    a = Math.floor(a / 5);\n    n_5 = n_5 + (a % 5);\n    n_4 = n_4 + (a % 5);\n    n_3 = n_3 + (a % 5);\n    n_2 = n_2 + a;\n    if ((n_2 + n_3) == n_4) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = iscube;\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let sum = 0;\n  num = num.replace(/\\s+/g, '');\n  for (let i = 0; i < num.length; i++) {\n    sum += parseInt(num.charAt(i), 16) * Math.pow(2, i);\n  }\n  return sum;\n};\n\nconsole.log(hexKey('ABCDEF'));\nconsole.log(hexKey('1077E'));\nconsole.log(hexKey('ABED1A33'));\nconsole.log(hexKey('123456789ABCDEF0'));\nconsole.log(hexKey('2020'));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = [];\n  while (decimal > 0) {\n    binary.push(decimal % 2);\n    decimal = Math.floor(decimal / 2);\n  }\n  binary.push(0);\n  const result = binary.join(\"\");\n  return `db${result}`;\n}\n\nconsole.log(decimalToBinary(15));\nconsole.log(decimalToBinary(32));<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const n = s.length;\n  if (n === 0) return false;\n  if (n === 1) return true;\n  if (n === 2) return false;\n  const c = [0, 0];\n  for (let i = 0; i < n; i++) {\n    c[i % 2] += s[i];\n  }\n  return c[0] === c[1];\n};\n\nconst test = (actual, expected) => {\n  if (actual!== expected) {\n    throw new Error(`Expected ${expected}, but got ${actual}`);\n  }\n};\n\ntest(isHappy('a'), false);\ntest(isHappy('aa'), false);\ntest(isHappy('abcd'), true);\ntest(isHappy('aabb'), false);\ntest(isHappy('adb'), true);\ntest(isHappy('xyy'), false);\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const len = grades.length;\n  const sorted = grades.sort((a, b) => b - a);\n  const range = { start: sorted[0], end: sorted[len - 1] };\n  const sum = range.end - range.start;\n  const result = [];\n  let i = 0;\n  while (range.start < sum) {\n    result.push(`${range.start}`);\n    range.start += 1;\n    i += 1;\n  }\n  return result;\n};\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]));<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (typeof string!=='string') {\n    throw new TypeError('string is not a string');\n  }\n\n  if (!isNumber(string)) {\n    throw new TypeError('string is not a number');\n  }\n\n  if (string < 2) {\n    return false;\n  }\n\n  const isPrime = (number) => {\n    if (number < 2) {\n      return false;\n    }\n\n    const counter = 2;\n\n    while (counter <= number) {\n      if (number % counter === 0) {\n        return false;\n      }\n\n      counter += 1;\n    }\n\n    return true;\n  };\n\n  return isPrime(string);\n};\n\nexport default primeLength;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n  var result = 0;\n  for(var i = 2; i < n; i++) {\n    if(isPrime(i)) {\n      var j = i;\n      while(j > 1) {\n        if(j % i === 0) {\n          break;\n        }\n        j--;\n      }\n      if(j === 1) {\n        result++;\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(startsOneEnds(100));\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": false, "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const d = Number.prototype.toString(2);\n  const ans = [].slice.call(new Array(N+1)).map((_, i) => d.substr(i, 1)).reduce((a, b) => a + b);\n  return ans.toString();\n};\n\nconsole.log(solve(147));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\nGiven two lists lst1 and lst2. Add the elements of lst2 to the end of lst1, and return the result.\n\nExample:\n  add([1, 2, 3], [4, 5, 6]) ==> [1, 2, 3, 4, 5, 6]\n*/\nconst add = (lst1, lst2) => {\n  return lst1.concat(lst2);\n};\n\n/*\nGiven two lists lst1 and lst2. Remove the elements of lst2 from the beginning of lst1, and return the result.\n\nExample:\n  remove([1, 2, 3, 4, 5, 6], [2, 4, 6]) ==> [1, 3, 5]\n*/\nconst remove = (lst1, lst2) => {\n  return lst1.filter(v => lst2.indexOf(v) === -1);\n};\n\n/*\nGiven a list lst, print the elements of lst, in order, but print the element at index i and i+1 on a single line.\n\n\nExample:\n  print([1, 2, 3, 4, 5, 6], 1, 2) ==> [3, 4]\n*/\nconst print = (lst, start = 0, end = 0) => {\n  let str = '';\n  let i = start;\n  for (; i < end; i += 1) {\n    str += `${lst[i]}`;\n    if (i === end - 1) {\n      str += '\\n';\n    } else {\n      str += `, `;\n    }\n  }\n  return str;\n};\n\n/*\nGiven a list lst, print the elements of lst, in order, but print the element at index i and i+1 on a single line.\n\n\nExample:\n  print([1, 2, 3, 4, 5, 6], 1, 2) ==> [3, 4]\n*/\nconst print = (lst, start = 0, end = 0) => {\n  let str = '';\n  let i = start;\n  for (; i < end; i += 1) {\n    str += `${lst[i]}`;\n    if (i === end - 1) {\n      str += '\\n';\n    } else {\n      str += `, `;\n    }\n  }\n  return str;\n};\n\n/*\nGiven a list lst, print the elements of lst, in order, but print the element at index i and i+1 on a single line.\n\n\nExample:\n  print([1, 2, 3, 4, 5, 6], 1, 2) ==> [3, 4]\n*/\nconst print = (lst, start = 0, end = 0) => {\n  let str = '';\n  let i = start;\n  for (; i < end; i += 1) {\n    str += `${lst[i]}`;\n    if (i === end - 1) {\n      str += '\\n';\n    } else {\n      str += `, `;\n    }\n  }\n  return str;\n};\n\n/*\nGiven two lists lst1 and lst2. Print the elements of lst1 and lst2, in order, but print the element at index i and i+1 on a single line.\n\n\nExample:\n  print([1, 2, 3, 4, 5, 6], 1, 2) ==> [3, 4]\n*/\nconst print = (lst1, lst2) => {\n  let str = '';\n  for (let i = 0; i < lst1.length; i += 1) {\n    str += `${lst1[i]}`;\n    if (lst2.indexOf(lst1[i])!== -1) {\n      str += `, ${lst2[lst2.indexOf(lst1[i]) + 1]}`;\n    } else {\n      str += ', ';\n    }\n  }\n  return str;\n};\n\nmodule.exports = {\n  add,\n  remove,\n  print\n};\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const arr = s.split(\" \");\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    const tmp = arr[i].split(\"\");\n    for (let j = 0; j < tmp.length; j++) {\n      tmp[j] = tmp[j].charCodeAt(0);\n      if (tmp[j] >= 97 && tmp[j] <= 122) {\n        tmp[j] = tmp[j] - 32;\n      } else if (tmp[j] >= 65 && tmp[j] <= 90) {\n        tmp[j] = tmp[j] - 48;\n      }\n      newArr.push(tmp[j]);\n    }\n  }\n  newArr = newArr.sort();\n  newArr = newArr.join(\" \");\n  return newArr;\n};\n\nconsole.log(antiShuffle('Hi'));\nconsole.log(antiShuffle('hello'));\nconsole.log(antiShuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let col = x\n  let row = 0\n  let arr = []\n  while (row < lst.length) {\n    let y = lst[row][col]\n    if (y) {\n      arr.push(y)\n    }\n    row += 1\n  }\n  return arr\n}\n\n/*\n  You will be given a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by columns in ascending order. \n   Also, sort coordinates of the row by rows in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(0, 2), (1, 1), (1, 0)]\n  */\nconst getCol = (lst, x) => {\n  let row = x\n  let col = 0\n  let arr = []\n  while (col < lst.length) {\n    let y = lst[row][col]\n    if (y) {\n      arr.push(y)\n    }\n    col += 1\n  }\n  return arr\n}\n\n/*\n  You will be given a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by columns in ascending order. \n   Also, sort coordinates of the row by rows in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2), (0, 0), (1, 1)]\n  */\nconst get = (lst, x) => {\n  if (typeof x === 'number') {\n    return getRow(lst, x)\n  } else {\n    return getCol(lst, x)\n  }\n}\n\nconst getCoords = (lst, x) => {\n  let lstX = get(lst, x)\n  let lstY = get(lst, x, 1)\n  return lstX.concat(lstY)\n}\n\nconst getCoord = (lst, x, y) => {\n  let coord = getCoords(lst, x)\n  return coord[y]\n}\n\nconst getMax = (lst, x) => {\n  let lstX = get(lst, x)\n  let lstY = get(lst, x, 1)\n  return Math.max(lstX, lstY)\n}\n\nconst getMin = (lst, x) => {\n  let lstX = get(lst, x)\n  let lstY = get(lst, x, 1)\n  return Math.min(lstX, lstY)\n}\n\nconst getMaxX = (lst) => {\n  return getMax(lst, 0)\n}\n\nconst getMaxY = (lst) => {\n  return getMax(lst, 1)\n}\n\nconst getMinX = (lst) => {\n  return getMin(lst, 0)\n}\n\nconst getMinY = (lst) => {\n  return getMin(lst, 1)\n}\n\nconst getSumX = (lst) => {\n  return sum(get(lst, 0))\n}\n\nconst getSumY = (lst) => {\n  return sum(get(lst, 1))\n}\n\nconst getSumXY = (lst) => {\n  return sum(get(lst, 0), get(lst, 1))\n}\n\nconst sum = (x, y) => {\n  return x + y\n}\n\nconst maxX = (lst) => {\n  return getMaxX(lst)\n}\n\nconst maxY = (lst) => {\n  return getMaxY(lst)\n}\n\nconst minX ="}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = []\n  const len = array.length\n\n  for (let i = 0; i < len; i += 1) {\n    let sum = 0\n    for (let j = i; j < len; j += 1) {\n      sum += array[j]\n    }\n    if (sum % 2 === 1) {\n      sortedArray.push(array[i])\n    } else {\n      sortedArray.unshift(array[i])\n    }\n  }\n\n  return sortedArray\n}\n\nexport default sortArray\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n    const rot = s => s.split('').map((x) => {\n        const rotator = () => {\n            const next = Math.floor(Math.random() * 26)\n            return (x === next? x : x + next)\n        }\n        return rotator()\n    }).join('')\n    return rot(s)\n}\n\n/*\nCreate a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will rotate in a manner such that the letters \n   will shift up by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'ilm'\n  encrypt('asdfghjkl') returns 'jklmnop'\n  encrypt('gf') returns 'hjk'\n  encrypt('et') returns 'ij'\n  */\nconst decrypt = (s) => {\n    const rot = s => s.split('').map((x) => {\n        const rotator = () => {\n            const next = Math.floor(Math.random() * 26)\n            return (x === next? x : x + next)\n        }\n        return rotator()\n    }).join('')\n    return rot(s)\n}\n\nmodule.exports = {\n    encrypt,\n    decrypt\n}<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n    if(lst.length===0) return null\n    const next=lst[0]\n    for(let i=1;i<lst.length;i++){\n        if(next>lst[i]){\n            return next\n        }\n    }\n    return null\n}\n\nmodule.exports={\n    nextSmallest\n}<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n    return S.match(/^(I)(\\s|.)*$/);\n}\n\nconst isParsed = (S) => {\n    return S.match(/^([A-Za-z]+)(\\s|.)*$/);\n}\n\nconst parse = (S) => {\n    return S.split(\" \");\n}\n\nconst isNumber = (S) => {\n    return S.match(/^\\d+$/);\n}\n\nconst parseNumber = (S) => {\n    return S.split(\" \")[0];\n}\n\nconst isEmpty = (S) => {\n    return S == \"\";\n}\n\nconst parseEmpty = (S) => {\n    return \"\";\n}\n\nconst isValid = (S) => {\n    return S.match(/^([A-Za-z]{2,})(\\s|.)*$/);\n}\n\nconst parseValid = (S) => {\n    return S.split(\" \");\n}\n\nconst isNotValid = (S) => {\n    return!S.match(/^([A-Za-z]{2,})(\\s|.)*$/);\n}\n\nconst parseNotValid = (S) => {\n    return S.split(\" \");\n}\n\nconst isValidNumber = (S) => {\n    return S.match(/^[0-9]{2,}$/);\n}\n\nconst parseValidNumber = (S) => {\n    return S.split(\" \")[0];\n}\n\nconst isNotValidNumber = (S) => {\n    return!S.match(/^[0-9]{2,}$/);\n}\n\nconst parseNotValidNumber = (S) => {\n    return S.split(\" \")[0];\n}\n\nconst isValidDate = (S) => {\n    return S.match(/^\\d{4}[\\/\\-](\\d{1,2})(\\d{1,2})\\s*$/);\n}\n\nconst parseValidDate = (S) => {\n    return S.split(\" \")[0];\n}\n\nconst isNotValidDate = (S) => {\n    return!S.match(/^\\d{4}[\\/\\-](\\d{1,2})(\\d{1,2})\\s*$/);\n}\n\nconst parseNotValidDate = (S) => {\n    return S.split(\" \")[0];\n}\n\nconst isValidEmail = (S) => {\n    return S.match(/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/);\n}\n\nconst parseValidEmail = (S) => {\n    return S.split(\" \")[0];\n}\n\nconst isNotValidEmail = (S) => {\n    return!S.match(/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/);\n}\n\nconst parseNotValidEmail = (S) => {\n    return S.split(\" \")[0];\n}\n\nconst isValidPhone = (S) => {\n    return S.match(/^(\\d{3})\\s?\\d{3}-\\d{4}$/);\n}\n\nconst parseValidPhone = (S) => {\n    return S.split(\" \")[0];\n}\n\nconst isNotValidPhone = (S) => {\n    return!S.match(/^(\\d{3})\\s?\\d{3}-\\d{4}$/);\n}\n\nconst parseNotValidPhone = (S) => {\n    return S.split(\" \")[0];\n}\n\nconst isValidPassword = (S) => {\n    return S.match(/^\\S[a-zA-Z0-9]+$/);\n}\n\nconst parseValidPassword = (S) => {\n    return S.split(\" \")[0];\n}\n\nconst isNotValidPassword = (S) => {\n    return!S.match(/^\\S[a-zA-Z0-9]+$/);\n}\n\nconst parseNotValidPassword = (S) => {\n    return S.split(\" \")[0];\n}\n\nconst isValidString = (S) => {\n    return S.match(/^([A-Za-z]|\\s|.)*$/);\n}\n\nconst parseValidString = (S) => {\n    return S.split(\" \");\n}\n\nconst isNotValidString = (S) => {\n    return!S.match(/^([A-Za-z]|\\s|.)*$/);\n}\n\nconst parseNotValidString = (S) => {\n    return S.split(\" \");\n}\n\nconst isValidPasswordLength = (S) => {\n    return S.match(/^\\S[a-zA-Z0-9]+$/);\n}\n\nconst parseValidPasswordLength = (S) => {\n    return S.split(\" \")[0];\n}\n\nconst isNotValidPasswordLength = (S) => {\n    return!S.match(/^\\S[a-zA-Z0-9]+$/);\n}\n\nconst parseNotValidPasswordLength = (S) => {\n    return S.split(\" \")[0];\n}\n\nconst isValidUsername = (S) => {\n    return S.match(/^[A-Za-z][A-Za-z0-9_-]{2,15}$/);\n}\n\nconst parseValidUsername = (S) => {\n    return S.split(\" \")[0];\n}\n\nconst isNotValidUsername = (S) => {\n    return!S.match(/"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y === z && typeof x === 'number' && typeof y === 'number' && typeof z === 'number');\n};\n\nconst isPrime = (number) => {\n  return number > 1 && number % 2 === 0;\n};\n\nconst isOdd = (number) => {\n  return number % 2 === 1;\n};\n\nconst isEven = (number) => {\n  return number % 2 === 0;\n};\n\nconst nextOdd = (number) => {\n  return number + 2;\n};\n\nconst nextEven = (number) => {\n  return number + 2;\n};\n\nconst nextPrime = (number) => {\n  while (isPrime(number)) {\n    number += 2;\n  }\n  return number;\n};\n\nconst isPrimeNumber = (number) => {\n  return number > 1 && number % 2 === 0;\n};\n\nconst nextPrimeNumber = (number) => {\n  while (isPrimeNumber(number)) {\n    number += 2;\n  }\n  return number;\n};\n\nconst nextOddPrimeNumber = (number) => {\n  while (isPrimeNumber(number)) {\n    number += 2;\n  }\n  return number;\n};\n\nconst nextEvenPrimeNumber = (number) => {\n  while (isPrimeNumber(number)) {\n    number += 2;\n  }\n  return number;\n};\n\nconst nextPrimeNumbers = (number) => {\n  const numbers = [];\n  while (isPrimeNumber(number)) {\n    numbers.push(number);\n    number += 2;\n  }\n  return numbers;\n};\n\nconst isValidNumber = (number) => {\n  return number > 0 && number <= 100;\n};\n\nconst isValidString = (string) => {\n  return string.length > 0;\n};\n\nconst isValidInteger = (integer) => {\n  return integer >= 0;\n};\n\nconst isValidDecimal = (decimal) => {\n  return decimal >= 0 && decimal <= 100;\n};\n\nconst isValidNumberArray = (array) => {\n  return array.length > 0;\n};\n\nconst isValidStringArray = (array) => {\n  return array.length > 0;\n};\n\nconst isValidIntegerArray = (array) => {\n  return array.length > 0;\n};\n\nconst isValidDecimalArray = (array) => {\n  return array.length > 0;\n};\n\nconst getRandomInt = (max) => {\n  return Math.floor(Math.random() * max);\n};\n\nconst getRandomDecimal = () => {\n  return getRandomInt(100);\n};\n\nconst getRandomString = (max) => {\n  let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let length = getRandomInt(max);\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += characters[getRandomInt(characters.length)];\n  }\n  return result;\n};\n\nconst getRandomArray = (size) => {\n  const array = [];\n  for (let i = 0; i < size; i++) {\n    array.push(getRandomInt(100));\n  }\n  return array;\n};\n\nconst getRandomArrayOfStrings = (size) => {\n  const array = [];\n  for (let i = 0; i < size; i++) {\n    array.push(getRandomString(20));\n  }\n  return array;\n};\n\nconst getRandomArrayOfInteger = (size) => {\n  const array = [];\n  for (let i = 0; i < size; i++) {\n    array.push(getRandomInt(100));\n  }\n  return array;\n};\n\nconst getRandomArrayOfDecimal = (size) => {\n  const array = [];\n  for (let i = 0; i < size; i++) {\n    array.push(getRandomDecimal());\n  }\n  return array;\n};\n\nconst getRandomArrayOfArray = (size) => {\n  const array = [];\n  for (let i = 0; i < size; i++) {\n    array.push(getRandomArray(10));\n  }\n  return array;\n};\n\nconst getRandomArrayOfStringArray = (size) => {\n  const array = [];\n  for (let i = 0; i < size; i++) {\n    array.push(getRandomArrayOfStrings(10));\n  }\n  return array;\n};\n\nconst getRandomArrayOfIntegerArray = (size) => {\n  const array = [];\n  for (let i = 0; i < size; i++) {\n    array.push(getRandomArrayOfInteger(10));\n  }\n  return array;\n};\n\nconst getRandomArrayOfDecimalArray = (size) => {\n  const array = [];\n  for (let i = 0; i < size; i++) {\n    array.push(getRandomArrayOfDecimal(10));\n  }\n  return array;\n};\n\nconst getRandomArrayOfArrayOfArray = (size) => {\n  const array = [];\n  for (let i = 0; i < size; i++) {\n    array.push(getRandomArrayOfArray(10));\n  }\n  return array;\n};\n\nconst getRandomArrayOfArrayOfArray = (size) => {\n  const array = [];\n  for (let i = 0; i < size; i++) {\n    array.push(getRandomArrayOfArray(10));\n  }\n  return array;\n};\n\nconst getRandomArrayOfObject = (size) => {\n  const array = [];\n  for (let i = 0; i < size; i++) {\n    const object = {};\n    object.value = getRandomInt(100);\n    object.label = getRandomString(20);\n    array.push(object);\n"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const map = {\n    \"A\": \"B\",\n    \"B\": \"A\",\n    \"C\": \"X\",\n    \"X\": \"C\",\n    \"D\": \"X\",\n    \"E\": \"Z\",\n    \"F\": \"X\",\n    \"G\": \"R\",\n    \"H\": \"F\",\n    \"I\": \"S\",\n    \"J\": \"X\",\n    \"K\": \"X\",\n    \"L\": \"X\",\n    \"M\": \"X\",\n    \"N\": \"X\",\n    \"O\": \"X\",\n    \"P\": \"X\",\n    \"Q\": \"X\",\n    \"R\": \"X\",\n    \"S\": \"O\",\n    \"T\": \"X\",\n    \"U\": \"X\",\n    \"V\": \"X\",\n    \"W\": \"X\",\n    \"X\": \"X\",\n    \"Y\": \"X\",\n    \"Z\": \"X\"\n  }\n\n  const result = []\n\n  for (let i = 0; i < message.length; i++) {\n    let c = message[i]\n    if (map[c]) {\n      c = map[c]\n    }\n\n    result.push(c)\n  }\n\n  return result.join('')\n}\n\n/*\n  Write a function that will take a message, and decodes it in such a way \n   that it will swap case of all letters, will replace all vowels in the \n   message with the letter that will appear 2 places ahead of that vowel \n   in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('This is a message')\n  'This is a message'\n  */\nconst decode = (message) => {\n  const map = {\n    \"B\": \"A\",\n    \"C\": \"X\",\n    \"X\": \"C\",\n    \"D\": \"X\",\n    \"E\": \"Z\",\n    \"F\": \"X\",\n    \"G\": \"R\",\n    \"H\": \"F\",\n    \"I\": \"S\",\n    \"J\": \"X\",\n    \"K\": \"X\",\n    \"L\": \"X\",\n    \"M\": \"X\",\n    \"N\": \"X\",\n    \"O\": \"X\",\n    \"P\": \"X\",\n    \"Q\": \"X\",\n    \"R\": \"X\",\n    \"S\": \"O\",\n    \"T\": \"X\",\n    \"U\": \"X\",\n    \"V\": \"X\",\n    \"W\": \"X\",\n    \"X\": \"X\",\n    \"Y\": \"X\",\n    \"Z\": \"X\"\n  }\n\n  const result = []\n\n  for (let i = 0; i < message.length; i++) {\n    let c = message[i]\n    if (map[c]) {\n      c = map[c]\n    }\n\n    result.push(c)\n  }\n\n  return result.join('')\n}\n\n/*\n  Write a function that will take a message, and swaps case of all letters. \n   Assume only letters. \n  \n   Examples:\n  >>> swapcase('TEST')\n  'TEST'\n  >>> swapcase('This is a message')\n  'This is a message'\n  */\nconst swapcase = (message) => {\n  const result = []\n\n  for (let i = 0; i < message.length; i++) {\n    let c = message[i]\n    if (c.toUpperCase() === c.toLowerCase()) {\n      c = c.toUpperCase()\n    }\n\n    result.push(c)\n  }\n\n  return result.join('')\n}\n\nmodule.exports = {\n  encode,\n  decode,\n  swapcase\n}\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let t = lst[i];\n    let j = t;\n    while (j--) {\n      max = Math.max(max, j);\n    }\n  }\n  return max;\n};\n\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  let isAllKeysUpper = true\n  let isAllKeysLower = true\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toLowerCase()!== keys[i].toUpperCase()) {\n      isAllKeysLower = false\n    }\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n      isAllKeysUpper = false\n    }\n  }\n  return isAllKeysUpper && isAllKeysLower\n}\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n    let arr = []\n    let i = 0\n    while(i < n) {\n        arr.push(nextPrime(i))\n        i++\n    }\n    return arr\n}\n\n/*\n  Implement a function that will take an integer and will return the next prime number\n  that is greater than the number given. For example:\n  nextPrime(4) => 7\n  nextPrime(10) => 11\n  nextPrime(11) => 13\n  nextPrime(3) => 5\n  nextPrime(2) => 3\n  nextPrime(1) => 1\n  nextPrime(0) => 2\n  */\nconst nextPrime = (n) => {\n    let i = n + 1\n    let isPrime = true\n    while(isPrime) {\n        if(i % 2 === 0) {\n            i += 1\n            isPrime = false\n        }\n        else {\n            i += 1\n        }\n    }\n    return i\n}\n\n/*\nImplement a function that will take an array of numbers and return a list of the first k\nelements of that array that are prime numbers. For example:\n\nprimeList([2,3,5,7,11,13,17,19,23]) => [2,3,5,7,11,13,17,19]\nprimeList([2,3,5,7,11,13,17,19,23,29,31]) => [2,3,5,7,11,13,17,19]\nprimeList([2,3,5,7,11,13,17,19,23,29,31,37,41]) => [2,3,5,7,11,13,17,19,23,29,31]\nprimeList([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51]) => [2,3,5,7,11,13,17,19,23,29,31,37,41]\nprimeList([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,57,59,61,63,67,71]) => [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,57,59,61,63,67,71]\nprimeList([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,57,59,61,63,67,71,73,77,79]) => [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,57,59,61,63,67,71,73,77,79]\nprimeList([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,57,59,61,63,67,71,73,77,79,83,87,91,93,97,99,101,103,107,109,113,117,119,121,123,127,129,131,133,137,139,143,147,151,153,157,159,163,167,169,173,179,181,187,191,193,197,199,203,207,211,223,227,229,233,239,241,247,251,257,263,269,271,277,281,283,289,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,899,907,911,919,929,937,941,947,953,967,971,977,983,991,997]) => [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,57,59,61,63,67,71,73,77,79]\nprimeList([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,51,53,57,59,61,63,67,71,73,77,79,83,87,91,93,97,99,101,103,107,109,113,117,119,121,123,127,129,131,133,137,139,143,147,151,153,157,159,163,167,169,173,179,181,187,191,193,197,199,203,207,211,223,227,229,233,239,241,247,251,257,263,269,271,277,281,283,289,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const arr = [].concat(a, b);\n  const result = arr.reduce((acc, current) => acc * current, 1);\n  return result;\n};\n\n//# sourceMappingURL=exercise-2.js.map<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i].toUpperCase() === s[i]) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n// Test\nconsole.log(countUpper('aBCdEf')); // 1\nconsole.log(countUpper('abcdefg')); // 0\nconsole.log(countUpper('dBBE')); // 0\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  // if the value is a string, convert to a number\n  value = Number(value);\n\n  if(isNaN(value)) {\n    throw new Error(`The value ${value} is not a number.`);\n  }\n\n  let closest = 0;\n  let greatest = Math.abs(value);\n  let min = Math.min(closest, greatest);\n  let max = Math.max(closest, greatest);\n\n  if(Math.abs(max - Math.floor(max)) > Math.abs(min - Math.floor(min))) {\n    closest = Math.floor(max);\n  } else {\n    closest = Math.ceil(min);\n  }\n\n  return closest;\n};\n\nmodule.exports = closestInteger;<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let i = 0;\n  const piles = [];\n  while (i < n) {\n    const pile = [];\n    const iOdd = i + (i % 2);\n    const iEven = i + (i % 2);\n    while (i < iOdd) {\n      pile.push(iOdd);\n      i++;\n    }\n    while (i < iEven) {\n      pile.push(iEven);\n      i++;\n    }\n    piles.push(pile);\n  }\n  return piles;\n};\n\nconst makeAPile2 = (n) => {\n  let i = 0;\n  const piles = [];\n  while (i < n) {\n    const pile = [];\n    const iOdd = i + (i % 2);\n    const iEven = i + (i % 2);\n    while (i < iOdd) {\n      pile.push(iOdd);\n      i++;\n    }\n    while (i < iEven) {\n      pile.push(iEven);\n      i++;\n    }\n    piles.push(pile);\n  }\n  return piles;\n};\n\n/*\n  If n is a positive integer, return a list of n integers where \n  the ith element is the number of grains that can be placed on the ith level \n  in a pile of stones.\n  In other words, the ith element of the returned list will be equal to n - i.\n */\nconst makeAPile3 = (n) => {\n  let i = 0;\n  const piles = [];\n  while (i < n) {\n    const pile = [];\n    const iOdd = i + (i % 2);\n    const iEven = i + (i % 2);\n    while (i < iOdd) {\n      pile.push(iOdd);\n      i++;\n    }\n    while (i < iEven) {\n      pile.push(iEven);\n      i++;\n    }\n    piles.push(pile);\n  }\n  return piles;\n};\n\n/*\n  Write a function that takes an integer n and returns a list of the first n \n  piles of stones in a pile of stones.\n  For example, if n is 4, your function should return the following list:\n\n   [[3, 5, 7], [2, 4, 6], [1, 3, 5]]\n */\nconst makeAPile4 = (n) => {\n  let i = 0;\n  const piles = [];\n  while (i < n) {\n    const pile = [];\n    const iOdd = i + (i % 2);\n    const iEven = i + (i % 2);\n    while (i < iOdd) {\n      pile.push(iOdd);\n      i++;\n    }\n    while (i < iEven) {\n      pile.push(iEven);\n      i++;\n    }\n    piles.push(pile);\n  }\n  return piles;\n};\n\n/*\n  Write a function that takes an integer n and returns a list of the first n \n  piles of stones in a pile of stones.\n  For example, if n is 4, your function should return the following list:\n\n   [[3, 5, 7], [2, 4, 6], [1, 3, 5]]\n */\nconst makeAPile5 = (n) => {\n  let i = 0;\n  const piles = [];\n  while (i < n) {\n    const pile = [];\n    const iOdd = i + (i % 2);\n    const iEven = i + (i % 2);\n    while (i < iOdd) {\n      pile.push(iOdd);\n      i++;\n    }\n    while (i < iEven) {\n      pile.push(iEven);\n      i++;\n    }\n    piles.push(pile);\n  }\n  return piles;\n};\n\n/*\n  Write a function that takes an integer n and returns a list of the first n \n  piles of stones in a pile of stones.\n  For example, if n is 4, your function should return the following list:\n\n   [[3, 5, 7], [2, 4, 6], [1, 3, 5]]\n */\nconst makeAPile6 = (n) => {\n  let i = 0;\n  const piles = [];\n  while (i < n) {\n    const pile = [];\n    const iOdd = i + (i % 2);\n    const iEven = i + (i % 2);\n    while (i < iOdd) {\n      pile.push(iOdd);\n      i++;\n    }\n    while (i < iEven) {\n      pile.push(iEven);\n      i++;\n    }\n    piles.push(pile);\n  }\n  return piles;\n};\n\nexport {\n  makeAPile,\n  makeAPile2,\n  makeAPile3,\n  makeAPile4,\n  makeAPile5,\n  makeAPile6\n};\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n    const words = [];\n    const splitString = s.split(/\\s+/);\n    for (let i = 0; i < splitString.length; i++) {\n        const word = splitString[i];\n        words.push(word);\n    }\n    return words;\n};\n\n/*\n  You will be given a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n    const words = [];\n    const splitString = s.split(/\\s+/);\n    for (let i = 0; i < splitString.length; i++) {\n        const word = splitString[i];\n        words.push(word);\n    }\n    return words;\n};\n\nconst wordsString = (s) => {\n    const words = [];\n    const splitString = s.split(/\\s+/);\n    for (let i = 0; i < splitString.length; i++) {\n        const word = splitString[i];\n        words.push(word);\n    }\n    return words;\n};\n\n/*\n  You will be given a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n    const words = [];\n    const splitString = s.split(/\\s+/);\n    for (let i = 0; i < splitString.length; i++) {\n        const word = splitString[i];\n        words.push(word);\n    }\n    return words;\n};\n\nconst wordsString = (s) => {\n    const words = [];\n    const splitString = s.split(/\\s+/);\n    for (let i = 0; i < splitString.length; i++) {\n        const word = splitString[i];\n        words.push(word);\n    }\n    return words;\n};\n\nconst wordsString = (s) => {\n    const words = [];\n    const splitString = s.split(/\\s+/);\n    for (let i = 0; i < splitString.length; i++) {\n        const word = splitString[i];\n        words.push(word);\n    }\n    return words;\n};\n\nconst wordsString = (s) => {\n    const words = [];\n    const splitString = s.split(/\\s+/);\n    for (let i = 0; i < splitString.length; i++) {\n        const word = splitString[i];\n        words.push(word);\n    }\n    return words;\n};\n\nconst wordsString = (s) => {\n    const words = [];\n    const splitString = s.split(/\\s+/);\n    for (let i = 0; i < splitString.length; i++) {\n        const word = splitString[i];\n        words.push(word);\n    }\n    return words;\n};\n\nconst wordsString = (s) => {\n    const words = [];\n    const splitString = s.split(/\\s+/);\n    for (let i = 0; i < splitString.length; i++) {\n        const word = splitString[i];\n        words.push(word);\n    }\n    return words;\n};\n\nconst wordsString = (s) => {\n    const words = [];\n    const splitString = s.split(/\\s+/);\n    for (let i = 0; i < splitString.length; i++) {\n        const word = splitString[i];\n        words.push(word);\n    }\n    return words;\n};\n\nconst wordsString = (s) => {\n    const words = [];\n    const splitString = s.split(/\\s+/);\n    for (let i = 0; i < splitString.length; i++) {\n        const word = splitString[i];\n        words.push(word);\n    }\n    return words;\n};\n\nconst wordsString = (s) => {\n    const words = [];\n    const splitString = s.split(/\\s+/);\n    for (let i = 0; i < splitString.length; i++) {\n        const word = splitString[i];\n        words.push(word);\n    }\n    return words;\n};\n\nconst wordsString = (s) => {\n    const words = [];\n    const splitString = s.split(/\\s+/);\n    for (let i = 0; i < splitString.length; i++) {\n        const word = splitString[i];\n        words.push(word);\n    }\n    return words;\n};\n\nconst wordsString = (s) => {\n    const words = [];\n    const splitString = s.split(/\\s+/);\n    for (let i = 0; i < splitString.length; i++) {\n        const word = splitString[i];\n        words.push(word);\n    }\n    return words;\n};\n\nconst wordsString = (s) => {\n    const words = [];\n    const splitString = s.split(/\\s+/);\n    for (let i = 0; i < splitString.length; i++) {\n        const word = splitString[i];\n        words.push(word);\n    }"}
{"task_id": "JavaScript/102", "prompt": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n\n  let result = chooseNum(x, y - 1);\n  if (result === -1) {\n    return result;\n  }\n  if (x % 2 === 0) {\n    return result + 1;\n  }\n  return result;\n}\n\nconst chooseNum2 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n\n  let result = chooseNum2(x, y - 1);\n  if (result === -1) {\n    return result;\n  }\n  if (x % 2 === 0) {\n    return result + 1;\n  }\n  return result;\n}\n\nmodule.exports = {\n  chooseNum,\n  chooseNum2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) return -1;\n  const avg = (n + m) / 2;\n  return toBinary(avg);\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n\n/*You will be given a positive integer, n, and your task will be to compute the \n   average of the squares of the integers from 1 through n (including n). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than 0, return-1.\n  Example:\n  roundedAvgSquares(1) => \"0b101\"\n  roundedAvgSquares(5) => -1\n  roundedAvgSquares(10) => \"0b1010\"\n  roundedAvgSquares(20) => \"0b10100\"\n  */\nconst roundedAvgSquares = (n) => {\n  if (n <= 0) return -1;\n  const avgSquares = (n * n) / 2;\n  return toBinary(avgSquares);\n};\n\nconsole.log(roundedAvgSquares(1));\nconsole.log(roundedAvgSquares(5));\nconsole.log(roundedAvgSquares(10));\nconsole.log(roundedAvgSquares(20));\n\n/*You will be given two positive integers n and m, and your task will be to \n   compute the difference between the average of the integers from n to m \n   (excluding n and m) and the square of the average of the integers from n \n   to m (excluding n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  difference(1, 5) => \"0b11\"\n  difference(7, 5) => -1\n  difference(10, 20) => \"0b1110\"\n  difference(20, 33) => \"0b11100\"\n  */\nconst difference = (n, m) => {\n  if (n > m) return -1;\n  const avg = (n + m) / 2;\n  const avgSquares = (n * n + m * m) / 2;\n  const diff = avgSquares - avg * avg;\n  return toBinary(diff);\n};\n\nconsole.log(difference(1, 5));\nconsole.log(difference(7, 5));\nconsole.log(difference(10, 20));\nconsole.log(difference(20, 33));\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n    let res = [],\n        s = [];\n    x.forEach((d) => {\n        s.push(d);\n    });\n    s.sort();\n    s.forEach((d) => {\n        if (!(d % 2)) {\n            res.push(d);\n        }\n    });\n    return res;\n};\n\nexport {\n    uniqueDigits\n};<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n    return arr.reduce((acc, val) => {\n        if (val > 9 || val < 1) {\n            return acc\n        }\n        acc.push(val +'s')\n        return acc\n    }, []).reverse()\n}\n\nconst byName = (arr) => {\n    return arr.reduce((acc, val) => {\n        if (val > 9 || val < 1) {\n            return acc\n        }\n        acc.push(val +'s')\n        return acc\n    }, []).reverse()\n}\n\nconst byDigit = (arr) => {\n    return arr.reduce((acc, val) => {\n        if (val > 9 || val < 1) {\n            return acc\n        }\n        acc.push(val +'s')\n        return acc\n    }, []).reverse()\n}\n\nconst byArray = (arr) => {\n    return arr.reduce((acc, val) => {\n        if (val > 9 || val < 1) {\n            return acc\n        }\n        acc.push(val +'s')\n        return acc\n    }, []).reverse()\n}\n\nconst byDate = (arr) => {\n    return arr.reduce((acc, val) => {\n        if (val > 9 || val < 1) {\n            return acc\n        }\n        acc.push(val +'s')\n        return acc\n    }, []).reverse()\n}\n\nconst byOrdinal = (arr) => {\n    return arr.reduce((acc, val) => {\n        if (val > 9 || val < 1) {\n            return acc\n        }\n        acc.push(val +'s')\n        return acc\n    }, []).reverse()\n}\n\nconst byString = (arr) => {\n    return arr.reduce((acc, val) => {\n        if (val > 9 || val < 1) {\n            return acc\n        }\n        acc.push(val +'s')\n        return acc\n    }, []).reverse()\n}\n\nconst byNumber = (arr) => {\n    return arr.reduce((acc, val) => {\n        if (val > 9 || val < 1) {\n            return acc\n        }\n        acc.push(val +'s')\n        return acc\n    }, []).reverse()\n}\n\nconst sort = (arr) => {\n    switch (typeof arr) {\n        case'string':\n            return byString(arr)\n        case 'number':\n            return byNumber(arr)\n        case 'boolean':\n            return byArray(arr)\n        case 'object':\n            return byArray(arr)\n        case 'function':\n            return byArray(arr)\n        case 'date':\n            return byDate(arr)\n        case 'array':\n            return byArray(arr)\n        case 'boolean':\n            return byArray(arr)\n        default:\n            return byString(arr)\n    }\n}\n\nconst reverse = (arr) => {\n    return arr.reverse()\n}\n\nconst sortWithLength = (arr) => {\n    switch (typeof arr) {\n        case'string':\n            return byLength(arr)\n        case 'number':\n            return byNumber(arr)\n        case 'boolean':\n            return byArray(arr)\n        case 'object':\n            return byArray(arr)\n        case 'function':\n            return byArray(arr)\n        case 'date':\n            return byDate(arr)\n        case 'array':\n            return byArray(arr)\n        case 'boolean':\n            return byArray(arr)\n        default:\n            return byLength(arr)\n    }\n}\n\nconst reverseWithLength = (arr) => {\n    return arr.reverse()\n}\n\nconst sortWithName = (arr) => {\n    switch (typeof arr) {\n        case'string':\n            return byName(arr)\n        case 'number':\n            return byNumber(arr)\n        case 'boolean':\n            return byArray(arr)\n        case 'object':\n            return byArray(arr)\n        case 'function':\n            return byArray(arr)\n        case 'date':\n            return byDate(arr)\n        case 'array':\n            return byArray(arr)\n        case 'boolean':\n            return byArray(arr)\n        default:\n            return byName(arr)\n    }\n}\n\nconst reverseWithName = (arr) => {\n    return arr.reverse()\n}\n\nconst sortWithDigit = (arr) => {\n    switch (typeof arr) {\n        case'string':\n            return byDigit(arr)\n        case 'number':\n            return byNumber(arr)\n        case 'boolean':\n            return byArray(arr)\n        case 'object':\n            return byArray(arr)\n        case 'function':\n            return byArray(arr)\n        case 'date':\n            return byDate(arr)\n        case 'array':\n            return byArray(arr)\n        case 'boolean':\n            return byArray(arr)\n        default:\n            return byDigit(arr)\n    }\n}\n\nconst reverseWithDigit = (arr) => {\n    return arr.reverse()\n}\n\nconst sortWithOrdinal = (arr) => {\n    switch (typeof arr) {\n        case'string':\n            return byOrdinal(arr)\n        "}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const list = []\n  const factorial = (x) => x\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      list.push(factorial(i))\n    } else {\n      list.push(factorial(i) + list.reduce((a, b) => a + b, 0))\n    }\n  }\n  return list\n}\n\nconsole.log(f(5))\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evens = 0\n  const odds = 0\n\n  for (let i = 1; i <= n; i++) {\n    const odd = isOdd(i)\n    if (odd) {\n      odds += 1\n    } else {\n      evens += 1\n    }\n  }\n\n  return [evens, odds]\n}\n\n/*\n  Given a positive integer n, return a list that will have the nth fibonacci number.\n\n  Example:\n\n      Input: 3\n      Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n      Explanation:\n      Fibonacci sequence is 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144\n\n  Note:\n      1. 1 <= n <= 10^4\n      2. returned list is sorted in ascending order.\n  */\nconst fibonacci = (n) => {\n  const evens = 0\n  const odds = 0\n\n  const result = []\n\n  for (let i = 1; i <= n; i++) {\n    const odd = isOdd(i)\n    if (odd) {\n      odds += 1\n    } else {\n      evens += 1\n    }\n  }\n\n  let fib = 0\n  let fibo = 1\n  let last = 0\n\n  for (let i = 0; i < n; i++) {\n    if (odds === 0) {\n      fibo += 1\n      fib = fibo\n      odds = 1\n    } else {\n      fibo += fibo\n      fib = fibo\n      odds = 0\n    }\n\n    result.push(fib)\n\n    last = fibo\n  }\n\n  result.push(last)\n\n  return result\n}\n\n/*\n  Given a positive integer n, return a list that will have the nth permutation of the digits of the number.\n\n  Example:\n\n      Input: 3\n      Output: [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99, 102, 105, 108, 111, 114, 117, 120, 123, 126, 129, 132, 135, 138, 141, 144, 147, 150, 153, 156, 159, 162, 165, 168, 171, 174, 177, 180, 183, 186, 189, 192, 195, 198, 201, 204, 207, 210, 213, 216, 219, 222, 225, 228, 231, 234, 237, 240, 243, 246, 249, 252, 255, 258, 261, 264, 267, 270, 273, 276, 279, 282, 285, 288, 291, 294, 297, 300, 303, 306, 309, 312, 315, 318, 321, 324, 327, 330, 333, 336, 339, 342, 345, 348, 351, 354, 357, 360, 363, 366, 369, 372, 375, 378, 381, 384, 387, 390, 393, 396, 399, 402, 405, 408, 411, 414, 417, 420, 423, 426, 429, 432, 435, 438, 441, 444, 447, 450, 453, 456, 459, 462, 465, 468, 471, 474, 477, 480, 483, 486, 489, 492, 495, 498, 501, 504, 507, 510, 513, 516, 519, 522, 525, 528, 531, 534, 537, 540, 543, 546, 549, 552, 555, 558, 561, 564, 567, 570, 573, 576, 579, 582, 585, 588, 591, 594, 597, 600, 603, 606, 609, 612, 615, 618, 621, 624, 627, 630, 633, 636, 639, 642, 645, 648, 651, 654, 657, 660, 663, 666, 669, 672, 675, 678, 681, 684, 687, 690, 693, 696, 699, 702, 705, 708, 711, 714, 717, 720, 723, 726, 729, 732, 735, 738, 741, 744, 747, 750, 753, 756, 759, 762, 765, 768, 771, 774, 777, 780, 783, 786, 789, 792, 795, 798, 801, 804, 807, 810, 813, 816, 819, 822, 825, 828, 831, 834, 837, 840, 843, 846, 849, 852, 855, 858, 861, 864, 867, 870, 873, 876, 879, 882, 885, 888, 891, 894, 897, 900, 903, 906, 909, 912, 915, 918, 921, 924, 927, 930, 933, 936, 939, 942, 945, 948, 951, 954, 957, 960, 963, 966, 969, 972, 975, 978, 981, 984, 987, 990, 993, 996, 999, 1002, 1005, 1008, 1011, 1014, 1017, 1020, 1023, 1026"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let res = 0;\n  arr.forEach(el => {\n    if(el < 0) {\n      res += Math.pow(Math.abs(el), -1) - 1;\n    } else {\n      res += el;\n    }\n  });\n  return res;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    let i = 0, j = arr.length - 1;\n    let n = arr.length;\n    while (i <= j) {\n        while (i < n && arr[i] < arr[i + 1]) {\n            arr[i] = arr[i + 1];\n            i++;\n        }\n        if (i == n) {\n            return true;\n        }\n        arr[i + 1] = arr[i];\n        while (j > i && arr[j] > arr[j - 1]) {\n            arr[j] = arr[j - 1];\n            j--;\n        }\n        if (j == i) {\n            return false;\n        }\n        arr[j] = arr[i];\n        i++;\n        j--;\n    }\n    return true;\n}\n\nmoveOneBall([3, 4, 5, 1, 2]);\nmoveOneBall([4, 3, 2, 1, 5]);\nmoveOneBall([6, 4, 2, 1, 5]);\nmoveOneBall([3, 2, 1, 4, 5]);\nmoveOneBall([4, 5, 2, 1, 3]);\nmoveOneBall([3, 5, 4, 2, 1]);\nmoveOneBall([3, 5, 4, 2, 1, 5]);\nmoveOneBall([6, 4, 3, 2, 1, 5]);\nmoveOneBall([6, 5, 4, 3, 2, 1]);\nmoveOneBall([6, 5, 4, 3, 2, 1, 5]);\nmoveOneBall([6, 5, 4, 3, 2, 1, 3]);\nmoveOneBall([6, 5, 4, 3, 2, 1, 3, 5]);\nmoveOneBall([6, 5, 4, 3, 2, 1, 3, 5, 6]);\nmoveOneBall([6, 5, 4, 3, 2, 1, 3, 5, 6, 7]);\nmoveOneBall([6, 5, 4, 3, 2, 1, 3, 5, 6, 7, 8]);\nmoveOneBall([6, 5, 4, 3, 2, 1, 3, 5, 6, 7, 8, 9]);\nmoveOneBall([6, 5, 4, 3, 2, 1, 3, 5, 6, 7, 8, 9, 10]);\nmoveOneBall([6, 5, 4, 3, 2, 1, 3, 5, 6, 7, 8, 9, 10, 11]);\nmoveOneBall([6, 5, 4, 3, 2, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12]);\nmoveOneBall([6, 5, 4, 3, 2, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13]);\nmoveOneBall([6, 5, 4, 3, 2, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]);\nmoveOneBall([6, 5, 4, 3, 2, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\nmoveOneBall([6, 5, 4, 3, 2, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\nmoveOneBall([6, 5, 4, 3, 2, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]);\nmoveOneBall([6, 5, 4, 3, 2, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]);\nmoveOneBall([6, 5, 4, 3, 2, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]);\nmoveOneBall([6, 5, 4, 3, 2, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);\nmoveOneBall([6, 5, 4, 3, 2, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]);\nmoveOneBall([6, 5, 4, 3, 2, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]);\nmoveOneBall([6, 5, 4, 3, 2, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]);\nmoveOneBall([6, 5, 4, 3, 2, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]);\nmoveOneBall([6, 5, 4, 3, 2, 1, 3, 5, 6, 7, 8, 9"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if(lst1.length === 0 || lst2.length === 0)\n    return false;\n  let lst1Length = lst1.length;\n  let lst2Length = lst2.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = false;\n  while(i < lst1Length && j < lst2Length) {\n    if(lst1[i] == lst2[j]) {\n      flag = true;\n      i++;\n      j++;\n      k++;\n    } else if(lst1[i] < lst2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if(flag && k === lst1Length)\n    return true;\n  return false;\n}\n\n/*\nInput:\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nOutput:\n\"YES\"\n\nExplanation:\nWe can choose one element from the list and move it to the end of the other list to make all the \nelements of the lists to be even.\nWe can choose another element from the list and move it to the end of the other list to make all \nthe elements of the lists to be even.\nWe can choose one element from the list and move it to the end of the other list to make all the \nelements of the lists to be even.\n*/\nconst isExchange = (lst1, lst2) => {\n  if(lst1.length === 0 || lst2.length === 0)\n    return false;\n  let lst1Length = lst1.length;\n  let lst2Length = lst2.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = false;\n  while(i < lst1Length && j < lst2Length) {\n    if(lst1[i] == lst2[j]) {\n      flag = true;\n      i++;\n      j++;\n      k++;\n    } else if(lst1[i] < lst2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if(flag && k === lst1Length)\n    return true;\n  return false;\n}\n\nmodule.exports = {\n  exchange,\n  isExchange\n}\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {}\n  for (let i = 0; i < test.length; i += 1) {\n    const char = test.charAt(i)\n    if (histogram[char] === undefined) {\n      histogram[char] = 1\n    } else {\n      histogram[char] += 1\n    }\n  }\n  return histogram\n}\n\n/* Given a string, return a dictionary of the letter with the most repetition and \n   containing the corresponding count.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {}\n  for (let i = 0; i < test.length; i += 1) {\n    const char = test.charAt(i)\n    if (histogram[char] === undefined) {\n      histogram[char] = 1\n    } else {\n      histogram[char] += 1\n    }\n  }\n  return histogram\n}\n\n/*Given a string, return a dictionary of the letter with the most repetition and \n   containing the corresponding count.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {}\n  for (let i = 0; i < test.length; i += 1) {\n    const char = test.charAt(i)\n    if (histogram[char] === undefined) {\n      histogram[char] = 1\n    } else {\n      histogram[char] += 1\n    }\n  }\n  return histogram\n}\n\n/*Given a string, return a dictionary of the letter with the most repetition and \n   containing the corresponding count.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {}\n  for (let i = 0; i < test.length; i += 1) {\n    const char = test.charAt(i)\n    if (histogram[char] === undefined) {\n      histogram[char] = 1\n    } else {\n      histogram[char] += 1\n    }\n  }\n  return histogram\n}\n\n/* Given a string, return a dictionary of the letter with the most repetition and \n   containing the corresponding count.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {}\n  for (let i = 0; i < test.length; i += 1) {\n    const char = test.charAt(i)\n    if (histogram[char] === undefined) {\n      histogram[char] = 1\n    } else {\n      histogram[char] += 1\n    }\n  }\n  return histogram\n}\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = s.split('');\n  let r = '';\n  let f = '';\n  c.split('').forEach(c => {\n    if(s.indexOf(c)!== -1) {\n      r = r + s.charAt(s.indexOf(c) + 1);\n      s = s.replace(c, '');\n    } else {\n      f = f + s.charAt(s.indexOf(c));\n    }\n  });\n  if(f.length === 0 && r.length > 0) {\n    return [r, true];\n  }\n  return [f, false];\n}\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  return lst.reduce((acc, str) => {\n    const numDigits = str.split('').filter(digit => {\n      return!digit.match(/[0-9]/);\n    }).length;\n    return acc.concat([`the number of odd elements ${numDigits} of the ${str} of the ${acc.length} input.`]);\n  }, []);\n};\n\n//export const oddCount = (lst) => {\n//  return lst.reduce((acc, str) => {\n//    const numDigits = str.split('').filter(digit => {\n//      return!digit.match(/[0-9]/);\n//    }).length;\n//    return acc.concat([`the number of odd elements ${numDigits} of the ${str} of the ${acc.length} input.`]);\n//  }, []);\n//};\n\nmodule.exports = oddCount;<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const n = nums.length\n  const currSum = nums[0]\n  let minSum = currSum\n  let index = 0\n  let maxIndex = 0\n\n  // go over all elements except the first one\n  for (let i = 1; i < n; i++) {\n    currSum += nums[i]\n    if (currSum < 0) {\n      currSum = 0\n    }\n    if (currSum < minSum) {\n      minSum = currSum\n      index = i\n      maxIndex = i\n    }\n  }\n  return minSum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    // init array\n    const res = []\n    const numRows = grid.length\n    const numCols = grid[0].length\n    const bucket = []\n    for (let i = 0; i < numRows; i++) {\n        const row = grid[i]\n        const bucketCap = row.length\n        res.push(0)\n        for (let j = 0; j < numCols; j++) {\n            bucket.push(0)\n            res[i] += bucket[j]\n            if (res[i] < capacity) {\n                bucket[j] += row[j]\n            }\n        }\n    }\n    \n    // check each row and check if there is any bucket in it.\n    for (let i = 0; i < numRows; i++) {\n        if (res[i] > capacity) {\n            const row = grid[i]\n            const bucketCap = row.length\n            // loop through each column of the row and decrease bucket\n            for (let j = 0; j < bucketCap; j++) {\n                bucket[j] -= row[j]\n                if (bucket[j] < 0) {\n                    res[i]--\n                    break\n                }\n            }\n        }\n    }\n    return res\n}\n\nconst main = () => {\n    const grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    const bucketCap = 1\n    const expected = 6\n    const actual = maxFill(grid, bucketCap)\n    console.log(actual)\n    console.log(expected)\n    console.log(actual === expected)\n}\n\nmain()<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  if (arr.length === 0) {\n    return arr;\n  }\n\n  const sortedArr = [];\n  let count = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      count++;\n    }\n  }\n\n  if (count === 0) {\n    sortedArr.push(arr[0]);\n    return sortedArr;\n  }\n\n  let k = 0;\n\n  while (k < arr.length - 1) {\n    if (arr[k] === 1 && arr[k + 1] === 1) {\n      sortedArr.push(arr[k]);\n      sortedArr.push(arr[k + 1]);\n      k += 2;\n    } else if (arr[k] === 1) {\n      sortedArr.push(arr[k]);\n      k++;\n    } else {\n      sortedArr.push(arr[k]);\n      k++;\n    }\n  }\n\n  return sortedArr;\n};\n\nconst test = () => {\n  const arr = [1, 5, 2, 3, 4];\n\n  console.log(sortArray(arr));\n\n  arr = [1, 0, 2, 3, 4];\n  console.log(sortArray(arr));\n\n  arr = [-2, -3, -4, -5, -6];\n  console.log(sortArray(arr));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = []\n  let nChars = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-zA-Z ]/)) {\n      nChars += 1\n      if (nChars === n) {\n        words.push(s.slice(i))\n      }\n    }\n  }\n  return words\n}\n\nmodule.exports = selectWords\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  if (!word || typeof word!=='string') return '';\n\n  let wordLen = word.length;\n  if (!wordLen) return '';\n\n  let prev = word[wordLen - 1];\n  let curr = word[0];\n  let next = word[1];\n  let first = curr;\n  let second = next;\n  let vowel = '';\n\n  // skip consonant\n  if (prev.match(/[a-zA-Z]/i)) {\n    curr = prev;\n    prev = word[wordLen - 2];\n    next = word[wordLen - 1];\n  }\n\n  // skip vowel\n  while (curr.match(/[a-zA-Z]/i)) {\n    curr = word[wordLen - 1];\n    second = next;\n  }\n\n  // skip vowel\n  if (second.match(/[a-zA-Z]/i)) {\n    curr = second;\n    prev = word[wordLen - 2];\n    next = word[wordLen - 1];\n  }\n\n  if (curr === prev) return '';\n\n  while (prev.match(/[a-zA-Z]/i) && curr.match(/[a-zA-Z]/i)) {\n    curr = word[wordLen - 1];\n    vowel = curr;\n  }\n\n  return vowel;\n};\n\nmodule.exports = getClosestVowel;<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [],\n      s = '';\n\n  lst.forEach(paren => {\n    if (paren === '(') {\n      stack.push(paren);\n    } else {\n      if (stack.length) {\n        if (stack.pop() === ')') {\n          s += stack.pop();\n        } else {\n          return;\n        }\n      }\n    }\n  });\n  if (stack.length) {\n    return 'No';\n  } else {\n    return 'Yes';\n  }\n};\n\nconsole.log(matchParens(['()', ')']));\nconsole.log(matchParens(['())', ')']));\nconsole.log(matchParens([')', ')']));\nconsole.log(matchParens(['(', ')']));\nconsole.log(matchParens(['()()', ')']));\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    let sorted = arr.slice(0);\n    let sortedLen = sorted.length;\n    let max = sorted[sortedLen - 1];\n    \n    for(let i = 0; i < sortedLen - k; i++) {\n        if(sorted[i] > sorted[i + k - 1]) {\n            sorted[i + k - 1] = sorted[i];\n            max = sorted[i + k - 1];\n        } else {\n            break;\n        }\n    }\n    \n    return sorted;\n}<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  return lst.reduce((acc, n) => acc + (n % 2? n : 0), 0)\n}\n\nmodule.exports = solution\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const n = arr.length;\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  let carry = 0;\n  for (let i = k; i < n; i++) {\n    carry += arr[i];\n    sum += carry;\n    carry = (carry >= 10)? 1 : 0;\n  }\n  return sum;\n};\n\nconsole.log(addElements([111,21,3,4000,5,6,7,8,9], 4));\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = () => {\n    let count = 1\n    while (count < n) {\n      if (count % 2 === 1) {\n        count = count + count\n      } else {\n        count = count * 3 + 1\n      }\n      console.log(count)\n    }\n  }\n  return collatz()\n}\n\nconst test = getOddCollatz(5)\n\nconsole.log(test)<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date === undefined || date === '') {\n    return false;\n  }\n\n  const [month, day, year] = date.split('-');\n\n  if (month.length < 1 || month.length > 2) {\n    return false;\n  }\n\n  if (day.length < 1 || day.length > 2) {\n    return false;\n  }\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  if (day < 1 || day > 31) {\n    return false;\n  }\n\n  if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n    if (day > 30) {\n      return false;\n    }\n  }\n\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 29) {\n      return false;\n    }\n  }\n\n  if (month === 2) {\n    if (day > 29) {\n      return false;\n    }\n  }\n\n  if (year < 1000 || year > 9999) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default validDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  if (txt === null) {\n    return [];\n  }\n\n  return txt.split(/\\s+/g).filter(x => x.length > 0);\n}\n\n/*\n  Given a number, return the number in hexadecimal.\n  Examples\n  toHex(0xFF) ➞ \"FF\"\n  toHex(255) ➞ \"FF\"\n  toHex(100) ➞ \"64\"\n  toHex(10) ➞ \"10\"\n  toHex(1) ➞ \"1\"\n*/\nconst toHex = (num) => {\n  return (num & 0xFF).toString(16);\n}\n\n/*\n  Given a hexadecimal number, return the number in decimal.\n  Examples\n  toDec(\"FF\") ➞ 255\n  toDec(\"64\") ➞ 100\n  toDec(\"10\") ➞ 10\n  toDec(\"1\") ➞ 1\n*/\nconst toDec = (hex) => {\n  return parseInt(hex, 16);\n}\n\n/*\n  Given a hexadecimal number, return the number in binary.\n  Examples\n  toBin(\"FF\") ➞ 1111111\n  toBin(\"64\") ➞ 10000000\n  toBin(\"10\") ➞ 1010\n  toBin(\"1\") ➞ 1\n*/\nconst toBin = (hex) => {\n  return parseInt(hex, 16).toString(2);\n}\n\n/*\n  Given a number in decimal, return the number in hexadecimal.\n  Examples\n  toHex(255) ➞ \"FF\"\n  toHex(100) ➞ \"64\"\n  toHex(10) ➞ \"10\"\n  toHex(1) ➞ \"1\"\n*/\nconst toHexDec = (num) => {\n  return (num & 0xFF).toString(16);\n}\n\n/*\n  Given a number in binary, return the number in hexadecimal.\n  Examples\n  toHex(11111111) ➞ \"FF\"\n  toHex(100) ➞ \"64\"\n  toHex(1010) ➞ \"10\"\n  toHex(1) ➞ \"1\"\n*/\nconst toHexBin = (num) => {\n  return parseInt(num, 2).toString(16);\n}\n\n/*\n  Given a number in hexadecimal, return the number in decimal.\n  Examples\n  toDec(\"FF\") ➞ 255\n  toDec(\"64\") ➞ 100\n  toDec(\"10\") ➞ 10\n  toDec(\"1\") ➞ 1\n*/\nconst toDecHex = (hex) => {\n  return parseInt(hex, 16);\n}\n\n/*\n  Given a number in binary, return the number in decimal.\n  Examples\n  toDec(\"11111111\") ➞ 255\n  toDec(\"100\") ➞ 100\n  toDec(\"1010\") ➞ 10\n  toDec(\"1\") ➞ 1\n*/\nconst toDecBin = (bin) => {\n  return parseInt(bin, 2);\n}\n\n/*\n  Given two numbers, return the result of the addition.\n  Examples\n  add(1,2) ➞ 3\n  add(1,2) ➞ 3\n  add(0,0) ➞ 0\n  add(-1,2) ➞ -3\n*/\nconst add = (x, y) => {\n  return x + y;\n}\n\n/*\n  Given two numbers, return the result of the subtraction.\n  Examples\n  sub(1,2) ➞ -1\n  sub(1,2) ➞ -1\n  sub(0,0) ➞ 0\n  sub(-1,2) ➞ 3\n*/\nconst sub = (x, y) => {\n  return x - y;\n}\n\n/*\n  Given two numbers, return the result of the multiplication.\n  Examples\n  mult(1,2) ➞ 2\n  mult(1,2) ➞ 2\n  mult(0,0) ➞ 0\n  mult(-1,2) ➞ -2\n*/\nconst mult = (x, y) => {\n  return x * y;\n}\n\n/*\n  Given two numbers, return the result of the division.\n  Examples\n  div(2,2) ➞ 1\n  div(2,2) ➞ 1\n  div(0,0) ➞ 0\n  div(-2,2) ➞ -1\n*/\nconst div = (x, y) => {\n  return x / y;\n}\n\n/*\n  Given a number in hexadecimal, return the number in decimal.\n  Examples\n  toDec(\"FF\") ➞ 255\n  toDec(\"64\") ➞ 100\n  toDec(\"10\") ➞ 10\n  toDec(\"1\") ➞ 1\n*/\nconst toDecHex = (num) => {\n  return parseInt(num, 16);\n}\n\n/*\n  Given a number in decimal, return the number in hexadecimal.\n  Examples\n  toHex(255) ➞ \"FF\"\n  toHex(100) ➞ \"64\"\n  toHex(10) ➞ \"10\"\n  toHex(1) ➞ \"1\"\n*/\nconst toHexDec = (num) => {\n  return (num & 0xFF).toString(16);\n}\n\n/*\n  Given a number in binary, return the number in hexadecimal.\n  Examples\n  toHex(11111111) ➞ \"FF\"\n  toHex(100) ➞ \"64\""}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.filter(x => x >= 0 && x < 100)\n  const unique = sorted.filter(x => sorted.indexOf(x) === sorted.lastIndexOf(x))\n  return sorted.length === unique.length\n}\n\nconst findMinMax = (lst) => {\n  const sorted = lst.filter(x => x >= 0 && x < 100)\n  const min = sorted[0]\n  const max = sorted[sorted.length - 1]\n  return [min, max]\n}\n\nconst findMedian = (lst) => {\n  const sorted = lst.filter(x => x >= 0 && x < 100)\n  const max = sorted[sorted.length - 1]\n  const half = sorted.length / 2\n  return sorted[half]\n}\n\nconst findMedianWithArray = (lst) => {\n  const sorted = lst.filter(x => x >= 0 && x < 100)\n  const half = sorted.length / 2\n  const middle = sorted[half]\n  return [sorted[half - 1], sorted[half], sorted[half + 1]]\n}\n\nconst findMedianWithSort = (lst) => {\n  const sorted = lst.filter(x => x >= 0 && x < 100)\n  const half = sorted.length / 2\n  const mid = sorted[half]\n  return [sorted[half - 1], sorted[half], sorted[half + 1]]\n}\n\nconst findMedianWithSort2 = (lst) => {\n  const sorted = lst.filter(x => x >= 0 && x < 100)\n  const median = sorted[sorted.length / 2]\n  return [sorted[sorted.length / 2 - 1], sorted[sorted.length / 2], sorted[sorted.length / 2 + 1]]\n}\n\nconst findMedianWithSort3 = (lst) => {\n  const sorted = lst.filter(x => x >= 0 && x < 100)\n  const half = sorted.length / 2\n  const mid = sorted[half]\n  return [sorted[half - 1], sorted[half], sorted[half + 1]]\n}\n\nconst findMedianWithSort4 = (lst) => {\n  const sorted = lst.filter(x => x >= 0 && x < 100)\n  const mid = sorted[sorted.length / 2]\n  return [sorted[sorted.length / 2 - 1], sorted[sorted.length / 2], sorted[sorted.length / 2 + 1]]\n}\n\nconst findMedianWithSort5 = (lst) => {\n  const sorted = lst.filter(x => x >= 0 && x < 100)\n  const half = sorted.length / 2\n  const mid = sorted[half]\n  return [sorted[half - 1], sorted[half], sorted[half + 1]]\n}\n\nconst findMedianWithSort6 = (lst) => {\n  const sorted = lst.filter(x => x >= 0 && x < 100)\n  const half = sorted.length / 2\n  const mid = sorted[half]\n  return [sorted[half - 1], sorted[half], sorted[half + 1]]\n}\n\nconst findMedianWithSort7 = (lst) => {\n  const sorted = lst.filter(x => x >= 0 && x < 100)\n  const half = sorted.length / 2\n  const mid = sorted[half]\n  return [sorted[half - 1], sorted[half], sorted[half + 1]]\n}\n\nconst findMedianWithSort8 = (lst) => {\n  const sorted = lst.filter(x => x >= 0 && x < 100)\n  const half = sorted.length / 2\n  const mid = sorted[half]\n  return [sorted[half - 1], sorted[half], sorted[half + 1]]\n}\n\nconst findMedianWithSort9 = (lst) => {\n  const sorted = lst.filter(x => x >= 0 && x < 100)\n  const half = sorted.length / 2\n  const mid = sorted[half]\n  return [sorted[half - 1], sorted[half], sorted[half + 1]]\n}\n\nconst findMedianWithSort10 = (lst) => {\n  const sorted = lst.filter(x => x >= 0 && x < 100)\n  const half = sorted.length / 2\n  const mid = sorted[half]\n  return [sorted[half - 1], sorted[half], sorted[half + 1]]\n}\n\nconst findMedianWithSort11 = (lst) => {\n  const sorted = lst.filter(x => x >= 0 && x < 100)\n  const half = sorted.length / 2\n  const mid = sorted[half]\n  return [sorted[half - 1], sorted[half], sorted[half + 1]]\n}\n\nconst findMedianWithSort12 = (lst) => {\n  const sorted = lst.filter(x => x >= 0 && x < 100)\n  const half = sorted.length / 2\n  const mid = sorted[half]\n  return [sorted[half - 1], sorted[half], sorted[half + 1]]\n}\n\nconst findMedianWithSort13 = (lst) => {\n  const sorted = lst.filter(x => x >= 0 && x < 100)\n  const half = sorted.length / 2\n  const mid = sorted[half]\n  return [sorted[half - 1], sorted[half], sorted[half + 1]]\n}"}
{"task_id": "JavaScript/127", "prompt": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n\n  if (start1 >= end2 || start2 >= end1) return \"NO\"\n  if (start1 <= start2 && end1 >= end2) return \"NO\"\n\n  return (end1 - start1) + (end2 - start2)\n}\n\n// ___________________________________________________________________\n\nconst test = `\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n`\n\nconst answer = \"NO\"\n\nconst check = `\n  intersection((1, 2), (2, 3)) === \"NO\"\n  intersection((-1, 1), (0, 4)) === \"NO\"\n  intersection((-3, -1), (-5, 5)) === \"YES\"\n`\n\nconst solution = (interval1, interval2) => {\n  const length = intersection(interval1, interval2)\n\n  if (length > 0 && length % 1 === 0) {\n    return \"YES\"\n  }\n\n  return \"NO\"\n}\n\nconst solve = () => {\n  const [interval1, interval2] = [\n    [1, 2],\n    [2, 3]\n  ]\n\n  return solution(interval1, interval2)\n}\n\nconst answer = [\n  \"NO\",\n  \"YES\"\n]\n\n// ___________________________________________________________________\n\nconst tests = [\n  {\n    description: \"Example #1\",\n    expected: \"NO\",\n    solution: solution,\n    tests: [\n      {\n        description: \"intersection((1, 2), (2, 3))\",\n        expected: \"NO\",\n        solution: solution,\n        input: [\n          [1, 2],\n          [2, 3]\n        ]\n      },\n      {\n        description: \"intersection((-1, 1), (0, 4))\",\n        expected: \"NO\",\n        solution: solution,\n        input: [\n          [-1, 1],\n          [0, 4]\n        ]\n      },\n      {\n        description: \"intersection((-3, -1), (-5, 5))\",\n        expected: \"YES\",\n        solution: solution,\n        input: [\n          [-3, -1],\n          [-5, 5]\n        ]\n      }\n    ]\n  },\n  {\n    description: \"Example #2\",\n    expected: \"NO\",\n    solution: solution,\n    tests: [\n      {\n        description: \"intersection((-1, 1), (0, 4))\",\n        expected: \"NO\",\n        solution: solution,\n        input: [\n          [-1, 1],\n          [0, 4]\n        ]\n      },\n      {\n        description: \"intersection((-3, -1), (-5, 5))\",\n        expected: \"YES\",\n        solution: solution,\n        input: [\n          [-3, -1],\n          [-5, 5]\n        ]\n      }\n    ]\n  },\n  {\n    description: \"Example #3\",\n    expected: \"NO\",\n    solution: solution,\n    tests: [\n      {\n        description: \"intersection((-3, -1), (-5, 5))\",\n        expected: \"YES\",\n        solution: solution,\n        input: [\n          [-3, -1],\n          [-5, 5]\n        ]\n      }\n    ]\n  }\n]\n\n// ___________________________________________________________________\n\nconst problems = {\n  description: \"Find the prime number in the given interval.\",\n  tests: tests\n}\n\n// ___________________________________________________________________\n\nmodule.exports = {\n  name: \"intersection\",\n  tests: tests,\n  problem: problems,\n  solution: solution,\n  answer: answer\n}\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null;\n  }\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n  }\n  let sign = 1;\n  if (sum === 0) {\n    return 0;\n  }\n  let max = Math.max.apply(null, arr);\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = 1;\n    } else if (arr[i] < 0) {\n      sign = -1;\n    } else {\n      sign = 0;\n    }\n    sum *= sign;\n  }\n  return sum;\n};\n\nconsole.log(prodSigns([1, 2, 2, -4])); // -9\nconsole.log(prodSigns([0, 1])); // 0\nconsole.log(prodSigns([])); // null\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const gridSize = grid.length;\n  const minLength = (gridSize * gridSize) - k + 1;\n\n  const dp = grid.map((row, i) => {\n    const currentLength = row.length;\n    const subArray = row.slice(0, k);\n    const subArrayLength = subArray.length;\n\n    const dp = new Array(subArrayLength);\n    for (let j = 0; j < subArrayLength; j++) {\n      dp[j] = currentLength - j + 1;\n    }\n\n    for (let j = 1; j < currentLength; j++) {\n      for (let k = 0; k < subArrayLength; k++) {\n        if (subArray[k] < row[j]) {\n          dp[k] = Math.min(dp[k], dp[k-1]);\n        }\n      }\n    }\n\n    return dp;\n  });\n\n  const maxIndex = dp.length - 1;\n  const subArray = dp[maxIndex].slice(0);\n  const subArrayLength = subArray.length;\n\n  const res = [];\n  for (let i = 0; i < subArrayLength; i++) {\n    res.push(subArray[i]);\n  }\n\n  return res;\n};\n\nconst grid = [\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n];\n\nconsole.log(minPath(grid, 2));\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const fib = (n) => fib(n - 1) + fib(n - 2);\n  return fib(n)? fib(n) : [1, 3, 2, 8];\n};\n\n// console.log(tri(3));\n\nconst tri2 = (n) => {\n  const fib = (n) => fib(n - 1) + fib(n - 2);\n  const tri = (n) => fib(n);\n  const tri2 = (n) => fib(n - 1);\n  return tri(n).map((f) => tri2(f + 1));\n};\n\n// console.log(tri2(3));\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n    const digit = n % 10;\n    if(digit % 2 === 1) return n;\n    else return 0;\n};\n\nconst sum = (n) => {\n    let sum = 0;\n    for(let i = 1; i <= n; i++) {\n        sum += digits(i);\n    }\n    return sum;\n};\n\nconsole.log(sum(12345));\nconsole.log(sum(235));\nconsole.log(sum(54321));\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n   const len= string.length;\n   const isNested= new Array(len);\n   const stack = [];\n   const brackets = '[[]]';\n   const bracket= 0;\n   let i = 0;\n   while(i < len){\n     if(string[i] === '[' && bracket === 0){\n       stack.push(bracket);\n       bracket++;\n     } else if(string[i] === ']' && bracket === 1){\n       bracket--;\n       if(stack.length === 0){\n         return false;\n       }\n       stack.pop();\n     }\n     isNested[i] = stack.length === 0 && brackets.indexOf(string[i]) > -1;\n     i++;\n   }\n   return stack.length === 0 && brackets.indexOf(string[i]) > -1;\n }\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  return lst.map((n) => {\n    return Math.pow(n, 2);\n  }).reduce((a, b) => a + b);\n};\n\n// console.log(sumSquares([1,2,3]));\n// console.log(sumSquares([1,4,9]));\n// console.log(sumSquares([1,3,5,7]));\n// console.log(sumSquares([1.4,4.2,0]));\n// console.log(sumSquares([-2.4,1,1]));\n\n// const sumSquares = (lst) => {\n//   let sum = 0;\n//   for (let i = 0; i < lst.length; i++) {\n//     sum += lst[i];\n//   }\n//   return sum;\n// };\n//\n// console.log(sumSquares([1,2,3]));\n// console.log(sumSquares([1,4,9]));\n// console.log(sumSquares([1,3,5,7]));\n// console.log(sumSquares([1.4,4.2,0]));\n// console.log(sumSquares([-2.4,1,1]));\n\nconst sumSquares = (lst) => {\n  return (Math.pow(lst[0], 2) + Math.pow(lst[1], 2) + Math.pow(lst[2], 2) + Math.pow(lst[3], 2));\n};\n\n// console.log(sumSquares([1,2,3]));\n// console.log(sumSquares([1,4,9]));\n// console.log(sumSquares([1,3,5,7]));\n// console.log(sumSquares([1.4,4.2,0]));\n// console.log(sumSquares([-2.4,1,1]));\n\n// const sumSquares = (lst) => {\n//   let sum = 0;\n//   for (let i = 0; i < lst.length; i++) {\n//     sum += lst[i];\n//   }\n//   return sum;\n// };\n//\n// console.log(sumSquares([1,2,3]));\n// console.log(sumSquares([1,4,9]));\n// console.log(sumSquares([1,3,5,7]));\n// console.log(sumSquares([1.4,4.2,0]));\n// console.log(sumSquares([-2.4,1,1]));\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([1,4,9]));\nconsole.log(sumSquares([1,3,5,7]));\nconsole.log(sumSquares([1.4,4.2,0]));\nconsole.log(sumSquares([-2.4,1,1]));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  return txt.length > 0 && \n    isALetter(txt.charAt(txt.length - 1)) &&\n   !isInWord(txt);\n}\n\nconst checkIfLastCharIsNotALetter = (txt) => {\n  return txt.length > 0 &&\n   !isALetter(txt.charAt(txt.length - 1)) &&\n   !isInWord(txt);\n}\n\nconst isALetter = (char) => {\n  return char.toUpperCase() === char.toLowerCase();\n}\n\nconst isInWord = (txt) => {\n  return txt.split(' ').find(word => {\n    return word.includes(txt.charAt(txt.length - 1));\n  });\n}\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = arr.length - 1;\n  let j = 0;\n  while (arr[i] > arr[j]) {\n    i--;\n  }\n  return i;\n}\n\n/*Create a function which will return the largest index of an element which \n   will be not less than the element immediately preceding it. If no such \n   element will exist then return-1. The will give array not contain duplicate \n   values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canNotArrange = (arr) => {\n  let i = arr.length - 1;\n  let j = 0;\n  while (arr[i] < arr[j]) {\n    i--;\n  }\n  return i;\n}\n\n/*Given a string, return a string that has the same number of \n   characters as the original string but with the characters in order.\n\n  Examples:\n  order(\"a\") = \"a\"\n  order(\"ab\") = \"ba\"\n  order(\"abc\") = \"cba\"\n  */\nconst order = (str) => {\n  let arr = [];\n  let i = 0;\n  let j = 0;\n  let len = str.length;\n  while (i < len) {\n    arr[j] = str[i];\n    i++;\n    j++;\n  }\n  return arr.join(\"\");\n}\n\n/*Given a string, return a string that has the same number of \n   characters as the original string but with the characters in reverse.\n\n  Examples:\n  reverse(\"abc\") = \"cba\"\n  reverse(\"ab\") = \"bac\"\n  */\nconst reverse = (str) => {\n  let arr = [];\n  let i = 0;\n  let j = str.length - 1;\n  while (i < j) {\n    arr[i] = str[j];\n    i++;\n    j--;\n  }\n  return arr.join(\"\");\n}\n\n/*Given a string, return a string that has the same number of \n   characters as the original string but with the characters in a random \n   order.\n\n  Examples:\n  shuffle(\"abc\") = \"cba\"\n  shuffle(\"ab\") = \"abca\"\n  */\nconst shuffle = (str) => {\n  let arr = [];\n  let i = 0;\n  let j = 0;\n  let len = str.length;\n  while (i < len) {\n    arr[i] = str[j];\n    i++;\n    j = Math.floor((Math.random() * (len - i)) + i);\n  }\n  return arr.join(\"\");\n}\n\n/*Given a string, return a string that has the same number of \n   characters as the original string but with the characters in a random \n   order.\n\n  Examples:\n  shuffle(\"abc\") = \"cba\"\n  shuffle(\"ab\") = \"abca\"\n  */\nconst reverseShuffle = (str) => {\n  let arr = [];\n  let i = 0;\n  let j = 0;\n  let len = str.length;\n  while (i < len) {\n    arr[i] = str[j];\n    i++;\n    j = Math.floor((Math.random() * (len - i)) + i);\n  }\n  return arr.join(\"\");\n}\n\n/*Given a string, return a string that has the same number of \n   characters as the original string but with the characters in a random \n   order.\n\n  Examples:\n  shuffle(\"abc\") = \"cba\"\n  shuffle(\"ab\") = \"abca\"\n  */\nconst randomize = (str) => {\n  let arr = [];\n  let i = 0;\n  let j = 0;\n  let len = str.length;\n  while (i < len) {\n    arr[i] = str[j];\n    i++;\n    j = Math.floor((Math.random() * (len - i)) + i);\n  }\n  return arr.join(\"\");\n}\n\n/*Given a string, return a string that has the same number of \n   characters as the original string but with the characters in a random \n   order.\n\n  Examples:\n  shuffle(\"abc\") = \"cba\"\n  shuffle(\"ab\") = \"abca\"\n  */\nconst randomizeShuffle = (str) => {\n  let arr = [];\n  let i = 0;\n  let j = 0;\n  let len = str.length;\n  while (i < len) {\n    arr[i] = str[j];\n    i++;\n    j = Math.floor((Math.random() * (len - i)) + i);\n  }\n  return arr.join(\"\");\n}\n\n/*Given a string, return a string that has the same number of \n   characters as the original string but with the characters in a random \n   order.\n\n  Examples:\n  shuffle(\"abc\") = \"cba\"\n  shuffle(\"ab\") = \"abca\"\n  */\nconst reverseRandomize = (str) => {\n  let arr = [];\n  let i = 0;\n  let j = 0;\n  let len = str.length;\n  while (i < len) {\n    arr[i] = str[j];\n    i++;\n    j = Math.floor((Math.random() * (len - i)) + i);\n  }\n  return arr.join(\"\");\n}\n\n/*Given a string, return a string that has the same number of \n   characters as the original string but with the characters in a random \n   order.\n\n  Examples:\n  shuffle(\"abc\") = \"cba\"\n  shuffle(\"ab\") = \"abca\"\n  */\nconst reverseRandomizeShuffle = (str) => {\n  let arr = [];\n  let i = 0;\n  let j = 0;\n  let len = str.length;\n"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = null;\n  let min = null;\n\n  lst.forEach((val) => {\n    if(val < 0) {\n      if(min === null || min > val) {\n        min = val;\n      }\n    }\n    else {\n      if(max === null || max < val) {\n        max = val;\n      }\n    }\n  });\n  return [max, min];\n};\n\nconsole.log(largestSmallestIntegers([-3, -4, -1, -2, 5, 7, 8]));\nconsole.log(largestSmallestIntegers([0]));\nconsole.log(largestSmallestIntegers([-1, -2, -3]));\nconsole.log(largestSmallestIntegers([5, -6, 7, -8, -9]));\nconsole.log(largestSmallestIntegers([-3, -4, -1, -2, 5, 7, 8]));\nconsole.log(largestSmallestIntegers([-3, -4, -1, -2, 5, 7, 8, 9]));\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   if(a===b){\n     return null;\n   }else{\n     if(a < b){\n       return a;\n     }else{\n       return b;\n     }\n   }\n }\n\n console.log(compareOne(1, 2.5));\n console.log(compareOne(1,\" 2,3\"));\n console.log(compareOne(\"5,1\",\" 6\"));\n console.log(compareOne(\"1\", 1));<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let evenSum = 0;\n  let oddSum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      evenSum += i;\n    } else {\n      oddSum += i;\n    }\n  }\n  return (oddSum === evenSum)? true : false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n    if (n < 0) return undefined\n    if (n === 0) return 1\n    if (n === 1) return 1\n    \n    let bf = 1\n    for (let i = 2; i <= n; i++) {\n        bf *= i\n    }\n    return bf\n}\n\nconst isPrime = (n) => {\n    if (n <= 1) return false\n    if (n < 13) return true\n    let max = Math.sqrt(n)\n    for (let i = 2; i < max; i++) {\n        if (n % i === 0) return false\n    }\n    return true\n}\n\nconst fibonacci = (n) => {\n    if (n < 2) return 1\n    return fibonacci(n-1) + fibonacci(n-2)\n}\n\nconst sum = (x) => {\n    return x.reduce((s, x) => { return s + x })\n}\n\nconst sumSquared = (x) => {\n    return x.reduce((s, x) => { return s + x * x })\n}\n\nconst sum3 = (x) => {\n    return x.reduce((s, x) => { return s + x + x * x })\n}\n\nconst sum4 = (x) => {\n    return x.reduce((s, x) => { return s + x + x * x + x * x * x })\n}\n\nconst sum5 = (x) => {\n    return x.reduce((s, x) => { return s + x + x * x + x * x * x + x * x * x * x })\n}\n\nconst sum6 = (x) => {\n    return x.reduce((s, x) => { return s + x + x * x + x * x * x + x * x * x * x + x * x * x * x * x })\n}\n\nconst sum7 = (x) => {\n    return x.reduce((s, x) => { return s + x + x * x + x * x * x + x * x * x * x + x * x * x * x * x + x * x * x * x * x * x })\n}\n\nconst sum8 = (x) => {\n    return x.reduce((s, x) => { return s + x + x * x + x * x * x + x * x * x * x + x * x * x * x * x + x * x * x * x * x * x + x * x * x * x * x * x * x })\n}\n\nconst sum9 = (x) => {\n    return x.reduce((s, x) => { return s + x + x * x + x * x * x + x * x * x * x + x * x * x * x * x + x * x * x * x * x * x + x * x * x * x * x * x * x })\n}\n\nconst sum10 = (x) => {\n    return x.reduce((s, x) => { return s + x + x * x + x * x * x + x * x * x * x + x * x * x * x * x + x * x * x * x * x * x + x * x * x * x * x * x * x })\n}\n\nconst sum11 = (x) => {\n    return x.reduce((s, x) => { return s + x + x * x + x * x * x + x * x * x * x + x * x * x * x * x + x * x * x * x * x * x + x * x * x * x * x * x * x })\n}\n\nconst sum12 = (x) => {\n    return x.reduce((s, x) => { return s + x + x * x + x * x * x + x * x * x * x + x * x * x * x * x + x * x * x * x * x * x + x * x * x * x * x * x * x })\n}\n\nconst sum13 = (x) => {\n    return x.reduce((s, x) => { return s + x + x * x + x * x * x + x * x * x * x + x * x * x * x * x + x * x * x * x * x * x + x * x * x * x * x * x * x })\n}\n\nconst sum14 = (x) => {\n    return x.reduce((s, x) => { return s + x + x * x + x * x * x + x * x * x * x + x * x * x * x * x + x * x * x * x * x * x + x * x * x * x * x * x * x })\n}\n\nconst sum15 = (x) => {\n    return x.reduce((s, x) => { return s + x + x * x + x * x * x + x * x * x * x + x * x * x * x * x + x * x * x * x * x * x + x * x * x * x * x * x * x })\n}\n\nconst sum16 = (x) => {\n    return x.reduce((s, x) => { return s + x + x * x + x * x * x + x * x * x * x + x * x * x * x * x + x * x * x * x * x * x + x * x * x * x * x * x * x })\n}\n\nconst sum17 = (x) => {\n    return x.reduce((s, x) => { return s + x + x * x + x * x * x + x * x * x * x + x * x * x * x * x + x * x * x * x * x * x + x * x * x * x * x * x * x })\n}\n\nconst sum18 = (x) => {\n    return x.reduce((s, x) => { return s + x + x * x + x * x * x + x * x * x * x + x * x *"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const spaces = /\\s+/g;\n  return text.replace(spaces, '_');\n}\n\n//const fixSpaces = (text) => {\n//  const spaces = /\\s+/g;\n//  return text.replace(spaces,'');\n//}\n\n/*\n  Given a string text, will return the number of spaces in it. \n   This is useful when you want to do string manipulation.\n  */\nconst getNumberOfSpaces = (text) => {\n  const spaces = /\\s+/g;\n  let count = 0;\n  while (spaces.exec(text)) {\n    count++;\n  }\n  return count;\n}\n\n//const getNumberOfSpaces = (text) => {\n//  const spaces = /\\s+/g;\n//  let count = 0;\n//  while (spaces.exec(text)) {\n//    count++;\n//  }\n//  return count;\n//}\n\nconst getNumberOfWords = (text) => {\n  const spaces = /\\s+/g;\n  let count = 0;\n  while (spaces.exec(text)) {\n    count++;\n  }\n  return count;\n}\n\n//const getNumberOfWords = (text) => {\n//  const spaces = /\\s+/g;\n//  let count = 0;\n//  while (spaces.exec(text)) {\n//    count++;\n//  }\n//  return count;\n//}\n\n/*\n  Given a string text, will return a string with a number of spaces\n   in the beginning of the string. The number of spaces will be equal\n   to the number of spaces in the string text.\n  */\nconst prependNumberOfSpaces = (text) => {\n  const spaces = /\\s+/g;\n  let count = 0;\n  while (spaces.exec(text)) {\n    count++;\n  }\n  return count +'' + text;\n}\n\nconst prependNumberOfSpaces = (text) => {\n  const spaces = /\\s+/g;\n  let count = 0;\n  while (spaces.exec(text)) {\n    count++;\n  }\n  return count +'' + text;\n}\n\nconst prependNumberOfWords = (text) => {\n  const spaces = /\\s+/g;\n  let count = 0;\n  while (spaces.exec(text)) {\n    count++;\n  }\n  return count +'' + text;\n}\n\nconst getNumberOfWords = (text) => {\n  const spaces = /\\s+/g;\n  let count = 0;\n  while (spaces.exec(text)) {\n    count++;\n  }\n  return count +'' + text;\n}\n\nconst getNumberOfLines = (text) => {\n  let count = 1;\n  const lines = text.split('\\n');\n  while (lines.length > 1) {\n    count++;\n    lines.shift();\n  }\n  return count;\n}\n\n//const getNumberOfLines = (text) => {\n//  let count = 1;\n//  const lines = text.split('\\n');\n//  while (lines.length > 1) {\n//    count++;\n//    lines.shift();\n//  }\n//  return count;\n//}\n\nconst getNumberOfWords = (text) => {\n  let count = 1;\n  const lines = text.split('\\n');\n  while (lines.length > 1) {\n    count++;\n    lines.shift();\n  }\n  return count +'' + text;\n}\n\nconst getNumberOfLines = (text) => {\n  let count = 1;\n  const lines = text.split('\\n');\n  while (lines.length > 1) {\n    count++;\n    lines.shift();\n  }\n  return count;\n}\n\nconst getNumberOfChars = (text) => {\n  return text.length;\n}\n\nconst getNumberOfLines = (text) => {\n  let count = 1;\n  const lines = text.split('\\n');\n  while (lines.length > 1) {\n    count++;\n    lines.shift();\n  }\n  return count;\n}\n\nconst getNumberOfLines = (text) => {\n  let count = 1;\n  const lines = text.split('\\n');\n  while (lines.length > 1) {\n    count++;\n    lines.shift();\n  }\n  return count;\n}\n\n//const getNumberOfLines = (text) => {\n//  let count = 1;\n//  const lines = text.split('\\n');\n//  while (lines.length > 1) {\n//    count++;\n//    lines.shift();\n//  }\n//  return count;\n//}\n\nconst getNumberOfLines = (text) => {\n  let count = 1;\n  const lines = text.split('\\n');\n  while (lines.length > 1) {\n    count++;\n    lines.shift();\n  }\n  return count;\n}\n\nconst getNumberOfLines = (text) => {\n  let count = 1;\n  const lines = text.split('\\n');\n  while (lines.length > 1) {\n    count++;\n    lines.shift();\n  }\n  return count;\n}\n\nconst getNumberOfLines = (text) => {\n  let count = 1;\n  const lines = text.split('\\n');\n  while (lines.length > 1) {\n    count++;\n    lines.shift();\n  }\n  return count;\n}\n\nconst getNumberOfLines = (text) => {\n  let count = 1;\n  const lines = text.split('\\n');\n  while (lines.length > 1) {\n    count++;\n    lines.shift();\n  }\n  return count;\n}\n\nconst getNumberOfLines ="}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n    let has_dot = file_name.indexOf(\".\") >= 0;\n    let has_only_digit = file_name.match(/^\\d+$/) && file_name.indexOf(\".\") < 0;\n    let has_letter_before_dot = file_name.match(/^[a-zA-Z]+/) && file_name.indexOf(\".\") >= 0;\n    let has_only_letter_after_dot = file_name.match(/\\..+[a-zA-Z]+$/) && file_name.indexOf(\".\") < 0;\n    let has_only_digit_after_dot = file_name.match(/\\..+\\d+$/) && file_name.indexOf(\".\") < 0;\n    let has_only_letter_before_dot = file_name.match(/^[a-zA-Z]+/) && file_name.indexOf(\".\") >= 0;\n    let has_no_digit_after_dot = file_name.match(/\\..+\\d+$/) && file_name.indexOf(\".\") >= 0;\n    let has_no_letter_after_dot = file_name.match(/\\..+[a-zA-Z]+$/) && file_name.indexOf(\".\") >= 0;\n    return has_dot && has_only_digit && has_letter_before_dot && has_only_letter_after_dot && has_only_digit_after_dot && has_only_letter_before_dot && has_no_digit_after_dot && has_no_letter_after_dot;\n}\n\n/*\nCreate a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n    let has_dot = file_name.indexOf(\".\") >= 0;\n    let has_only_digit = file_name.match(/^\\d+$/) && file_name.indexOf(\".\") < 0;\n    let has_letter_before_dot = file_name.match(/^[a-zA-Z]+/) && file_name.indexOf(\".\") >= 0;\n    let has_only_letter_after_dot = file_name.match(/\\..+[a-zA-Z]+$/) && file_name.indexOf(\".\") < 0;\n    let has_only_digit_after_dot = file_name.match(/\\..+\\d+$/) && file_name.indexOf(\".\") < 0;\n    let has_only_letter_before_dot = file_name.match(/^[a-zA-Z]+/) && file_name.indexOf(\".\") >= 0;\n    let has_no_digit_after_dot = file_name.match(/\\..+\\d+$/) && file_name.indexOf(\".\") >= 0;\n    let has_no_letter_after_dot = file_name.match(/\\..+[a-zA-Z]+$/) && file_name.indexOf(\".\") >= 0;\n    return has_dot && has_only_digit && has_letter_before_dot && has_only_letter_after_dot && has_only_digit_after_dot && has_only_letter_before_dot && has_no_digit_after_dot && has_no_letter_after_dot;\n}\n\nconst fileNameCheck3 = (file_name) => {\n    let has_dot = file_name.indexOf(\".\") >= 0;\n    let has_only_digit = file_name.match(/^\\d+$/) && file_name.indexOf(\".\") < 0;\n    let has_letter_before_dot = file_name.match(/^[a-zA-Z]+/) && file_name.indexOf(\".\") >= 0;\n    let has_only_letter_after_dot = file_name.match(/\\..+[a-zA-Z]+$/) && file_name.indexOf(\".\") < 0;\n    let has_only_digit_after_dot = file_name.match(/\\..+\\d+$/) && file_name.indexOf(\".\") < 0;\n    let has_only_letter_before_dot = file_name.match(/^[a-zA-Z]+/) && file_name.indexOf(\".\") >= 0;\n    let has_no_digit_after_dot = file_name.match(/\\..+\\d+$/) && file_name.indexOf(\".\") >= 0;\n    let has_no_letter_after_dot = file_name.match(/\\..+[a-zA-Z]+$"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let x of lst) {\n    if (x % 3 === 0) {\n      sum += x * x\n    } else if (x % 4 === 0) {\n      sum += x * x * x\n    } else {\n      sum += x\n    }\n  }\n  return sum\n}\n\nconsole.log(sumSquares([1,2,3,4,5,6]))\nconsole.log(sumSquares([1,2,3]))\nconsole.log(sumSquares([1,2,3,4,5,6,7]))\nconsole.log(sumSquares([-1,2,3,4,5,6,7]))\nconsole.log(sumSquares([-1,-5,2,-1,-5]))\nconsole.log(sumSquares([-1,-5,2,-1,-5,-7]))\nconsole.log(sumSquares([-1,-5,-2,-1,-5,-7]))\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const regex = /[A-Za-z]+/g\n    const arr = sentence.match(regex)\n    let result = []\n    for (let i = 0; i < arr.length; i++) {\n        const prime = isPrime(arr[i].length)\n        if (prime) {\n            result.push(arr[i])\n        }\n    }\n    return result.join(' ')\n}\n\nconst isPrime = (number) => {\n    let i = 2\n    while (i < number) {\n        if (number % i === 0) {\n            return false\n        }\n        i++\n    }\n    return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n  let i = 1;\n  let len = x.length;\n  let j = 0;\n  let res = false;\n  while(i <= len){\n    if(n.charAt(j) === x.charAt(i)){\n      j++;\n      i++;\n      continue;\n    }\n    if(j === n.length){\n      res = true;\n      break;\n    }\n    i++;\n  }\n  return res;\n}\n\nconst test = [\"1/5\",\" 5/1\",\"3/2\"];\n\nfor(let i = 0; i < test.length; i++){\n  console.log(simplify(test[i][0], test[i][1]));\n}<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  return nums.reduce((result, num, index) => {\n    result.push(nums.slice(index + 1).reduce((prev, curr) => {\n      return prev + parseInt(curr, 10);\n    }, num));\n    return result;\n  }, []);\n}\n\n// Test\nconsole.log(orderByPoints([1, 11, -1, -11, -12]));\nconsole.log(orderByPoints([]));<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const oddNumbers = [];\n\n  nums.forEach(n => {\n    if (n > 10 && n % 2 === 1 && n % 10 === 3) {\n      oddNumbers.push(n);\n    }\n  });\n\n  return oddNumbers.length;\n};\n\nconst numbers = [15, -73, 14, -15, 33, -2, -3, 45, 21, 109];\nconsole.log(specialFilter(numbers));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [1, n-1, 2*n-2, 3*n-3, 4*n-4, 5*n-5, 6*n-6, 7*n-7, 8*n-8, 9*n-9, 10*n-10];\n  let result = 0;\n  for(let i=0; i<a.length-1; i++) {\n    for(let j=i+1; j<a.length; j++) {\n      for(let k=j+1; k<a.length; k++) {\n        if(a[i] + a[j] + a[k] % 3 === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  let sorted = [];\n  let planet = (p1, p2) => {\n    if (p1 === planet1 || p2 === planet2) {\n      return \"\";\n    }\n    let index1 = planets.indexOf(p1);\n    let index2 = planets.indexOf(p2);\n    if (index1 < 0 || index2 < 0) {\n      return \"\";\n    }\n    return (index1 + index2 + 1);\n  }\n  let check = (p1, p2) => {\n    let index1 = planets.indexOf(p1);\n    let index2 = planets.indexOf(p2);\n    if (index1 < 0 || index2 < 0) {\n      return false;\n    }\n    return (index1 + index2 + 1) < 7;\n  }\n  let planet_sorted = planets.reduce((a, b) => {\n    let check_planet = planet(a, b);\n    if (check_planet === \"\") {\n      return a + \" \" + b;\n    }\n    if (check_planet === planet(planet1, planet2)) {\n      return a + \" \" + b;\n    }\n    return a + \" \" + b + \" \" + check_planet;\n  }, \"\");\n  return planet_sorted.split(\" \").filter((p) => check(p, planet1) || check(p, planet2));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let l = lst.length;\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < l; i++) {\n    sum += lst[i].length;\n  }\n  for (let i = 0; i < l; i++) {\n    if (sum % 2 === 1) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst list_sort = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      sum += lst[i].charCodeAt(j);\n    }\n    if (sum % 2 === 1) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = sortedListSum;\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY2 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY3 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY4 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY5 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY6 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY7 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY8 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY9 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY10 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY11 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY12 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY13 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY14 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY15 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY16 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY17 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY18 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY19 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY20 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY21 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY22 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY23 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY24 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY25 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY26 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY27 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY28 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY29 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY30 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY31 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY32 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY33 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY34 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY35 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY36 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY37 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY38 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY39 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY40 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY41 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY42 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY43 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY44 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY45 = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst xOrY46 = (n, x, y) => {\n  return n % 2 === 0? x : y"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   return (((((((lst.length)==0)? 0 : (Math.pow(lst[0], 2) + Math.pow(lst[1], 2))) - Math.pow(lst[0], 2) - Math.pow(lst[1], 2))*(((((lst.length)==0)? 0 : (Math.pow(lst[0], 2) + Math.pow(lst[1], 2))) - Math.pow(lst[0], 2) - Math.pow(lst[1], 2)))*(((((lst.length)==0)? 0 : (Math.pow(lst[0], 2) + Math.pow(lst[1], 2))) - Math.pow(lst[0], 2) - Math.pow(lst[1], 2)))*(((((lst.length)==0)? 0 : (Math.pow(lst[0], 2) + Math.pow(lst[1], 2))) - Math.pow(lst[0], 2) - Math.pow(lst[1], 2)))*(((((lst.length)==0)? 0 : (Math.pow(lst[0], 2) + Math.pow(lst[1], 2))) - Math.pow(lst[0], 2) - Math.pow(lst[1], 2)))*(((((lst.length)==0)? 0 : (Math.pow(lst[0], 2) + Math.pow(lst[1], 2))) - Math.pow(lst[0], 2) - Math.pow(lst[1], 2)))*(((((lst.length)==0)? 0 : (Math.pow(lst[0], 2) + Math.pow(lst[1], 2))) - Math.pow(lst[0], 2) - Math.pow(lst[1], 2)))*(((((lst.length)==0)? 0 : (Math.pow(lst[0], 2) + Math.pow(lst[1], 2))) - Math.pow(lst[0], 2) - Math.pow(lst[1], 2)))*(((((lst.length)==0)? 0 : (Math.pow(lst[0], 2) + Math.pow(lst[1], 2))) - Math.pow(lst[0], 2) - Math.pow(lst[1], 2)))*(((((lst.length)==0)? 0 : (Math.pow(lst[0], 2) + Math.pow(lst[1], 2))) - Math.pow(lst[0], 2) - Math.pow(lst[1], 2)))*(((((lst.length)==0)? 0 : (Math.pow(lst[0], 2) + Math.pow(lst[1], 2))) - Math.pow(lst[0], 2) - Math.pow(lst[1], 2)))*(((((lst.length)==0)? 0 : (Math.pow(lst[0], 2) + Math.pow(lst[1], 2))) - Math.pow(lst[0], 2) - Math.pow(lst[1], 2)))*(((((lst.length)==0)? 0 : (Math.pow(lst[0], 2) + Math.pow(lst[1], 2))) - Math.pow(lst[0], 2) - Math.pow(lst[1], 2)))*(((((lst.length)==0)? 0 : (Math.pow(lst[0], 2) + Math.pow(lst[1], 2))) - Math.pow(lst[0], 2) - Math.pow(lst[1], 2)))*(((((lst.length)==0)? 0 : (Math.pow(lst[0], 2) + Math.pow(lst[1], 2))) - Math.pow(lst[0], 2) - Math.pow(lst[1], 2)))*(((((lst.length)==0)? 0 : (Math.pow(lst[0], 2) + Math.pow(lst[1], 2))) - Math.pow(lst[0], 2) - Math.pow(lst[1], 2)))*(((((lst.length)==0)? 0 : (Math.pow(lst[0], 2) + Math.pow(lst[1], 2))) - Math.pow(lst[0], 2) - Math.pow(lst[1], 2)))*(((((lst.length)==0)? 0 : (Math.pow(lst[0], 2) + Math.pow(lst[1], 2))) - Math.pow(lst[0], 2) - Math.pow(lst[1], 2)))*(((((lst.length)==0)? 0 : (Math.pow(lst[0], 2) + Math.pow(lst[1], 2))) - Math.pow(lst[0], 2) - Math.pow(lst[1], 2)))*(((((lst.length)==0)? 0 : (Math.pow(lst[0], 2) + Math.pow(lst[1], 2))) - Math.pow(lst[0], 2) - Math.pow(lst[1], 2)))*(((((lst.length)==0)? 0 : (Math.pow(lst[0], 2) + Math.pow(lst[1], 2))) - Math.pow(lst[0], 2) - Math"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = []\n  let diff = []\n  let a = game.split('')\n  let b = guess.split('')\n  let index = 0\n  for (index = 0; index < Math.min(a.length, b.length); index++) {\n    if (a[index] === b[index]) {\n      result.push(0)\n      diff.push(0)\n    } else {\n      result.push(Math.abs(a[index] - b[index]))\n      diff.push(Math.abs(a[index] - b[index]))\n    }\n  }\n  for (; index < a.length; index++) {\n    result.push(a[index])\n    diff.push(a[index])\n  }\n  for (; index < b.length; index++) {\n    result.push(b[index])\n    diff.push(b[index])\n  }\n  return { result, diff }\n}\n\nmodule.exports = compare<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n    const strength = extensions.reduce((prev, curr) => {\n        const cap = curr.length.toString().replace(/^\\d+/, '').charAt(0);\n        const sm = curr.length.toString().replace(/^\\d+/, '').charAt(1);\n        return (((cap - sm) * -1) + (cap > sm? cap : sm));\n    }, 0);\n    return class_name + '.' + extensions[strength];\n}\n\n/*\n  1.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  2.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.CC'\n  3.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  4.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  5.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.CC'\n  6.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  7.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  8.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  9.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  10.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  11.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  12.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  13.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  14.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  15.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  16.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  17.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  18.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  19.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  20.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  21.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  22.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  23.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  24.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  25.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  26.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  27.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  28.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  29.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  30.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  31.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  32.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  33.\n    for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  34.\n    for strongestExtension('my_class', ['"}
{"task_id": "JavaScript/154", "prompt": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n \tlet aArray= a.split('');\n \tlet bArray= b.split('');\n \tlet aLength= aArray.length;\n \tlet bLength= bArray.length;\n \tlet aDiff= aLength-bLength;\n \tlet bDiff= bLength-aLength;\n \tlet i= 0;\n \tlet j= 0;\n \twhile (aDiff > 0 || bDiff > 0){\n \t\tif (aDiff > 0 && aArray[i] == bArray[j]){\n \t\t\ti++;\n \t\t\tj++;\n \t\t\taDiff--;\n \t\t}\n \t\telse if (bDiff > 0 && bArray[j] == aArray[i]){\n \t\t\ti++;\n \t\t\tj++;\n \t\t\tbDiff--;\n \t\t}\n \t\telse{\n \t\t\tif (aArray[i] == bArray[j]){\n \t\t\t\ti++;\n \t\t\t}\n \t\t\telse{\n \t\t\t\tj++;\n \t\t\t}\n \t\t\taDiff--;\n \t\t\tbDiff--;\n \t\t}\n \t}\n \tif(i == aLength){\n \t\treturn true;\n \t}\n \treturn false;\n }\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const digitCount = Math.floor(num).toString().length;\n  return [\n    digitCount.charAt(digitCount.length - 1) === '0'? 0 : 1,\n    digitCount.charAt(digitCount.length - 1) === '0'? 0 : 1,\n  ];\n};\n\nconst evenOddCount = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    if (num.toString().charAt(i) % 2 === 0) count++;\n  }\n  return [count, num.toString().length - count];\n};\n\nconst evenOddCount = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    if (num.toString().charAt(i) % 2 === 0) count++;\n  }\n  return [count, num.toString().length - count];\n};\n\nconst evenOddCount = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    if (num.toString().charAt(i) % 2 === 0) count++;\n  }\n  return [count, num.toString().length - count];\n};\n\nconst evenOddCount = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    if (num.toString().charAt(i) % 2 === 0) count++;\n  }\n  return [count, num.toString().length - count];\n};\n\nconst evenOddCount = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    if (num.toString().charAt(i) % 2 === 0) count++;\n  }\n  return [count, num.toString().length - count];\n};\n\nconst evenOddCount = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    if (num.toString().charAt(i) % 2 === 0) count++;\n  }\n  return [count, num.toString().length - count];\n};\n\nconst evenOddCount = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    if (num.toString().charAt(i) % 2 === 0) count++;\n  }\n  return [count, num.toString().length - count];\n};\n\nconst evenOddCount = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    if (num.toString().charAt(i) % 2 === 0) count++;\n  }\n  return [count, num.toString().length - count];\n};\n\nconst evenOddCount = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    if (num.toString().charAt(i) % 2 === 0) count++;\n  }\n  return [count, num.toString().length - count];\n};\n\nconst evenOddCount = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    if (num.toString().charAt(i) % 2 === 0) count++;\n  }\n  return [count, num.toString().length - count];\n};\n\nconst evenOddCount = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    if (num.toString().charAt(i) % 2 === 0) count++;\n  }\n  return [count, num.toString().length - count];\n};\n\nconst evenOddCount = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    if (num.toString().charAt(i) % 2 === 0) count++;\n  }\n  return [count, num.toString().length - count];\n};\n\nconst evenOddCount = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    if (num.toString().charAt(i) % 2 === 0) count++;\n  }\n  return [count, num.toString().length - count];\n};\n\nconst evenOddCount = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    if (num.toString().charAt(i) % 2 === 0) count++;\n  }\n  return [count, num.toString().length - count];\n};\n\nconst evenOddCount = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    if (num.toString().charAt(i) % 2 === 0) count++;\n  }\n  return [count, num.toString().length - count];\n};\n\nconst evenOddCount = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    if (num.toString().charAt(i) % 2 === 0) count++;\n  }\n  return [count, num.toString().length - count];\n};\n\nconst evenOddCount = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    if (num.toString().charAt(i) % 2 === 0) count++;\n  }\n  return [count, num.toString().length - count"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n    let roman = []\n    for (let i = 0; i < 13; i++) {\n        let num = i + 1\n        for (let j = 0; j < num; j++) {\n            let one = Math.pow(10, j)\n            if (number >= one) {\n                roman.push(String.fromCharCode(97 + j))\n                number -= one\n            }\n        }\n    }\n    return roman.reverse().join(\"\")\n}\n\n/*\n  Given a roman numeral, return the corresponding integer. \n  Restrictions: 1 <= num <= 1000\n\n   Examples:\n  >>> intFromRoman('xix') == 19\n  >>> intFromRoman('clii') == 152\n  >>> intFromRoman('cdxxvi') == 426\n  */\nconst intFromRoman = (roman) => {\n    let int = 0\n    for (let i = 0; i < roman.length; i++) {\n        let char = roman[i].charCodeAt(0) - 97\n        for (let j = 0; j < char; j++) {\n            int += Math.pow(10, j)\n        }\n    }\n    return int\n}\n\n/*\n  Given an integer, return its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000\n\n   Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n    let roman = []\n    let i = 0\n    while (number > 0) {\n        if (number % 1000 == 0) {\n            roman.push(String.fromCharCode(97 + i))\n            number = number / 1000\n        } else {\n            roman.push(String.fromCharCode(97 + i))\n            number -= number % 100\n        }\n        i++\n    }\n    roman.reverse().join(\"\")\n}\n\n/*\n  Given a roman numeral, return the corresponding integer. \n  Restrictions: 1 <= num <= 1000\n\n   Examples:\n  >>> intFromRoman('xix') == 19\n  >>> intFromRoman('clii') == 152\n  >>> intFromRoman('cdxxvi') == 426\n  */\nconst intFromRoman = (roman) => {\n    let int = 0\n    for (let i = 0; i < roman.length; i++) {\n        let char = roman[i].charCodeAt(0) - 97\n        for (let j = 0; j < char; j++) {\n            int += Math.pow(10, j)\n        }\n    }\n    return int\n}\n\nconsole.log(intToMiniRoman(21))\nconsole.log(intFromRoman(intToMiniRoman(21)))\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n\treturn (a <= c && b <= c && a + b <= c) ||\n\t\t(a <= c && b <= c && a + b >= c) ||\n\t\t(a <= c && b >= c && a + b >= c) ||\n\t\t(a <= c && b >= c && a + b <= c);\n}\n\n/*\n Given the lengths of the three sides of a triangle. Will return true if the \n   triangle is obtuse, false otherwise.\n  Example:\n  obtuseTriangle(3, 4, 5) == true\n  obtuseTriangle(1, 2, 3) == false\n  */\nconst obtuseTriangle = (a, b, c) => {\n\treturn a + b < c || b + c < a || c + a < b;\n}\n\n/*\n Given the lengths of the three sides of a triangle. Will return true if the \n   triangle is right-obtuse, false otherwise.\n  Example:\n  rightObtuseTriangle(3, 4, 5) == true\n  rightObtuseTriangle(1, 2, 3) == false\n  */\nconst rightObtuseTriangle = (a, b, c) => {\n\treturn a + b > c || b + c > a || c + a > b;\n}\n\n/*\n Given the lengths of the three sides of a triangle. Will return true if the \n   triangle is equilateral, false otherwise.\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n\treturn a === b && b === c && a === c;\n}\n\n/*\n Given the lengths of the three sides of a triangle. Will return true if the \n   triangle is isosceles, false otherwise.\n  Example:\n  isoscelesTriangle(3, 4, 5) == true\n  isoscelesTriangle(1, 2, 3) == false\n  */\nconst isoscelesTriangle = (a, b, c) => {\n\treturn a + b === c && a + c === b && a + b === b;\n}\n\n/*\n Given the lengths of the three sides of a triangle. Will return true if the \n   triangle is scalene, false otherwise.\n  Example:\n  scaleneTriangle(3, 4, 5) == true\n  scaleneTriangle(1, 2, 3) == false\n  */\nconst scaleneTriangle = (a, b, c) => {\n\treturn a + b > c && b + c > a && c + a > b;\n}\n\n/*\n Given the lengths of the three sides of a triangle. Will return true if the \n   triangle is equilaterial, false otherwise.\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n\treturn a + b < c || b + c < a || c + a < b;\n}\n\n/*\n Given the lengths of the three sides of a triangle. Will return true if the \n   triangle is scalene, false otherwise.\n  Example:\n  scaleneTriangle(3, 4, 5) == true\n  scaleneTriangle(1, 2, 3) == false\n  */\nconst scaleneTriangle = (a, b, c) => {\n\treturn a + b === c && b + c === a && a + c === b;\n}\n\nconst triangle = (a, b, c) => {\n\treturn rightAngleTriangle(a, b, c) && obtuseTriangle(a, b, c) && \n\t\trightObtuseTriangle(a, b, c) && equilateralTriangle(a, b, c) && \n\t\tisoscelesTriangle(a, b, c) && scaleneTriangle(a, b, c);\n}\n\nconst triangle_count = (a, b, c) => {\n\tlet cnt = 0;\n\tfor (let i = 0; i < a; i++) {\n\t\tfor (let j = 0; j < b; j++) {\n\t\t\tfor (let k = 0; k < c; k++) {\n\t\t\t\tif (triangle(i, j, k)) {\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn cnt;\n}\n\nconst triangle_count_fast = (a, b, c) => {\n\tlet cnt = 0;\n\tfor (let i = 0; i < a; i++) {\n\t\tfor (let j = 0; j < b; j++) {\n\t\t\tfor (let k = 0; k < c; k++) {\n\t\t\t\tif (triangle(i, j, k)) {\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn cnt;\n}\n\ntriangle_count(1, 2, 3);\ntriangle_count_fast(1, 2, 3);\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n    const sort= words.sort((a,b)=>a.length-b.length);\n    return sort[0];\n }\n\nconsole.log(findMax([\"name\",\" of\",\" string\"]))\nconsole.log(findMax([\"name\",\" enam\",\" game\"]))\nconsole.log(findMax([\"aaaaaaa\",\" bb\",\" cc\"]))\n\n\n//Test cases\n\nconst findMax = (words) => {\n  const sort = words.sort((a, b) => a.length - b.length);\n  return sort[0];\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]))\nconsole.log(findMax([\"name\", \"enam\", \"game\"]))\nconsole.log(findMax([\"aaaaaaa\", \"bb\", \"cc\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const maxCarrots = 1000\n  const fullCarrots = maxCarrots - number\n  const leftCarrots = fullCarrots - need\n  if (leftCarrots >= 0) {\n    return [maxCarrots - number + leftCarrots, leftCarrots]\n  } else {\n    return [maxCarrots - number, maxCarrots]\n  }\n}\n\nconst test = (number, need, remaining) => {\n  console.log(`eat(${number}, ${need}, ${remaining})`)\n  const [eat, left] = eat(number, need, remaining)\n  console.log(`eat(${number}, ${need}, ${remaining}) returns ${eat}, ${left}`)\n}\n\ntest(1, 1, 10)\ntest(3, 3, 7)\ntest(6, 3, 6)\ntest(10, 5, 9)\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    // If operator is not a list, return the operand\n    if (!operator || typeof operator!== 'object') {\n        return operand;\n    }\n\n    // If operator has no operators, return the operand\n    if (Object.keys(operator).length === 0) {\n        return operand;\n    }\n\n    // If operand is not a list, return the operator\n    if (!operand || typeof operand!== 'object') {\n        return operator;\n    }\n\n    // If operand has no operands, return the operator\n    if (Object.keys(operand).length === 0) {\n        return operator;\n    }\n\n    // If operator and operand has the same length, return the operator\n    if (Object.keys(operator).length === Object.keys(operand).length) {\n        return operator;\n    }\n\n    // Else, build the operator list\n    let operatorList = Object.keys(operator);\n\n    // Create a list of the operands\n    let operandList = Object.keys(operand);\n\n    // Add the first operator to the list\n    operatorList.unshift(operatorList.pop());\n\n    // Add the first operand to the list\n    operandList.unshift(operandList.pop());\n\n    // If the two lists are not equal in length, the first list is longer\n    if (Object.keys(operator).length!== Object.keys(operand).length) {\n        // Add the rest of the operators to the operator list\n        while (operatorList.length!== 0) {\n            operatorList.unshift(operatorList.pop());\n        }\n\n        // Add the rest of the operands to the operand list\n        while (operandList.length!== 0) {\n            operandList.unshift(operandList.pop());\n        }\n    }\n\n    // Build the expression\n    let expression = operandList.pop();\n\n    // Build the rest of the expression\n    while (operandList.length!== 0) {\n        expression = operatorList.pop() + expression;\n    }\n\n    // Return the expression\n    return expression;\n}\n\n// Test\nconsole.log(doAlgebra({'+': '*', '-': '*', '*': '**'}, [2, 3, 4, 5]));<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const str = s.toLowerCase();\n  const re = /([a-z]|[A-Z])/g;\n  const result = s.replace(re, (match) => {\n    const temp = match.toLowerCase();\n    const isLetter = temp[0] === temp[0].toUpperCase();\n    return isLetter? temp.toUpperCase() : temp.toLowerCase();\n  });\n  return result;\n}\n\nconsole.log(solve(\"1234\")); // 4321\nconsole.log(solve(\"ab\")); // AB\nconsole.log(solve(\"#a@C\")); // #A@c\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === undefined) return null;\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '2b2a0f2c2d3d4b4e4f5e6e7e8e9eaebecedee'\n  */\nconst stringToSha1 = (text) => {\n  if (text === undefined) return null;\n  return crypto.createHash('sha1').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha256('Hello world') == '8ea40e6dd9a8af6aa1c4e1d7e7f7d0e2b4b8d1f8f4b4d4f4b4d4f4b4d4b4d4d4d4d4'\n  */\nconst stringToSha256 = (text) => {\n  if (text === undefined) return null;\n  return crypto.createHash('sha256').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'f8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a9e6b0e2d64edc8c8a9b4aeae9f1f6a7d8f7c0b3a72a"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  return (a + 1) % b === 0? generateIntegers(a, b) : [a + 1];\n};\n\nconst test = require('tape');\n\ntest('generateIntegers', t => {\n  const result = generateIntegers(2, 8);\n  t.deepEqual(result, [2, 4, 6, 8]);\n  t.end();\n});\n<|endoftext|>"}
