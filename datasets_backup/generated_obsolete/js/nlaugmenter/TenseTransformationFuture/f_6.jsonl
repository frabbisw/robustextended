{"task_id": "JavaScript/0", "prompt": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n    const result = [];\n    const len = numbers.length;\n    let index;\n    for (let i = 0; i < len; i++) {\n        for (let j = i + 1; j < len; j++) {\n            index = (Math.abs(numbers[i] - numbers[j]) <= threshold)? 1 : 0;\n            result.push(index);\n        }\n    }\n    return result;\n};\n\n/*\n  Given a list of numbers and a threshold, return a list of indices \n   of the elements that are closest to each other.\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  [1, 3]\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.2)\n  [0, 1, 2]\n  */\nconst hasClosestElements = (numbers, threshold) => {\n    const result = [];\n    const len = numbers.length;\n    let index;\n    for (let i = 0; i < len; i++) {\n        for (let j = i + 1; j < len; j++) {\n            index = (Math.abs(numbers[i] - numbers[j]) <= threshold)? 1 : 0;\n            result.push(index);\n        }\n    }\n    return result;\n};\n\n/*\n  Given a list of numbers and a threshold, return a list of indices \n   of the elements that are closest to each other.\n  >>> hasClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  [1, 3]\n  >>> hasClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.2)\n  [0, 1, 2]\n  */\nconst hasClosestElementsWithArray = (numbers, threshold) => {\n    const result = [];\n    const len = numbers.length;\n    let index;\n    for (let i = 0; i < len; i++) {\n        for (let j = i + 1; j < len; j++) {\n            index = (Math.abs(numbers[i] - numbers[j]) <= threshold)? 1 : 0;\n            result.push(index);\n        }\n    }\n    return result;\n};\n\n/*\n  Given a list of numbers, return a list of indices of the elements that \n   are closest to each other.\n  >>> hasClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  [1, 3]\n  >>> hasClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.2)\n  [0, 1, 2]\n  */\nconst hasClosestElementsWithArrayWithThreshold = (numbers, threshold) => {\n    const result = [];\n    const len = numbers.length;\n    let index;\n    for (let i = 0; i < len; i++) {\n        for (let j = i + 1; j < len; j++) {\n            index = (Math.abs(numbers[i] - numbers[j]) <= threshold)? 1 : 0;\n            result.push(index);\n        }\n    }\n    return result;\n};\n\nexport {\n    hasClosestElements,\n    hasClosestElementsWithArray,\n    hasClosestElementsWithArrayWithThreshold,\n    hasCloseElements,\n    hasCloseElementsWithArray,\n    hasCloseElementsWithArrayWithThreshold,\n    hasClosestElementsWithArrayWithThreshold\n};<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  // Split by spaces and convert to array\n  const paren_array = paren_string.split(/\\s+/);\n  // Convert array to a new array containing each group of parens.\n  const paren_list = paren_array.map((paren_string) => {\n    const start_index = paren_string.indexOf('(');\n    const end_index = paren_string.indexOf(')');\n    // Check to make sure the string contains both parentheses\n    if (start_index < 0 || end_index < 0) {\n      throw new Error('Invalid paren string:'+ paren_string);\n    }\n    // Create a new string without the brackets\n    const new_string = paren_string.slice(start_index + 1, end_index);\n    // Check to make sure the string doesn't have any nested parentheses\n    if (new_string.indexOf('(') < 0) {\n      return new_string;\n    } else {\n      throw new Error('Nested parens in paren_string:'+ paren_string);\n    }\n  });\n  // Return a new array containing the original strings\n  return paren_list;\n}\n\n/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( () ((() )) ((() ) ) )')\n  ['()', '(()())', '(()())', '(())()', '(()())']\n  */\nconst separateParens = (paren_string) => {\n  // Split by spaces and convert to array\n  const paren_array = paren_string.split(/\\s+/);\n  // Convert array to a new array containing each group of parens.\n  const paren_list = paren_array.map((paren_string) => {\n    const start_index = paren_string.indexOf('(');\n    const end_index = paren_string.indexOf(')');\n    // Check to make sure the string contains both parentheses\n    if (start_index < 0 || end_index < 0) {\n      throw new Error('Invalid paren string:'+ paren_string);\n    }\n    // Create a new string without the brackets\n    const new_string = paren_string.slice(start_index + 1, end_index);\n    // Check to make sure the string doesn't have any nested parentheses\n    if (new_string.indexOf('(') < 0) {\n      return new_string;\n    } else {\n      throw new Error('Nested parens in paren_string:'+ paren_string);\n    }\n  });\n  // Return a new array containing the original strings\n  return paren_list;\n}\n\n/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParens('((())())()')\n  ['()()()()', '(())()()', '(())()()', '()()()()']\n  */\nconst separateParens2 = (paren_string) => {\n  // Split by spaces and convert to array\n  const paren_array = paren_string.split(/\\s+/);\n  // Convert array to a new array containing each group of parens.\n  const paren_list = paren_array.map((paren_string) => {\n    const start_index = paren_string.indexOf('(');\n    const end_index = paren_string.indexOf(')');\n    // Check to make sure the string contains both parentheses\n    if (start_index < 0 || end_index < 0) {\n      throw new Error('Invalid paren string:'+ paren_string);\n    }\n    // Create a new string without the brackets\n    const new_string = paren_string.slice(start_index + 1, end_index);\n    // Check to make sure the string doesn't have any nested parentheses\n    if (new_string.indexOf('(') < 0) {\n      return new_string;\n    } else {\n      throw new Error('Nested parens in paren_string:'+ paren_string);\n    }\n  });\n  // Return a new array containing the original strings\n  return paren_list;\n}\n\n/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParens('((())())()')\n  ['()()()()', '(())()()', '(())()()', '()()()()']\n  */\nconst separateParens3 = (paren_string) => {\n  // Split by spaces and convert to array\n  const paren_array = paren_string.split(/\\s+/);\n  // Convert array to a new array containing each group of parens.\n  const paren_list = paren_array.map((paren_string) => {\n    const start_index = paren_string.indexOf('(');\n    const end_index = paren_string.indexOf(')');\n    // Check to make sure the string contains both parentheses\n    if (start_index < 0 || end_index < 0) {\n      throw new Error('Invalid paren string:'+ paren_string);\n    }\n    // Create a new string without the brackets\n"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integer = number.toFixed(0);\n  let decimal = number - parseInt(number);\n  let integer_part = integer.split('.')[0];\n  let decimal_part = integer.split('.')[1];\n\n  return decimal_part;\n};\n\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  let integer = number.toFixed(0);\n  let decimal = number - parseInt(number);\n  let integer_part = integer.split('.')[0];\n  let decimal_part = integer.split('.')[1];\n\n  return parseInt(integer_part);\n};\n\nmodule.exports = {\n  truncateNumber,\n  truncateInteger\n};<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i]\n  }\n  return balance < 0\n}\n\nmodule.exports = belowZero\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sortedNumbers = sortBy(numbers, (x) => x);\n  const mean = mean(sortedNumbers);\n  const absoluteDeviations = [0.0];\n  for (let i = 0; i < sortedNumbers.length; i++) {\n    absoluteDeviations.push(Math.abs(sortedNumbers[i] - mean));\n  }\n  return mean(absoluteDeviations);\n};\n\n/* For a will give list of input numbers, calculate Median Absolute Deviation \n   around the median of this dataset. \n   Median Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (median in this case): \n   MAD= median(absoluteDeviations)\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers) => {\n  const sortedNumbers = sortBy(numbers, (x) => x);\n  const median = median(sortedNumbers);\n  const absoluteDeviations = [0.0];\n  for (let i = 0; i < sortedNumbers.length; i++) {\n    absoluteDeviations.push(Math.abs(sortedNumbers[i] - median));\n  }\n  return median(absoluteDeviations);\n};\n\n/* For a will give list of input numbers, calculate Variance around the mean \n   of this dataset. \n   Variance will be the average of the squared deviations from the mean: \n   var= (sum( x-x_mean^2)) / N\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.5\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const squaredDeviations = [0.0];\n  for (let i = 0; i < numbers.length; i++) {\n    squaredDeviations.push(Math.pow(numbers[i] - mean, 2));\n  }\n  return mean(squaredDeviations) / (numbers.length - 1);\n};\n\n/* For a will give list of input numbers, calculate Standard Deviation around \n   the mean of this dataset. \n   Standard Deviation will be the square root of the variance: \n   std= sqrt(var)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.41421\n  */\nconst standardDeviation = (numbers) => {\n  const variance = variance(numbers);\n  return Math.sqrt(variance);\n};\n\n/* For a will give list of input numbers, calculate Mode around the mean \n   of this dataset. \n   Mode will be the most common number in this dataset: \n   mode= most common(numbers)\n  >>> mode([1, 2, 3, 4])\n  3\n  */\nconst mode = (numbers) => {\n  const sortedNumbers = sortBy(numbers, (x) => x);\n  const mode = sortedNumbers.reduce((a, b) => {\n    if (a > b) {\n      return a;\n    } else {\n      return b;\n    }\n  }, 0);\n  return mode;\n};\n\n/* For a will give list of input numbers, calculate Mode around the median \n   of this dataset. \n   Mode will be the most common number in this dataset: \n   mode= most common(numbers)\n  >>> mode([1, 2, 3, 4])\n  3\n  */\nconst medianMode = (numbers) => {\n  const sortedNumbers = sortBy(numbers, (x) => x);\n  const median = median(sortedNumbers);\n  const mode = sortedNumbers.reduce((a, b) => {\n    if (a > b) {\n      return a;\n    } else {\n      return b;\n    }\n  }, 0);\n  return mode;\n};\n\nmodule.exports = {\n  meanAbsoluteDeviation,\n  medianAbsoluteDeviation,\n  variance,\n  standardDeviation,\n  mode,\n  medianMode\n};<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n    return Array.prototype.slice.call(numbers, 0).reduce((acc, elem) => {\n        if (acc.length) {\n            acc.push(delimeter);\n        }\n        acc.push(elem);\n        return acc;\n    }, []);\n};\n\n/*\n  ##### `groupBy`\n\n  A simple function to group an array of objects by an attribute\n  >>> groupBy([{id: 1, name: 'john'}, {id: 2, name: 'joe'}, {id: 3, name: 'jane'}], 'name')\n  [{id: 1, name: 'john'}, {id: 2, name: 'joe'}]\n  */\nconst groupBy = (numbers, attribute) => {\n    return numbers.reduce((acc, obj) => {\n        const key = obj[attribute];\n        if (!acc[key]) {\n            acc[key] = [];\n        }\n        acc[key].push(obj);\n        return acc;\n    }, {});\n};\n\n/*\n  ##### `filter`\n\n  A simple function to filter an array of objects by an attribute\n  >>> filter([{id: 1, name: 'john'}, {id: 2, name: 'joe'}, {id: 3, name: 'jane'}], 'id')\n  [{id: 1, name: 'john'}, {id: 2, name: 'joe'}]\n  */\nconst filter = (numbers, attribute) => {\n    return numbers.filter(item => item[attribute]);\n};\n\n/*\n  ##### `find`\n\n  A simple function to find an object in an array of objects by an attribute\n  >>> find([{id: 1, name: 'john'}, {id: 2, name: 'joe'}, {id: 3, name: 'jane'}], 'id')\n  {id: 2, name: 'joe'}\n  */\nconst find = (numbers, attribute) => {\n    return numbers.find(item => item[attribute]);\n};\n\n/*\n  ##### `sortBy`\n\n  A simple function to sort an array of objects by an attribute\n  >>> sortBy([{id: 1, name: 'john'}, {id: 2, name: 'joe'}, {id: 3, name: 'jane'}], 'id')\n  [{id: 1, name: 'john'}, {id: 2, name: 'joe'}, {id: 3, name: 'jane'}]\n  */\nconst sortBy = (numbers, attribute) => {\n    return numbers.sort(item => item[attribute]);\n};\n\n/*\n  ##### `toArray`\n\n  A simple function to convert an array of objects to an array of values\n  >>> toArray([{id: 1, name: 'john'}, {id: 2, name: 'joe'}, {id: 3, name: 'jane'}])\n  [1, 2, 3]\n  */\nconst toArray = (numbers) => {\n    return numbers.map(item => item.id);\n};\n\n/*\n  ##### `sum`\n\n  A simple function to sum the values of an array of objects\n  >>> sum([{id: 1, name: 'john'}, {id: 2, name: 'joe'}, {id: 3, name: 'jane'}])\n  9\n  */\nconst sum = (numbers) => {\n    return numbers.reduce((acc, item) => {\n        return acc + item.id;\n    }, 0);\n};\n\n/*\n  ##### `uniq`\n\n  A simple function to remove duplicate values from an array\n  >>> uniq([1, 2, 3, 2, 1, 2, 3])\n  [1, 2, 3]\n  */\nconst uniq = (numbers) => {\n    return [...new Set(numbers)];\n};\n\n/*\n  ##### `zip`\n\n  A simple function to zip two arrays together\n  >>> zip([1, 2, 3], [4, 5, 6])\n  [1, 4, 3, 2, 5, 6]\n  */\nconst zip = (numbers, delimiter) => {\n    return [...new Set(numbers)].map(n => delimiter + n);\n};\n\nexport {\n    intersperse,\n    groupBy,\n    filter,\n    find,\n    sortBy,\n    toArray,\n    sum,\n    uniq,\n    zip\n};\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n    if (paren_string === '') {\n        return [];\n    }\n    let group_stack = [];\n    let last_group = '';\n    paren_string.split('').forEach((char) => {\n        if (char === ')') {\n            if (last_group === '(') {\n                group_stack.push(1);\n            } else {\n                group_stack.push(0);\n            }\n            last_group = char;\n        } else if (char === '(') {\n            group_stack.push(group_stack[group_stack.length - 1] + 1);\n            last_group = char;\n        } else if (char === ')') {\n            if (last_group === '(') {\n                group_stack.pop();\n            } else {\n                group_stack.pop();\n                group_stack.pop();\n            }\n            last_group = char;\n        }\n    });\n    let groups = [];\n    while (group_stack.length > 0) {\n        groups.push(group_stack.pop());\n    }\n    return groups;\n};\n\nconst getParenthesisGroups = (input_string) => {\n    let paren_string = '';\n    let groups = [];\n    for (let i = 0; i < input_string.length; i++) {\n        if (input_string[i] === '(') {\n            paren_string += '(';\n        } else if (input_string[i] === ')') {\n            paren_string += ')';\n        }\n    }\n    groups = parseNestedParens(paren_string);\n    return groups;\n};\n\nlet getParenthesisGroups2 = (input_string) => {\n    let groups = [];\n    let open_group = false;\n    let paren_string = '';\n    for (let i = 0; i < input_string.length; i++) {\n        if (input_string[i] === '(') {\n            paren_string += '(';\n            open_group = true;\n        } else if (input_string[i] === ')') {\n            paren_string += ')';\n            open_group = false;\n        } else if (open_group) {\n            paren_string += input_string[i];\n        }\n    }\n    groups = parseNestedParens(paren_string);\n    return groups;\n};\n\nlet getParenthesisGroups3 = (input_string) => {\n    let groups = [];\n    let open_group = false;\n    let paren_string = '';\n    for (let i = 0; i < input_string.length; i++) {\n        if (input_string[i] === '(') {\n            paren_string += '(';\n            open_group = true;\n        } else if (input_string[i] === ')') {\n            paren_string += ')';\n            open_group = false;\n        } else if (open_group) {\n            paren_string += input_string[i];\n        }\n    }\n    groups = parseNestedParens(paren_string);\n    return groups;\n};\n\nconst getParenthesisGroups4 = (input_string) => {\n    let groups = [];\n    let open_group = false;\n    let paren_string = '';\n    for (let i = 0; i < input_string.length; i++) {\n        if (input_string[i] === '(') {\n            paren_string += '(';\n            open_group = true;\n        } else if (input_string[i] === ')') {\n            paren_string += ')';\n            open_group = false;\n        } else if (open_group) {\n            paren_string += input_string[i];\n        }\n    }\n    groups = parseNestedParens(paren_string);\n    return groups;\n};\n\nconst getParenthesisGroups5 = (input_string) => {\n    let groups = [];\n    let open_group = false;\n    let paren_string = '';\n    for (let i = 0; i < input_string.length; i++) {\n        if (input_string[i] === '(') {\n            paren_string += '(';\n            open_group = true;\n        } else if (input_string[i] === ')') {\n            paren_string += ')';\n            open_group = false;\n        } else if (open_group) {\n            paren_string += input_string[i];\n        }\n    }\n    groups = parseNestedParens(paren_string);\n    return groups;\n};\n\nconst getParenthesisGroups6 = (input_string) => {\n    let groups = [];\n    let open_group = false;\n    let paren_string = '';\n    for (let i = 0; i < input_string.length; i++) {\n        if (input_string[i] === '(') {\n            paren_string += '(';\n            open_group = true;\n        } else if (input_string[i] === ')') {\n            paren_string += ')';\n            open_group = false;\n        } else if (open_group) {\n            paren_string += input_string[i];\n        }\n    }\n    groups = parseNestedParens(paren_string);\n    return groups;\n};\n\nconst getParenthesisGroups7 = (input_string) => {\n    let groups = [];\n    let open_group = false;\n    let paren_string = '';\n    for (let i = 0; i < input_string.length; i++) {\n        if (input_string[i] === '(') {\n            paren_string += '(';\n            open_group = true;\n        } else if (input_string[i] === ')') {\n            paren_string += ')';\n            open_group = false;\n        }"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) > -1)\n}\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 'a')\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  return strings.filter(x => x.includes(substring))\n}\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 'a')\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) > -1)\n}\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 'a')\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  return strings.filter(x => x.includes(substring))\n}\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 'a')\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) > -1)\n}\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 'a')\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  return strings.filter(x => x.includes(substring))\n}\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 'a')\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  return strings.filter(x => x.includes(substring))\n}\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 'a')\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  return strings.filter(x => x.includes(substring))\n}\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 'a')\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  return strings.filter(x => x.includes(substring))\n}\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 'a')\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  return strings.filter(x => x.includes(substring))\n}\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 'a')\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  return strings.filter(x => x.includes(substring))\n}\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 'a')\n  [1, 2, 3, 4, 5, 6, 7, 8,"}
{"task_id": "JavaScript/8", "prompt": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((acc, curr) => acc + curr, 0);\n  const product = numbers.reduce((acc, curr) => acc * curr, 1);\n\n  return sum === 0? (0, 1) : (sum, product);\n};\n\nmodule.exports = sumProduct;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const numbersLength = numbers.length\n  const result = []\n  let current = numbers[0]\n  let max = numbers[0]\n  let maxIndex = 0\n  for (let i = 0; i < numbersLength; i++) {\n    if (current < numbers[i]) {\n      current = numbers[i]\n      max = current\n      maxIndex = i\n    }\n    result.push(current)\n  }\n  return result\n}\n\nexport default rollingMax\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n    let p= string.split('').reverse().join('');\n    return p.substring(0, p.length - p.length % 2);\n}\n\nconst testPalindrome = (string) =>{\n    if(isPalindrome(string)){\n        console.log(string +'is a palindrome');\n    }else{\n        console.log(string +'is not a palindrome');\n    }\n}\n\ntestPalindrome('cat')\ntestPalindrome('cata')\ntestPalindrome('cataa')\ntestPalindrome('cataaaa')\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const len = Math.min(a.length, b.length);\n  let aChar = '',\n    bChar = '',\n    carry = 0;\n  for (let i = 0; i < len; i++) {\n    aChar = a[i];\n    bChar = b[i];\n    carry = (aChar ^ bChar) & 1;\n    aChar = carry;\n    bChar = 1 - carry;\n  }\n  return aChar + bChar;\n};\n\nconsole.log(stringXor('010', '110'));\n\n/*\nInput will be two strings a and b consisting only of 1s and 0s. \nwill Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('001', '011')\n  '010'\n  */\nconst stringXor2 = (a, b) => {\n  const len = Math.min(a.length, b.length);\n  let aChar = '',\n    bChar = '',\n    carry = 0;\n  for (let i = 0; i < len; i++) {\n    aChar = a[i];\n    bChar = b[i];\n    carry = (aChar ^ bChar) & 1;\n    aChar = 1 - carry;\n    bChar = carry;\n  }\n  return aChar + bChar;\n};\n\nconsole.log(stringXor2('001', '011'));\n\n/*\nInput will be two strings a and b consisting only of 1s and 0s. \nwill Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('001', '010')\n  '011'\n  */\nconst stringXor3 = (a, b) => {\n  const len = Math.min(a.length, b.length);\n  let aChar = '',\n    bChar = '',\n    carry = 0;\n  for (let i = 0; i < len; i++) {\n    aChar = a[i];\n    bChar = b[i];\n    carry = (aChar ^ bChar) & 1;\n    aChar = 1 - carry;\n    bChar = 1 - carry;\n  }\n  return aChar + bChar;\n};\n\nconsole.log(stringXor3('001', '010'));\n\n/*\nInput will be two strings a and b consisting only of 1s and 0s. \nwill Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '001')\n  '011'\n  */\nconst stringXor4 = (a, b) => {\n  const len = Math.min(a.length, b.length);\n  let aChar = '',\n    bChar = '',\n    carry = 0;\n  for (let i = 0; i < len; i++) {\n    aChar = a[i];\n    bChar = b[i];\n    carry = (aChar ^ bChar) & 1;\n    aChar = 1 - carry;\n    bChar = 1 - carry;\n  }\n  return aChar + bChar;\n};\n\nconsole.log(stringXor4('010', '001'));\n\n/*\nInput will be two strings a and b consisting only of 1s and 0s. \nwill Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('001', '011')\n  '010'\n  */\nconst stringXor5 = (a, b) => {\n  const len = Math.min(a.length, b.length);\n  let aChar = '',\n    bChar = '',\n    carry = 0;\n  for (let i = 0; i < len; i++) {\n    aChar = a[i];\n    bChar = b[i];\n    carry = (aChar ^ bChar) & 1;\n    aChar = 1 - carry;\n    bChar = 1 - carry;\n  }\n  return aChar + bChar;\n};\n\nconsole.log(stringXor5('001', '011'));\n\n/*\nInput will be two strings a and b consisting only of 1s and 0s. \nwill Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('001', '010')\n  '011'\n  */\nconst stringXor6 = (a, b) => {\n  const len = Math.min(a.length, b.length);\n  let aChar = '',\n    bChar = '',\n    carry = 0;\n  for (let i = 0; i < len; i++) {\n    aChar = a[i];\n    bChar = b[i];\n    carry = (aChar ^ bChar) & 1;\n    aChar = 1 - carry;\n    bChar = 1 - carry;\n  }\n  return aChar + bChar;\n};\n\nconsole.log(stringXor6('001', '010'));\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) return null;\n  let longest = strings[0];\n  let longestLength = longest.length;\n  strings.forEach((s, index) => {\n    if (s.length > longestLength) {\n      longest = s;\n      longestLength = longest.length;\n    }\n  });\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest2 = (strings) => {\n  if (strings.length === 0) return null;\n  let longest = strings[0];\n  let longestLength = longest.length;\n  strings.forEach((s, index) => {\n    if (s.length > longestLength) {\n      longest = s;\n      longestLength = longest.length;\n    }\n  });\n  return longest;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n    let x = a % b;\n    while (x) {\n        a = b;\n        b = x;\n        x = a % b;\n    }\n    return b;\n}\n\n/**\n  * @param {number} n\n  * @param {number} k\n  * @return {number}\n  *\n  * Return a sum of n numbers, each between 1 and k\n  */\nconst sumNumbers = (n, k) => {\n    let sum = 0;\n    for (let i = 1; i <= k; i++) {\n        sum += n * i;\n    }\n    return sum;\n}\n\n/**\n  * @param {number} n\n  * @param {number} k\n  * @return {number}\n  *\n  * Return a sum of n numbers, each between 1 and k\n  * Inclusive\n  */\nconst sumNumbersInclusive = (n, k) => {\n    let sum = 0;\n    for (let i = 1; i <= k; i++) {\n        sum += n * (i + 1);\n    }\n    return sum;\n}\n\n/**\n  * @param {number} n\n  * @param {number} k\n  * @return {number}\n  *\n  * Return a sum of n numbers, each between 1 and k\n  * Exclusive\n  */\nconst sumNumbersExclusive = (n, k) => {\n    let sum = 0;\n    for (let i = 1; i <= k; i++) {\n        sum += n * (i + 1) - n;\n    }\n    return sum;\n}\n\n/**\n  * @param {number} n\n  * @param {number} k\n  * @return {number}\n  *\n  * Return a sum of n numbers, each between 1 and k\n  * All the values between 1 and k inclusive\n  */\nconst sumNumbersAllInclusive = (n, k) => {\n    let sum = 0;\n    for (let i = 1; i <= k; i++) {\n        sum += n * i;\n    }\n    return sum;\n}\n\n/**\n  * @param {number} n\n  * @param {number} k\n  * @return {number}\n  *\n  * Return a sum of n numbers, each between 1 and k\n  * All the values between 1 and k exclusive\n  */\nconst sumNumbersAllExclusive = (n, k) => {\n    let sum = 0;\n    for (let i = 1; i <= k; i++) {\n        sum += n * i;\n    }\n    return sum;\n}\n\n/**\n  * @param {number} n\n  * @param {number} k\n  * @return {number}\n  *\n  * Return a sum of n numbers, each between 1 and k\n  * All the values between 1 and k inclusive\n  * (Inclusive)\n  */\nconst sumNumbersAllInclusiveInclusive = (n, k) => {\n    let sum = 0;\n    for (let i = 1; i <= k; i++) {\n        sum += n * i * (i + 1);\n    }\n    return sum;\n}\n\n/**\n  * @param {number} n\n  * @param {number} k\n  * @return {number}\n  *\n  * Return a sum of n numbers, each between 1 and k\n  * All the values between 1 and k exclusive\n  * (Inclusive)\n  */\nconst sumNumbersAllInclusiveExclusive = (n, k) => {\n    let sum = 0;\n    for (let i = 1; i <= k; i++) {\n        sum += n * i * (i + 1) - n;\n    }\n    return sum;\n}\n\n/**\n  * @param {number} n\n  * @param {number} k\n  * @return {number}\n  *\n  * Return a sum of n numbers, each between 1 and k\n  * All the values between 1 and k inclusive\n  * (Exclusive)\n  */\nconst sumNumbersAllExclusiveInclusive = (n, k) => {\n    let sum = 0;\n    for (let i = 1; i <= k; i++) {\n        sum += n * i * (i + 1) - n;\n    }\n    return sum;\n}\n\n/**\n  * @param {number} n\n  * @param {number} k\n  * @return {number}\n  *\n  * Return a sum of n numbers, each between 1 and k\n  * All the values between 1 and k exclusive\n  * (Exclusive)\n  */\nconst sumNumbersAllExclusiveExclusive = (n, k) => {\n    let sum = 0;\n    for (let i = 1; i <= k; i++) {\n        sum += n * i * (i + 1);\n    }\n    return sum;\n}\n\n/**\n  * @param {number} n\n  * @param {number} k\n  * @return {number}\n  *\n  * Return a sum of n numbers, each between 1 and k\n  * All the values between 1 and k inclusive\n  * (All)\n  */\nconst sumNumbersAll = (n, k) => {\n    let sum = 0;\n    for (let i = 1; i <= k; i++) {\n        sum += n * i;\n    }\n    return sum;\n}\n\nconst testSumNumbers = () => {\n    let [n, k] = [3, 3];\n    let sum = sumNumbers(n, k);\n    assert.strictEqual(sum, 6);\n\n    [n, k] = [25, 15];\n    sum = sumNumbers(n, k);\n    assert.strictEqual(sum, 15);\n\n    [n, k] = [1, 1];\n    sum = sumNumbers(n, k);\n    assert.strictEqual(sum, 1);\n\n    [n, k] = [3, 1];\n    sum = sumNumbers(n, k);\n    assert.strictEqual(sum, 1);\n\n    [n, k] = [25, 15];\n    sum = sumNumbersInclusive(n, k);\n    assert.strictEqual(sum, 15);\n\n    [n, k] = [1,"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  for (let i = 0; i <= string.length; i++) {\n    let prefix = string.substring(0, i);\n    prefixes.push(prefix);\n  }\n  return prefixes;\n};\n\n/* Return all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  for (let i = 0; i <= string.length; i++) {\n    let suffix = string.substring(string.length - i);\n    suffixes.push(suffix);\n  }\n  return suffixes;\n};\n\n/* Return all permutations of a string, sorted lexicographically\n  >>> allPermutations('abc')\n  [['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\n  */\nconst allPermutations = (string) => {\n  let permutations = [];\n  for (let i = 0; i <= string.length; i++) {\n    let prefix = string.substring(0, i);\n    for (let j = i + 1; j <= string.length; j++) {\n      let suffix = string.substring(j);\n      let permutation = [prefix, suffix];\n      permutations.push(permutation);\n    }\n  }\n  return permutations.sort((a, b) => a[0].localeCompare(b[0]));\n};\n\n/* Return the number of permutations of a string\n  >>> numPermutations('abc')\n  3\n  */\nconst numPermutations = (string) => {\n  let permutations = allPermutations(string);\n  return permutations.length;\n};\n\n/* Return all permutations of a string, with repeated occurrences of a character\n  >>> allPermutations('aabc')\n  [['a', 'a', 'b', 'c'], ['a', 'a', 'c', 'b'], ['a', 'b', 'a', 'c'], ['a', 'b', 'c', 'a'], ['a', 'c', 'a', 'b'], ['a', 'c', 'b', 'a'], ['b', 'a', 'a', 'c'], ['b', 'a', 'c', 'a'], ['b', 'c', 'a', 'a'], ['c', 'a', 'a', 'b'], ['c', 'a', 'b', 'a'], ['c', 'b', 'a', 'a']]\n  */\nconst allPermutations = (string) => {\n  let permutations = [];\n  for (let i = 0; i <= string.length; i++) {\n    let prefix = string.substring(0, i);\n    for (let j = i + 1; j <= string.length; j++) {\n      let suffix = string.substring(j);\n      let permutation = [prefix, suffix];\n      permutations.push(permutation);\n    }\n  }\n  return permutations;\n};\n\n/* Return the number of permutations of a string\n  >>> numPermutations('aabc')\n  12\n  */\nconst numPermutations = (string) => {\n  let permutations = allPermutations(string);\n  return permutations.length;\n};\n\nexport {\n  allPrefixes,\n  allSuffixes,\n  allPermutations,\n  numPermutations\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 1)\n  '0 1'\n  >>> stringSequence(5, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n, n2) => {\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    for (let j = 0; j <= n2; j++) {\n      result += `${i} ${j} `;\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  stringSequence,\n  stringSequence2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n    const set = new Set();\n    const chars = string.split('');\n    for (const char of chars) {\n        set.add(char);\n    }\n    return set.size;\n};\n\n// test\n// expect(countDistinctCharacters('jerry')).toEqual(4);\n// expect(countDistinctCharacters('abc')).toEqual(3);\n// expect(countDistinctCharacters('')).toEqual(0);\n\n/*\n  Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>> countDistinctCharacters('jerry')\n  4\n  >>>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = [\n    {\n      name: 'o',\n      dur: 4\n    }, {\n      name: 'o',\n      dur: 2\n    }, {\n      name: '.',\n      dur: 1\n    }\n  ];\n\n  let beat_list = [];\n  let current_beat = 0;\n\n  for (let i = 0; i < music_string.length; i++) {\n    for (let j = 0; j < notes.length; j++) {\n      if (music_string[i] === notes[j].name) {\n        if (notes[j].dur === current_beat + 1) {\n          current_beat += 1;\n          if (current_beat === notes[j].dur) {\n            beat_list.push(current_beat);\n            current_beat = 0;\n          }\n        }\n      }\n    }\n  }\n  return beat_list;\n};\n\nconst parseMusic2 = (music_string) => {\n  const notes = [\n    {\n      name: 'o',\n      dur: 4\n    }, {\n      name: 'o',\n      dur: 2\n    }, {\n      name: '.',\n      dur: 1\n    }\n  ];\n\n  let beat_list = [];\n  let current_beat = 0;\n  const current_beat_counter = 0;\n\n  for (let i = 0; i < music_string.length; i++) {\n    if (current_beat_counter === 0) {\n      if (music_string[i] === 'o') {\n        current_beat_counter = 4;\n      }\n    } else if (current_beat_counter === 1) {\n      if (music_string[i] === '|') {\n        current_beat_counter = 2;\n      }\n    } else if (current_beat_counter === 2) {\n      if (music_string[i] === '.') {\n        current_beat_counter = 1;\n      }\n    } else if (current_beat_counter === 3) {\n      if (music_string[i] === 'o') {\n        current_beat_counter = 4;\n      }\n    } else if (current_beat_counter === 4) {\n      if (music_string[i] === 'o') {\n        current_beat_counter = 2;\n      }\n    }\n  }\n  for (let j = 0; j < current_beat_counter; j++) {\n    beat_list.push(current_beat);\n    current_beat = 0;\n  }\n  return beat_list;\n};\n\nconst parseMusic3 = (music_string) => {\n  const notes = [\n    {\n      name: 'o',\n      dur: 4\n    }, {\n      name: 'o',\n      dur: 2\n    }, {\n      name: '.',\n      dur: 1\n    }\n  ];\n\n  let beat_list = [];\n  let current_beat = 0;\n  const current_beat_counter = 0;\n  let current_note = '';\n\n  for (let i = 0; i < music_string.length; i++) {\n    if (current_beat_counter === 0) {\n      if (music_string[i] === 'o') {\n        current_beat_counter = 4;\n      }\n    } else if (current_beat_counter === 1) {\n      if (music_string[i] === '|') {\n        current_beat_counter = 2;\n      }\n    } else if (current_beat_counter === 2) {\n      if (music_string[i] === '.') {\n        current_beat_counter = 1;\n      }\n    } else if (current_beat_counter === 3) {\n      if (music_string[i] === 'o') {\n        current_beat_counter = 4;\n      }\n    } else if (current_beat_counter === 4) {\n      if (music_string[i] === 'o') {\n        current_beat_counter = 2;\n      }\n    }\n  }\n\n  for (let j = 0; j < current_beat_counter; j++) {\n    beat_list.push(current_beat);\n    current_beat = 0;\n  }\n  return beat_list;\n};\n\nconst parseMusic4 = (music_string) => {\n  const notes = [\n    {\n      name: 'o',\n      dur: 4\n    }, {\n      name: 'o',\n      dur: 2\n    }, {\n      name: '.',\n      dur: 1\n    }\n  ];\n\n  let beat_list = [];\n  let current_beat = 0;\n  const current_beat_counter = 0;\n  let current_note = '';\n\n  for (let i = 0; i < music_string.length; i++) {\n    if (current_beat_counter === 0) {\n      if (music_string[i] === 'o') {\n        current_beat_counter = 4;\n      }\n    } else if (current_beat_counter === 1) {\n      if (music_string[i] === '|') {\n        current_beat_counter = 2;\n      }\n    } else if (current_beat_counter === 2) {\n      if (music_string[i] === '.') {\n        current_beat_counter = 1;\n      }\n    } else if (current_beat_counter === 3) {\n      if (music_string[i] === 'o') {\n        current_beat_counter = 4;\n      }\n    } else if (current_beat_counter === 4) {\n      if (music_string[i] === 'o') {\n        current_beat_counter = 2;\n      }\n    "}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let index = 0;\n  while (index < string.length) {\n    const current = string[index];\n    const next = string[index + 1];\n    if (next === substring[0]) {\n      index += 2;\n    } else if (current === substring[0]) {\n      index += 1;\n    } else {\n      index += 1;\n    }\n  }\n  return index;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  let returnString = ''\n  numberArray.forEach((element) => {\n    if(element.length < 2) {\n      returnString += `${element} `\n    } else if(element.length === 2) {\n      returnString += `${element}`\n    } else if(element.length === 3) {\n      returnString += `${element}`\n    } else if(element.length === 4) {\n      returnString += `${element}`\n    } else if(element.length === 5) {\n      returnString += `${element}`\n    } else if(element.length === 6) {\n      returnString += `${element}`\n    } else if(element.length === 7) {\n      returnString += `${element}`\n    } else if(element.length === 8) {\n      returnString += `${element}`\n    } else if(element.length === 9) {\n      returnString += `${element}`\n    } else {\n      returnString += element\n    }\n  })\n  return returnString\n}\n\n/* Input will be a string containing numbers with spaces. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('two one four three')\n  'one two three four'\n  */\nconst sortNumbers2 = (numbers) => {\n  const numberArray = numbers.split(' ')\n  let returnString = ''\n  numberArray.forEach((element) => {\n    returnString += element\n  })\n  return returnString\n}\n\n/* Input will be a string containing numbers with spaces. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers3('four three two one')\n  'one two three four'\n  */\nconst sortNumbers3 = (numbers) => {\n  const numberArray = numbers.split(' ')\n  let returnString = ''\n  numberArray.forEach((element, index) => {\n    if(index === numberArray.length - 1) {\n      returnString += element\n    } else {\n      returnString += element +''\n    }\n  })\n  return returnString\n}\n\nconst sortNumbers4 = (numbers) => {\n  const numberArray = numbers.split(' ')\n  let returnString = ''\n  numberArray.forEach((element, index) => {\n    if(index === numberArray.length - 1) {\n      returnString += element\n    } else {\n      returnString += `${element} `\n    }\n  })\n  return returnString\n}\n\nconst sortNumbers5 = (numbers) => {\n  const numberArray = numbers.split(' ')\n  let returnString = ''\n  numberArray.forEach((element, index) => {\n    if(index === numberArray.length - 1) {\n      returnString += element\n    } else {\n      returnString += `${element} `\n    }\n  })\n  return returnString\n}\n\nconst sortNumbers6 = (numbers) => {\n  const numberArray = numbers.split(' ')\n  let returnString = ''\n  numberArray.forEach((element, index) => {\n    if(index === numberArray.length - 1) {\n      returnString += element\n    } else {\n      returnString += `${element} `\n    }\n  })\n  return returnString\n}\n\nconst sortNumbers7 = (numbers) => {\n  const numberArray = numbers.split(' ')\n  let returnString = ''\n  numberArray.forEach((element, index) => {\n    if(index === numberArray.length - 1) {\n      returnString += element\n    } else {\n      returnString += `${element} `\n    }\n  })\n  return returnString\n}\n\nconst sortNumbers8 = (numbers) => {\n  const numberArray = numbers.split(' ')\n  let returnString = ''\n  numberArray.forEach((element, index) => {\n    if(index === numberArray.length - 1) {\n      returnString += element\n    } else {\n      returnString += `${element} `\n    }\n  })\n  return returnString\n}\n\nconst sortNumbers9 = (numbers) => {\n  const numberArray = numbers.split(' ')\n  let returnString = ''\n  numberArray.forEach((element, index) => {\n    if(index === numberArray.length - 1) {\n      returnString += element\n    } else {\n      returnString += `${element} `\n    }\n  })\n  return returnString\n}\n\nconst sortNumbers10 = (numbers) => {\n  const numberArray = numbers.split(' ')\n  let returnString = ''\n  numberArray.forEach((element, index) => {\n    if(index === numberArray.length - 1) {\n      returnString += element\n    } else {\n      returnString += `${element} `\n    }\n  })\n  return returnString\n}\n\nconst sortNumbers11 = (numbers) => {\n  const numberArray = numbers.split(' ')\n  let returnString = ''\n  numberArray.forEach((element, index) => {\n    if(index === numberArray.length - 1) {\n      returnString += element\n    } else {\n      returnString += `${element} `\n    }\n  })\n  return returnString\n}\n\nconst sortNumbers12 = (numbers) => {\n  const numberArray = numbers.split(' ')\n  let returnString = ''\n  numberArray.forEach((element, index) => {\n    if(index === numberArray.length - 1) {\n      returnString += element\n    } else {\n      returnString += `${element} `\n    }\n  })\n  return"}
{"task_id": "JavaScript/20", "prompt": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let first = null;\n  let second = null;\n  let smallestDistance = Number.MAX_VALUE;\n  let currentDistance = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      currentDistance = Math.abs(numbers[i] - numbers[j]);\n      if (currentDistance < smallestDistance) {\n        first = numbers[i];\n        second = numbers[j];\n        smallestDistance = currentDistance;\n      }\n    }\n  }\n  return [first, second];\n}\n\nmodule.exports = findClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const length = numbers.length\n  const sum = numbers.reduce((a, b) => a + b, 0)\n  const result = []\n  let currSum = 0\n\n  for (let i = 0; i < length; i++) {\n    currSum += numbers[i]\n    result.push(currSum / sum)\n  }\n  return result\n}\n\n/* Given list of numbers, will return an array of the mean of the numbers\n  >>> mean([1, 2, 3, 4, 5])\n  3.0\n  */\nconst mean = (numbers) => {\n  const length = numbers.length\n  const sum = numbers.reduce((a, b) => a + b, 0)\n  return sum / length\n}\n\n/* Given list of numbers, will return the standard deviation of the numbers\n  >>> standardDeviation([1, 2, 3, 4, 5])\n  1.414213562373095\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers)\n  const squaredSum = numbers.reduce((a, b) => a + b, 0)\n  const variance = squaredSum / (numbers.length - 1)\n  return Math.sqrt(variance - mean * mean)\n}\n\n/* Given list of numbers, will return the variance of the numbers\n  >>> variance([1, 2, 3, 4, 5])\n  2.0\n  */\nconst variance = (numbers) => {\n  const squaredSum = numbers.reduce((a, b) => a + b, 0)\n  const mean = squaredSum / numbers.length\n  return squaredSum / (numbers.length - 1) - mean * mean\n}\n\n/* Given list of numbers, will return the skewness of the numbers\n  >>> skewness([1, 2, 3, 4, 5])\n  0.0\n  */\nconst skewness = (numbers) => {\n  const mean = mean(numbers)\n  const squaredSum = numbers.reduce((a, b) => a + b, 0)\n  const variance = squaredSum / (numbers.length - 1)\n  const standardDeviation = Math.sqrt(variance)\n  const skewness = (numbers.length * squaredSum - mean * mean * numbers.length) / (standardDeviation * standardDeviation * (numbers.length - 1))\n  return skewness\n}\n\n/* Given list of numbers, will return the kurtosis of the numbers\n  >>> kurtosis([1, 2, 3, 4, 5])\n  0.0\n  */\nconst kurtosis = (numbers) => {\n  const mean = mean(numbers)\n  const squaredSum = numbers.reduce((a, b) => a + b, 0)\n  const variance = squaredSum / (numbers.length - 1)\n  const standardDeviation = Math.sqrt(variance)\n  const kurtosis = (numbers.length * squaredSum - mean * mean * numbers.length) / (standardDeviation * standardDeviation * (numbers.length - 1))\n  return kurtosis\n}\n\nmodule.exports = {\n  rescaleToUnit,\n  mean,\n  standardDeviation,\n  variance,\n  skewness,\n  kurtosis\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  if (!values ||!values.length) {\n    return [];\n  }\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/* Filter will give list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  []\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterStrings = (values) => {\n  if (!values ||!values.length) {\n    return [];\n  }\n  return values.filter(v => typeof v ==='string');\n};\n\n/*\n  >>> filterStrings(['a', 3.14, 5])\n  []\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNonStrings = (values) => {\n  if (!values ||!values.length) {\n    return [];\n  }\n  return values.filter(v => typeof v ==='string');\n};\n\n/* Filter will give list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  []\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterBooleans = (values) => {\n  if (!values ||!values.length) {\n    return [];\n  }\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/*\n  >>> filterBooleans(['a', 3.14, 5])\n  []\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNonBooleans = (values) => {\n  if (!values ||!values.length) {\n    return [];\n  }\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/* Filter will give list of any python values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  []\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterLists = (values) => {\n  if (!values ||!values.length) {\n    return [];\n  }\n  return values.filter(v => typeof v === 'object' && v instanceof Array);\n};\n\n/* Filter will give list of any python values only for dictionaries\n  >>> filterDictionaries(['a', 3.14, 5])\n  []\n  >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterDictionaries = (values) => {\n  if (!values ||!values.length) {\n    return [];\n  }\n  return values.filter(v => typeof v === 'object' &&!(v instanceof Array));\n};\n\n/*\n  >>> filterDictionaries(['a', 3.14, 5])\n  []\n  >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNonDictionaries = (values) => {\n  if (!values ||!values.length) {\n    return [];\n  }\n  return values.filter(v => typeof v === 'object' && v instanceof Array);\n};\n\n/*\n  >>> filterNonDictionaries(['a', 3.14, 5])\n  []\n  >>> filterNonDictionaries([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNonValues = (values) => {\n  if (!values ||!values.length) {\n    return [];\n  }\n  return values.filter(v => typeof v === 'object');\n};\n\nmodule.exports = {\n  filterIntegers,\n  filterStrings,\n  filterNonStrings,\n  filterBooleans,\n  filterNonBooleans,\n  filterLists,\n  filterNonLists,\n  filterDictionaries,\n  filterNonDictionaries,\n  filterNonValues\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let i = 0, len = 0;\n\n  while (string.charAt(i)!== '\\0') {\n    len++;\n    i++;\n  }\n\n  return len;\n};\n\nmodule.exports = strlen;\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  if (n <= 0) return 0;\n  const d = Math.ceil(Math.sqrt(n));\n  let count = 0;\n  for (let i = 1; i < d; i++) {\n    if (n % i === 0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\n/*\n  >>> largestDivisor(5)\n  1\n  >>> largestDivisor(6)\n  2\n  >>> largestDivisor(7)\n  3\n  >>> largestDivisor(8)\n  4\n  >>> largestDivisor(9)\n  5\n  >>> largestDivisor(10)\n  6\n  >>> largestDivisor(11)\n  7\n  >>> largestDivisor(12)\n  8\n  >>> largestDivisor(13)\n  9\n  >>> largestDivisor(14)\n  10\n  >>> largestDivisor(15)\n  11\n  >>> largestDivisor(16)\n  12\n  >>> largestDivisor(17)\n  13\n  >>> largestDivisor(18)\n  14\n  >>> largestDivisor(19)\n  15\n  >>> largestDivisor(20)\n  16\n  >>> largestDivisor(21)\n  17\n  >>> largestDivisor(22)\n  18\n  >>> largestDivisor(23)\n  19\n  >>> largestDivisor(24)\n  20\n  >>> largestDivisor(25)\n  21\n  >>> largestDivisor(26)\n  22\n  >>> largestDivisor(27)\n  23\n  >>> largestDivisor(28)\n  24\n  >>> largestDivisor(29)\n  25\n  >>> largestDivisor(30)\n  26\n  >>> largestDivisor(31)\n  27\n  >>> largestDivisor(32)\n  28\n  >>> largestDivisor(33)\n  29\n  >>> largestDivisor(34)\n  30\n  >>> largestDivisor(35)\n  31\n  >>> largestDivisor(36)\n  32\n  >>> largestDivisor(37)\n  33\n  >>> largestDivisor(38)\n  34\n  >>> largestDivisor(39)\n  35\n  >>> largestDivisor(40)\n  36\n  >>> largestDivisor(41)\n  37\n  >>> largestDivisor(42)\n  38\n  >>> largestDivisor(43)\n  39\n  >>> largestDivisor(44)\n  40\n  >>> largestDivisor(45)\n  41\n  >>> largestDivisor(46)\n  42\n  >>> largestDivisor(47)\n  43\n  >>> largestDivisor(48)\n  44\n  >>> largestDivisor(49)\n  45\n  >>> largestDivisor(50)\n  46\n  >>> largestDivisor(51)\n  47\n  >>> largestDivisor(52)\n  48\n  >>> largestDivisor(53)\n  49\n  >>> largestDivisor(54)\n  50\n  >>> largestDivisor(55)\n  51\n  >>> largestDivisor(56)\n  52\n  >>> largestDivisor(57)\n  53\n  >>> largestDivisor(58)\n  54\n  >>> largestDivisor(59)\n  55\n  >>> largestDivisor(60)\n  56\n  >>> largestDivisor(61)\n  57\n  >>> largestDivisor(62)\n  58\n  >>> largestDivisor(63)\n  59\n  >>> largestDivisor(64)\n  60\n  >>> largestDivisor(65)\n  61\n  >>> largestDivisor(66)\n  62\n  >>> largestDivisor(67)\n  63\n  >>> largestDivisor(68)\n  64\n  >>> largestDivisor(69)\n  65\n  >>> largestDivisor(70)\n  66\n  >>> largestDivisor(71)\n  67\n  >>> largestDivisor(72)\n  68\n  >>> largestDivisor(73)\n  69\n  >>> largestDivisor(74)\n  70\n  >>> largestDivisor(75)\n  71\n  >>> largestDivisor(76)\n  72\n  >>> largestDivisor(77)\n  73\n  >>> largestDivisor(78)\n  74\n  >>> largestDivisor(79)\n  75\n  >>> largestDivisor(80)\n  76\n  >>> largestDivisor(81)\n  77\n  >>> largestDivisor(82)\n  78\n  >>> largestDivisor(83)\n  79\n  >>> largestDivisor(84)\n  80\n  >>> largestDivisor(85)\n  81\n  >>> largestDivisor(86)\n  82\n  >>> largestDivisor(87)\n  83\n  >>> largestDivisor(88)\n  84\n  >>> largestDivisor(89)\n  85\n  >>> largestDivisor(90)\n  86\n  >>> largestDivisor(91)\n  87\n  >>> largestDivisor(92)\n  88\n  >>> largestDivisor(93)\n  89\n  >>> largestDivisor(94)\n  90\n  >>> largestDivisor(95)\n  91\n  >>> largestDivisor(96)\n  92\n  >>> largestDivisor(97)\n  93\n  >>> largestDivisor(98)\n  94\n  >>> largestDivisor(99)\n  95\n  >>> largestDivisor(100)\n  96\n  >>> largestDivisor(101)\n  97\n  >>> largestDivisor(102)\n  98\n  >>> largestDivisor(103)\n  99\n  >>> largestDivisor(104)\n  100\n  >>> largestDivisor(105)\n  101\n  >>> largestDivisor(106)\n  102\n  >>> largestDivisor(107)\n  103\n  >>> largestDivisor(108)\n  104\n  >>> largestDivisor(109)\n  105\n  >>> largestDivisor(110)\n  106\n  >>> largestDivisor(111)\n  107\n  >>> largestDivisor(112)\n"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n    if (n === 1) {\n        return [];\n    }\n    let result = [n];\n    for (let i = 2; i < Math.sqrt(n); i++) {\n        while (n % i === 0) {\n            result.push(i);\n            n = n / i;\n        }\n    }\n    if (n > 1) {\n        result.push(n);\n    }\n    return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let sorted = sortedList(numbers)\n  let newList = []\n  let index = 0\n  while (index < sorted.length) {\n    if (sorted[index]!== sorted[index + 1]) {\n      newList.push(sorted[index])\n    }\n    index += 1\n  }\n  return newList\n}\n\n/* \n   From a list of numbers, will sort the list and return the list in the order of \n   increasing value. \n   \n  >>> sortIncreasing([2, 3, 1])\n  [1, 2, 3]\n  */\nconst sortIncreasing = (numbers) => {\n  numbers.sort(function (a, b) {\n    return a - b\n  })\n  return numbers\n}\n\n/* \n   From a list of numbers, will sort the list and return the list in the order of \n   decreasing value. \n   \n  >>> sortDecreasing([3, 1, 2])\n  [1, 2, 3]\n  */\nconst sortDecreasing = (numbers) => {\n  numbers.sort(function (a, b) {\n    return b - a\n  })\n  return numbers\n}\n\n/* \n   From a list of strings, will sort the list and return the list in the order of \n   increasing value. \n   \n  >>> sortIncreasingStrings([3, 1, 2])\n  [1, 2, 3]\n  */\nconst sortIncreasingStrings = (numbers) => {\n  numbers.sort()\n  return numbers\n}\n\n/* \n   From a list of strings, will sort the list and return the list in the order of \n   decreasing value. \n   \n  >>> sortDecreasingStrings([2, 1, 3])\n  [1, 2, 3]\n  */\nconst sortDecreasingStrings = (numbers) => {\n  numbers.sort()\n  return numbers\n}\n\n/* \n   Given a sorted list, will find the first number which is equal to the \n   searchNumber, and return its index.\n   \n  >>> search([2, 3, 1], 2)\n  2\n  */\nconst search = (numbers, searchNumber) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === searchNumber) {\n      return i\n    }\n  }\n}\n\n/* \n   Given a sorted list, will find the first number which is equal to the \n   searchNumber, and return its index.\n   \n  >>> searchStrings([2, 3, 1], 2)\n  2\n  */\nconst searchStrings = (numbers, searchNumber) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === searchNumber) {\n      return i\n    }\n  }\n}\n\n/* \n   Given a sorted list, will return the last number.\n   \n  >>> last([1, 2, 3])\n  3\n  */\nconst last = (numbers) => {\n  return numbers[numbers.length - 1]\n}\n\n/* \n   Given a sorted list, will return the last number.\n   \n  >>> lastStrings([2, 3, 1])\n  3\n  */\nconst lastStrings = (numbers) => {\n  return numbers[numbers.length - 1]\n}\n\n/* \n   Given a sorted list, will return the last index.\n   \n  >>> lastIndex([1, 2, 3])\n  2\n  */\nconst lastIndex = (numbers) => {\n  return numbers.length - 1\n}\n\n/* \n   Given a sorted list, will return the last index.\n   \n  >>> lastIndexStrings([2, 3, 1])\n  2\n  */\nconst lastIndexStrings = (numbers) => {\n  return numbers.length - 1\n}\n\n/* \n   Given a sorted list, will return the second last index.\n   \n  >>> secondLastIndex([1, 2, 3])\n  1\n  */\nconst secondLastIndex = (numbers) => {\n  return numbers.length - 2\n}\n\n/* \n   Given a sorted list, will return the second last index.\n   \n  >>> secondLastIndexStrings([2, 3, 1])\n  1\n  */\nconst secondLastIndexStrings = (numbers) => {\n  return numbers.length - 2\n}\n\n/* \n   Given a sorted list, will return the first index.\n   \n  >>> firstIndex([1, 2, 3])\n  0\n  */\nconst firstIndex = (numbers) => {\n  return 0\n}\n\n/* \n   Given a sorted list, will return the first index.\n   \n  >>> firstIndexStrings([2, 3, 1])\n  0\n  */\nconst firstIndexStrings = (numbers) => {\n  return 0\n}\n\n/* \n   Given a sorted list, will return the first number.\n   \n  >>> firstNumber([1, 2, 3])\n  1\n  */\nconst firstNumber = (numbers) => {\n  return numbers[0]\n}\n\n/* \n   Given a sorted list, will return the first number.\n   \n  >>> firstNumberStrings([2, 3, 1])\n  1\n  */\nconst firstNumberStrings = (numbers) => {\n  return numbers[0]\n}\n\n/* \n   Given a sorted list, will return the last number.\n   \n  >>> lastNumber([1, 2, 3])\n  3\n  */\nconst lastNumber = (numbers) => {\n  return numbers[numbers.length - 1]\n}\n\n/* \n   Given a sorted list, will return the last number.\n   \n  >>> lastNumberStrings([2, 3, 1])\n  3\n  */\nconst lastNumberStrings = (numbers) => {\n  return numbers[numbers.length - 1]\n}\n\n/* \n   Given a sorted list, will return the second last number.\n   \n  >>> secondLastNumber([1, 2, 3])\n  2\n  */\nconst secondLastNumber = (n"}
{"task_id": "JavaScript/27", "prompt": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  const regex = /[a-z]/;\n  let newString = string.toUpperCase();\n  for (let i = 0; i < newString.length; i++) {\n    if (regex.test(newString[i])) {\n      newString = newString[i].toLowerCase() + newString[i].slice(1);\n    }\n  }\n  return newString;\n};\n\n/**\n  * Check if string contains only numbers\n  * @param {string} string\n  * @returns {boolean}\n  */\nconst isNum = (string) => {\n  const regex = /[0-9]/;\n  return regex.test(string);\n};\n\n/**\n  * Convert to integer\n  * @param {string} string\n  * @returns {number}\n  */\nconst toInt = (string) => {\n  return parseInt(string);\n};\n\n/**\n  * Convert to float\n  * @param {string} string\n  * @returns {number}\n  */\nconst toFloat = (string) => {\n  return parseFloat(string);\n};\n\n/**\n  * @param {string} string\n  * @returns {boolean}\n  */\nconst isCapitalized = (string) => {\n  return string.charAt(0).toUpperCase() === string.charAt(0);\n};\n\n/**\n  * @param {string} string\n  * @returns {string}\n  */\nconst trim = (string) => {\n  return string.trim();\n};\n\n/**\n  * @param {string} string\n  * @returns {string}\n  */\nconst camelCase = (string) => {\n  return string.replace(/\\s+/g, '').replace(/([A-Z])/g,'$1').replace(/^[\\d]/g, '_').replace(/[\\d]/g, '_');\n};\n\n/**\n  * @param {string} string\n  * @returns {string}\n  */\nconst splitToWords = (string) => {\n  const regex = /[^a-z]/;\n  const words = string.split(regex);\n  return words.map(word => {\n    return word.toLowerCase();\n  });\n};\n\n/**\n  * @param {string} string\n  * @returns {string}\n  */\nconst joinWords = (string) => {\n  return string.split(' ').join('_');\n};\n\n/**\n  * @param {string} string\n  * @returns {string}\n  */\nconst splitSentence = (string) => {\n  const regex = /[.,!;:?]/;\n  const sentences = string.split(regex);\n  return sentences.map(sentence => {\n    return sentence.trim();\n  });\n};\n\n/**\n  * @param {string} string\n  * @returns {string}\n  */\nconst joinSentences = (string) => {\n  return string.split(' ').join(', ');\n};\n\n/**\n  * @param {string} string\n  * @returns {string}\n  */\nconst splitByDots = (string) => {\n  const regex = /[.,!;:?]/;\n  const words = string.split(regex);\n  return words.map(word => {\n    return word.trim();\n  });\n};\n\n/**\n  * @param {string} string\n  * @returns {string}\n  */\nconst joinByDots = (string) => {\n  return string.split(' ').join(', ');\n};\n\n/**\n  * @param {string} string\n  * @returns {string}\n  */\nconst splitNumbers = (string) => {\n  const regex = /[0-9]+/;\n  const numbers = string.split(regex);\n  return numbers.map(number => {\n    return number.trim();\n  });\n};\n\n/**\n  * @param {string} string\n  * @returns {string}\n  */\nconst joinNumbers = (string) => {\n  return string.split(' ').join(', ');\n};\n\n/**\n  * @param {string} string\n  * @returns {string}\n  */\nconst getLength = (string) => {\n  return string.length;\n};\n\n/**\n  * @param {string} string\n  * @returns {string}\n  */\nconst getUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n  * @param {string} string\n  * @returns {string}\n  */\nconst getLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  * @param {string} string\n  * @returns {string}\n  */\nconst getCapitalized = (string) => {\n  if (isCapitalized(string)) {\n    return string;\n  }\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n  * @param {string} string\n  * @returns {string}\n  */\nconst getFirst = (string) => {\n  return string.charAt(0);\n};\n\n/**\n  * @param {string} string\n  * @returns {string}\n  */\nconst getLast = (string) => {\n  return string.slice(string.length - 1);\n};\n\n/**\n  * @param {string} string\n  * @returns {string}\n  */\nconst getFirstWord = (string) => {\n  const regex = /[a-z]+/;\n  const words = string.split(regex);\n  return words[0];\n};\n\nmodule.exports = {\n  flipCase,\n  isNum,\n  toInt,\n  toFloat,\n  isCapitalized,\n  trim,\n  camelCase,\n  splitToWords,\n  joinWords,\n  splitSentence,\n  joinSentences,\n  splitByDots,\n  joinByDots,\n  splitNumbers,\n  joinNumbers,\n  getLength,\n  "}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  const res = [];\n  for (let i = 0; i < strings.length; i++) {\n    res.push(strings[i]);\n  }\n  return res.join('');\n};\n\n/* Convert a string into an array of its characters */\nconst chars = (s) => {\n  return s.split('');\n};\n\n/* Count the number of characters in a string */\nconst length = (s) => {\n  return chars(s).length;\n};\n\n/* Get character at a given position in a string */\nconst charAt = (s, i) => {\n  return chars(s)[i];\n};\n\n/* Check if a string is a palindrome */\nconst palindrome = (s) => {\n  let reversed = reverse(chars(s));\n  return concatenate(reversed).slice(0, -1) === s;\n};\n\n/* Converts a string into a reverse string */\nconst reverse = (s) => {\n  const arr = chars(s);\n  const rev = [];\n  for (let i = arr.length - 1; i >= 0; i--) {\n    rev.push(arr[i]);\n  }\n  return rev.join('');\n};\n\n/* Return the character in a string at a given position */\nconst charAtPosition = (s, i) => {\n  return chars(s)[i];\n};\n\n/* Return the first character of a string */\nconst firstChar = (s) => {\n  return chars(s)[0];\n};\n\n/* Return the last character of a string */\nconst lastChar = (s) => {\n  return chars(s)[chars(s).length - 1];\n};\n\n/* Return the next character after a given character */\nconst nextChar = (c) => {\n  const chars = chars(c);\n  return chars[chars.indexOf(c) + 1];\n};\n\n/* Return the previous character before a given character */\nconst prevChar = (c) => {\n  const chars = chars(c);\n  return chars[chars.indexOf(c) - 1];\n};\n\n/* Return the index of a character in a string */\nconst indexOf = (s, c) => {\n  return chars(s).indexOf(c);\n};\n\n/* Return the number of occurrences of a character in a string */\nconst count = (s, c) => {\n  return chars(s).filter(c).length;\n};\n\n/* Return a random string */\nconst random = () => {\n  const chars = chars('');\n  let r = '';\n  while (r === '') {\n    r = chars[Math.floor(Math.random() * chars.length)];\n  }\n  return r;\n};\n\n/* Return a random character from a string */\nconst randomChar = (s) => {\n  return chars(s)[Math.floor(Math.random() * chars(s).length)];\n};\n\n/* Return a random number */\nconst randomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n\n/* Return a random number from a list */\nconst randomFromList = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/* Return a random letter */\nconst randomLetter = () => {\n  return chars('')[Math.floor(Math.random() * chars('').length)];\n};\n\n/* Return a random letter from a string */\nconst randomLetterFrom = (s) => {\n  return chars(s)[Math.floor(Math.random() * chars(s).length)];\n};\n\n/* Return a random number */\nconst randomNumber = () => {\n  return Math.floor(Math.random() * 10);\n};\n\n/* Return a random number from a list */\nconst randomNumberFromList = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/* Return a random number */\nconst randomIntFromList = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/* Return a random number */\nconst randomIntFrom = (min, max) => {\n  return min + Math.floor(Math.random() * (max - min));\n};\n\n/* Return a random number */\nconst randomFloat = () => {\n  return Math.random();\n};\n\n/* Return a random boolean */\nconst randomBoolean = () => {\n  return Math.random() < 0.5? false : true;\n};\n\n/* Return a random number */\nconst randomFloatFromList = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/* Return a random number */\nconst randomFloatFrom = (min, max) => {\n  return min + Math.floor(Math.random() * (max - min));\n};\n\n/* Return a random boolean */\nconst randomBooleanFrom = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/* Return a random number */\nconst randomIntFrom = (min, max) => {\n  return min + Math.floor(Math.random() * (max - min));\n};\n\n/* Return a random number */\nconst randomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n\n/* Return a random number */\nconst randomFloat = (min, max) => {\n  return min + Math.random() * (max - min);\n};\n\n/* Return a random number */\nconst randomFloatFrom = (min, max) => {\n  return min + Math.random() * (max - min);\n};\n\n/* Return a random number */\nconst randomIntFrom = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n\n/* Return a random number */\nconst randomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n\n/* Return a random number */\nconst randomInt = (min, max) => {\n  return Math."}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = strings.filter(x => x.startsWith(prefix))\n  return filtered\n}\n\n/* Filter an input list of strings only for ones that do not start with a will give suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde', 'array']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  const filtered = strings.filter(x =>!x.startsWith(suffix))\n  return filtered\n}\n\n/* Filter an input list of strings only for ones that contain the given string.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByContains = (strings, contains) => {\n  const filtered = strings.filter(x => x.includes(contains))\n  return filtered\n}\n\n/* Filter an input list of strings only for ones that do not contain the given string.\n  >>> filterByNotContains([], 'a')\n  []\n  >>> filterByNotContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByNotContains = (strings, contains) => {\n  const filtered = strings.filter(x =>!x.includes(contains))\n  return filtered\n}\n\n/* Filter an input list of strings only for ones that have the given regular expression.\n  >>> filterByRegExp([], /a/i)\n  []\n  >>> filterByRegExp(['abc', 'bcd', 'cde', 'array'], /a/i)\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByRegExp = (strings, regex) => {\n  const filtered = strings.filter(x => x.match(regex))\n  return filtered\n}\n\n/* Filter an input list of strings only for ones that do not have the given regular expression.\n  >>> filterByNotRegExp([], /a/i)\n  []\n  >>> filterByNotRegExp(['abc', 'bcd', 'cde', 'array'], /a/i)\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByNotRegExp = (strings, regex) => {\n  const filtered = strings.filter(x =>!x.match(regex))\n  return filtered\n}\n\n/* Filter an input list of strings only for ones that have the given regular expression,\n  and that are contained in the given string.\n  >>> filterByRegExpContains([], /a/i, 'a')\n  []\n  >>> filterByRegExpContains(['abc', 'bcd', 'cde', 'array'], /a/i, 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByRegExpContains = (strings, regex, contains) => {\n  const filtered = strings.filter(x => x.match(regex) && x.includes(contains))\n  return filtered\n}\n\n/* Filter an input list of strings only for ones that do not have the given regular expression,\n  and that are contained in the given string.\n  >>> filterByNotRegExpContains([], /a/i, 'a')\n  []\n  >>> filterByNotRegExpContains(['abc', 'bcd', 'cde', 'array'], /a/i, 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByNotRegExpContains = (strings, regex, contains) => {\n  const filtered = strings.filter(x =>!x.match(regex) && x.includes(contains))\n  return filtered\n}\n\n/* Filter an input list of strings only for ones that have the given regular expression,\n  and that are not contained in the given string.\n  >>> filterByRegExpNotContains([], /a/i, 'a')\n  []\n  >>> filterByRegExpNotContains(['abc', 'bcd', 'cde', 'array'], /a/i, 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByRegExpNotContains = (strings, regex, contains) => {\n  const filtered = strings.filter(x => x.match(regex) &&!x.includes(contains))\n  return filtered\n}\n\n/* Filter an input list of strings only for ones that do not have the given regular expression,\n  and that are not contained in the given string.\n  >>> filterByNotRegExpNotContains([], /a/i, 'a')\n  []\n  >>> filterByNotRegExpNotContains(['abc', 'bcd', 'cde', 'array'], /a/i, 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByNotRegExpNotContains = (strings, regex, contains) => {\n  const filtered = strings.filter(x =>!x.match(regex) &&!x.includes(contains))\n  return filtered\n}\n\n/* Filter an input list of strings only for ones that match the given regular expression.\n  >>> filterByRegExpMatch([], /a/i)\n  []\n  >>> filterByRegExpMatch(['abc', 'bcd', 'cde', 'array'], /a/i)\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByRegExpMatch = (strings, regex) => {\n  const filtered = strings.filter(x => x.match(regex))\n  return filtered\n}\n\n/* Filter an input list of strings only for ones that do not match the given regular expression.\n  >>> filterByNotRegExpMatch([], /a/i)\n  []\n  >>> filterByNotRegExpMatch(['abc', 'b"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const a = Array.from(l)\n  const sorted = a.sort()\n  const res = []\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] > 0) {\n      res.push(sorted[i])\n    }\n  }\n  return res\n}\n\nexport {getPositive}\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  const max = (Math.floor(Math.sqrt(n)) + 1)\n  for (let i = 3; i <= max; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*\n  Find the smallest number that has exactly ten divisors\n  >>> findNth(1)\n  2\n  >>> findNth(2)\n  4\n  >>> findNth(3)\n  6\n  >>> findNth(4)\n  8\n  >>> findNth(5)\n  10\n  >>> findNth(6)\n  12\n  >>> findNth(7)\n  14\n  >>> findNth(8)\n  16\n  >>> findNth(9)\n  18\n  >>> findNth(10)\n  20\n  >>> findNth(11)\n  22\n  >>> findNth(12)\n  24\n  >>> findNth(13)\n  26\n  >>> findNth(14)\n  28\n  >>> findNth(15)\n  30\n  >>> findNth(16)\n  32\n  >>> findNth(17)\n  34\n  >>> findNth(18)\n  36\n  >>> findNth(19)\n  38\n  >>> findNth(20)\n  40\n  >>> findNth(21)\n  42\n  >>> findNth(22)\n  44\n  >>> findNth(23)\n  46\n  >>> findNth(24)\n  48\n  >>> findNth(25)\n  50\n  >>> findNth(26)\n  52\n  >>> findNth(27)\n  54\n  >>> findNth(28)\n  56\n  >>> findNth(29)\n  58\n  >>> findNth(30)\n  60\n  >>> findNth(31)\n  62\n  >>> findNth(32)\n  64\n  >>> findNth(33)\n  66\n  >>> findNth(34)\n  68\n  >>> findNth(35)\n  70\n  >>> findNth(36)\n  72\n  >>> findNth(37)\n  74\n  >>> findNth(38)\n  76\n  >>> findNth(39)\n  78\n  >>> findNth(40)\n  80\n  >>> findNth(41)\n  82\n  >>> findNth(42)\n  84\n  >>> findNth(43)\n  86\n  >>> findNth(44)\n  88\n  >>> findNth(45)\n  90\n  >>> findNth(46)\n  92\n  >>> findNth(47)\n  94\n  >>> findNth(48)\n  96\n  >>> findNth(49)\n  98\n  >>> findNth(50)\n  100\n  >>> findNth(51)\n  102\n  >>> findNth(52)\n  104\n  >>> findNth(53)\n  106\n  >>> findNth(54)\n  108\n  >>> findNth(55)\n  110\n  >>> findNth(56)\n  112\n  >>> findNth(57)\n  114\n  >>> findNth(58)\n  116\n  >>> findNth(59)\n  118\n  >>> findNth(60)\n  120\n  >>> findNth(61)\n  122\n  >>> findNth(62)\n  124\n  >>> findNth(63)\n  126\n  >>> findNth(64)\n  128\n  >>> findNth(65)\n  130\n  >>> findNth(66)\n  132\n  >>> findNth(67)\n  134\n  >>> findNth(68)\n  136\n  >>> findNth(69)\n  138\n  >>> findNth(70)\n  140\n  >>> findNth(71)\n  142\n  >>> findNth(72)\n  144\n  >>> findNth(73)\n  146\n  >>> findNth(74)\n  148\n  >>> findNth(75)\n  150\n  >>> findNth(76)\n  152\n  >>> findNth(77)\n  154\n  >>> findNth(78)\n  156\n  >>> findNth(79)\n  158\n  >>> findNth(80)\n  160\n  >>> findNth(81)\n  162\n  >>> findNth(82)\n  164\n  >>> findNth(83)\n  166\n  >>> findNth(84)\n  168\n  >>> findNth(85)\n  170\n  >>> findNth(86)\n  172\n  >>> findNth(87)\n  174\n  >>> findNth(88)\n  176\n  >>> findNth(89)\n  178\n  >>> findNth(90)\n  180\n  >>> findNth(91)\n  182\n  >>> findNth(92)\n  184\n  >>> findNth(93)\n  186\n  >>> findNth(94)\n  188\n  >>> findNth(95)\n  190\n  >>> findNth(96)\n  192\n  >>> findNth(97)\n  194\n  >>> findNth(98)\n  196\n  >>> findNth(99)\n  198\n  >>> findNth(100)\n  200\n  >>> findNth(101)\n  202\n  >>> findNth(102)\n  204\n  >>> findNth(103)\n  206\n  >>> findNth(104)\n  208\n  >>> findNth(105)\n  210\n  >>> findNth(106)\n  212\n  >>> findNth(107)\n  214\n  >>> findNth(108)\n  216\n  >>> findNth(109)\n  218\n  >>> findNth(110)\n  220\n  "}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  if(len % 2 === 0) {\n    const half = len/2;\n    const xsCopy = xs.slice(0, half);\n    const sum = xsCopy.reduce((prev, item, index) => {\n      return prev + item*Math.pow(xsCopy[index], half);\n    }, 0);\n    const x = (sum + xs[half]) / (1 - xs[half]);\n    return x;\n  }\n  else {\n    return null;\n  }\n}\n\n/*\n  Given a list xs of coefficients of polynomial, return\n  polynomial's zero point.\n  */\nconst zeroPoint = (xs) => {\n  return findZero(xs);\n}\n\n// --------------------------------------------------------\n\n// -----------Testing--------------------\n\nconst findZero_test = [\n  [\n    [-6, 11, -6, 1],\n    (-6 + 11*1 - 6*Math.pow(1, 2) + 1*Math.pow(1, 3))/ (1 - 1*1 - 1*Math.pow(1, 2) - 1*Math.pow(1, 3))\n  ],\n  [\n    [1, 2, 3, 4],\n    (1*1 + 2*2 + 3*3 + 4*4)/(1*1 + 2*2 + 3*3 + 4*4)\n  ],\n  [\n    [1, 2, 3, 4],\n    (-1*1 + 2*2 + 3*3 + 4*4)/(-1*1 + 2*2 + 3*3 + 4*4)\n  ],\n  [\n    [-6, 11, -6, 1],\n    (1*1 + 2*2 + 3*3 + 4*4)/(1*1 + 2*2 + 3*3 + 4*4)\n  ],\n  [\n    [1, 2, 3, 4],\n    (1*1 + 2*2 + 3*3 + 4*4)/(-1*1 + 2*2 + 3*3 + 4*4)\n  ],\n  [\n    [1, 2, 3, 4],\n    (-1*1 + 2*2 + 3*3 + 4*4)/(1*1 + 2*2 + 3*3 + 4*4)\n  ],\n  [\n    [-6, 11, -6, 1],\n    (1*1 + 2*2 + 3*3 + 4*4)/(1*1 + 2*2 + 3*3 + 4*4)\n  ],\n  [\n    [1, 2, 3, 4],\n    (1*1 + 2*2 + 3*3 + 4*4)/(-1*1 + 2*2 + 3*3 + 4*4)\n  ],\n  [\n    [1, 2, 3, 4],\n    (-1*1 + 2*2 + 3*3 + 4*4)/(1*1 + 2*2 + 3*3 + 4*4)\n  ],\n  [\n    [-6, 11, -6, 1],\n    (1*1 + 2*2 + 3*3 + 4*4)/(1*1 + 2*2 + 3*3 + 4*4)\n  ],\n  [\n    [1, 2, 3, 4],\n    (-1*1 + 2*2 + 3*3 + 4*4)/(-1*1 + 2*2 + 3*3 + 4*4)\n  ]\n]\n\nconst zeroPoint_test = [\n  [\n    [-6, 11, -6, 1],\n    (1*1 + 2*2 + 3*3 + 4*4)/(1*1 + 2*2 + 3*3 + 4*4)\n  ],\n  [\n    [1, 2, 3, 4],\n    (1*1 + 2*2 + 3*3 + 4*4)/(-1*1 + 2*2 + 3*3 + 4*4)\n  ],\n  [\n    [1, 2, 3, 4],\n    (1*1 + 2*2 + 3*3 + 4*4)/(1*1 + 2*2 + 3*3 + 4*4)\n  ],\n  [\n    [-6, 11, -6, 1],\n    (1*1 + 2*2 + 3*3 + 4*4)/(1*1 + 2*2 + 3*3 + 4*4)\n  ],\n  [\n    [1, 2, 3, 4],\n    (1*1 + 2*2 + 3*3 + 4*4)/(-1*1 + 2*2 + 3*3 + 4*4)\n  ],\n  [\n    [1, 2, 3, 4],\n    (1*1 + 2*2 + 3*3 + 4*4)/(-1*1 + 2*2 + 3*3 + 4*4)\n  ],\n  [\n    [-6, 11, -6, 1],\n    (1*1 + 2*2 + 3*3 + 4*4)/(1*1 + 2*2 + 3*3 + 4*4)\n  ],\n  [\n    [1, 2, 3, 4],\n    (1*1 + 2*2 + 3"}
{"task_id": "JavaScript/33", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const n = l.length;\n  const sort = [];\n  for (let i = 0; i < n; i++) {\n    sort[i] = l[i];\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (l[i] % 3 === 0 && l[j] % 3 === 0) {\n        if (l[i] === l[j]) {\n          sort[i] = sort[j];\n        } else {\n          sort[i] = l[i];\n          sort[j] = l[j];\n        }\n      }\n    }\n  }\n  return sort;\n};\n\nconsole.log(sortThird([5, 6, 3, 4, 8, 9, 2]));\n\n/*\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\n\n// BEGIN KAWIGIEDIT TESTING\n// Generated by KawigiEdit-pf 2.3.0\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\nusing namespace std;\nbool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {\n\tcout << \"Test \" << testNum << \": [\" << p0.size() << \" elements]\" << endl;\n\tcout << \"Has answer:\" << hasAnswer << endl;\n\tcout << \"Result: \" << p1 << endl;\n\tvector <int> answer;\n\tsrand(time(NULL));\n\t{\n\t\t// Random shuffling\n\t\tvector<int> copy = p0;\n\t\tfor (int i = 0; i < copy.size(); i++) {\n\t\t\tint randomIndex = rand() % copy.size();\n\t\t\tswap(copy[i], copy[randomIndex]);\n\t\t}\n\t}\n\tif (hasAnswer) {\n\t\tcout << \"Checking your answer:\" << endl;\n\t\tsortThird(p0);\n\t\tcout << \"Desired answer:\" << endl;\n\t\tsortThird(answer);\n\t\tif (answer == p0) {\n\t\t\tcout << \"You guys are right!\" << endl;\n\t\t\treturn true;\n\t\t}\n\t}\n\tcout << \"Your answer:\" << endl;\n\tsortThird(p0);\n\tcout << \"Desired answer:\" << endl;\n\tsortThird(answer);\n\tif (answer == p0) {\n\t\tcout << \"You guys are right!\" << endl;\n\t\treturn true;\n\t}\n\treturn false;\n}\nint main(int argc, char *argv[]) {\n\tbool all_right;\n\tbool disabled;\n\tbool tests_disabled;\n\tall_right = true;\n\ttests_disabled = false;\n\t\n\tvector <int> p0;\n\tint p1;\n\t\n\t// ----- test 0 -----\n\tdisabled = false;\n\tp0 = {5,6,3,4,8,9,2};\n\tp1 = 2;\n\tall_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\t// ----- test 1 -----\n\tdisabled = false;\n\tp0 = {5,6,3,4,8,9,2};\n\tp1 = 2;\n\tall_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\t// ----- test 2 -----\n\tdisabled = false;\n\tp0 = {5,6,3,4,8,9,2};\n\tp1 = 4;\n\tall_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\tif (all_right) {\n\t\tif (tests_disabled) {\n\t\t\tcout << \"You're a stud (but some test cases were disabled)!\" << endl;\n\t\t} else {\n\t\t\tcout << \"You're a stud (at least on given cases)!\" << endl;\n\t\t}\n\t} else {\n\t\tcout << \"Some of the test cases had errors.\" << endl;\n\t}\n\treturn 0;\n}\n// END KAWIGIEDIT TESTING\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const seen = new Set();\n  return l.filter(v => seen.add(v));\n};\n\n/*\n  >>> unique(['a', 'b', 'a', 'c'])\n  ['a', 'b', 'c']\n  >>> unique([1,2,3,2,1])\n  [1, 2, 3]\n  >>> unique([1,2,3,2,1,1,1,2])\n  [1, 2, 3]\n  */\nconst uniqueBy = (l, v) => {\n  const seen = new Map();\n  return l.filter(v => seen.get(v)? false : seen.set(v, true));\n};\n\n/*\n  >>> uniqueBy(['a', 'b', 'a', 'c'], 'a')\n  ['a', 'b', 'c']\n  >>> uniqueBy([1,2,3,2,1], 1)\n  [1, 2, 3]\n  >>> uniqueBy([1,2,3,2,1,1,1,2], 1)\n  [1, 2, 3]\n  */\nconst uniq = (l) => {\n  return l.slice().sort().filter(e => e!== l[l.length - 1]);\n};\n\n/*\n  >>> uniq([3,2,3,2,1,2,3,2,1,3])\n  [3, 2, 1]\n  >>> uniq([1,2,3,2,1,1,1,2,3,3])\n  [1, 2, 3]\n  >>> uniq([1,2,3,2,1,1,1,2,3,3,3])\n  [1, 2, 3]\n  >>> uniq([3,2,3,2,1,2,3,2,1,3,3])\n  [3, 2, 1]\n  */\nconst uniqBy = (l, v) => {\n  const seen = new Map();\n  const list = [];\n  for (const e of l) {\n    if (seen.get(v(e))) {\n      continue;\n    }\n    seen.set(v(e), true);\n    list.push(e);\n  }\n  return list;\n};\n\n/*\n  >>> uniqBy([3,2,3,2,1,2,3,2,1,3], 'a')\n  [3, 2, 1]\n  >>> uniqBy([1,2,3,2,1,1,1,2,3,3], 1)\n  [1, 2, 3]\n  >>> uniqBy([1,2,3,2,1,1,1,2,3,3,3], 1)\n  [1, 2, 3]\n  >>> uniqBy([3,2,3,2,1,2,3,2,1,3,3], 'a')\n  [3, 2, 1]\n  */\nconst uniqLast = (l) => {\n  const seen = new Set();\n  const list = [];\n  for (const e of l) {\n    if (seen.has(e)) {\n      continue;\n    }\n    seen.add(e);\n    list.push(e);\n  }\n  return list;\n};\n\n/*\n  >>> uniqLast([3,2,3,2,1,2,3,2,1,3,3])\n  [3, 2, 1]\n  >>> uniqLast([1,2,3,2,1,1,1,2,3,3,3,3])\n  [1, 2, 3]\n  >>> uniqLast([3,2,3,2,1,2,3,2,1,3,3,3,3])\n  [3, 2, 1]\n  */\nconst uniqLastBy = (l, v) => {\n  const seen = new Map();\n  const list = [];\n  for (const e of l) {\n    if (seen.has(v(e))) {\n      continue;\n    }\n    seen.set(v(e), true);\n    list.push(e);\n  }\n  return list;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  let minIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  let minIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  Returns the sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Returns the product of all elements in the list.\n  >>> product([1, 2, 3])\n  6\n  >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst product = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\nmodule.exports = {\n  maxElement,\n  minElement,\n  sum,\n  product\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n    for (let i = 1; i <= n; i++) {\n        if ((i % 11 == 0) || (i % 13 == 0)) {\n            console.log(i);\n        }\n    }\n}\n\n/*\n  * FizzBuzz implementation\n  * Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz2 = (n) => {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if ((i % 11 == 0) || (i % 13 == 0)) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  * Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz2(50)\n  0\n  >>> fizzBuzz2(78)\n  2\n  >>> fizzBuzz2(79)\n  3\n  */\nconst fizzBuzz3 = (n) => {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if ((i % 11 == 0) || (i % 13 == 0)) {\n            count++;\n        }\n    }\n    return count;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const odd = [];\n  const even = [];\n  const evenIndex = 0;\n  const oddIndex = 1;\n  const len = l.length;\n  for (let i = 0; i < len; i += 1) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\n// test\nsortEven([1, 2, 3]); // [1, 2, 3]\nsortEven([5, 6, 3, 4]); // [3, 6, 5, 4]\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n   } \n   for (const group of groups2){ \n     groups.push(s.slice(3* group.length- 1, 3* group.length));\n  } \n  return groups.join('');\n}\n\nmodule.exports= {\n  encodeCyclic,\n  decodeCyclic\n};\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  const max = (n - 1) * (n - 1) + 1;\n  let a = 1, b = 1;\n  let count = 0;\n\n  while (count < max) {\n    a = a + b;\n    if (a > n) {\n      b = a - b;\n      a = b;\n      count++;\n    }\n  }\n\n  return a;\n};\n\nconsole.log(primeFib(89));\n\n/*\n  primeFibPrime will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFibPrime(1)\n  2\n  >>> primeFibPrime(2)\n  3\n  >>> primeFibPrime(3)\n  5\n  >>> primeFibPrime(4)\n  13\n  >>> primeFibPrime(5)\n  89\n  */\nconst primeFibPrime = (n) => {\n  let a = 1, b = 1;\n  let count = 0;\n\n  while (count < n) {\n    a = a + b;\n    if (a > n) {\n      b = a - b;\n      a = b;\n      count++;\n    }\n  }\n\n  return a;\n};\n\nconsole.log(primeFibPrime(89));\n\n/*\n  primeFibPrime2 will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFibPrime2(1)\n  2\n  >>> primeFibPrime2(2)\n  3\n  >>> primeFibPrime2(3)\n  5\n  >>> primeFibPrime2(4)\n  13\n  >>> primeFibPrime2(5)\n  89\n  */\nconst primeFibPrime2 = (n) => {\n  let a = 1, b = 1;\n  let count = 0;\n\n  while (count < n) {\n    a = a + b;\n    if (a > n) {\n      b = a - b;\n      a = b;\n      count++;\n    }\n  }\n\n  return a;\n};\n\nconsole.log(primeFibPrime2(89));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  return new Set(l.map(x => [x, -x].sort().filter((a, b) => a === b)[0]))\n     .size === 3\n}\n\n/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be four distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  false\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1, 2, 3])\n  false\n  */\nconst fourSumToZero = (l) => {\n  return new Set(l.map(x => [x, -x].sort().filter((a, b) => a === b)[0]))\n     .size === 4\n}\n\n// tests\nconsole.log(triplesSumToZero([1, 3, 5, 0]))\nconsole.log(fourSumToZero([1, 3, -2, 1]))\nconsole.log(fourSumToZero([1, 2, 3, 7]))\nconsole.log(fourSumToZero([2, 4, -5, 3, 9, 7]))\nconsole.log(fourSumToZero([1, 2, 3]))\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n  //  Array of all car IDs that will be driving in parallel to the current set of n\n  const carSet= [];\n  for(let i=0; i<n; i++)\n    carSet[i]= i;\n  //  Array of the starting positions of all the cars\n  const carStart= [];\n  for(let i=0; i<n; i++)\n    carStart[i]= {x: -0.5, y: 0.5, v: 0.1};\n  //  Array of the ending positions of all the cars\n  const carEnd= [];\n  for(let i=0; i<n; i++)\n    carEnd[i]= {x: 0.5, y: 0.5, v: 0.1};\n\n  //  Array of all collisions that will be checked\n  const collisions= [];\n  for(let i=0; i<n; i++)\n    for(let j=0; j<n; j++)\n      if(carSet[i]!= carSet[j])\n        collisions[collisions.length]= carSet.indexOf(carSet[i])+carSet.indexOf(carSet[j]);\n  //  Array of all collisions that are in the list of collisions\n  const collisionsToCheck= collisions.filter(function(e){\n    return e<0;\n  });\n  //  Array of all collisions that are out of the list of collisions\n  const collisionsOut= collisions.filter(function(e){\n    return e<0;\n  });\n  //  Array of all collisions that are in the list of collisions and that have been checked before\n  const collisionsToCheck2= collisionsToCheck.filter(function(e){\n    return collisionsToCheck.indexOf(e)<0;\n  });\n  const collisionsOut2= collisionsToCheck.filter(function(e){\n    return collisionsToCheck.indexOf(e)<0;\n  });\n\n  //  Array of all collisions that are out of the list of collisions and that have been checked before\n  const collisionsOut3= collisionsOut2.filter(function(e){\n    return collisionsOut2.indexOf(e)<0;\n  });\n\n  //  Number of collisions that have been checked\n  let nCollisions= 0;\n  //  Number of collisions that have not been checked\n  let nCollisionsOut= 0;\n  //  Number of collisions that have not been checked and that are out of the list of collisions\n  let nCollisionsOut2= 0;\n  //  Number of collisions that have not been checked and that are in the list of collisions\n  let nCollisionsOut3= 0;\n\n  //  For every pair of cars that will collide\n  for(let i=0; i<n; i++)\n    for(let j=0; j<n; j++)\n      if(carSet[i]!= carSet[j]){\n        //  Check if the two cars are going to collide\n        if(carStart[i].x+carStart[i].v*1.5 >= carStart[j].x-carStart[j].v*1.5 && carStart[i].x-carStart[i].v*1.5 <= carStart[j].x+carStart[j].v*1.5 && carStart[i].y+carStart[i].v*1.5 >= carStart[j].y-carStart[j].v*1.5 && carStart[i].y-carStart[i].v*1.5 <= carStart[j].y+carStart[j].v*1.5){\n          //  If they are then check if they are going to collide\n          for(let k=0; k<collisionsToCheck2.length; k++)\n            if(carSet[collisionsToCheck2[k]]!= carSet[j]){\n              //  If they are then check if they are going to collide\n              if(carEnd[j].x+carEnd[j].v*1.5 >= carEnd[k].x-carEnd[k].v*1.5 && carEnd[j].x-carEnd[j].v*1.5 <= carEnd[k].x+carEnd[k].v*1.5 && carEnd[j].y+carEnd[j].v*1.5 >= carEnd[k].y-carEnd[k].v*1.5 && carEnd[j].y-carEnd[j].v*1.5 <= carEnd[k].y+carEnd[k].v*1.5){\n                //  If they are then add the collision to the list\n                collisions.push(carSet.indexOf(carSet[i])+carSet.indexOf(carSet[j]));\n                nCollisions++;\n                break;\n              }\n            }\n        }\n      }\n\n  for(let i=0; i<n; i++)\n    for(let j=0; j<n; j++)\n      if(carSet[i]!= carSet[j]){\n        //  Check if the two cars are going to collide\n        if(carStart[i].x+carStart[i].v*1.5 >= carStart[j].x-carStart[j].v*1.5 && carStart[i].x-carStart[i].v*1.5 <= carStart[j].x+carStart[j].v*1.5 && carStart[i].y+carStart[i].v*1.5 >= carStart[j].y-carStart[j].v*1.5 && carStart[i].y-carStart[i].v*1.5 <= carStart[j].y+carStart[j].v*1.5){\n          //  If they are then check if they are going to collide\n          for(let k=0; k<collisionsToCheck3.length; k++)\n            if"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  if (l.length === 0) {\n    return []\n  }\n  const incr = (v) => {\n    if (v === 0) {\n      return 1\n    }\n    return v + 1\n  }\n  return l.reduce((acc, v) => [...acc, incr(v)], [])\n}\n\n/**\n  * Return list with elements will decrement by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 3]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 5, 3, 4, 4, 9, 0, 123]\n  */\nconst decrList = (l) => {\n  if (l.length === 0) {\n    return []\n  }\n  const decr = (v) => {\n    if (v === 0) {\n      return -1\n    }\n    return v - 1\n  }\n  return l.reduce((acc, v) => [...acc, decr(v)], [])\n}\n\n/**\n  * Return list with elements will decrement by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  if (l.length === 0) {\n    return []\n  }\n  const incr = (v) => {\n    if (v === 0) {\n      return 1\n    }\n    return v + 1\n  }\n  return l.reduce((acc, v) => [...acc, incr(v)], [])\n}\n\nconst decrList = (l) => {\n  if (l.length === 0) {\n    return []\n  }\n  const decr = (v) => {\n    if (v === 0) {\n      return -1\n    }\n    return v - 1\n  }\n  return l.reduce((acc, v) => [...acc, decr(v)], [])\n}\n\nconst lis = (l) => {\n  const lis = incrList(l)\n  const lis2 = decrList(l)\n  return [lis, lis2]\n}\n\nconst getMaxLength = (l) => {\n  const max = Math.max(...l.map(v => v.length))\n  return max\n}\n\nconst getMaxLength2 = (l) => {\n  const max = Math.max(...l.map(v => v.length))\n  return max\n}\n\nconst lis = (l) => {\n  const lis = incrList(l)\n  const lis2 = decrList(l)\n  return [lis, lis2]\n}\n\nconst getMaxLength = (l) => {\n  const max = Math.max(...l.map(v => v.length))\n  return max\n}\n\nconst getMaxLength2 = (l) => {\n  const max = Math.max(...l.map(v => v.length))\n  return max\n}\n\nconst getMaxLength = (l) => {\n  const max = Math.max(...l.map(v => v.length))\n  return max\n}\n\nconst getMaxLength2 = (l) => {\n  const max = Math.max(...l.map(v => v.length))\n  return max\n}\n\nconst lis = (l) => {\n  const lis = incrList(l)\n  const lis2 = decrList(l)\n  return [lis, lis2]\n}\n\nconst getMaxLength = (l) => {\n  const max = Math.max(...l.map(v => v.length))\n  return max\n}\n\nconst getMaxLength2 = (l) => {\n  const max = Math.max(...l.map(v => v.length))\n  return max\n}\n\nconst lis = (l) => {\n  const lis = incrList(l)\n  const lis2 = decrList(l)\n  return [lis, lis2]\n}\n\nconst getMaxLength = (l) => {\n  const max = Math.max(...l.map(v => v.length))\n  return max\n}\n\nconst getMaxLength2 = (l) => {\n  const max = Math.max(...l.map(v => v.length))\n  return max\n}\n\nconst lis = (l) => {\n  const lis = incrList(l)\n  const lis2 = decrList(l)\n  return [lis, lis2]\n}\n\nconst getMaxLength = (l) => {\n  const max = Math.max(...l.map(v => v.length))\n  return max\n}\n\nconst getMaxLength2 = (l) => {\n  const max = Math.max(...l.map(v => v.length))\n  return max\n}\n\nconst lis = (l) => {\n  const lis = incrList(l)\n  const lis2 = decrList(l)\n  return [lis, lis2]\n}\n\nconst getMaxLength = (l) => {\n  const max = Math.max(...l.map(v => v.length))\n  return max\n}\n\nconst getMaxLength2 = (l) => {\n  const max = Math.max(...l.map(v => v.length))\n  return max\n}\n\nconst lis = (l) => {\n  const lis = incrList(l)\n  const lis2 = decrList(l)\n  return [lis, lis2]\n}\n\nconst getMaxLength = (l) => {\n  const max = Math.max(...l.map(v => v.length))\n  return"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    const len = l.length\n    const pairsSumToZero = new Array(len)\n    for(let i = 0; i < len; i++) {\n        const curr = l[i]\n        const currSum = l[i] * (i + 1)\n        let j = i + 1\n        while(j < len && currSum + l[j] == 0) {\n            pairsSumToZero[i] = true\n            j++\n        }\n        pairsSumToZero[j - 1] = true\n    }\n    return pairsSumToZero.indexOf(false)!= -1\n}\n\n/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZeroTwo = (l) => {\n    const len = l.length\n    const pairsSumToZero = new Array(len)\n    for(let i = 0; i < len; i++) {\n        const curr = l[i]\n        const currSum = l[i] * (i + 1)\n        let j = i + 1\n        while(j < len && currSum + l[j] == 0) {\n            pairsSumToZero[i] = true\n            j++\n        }\n        pairsSumToZero[j - 1] = true\n    }\n    return pairsSumToZero.indexOf(false)!= -1\n}\n\nmodule.exports = {\n    pairsSumToZero,\n    pairsSumToZeroTwo\n}<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (x === 0) return 0\n  let res = ''\n  while (x > 0) {\n    res = Math.floor(x % base) + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\n/*\n  Given a string, count how many lowercase letters there are in it.\n  >>> countLowerCaseLetters('abc')\n  3\n  >>> countLowerCaseLetters('ab')\n  1\n  >>> countLowerCaseLetters('a')\n  1\n  >>> countLowerCaseLetters('abcd')\n  2\n  >>> countLowerCaseLetters('d')\n  1\n  >>> countLowerCaseLetters('dabc')\n  1\n  >>> countLowerCaseLetters('dabc')\n  1\n  >>> countLowerCaseLetters('abcd')\n  2\n  >>> countLowerCaseLetters('x')\n  0\n  */\nconst countLowerCaseLetters = (str) => {\n  let numLetters = 0\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].toLowerCase() === str[i]) {\n      numLetters++\n    }\n  }\n  return numLetters\n}\n\n/*\n  Given a string, return a string with spaces inserted after each word.\n  >>> spaceString('abc')\n  'abc '\n  >>> spaceString('a b c')\n  'a b c '\n  >>> spaceString('a b c d')\n  'a b c d '\n  >>> spaceString('a b c d e f')\n  'a b c d e f '\n  >>> spaceString('a b c d e f g')\n  'a b c d e f g '\n  >>> spaceString('a b c d e f g h')\n  'a b c d e f g h '\n  >>> spaceString('x')\n  'x'\n  >>> spaceString('x y')\n  'x y'\n  >>> spaceString('x y z')\n  'x y z'\n  */\nconst spaceString = (str) => {\n  let res = ''\n  let words = str.split(' ')\n  for (let i = 0; i < words.length; i++) {\n    res += words[i] +''\n  }\n  return res\n}\n\n/*\n  Given a string, return a string with all the letters in upper case.\n  >>> toUpperCase('abc')\n  'ABC'\n  >>> toUpperCase('a b c')\n  'A B C'\n  >>> toUpperCase('a b c d')\n  'A B C D'\n  >>> toUpperCase('a b c d e f')\n  'A B C D E F'\n  >>> toUpperCase('a b c d e f g')\n  'A B C D E F G'\n  >>> toUpperCase('a b c d e f g h')\n  'A B C D E F G H'\n  >>> toUpperCase('x')\n  'X'\n  >>> toUpperCase('x y')\n  'X Y'\n  >>> toUpperCase('x y z')\n  'X Y Z'\n  */\nconst toUpperCase = (str) => {\n  let res = ''\n  for (let i = 0; i < str.length; i++) {\n    res += str[i].toUpperCase()\n  }\n  return res\n}\n\n/*\n  Given a string, return a string with all the letters in lower case.\n  >>> toLowerCase('ABC')\n  'abc'\n  >>> toLowerCase('A B C')\n  'a b c'\n  >>> toLowerCase('A B C D')\n  'a b c d'\n  >>> toLowerCase('A B C D E F')\n  'a b c d e f'\n  >>> toLowerCase('A B C D E F G')\n  'a b c d e f g'\n  >>> toLowerCase('A B C D E F G H')\n  'a b c d e f g h'\n  >>> toLowerCase('X')\n  'x'\n  >>> toLowerCase('X Y')\n  'x y'\n  >>> toLowerCase('X Y Z')\n  'x y z'\n  */\nconst toLowerCase = (str) => {\n  let res = ''\n  for (let i = 0; i < str.length; i++) {\n    res += str[i].toLowerCase()\n  }\n  return res\n}\n\n/*\n  Given a string, return a string with all the letters in upper case.\n  >>> reverseString('abc')\n  'cba'\n  >>> reverseString('a b c')\n  'cba b a'\n  >>> reverseString('a b c d e f')\n  'efcdba'\n  >>> reverseString('a b c d e f g h')\n  'hgfedcba'\n  >>> reverseString('x')\n  'x'\n  >>> reverseString('x y z')\n  'z y x'\n  */\nconst reverseString = (str) => {\n  let res = ''\n  for (let i = str.length - 1; i >= 0; i--) {\n    res += str[i]\n  }\n  return res\n}\n\n/*\n  Given a string, return a string with all the words in upper case.\n  >>> wordsString('abc')\n  'ABC'\n  >>> wordsString('a b c')\n  'A B C'\n  >>> wordsString('a b c d e f')\n  'A B C D E F'\n  >>> wordsString('a b c d e f g h')\n  'A B C D E F G H'\n  >>> wordsString('x')\n  'X'\n  >>> wordsString('x y z')\n  'X Y Z'\n  */\nconst wordsString = (str) => {\n  let res = ''\n  let words = str.split(' ')\n  for (let i = 0; i < words.length; i++) {\n    res += words[i].toUpperCase()"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": false, "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea26 = ("}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    return (n < 2)? 0 : fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n    const half = Math.floor(l.length / 2);\n    return l[half];\n};\n\n/*Return mean of elements in the list l.\n  >>> mean([3, 1, 2, 4, 5])\n  3.5\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  12.0\n  */\nconst mean = (l) => {\n    let sum = 0;\n    l.forEach((x) => {\n        sum += x;\n    });\n    return sum / l.length;\n};\n\n/*Return variance of elements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  0.0\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  10.0\n  */\nconst variance = (l) => {\n    let mean = mean(l);\n    let sum = 0;\n    l.forEach((x) => {\n        sum += Math.pow(x - mean, 2);\n    });\n    return sum / l.length;\n};\n\n/*Return standard deviation of elements in the list l.\n  >>> standardDeviation([3, 1, 2, 4, 5])\n  1.0\n  >>> standardDeviation([-10, 4, 6, 1000, 10, 20])\n  2.0\n  */\nconst standardDeviation = (l) => {\n    let variance = variance(l);\n    return Math.sqrt(variance);\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n    let max = 0;\n    let count = 0;\n    let mode = 0;\n    l.forEach((x) => {\n        if (x > max) {\n            max = x;\n            mode = count;\n        }\n        count++;\n    });\n    return mode;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst medianMode = (l) => {\n    let sorted = l.sort((a, b) => {\n        return a - b;\n    });\n    let half = Math.floor(l.length / 2);\n    return sorted[half];\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst modeMedian = (l) => {\n    let sorted = l.sort((a, b) => {\n        return a - b;\n    });\n    let half = Math.floor(l.length / 2);\n    return sorted[half];\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst medianMode = (l) => {\n    let sorted = l.sort((a, b) => {\n        return a - b;\n    });\n    let half = Math.floor(l.length / 2);\n    return sorted[half];\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst modeMedian = (l) => {\n    let sorted = l.sort((a, b) => {\n        return a - b;\n    });\n    let half = Math.floor(l.length / 2);\n    return sorted[half];\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst modeMedian = (l) => {\n    let sorted = l.sort((a, b) => {\n        return a - b;\n    });\n    let half = Math.floor(l.length / 2);\n    return sorted[half];\n};\n\nmodule.exports = {\n    mean,\n    mode,\n    median,\n    modeMedian,\n    variance,\n    standardDeviation\n};<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    if (!text) {\n        return false;\n    }\n    text = text.toLowerCase();\n    const reverse = text.split('').reverse().join('');\n    return text === reverse;\n};\n\n/*\n  Checks if will give number will be even\n  >>> isEven(0)\n  true\n  >>> isEven(1)\n  false\n  >>> isEven(2)\n  true\n  >>> isEven(3)\n  false\n  */\nconst isEven = (num) => {\n    return (num % 2) === 0;\n};\n\n/*\n  Checks if will give number will be odd\n  >>> isOdd(0)\n  false\n  >>> isOdd(1)\n  true\n  >>> isOdd(2)\n  false\n  >>> isOdd(3)\n  true\n  */\nconst isOdd = (num) => {\n    return!isEven(num);\n};\n\n/*\n  Checks if will give string will be an even number\n  >>> isEven(\"2\")\n  true\n  >>> isEven(\"3\")\n  false\n  >>> isEven(\"6\")\n  false\n  >>> isEven(\"1\")\n  true\n  */\nconst isEvenNumber = (text) => {\n    return isEven(parseInt(text));\n};\n\n/*\n  Checks if will give string will be an odd number\n  >>> isOdd(\"2\")\n  false\n  >>> isOdd(\"3\")\n  true\n  >>> isOdd(\"6\")\n  true\n  >>> isOdd(\"1\")\n  false\n  */\nconst isOddNumber = (text) => {\n    return isOdd(parseInt(text));\n};\n\n/*\n  Checks if will give string will be a sum of even numbers\n  >>> isSumEven(\"1 2 3 4 5 6 7\")\n  true\n  >>> isSumEven(\"2 3 4 5 6 7 8\")\n  false\n  >>> isSumEven(\"1 2 3 4 5 6\")\n  false\n  >>> isSumEven(\"1 2 3 4\")\n  false\n  */\nconst isSumEven = (text) => {\n    let sum = 0;\n    text.split('').forEach(x => {\n        sum += parseInt(x);\n    });\n    return isEvenNumber(sum);\n};\n\n/*\n  Checks if will give string will be a sum of odd numbers\n  >>> isSumOdd(\"1 2 3 4 5 6 7\")\n  false\n  >>> isSumOdd(\"2 3 4 5 6 7 8\")\n  true\n  >>> isSumOdd(\"1 2 3 4 5 6\")\n  true\n  >>> isSumOdd(\"1 2 3 4\")\n  true\n  */\nconst isSumOdd = (text) => {\n    let sum = 0;\n    text.split('').forEach(x => {\n        sum += parseInt(x);\n    });\n    return isOddNumber(sum);\n};\n\n/*\n  Checks if will give string will be a sum of numbers\n  >>> isSum(\"1 2 3 4 5 6 7\")\n  false\n  >>> isSum(\"2 3 4 5 6 7 8\")\n  true\n  >>> isSum(\"1 2 3 4 5 6\")\n  true\n  >>> isSum(\"1 2 3 4\")\n  true\n  */\nconst isSum = (text) => {\n    return isSumEven(text) || isSumOdd(text);\n};\n\nconst test = {\n    isPalindrome: isPalindrome,\n    isEven: isEven,\n    isOdd: isOdd,\n    isSum: isSum,\n    isSumEven: isSumEven,\n    isSumOdd: isSumOdd\n};\n\nconsole.log(\n    test.isPalindrome(\"\"),\n    test.isPalindrome(\"aba\"),\n    test.isPalindrome(\"aaaaa\"),\n    test.isPalindrome(\"zbcd\")\n);\nconsole.log(\n    test.isEven(\"\"),\n    test.isEven(\"1\"),\n    test.isEven(\"2\"),\n    test.isEven(\"3\")\n);\nconsole.log(\n    test.isOdd(\"\"),\n    test.isOdd(\"1\"),\n    test.isOdd(\"2\"),\n    test.isOdd(\"3\")\n);\nconsole.log(\n    test.isSum(\"\"),\n    test.isSum(\"1 2 3 4 5 6 7\"),\n    test.isSum(\"2 3 4 5 6 7 8\"),\n    test.isSum(\"1 2 3 4 5 6\")\n);\nconsole.log(\n    test.isSumEven(\"\"),\n    test.isSumEven(\"1 2 3 4 5 6 7\"),\n    test.isSumEven(\"2 3 4 5 6 7 8\"),\n    test.isSumEven(\"1 2 3 4 5 6\")\n);\nconsole.log(\n    test.isSumOdd(\"\"),\n    test.isSumOdd(\"1 2 3 4 5 6 7\"),\n    test.isSumOdd(\"2 3 4 5 6 7 8\"),\n    test.isSumOdd(\"1 2 3 4 5 6\")\n);\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let r = n % p;\n  while (r < 0) {\n    r += p;\n  }\n  return r;\n};\n\n/*Return the highest exponent of x that is a power of 2.\n  >>> pow2(3)\n  2\n  >>> pow2(11)\n  4\n  >>> pow2(4)\n  2\n  >>> pow2(0)\n  1\n  >>> pow2(1)\n  1\n  >>> pow2(2)\n  2\n  >>> pow2(3)\n  2\n  >>> pow2(1101)\n  4\n  */\nconst pow2 = (x) => {\n  return (x > 0)? x & (x - 1) : 1;\n};\n\n/*Return the lowest exponent of x that is a power of 2, but not a power of 3.\n  >>> pow3(4)\n  3\n  >>> pow3(2)\n  2\n  >>> pow3(3)\n  2\n  >>> pow3(1)\n  1\n  >>> pow3(0)\n  1\n  >>> pow3(4)\n  3\n  >>> pow3(11)\n  6\n  >>> pow3(1101)\n  5\n  */\nconst pow3 = (x) => {\n  return (x > 0)? x & (x - 1) : 1;\n};\n\n/*Return the highest exponent of x that is a power of 3.\n  >>> pow3(3)\n  3\n  >>> pow3(11)\n  6\n  >>> pow3(4)\n  2\n  >>> pow3(2)\n  2\n  >>> pow3(1)\n  1\n  >>> pow3(0)\n  1\n  >>> pow3(4)\n  3\n  >>> pow3(1101)\n  9\n  */\nconst pow3_ = (x) => {\n  return (x > 0)? x & (x - 1) : 1;\n};\n\n/*Return the lowest exponent of x that is a power of 3, but not a power of 2.\n  >>> pow2_(2)\n  1\n  >>> pow2_(3)\n  1\n  >>> pow2_(4)\n  2\n  >>> pow2_(1)\n  1\n  >>> pow2_(0)\n  1\n  >>> pow2_(4)\n  3\n  >>> pow2_(11)\n  6\n  >>> pow2_(1101)\n  5\n  */\nconst pow2_ = (x) => {\n  return (x > 0)? x & (x - 1) : 1;\n};\n\n/*Return the lowest exponent of x that is a power of 5.\n  >>> pow5(11)\n  9\n  >>> pow5(3)\n  3\n  >>> pow5(2)\n  2\n  >>> pow5(1)\n  1\n  >>> pow5(0)\n  1\n  >>> pow5(4)\n  4\n  >>> pow5(1101)\n  1\n  */\nconst pow5 = (x) => {\n  return (x > 0)? x & (x - 1) : 1;\n};\n\n/*Return the highest exponent of x that is a power of 5.\n  >>> pow5_(11)\n  1\n  >>> pow5_(3)\n  1\n  >>> pow5_(2)\n  1\n  >>> pow5_(1)\n  1\n  >>> pow5_(0)\n  1\n  >>> pow5_(4)\n  4\n  >>> pow5_(1101)\n  1\n  */\nconst pow5_ = (x) => {\n  return (x > 0)? x & (x - 1) : 1;\n};\n\nexport { modp, pow2, pow3_, pow2_, pow5, pow5_ };\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(((ch.charCodeAt(0)-5)+\" a\".charCodeAt(0))%26)+\" a\").join(\"\"); \n} \n\n /* \n  will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encode= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n /* \n   will take as input string will encode with encode function. Returns will decode string. \n  */ \n const decode= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(((ch.charCodeAt(0)-5)+\" a\".charCodeAt(0))%26)+\" a\").join(\"\"); \n} \n\n/* \n   will encode string by shifting every character by 5 in the alphabet. \n   */ \n const encode_shift_sse = (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode function. Returns will decode string. \n   */ \n const decode_sse = (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(((ch.charCodeAt(0)-5)+\" a\".charCodeAt(0))%26)+\" a\").join(\"\"); \n} \n\n/* \n   will encode string by shifting every character by 5 in the alphabet. \n   */ \n const encode_sse_shift = (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n   */ \n const decode_sse_shift = (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(((ch.charCodeAt(0)-5)+\" a\".charCodeAt(0))%26)+\" a\").join(\"\"); \n} \n\n/* \n   will encode string by shifting every character by 5 in the alphabet. \n   */ \n const encode_sse_shift_sse = (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode function. Returns will decode string. \n   */ \n const decode_sse_shift_sse = (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(((ch.charCodeAt(0)-5)+\" a\".charCodeAt(0))%26)+\" a\").join(\"\"); \n} \n\n/* \n   will encode string by shifting every character by 5 in the alphabet. \n   */ \n const encode_sse_shift_sse_sse = (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode function. Returns will decode string. \n   */ \n const decode_sse_shift_sse_sse = (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(((ch.charCodeAt(0)-5)+\" a\".charCodeAt(0))%26)+\" a\").join(\"\"); \n} \n\n/* \n   will encode string by shifting every character by 5 in the alphabet. \n   */ \n const encode_sse_shift_sse_sse_sse = (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n   */ \n const decode_sse_shift_sse_sse_sse = (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(((ch.charCodeAt(0)-5)+\" a\".charCodeAt(0))%26)+\" a\").join(\"\"); \n} \n\n/* \n   will encode string by shifting every character by 5 in the alphabet. \n   */ \n const encode_sse_shift_sse_sse_sse_sse = (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let newText = text;\n  for (let i = 0; i < vowels.length; i++) {\n    if (newText.indexOf(vowels[i]) > -1) {\n      newText = newText.replace(vowels[i], '');\n    }\n  }\n  return newText;\n};\n\nconst removePunctuations = (text) => {\n  const punctuations = [',', '.', ':', ';', '?', '!', '-'];\n  let newText = text;\n  for (let i = 0; i < punctuations.length; i++) {\n    if (newText.indexOf(punctuations[i]) > -1) {\n      newText = newText.replace(punctuations[i], '');\n    }\n  }\n  return newText;\n};\n\nconst isValidWord = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let newText = text;\n  for (let i = 0; i < vowels.length; i++) {\n    if (newText.indexOf(vowels[i]) > -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isValidNumber = (text) => {\n  return text.indexOf('.') === -1 &&\n    text.indexOf('-') === -1 &&\n    text.indexOf('+') === -1;\n};\n\nconst isValidEmail = (text) => {\n  return text.indexOf('@') > -1 &&\n    text.indexOf('.') > -1 &&\n    text.indexOf('-') > -1 &&\n    text.indexOf('_') > -1;\n};\n\nconst isValidPassword = (text) => {\n  return text.length > 6 && text.length < 20;\n};\n\nconst isValidUsername = (text) => {\n  return text.length > 2 && text.length < 20;\n};\n\nexport {\n  removeVowels,\n  removePunctuations,\n  isValidWord,\n  isValidNumber,\n  isValidEmail,\n  isValidPassword,\n  isValidUsername\n};\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n    return l.every(e => e < t);\n}\n\nmodule.exports = {\n    isBelowThreshold,\n    belowThreshold\n}<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add2 = (x, y) => {\n  return x + y;\n};\n\nconst add3 = (x, y) => {\n  return x + y;\n};\n\nconst add4 = (x, y) => {\n  return x + y;\n};\n\nconst add5 = (x, y) => {\n  return x + y;\n};\n\nconst add6 = (x, y) => {\n  return x + y;\n};\n\nconst add7 = (x, y) => {\n  return x + y;\n};\n\nconst add8 = (x, y) => {\n  return x + y;\n};\n\nconst add9 = (x, y) => {\n  return x + y;\n};\n\nconst add10 = (x, y) => {\n  return x + y;\n};\n\nconst add11 = (x, y) => {\n  return x + y;\n};\n\nconst add12 = (x, y) => {\n  return x + y;\n};\n\nconst add13 = (x, y) => {\n  return x + y;\n};\n\nconst add14 = (x, y) => {\n  return x + y;\n};\n\nconst add15 = (x, y) => {\n  return x + y;\n};\n\nconst add16 = (x, y) => {\n  return x + y;\n};\n\nconst add17 = (x, y) => {\n  return x + y;\n};\n\nconst add18 = (x, y) => {\n  return x + y;\n};\n\nconst add19 = (x, y) => {\n  return x + y;\n};\n\nconst add20 = (x, y) => {\n  return x + y;\n};\n\nconst add21 = (x, y) => {\n  return x + y;\n};\n\nconst add22 = (x, y) => {\n  return x + y;\n};\n\nconst add23 = (x, y) => {\n  return x + y;\n};\n\nconst add24 = (x, y) => {\n  return x + y;\n};\n\nconst add25 = (x, y) => {\n  return x + y;\n};\n\nconst add26 = (x, y) => {\n  return x + y;\n};\n\nconst add27 = (x, y) => {\n  return x + y;\n};\n\nconst add28 = (x, y) => {\n  return x + y;\n};\n\nconst add29 = (x, y) => {\n  return x + y;\n};\n\nconst add30 = (x, y) => {\n  return x + y;\n};\n\nconst add31 = (x, y) => {\n  return x + y;\n};\n\nconst add32 = (x, y) => {\n  return x + y;\n};\n\nconst add33 = (x, y) => {\n  return x + y;\n};\n\nconst add34 = (x, y) => {\n  return x + y;\n};\n\nconst add35 = (x, y) => {\n  return x + y;\n};\n\nconst add36 = (x, y) => {\n  return x + y;\n};\n\nconst add37 = (x, y) => {\n  return x + y;\n};\n\nconst add38 = (x, y) => {\n  return x + y;\n};\n\nconst add39 = (x, y) => {\n  return x + y;\n};\n\nconst add40 = (x, y) => {\n  return x + y;\n};\n\nconst add41 = (x, y) => {\n  return x + y;\n};\n\nconst add42 = (x, y) => {\n  return x + y;\n};\n\nconst add43 = (x, y) => {\n  return x + y;\n};\n\nconst add44 = (x, y) => {\n  return x + y;\n};\n\nconst add45 = (x, y) => {\n  return x + y;\n};\n\nconst add46 = (x, y) => {\n  return x + y;\n};\n\nconst add47 = (x, y) => {\n  return x + y;\n};\n\nconst add48 = (x, y) => {\n  return x + y;\n};\n\nconst add49 = (x, y) => {\n  return x + y;\n};\n\nconst add50 = (x, y) => {\n  return x + y;\n};\n\nconst add51 = (x, y) => {\n  return x + y;\n};\n\nconst add52 = (x, y) => {\n  return x + y;\n};\n\nconst add53 = (x, y) => {\n  return x + y;\n};\n\nconst add54 = (x, y) => {\n  return x + y;\n};\n\nconst add55 = (x, y) => {\n  return x + y;\n};\n\nconst add56 = (x, y) => {\n  return x + y;\n};\n\nconst add57 = (x, y) => {\n  return x + y;\n};\n\nconst add58 = (x, y) => {\n  return x + y;\n};\n\nconst add59 = (x, y) => {\n  return x + y;\n};\n\nconst add60 = (x, y) => {\n  return x + y;\n};\n\nconst add61 = (x, y) => {\n  return x + y;\n};\n\nconst add62 = (x, y) => {\n  return x + y;\n};\n\nconst add63 = (x, y) => {\n  return x + y;\n};\n\nconst add64 = (x, y) => {\n  return x + y;\n};\n\nconst add65 = (x, y) => {\n  return x + y;\n};\n\nconst add66 = (x, y) => {\n  return x + y;\n};\n\nconst add67 = (x, y) => {\n  return x + y;\n};\n\nconst add68 = (x, y) => {\n  return x + y;\n};\n\nconst add69 = (x"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  return (s0.length === s1.length)\n    && (s0.length === 1 || s0.charAt(0) === s1.charAt(0))\n    && (s0.length === 2 || s0.charAt(1) === s1.charAt(1))\n    && (s0.length === 3 || s0.charAt(2) === s1.charAt(2));\n};\n\nconst getSubString = (s, start, end) => {\n  return s.substring(start, end);\n};\n\nconst getIndex = (s, ch) => {\n  let i = 0;\n  while (s.indexOf(ch, i)!== -1) i++;\n  return i;\n};\n\nconst charIndex = (s, ch) => {\n  let i = 0;\n  while (s.charAt(i)!== ch) i++;\n  return i;\n};\n\nconst isWord = (s, start, end) => {\n  return (start === 0 || end === s.length) && sameChars(s, getSubString(s, start, end));\n};\n\nconst getStart = (s, ch) => {\n  let start = charIndex(s, ch);\n  while (isWord(s, start)) start++;\n  return start;\n};\n\nconst getEnd = (s, ch) => {\n  let end = charIndex(s, ch);\n  while (isWord(s, end)) end--;\n  return end;\n};\n\nconst getSubString = (s, start, end) => {\n  return s.substring(start, end);\n};\n\nconst getStart = (s, ch) => {\n  let start = charIndex(s, ch);\n  while (isWord(s, start)) start++;\n  return start;\n};\n\nconst getEnd = (s, ch) => {\n  let end = charIndex(s, ch);\n  while (isWord(s, end)) end--;\n  return end;\n};\n\nconst isWord = (s, start, end) => {\n  return (start === 0 || end === s.length) && sameChars(s, getSubString(s, start, end));\n};\n\nconst getStart = (s, ch) => {\n  let start = charIndex(s, ch);\n  while (isWord(s, start)) start++;\n  return start;\n};\n\nconst getEnd = (s, ch) => {\n  let end = charIndex(s, ch);\n  while (isWord(s, end)) end--;\n  return end;\n};\n\nconst isWord = (s, start, end) => {\n  return (start === 0 || end === s.length) && sameChars(s, getSubString(s, start, end));\n};\n\nconst getStart = (s, ch) => {\n  let start = charIndex(s, ch);\n  while (isWord(s, start)) start++;\n  return start;\n};\n\nconst getEnd = (s, ch) => {\n  let end = charIndex(s, ch);\n  while (isWord(s, end)) end--;\n  return end;\n};\n\nconst isWord = (s, start, end) => {\n  return (start === 0 || end === s.length) && sameChars(s, getSubString(s, start, end));\n};\n\nconst getStart = (s, ch) => {\n  let start = charIndex(s, ch);\n  while (isWord(s, start)) start++;\n  return start;\n};\n\nconst getEnd = (s, ch) => {\n  let end = charIndex(s, ch);\n  while (isWord(s, end)) end--;\n  return end;\n};\n\nmodule.exports = {\n  sameChars,\n  getSubString,\n  getIndex,\n  charIndex,\n  isWord,\n  getStart,\n  getEnd\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n-1) + fib(n-2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib2(10)\n  55\n  >>> fib2(1)\n  1\n  >>> fib2(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n <= 1) return n;\n  return fib(n-1) + fib2(n-2);\n};\n\nconsole.log(fib(10));\nconsole.log(fib2(10));\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    let char = brackets[i];\n    if (char === \">\") {\n      stack.push(\"<\");\n    } else if (char === \"<\") {\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\n// Complete the binarySearch function below.\nconst binarySearch = (arr, item, low, high) => {\n  let mid = Math.floor((low + high) / 2);\n  if (arr[mid] === item) {\n    return mid;\n  } else if (arr[mid] > item) {\n    return binarySearch(arr, item, low, mid - 1);\n  } else {\n    return binarySearch(arr, item, mid + 1, high);\n  }\n};\n\n/*\n  Write your code below.\n\n  Note:\n    You may have to convert the integer into a string and back.\n\n  Your code should return the index of the array arr, where item is the element you are looking for.\n\n  If the item is not found, return -1.\n*/\nconst binarySearch = (arr, item) => {\n  let low = 0;\n  let high = arr.length - 1;\n  let mid = Math.floor((low + high) / 2);\n\n  if (arr[mid] === item) {\n    return mid;\n  } else if (arr[mid] > item) {\n    return binarySearch(arr, item, low, mid - 1);\n  } else {\n    return binarySearch(arr, item, mid + 1, high);\n  }\n};\n\n// Test case:\nconst testCase = [\n  [\n    \"<\",\n    \"<\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<<><>\",\n    \"<>\"\n  ],\n  [\n    \">\",\n    \">\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \">\",\n    \">\"\n  ],\n  [\n    \"<\",\n    \"<\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \">\",\n    \">\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \">\",\n    \">\"\n  ],\n  [\n    \"<\",\n    \"<\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \">\",\n    \">\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  ],\n  [\n    \"<>\",\n    \"<>\"\n  "}
{"task_id": "JavaScript/57", "prompt": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const stack = [];\n  let min = Number.MAX_VALUE;\n  let max = Number.MIN_VALUE;\n  for (let i = 0; i < l.length; i++) {\n    let elem = l[i];\n    stack.push(elem);\n    min = Math.min(elem, min);\n    max = Math.max(elem, max);\n  }\n  if (min <= max) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20, 5])\n  false\n  >>> monotonic([1, 2, 4, 20, 5, 6])\n  false\n  >>> monotonic([1, 2, 4, 20, 5, 6, 7])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20, 5, 6, 7, 8])\n  true\n  >>> monotonic([1, 2, 4, 20, 5, 6, 7, 8, 9])\n  true\n  >>> monotonic([1, 2, 4, 20, 5, 6, 7, 8, 9, 10])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20, 5, 6, 7, 8, 9, 10, 11])\n  true\n  >>> monotonic([1, 2, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12])\n  true\n  >>> monotonic([1, 2, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  true\n  >>> monotonic([1, 2, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  true\n  >>> monotonic([1, 2, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  true\n  >>> monotonic([1, 2, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  true\n  >>> monotonic([1, 2, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  true\n  >>> monotonic([1, 2, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  true\n  >>> monotonic([1, 2, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  true\n  >>> monotonic([1, 2, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  true\n  >>> monotonic([1, 2, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  true\n  >>> monotonic([1, 2, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  true\n  >>> monotonic([1, 2, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  true\n  */\n\n/*\n  >>> monotonic([1, 2, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  true\n  >>> monotonic([1, 2, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12,"}
{"task_id": "JavaScript/58", "prompt": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  return l1.filter((e, i) => l2.indexOf(e)!= -1);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) return 1;\n  const factors = [];\n  const n_minus_one = n - 1;\n  for (let i = 2; i <= n_minus_one; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.max.apply(null, factors);\n};\n\n/* Return the largest prime factor of n. Assume n> 1.\n  >>> largestPrimeFactor_n(13195)\n  29\n  >>> largestPrimeFactor_n(2048)\n  2\n  */\nconst largestPrimeFactor_n = (n) => {\n  if (n === 1) return 1;\n  const factors = [];\n  const n_minus_one = n - 1;\n  for (let i = 2; i <= n_minus_one; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.max.apply(null, factors);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += i;\n  }\n  return result;\n};\n\nconst sumToN = (n) => {\n  return sumToN(n);\n};\n\nconsole.log(sumToN(5));\n\n/*\n  sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += i;\n  }\n  return result;\n};\n\nconsole.log(sumToN(5));\n\n/*\n  sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  return sumToN(n);\n};\n\nconsole.log(sumToN(5));\n\n/*\n  sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  return sumToN(n);\n};\n\nconsole.log(sumToN(5));\n\n/*\n  sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  return sumToN(n);\n};\n\nconsole.log(sumToN(5));\n\n/*\n  sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  return sumToN(n);\n};\n\nconsole.log(sumToN(5));\n\n/*\n  sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  return sumToN(n);\n};\n\nconsole.log(sumToN(5));\n\n/*\n  sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  return sumToN(n);\n};\n\nconsole.log(sumToN(5));\n\n/*\n  sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  return sumToN(n);\n};\n\nconsole.log(sumToN(5));\n\n/*\n  sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  return sumToN(n);\n};\n\nconsole.log(sumToN(5));\n\n/*\n  sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  return sumToN(n);\n};\n\nconsole.log(sumToN(5));\n\n/*\n  sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\nconst sumToN = (n) => {\n  return sumToN(n);\n};\n\nconsole.log(sumToN(5));\n\n/*\n  sumToN will be a function that will sum numbers from 1 to n.\n"}
{"task_id": "JavaScript/61", "prompt": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketStack = brackets.split(\"()\");\n  for (let i = 0; i < bracketStack.length; i++) {\n    if (bracketStack[i] === \"\") {\n      bracketStack.splice(i, 1);\n      i--;\n    }\n    if (bracketStack[i].length < 2) {\n      return false;\n    }\n    let count = 0;\n    for (let j = 0; j < bracketStack[i].length; j++) {\n      if (bracketStack[i][j] === \"(\") {\n        count++;\n      }\n      if (bracketStack[i][j] === \")\") {\n        count--;\n        if (count === 0) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  bracketsToStrings,\n  correctBracketing\n};<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let sum = 0;\n  let d = xs[0];\n  for (let i = 1; i < xs.length; i++) {\n    sum += xs[i] * d;\n    d = d * xs[i];\n  }\n  return sum;\n}\n\nconsole.log(derivative([1, 2, 3]));\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    if (n < 2) {\n        return n;\n    }\n    return fibfib(n - 1) + fibfib(n - 2);\n}\n\nfibfib(20);\n\n// function fibfib(n) {\n//     if (n < 2) {\n//         return n;\n//     }\n//     return fibfib(n - 1) + fibfib(n - 2);\n// }\n\n// function fibfib(n) {\n//     if (n < 2) {\n//         return n;\n//     }\n//     return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n// }\n\n/*\n  Given an array of integers, return true if the array contains any\n  duplicates, or false if every element is distinct.\n\nExample 1:\n\nInput: [1,1,2]\nOutput: true\nExplanation: The input contains duplicate 1.\n\nExample 2:\n\nInput: [1,2,3,4,4,5,5,6]\nOutput: false\nExplanation: The input contains distinct 1, 2, 3, 4, 5, 6.\n\nNote:\n\nThe number of elements in the given array will be in the range [1, 10^5].\n*/\nfunction containsDuplicate(nums) {\n    let map = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        if (map.has(nums[i])) {\n            return true;\n        }\n        map.set(nums[i], nums[i]);\n    }\n    return false;\n}\n\ncontainsDuplicate([1, 1, 2]);\ncontainsDuplicate([1, 2, 3, 4, 4, 5, 5, 6]);\ncontainsDuplicate([1, 2, 3, 4, 4, 5, 5, 6, 7]);\ncontainsDuplicate([1, 2, 3, 4, 4, 5, 5, 6, 7, 8]);\ncontainsDuplicate([1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 9]);\ncontainsDuplicate([1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10]);\ncontainsDuplicate([1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 11]);\ncontainsDuplicate([1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12]);\ncontainsDuplicate([1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13]);\ncontainsDuplicate([1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]);\ncontainsDuplicate([1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\ncontainsDuplicate([1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\ncontainsDuplicate([1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]);\ncontainsDuplicate([1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]);\ncontainsDuplicate([1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]);\ncontainsDuplicate([1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const isVowel = s.match(/[aeiouy]/)\n  return vowels.length - (isVowel? 1 : 0)\n}\n\n/*\n  Write a function that takes a string representing a word and will return the \n  number of letters in the word. \n  The string should contain only letters from the english alphabet. \n  For example:\n  >>> letterCount(\"Hello\")\n  5\n  >>> letterCount(\"abcd\")\n  4\n  >>> letterCount(\"a\")\n  1\n  >>> letterCount(\" \")\n  0\n  >>> letterCount(\"a b c\")\n  3\n  */\nconst letterCount = (s) => {\n  const letters = 'abcdefghijklmnopqrstuvwxyz'\n  return letters.length - (s.match(/\\S/)? 1 : 0)\n}\n\n/*\n  Write a function that takes a string and will return the length of the string. \n  The string should contain only letters and spaces. \n  For example:\n  >>> length(\"Hello\")\n  5\n  >>> length(\"abcd\")\n  4\n  >>> length(\"a\")\n  1\n  >>> length(\" \")\n  1\n  >>> length(\"a b c\")\n  5\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Write a function that takes a string and will return the number of\n  unique characters in the string. \n  The string should contain only letters and spaces. \n  For example:\n  >>> unique(\"Hello\")\n  2\n  >>> unique(\"abcd\")\n  3\n  >>> unique(\"a b c\")\n  2\n  >>> unique(\"a b c \")\n  3\n  >>> unique(\"a b c d\")\n  2\n  >>> unique(\"a b c d e\")\n  4\n  */\nconst unique = (s) => {\n  const characters = s.split('')\n  return characters.length - 1\n}\n\n/*\n  Write a function that takes a string and will return the number of\n  unique words in the string. \n  The string should contain only letters, spaces, and hyphens. \n  For example:\n  >>> uniqueWords(\"Hello World\")\n  2\n  >>> uniqueWords(\"Hello World \")\n  2\n  >>> uniqueWords(\"Hello World a b c\")\n  3\n  >>> uniqueWords(\"Hello World a b c \")\n  3\n  >>> uniqueWords(\"Hello World a b c d e\")\n  3\n  */\nconst uniqueWords = (s) => {\n  const words = s.split(' ')\n  return words.length - 1\n}\n\n/*\n  Write a function that takes a string and will return the number of\n  words in the string. \n  The string should contain only letters, spaces, and hyphens. \n  For example:\n  >>> numberOfWords(\"Hello World\")\n  2\n  >>> numberOfWords(\"Hello World \")\n  2\n  >>> numberOfWords(\"Hello World a b c\")\n  3\n  >>> numberOfWords(\"Hello World a b c \")\n  3\n  >>> numberOfWords(\"Hello World a b c d e\")\n  4\n  */\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words.length\n}\n\nconst test = {\n  vowelsCount: vowelsCount,\n  letterCount: letterCount,\n  length: length,\n  unique: unique,\n  uniqueWords: uniqueWords,\n  numberOfWords: numberOfWords\n}\n\nexport default test\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift === 0) {\n    return x;\n  }\n  let result = x;\n  let i = 0;\n  while (i < shift) {\n    result = result * 10 + x % 10;\n    x = Math.floor(x / 10);\n    i++;\n  }\n  result = result % 10;\n  if (result === 0) {\n    return '0';\n  }\n  return String(result);\n};\n\n/*\n  >>> circularShift(12, 2)\n  \"12\"\n  >>> circularShift(12, 3)\n  \"21\"\n  >>> circularShift(12, 4)\n  \"12\"\n  >>> circularShift(12, 5)\n  \"21\"\n  >>> circularShift(12, 6)\n  \"12\"\n  >>> circularShift(12, 7)\n  \"21\"\n  >>> circularShift(12, 8)\n  \"12\"\n  >>> circularShift(12, 9)\n  \"21\"\n  >>> circularShift(12, 10)\n  \"12\"\n  >>> circularShift(12, 11)\n  \"21\"\n  >>> circularShift(12, 12)\n  \"12\"\n  >>> circularShift(12, 13)\n  \"21\"\n  >>> circularShift(12, 14)\n  \"12\"\n  >>> circularShift(12, 15)\n  \"21\"\n  >>> circularShift(12, 16)\n  \"12\"\n  >>> circularShift(12, 17)\n  \"21\"\n  >>> circularShift(12, 18)\n  \"12\"\n  >>> circularShift(12, 19)\n  \"21\"\n  >>> circularShift(12, 20)\n  \"12\"\n  >>> circularShift(12, 21)\n  \"21\"\n  >>> circularShift(12, 22)\n  \"12\"\n  >>> circularShift(12, 23)\n  \"21\"\n  >>> circularShift(12, 24)\n  \"12\"\n  >>> circularShift(12, 25)\n  \"21\"\n  >>> circularShift(12, 26)\n  \"12\"\n  >>> circularShift(12, 27)\n  \"21\"\n  >>> circularShift(12, 28)\n  \"12\"\n  >>> circularShift(12, 29)\n  \"21\"\n  >>> circularShift(12, 30)\n  \"12\"\n  >>> circularShift(12, 31)\n  \"21\"\n  >>> circularShift(12, 32)\n  \"12\"\n  >>> circularShift(12, 33)\n  \"21\"\n  >>> circularShift(12, 34)\n  \"12\"\n  >>> circularShift(12, 35)\n  \"21\"\n  >>> circularShift(12, 36)\n  \"12\"\n  >>> circularShift(12, 37)\n  \"21\"\n  >>> circularShift(12, 38)\n  \"12\"\n  >>> circularShift(12, 39)\n  \"21\"\n  >>> circularShift(12, 40)\n  \"12\"\n  >>> circularShift(12, 41)\n  \"21\"\n  >>> circularShift(12, 42)\n  \"12\"\n  >>> circularShift(12, 43)\n  \"21\"\n  >>> circularShift(12, 44)\n  \"12\"\n  >>> circularShift(12, 45)\n  \"21\"\n  >>> circularShift(12, 46)\n  \"12\"\n  >>> circularShift(12, 47)\n  \"21\"\n  >>> circularShift(12, 48)\n  \"12\"\n  >>> circularShift(12, 49)\n  \"21\"\n  >>> circularShift(12, 50)\n  \"12\"\n  >>> circularShift(12, 51)\n  \"21\"\n  >>> circularShift(12, 52)\n  \"12\"\n  >>> circularShift(12, 53)\n  \"21\"\n  >>> circularShift(12, 54)\n  \"12\"\n  >>> circularShift(12, 55)\n  \"21\"\n  >>> circularShift(12, 56)\n  \"12\"\n  >>> circularShift(12, 57)\n  \"21\"\n  >>> circularShift(12, 58)\n  \"12\"\n  >>> circularShift(12, 59)\n  \"21\"\n  >>> circularShift(12, 60)\n  \"12\"\n  >>> circularShift(12, 61)\n  \"21\"\n  >>> circularShift(12, 62)\n  \"12\"\n  >>> circularShift(12, 63)\n  \"21\"\n  >>> circularShift(12, 64)\n  \"12\"\n  >>> circularShift(12, 65)\n  \"21\"\n  >>> circularShift(12, 66)\n  \"12\"\n  >>> circularShift(12, 67)\n  \"21\"\n  >>> circularShift(12, 68)\n  \"12\"\n  >>> circularShift(12, 69)\n  \"21\"\n  >>> circularShift(12, 70)\n  \"12\"\n  >>> circularShift(12, 71)\n  \"21\"\n  >>> circularShift(12, 72)\n  \"12\"\n  >>> circularShift(12, 73)\n  \"21\"\n  >>> circularShift(12, 74)\n  \"12\"\n  >>> circularShift(12, 75)\n  \"21\"\n  >>> circularShift(12, 76)\n  \"12\"\n  >>> circularShift(12, 77)\n  \"21\"\n  >>> circularShift(12, 78)\n  \"12\"\n  >>> circularShift(12, 79)\n  \"21\"\n  >>> circularShift(12, 80)\n  \"12\"\n  >>> circularShift(12, 81)\n  \"21\"\n  >>> circularShift(12, 82)\n  \"12\"\n  >>> circularShift(12, 83)\n  \"21\"\n  >>> circularShift(12, 84)\n  \"12\"\n  >>> circularShift(12, 85)\n  \"21\"\n  >>> circularShift(12, 86)\n  \"12\"\n  >>> circularShift(12, 87)\n  \"21\"\n  >>> circularShift(12, 88)\n  \"12\"\n  >>> circularShift(12, 89)\n  \"21\"\n  >>> circularShift(12, 90)\n  \"12\"\n  >>> circularShift"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const a = [...s];\n  let sum = 0;\n  for (const c of a) {\n    if (c >= 'A' && c <= 'Z') {\n      sum += c.charCodeAt(0) - 'A' + 1;\n    }\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n   let a = parseInt(s);\n   let b = parseInt(n);\n   let c = a-b;\n   let d = c%2;\n   let e = c/2;\n   let f = parseInt(e);\n   return f;\n }\n   \n const fruitDistribution = (s, n) => {\n   let apple = parseInt(s);\n   let orange = parseInt(n);\n   let mango = apple + orange;\n   return mango;\n }\n \n  \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) return []\n\n  arr.sort((a, b) => (a % 2 === 0 && b % 2 === 0)? a - b : b - a)\n  let [smallest_value, index] = arr[0]\n  let plucked_node = [smallest_value, index]\n  let index_to_pluck = 0\n  let result = []\n  let flag = false\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === plucked_node) {\n      index_to_pluck = i\n      flag = true\n    }\n    if (arr[i] === largest_node) {\n      result.push([arr[i], index_to_pluck])\n      index_to_pluck = i\n      flag = false\n    }\n  }\n\n  if (!flag) {\n    result.push([largest_node, index_to_pluck])\n  }\n\n  return result\n}\n\nconsole.log(pluck([1, 2, 3]))\nconsole.log(pluck([1, 2, 3, 0, 4, 5]))\nconsole.log(pluck([0, 1, 2, 3]))\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0,\n    max_index = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      max_index = i;\n    }\n  }\n  return max_index;\n};\n\nconst main = () => {\n  const test = [1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5];\n  console.log(search(test));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const odd = lst.filter(e => e % 2 === 1)\n  const even = lst.filter(e => e % 2 === 0)\n  return odd.concat(even).sort((a, b) => a - b)\n}\n\nconsole.log(strangeSortList([1, 2, 3, 4]))\nconsole.log(strangeSortList([5, 5, 5, 5]))\nconsole.log(strangeSortList([5, 5, 5, 5]))\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  return (Math.sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2) - pow(b, 2) - pow(c, 2) - pow(a, 2)) / 2)\n}\n\nconst isValidTriangle = (a, b, c) => {\n  if (triangleArea(a, b, c) > 0) {\n    return triangleArea(a, b, c)\n  } else {\n    return -1\n  }\n}\n\nconst findTriangleArea = (a, b, c) => {\n  return triangleArea(a, b, c)\n}\n\nconst main = () => {\n  const a = prompt(\"Please enter the length of side A\")\n  const b = prompt(\"Please enter the length of side B\")\n  const c = prompt(\"Please enter the length of side C\")\n  const area = isValidTriangle(a, b, c)\n  console.log(area)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n    const list = q.slice()\n    const sum = sumList(list)\n    return sum < w || sum === w && list.slice().reverse().join() === list.join()\n}\n\nconst sumList = (list) => {\n    const sum = 0\n    for (let i = 0; i < list.length; i++) {\n        sum += list[i]\n    }\n    return sum\n}\n\nconst willItFly2 = (q, w) => {\n    const list = q.slice()\n    const sum = sumList(list)\n    return sum < w || sum === w && list.slice().reverse().join() === list.join()\n}\n\nconst sumList2 = (list) => {\n    const sum = 0\n    for (let i = 0; i < list.length; i++) {\n        sum += list[i]\n    }\n    return sum\n}\n\nconst willItFly3 = (q, w) => {\n    const list = q.slice()\n    const sum = sumList(list)\n    return sum < w || sum === w && list.slice().reverse().join() === list.join()\n}\n\nconst sumList3 = (list) => {\n    const sum = 0\n    for (let i = 0; i < list.length; i++) {\n        sum += list[i]\n    }\n    return sum\n}\n\nconst sumList4 = (list) => {\n    const sum = 0\n    for (let i = 0; i < list.length; i++) {\n        sum += list[i]\n    }\n    return sum\n}\n\nconst sumList5 = (list) => {\n    const sum = 0\n    for (let i = 0; i < list.length; i++) {\n        sum += list[i]\n    }\n    return sum\n}\n\nconst sumList6 = (list) => {\n    const sum = 0\n    for (let i = 0; i < list.length; i++) {\n        sum += list[i]\n    }\n    return sum\n}\n\nconst sumList7 = (list) => {\n    const sum = 0\n    for (let i = 0; i < list.length; i++) {\n        sum += list[i]\n    }\n    return sum\n}\n\nconst sumList8 = (list) => {\n    const sum = 0\n    for (let i = 0; i < list.length; i++) {\n        sum += list[i]\n    }\n    return sum\n}\n\nconst sumList9 = (list) => {\n    const sum = 0\n    for (let i = 0; i < list.length; i++) {\n        sum += list[i]\n    }\n    return sum\n}\n\nconst sumList10 = (list) => {\n    const sum = 0\n    for (let i = 0; i < list.length; i++) {\n        sum += list[i]\n    }\n    return sum\n}\n\nconst sumList11 = (list) => {\n    const sum = 0\n    for (let i = 0; i < list.length; i++) {\n        sum += list[i]\n    }\n    return sum\n}\n\nconst sumList12 = (list) => {\n    const sum = 0\n    for (let i = 0; i < list.length; i++) {\n        sum += list[i]\n    }\n    return sum\n}\n\nconst sumList13 = (list) => {\n    const sum = 0\n    for (let i = 0; i < list.length; i++) {\n        sum += list[i]\n    }\n    return sum\n}\n\nconst sumList14 = (list) => {\n    const sum = 0\n    for (let i = 0; i < list.length; i++) {\n        sum += list[i]\n    }\n    return sum\n}\n\nconst sumList15 = (list) => {\n    const sum = 0\n    for (let i = 0; i < list.length; i++) {\n        sum += list[i]\n    }\n    return sum\n}\n\nconst sumList16 = (list) => {\n    const sum = 0\n    for (let i = 0; i < list.length; i++) {\n        sum += list[i]\n    }\n    return sum\n}\n\nconst sumList17 = (list) => {\n    const sum = 0\n    for (let i = 0; i < list.length; i++) {\n        sum += list[i]\n    }\n    return sum\n}\n\nconst sumList18 = (list) => {\n    const sum = 0\n    for (let i = 0; i < list.length; i++) {\n        sum += list[i]\n    }\n    return sum\n}\n\nconst sumList19 = (list) => {\n    const sum = 0\n    for (let i = 0; i < list.length; i++) {\n        sum += list[i]\n    }\n    return sum\n}\n\nconst sumList20 = (list) => {\n    const sum = 0\n    for (let i = 0; i < list.length; i++) {\n        sum += list[i]\n    }\n    return sum\n}\n\nconst sumList21 = (list) => {\n    const sum = 0\n    for (let i = 0; i < list.length; i++) {\n        sum += list[i]\n    }\n    return sum\n}\n\nconst sumList22 = (list) => {\n    const sum = 0\n    for (let i = 0; i < list"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n    let currentSum = 0;\n    let sum = 0;\n    for(let i = 0; i < arr.length - 1; i++) {\n        currentSum += arr[i];\n    }\n    sum = currentSum;\n    let index = 0;\n    while(index < arr.length - 1) {\n        if(arr[index] > arr[index + 1]) {\n            index++;\n        } else if(arr[index] < arr[index + 1]) {\n            index--;\n        } else {\n            sum--;\n            index++;\n        }\n    }\n    return sum;\n}\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const total = lst1.length + lst2.length\n  if (lst1.length === lst2.length) {\n    return lst1\n  }\n  const match = lst1.filter(x => lst2.includes(x))\n  return match.length === total? lst1 : match\n}\n\nconst isMatch = (arr1, arr2) => {\n  let m = 0, n = 0\n  while (m < arr1.length && n < arr2.length) {\n    if (arr1[m] === arr2[n]) {\n      m++\n      n++\n    } else if (arr1[m] === '*') {\n      m++\n    } else if (arr2[n] === '*') {\n      n++\n    } else {\n      return false\n    }\n  }\n  return m === arr1.length && n === arr2.length\n}\n\nconst isMatch2 = (arr1, arr2) => {\n  let m = 0, n = 0\n  while (m < arr1.length && n < arr2.length) {\n    if (arr1[m] === arr2[n]) {\n      m++\n      n++\n    } else if (arr1[m] === '*') {\n      m++\n    } else if (arr2[n] === '*') {\n      n++\n    } else {\n      return false\n    }\n  }\n  return m === arr1.length && n === arr2.length\n}\n\nconst isMatch3 = (arr1, arr2) => {\n  let m = 0, n = 0\n  while (m < arr1.length && n < arr2.length) {\n    if (arr1[m] === arr2[n]) {\n      m++\n      n++\n    } else if (arr1[m] === '*') {\n      m++\n    } else if (arr2[n] === '*') {\n      n++\n    } else {\n      return false\n    }\n  }\n  return m === arr1.length && n === arr2.length\n}\n\nconst isMatch4 = (arr1, arr2) => {\n  let m = 0, n = 0\n  while (m < arr1.length && n < arr2.length) {\n    if (arr1[m] === arr2[n]) {\n      m++\n      n++\n    } else if (arr1[m] === '*') {\n      m++\n    } else if (arr2[n] === '*') {\n      n++\n    } else {\n      return false\n    }\n  }\n  return m === arr1.length && n === arr2.length\n}\n\nconst isMatch5 = (arr1, arr2) => {\n  let m = 0, n = 0\n  while (m < arr1.length && n < arr2.length) {\n    if (arr1[m] === arr2[n]) {\n      m++\n      n++\n    } else if (arr1[m] === '*') {\n      m++\n    } else if (arr2[n] === '*') {\n      n++\n    } else {\n      return false\n    }\n  }\n  return m === arr1.length && n === arr2.length\n}\n\nconst isMatch6 = (arr1, arr2) => {\n  let m = 0, n = 0\n  while (m < arr1.length && n < arr2.length) {\n    if (arr1[m] === arr2[n]) {\n      m++\n      n++\n    } else if (arr1[m] === '*') {\n      m++\n    } else if (arr2[n] === '*') {\n      n++\n    } else {\n      return false\n    }\n  }\n  return m === arr1.length && n === arr2.length\n}\n\nconst isMatch7 = (arr1, arr2) => {\n  let m = 0, n = 0\n  while (m < arr1.length && n < arr2.length) {\n    if (arr1[m] === arr2[n]) {\n      m++\n      n++\n    } else if (arr1[m] === '*') {\n      m++\n    } else if (arr2[n] === '*') {\n      n++\n    } else {\n      return false\n    }\n  }\n  return m === arr1.length && n === arr2.length\n}\n\nconst isMatch8 = (arr1, arr2) => {\n  let m = 0, n = 0\n  while (m < arr1.length && n < arr2.length) {\n    if (arr1[m] === arr2[n]) {\n      m++\n      n++\n    } else if (arr1[m] === '*') {\n      m++\n    } else if (arr2[n] === '*') {\n      n++\n    } else {\n      return false\n    }\n  }\n  return m === arr1.length && n === arr2.length\n}\n\nconst isMatch9 = (arr1, arr2) => {\n  let m = 0, n = 0\n  while (m < arr1.length && n < arr2.length) {\n    if (arr1[m] === arr2[n]) {\n      m++\n      n++\n    } else if (arr1[m] === '*') {\n      m++\n    } else if (arr2["}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const prime = isPrime(a);\n  if (!prime) {\n    return false;\n  }\n  const p = prime;\n  const p2 = prime * prime;\n  let i = 2;\n  while (i < p2) {\n    if (p % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nexport { isMultiplyPrime };\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  let result = false\n  if (x % n === 0) {\n    let y = x / n\n    while (y!== 1) {\n      if (y % n!== 0) {\n        break\n      }\n      y = y / n\n    }\n    if (y === 1) {\n      result = true\n    }\n  }\n  return result\n}\n\nconst isPrime = (x) => {\n  if (x % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i < x; i += 2) {\n    if (x % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeFast = (x) => {\n  for (let i = 1; i < x; i++) {\n    if (x % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeSlow = (x) => {\n  let result = true\n  for (let i = 2; i < x; i++) {\n    if (x % i === 0) {\n      result = false\n      break\n    }\n  }\n  return result\n}\n\nconst isPrimeFactor = (x) => {\n  for (let i = 2; i <= Math.sqrt(x); i++) {\n    if (x % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeFactorFast = (x) => {\n  for (let i = 2; i <= Math.sqrt(x); i++) {\n    if (x % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeFactorSlow = (x) => {\n  let result = true\n  for (let i = 2; i <= Math.sqrt(x); i++) {\n    if (x % i === 0) {\n      result = false\n      break\n    }\n  }\n  return result\n}\n\nconsole.log(isSimplePower(1, 4))\nconsole.log(isSimplePower(2, 2))\nconsole.log(isSimplePower(8, 2))\nconsole.log(isSimplePower(3, 2))\nconsole.log(isSimplePower(3, 1))\nconsole.log(isSimplePower(5, 3))\nconsole.log(isPrime(2))\nconsole.log(isPrime(3))\nconsole.log(isPrime(7))\nconsole.log(isPrime(11))\nconsole.log(isPrime(19))\nconsole.log(isPrime(23))\nconsole.log(isPrime(47))\nconsole.log(isPrime(101))\nconsole.log(isPrime(1901))\nconsole.log(isPrime(35))\nconsole.log(isPrime(19))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime(35))\nconsole.log(isPrime("}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  const n = Math.sqrt(a)\n  return n * n === a\n}\n\nconst iscube2 = (a) => {\n  const n = Math.sqrt(a)\n  return n * n === a && n * n == a\n}\n\nconst iscube3 = (a) => {\n  const n = Math.sqrt(a)\n  return n * n === a && n * n * n === a\n}\n\nconst iscube4 = (a) => {\n  const n = Math.sqrt(a)\n  return n * n === a && n * n * n * n === a\n}\n\nconst iscube5 = (a) => {\n  const n = Math.sqrt(a)\n  return n * n === a && n * n * n * n * n === a\n}\n\nconst iscube6 = (a) => {\n  const n = Math.sqrt(a)\n  return n * n === a && n * n * n * n * n * n === a\n}\n\nconst iscube7 = (a) => {\n  const n = Math.sqrt(a)\n  return n * n === a && n * n * n * n * n * n * n === a\n}\n\nconst iscube8 = (a) => {\n  const n = Math.sqrt(a)\n  return n * n === a && n * n * n * n * n * n * n * n === a\n}\n\nconst iscube9 = (a) => {\n  const n = Math.sqrt(a)\n  return n * n === a && n * n * n * n * n * n * n * n * n === a\n}\n\nconst iscube10 = (a) => {\n  const n = Math.sqrt(a)\n  return n * n === a && n * n * n * n * n * n * n * n * n * n === a\n}\n\nconst iscube11 = (a) => {\n  const n = Math.sqrt(a)\n  return n * n * n === a && n * n * n * n * n * n * n * n * n * n * n === a\n}\n\nconst iscube12 = (a) => {\n  const n = Math.sqrt(a)\n  return n * n * n * n === a && n * n * n * n * n * n * n * n * n * n * n * n === a\n}\n\nconst iscube13 = (a) => {\n  const n = Math.sqrt(a)\n  return n * n * n * n * n === a && n * n * n * n * n * n * n * n * n * n * n * n * n === a\n}\n\nconst iscube14 = (a) => {\n  const n = Math.sqrt(a)\n  return n * n * n * n * n === a && n * n * n * n * n * n * n * n * n * n * n * n * n * n === a\n}\n\nconst iscube15 = (a) => {\n  const n = Math.sqrt(a)\n  return n * n * n * n * n * n === a && n * n * n * n * n * n * n * n * n * n * n * n * n * n * n === a\n}\n\nconst iscube16 = (a) => {\n  const n = Math.sqrt(a)\n  return n * n * n * n * n * n === a && n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n === a\n}\n\nconst iscube17 = (a) => {\n  const n = Math.sqrt(a)\n  return n * n * n * n * n * n === a && n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n === a\n}\n\nconst iscube18 = (a) => {\n  const n = Math.sqrt(a)\n  return n * n * n * n * n * n === a && n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n === a\n}\n\nconst iscube19 = (a) => {\n  const n = Math.sqrt(a)\n  return n * n * n * n * n * n === a && n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n === a\n}\n\nconst iscube20 = (a) => {\n  const n = Math.sqrt(a)\n  return n * n * n * n * n * n === a && n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n === a\n}\n\nconst iscube21 = (a) => {\n  const n = Math.sqrt(a)\n  return n * n * n * n * n * n === a && n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n === a\n}\n\nconst iscube22 = (a) => {\n  const n = Math.sqrt(a)\n  return n * n * n * n * n * n === a && n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n === a\n}\n\nconst iscube23 = (a) => {\n  const n = Math.sqrt(a)\n  return n * n * n * n * n * n === a && n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n === a\n}\n"}
{"task_id": "JavaScript/78", "prompt": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const hex = parseInt(num, 16);\n  let result = 0;\n  let prime = 2;\n  while (prime < hex) {\n    const index = prime;\n    if (hex % prime === 0) {\n      result++;\n    }\n    prime += 1;\n  }\n  return result;\n};\n\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\"\n  for (let i = 0; i < decimal.length; i++) {\n    let x = decimal[i]\n    binary += (x === 0? \"0\" : \"1\")\n  }\n  return binary\n}\n\nconsole.log(decimalToBinary(15))\nconsole.log(decimalToBinary(32))\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let dp = [1];\n  let i = 0;\n  while (i < s.length) {\n    let cur = dp[i];\n    for (let j = i + 1; j < s.length; j++) {\n      dp.push(dp[j - 1] * s[j] % 10);\n    }\n    dp[i] = dp[i - 1] + 1;\n    if (dp[i] >= 3) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n}\n\n/*\n  Given a string, find the longest palindromic substring in it.\n\n  For example:\n  s = \"abba\", return \"ab\".\n  s = \"abc\", return \"abc\".\n  s = \"abcdefghijklmnopqrstuvwxyz\", return \"abcdefghijklmnopqrstuvwxyz\".\n  */\nconst longestPalindrome = (s) => {\n  let dp = [1];\n  let i = 0;\n  let j = 0;\n  let length = 0;\n  while (i < s.length) {\n    dp.push(0);\n    i++;\n  }\n  for (let i = 0; i < dp.length; i++) {\n    for (let j = i; j < dp.length; j++) {\n      dp[i] = dp[i] + dp[j];\n      if (s[i] == s[j] && dp[i] >= 3) {\n        length = j - i + 1;\n      }\n    }\n  }\n  return s.substring(i - length, i + length);\n}\n\n/*\n  Given a string, find the number of palindromic substrings in it.\n\n  For example:\n  s = \"abba\", return 2.\n  s = \"abc\", return 1.\n  s = \"abccba\", return 3.\n  s = \"aabb\", return 2.\n  */\nconst countPalindromes = (s) => {\n  let dp = [1];\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < s.length) {\n    dp.push(0);\n    i++;\n  }\n  while (j < s.length) {\n    if (s[i] == s[j]) {\n      dp[i] = dp[i] + dp[j];\n      count++;\n    }\n    j++;\n  }\n  return count;\n}\n\n/*\n  Given a string, find the index of the first appearance of the given substring.\n\n  For example:\n  s = \"abba\", return 1.\n  s = \"abc\", return -1.\n  s = \"aabbccc\", return 4.\n  s = \"abbbccc\", return -1.\n  */\nconst indexOf = (s, substring) => {\n  let dp = [0];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < s.length) {\n    dp.push(0);\n    i++;\n  }\n  while (j < s.length) {\n    if (s[j] == substring[k]) {\n      dp[j] = dp[j] + 1;\n      k++;\n      if (k == substring.length) {\n        return j;\n      }\n    } else {\n      k = 0;\n    }\n    j++;\n  }\n  return -1;\n}\n\n/*\n  Given a string, return the number of characters in the string that are in lowercase.\n\n  For example:\n  s = \"abbc\", return 2.\n  s = \"aBc\", return 2.\n  */\nconst numberOfLowercaseLetters = (s) => {\n  let count = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n}\n\n/*\n  Given a string, return the number of vowels in it.\n\n  For example:\n  s = \"abacadaba\", return 2.\n  s = \"abacad\", return 2.\n  s = \"abbb\", return 1.\n  */\nconst numberOfVowels = (s) => {\n  let count = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n      count++;\n    }\n    i++;\n  }\n  return count;\n}\n\nconst main = () => {\n  let s = \"abba\";\n  console.log(isHappy(s));\n  console.log(longestPalindrome(s));\n  console.log(countPalindromes(s));\n  console.log(indexOf(s, \"ab\"));\n  console.log(indexOf(s, \"ab\"));\n  console.log(numberOfLowercaseLetters(s));\n  console.log(numberOfVowels(s));\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = grades.map((grade) => {\n    if (grade >= 3.7) {\n      return 'A+'\n    } else if (grade >= 3.3) {\n      return 'A'\n    } else if (grade >= 3) {\n      return 'B+'\n    } else if (grade >= 2.7) {\n      return 'B'\n    } else if (grade >= 2.3) {\n      return 'C-'\n    } else if (grade >= 2.0) {\n      return 'C+'\n    } else if (grade >= 1.7) {\n      return 'D+'\n    } else if (grade >= 1.3) {\n      return 'D'\n    } else if (grade >= 1.0) {\n      return 'D-'\n    } else {\n      return 'E'\n    }\n  });\n  return letterGrade;\n}\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const digits = string.length\n  if (digits === 0) return false\n  let sum = 0\n  for (let i = 0; i < digits; i++) {\n    sum += parseInt(string[i], 10)\n  }\n  return (sum % 10 === 0)\n}\n\nmodule.exports = primeLength\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n\tconst a = [];\n\tlet count = 0;\n\tfor(let i=1;i<=n;i++){\n\t\tlet j = 1;\n\t\twhile(i*j <= n){\n\t\t\ta.push(i*j);\n\t\t\tj++;\n\t\t}\n\t}\n\tfor(let i=1;i<=n;i++){\n\t\tlet j = 1;\n\t\twhile(i*j <= n){\n\t\t\tif(a[j-1] == i){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\treturn count;\n}\n\nconst startsOneEnds2 = (n)=>{\n\tconst a = [];\n\tlet count = 0;\n\tfor(let i=1;i<=n;i++){\n\t\tlet j = 1;\n\t\twhile(i*j <= n){\n\t\t\ta.push(i*j);\n\t\t\tj++;\n\t\t}\n\t}\n\tfor(let i=1;i<=n;i++){\n\t\tlet j = 1;\n\t\twhile(i*j <= n){\n\t\t\tif(a[j-1] == i){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\treturn count;\n}\n\nconst startsOneEnds3 = (n)=>{\n\tconst a = [];\n\tlet count = 0;\n\tfor(let i=1;i<=n;i++){\n\t\tlet j = 1;\n\t\twhile(i*j <= n){\n\t\t\ta.push(i*j);\n\t\t\tj++;\n\t\t}\n\t}\n\tfor(let i=1;i<=n;i++){\n\t\tlet j = 1;\n\t\twhile(i*j <= n){\n\t\t\tif(a[j-1] == i){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\treturn count;\n}\n\nconst startsOneEnds4 = (n)=>{\n\tconst a = [];\n\tlet count = 0;\n\tfor(let i=1;i<=n;i++){\n\t\tlet j = 1;\n\t\twhile(i*j <= n){\n\t\t\ta.push(i*j);\n\t\t\tj++;\n\t\t}\n\t}\n\tfor(let i=1;i<=n;i++){\n\t\tlet j = 1;\n\t\twhile(i*j <= n){\n\t\t\tif(a[j-1] == i){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\treturn count;\n}\n\nconst startsOneEnds5 = (n)=>{\n\tconst a = [];\n\tlet count = 0;\n\tfor(let i=1;i<=n;i++){\n\t\tlet j = 1;\n\t\twhile(i*j <= n){\n\t\t\ta.push(i*j);\n\t\t\tj++;\n\t\t}\n\t}\n\tfor(let i=1;i<=n;i++){\n\t\tlet j = 1;\n\t\twhile(i*j <= n){\n\t\t\tif(a[j-1] == i){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\treturn count;\n}\n\nconst startsOneEnds6 = (n)=>{\n\tconst a = [];\n\tlet count = 0;\n\tfor(let i=1;i<=n;i++){\n\t\tlet j = 1;\n\t\twhile(i*j <= n){\n\t\t\ta.push(i*j);\n\t\t\tj++;\n\t\t}\n\t}\n\tfor(let i=1;i<=n;i++){\n\t\tlet j = 1;\n\t\twhile(i*j <= n){\n\t\t\tif(a[j-1] == i){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\treturn count;\n}\n\nconst startsOneEnds7 = (n)=>{\n\tconst a = [];\n\tlet count = 0;\n\tfor(let i=1;i<=n;i++){\n\t\tlet j = 1;\n\t\twhile(i*j <= n){\n\t\t\ta.push(i*j);\n\t\t\tj++;\n\t\t}\n\t}\n\tfor(let i=1;i<=n;i++){\n\t\tlet j = 1;\n\t\twhile(i*j <= n){\n\t\t\tif(a[j-1] == i){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\treturn count;\n}\n\nconst startsOneEnds8 = (n)=>{\n\tconst a = [];\n\tlet count = 0;\n\tfor(let i=1;i<=n;i++){\n\t\tlet j = 1;\n\t\twhile(i*j <= n){\n\t\t\ta.push(i*j);\n\t\t\tj++;\n\t\t}\n\t}\n\tfor(let i=1;i<=n;i++){\n\t\tlet j = 1;\n\t\twhile(i*j <= n){\n\t\t\tif(a[j-1] == i){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\treturn count;\n}\n\nconst startsOneEnds9 = (n)=>{\n\tconst a = [];\n\tlet count = 0;\n\tfor(let i=1;i<=n;i++){\n\t\tlet j = 1;\n\t\twhile(i*j <= n){\n\t\t\ta.push(i*j);\n\t\t\tj++;\n\t\t}\n\t}\n\tfor(let i=1;i<=n;i++){\n\t\tlet j = 1;\n\t\twhile(i*j <= n){\n\t\t\tif(a[j-1] == i){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\treturn count;\n}\n\nconst startsOneEnds10 = (n)=>{\n\tconst a = [];\n\tlet count = 0;\n\tfor(let i=1;i<=n;i++){\n\t\tlet j = 1;\n\t\twhile(i*j <= n){\n\t\t\ta.push(i*j);\n\t\t\tj++;\n\t\t}\n\t}\n\tfor(let i=1;i<=n;i++){\n\t\tlet j = 1;\n\t\twhile(i*j <= n){\n\t\t\tif(a[j-1] == i){\n\t\t\t\tcount++;\n"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": false, "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const result = [];\n  let digit = 1;\n  while (digit <= N) {\n    digit = N % 2? N % 1? N % 0? 0 : 1 : 0 : 1;\n    result.push(digit);\n    N = N / 2;\n  }\n  return result.join('');\n};\n\nconsole.log(solve(10));\nconsole.log(solve(147));\nconsole.log(solve(3000));\nconsole.log(solve(4999));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let i = 1;\n  for (let element of lst) {\n    i += element;\n  }\n  return i;\n}\n\nconst add_and_test = (lst) => {\n  console.log(add(lst));\n}\n\nadd_and_test([4, 2, 6, 7]);\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  let res = ''\n  words.forEach(word => {\n    let newWord = ''\n    for (let i = 0; i < word.length; i++) {\n      newWord += charToOrdinal(word[i])\n    }\n    res += newWord +''\n  })\n  return res.slice(0, -1)\n}\n\nconst charToOrdinal = (char) => {\n  if (char >= 'a' && char <= 'z') {\n    char = char.toUpperCase()\n  }\n  const value = char.charCodeAt(0)\n  if (value >= 'A' && value <= 'Z') {\n    value = value - 'A' + '0'\n  }\n  return value\n}\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const result = []\n  const sort = (arr, column) => {\n    const sorted = arr.sort((a, b) => {\n      const aRow = a[column]\n      const bRow = b[column]\n      if (aRow < bRow) {\n        return -1\n      } else if (aRow > bRow) {\n        return 1\n      } else {\n        return 0\n      }\n    })\n    return sorted\n  }\n  const first = sort(lst, 0)\n  const last = sort(lst, 1)\n  let row = 0\n  let column = 0\n  for (let i = 0; i < first.length; i++) {\n    if (first[i][0] === x) {\n      result.push(first[i])\n      row = first[i][0]\n      column = first[i][1]\n    }\n  }\n  for (let i = 0; i < last.length; i++) {\n    if (last[i][0] === row && last[i][1] === column) {\n      result.push(last[i])\n    }\n  }\n  return result\n}\n\n/*\n  Examples:\n  getColumn([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 0) == [1,2,3,4,5,6]\n  getColumn([], 0) == []\n  getColumn([[], [1], [1, 2, 3]], 3) == [1, 2, 3]\n  */\nconst getColumn = (lst, x) => {\n  const result = []\n  const sort = (arr, column) => {\n    const sorted = arr.sort((a, b) => {\n      const aCol = a[column]\n      const bCol = b[column]\n      if (aCol < bCol) {\n        return -1\n      } else if (aCol > bCol) {\n        return 1\n      } else {\n        return 0\n      }\n    })\n    return sorted\n  }\n  const first = sort(lst, 0)\n  const last = sort(lst, 1)\n  let row = 0\n  let column = 0\n  for (let i = 0; i < first.length; i++) {\n    if (first[i][1] === x) {\n      result.push(first[i][0])\n      row = first[i][1]\n      column = first[i][0]\n    }\n  }\n  for (let i = 0; i < last.length; i++) {\n    if (last[i][1] === row && last[i][0] === column) {\n      result.push(last[i][0])\n    }\n  }\n  return result\n}\n\nmodule.exports = {\n  getRow,\n  getColumn\n}<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sum = sumArray(array);\n  if(sum % 2 === 0){\n    return array.sort((a, b) => b - a);\n  }\n  return array.sort((a, b) => a - b);\n};\n\n/*\n  Given an array of non-negative integers, return the first index that can be partitioned into two groups with sum of equal to the given sum.\n  If there is no such first index, return -1.\n\n  Examples:\n  * partitionArray([5, 10, 8, 2, 1], 13) => 3\n  * partitionArray([5, 10, 8, 2, 1], 9) => -1\n*/\nconst partitionArray = (array, sum) => {\n  const sumOfArray = sumArray(array);\n  if(sumOfArray % sum === 0){\n    return array.indexOf(sumOfArray / sum);\n  }\n  return -1;\n};\n\n/*\n  Given an array of non-negative integers, return the first index that can be partitioned into three groups with sum of equal to the given sum.\n  If there is no such first index, return -1.\n\n  Examples:\n  * partitionArray([5, 10, 8, 2, 1], 23) => 5\n  * partitionArray([5, 10, 8, 2, 1], 21) => -1\n*/\nconst partitionArray2 = (array, sum) => {\n  const sumOfArray = sumArray(array);\n  if(sumOfArray % sum === 0){\n    return array.indexOf(sumOfArray / sum);\n  }\n  return -1;\n};\n\n/*\n  Given an array of non-negative integers, return the first index that can be partitioned into four groups with sum of equal to the given sum.\n  If there is no such first index, return -1.\n\n  Examples:\n  * partitionArray([5, 10, 8, 2, 1], 17) => 2\n  * partitionArray([5, 10, 8, 2, 1], 15) => -1\n*/\nconst partitionArray3 = (array, sum) => {\n  const sumOfArray = sumArray(array);\n  if(sumOfArray % sum === 0){\n    return array.indexOf(sumOfArray / sum);\n  }\n  return -1;\n};\n\n/*\n  Given an array of non-negative integers, return the first index that can be partitioned into five groups with sum of equal to the given sum.\n  If there is no such first index, return -1.\n\n  Examples:\n  * partitionArray([5, 10, 8, 2, 1], 35) => 4\n  * partitionArray([5, 10, 8, 2, 1], 33) => -1\n*/\nconst partitionArray4 = (array, sum) => {\n  const sumOfArray = sumArray(array);\n  if(sumOfArray % sum === 0){\n    return array.indexOf(sumOfArray / sum);\n  }\n  return -1;\n};\n\n/*\n  Given an array of non-negative integers, return the first index that can be partitioned into six groups with sum of equal to the given sum.\n  If there is no such first index, return -1.\n\n  Examples:\n  * partitionArray([5, 10, 8, 2, 1], 51) => 5\n  * partitionArray([5, 10, 8, 2, 1], 49) => -1\n*/\nconst partitionArray5 = (array, sum) => {\n  const sumOfArray = sumArray(array);\n  if(sumOfArray % sum === 0){\n    return array.indexOf(sumOfArray / sum);\n  }\n  return -1;\n};\n\n/*\n  Given an array of non-negative integers, return the first index that can be partitioned into seven groups with sum of equal to the given sum.\n  If there is no such first index, return -1.\n\n  Examples:\n  * partitionArray([5, 10, 8, 2, 1], 43) => 6\n  * partitionArray([5, 10, 8, 2, 1], 41) => -1\n*/\nconst partitionArray6 = (array, sum) => {\n  const sumOfArray = sumArray(array);\n  if(sumOfArray % sum === 0){\n    return array.indexOf(sumOfArray / sum);\n  }\n  return -1;\n};\n\nconst sumArray = (array) => {\n  return array.reduce((acc, n) => acc + n, 0);\n};\n\nexport {sortArray, partitionArray, partitionArray2, partitionArray3, partitionArray4, partitionArray5, partitionArray6};\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabet_length = alphabet.length;\n  let i = 0;\n  let j = 0;\n  let temp = 0;\n  const result = [];\n\n  while (i < s.length) {\n    temp = s.charCodeAt(i) + alphabet_length;\n    if (alphabet.indexOf(s.charAt(i)) === -1) {\n      result.push(s.charAt(i));\n      i++;\n    } else {\n      result.push(alphabet.charAt(temp % alphabet_length));\n      i++;\n    }\n  }\n\n  return result.join('');\n}\n\n/*Create a function decrypt that will take a string as an argument and \n   will return a string will decrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift up by two will multiply to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'gf'\n  decrypt('kj') returns 'et'\n  */\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabet_length = alphabet.length;\n  let i = 0;\n  let j = 0;\n  let temp = 0;\n  const result = [];\n\n  while (i < s.length) {\n    temp = s.charCodeAt(i) - alphabet_length;\n    if (alphabet.indexOf(s.charAt(i)) === -1) {\n      result.push(s.charAt(i));\n      i++;\n    } else {\n      result.push(alphabet.charAt(temp));\n      i++;\n    }\n  }\n\n  return result.join('');\n}\n\nconst encrypt_string = encrypt('hi');\nconst decrypt_string = decrypt('lm');\n\nconsole.log(encrypt_string);\nconsole.log(decrypt_string);\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n  if(lst.length===0) return null;\n  const next=lst[1];\n  for(let i=2;i<lst.length;i++){\n    if(next<lst[i]){\n      next=lst[i];\n    }\n  }\n  return next;\n}; \n  \nmodule.exports= nextSmallest;\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(\".\")\n  let num = 0\n  words.forEach((e) => {\n    if (e === \"I\") {\n      num += 1\n    }\n  })\n  return num > 0\n}\n\n/*\n  Given a list of the words that are the sentence, \n   print the number of boredoms.\n \n   For example:\n  >>> isBored(\"I am hungry\")\n  1\n  >>> isBored(\"I love you\")\n  1\n  >>> isBored(\"I love this weather\")\n  1\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored2 = (S) => {\n  const words = S.split(\".\")\n  const num = words.length - 1\n  const count = words.filter(e => e === \"I\")\n  return count.length === num\n}\n\nmodule.exports = {\n  isBored,\n  isBored2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === z || x === y + z || x === y - z || x === z + y || x === y - z;\n};\n\n/* Create a function that will take 2 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y) => {\n  return x === y + y || x === y - y || x === y + y;\n};\n\n/* Create a function that will take a number. \n   Returns true if one of the number will be equal to the sum of the other, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = x => {\n  return x === x + x || x === x - x || x === x + x;\n};\n\n/* Create a function that will take 3 numbers. \n   Returns true if all of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === x + y && x === x + z && x === z + y && x === y + z;\n};\n\n/* Create a function that will take 2 numbers. \n   Returns true if all of the numbers will be equal to the sum of the other, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y) => {\n  return x === x + y && x === y + x && x === x + y;\n};\n\n/* Create a function that will take a number. \n   Returns true if all of the number will be equal to the sum of the other, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = x => {\n  return x === x + x && x === x + x && x === x + x;\n};\n\n/* Create a function that will take 3 numbers. \n   Returns true if all of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === x + y && x === x + z && x === z + y && x === y + z;\n};\n\n/* Create a function that will take 2 numbers. \n   Returns true if all of the numbers will be equal to the sum of the other, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y) => {\n  return x === x + y && x === y + x && x === x + y;\n};\n\n/* Create a function that will take a number. \n   Returns true if all of the number will be equal to the sum of the other, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = x => {\n  return x === x + x && x === x + x && x === x + x;\n};\n\n/* Create a function that will take 3 numbers. \n   Returns true if all of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2)"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  // encode all letters in message\n  let alphabet = []\n  for (let i = 0; i < message.length; i++) {\n    alphabet.push(message[i].toUpperCase())\n  }\n\n  // sort alphabet\n  alphabet = alphabet.sort()\n\n  // replace vowels with the letter after them\n  for (let i = 0; i < message.length; i++) {\n    if (alphabet[i].match(/[AEIOU]/)) {\n      message = message.replace(alphabet[i], alphabet[i + 1])\n    }\n  }\n\n  return message\n}\n\n// encode all letters in message\nconst decode = (message) => {\n  // encode all letters in message\n  let alphabet = []\n  for (let i = 0; i < message.length; i++) {\n    alphabet.push(message[i].toUpperCase())\n  }\n\n  // sort alphabet\n  alphabet = alphabet.sort()\n\n  // replace vowels with the letter after them\n  for (let i = 0; i < message.length; i++) {\n    if (alphabet[i].match(/[AEIOU]/)) {\n      message = message.replace(alphabet[i], alphabet[i + 1])\n    }\n  }\n\n  return message\n}\n\nmodule.exports = {\n  encode,\n  decode\n}\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const primes = []\n  const sum = 0\n  const max = 0\n\n  for (let i = 2; i < 10e5; i++) {\n    const j = i + 1\n    if (j % 3 === 0) {\n      primes.push(j)\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    const number = Number(lst[i])\n    const digits = number.toString().split('')\n    const result = []\n    for (let i = 0; i < digits.length; i++) {\n      const value = parseInt(digits[i])\n      const isPrime = isPrime(value)\n      if (isPrime) {\n        if (value > max) {\n          max = value\n        }\n        result.push(value)\n      }\n    }\n    const product = result.reduce((p, c) => p * c, 1)\n    const sum = sum + product\n  }\n  console.log(max)\n  return sum\n}\n\nfunction isPrime(n) {\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst lst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\nconsole.log(skjkasdkd(lst))\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (key.toLowerCase()!== key.toUpperCase()) {\n      result = false;\n    }\n  }\n  return result;\n}\n\nconst testCase = {\n  \"checkDictCase\": checkDictCase\n};\n\nmodule.exports = testCase;<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  const isPrime = (num) => {\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  };\n  const isEven = (num) => {\n    return num % 2 === 0;\n  };\n  while (n > 0) {\n    const num = Math.floor(n / 2);\n    if (isPrime(num) &&!isEven(num)) {\n      arr.push(num);\n      n = n - num;\n    }\n  }\n  return arr;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const int1 = Math.abs(a);\n  const int2 = Math.abs(b);\n  const int1Digits = int1.toString().split('').reverse().map(x => x.toString()).join('');\n  const int2Digits = int2.toString().split('').reverse().map(x => x.toString()).join('');\n  return int1Digits.length * int2Digits.length;\n};\n\n// Tests\nconsole.log(multiply(1, 1));\nconsole.log(multiply(1, -1));\nconsole.log(multiply(-1, 1));\nconsole.log(multiply(-1, -1));\nconsole.log(multiply(-1, 1));\nconsole.log(multiply(1, -1));\nconsole.log(multiply(1, 0));\nconsole.log(multiply(1, -0));\nconsole.log(multiply(0, 1));\nconsole.log(multiply(0, -1));\nconsole.log(multiply(0, 0));\nconsole.log(multiply(0, -0));\nconsole.log(multiply(-0, 0));\nconsole.log(multiply(-0, 1));\nconsole.log(multiply(-0, -1));\nconsole.log(multiply(-0, -0));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(-1, -2));\nconsole.log(multiply(-2, -1));\nconsole.log(multiply(-1, 2));\nconsole.log(multiply(2, -1));\nconsole.log(multiply(1, -2));\nconsole.log(multiply(-2, 1));\nconsole.log(multiply(1, -1));\nconsole.log(multiply(-1, 1));\nconsole.log(multiply(1, -2));\nconsole.log(multiply(2, -1));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1, 2));\nconsole.log(multiply(2, 1));\nconsole.log(multiply(1"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    const upper = s.toUpperCase()\n    let count = 0\n    for (let i = 0; i < upper.length; i++) {\n        if (upper[i] == upper[i + 1]) {\n            count += 1\n        }\n    }\n    return count\n}\n\n/*\n  Given a string s, will count the number of lowercase vowels in odd will indice.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n    const lower = s.toLowerCase()\n    let count = 0\n    for (let i = 0; i < lower.length; i++) {\n        if (lower[i] == lower[i + 1]) {\n            count += 1\n        }\n    }\n    return count\n}\n\n/*\n  Given a string s, will count the number of vowels in even will indice.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 1\n  */\nconst countVowels = (s) => {\n    const lower = s.toLowerCase()\n    const upper = s.toUpperCase()\n    let count = 0\n    for (let i = 0; i < lower.length; i++) {\n        if (lower[i] == lower[i + 1]) {\n            count += 1\n        }\n    }\n    for (let i = 0; i < upper.length; i++) {\n        if (lower[i] == lower[i + 1]) {\n            count += 1\n        }\n    }\n    return count\n}\n\n/*\n  Given a string s, will count the number of vowels in odd will indice.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels2 = (s) => {\n    let count = 0\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] == s[i + 1]) {\n            count += 1\n        }\n    }\n    return count\n}\n\n/*\n  Given a string s, will count the number of vowels in even will indice.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 1\n  */\nconst countVowels3 = (s) => {\n    const vowels = [ 'a', 'e', 'i', 'o', 'u' ]\n    let count = 0\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.indexOf(s[i])!= -1) {\n            count += 1\n        }\n    }\n    return count\n}\n\n/*\n  Given a string s, will count the number of vowels in odd will indice.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels4 = (s) => {\n    let count = 0\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] == s[i + 1]) {\n            count += 1\n        }\n    }\n    return count\n}\n\n/*\n  Given a string s, will count the number of vowels in even will indice.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 1\n  */\nconst countVowels5 = (s) => {\n    const vowels = [ 'a', 'e', 'i', 'o', 'u' ]\n    let count = 0\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.indexOf(s[i]) == -1) {\n            count += 1\n        }\n    }\n    return count\n}\n\n/*\n  Given a string s, will count the number of vowels in odd will indice.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 1\n  */\nconst countVowels6 = (s) => {\n    const vowels = [ 'a', 'e', 'i', 'o', 'u' ]\n    let count = 0\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.indexOf(s[i])!= -1) {\n            count += 1\n        }\n    }\n    return count\n}\n\n/*\n  Given a string s, will count the number of vowels in even will indice.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 1\n  */\nconst countVowels7 = (s) => {\n    const vowels = [ 'a', 'e', 'i', 'o', 'u' ]\n    let count = 0\n    for (let i = 0; i < s.length - 1; i++) {\n        if (vowels.indexOf(s[i])!= -1) {\n            count += 1\n        }\n    }\n    return count\n}\n\n/*\n  Given a string s, will count the number of vowels in odd will indice.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  "}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const intValue = parseInt(value);\n  const closest = Math.abs(intValue) % 1 === 0? intValue : Math.round(intValue);\n  return closest;\n};\n\n// Tests\n// console.log(closestInteger(\"10\"));\n// console.log(closestInteger(\"15.3\"));\n// console.log(closestInteger(\"-14.5\"));\n\n// Reflection\n/*\nWhat was the most difficult part of this challenge?\n\nThe most difficult part was figuring out the math on the question,\nbut also knowing that the input had to be a string, and the output\nwas to be an integer.\n\nWhat did you learn about creating functions?\n\nI learned how to use the `return` statement to give a value\nback to the function when the function finishes. This is the\nmost useful feature of JavaScript.\n\nWhat are the biggest limitations of this challenge?\n\nThe biggest limitation is that the closestInteger function\nonly accepts a string, and there is no way to set the number\nof decimal places, since the `parseInt` function only takes\na number with no decimals.\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let levels = [n];\n  while (n > 1) {\n    n -= n & 1;\n    levels.push(n);\n  }\n  return levels;\n};\n\nconst makeAPile2 = (n) => {\n  const odd = (n & 1) > 0;\n  const even = (n & 1) === 0;\n  const nOdd = n - n & 1;\n  const nEven = n - n & 1;\n  return [n, nOdd, nEven];\n};\n\nconst makeAPile3 = (n) => {\n  if (n === 1) {\n    return [1];\n  } else if (n === 2) {\n    return [2];\n  }\n  let levels = [];\n  while (n > 1) {\n    levels.push(n);\n    n = (n + 1) & 1;\n  }\n  return levels;\n};\n\nexport {\n  makeAPile,\n  makeAPile2,\n  makeAPile3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/(?=\\s|,)/g);\n  const result = [];\n  words.forEach(word => result.push(word));\n  return result;\n};\n\n/*\n  Convert a number to base-10 using a given radix.\n\n  For example:\n  numberToBase(12, 2) == \"1002\"\n  numberToBase(12, 16) == \"f\"\n  */\nconst numberToBase = (n, radix) => {\n  return n.toString(radix).padStart(Math.log(radix) / Math.log(10), '0');\n};\n\n/*\n  Convert a number to base-16 using a given radix.\n\n  For example:\n  numberToBase(12, 16) == \"c\"\n  */\nconst numberToBase16 = (n, radix) => {\n  return n.toString(radix).padStart(Math.log(radix) / Math.log(16), '0');\n};\n\n/*\n  Convert a number to base-2 using a given radix.\n\n  For example:\n  numberToBase(12, 2) == \"1100\"\n  numberToBase(12, 4) == \"10\"\n  */\nconst numberToBase2 = (n, radix) => {\n  return n.toString(radix).padStart(Math.log(radix) / Math.log(2), '0');\n};\n\n/*\n  Convert a number to base-8 using a given radix.\n\n  For example:\n  numberToBase(12, 8) == \"100\"\n  */\nconst numberToBase8 = (n, radix) => {\n  return n.toString(radix).padStart(Math.log(radix) / Math.log(8), '0');\n};\n\n/*\n  Convert a number to base-32 using a given radix.\n\n  For example:\n  numberToBase(12, 32) == \"001002\"\n  numberToBase(12, 16) == \"d\"\n  */\nconst numberToBase32 = (n, radix) => {\n  return n.toString(radix).padStart(Math.log(radix) / Math.log(32), '0');\n};\n\n/*\n  Convert a number to base-64 using a given radix.\n\n  For example:\n  numberToBase(12, 64) == \"001002\"\n  */\nconst numberToBase64 = (n, radix) => {\n  return n.toString(radix).padStart(Math.log(radix) / Math.log(64), '0');\n};\n\n/*\n  Given a string of characters, return a string with characters in reverse order.\n\n  For example:\n  reverseString(\"CamelCase\") == \"cAMelCASE\"\n  */\nconst reverseString = (s) => {\n  return s.split('').reverse().join('');\n};\n\n/*\n  Given a string of characters, return a string with the same characters but with a \n   single letter uppercased.\n\n  For example:\n  upperCaseString(\"CamelCase\") == \"CamelCase\"\n  upperCaseString(\"CamelCase\") == \"camelCase\"\n  upperCaseString(\"CamelCase\") == \"camelCase\"\n  */\nconst upperCaseString = (s) => {\n  return s.split('').map(x => x.toUpperCase()).join('');\n};\n\n/*\n  Given a string of characters, return a string with the same characters but with a \n   single letter lowercased.\n\n  For example:\n  lowerCaseString(\"CamelCase\") == \"camelCase\"\n  lowerCaseString(\"CamelCase\") == \"camelCase\"\n  lowerCaseString(\"CamelCase\") == \"camelCase\"\n  */\nconst lowerCaseString = (s) => {\n  return s.split('').map(x => x.toLowerCase()).join('');\n};\n\n/*\n  Given a string of characters, return a string with the same characters but with a \n   single letter uppercased and with a single letter lowercased.\n\n  For example:\n  upperCaseAndLowerCaseString(\"CamelCase\") == \"camelCase\"\n  upperCaseAndLowerCaseString(\"CamelCase\") == \"camelCase\"\n  upperCaseAndLowerCaseString(\"CamelCase\") == \"camelCase\"\n  */\nconst upperAndLowerCaseString = (s) => {\n  return upperCaseString(s).split('').map(x => x.toLowerCase()).join('');\n};\n\n/*\n  Given a string of characters, return a string with the same characters but with the \n   same character repeated a specified number of times.\n\n  For example:\n  repeatString(\"CamelCase\", 3) == \"CamelCaseCamelCaseCamelCase\"\n  repeatString(\"CamelCase\", 3) == \"CamelCaseCamelCaseCamelCase\"\n  */\nconst repeatString = (s, times) => {\n  const result = [];\n  for (let i = 0; i < times; i++) {\n    result.push(s);\n  }\n  return result.join('');\n};\n\n/*\n  Given a string of characters, return a string with the same characters but with the \n   same character repeated a specified number of times, in reverse.\n\n  For example:\n  repeatReverseString(\"CamelCase\", 3) == \"CamelCaseCamelCaseCamelCase\"\n  */\nconst repeatReverseString = (s, times) => {\n  const result = [];\n  for (let i = 0; i < times; i++) {\n    result.push(s);\n  }\n  result.reverse();\n  return result.join('');\n};\n\n/*\n  Given a string of characters, return a string with the same characters but with \n   each character repeated a specified number of times.\n\n  For example:\n  repeatEachChar"}
{"task_id": "JavaScript/102", "prompt": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  // console.log(x, y);\n  // console.log(x > y);\n  if (x > y) {\n    return -1;\n  }\n  // console.log(x - y + 1);\n  let num = x - y + 1;\n  let max = Math.ceil(Math.sqrt(num));\n  let start = 2;\n  let i = 1;\n  let result;\n  while (i <= max) {\n    result = num - start;\n    if (result % 2 === 0) {\n      return result;\n    }\n    i += 1;\n    start += 2;\n  }\n  return -1;\n};\n\nconst chooseNum2 = (x, y) => {\n  let num = x - y + 1;\n  let max = Math.ceil(Math.sqrt(num));\n  let start = 2;\n  let i = 1;\n  let result;\n  while (i <= max) {\n    result = num - start;\n    if (result % 2 === 0) {\n      return result;\n    }\n    i += 1;\n    start += 2;\n  }\n  return -1;\n};\n\nmodule.exports = {\n  chooseNum,\n  chooseNum2\n};<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n >= m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / (m - n + 1);\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const a = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      a.push(x[i]);\n    }\n  }\n  return a;\n}\n\nexport default uniqueDigits;<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let sorted = arr.slice()\n  sorted.sort((a, b) => {\n    return a - b\n  })\n  let reversed = sorted.reverse()\n  let result = reversed.map(val => names[val])\n  return result\n}\n\nconsole.log(byLength([9, 2, 2, 2, 4, 3, 7, 1, 3, 6, 9]))\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const ret = [];\n  for (let i = 1; i <= n; i += 2) {\n    ret.push(i);\n  }\n  for (let i = 3; i <= n; i += 2) {\n    ret.push(ret.reduce((acc, elem) => acc * elem, i));\n  }\n  return ret;\n};\n\n/*\n  Example:\n  f(4) == [1, 2, 6, 24]\n  f(3) == [1, 2, 3]\n  */\nconst f2 = (n) => {\n  const ret = [];\n  for (let i = 1; i <= n; i++) {\n    ret.push(i);\n  }\n  return ret;\n};\n\n/*\n  Example:\n  f(4) == [1, 2, 6, 24]\n  f(3) == [1, 2, 3]\n  */\nconst f3 = (n) => {\n  const ret = [];\n  for (let i = 1; i <= n; i++) {\n    ret.push(i);\n  }\n  return ret;\n};\n\n/*\n  Example:\n  f(4) == [1, 2, 6, 24]\n  f(3) == [1, 2, 3]\n  */\nconst f4 = (n) => {\n  const ret = [];\n  for (let i = 1; i <= n; i++) {\n    ret.push(i);\n  }\n  return ret;\n};\n\n/*\n  Example:\n  f(4) == [1, 2, 6, 24]\n  f(3) == [1, 2, 3]\n  */\nconst f5 = (n) => {\n  const ret = [];\n  for (let i = 1; i <= n; i++) {\n    ret.push(i);\n  }\n  return ret;\n};\n\n/*\n  Example:\n  f(4) == [1, 2, 6, 24]\n  f(3) == [1, 2, 3]\n  */\nconst f6 = (n) => {\n  const ret = [];\n  for (let i = 1; i <= n; i++) {\n    ret.push(i);\n  }\n  return ret;\n};\n\n/*\n  Example:\n  f(4) == [1, 2, 6, 24]\n  f(3) == [1, 2, 3]\n  */\nconst f7 = (n) => {\n  const ret = [];\n  for (let i = 1; i <= n; i++) {\n    ret.push(i);\n  }\n  return ret;\n};\n\n/*\n  Example:\n  f(4) == [1, 2, 6, 24]\n  f(3) == [1, 2, 3]\n  */\nconst f8 = (n) => {\n  const ret = [];\n  for (let i = 1; i <= n; i++) {\n    ret.push(i);\n  }\n  return ret;\n};\n\n/*\n  Example:\n  f(4) == [1, 2, 6, 24]\n  f(3) == [1, 2, 3]\n  */\nconst f9 = (n) => {\n  const ret = [];\n  for (let i = 1; i <= n; i++) {\n    ret.push(i);\n  }\n  return ret;\n};\n\n/*\n  Example:\n  f(4) == [1, 2, 6, 24]\n  f(3) == [1, 2, 3]\n  */\nconst f10 = (n) => {\n  const ret = [];\n  for (let i = 1; i <= n; i++) {\n    ret.push(i);\n  }\n  return ret;\n};\n\n/*\n  Example:\n  f(4) == [1, 2, 6, 24]\n  f(3) == [1, 2, 3]\n  */\nconst f11 = (n) => {\n  const ret = [];\n  for (let i = 1; i <= n; i++) {\n    ret.push(i);\n  }\n  return ret;\n};\n\n/*\n  Example:\n  f(4) == [1, 2, 6, 24]\n  f(3) == [1, 2, 3]\n  */\nconst f12 = (n) => {\n  const ret = [];\n  for (let i = 1; i <= n; i++) {\n    ret.push(i);\n  }\n  return ret;\n};\n\n/*\n  Example:\n  f(4) == [1, 2, 6, 24]\n  f(3) == [1, 2, 3]\n  */\nconst f13 = (n) => {\n  const ret = [];\n  for (let i = 1; i <= n; i++) {\n    ret.push(i);\n  }\n  return ret;\n};\n\n/*\n  Example:\n  f(4) == [1, 2, 6, 24]\n  f(3) == [1, 2, 3]\n  */\nconst f14 = (n) => {\n  const ret = [];\n  for (let i = 1; i <= n; i++) {\n    ret.push(i);\n  }\n  return ret;\n};\n\n/*\n  Example:\n  f(4) == [1, 2, 6, 24]\n  f(3) == [1, 2, 3]\n  */\nconst f15 = (n) => {\n  const ret = [];\n  for (let i = 1; i <= n; i++) {\n    ret.push(i);\n  }\n  return ret;\n};\n\n/*\n  Example:\n  f(4) == [1, 2, 6, 24]\n  f(3) == [1, 2, 3]\n  */\nconst f16 = (n) => {\n  const ret = [];\n"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let p = i;\n    while (p) {\n      if (p % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      p = p / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let p = i;\n    while (p) {\n      if (p % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      p = p / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let p = i;\n    while (p) {\n      if (p % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      p = p / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let p = i;\n    while (p) {\n      if (p % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      p = p / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let p = i;\n    while (p) {\n      if (p % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      p = p / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let p = i;\n    while (p) {\n      if (p % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      p = p / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let p = i;\n    while (p) {\n      if (p % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      p = p / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let p = i;\n    while (p) {\n      if (p % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      p = p / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let p = i;\n    while (p) {\n      if (p % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      p = p / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let p = i;\n    while (p) {\n      if (p % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      p = p / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let p = i;\n    while (p) {\n      if (p % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      p = p / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let p = i;\n    while (p) {\n      if (p % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      p = p / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let p = i;\n    while (p) {\n"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const nums = arr.filter(num => num > 0)\n  return nums.reduce((prev, curr) => curr === prev? prev + 1 : 0)\n}\n\n/*\n  Write a function countDigits which will take an integer and returns the number \n   of digits. If a number will be negative, then its first will sign digit will be \n   negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countDigits(-123) == 3\n  >>> countDigits(123) == 3\n  >>> countDigits(1111) == 3\n  */\nconst countDigits = (num) => {\n  const n = num < 0? -num : num\n  const res = n === 0? 1 : n.toString().split('').reduce((prev, curr, idx) => {\n    if (idx === 0 && n < 0) {\n      return -1 * prev\n    }\n    return prev + (n % 10 === 0? 0 : 1)\n  }, 0)\n  return res\n}\n\n/*\n  Write a function countSigns which will take an array of integers and returns \n   the number of elements which will have a sign of '+' or '-'. \n  If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countSigns([]) == 0\n  >>> countSigns([1, 11, -11]) == 1\n  >>> countSigns([1, 1, 2]) == 2\n  */\nconst countSigns = (arr) => {\n  return arr.reduce((prev, curr) => curr === prev? prev + 1 : 0)\n}\n\n/*\n  Write a function countLowers which will take an array of integers and returns \n   the number of elements which will have a first letter lower.\n  If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countLowers([]) == 0\n  >>> countLowers([1, 11, -11]) == 1\n  >>> countLowers([1, 1, 2]) == 1\n  */\nconst countLowers = (arr) => {\n  return arr.reduce((prev, curr) => curr === prev? prev + 1 : 0)\n}\n\n/*\n  Write a function countUppers which will take an array of integers and returns \n   the number of elements which will have a first letter upper.\n  If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countUppers([]) == 0\n  >>> countUppers([1, 11, -11]) == 1\n  >>> countUppers([1, 1, 2]) == 1\n  */\nconst countUppers = (arr) => {\n  return arr.reduce((prev, curr) => curr === prev? prev + 1 : 0)\n}\n\n/*\n  Write a function countLowerSigns which will take an array of integers and returns \n   the number of elements which will have a first letter lower and '+' or '-' sign.\n  If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countLowerSigns([]) == 0\n  >>> countLowerSigns([1, 11, -11]) == 1\n  >>> countLowerSigns([1, 1, 2]) == 2\n  */\nconst countLowerSigns = (arr) => {\n  return arr.reduce((prev, curr) => curr === prev? prev + 1 : 0)\n}\n\n/*\n  Write a function countUpperSigns which will take an array of integers and returns \n   the number of elements which will have a first letter upper and '+' or '-' sign.\n  If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countUpperSigns([]) == 0\n  >>> countUpperSigns([1, 11, -11]) == 1\n  >>> countUpperSigns([1, 1, 2]) == 2\n  */\nconst countUpperSigns = (arr) => {\n  return arr.reduce((prev, curr) => curr === prev? prev + 1 : 0)\n}\n\n/*\n  Write a function countLowerUppers which will take an array of integers and returns \n   the number of elements which will have a first letter lower and '+' or '-' sign.\n  If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countLowerUppers([]) == 0\n  >>> countLowerUppers([1, 11, -11]) == 1\n  >>> countLowerUppers([1, 1, 2]) == 2\n  */\nconst countLowerUppers = (arr) => {\n  return arr.reduce((prev, curr) => curr === prev? prev + 1 : 0)\n}\n\n/*\n  Write a function countUpperUppers which will take an array of integers and returns \n   the number of elements which will have a first letter upper and '+' or '-' sign.\n  If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countUpperUppers([]) == 0\n  >>> countUpperUppers([1, 11, -11]) == 1\n  >>> countUpperUppers([1, 1, 2]) == 2\n  */\nconst countUpperUppers = (arr) => {\n  return arr.reduce((prev, curr) => curr === prev? prev + 1 : 0)\n}"}
{"task_id": "JavaScript/109", "prompt": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let count = 0;\n  let i = 0;\n  let result = true;\n  for (i = 0; i < arr.length - 1; i++) {\n    while (count++ < arr.length - i) {\n      arr[i] = arr[i + 1];\n      arr[i + 1] = arr[i + 2];\n      arr[i + 2] = arr[i + 3];\n    }\n    if (arr[i] > arr[i + 1]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst moveOneBall_1 = (arr) => {\n  let i = 0;\n  while (arr[arr.length - 1] >= arr[0]) {\n    arr.pop();\n    if (arr[arr.length - 1] < arr[0]) {\n      arr.unshift(arr[arr.length - 1]);\n    }\n  }\n};\n\nmoveOneBall([3, 4, 5, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2, 0, 3]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 5, 6, 7]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 5, 6, 7, 0, 8, 9]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 5, 6, 7, 8, 9, 0, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5,"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n    const len = lst1.length;\n    const len2 = lst2.length;\n    let i, j;\n    const c = {};\n    for (i = 0; i < len; i++) {\n        for (j = 0; j < len2; j++) {\n            c[lst1[i] + lst2[j]] = true;\n        }\n    }\n    const res = Object.keys(c).every(item => item % 2 === 0);\n    return res;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('').filter((c) => c.match(/[a-z]/i));\n  let max = 0;\n  let max_letter = '';\n  \n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    let count = 0;\n    for (let j = 0; j < letters.length; j++) {\n      if (letter === letters[j]) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max = count;\n      max_letter = letter;\n    }\n    histogram[letter] = count;\n  }\n  return histogram;\n};\n\nconsole.log(histogram('a b c'));\nconsole.log(histogram('a b b a'));\nconsole.log(histogram('b b b b a'));\nconsole.log(histogram(''));\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let cLength = c.length\n  let sLength = s.length\n  let index = 0\n  let result = \"\"\n  while (index < sLength) {\n    if (s.charAt(index) === c.charAt(0)) {\n      if (index + cLength - 1 < sLength && c.indexOf(s.charAt(index + cLength - 1))!== -1) {\n        result += s.charAt(index + cLength - 1)\n        index += cLength - 1\n      } else {\n        result += s.charAt(index)\n        index += 1\n      }\n    } else {\n      result += s.charAt(index)\n      index += 1\n    }\n  }\n  let isPalindrome = result === s.split('').reverse().join('')\n  return [result, isPalindrome]\n}\n\nconst reverseDeleteTest = [\n  \"abcde\",\n  \"abcdef\",\n  \"acdef\",\n  \"abcdedcba\",\n  \"cdedc\"\n]\n\nreverseDeleteTest.forEach(s => {\n  const [result, isPalindrome] = reverseDelete(s, \"ae\")\n  console.log(`s = ${s}, c = ${c}, result = ${result}, isPalindrome = ${isPalindrome}`)\n})\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  return lst.reduce((acc, elem, i) => {\n    if(elem.length % 2!== 0) {\n      acc.push(elem.length)\n    }\n    return acc\n  }, [])\n}\n\nmodule.exports = oddCount\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  if(!nums || nums.length === 0) {\n    return 0;\n  }\n\n  const sum = nums[0];\n  const minSum = sum;\n\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if(sum < minSum) {\n      minSum = sum;\n    }\n  }\n\n  return minSum;\n}\n\nexport { minSubArraySum };\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const m = grid.length\n  const n = grid[0].length\n\n  const fill = grid.map((row, i) => row.map((cell, j) => cell === 1? 1 : 0))\n\n  const dp = new Array(m).fill(0)\n  const dp2 = new Array(m).fill(0)\n\n  for (let i = 0; i < m; i++) {\n    dp[i] = dp[i] + fill[i][0]\n  }\n\n  for (let i = 1; i < m; i++) {\n    dp2[i] = dp2[i] + fill[i][0]\n  }\n\n  let ans = 0\n  for (let i = 0; i < m; i++) {\n    let res = 0\n    for (let j = 0; j < n; j++) {\n      if (fill[i][j] === 1) {\n        res = res + dp[i - 1]\n      } else if (fill[i][j] === 0) {\n        res = res + dp2[i - 1]\n      }\n    }\n    if (res > capacity) {\n      ans = ans + 1\n    }\n  }\n  return ans\n}\n\nconsole.log(dp(grid, 1))\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const oneIndex = arr.findIndex((element) => element === 1);\n  const count = oneIndex.length;\n  const ones = arr.slice(0, count);\n  const zeroIndex = arr.findIndex((element) => element === 0);\n  const countZero = zeroIndex.length;\n  const zeros = arr.slice(countZero, count);\n  const numberOfOne = oneIndex.length;\n  const numberOfZero = zeroIndex.length;\n  const sortByOne = (array) => {\n    return array.sort((a, b) => {\n      let aString = a.toString(2);\n      let bString = b.toString(2);\n      let aNumber = parseInt(aString, 2);\n      let bNumber = parseInt(bString, 2);\n      return aNumber - bNumber;\n    });\n  };\n  const sortByZero = (array) => {\n    return array.sort((a, b) => {\n      let aString = a.toString(2);\n      let bString = b.toString(2);\n      let aNumber = parseInt(aString, 2);\n      let bNumber = parseInt(bString, 2);\n      return aNumber - bNumber;\n    });\n  };\n  return [sortByOne(ones), sortByZero(zeros)];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  // Your function should return a list of words from s\n  // that will contain exactly n consonants,\n  // in order they will appear in the string s.\n  let result = [];\n  let word = \"\";\n  for(let i = 0; i < n; i++){\n    word = s.charAt(i);\n    if(word == \" \"){\n      if(result.length > 0){\n        result.push(word);\n      }\n      word = \"\";\n    } else {\n      if(result.length === 0){\n        result.push(word);\n      }\n      word = \"\";\n    }\n  }\n  if(word!= \"\"){\n    result.push(word);\n  }\n  return result;\n}\n\n//console.log(selectWords(\"Hello world\", 3));\n//console.log(selectWords(\"Mary had a little lamb\", 3));\n//console.log(selectWords(\"Uncle sam\", 3));\nconsole.log(selectWords(\"Mary had a little lamb\", 4));\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  if (!word) return \"\";\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const wordArray = word.toLowerCase().split('');\n  const start = wordArray.length - 1;\n  let current = start;\n  let last = start;\n  let lastDist = Infinity;\n  let found = false;\n  while (current >= 0 &&!found) {\n    last = current;\n    while (current >= 0 && vowels.indexOf(wordArray[current]) < 0) {\n      --current;\n    }\n    if (current < 0) {\n      break;\n    }\n    let currDist = 0;\n    for (let i = last; i < current; i++) {\n      currDist += Math.abs(wordArray[i] - wordArray[i + 1]);\n    }\n    if (currDist < lastDist) {\n      lastDist = currDist;\n      found = true;\n    }\n  }\n  if (!found) return \"\";\n  return wordArray[current] + wordArray[current + 1];\n};\n\nconsole.log(getClosestVowel(\"YOGURT\"));\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  // the list of string to match\n  const list = lst;\n  // the result of the matching\n  const result = [];\n  // to record the matched string\n  let matched = 0;\n  // to record the index of the matched string\n  let index = 0;\n  // to record the matched opening or closing parentheses\n  let ch ='';\n  // to record the depth of the matched parentheses\n  let depth = 0;\n\n  for (let i = 0; i < list.length; i++) {\n    // to check if the current element is the opening one\n    if (list[i] === '(') {\n      // to record the index of the opening one\n      index = i;\n      // to record the depth of the opening one\n      depth = 1;\n    }\n    // to check if the current element is the closing one\n    else if (list[i] === ')') {\n      // to record the index of the closing one\n      index = i;\n      // to record the depth of the closing one\n      depth = 0;\n    }\n    // to check if the current element is a good one\n    else if (depth === 0) {\n      // to check if the current element is the opening one\n      if (list[i] === '(') {\n        // to record the index of the opening one\n        index = i;\n        // to record the depth of the opening one\n        depth = 1;\n      }\n      // to check if the current element is the closing one\n      else if (list[i] === ')') {\n        // to record the index of the closing one\n        index = i;\n        // to record the depth of the closing one\n        depth = 0;\n      }\n    }\n    // to record the matched string\n    if (depth === 0) {\n      result.push(list[i]);\n    }\n    // to record the matched opening or closing parentheses\n    else if (depth === 1) {\n      ch = list[i];\n    }\n  }\n\n  // to check if the result is a good one\n  if (result.length === 0) {\n    return 'No';\n  }\n\n  // to check if the result is a good one\n  else if (result.length === 1) {\n    return 'Yes';\n  }\n\n  // to check if the result is a good one\n  else if (result.length === 2) {\n    // to check if the current string is the good one\n    if (result[0] === result[1]) {\n      return 'Yes';\n    }\n  }\n\n  // to check if the result is a good one\n  else if (result.length === 3) {\n    // to check if the current string is the good one\n    if (result[0] === result[1] && result[0] === result[2]) {\n      return 'Yes';\n    }\n  }\n\n  // to check if the result is a good one\n  else if (result.length === 4) {\n    // to check if the current string is the good one\n    if (result[0] === result[1] && result[0] === result[2] && result[0] === result[3]) {\n      return 'Yes';\n    }\n  }\n\n  // to check if the result is a good one\n  else if (result.length === 5) {\n    // to check if the current string is the good one\n    if (result[0] === result[1] && result[0] === result[2] && result[0] === result[3] && result[0] === result[4]) {\n      return 'Yes';\n    }\n  }\n\n  // to check if the result is a good one\n  else if (result.length === 6) {\n    // to check if the current string is the good one\n    if (result[0] === result[1] && result[0] === result[2] && result[0] === result[3] && result[0] === result[4] && result[0] === result[5]) {\n      return 'Yes';\n    }\n  }\n\n  // to check if the result is a good one\n  else if (result.length === 7) {\n    // to check if the current string is the good one\n    if (result[0] === result[1] && result[0] === result[2] && result[0] === result[3] && result[0] === result[4] && result[0] === result[5] && result[0] === result[6]) {\n      return 'Yes';\n    }\n  }\n\n  // to check if the result is a good one\n  else if (result.length === 8) {\n    // to check if the current string is the good one\n    if (result[0] === result[1] && result[0] === result[2] && result[0] === result[3] && result[0] === result[4] && result[0] === result[5] && result[0] === result[6] && result[0] === result[7]) {\n      return 'Yes';\n    }\n  }\n\n  // to check if the result is a good one\n  else if (result.length === 9) {\n    // to check if the current string is the good one\n    if (result[0] === result[1] && result[0] === result[2] && result[0] === result[3] && result[0] === result[4] && result[0] === result[5] && result[0] === result[6] && result[0] === result[7] && result[0] === result[8]) {\n      return 'Yes';\n    }\n  }\n\n  // to check if the result is a good one\n  else if (result.length === 10) {\n"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let max = arr[0];\n  let min = arr[0];\n  let diff = 0;\n  let start = 0;\n  let end = 0;\n  \n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      diff = i;\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n      diff = i;\n    }\n  }\n\n  start = Math.max(0, diff - k);\n  end = Math.min(k - 1, diff);\n\n  return arr.slice(start, end + 1);\n};\n\nexport default maximum;\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  return lst.reduce((acc, item) => {\n    if (item % 2 === 0) {\n      return acc + item;\n    } else {\n      return acc;\n    }\n  }, 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nmodule.exports = addElements\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let arr = [];\n  let last = n;\n  while (n > 1) {\n    if (n % 2 === 1) {\n      last = n;\n      arr.push(last);\n    }\n    n = Math.floor(n / 2);\n  }\n  return arr;\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (typeof date ==='string' &&\n    date.length === 10 &&\n    date.split('-')\n   .every((value, index, arr) => {\n      const dateValue = parseInt(value, 10);\n      if (index === 0) {\n        if (dateValue < 1 || dateValue > 31) {\n          return false;\n        }\n      } else if (index === 2) {\n        if (dateValue < 1 || dateValue > 30) {\n          return false;\n        }\n      } else if (index === 4) {\n        if (dateValue < 1 || dateValue > 29) {\n          return false;\n        }\n      } else if (index === 6) {\n        if (dateValue < 1 || dateValue > 12) {\n          return false;\n        }\n      }\n      return true;\n    })) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  This function will return the next year from the given year.\n  for example: \n  nextYear(2000) => 2011\n\n  nextYear(2020) => 2020\n  */\nconst nextYear = (year) => {\n  const currentYear = new Date().getFullYear();\n  return (year + 1) % currentYear;\n};\n\n/*\n  This function will return the previous year from the given year.\n  for example: \n  previousYear(2011) => 2010\n\n  previousYear(2020) => 2020\n  */\nconst previousYear = (year) => {\n  const currentYear = new Date().getFullYear();\n  return (year - 1) % currentYear;\n};\n\n/*\n  This function will return the next month from the given month.\n  for example: \n  nextMonth(10) => 11\n\n  nextMonth(4) => 5\n  */\nconst nextMonth = (month) => {\n  const currentMonth = new Date().getMonth();\n  return (month + 1) % 12;\n};\n\n/*\n  This function will return the previous month from the given month.\n  for example: \n  previousMonth(11) => 10\n\n  previousMonth(5) => 4\n  */\nconst previousMonth = (month) => {\n  const currentMonth = new Date().getMonth();\n  return (month - 1) % 12;\n};\n\n/*\n  This function will return the next day from the given day.\n  for example: \n  nextDay(31) => 1\n\n  nextDay(25) => 26\n\n  nextDay(20) => 21\n\n  nextDay(4) => 5\n  */\nconst nextDay = (day) => {\n  const currentDay = new Date().getDate();\n  return (day + 1) % 31;\n};\n\n/*\n  This function will return the previous day from the given day.\n  for example: \n  previousDay(1) => 31\n\n  previousDay(26) => 25\n\n  previousDay(21) => 20\n\n  previousDay(4) => 4\n  */\nconst previousDay = (day) => {\n  const currentDay = new Date().getDate();\n  return (day - 1) % 31;\n};\n\n/*\n  This function will return the next week from the given week.\n  for example: \n  nextWeek(0) => 1\n\n  nextWeek(4) => 5\n\n  nextWeek(2) => 3\n  */\nconst nextWeek = (week) => {\n  const currentWeek = new Date().getWeek();\n  return (week + 1) % 5;\n};\n\n/*\n  This function will return the previous week from the given week.\n  for example: \n  previousWeek(1) => 0\n\n  previousWeek(5) => 4\n\n  previousWeek(3) => 2\n  */\nconst previousWeek = (week) => {\n  const currentWeek = new Date().getWeek();\n  return (week - 1) % 5;\n};\n\n/*\n  This function will return the next year from the given year.\n  for example: \n  nextYear(2000) => 2001\n\n  nextYear(2010) => 2011\n  */\nconst getNextYear = (year) => {\n  return nextYear(year);\n};\n\n/*\n  This function will return the previous year from the given year.\n  for example: \n  previousYear(2001) => 2000\n\n  previousYear(2011) => 2010\n  */\nconst getPreviousYear = (year) => {\n  return previousYear(year);\n};\n\n/*\n  This function will return the next month from the given month.\n  for example: \n  nextMonth(10) => 11\n\n  nextMonth(4) => 5\n  */\nconst getNextMonth = (month) => {\n  return nextMonth(month);\n};\n\n/*\n  This function will return the previous month from the given month.\n  for example: \n  previousMonth(11) => 10\n\n  previousMonth(5) => 4\n  */\nconst getPreviousMonth = (month) => {\n  return previousMonth(month);\n};\n\n/*\n  This function will return the next day from the given day.\n  for example: \n  nextDay(31) => 1\n\n  nextDay(25) => 26\n\n  nextDay(20) => 21\n\n  nextDay(4) => 5\n  */\nconst getNextDay = (day) => {\n  return nextDay(day);\n};\n\n/*"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  txt = txt.toLowerCase();\n  const words = txt.split(/\\s+/);\n  const arr = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 1) {\n      arr.push(word);\n    }\n  }\n  return arr;\n}\n\nconst isPalindrome = (txt) => {\n  txt = txt.toLowerCase();\n  const arr = splitWords(txt);\n  let flag = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].length > 1) {\n      if (arr[i].charAt(0)!== arr[arr.length - i - 1].charAt(0)) {\n        flag = false;\n        break;\n      }\n    }\n  }\n  return flag;\n}\n\nconst sumDigits = (n) => {\n  return (n % 10) + ((n - n % 10) / 10);\n}\n\nconst isOdd = (n) => {\n  return n % 2 === 1;\n}\n\nconst numToChar = (n) => {\n  return String.fromCharCode(n);\n}\n\nconst getNumToChar = (arr) => {\n  return arr.map(numToChar);\n}\n\nconst numToCharToNum = (arr) => {\n  return arr.map(numToChar).join('');\n}\n\nconst getNumToCharToNum = (arr) => {\n  return arr.map(numToCharToNum);\n}\n\nconst getOddChars = (arr) => {\n  return arr.filter(isOdd);\n}\n\nconst isOddChars = (arr) => {\n  return arr.filter(isOdd);\n}\n\nconst getAllOddChars = (arr) => {\n  return arr.filter(isOdd);\n}\n\nconst getNumToCharToOddChars = (arr) => {\n  return arr.map(getAllOddChars);\n}\n\nconst getAllOddChars = (arr) => {\n  return arr.filter(isOdd);\n}\n\nconst getNumToCharToNumOddChars = (arr) => {\n  return arr.map(getAllOddChars);\n}\n\nconst isEven = (n) => {\n  return n % 2 === 0;\n}\n\nconst getAllEvenChars = (arr) => {\n  return arr.filter(isEven);\n}\n\nconst getNumToCharToEvenChars = (arr) => {\n  return arr.map(getAllEvenChars);\n}\n\nconst getAllEvenChars = (arr) => {\n  return arr.filter(isEven);\n}\n\nconst getNumToCharToNumEvenChars = (arr) => {\n  return arr.map(getAllEvenChars);\n}\n\nconst getAllOddNumChars = (arr) => {\n  return arr.filter(isOdd);\n}\n\nconst getNumToCharToOddNumChars = (arr) => {\n  return arr.map(getAllOddNumChars);\n}\n\nconst getAllOddNumChars = (arr) => {\n  return arr.filter(isOdd);\n}\n\nconst getNumToCharToNumOddNumChars = (arr) => {\n  return arr.map(getAllOddNumChars);\n}\n\nconst isOddNumChars = (arr) => {\n  return arr.filter(isOdd);\n}\n\nconst getOddNumChars = (arr) => {\n  return arr.filter(isOdd);\n}\n\nconst getAllOddNumChars = (arr) => {\n  return arr.filter(isOdd);\n}\n\nconst isEvenNumChars = (arr) => {\n  return arr.filter(isEven);\n}\n\nconst getAllEvenNumChars = (arr) => {\n  return arr.filter(isEven);\n}\n\nconst getAllEvenNumChars = (arr) => {\n  return arr.filter(isEven);\n}\n\nconst getNumToCharToNumOddNumChars = (arr) => {\n  return arr.map(getAllOddNumChars);\n}\n\nconst getNumToCharToNumEvenNumChars = (arr) => {\n  return arr.map(getAllEvenNumChars);\n}\n\nconst getNumToCharToNumOddNumChars = (arr) => {\n  return arr.map(getAllOddNumChars);\n}\n\nconst getNumToCharToNumEvenNumChars = (arr) => {\n  return arr.map(getAllEvenNumChars);\n}\n\nconst getNumToCharToNumOddNumChars = (arr) => {\n  return arr.map(getAllOddNumChars);\n}\n\nconst getAllOddNumChars = (arr) => {\n  return arr.filter(isOdd);\n}\n\nconst getAllOddNumChars = (arr) => {\n  return arr.filter(isOdd);\n}\n\nconst getAllEvenNumChars = (arr) => {\n  return arr.filter(isEven);\n}\n\nconst getAllEvenNumChars = (arr) => {\n  return arr.filter(isEven);\n}\n\nconst getAllOddNumChars = (arr) => {\n  return arr.filter(isOdd);\n}\n\nconst getAllOddNumChars = (arr) => {\n  return arr.filter(isOdd);\n}\n\nconst getAllEvenNumChars = (arr) => {\n  return arr.filter(isEven);\n}\n\nconst"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n    if (lst.length === 0) {\n        return true;\n    }\n    const last = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < last) {\n            return false;\n        }\n        last = lst[i];\n    }\n    return true;\n}\n\n/*\nGiven a list of numbers, return whether or not they will be sorted \nin ascending order. If list will have more than 1 duplicate of the same \nnumber, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n    if (lst.length === 0) {\n        return true;\n    }\n    const last = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] > last) {\n            return false;\n        }\n        last = lst[i];\n    }\n    return true;\n}\n\nconst isSorted = (lst) => {\n    if (lst.length === 0) {\n        return true;\n    }\n    const last = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < last) {\n            return false;\n        }\n        last = lst[i];\n    }\n    return true;\n}\n\nexport {\n    isSorted\n}\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n    if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n        return \"NO\";\n    }\n    const start = Math.min(interval1[0], interval2[0]);\n    const end = Math.max(interval1[1], interval2[1]);\n    if (end - start < 2) {\n        return \"NO\";\n    }\n    return (Math.pow(end - start, 2) - (start - 1) * (end - 1)) % 2 === 0? \"YES\" : \"NO\";\n};\n\n// Your function here.\n// This function is called by the interpreter.\n// It is a part of the exercise.\nconst testIntersection = (interval1, interval2) => {\n    return intersection(interval1, interval2);\n};\n\nconst test = testIntersection;\n\nconsole.log(test([\"1\", \"2\"], [\"2\", \"3\"]));\nconsole.log(test([\"-1\", \"1\"], [\"0\", \"4\"]));\nconsole.log(test([\"-3\", \"-1\"], [\"-5\", \"5\"]));\nconsole.log(test([\"-1\", \"1\"], [\"-1\", \"1\"]));\nconsole.log(test([\"-1\", \"1\"], [\"2\", \"3\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n    if (arr.length === 0) {\n        return null;\n    }\n\n    let sum = 0;\n    let sign = 1;\n    let p = 1;\n    let sign_tmp = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sign_tmp = (arr[i] > 0? 1 : -1);\n        sign *= sign_tmp;\n        p *= sign_tmp;\n        sum += Math.abs(arr[i]) * sign_tmp;\n    }\n    return sum * p;\n};\n\n/*\n  You will be given an array arr of integers and you will need to return\n   max sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> maxProdSigns([1, 2, 2, -4]) == 6\n  >>> maxProdSigns([0, 1]) == 0\n  >>> maxProdSigns([]) == null\n  */\nconst maxProdSigns = (arr) => {\n    if (arr.length === 0) {\n        return null;\n    }\n\n    let sum = 0;\n    let sign = 1;\n    let p = 1;\n    let sign_tmp = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sign_tmp = (arr[i] > 0? 1 : -1);\n        sign *= sign_tmp;\n        p *= sign_tmp;\n        sum += Math.abs(arr[i]) * sign_tmp;\n    }\n    return sum * p;\n};\n\n/*\n  You will be given an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> sumProdSigns([1, 2, 2, -4]) == -9\n  >>> sumProdSigns([0, 1]) == 0\n  >>> sumProdSigns([]) == null\n  */\nconst sumProdSigns = (arr) => {\n    if (arr.length === 0) {\n        return null;\n    }\n\n    let sum = 0;\n    let sign = 1;\n    let p = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sign *= (arr[i] > 0? 1 : -1);\n        p *= (arr[i] > 0? 1 : -1);\n        sum += Math.abs(arr[i]) * sign;\n    }\n    return sum * p;\n};\n\n/*\n  You will be given an array arr of integers and you will need to return\n   max sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> maxSumProdSigns([1, 2, 2, -4]) == 8\n  >>> maxSumProdSigns([0, 1]) == 0\n  >>> maxSumProdSigns([]) == null\n  */\nconst maxSumProdSigns = (arr) => {\n    if (arr.length === 0) {\n        return null;\n    }\n\n    let sum = 0;\n    let sign = 1;\n    let p = 1;\n    for (let i = 0; i < arr.length; i++) {\n        sign *= (arr[i] > 0? 1 : -1);\n        p *= (arr[i] > 0? 1 : -1);\n        sum += Math.abs(arr[i]) * sign;\n    }\n    return sum * p;\n};\n\nexport {\n  maxProdSigns,\n  maxSumProdSigns,\n  sumProdSigns,\n  prodSigns\n};\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  if(!grid) return [];\n  if(grid.length === 0) return [];\n  if(k === 0) return [];\n  const m = grid.length;\n  const n = grid[0].length;\n  const gridData = [];\n  for(let i = 0; i < m; ++i){\n    for(let j = 0; j < n; ++j){\n      if(i === 0 || j === 0 || i === m-1 || j === n-1){\n        gridData.push(grid[i][j]);\n        continue;\n      }\n      const leftCell = grid[i-1][j];\n      const rightCell = grid[i+1][j];\n      const topCell = grid[i][j-1];\n      const bottomCell = grid[i][j+1];\n      if(leftCell < rightCell && topCell < bottomCell){\n        gridData.push(leftCell);\n        gridData.push(rightCell);\n        gridData.push(topCell);\n        gridData.push(bottomCell);\n      } else if(leftCell < rightCell){\n        gridData.push(leftCell);\n        gridData.push(rightCell);\n      } else if(topCell < bottomCell){\n        gridData.push(topCell);\n        gridData.push(bottomCell);\n      } else {\n        gridData.push(bottomCell);\n        gridData.push(topCell);\n      }\n    }\n  }\n  const sorted = gridData.sort((a, b) => {\n    return a - b;\n  });\n  return sorted.slice(0, k);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const fib = [1, 2]\n  const t = []\n\n  while (fib.length < n + 1) {\n    t.push(fib[fib.length - 1] + fib[fib.length - 2])\n    fib.push(fib[fib.length - 1] + fib[fib.length - 2])\n  }\n\n  return t\n}\n\nconsole.log(tri(4))\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let ans = 1\n  while (n > 0) {\n    if (n % 2 == 0) {\n      break\n    }\n    n /= 2\n    ans *= n\n  }\n  return ans\n}\n\nlet res = digits(1)\nfor (let i = 2; i <= 10; i++) {\n  res = res * i\n}\n\nconsole.log(res)<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n    let stack = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n        } else if (string[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n};\n\n/*\n  Given a string, find out if it has a valid subsequence of square brackets where at least one \n  bracket is nested. If it does, print \"true\", else print \"false\". \n   isNestedSubsequence('[][]') ➞ true \n   isNestedSubsequence('[]]]]]]][[[[[]') ➞ false \n   isNestedSubsequence('[][]') ➞ true \n   isNestedSubsequence('[]') ➞ false \n   isNestedSubsequence('[[][]]') ➞ true \n   isNestedSubsequence('[[]][[') ➞ true \n */ \nconst isNestedSubsequence = (string) => {\n    let stack = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n        } else if (string[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n};\n\n// console.log(isNestedSubsequence('[][]'));\n// console.log(isNestedSubsequence('[]]]]]]][[[[[]'));\n// console.log(isNestedSubsequence('[][]'));\n// console.log(isNestedSubsequence('[]'));\n// console.log(isNestedSubsequence('[[][]]'));\n// console.log(isNestedSubsequence('[[]][['));\n\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[]]]]]]][[[[[]'));\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[]'));\nconsole.log(isNested('[[][]]'));\nconsole.log(isNested('[[]][['));\n\n//console.log(isNestedSubsequence('[][]'));\n//console.log(isNestedSubsequence('[]]]]]]][[[[[]'));\n//console.log(isNestedSubsequence('[][]'));\n//console.log(isNestedSubsequence('[]'));\n//console.log(isNestedSubsequence('[[][]]'));\n//console.log(isNestedSubsequence('[[]][['));<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const arr = Array.from(lst);\n  const sum = arr.reduce((prev, curr) => prev + curr * curr, 0);\n  return Math.round(sum);\n}\n\nconst lst = [1,2,3];\n\nconsole.log(sumSquares(lst));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  if (!txt || txt.length === 0) return false;\n  const lastChar = txt.charAt(txt.length - 1);\n  return ((lastChar >= 'A' && lastChar <= 'Z') || (lastChar >= 'a' && lastChar <= 'z'));\n};\n\nconst checkIfFirstCharIsALetter = (txt) => {\n  if (!txt || txt.length === 0) return false;\n  const firstChar = txt.charAt(0);\n  return ((firstChar >= 'A' && firstChar <= 'Z') || (firstChar >= 'a' && firstChar <= 'z'));\n};\n\nconst isAlphanumeric = (txt) => {\n  if (!txt || txt.length === 0) return false;\n  const lastChar = txt.charAt(txt.length - 1);\n  return ((lastChar >= 'A' && lastChar <= 'Z') || (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= '0' && lastChar <= '9'));\n};\n\nconst isPunctuation = (txt) => {\n  if (!txt || txt.length === 0) return false;\n  const lastChar = txt.charAt(txt.length - 1);\n  return ((lastChar >= '!') && (lastChar <= '/') || (lastChar >= ':') && (lastChar <= '?') || (lastChar >= '@') && (lastChar <= 'Z') || (lastChar >= '_') && (lastChar <= '~') || (lastChar >= '0') && (lastChar <= '9') || (lastChar >= 'A') && (lastChar <= 'Z'));\n};\n\nconst isSpace = (txt) => {\n  if (!txt || txt.length === 0) return false;\n  const lastChar = txt.charAt(txt.length - 1);\n  return (lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r');\n};\n\nconst isNumber = (txt) => {\n  if (!txt || txt.length === 0) return false;\n  const lastChar = txt.charAt(txt.length - 1);\n  return (lastChar === '0') || (lastChar >= '1' && lastChar <= '9');\n};\n\nconst isWord = (txt) => {\n  if (!txt || txt.length === 0) return false;\n  const lastChar = txt.charAt(txt.length - 1);\n  return isAlphanumeric(txt) || isSpace(txt) || isPunctuation(txt) || isNumber(txt);\n};\n\nconst isCapitalizedWord = (txt) => {\n  if (!txt || txt.length === 0) return false;\n  const lastChar = txt.charAt(txt.length - 1);\n  return isAlphanumeric(txt) || isSpace(txt) || isPunctuation(txt) || isNumber(txt) || (lastChar === 'A' && txt.length > 1);\n};\n\nconst isAbbreviation = (txt) => {\n  if (!txt || txt.length === 0) return false;\n  const lastChar = txt.charAt(txt.length - 1);\n  return (lastChar === 'a') || (lastChar === 'A');\n};\n\nconst isUpperCase = (txt) => {\n  if (!txt || txt.length === 0) return false;\n  const lastChar = txt.charAt(txt.length - 1);\n  return (lastChar >= 'A' && lastChar <= 'Z');\n};\n\nconst isLowerCase = (txt) => {\n  if (!txt || txt.length === 0) return false;\n  const lastChar = txt.charAt(txt.length - 1);\n  return (lastChar >= 'a' && lastChar <= 'z');\n};\n\nconst isCapitalized = (txt) => {\n  if (!txt || txt.length === 0) return false;\n  const lastChar = txt.charAt(txt.length - 1);\n  return isUpperCase(txt) || isLowerCase(txt);\n};\n\nconst isTitleCase = (txt) => {\n  if (!txt || txt.length === 0) return false;\n  const lastChar = txt.charAt(txt.length - 1);\n  return isCapitalized(txt) || (lastChar ==='');\n};\n\nconst isCapitalizedTitleCase = (txt) => {\n  if (!txt || txt.length === 0) return false;\n  const lastChar = txt.charAt(txt.length - 1);\n  return isCapitalized(txt) || isTitleCase(txt);\n};\n\nconst isAllLowerCase = (txt) => {\n  if (!txt || txt.length === 0) return false;\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar ==='' || isLowerCase(txt);\n};\n\nconst isAllUpperCase = (txt) => {\n  if (!txt || txt.length === 0) return false;\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar ==='' || isUpperCase(txt);\n};\n\nconst isFirstLetterCapitalized = (txt) => {\n  if (!txt || txt.length === 0) return false;\n  const firstChar = txt.charAt(0);\n  return firstChar === 'A' || firstChar === 'E' || firstChar === 'I' || firstChar === 'O' || firstChar === 'U';\n};\n\nconst isAllUppercase = (txt) => {\n  if (!txt || txt.length === 0) return false;\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar ==='' || isU"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const len = arr.length\n  let maxIndex = -1\n  let index = 0\n  let prev = -1\n  while (index < len) {\n    if (arr[index] < arr[prev]) {\n      maxIndex = index\n      break\n    }\n    prev = index\n    index++\n  }\n  return maxIndex\n}\n\nconsole.log(canArrange([1,2,3,4,5,6])) // 3\nconsole.log(canArrange([1,2,3,4,5,6,7,8,9,10,11])) // 3\nconsole.log(canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])) // 4\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return (null, null);\n  }\n  let max = lst[0];\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      min = lst[i];\n    } else {\n      max = lst[i];\n    }\n  }\n  return ([max, min]);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n  if (isNaN(a) && isNaN(b)) return null;\n  if (a < b) return a;\n  if (a > b) return b;\n  if (a === b) return null;\n  return b;\n}\n\nconst test = compareOne;\nconsole.log(test(1,2.5));\nconsole.log(test(1,\" 2,3\"));\nconsole.log(test(\"5,1\",\" 6\"));\nconsole.log(test(\"1\", 1));\nconsole.log(test(1,1));\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n % 2!== 0) {\n    return false;\n  }\n  const sum = n;\n  for (let i = 3; i <= n; i += 2) {\n    if (sum % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport default isEqualToSumEven;<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  else {\n    return (n * specialFactorial(n - 1)) + (n - 1);\n  }\n}\n\nexport {\n  specialFactorial\n};\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n    return text.replace(/\\s/g, \"_\");\n}\n\nexport {\n    fixSpaces\n}\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^([a-zA-Z]|[0-9]|[.]|[ ]|[.]|[\\\\])*[a-zA-Z]{2,}[0-9]{3}[.][t[x][x][x][x]][s[x][x][x][x]]$/;\n  return regex.test(file_name);\n}\n\n/*\nGiven a list of file names, and a callback function, this function will call the callback function \nfor each file name in the list.\n\nThe callback function will be passed a string representing the file name.\n\nThe callback function should return 'Yes' or 'No' according to the file name's validity.\n*/\nconst checkFiles = (file_names, callback) => {\n  const files = file_names.split(',');\n  for (let i = 0; i < files.length; i++) {\n    if (fileNameCheck(files[i]) == 'No') {\n      callback(files[i]);\n    }\n  }\n};\n\n/*\nGiven a list of file names, this function will call the callback function with each file name in the list.\n\nThe callback function will be passed a string representing the file name.\n\nThe callback function should return 'Yes' or 'No' according to the file name's validity.\n*/\nconst checkFilesAndCallBack = (file_names, callback) => {\n  const files = file_names.split(',');\n  for (let i = 0; i < files.length; i++) {\n    callback(files[i]);\n  }\n};\n\n/*\nGiven a list of file names, and a callback function, this function will call the callback function \nfor each file name in the list, and only for file names that are valid.\n\nThe callback function will be passed a string representing the file name.\n\nThe callback function should return 'Yes' or 'No' according to the file name's validity.\n*/\nconst checkFilesAndOnlyCallBack = (file_names, callback) => {\n  const files = file_names.split(',');\n  for (let i = 0; i < files.length; i++) {\n    if (fileNameCheck(files[i]) == 'Yes') {\n      callback(files[i]);\n    }\n  }\n};\n\n/*\nGiven a list of file names, and a callback function, this function will call the callback function \nfor each file name in the list, and only for file names that are valid, and only for file names that do not \nhave more than three digits ('0'-'9 ') in their name.\n\nThe callback function will be passed a string representing the file name.\n\nThe callback function should return 'Yes' or 'No' according to the file name's validity.\n*/\nconst checkFilesAndOnlyCallBackWith3Digits = (file_names, callback) => {\n  const files = file_names.split(',');\n  for (let i = 0; i < files.length; i++) {\n    if (fileNameCheck(files[i]) == 'Yes' && fileNameCheckWith3Digits(files[i]) == 'No') {\n      callback(files[i]);\n    }\n  }\n};\n\nconst fileNameCheckWith3Digits = (file_name) => {\n  const regex = /^([a-zA-Z]|[0-9]|[.]|[ ]|[.]|[\\\\])*[a-zA-Z]{2,}[0-9]{3}$/;\n  return regex.test(file_name);\n};\n\nconst checkFileNames = (file_names, callback) => {\n  const files = file_names.split(',');\n  for (let i = 0; i < files.length; i++) {\n    if (fileNameCheck(files[i]) == 'No') {\n      callback(files[i]);\n    }\n  }\n};\n\nconst checkFileNamesAndCallBack = (file_names, callback) => {\n  const files = file_names.split(',');\n  for (let i = 0; i < files.length; i++) {\n    callback(files[i]);\n  }\n};\n\nconst checkFileNamesAndOnlyCallBack = (file_names, callback) => {\n  const files = file_names.split(',');\n  for (let i = 0; i < files.length; i++) {\n    if (fileNameCheck(files[i]) == 'Yes') {\n      callback(files[i]);\n    }\n  }\n};\n\nconst checkFileNamesAndOnlyCallBackWith3Digits = (file_names, callback) => {\n  const files = file_names.split(',');\n  for (let i = 0; i < files.length; i++) {\n    if (fileNameCheck(files[i]) == 'Yes' && fileNameCheckWith3Digits(files[i]) == 'No') {\n      callback(files[i]);\n    }\n  }\n};<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i += 1) {\n        let a = lst[i];\n        if (i % 3 === 0) {\n            a = a * a;\n        }\n        if (i % 4 === 0) {\n            a = a * a * a;\n        }\n        sum += a;\n    }\n    return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const word = /[a-z]+/g\n  const words = []\n  let match = word.exec(sentence)\n  while (match) {\n    words.push(match[0])\n    match = word.exec(sentence)\n  }\n  return words\n}\n\nconst sentenceToPrimes = (sentence) => {\n  const words = wordsInSentence(sentence)\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const newWord = []\n    const isPrime = prime(words[i].length)\n    for (let j = 0; j < words[i].length; j++) {\n      if (isPrime) {\n        newWord.push(words[i][j])\n      }\n    }\n    if (newWord.length) {\n      newWords.push(newWord)\n    }\n  }\n  return newWords\n}\n\nconst prime = (num) => {\n  const start = 2\n  let sum = 0\n  for (let i = start; i < num; i++) {\n    if (num % i === 0) {\n      sum += i\n    }\n  }\n  return sum === num\n}\n\nconsole.log(sentenceToPrimes(\"This is a test\"))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n   if(x.length === 1 && n.length === 1){\n     return parseInt(x) === parseInt(n)\n   }\n   return parseInt(x) * parseInt(n) === parseInt(x)\n }\n\nconst solve = (input) => {\n  return input.split('').reduce((a, b) => {\n    if(simplify(a, b)){\n      return a + b\n    }\n    return a + b.charAt(0)\n  }, '0')\n}\n\n// Test cases\nsolve('1/5')\nsolve('1/6')\nsolve('7/10')\nsolve('10/2')<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = []\n  const result = []\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i]\n    while (num) {\n      sorted.push(num % 10)\n      num = parseInt(num / 10)\n    }\n  }\n  for (let i = sorted.length - 1; i >= 0; i--) {\n    result.push(sorted[i])\n  }\n  return result\n}\n\nconsole.log(orderByPoints([11, 11, 12, 13, 23, -1, -2, -3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const len = nums.length\n  let out = 0\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > 10 && (nums[i] % 2!== 0 || nums[len - 1 - i] % 2!== 0)) {\n      out++\n    }\n  }\n  return out\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]))\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]))\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const arr = Array.from({length: n}, (_, i) => i * (i - i + 1));\n  let sum = 0;\n  arr.forEach(item => {\n    sum += (item + 1) / 3;\n  });\n  return sum;\n}\n\nmodule.exports = getMaxTriples;\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  var closest1 = getClosest(planet1),\n      closest2 = getClosest(planet2),\n      proximity1 = getProximity(closest1),\n      proximity2 = getProximity(closest2),\n      list = [],\n      i = 0;\n  \n  if (closest1 == 'error' || closest2 == 'error')\n    return list;\n  \n  if (proximity1 > proximity2) {\n    for (i = 0; i < proximity1; i++) {\n      list.push(closest1);\n    }\n  }\n  else {\n    for (i = 0; i < proximity2; i++) {\n      list.push(closest2);\n    }\n  }\n  \n  if (list.length > 0) {\n    list.sort((a, b) => (a.name < b.name)? -1 : 1);\n  }\n  \n  return list;\n};\n\nconst getProximity = (planet) => {\n  if (planet == 'Mercury')\n    return 1;\n  else if (planet == 'Venus')\n    return 2;\n  else if (planet == 'Earth')\n    return 3;\n  else if (planet == 'Mars')\n    return 4;\n  else if (planet == 'Jupiter')\n    return 5;\n  else if (planet == 'Saturn')\n    return 6;\n  else if (planet == 'Uranus')\n    return 7;\n  else if (planet == 'Neptune')\n    return 8;\n  else\n    return 'error';\n};\n\nconst getClosest = (planet) => {\n  if (planet == 'Mercury')\n    return 'Mercury';\n  else if (planet == 'Venus')\n    return 'Venus';\n  else if (planet == 'Earth')\n    return 'Earth';\n  else if (planet == 'Mars')\n    return 'Mars';\n  else if (planet == 'Jupiter')\n    return 'Jupiter';\n  else if (planet == 'Saturn')\n    return 'Saturn';\n  else if (planet == 'Uranus')\n    return 'Uranus';\n  else if (planet == 'Neptune')\n    return 'Neptune';\n  else\n    return 'error';\n};<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    const lenA = a.length;\n    const lenB = b.length;\n\n    if (lenA === lenB) {\n      if (a < b) {\n        return -1;\n      } else if (a > b) {\n        return 1;\n      }\n      return 0;\n    } else if (lenA < lenB) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n\n  return sorted.map(s => s.length).reduce((acc, val) => {\n    if (acc.length === val) {\n      return acc;\n    }\n    return [...acc,...val];\n  }, []);\n};\n\nconsole.log(sortedListSum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let xor = x;\n  let yor = y;\n  if(n % 2 === 0) {\n    xor = (xor * x) % n;\n    yor = (yor * x) % n;\n  }\n  return {\n    xor,\n    yor\n  };\n};\n\nconst isPrime = (n) => {\n  let isPrime = false;\n  if(n < 2) {\n    isPrime = false;\n  } else if(n === 2) {\n    isPrime = true;\n  } else if(n % 2 === 0) {\n    isPrime = false;\n  } else {\n    let sqrt = Math.sqrt(n);\n    for(let i = 3; i <= sqrt; i += 2) {\n      if(n % i === 0) {\n        isPrime = false;\n      }\n    }\n  }\n  return isPrime;\n};\n\nconst test = (xOrY, n, result) => {\n  let xor = xOrY.xor;\n  let yor = xOrY.yor;\n  let isPrime = isPrime(n);\n  if(isPrime) {\n    console.log(xor);\n  } else {\n    console.log(yor);\n  }\n  return result;\n};\n\nconst main = (xOrY, n) => {\n  let result = test(xOrY, n, n);\n  return result;\n};\n\nconst test2 = (xOrY, n) => {\n  let result = test(xOrY, n, n);\n  return result;\n};\n\nconst main2 = (xOrY, n) => {\n  let result = test2(xOrY, n, n);\n  return result;\n};\n\nconst test3 = (xOrY, n) => {\n  let result = test2(xOrY, n, n);\n  return result;\n};\n\nconst main3 = (xOrY, n) => {\n  let result = test3(xOrY, n, n);\n  return result;\n};\n\nconst test4 = (xOrY, n) => {\n  let result = test3(xOrY, n, n);\n  return result;\n};\n\nconst main4 = (xOrY, n) => {\n  let result = test4(xOrY, n, n);\n  return result;\n};\n\nconst test5 = (xOrY, n) => {\n  let result = test4(xOrY, n, n);\n  return result;\n};\n\nconst main5 = (xOrY, n) => {\n  let result = test5(xOrY, n, n);\n  return result;\n};\n\nconst test6 = (xOrY, n) => {\n  let result = test5(xOrY, n, n);\n  return result;\n};\n\nconst main6 = (xOrY, n) => {\n  let result = test6(xOrY, n, n);\n  return result;\n};\n\nconst test7 = (xOrY, n) => {\n  let result = test6(xOrY, n, n);\n  return result;\n};\n\nconst main7 = (xOrY, n) => {\n  let result = test7(xOrY, n, n);\n  return result;\n};\n\nconst test8 = (xOrY, n) => {\n  let result = test7(xOrY, n, n);\n  return result;\n};\n\nconst main8 = (xOrY, n) => {\n  let result = test8(xOrY, n, n);\n  return result;\n};\n\nconst test9 = (xOrY, n) => {\n  let result = test8(xOrY, n, n);\n  return result;\n};\n\nconst main9 = (xOrY, n) => {\n  let result = test9(xOrY, n, n);\n  return result;\n};\n\nconst test10 = (xOrY, n) => {\n  let result = test9(xOrY, n, n);\n  return result;\n};\n\nconst main10 = (xOrY, n) => {\n  let result = test10(xOrY, n, n);\n  return result;\n};\n\nconst test11 = (xOrY, n) => {\n  let result = test10(xOrY, n, n);\n  return result;\n};\n\nconst main11 = (xOrY, n) => {\n  let result = test11(xOrY, n, n);\n  return result;\n};\n\nconst test12 = (xOrY, n) => {\n  let result = test11(xOrY, n, n);\n  return result;\n};\n\nconst main12 = (xOrY, n) => {\n  let result = test12(xOrY, n, n);\n  return result;\n};\n\nconst test13 = (xOrY, n) => {\n  let result = test12(xOrY, n, n);\n  return result;\n};\n\nconst main13 = (xOrY, n) => {\n  let result = test13(xOrY, n, n);\n  return result;\n};\n\nconst test14 = (xOrY, n) => {\n  let result = test13(xOrY, n, n);\n  return result;\n};\n\nconst main14 = (xOrY, n) => {\n  let result = test14(xOrY, n, n);\n  return result;\n};\n\nconst test15 = (xOrY, n) => {\n  let result = test14(xOrY, n, n);\n  return result;\n};\n\nconst main15 = (xOrY, n) => {\n  let result = test15(xOrY, n, n);\n  return result;\n};\n\nconst test16 = (xOrY, n) => {\n  let result = test15(xOrY, n, n);\n  return result;\n};"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n    if(lst.length===0)\n        return 0\n    return(lst.reduce((a,b)=>{\n        if(isOdd(b)){\n            return(a+b*b)\n        }\n        else\n            return a\n        },0))\n}\n\nconsole.log(doubleTheDifference([1,3,2,0]))\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const length = gameLength === guessLength? gameLength : gameLength < guessLength? gameLength : guessLength\n  const diff = game.slice(0, length)\n   .reduce((a, b) => {\n      if (a === b) {\n        return 0\n      } else {\n        return Math.abs(a - b)\n      }\n    }, 0)\n\n  return diff\n}\n\nmodule.exports = compare\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const len = extensions.length\n  const strength = -1\n  const char_strength = 0\n  const str_strength = 0\n  const extension_strength = 0\n  for (let i = 0; i < len; i++) {\n    const extension = extensions[i]\n    const cap = extension.length\n    const strength = -1\n    const str_strength = 0\n    const char_strength = 0\n    for (let j = 0; j < extension.length; j++) {\n      const c = extension.charAt(j)\n      if (c.match(/[A-Z]/)) {\n        str_strength += 1\n      }\n      if (c.match(/[a-z]/)) {\n        str_strength += 1\n      }\n      if (c.match(/[A-Z]/) && c.match(/[a-z]/)) {\n        str_strength += 1\n      }\n      if (c.match(/[A-Z]/)) {\n        char_strength += 1\n      }\n      if (c.match(/[a-z]/)) {\n        char_strength += 1\n      }\n      if (c.match(/[A-Z]/) && c.match(/[a-z]/)) {\n        char_strength += 1\n      }\n      if (c.match(/[A-Z]/)) {\n        strength += 1\n      }\n      if (c.match(/[a-z]/)) {\n        strength += 1\n      }\n      if (c.match(/[A-Z]/) && c.match(/[a-z]/)) {\n        strength += 1\n      }\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > str_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > str_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength) {\n      extension_strength += strength\n    }\n    if (strength > char_strength)"}
{"task_id": "JavaScript/154", "prompt": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n  // console.log(\"Entering into cycpatternCheck()\");\n  if(a.length==0 && b.length==0)\n    return true;\n  else if(a.length==0)\n    return false;\n  else if(b.length==0)\n    return false;\n  else if(a.length!=b.length)\n    return false;\n  else\n  {\n    let temp=a.split(\"\");\n    for(let i=0;i<temp.length;i++)\n    {\n      let x=b.split(\"\");\n      for(let j=0;j<x.length;j++)\n      {\n        if(a.indexOf(x[j])!=-1)\n          return true;\n      }\n    }\n    return false;\n  }\n}\n\n/*\n  * @name  isSubstring\n  * @param {string} a\n  * @param {string} b\n  * @returns {boolean}\n  * @description Given a string a and a string b, check if b is a substring of a\n  * cycpatternCheck(\"abc\",\"bcc\")=> false \n  * cycpatternCheck(\"abcd\",\"abd\")=> false \n  * cycpatternCheck(\"hello\",\"ell\")=> true \n  * cycpatternCheck(\"whassup\",\"psus\")=> false \n  * cycpatternCheck(\"abab\",\"baa\")=> true \n  * cycpatternCheck(\"efef\",\"eeff\")=> false \n  * cycpatternCheck(\"himenss\",\"simen\")=> true \n  *\n  */\nconst isSubstring= (a, b)=>{\n  if(a.length<b.length)\n    return false;\n  else if(a.length==b.length)\n    return a.indexOf(b)!== -1;\n  else\n    return false;\n}\n\n/*\n * @name  contains\n * @param {string} a\n * @param {string} b\n * @returns {boolean}\n * @description Given a string a and a string b, check if b is a substring of a\n * cycpatternCheck(\"abc\",\"bcc\")=> false \n * cycpatternCheck(\"abcd\",\"abd\")=> false \n * cycpatternCheck(\"hello\",\"ell\")=> true \n * cycpatternCheck(\"whassup\",\"psus\")=> false \n * cycpatternCheck(\"abab\",\"baa\")=> true \n * cycpatternCheck(\"efef\",\"eeff\")=> false \n * cycpatternCheck(\"himenss\",\"simen\")=> true \n  */\nconst contains = (a, b)=>{\n  return b.indexOf(a)!== -1;\n}\n\n/*\n * @name  subsequence\n * @param {string} a\n * @param {string} b\n * @returns {boolean}\n * @description Given a string a and a string b, check if b is a substring of a\n * cycpatternCheck(\"abc\",\"bcc\")=> false \n * cycpatternCheck(\"abcd\",\"abd\")=> false \n * cycpatternCheck(\"hello\",\"ell\")=> true \n * cycpatternCheck(\"whassup\",\"psus\")=> false \n * cycpatternCheck(\"abab\",\"baa\")=> true \n * cycpatternCheck(\"efef\",\"eeff\")=> false \n * cycpatternCheck(\"himenss\",\"simen\")=> true \n  */\nconst subsequence = (a, b)=>{\n  let x=a.split(\"\");\n  let y=b.split(\"\");\n  for(let i=0;i<x.length;i++)\n  {\n    if(x[i]!=y[i])\n      return false;\n  }\n  return true;\n}\n\n/*\n * @name  cyclicpattern\n * @param {string} a\n * @param {string} b\n * @returns {boolean}\n * @description Given a string a and a string b, check if b is a substring of a\n * cycpatternCheck(\"abc\",\"bcc\")=> false \n * cycpatternCheck(\"abcd\",\"abd\")=> false \n * cycpatternCheck(\"hello\",\"ell\")=> true \n * cycpatternCheck(\"whassup\",\"psus\")=> false \n * cycpatternCheck(\"abab\",\"baa\")=> true \n * cycpatternCheck(\"efef\",\"eeff\")=> false \n * cycpatternCheck(\"himenss\",\"simen\")=> true \n  */\nconst cyclicpattern = (a, b)=>{\n  if(contains(b, a))\n    return true;\n  else if(contains(b, \"c\"+a))\n    return true;\n  else if(contains(b, \"cc\"+a))\n    return true;\n  else if(contains(b, \"d\"+a))\n    return true;\n  else if(contains(b, \"dc\"+a))\n    return true;\n  else if(contains(b, \"e\"+a))\n    return true;\n  else if(contains(b, \"ed\"+a))\n    return true;\n  else if(contains(b, \"f\"+a))\n    return true;\n  else if(contains(b, \"fe\"+a))\n    return true;\n  else if(contains(b, \"g\"+a))\n    return true;\n  else if(contains(b, \"ge\"+a))\n    return true;\n  else if(contains(b, \"h\"+a))\n    return true;\n  else if(contains(b, \"he\"+a))\n    return true;\n  else if(contains(b, \"i\"+a))\n    return true;\n  else if(contains(b, \"id\"+a))"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let evenDigits = 0;\n    let oddDigits = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (num[i] % 2 === 0) {\n            evenDigits++;\n        } else {\n            oddDigits++;\n        }\n    }\n    return [evenDigits, oddDigits];\n};\n\n// Test\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511].every(evenOddCount);\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let string = '';\n  while (number > 0) {\n    if (number % 10 == 0) {\n      string += 'x';\n    } else if (number % 10 == 1) {\n      string += 'i';\n    } else if (number % 10 == 5) {\n      string += 'v';\n    } else if (number % 10 == 9) {\n      string += 'ix';\n    } else {\n      string += 'x';\n    }\n    number = Math.floor(number / 10);\n  }\n  return string.toLowerCase();\n};\n\n/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in uppercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'XIV'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let string = '';\n  while (number > 0) {\n    if (number % 10 == 0) {\n      string += 'X';\n    } else if (number % 10 == 1) {\n      string += 'I';\n    } else if (number % 10 == 5) {\n      string += 'V';\n    } else if (number % 10 == 9) {\n      string += 'IX';\n    } else {\n      string += 'X';\n    }\n    number = Math.floor(number / 10);\n  }\n  return string.toUpperCase();\n};\n\nmodule.exports = {\n  intToRoman,\n  intToMiniRoman\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n\t// The angle between a and b should be greater than 90 degree\n\tif (a > b && a > c) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n/*\n Given the lengths of the three sides of a triangle. Will return true if the triangle \n   will form a rectangle, false otherwise. A rectangle will be a triangle with one of \n   its sides the length of the other two.\n  Example:\n  rectangle(1, 2, 3) == true\n  rectangle(4, 5, 6) == false\n  rectangle(7, 8, 9) == true\n  rectangle(10, 11, 12) == false\n  */\nconst rectangle = (a, b, c) => {\n\treturn a + b > c && b + c > a && c + a > b;\n}\n\n/*\n Given the lengths of the three sides of a triangle. Will return true if the triangle \n   will form a traingle, false otherwise. A traingle will be a triangle with one of \n   its sides the length of the other two.\n  Example:\n  triangle(1, 2, 3) == true\n  triangle(4, 5, 6) == false\n  triangle(7, 8, 9) == true\n  triangle(10, 11, 12) == false\n  */\nconst triangle = (a, b, c) => {\n\treturn a + b > c && a + c > b && b + c > a;\n}\n\n/*\n Given the lengths of the three sides of a triangle. Will return true if the triangle \n   will form a traingle, false otherwise. A traingle will be a triangle with one of \n   its sides the length of the other two.\n  Example:\n  triangle(1, 2, 3) == true\n  triangle(4, 5, 6) == false\n  triangle(7, 8, 9) == true\n  triangle(10, 11, 12) == false\n  */\nconst triangle = (a, b, c) => {\n\treturn a + b > c && a + c > b && b + c > a;\n}\n\n/*\n Given the lengths of the three sides of a triangle. Will return true if the triangle \n   will form a traingle, false otherwise. A traingle will be a triangle with one of \n   its sides the length of the other two.\n  Example:\n  triangle(1, 2, 3) == true\n  triangle(4, 5, 6) == false\n  triangle(7, 8, 9) == true\n  triangle(10, 11, 12) == false\n  */\nconst triangle = (a, b, c) => {\n\treturn a + b > c && a + c > b && b + c > a;\n}\n\n/*\n Given the lengths of the three sides of a triangle. Will return true if the triangle \n   will form a traingle, false otherwise. A traingle will be a triangle with one of \n   its sides the length of the other two.\n  Example:\n  triangle(1, 2, 3) == true\n  triangle(4, 5, 6) == false\n  triangle(7, 8, 9) == true\n  triangle(10, 11, 12) == false\n  */\nconst triangle = (a, b, c) => {\n\treturn a + b > c && a + c > b && b + c > a;\n}\n\n/*\n Given the lengths of the three sides of a triangle. Will return true if the triangle \n   will form a traingle, false otherwise. A traingle will be a triangle with one of \n   its sides the length of the other two.\n  Example:\n  triangle(1, 2, 3) == true\n  triangle(4, 5, 6) == false\n  triangle(7, 8, 9) == true\n  triangle(10, 11, 12) == false\n  */\nconst triangle = (a, b, c) => {\n\treturn a + b > c && a + c > b && b + c > a;\n}\n\n/*\n Given the lengths of the three sides of a triangle. Will return true if the triangle \n   will form a traingle, false otherwise. A traingle will be a triangle with one of \n   its sides the length of the other two.\n  Example:\n  triangle(1, 2, 3) == true\n  triangle(4, 5, 6) == false\n  triangle(7, 8, 9) == true\n  triangle(10, 11, 12) == false\n  */\nconst triangle = (a, b, c) => {\n\treturn a + b > c && a + c > b && b + c > a;\n}\n\n/*\n Given the lengths of the three sides of a triangle. Will return true if the triangle \n   will form a traingle, false otherwise. A traingle will be a triangle with one of \n   its sides the length of the other two.\n  Example:\n  triangle(1, 2, 3) == true\n  triangle(4, 5, 6) == false\n  triangle(7, 8, 9) == true\n  triangle(10, 11, 12) == false\n  */\nconst triangle = (a, b, c) => {\n\treturn a + b > c && a + c > b && b + c > a;\n}\n\n/*\n Given the lengths of the three sides of a triangle. Will return true if the triangle \n   will form a traingle, false otherwise. A traingle will be a triangle with one of \n   its sides the length of the other two.\n  Example:\n  triangle(1, 2, 3) == true\n  triangle(4, 5, 6) == false\n  triangle(7, 8, 9) == true\n  triangle(10, 11, 12) == false\n  */\nconst triangle = (a, b, c) => {\n\treturn a + b > c && a + c > b && b + c > a;\n}\n\n/*\n Given the lengths of the three sides of a triangle. Will return true if the triangle \n   will"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n  let count=0\n  let maxCount=0\n  let max = \"\"\n  let result = \"\"\n  for (let i = 0; i < words.length; i++) {\n    let len = words[i].length\n    let count = count + len\n    if (count > maxCount){\n      maxCount = count\n      max = words[i]\n    }\n  }\n  return max\n}\n\nmodule.exports = findMax<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    let eaten = number;\n    let total = eaten + number;\n    while (need > remaining) {\n        eaten += remaining;\n        total += remaining;\n        remaining = remaining - number;\n    }\n    return [total, remaining];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  // if the length of operator list is equal to the length of operand list minus one\n  if (operator.length === operand.length - 1) {\n    // if the last element of operator list is '+' or '-', then we only have two operands,\n    // so we can evaluate the operator, and return the result\n    if (operator[operator.length - 1] === '+' || operator[operator.length - 1] === '-') {\n      const result = operator[operator.length - 1] + operand[operator.length - 1] + operator[operator.length - 2] * operand[operator.length - 1] + operator[operator.length - 3] * operand[operator.length - 2] + operator[operator.length - 4] * operand[operator.length - 3];\n      return result;\n    } else {\n      // we can calculate the expression of the operator, and return the result\n      return operator[operator.length - 1] + operator[operator.length - 2] * operand[operator.length - 1] + operator[operator.length - 3] * operand[operator.length - 2] + operator[operator.length - 4] * operand[operator.length - 3];\n    }\n  }\n  // if the length of operator list is equal to the length of operand list, then we can evaluate\n  // the operator, and return the result\n  if (operator.length === operand.length) {\n    return operator[operator.length - 1] + operator[operator.length - 2] * operand[operator.length - 1] + operator[operator.length - 3] * operand[operator.length - 2] + operator[operator.length - 4] * operand[operator.length - 3];\n  }\n  // if the length of operator list is less than the length of operand list, then we can't evaluate\n  // the operator, so return the operand list as the result\n  return operand;\n};\n\n// let's check our function\nconsole.log(doAlgebra([2, 4, 2, 3, 5, 3], [2, 3, 4, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n    if (s.length === 0) return s;\n    const s1 = s.split('');\n    let r = '';\n    for (let i = 0; i < s1.length; i++) {\n        if (s1[i].match(/[a-z]/i)) {\n            r += (s1[i].toLowerCase() === s1[i].toUpperCase())? s1[i].toUpperCase() : s1[i].toLowerCase();\n        } else {\n            r += s1[i];\n        }\n    }\n    return r;\n}\n\nconsole.log(solve(\"1234\")); // \"4321\"\nconsole.log(solve(\"ab\")); // \"AB\"\nconsole.log(solve(\"#a@C\")); // \"#A@c\"\nconsole.log(solve(\"#A@C\")); // \"#a@c\"\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'd6ccb08d4cac1c8c8f6b5c0a0e07f8b4f58f7b8'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha1').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha256('Hello world') == '8cefe7cffecb9ad2b6f5f8e1f59b70a4a3f87e9'\n  */\nconst stringToSha256 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha256').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '1a1f1cfa4d9b8e3a8e7cb7fcf7ddc6b6f7cad6f7a7c7b9d4d4b5c9b7d9b9b5d6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6c9b7d9b9b6"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n\n  return result;\n};\n\n/*\n  Given a non-empty array of characters, return the characters that appear\n   at least 4 times in order.\n\n  For example:\n  charactersOccuredInOrder([\"n\", \"o\", \"n\", \"e\", \"r\", \"t\", \"e\", \"e\"]) => [\"n\", \"o\"]\n  charactersOccuredInOrder([\"a\", \"b\", \"c\", \"a\", \"d\", \"a\", \"c\", \"b\"]) => [\"a\", \"b\", \"c\", \"d\"]\n  charactersOccuredInOrder([\"z\", \"a\", \"x\", \"y\"]) => [\"z\"]\n  */\nconst charactersOccuredInOrder = (characters) => {\n  let occurences = {};\n\n  for (let i = 0; i < characters.length; i++) {\n    if (occurences[characters[i]] === undefined) {\n      occurences[characters[i]] = 0;\n    }\n\n    occurences[characters[i]]++;\n  }\n\n  let sorted = Object.keys(occurences).sort((a, b) => {\n    return occurences[a] - occurences[b];\n  });\n\n  let result = [];\n\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i]);\n  }\n\n  return result;\n};\n\n/*\n  Given two lists, return their intersection.\n\n  For example:\n  list1 = [1, 2, 3, 4]\n  list2 = [2, 3, 4, 5]\n  list1.intersection(list2) => [2, 3]\n  list1.intersection(list2) => [2, 3]\n  list1.intersection(list2) => [2, 3]\n  */\nconst list1 = [1, 2, 3, 4];\nconst list2 = [2, 3, 4, 5];\n\nconst intersection = (list1, list2) => {\n  let result = [];\n\n  for (let i = 0; i < list1.length; i++) {\n    if (list2.indexOf(list1[i])!== -1) {\n      result.push(list1[i]);\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given a non-empty array of integers, return the largest one that is less\n   than or equal to each number in the array.\n\n  For example:\n  arrayOfNumbers(1, 2, 3, 4) => 3\n  arrayOfNumbers(1, 2, 3, 4, 5) => 5\n  arrayOfNumbers(1, 2, 3, 4, 5, 6) => 5\n  */\nconst arrayOfNumbers = (...numbers) => {\n  let result = numbers[0];\n\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] <= result) {\n      result = numbers[i];\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given two non-empty arrays of integers, return the largest one that is\n   less than or equal to each number in the first array and the number\n   of occurrences of each number in the first array.\n\n  For example:\n  arrayOfNumbers(1, 2, 3, 4, 2) => [2, 3]\n  arrayOfNumbers(1, 2, 3, 4, 5, 6) => [5, 1]\n  arrayOfNumbers(1, 2, 3, 4, 5, 6, 7) => [5, 1, 1]\n  */\nconst arrayOfNumbers = (...numbers) => {\n  let result = {};\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] in result) {\n      result[numbers[i]]++;\n    } else {\n      result[numbers[i]] = 1;\n    }\n  }\n\n  return Object.keys(result).sort((a, b) => {\n    return result[a] - result[b];\n  }).reverse();\n};\n\n/*\n  Given two non-empty arrays of non-negative integers, return the smallest\n   common multiple of the integers in the first array and the number of\n   occurrences of each number in the first array.\n\n  For example:\n  arrayOfNumbers(1, 2, 3, 4, 5) => 20\n  arrayOfNumbers(1, 2, 3, 4, 5, 6) => 12\n  arrayOfNumbers(1, 2, 3, 4, 5, 6, 7) => 14\n  */\nconst arrayOfNumbers = (...numbers) => {\n  let result = {};\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] in result) {\n      result[numbers[i]]++;\n    } else {\n      result[numbers[i]] = 1;\n    }\n  }\n\n  return Object.keys(result).sort((a, b) => {\n    return result[a] - result[b];\n  }).reverse().reduce((a, b) => a * b, numbers[0]);\n};\n\n/*\n  Given two non-empty arrays of integers, return the largest common\n   subsequence.\n\n  For example:\n  arrayOfNumbers(1, 2, 3, 4, 5) => [1, 2, 3, 4]\n  arrayOfNumbers(1, 2, 3, 4, 5, 6) => [1, 2, 3, 4]\n  arrayOfNumbers(1, 2, 3, 4, 5, 6, 7) => [1, 2, 3, 4]\n  */\nconst arrayOfNumbers = (...numbers) => {\n  let result = [];\n\n  let index = 0;\n  let index2 = 0;\n\n  while (index < numbers[0].length && index2 < numbers[1].length) {\n    if (numbers[0][index] === numbers"}
