{"task_id": "JavaScript/0", "prompt": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n\n  const allNumbers = numbers.slice();\n  const allNumbersLength = allNumbers.length;\n  const even = allNumbersLength % 2 === 0;\n\n  for (let i = 0; i < allNumbersLength; i++) {\n    let num1 = allNumbers[i];\n    let num2 = allNumbers[(i + 1) % allNumbersLength];\n    let distance = Math.abs(num1 - num2);\n\n    if (distance < threshold) {\n      if (even) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  return false;\n};\n\nexport {\n  hasCloseElements\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_char_set = new Set([\"(\", \")\", \")\"]);\n  const open_paren_set = new Set([\"(\", \")\", \")\", \"]\", \"}\"]);\n  const close_paren_set = new Set([\"]\", \"}\"]);\n\n  const paren_list = [];\n  let paren_list_index = 0;\n\n  let last_char = \"\";\n  let next_char = paren_string.charAt(paren_string.length - 1);\n  let paren_length = 1;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_char_set.has(paren_string.charAt(i))) {\n      if (paren_char_set.has(next_char)) {\n        paren_length += 1;\n      } else if (paren_char_set.has(last_char) && paren_length > 1) {\n        paren_length -= 1;\n      }\n    }\n    last_char = paren_string.charAt(i);\n    next_char = paren_string.charAt(i + 1);\n  }\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (open_paren_set.has(paren_string.charAt(i))) {\n      paren_list_index += 1;\n    } else if (close_paren_set.has(paren_string.charAt(i))) {\n      paren_list_index -= 1;\n    }\n\n    if (paren_list_index === 0) {\n      paren_list.push(paren_string.substring(i + 1, paren_string.length));\n      i = paren_string.length - 1;\n    }\n  }\n\n  return paren_list;\n};\n\nconsole.log(separateParenGroups('((()))'));\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  if (isNaN(number)) {\n    return number\n  }\n  return number.toString().replace(/\\./g, '')\n}\n\n/* \n   Given a positive floating point number, will return the number\n   represented as the number of cents.\n  \n   will Return the number of cents represented by the number.\n  >>> centsForNumber(1000)\n  12\n  */\nconst centsForNumber = (number) => {\n  return number % 100\n}\n\n/* \n   Given a positive floating point number, will return the number\n   represented as the number of pounds.\n  \n   will Return the number of pounds represented by the number.\n  >>> poundsForNumber(12)\n  0\n  */\nconst poundsForNumber = (number) => {\n  return number / 100\n}\n\n/* \n   Given a positive floating point number, will return the number\n   represented as the number of pence.\n  \n   will Return the number of pence represented by the number.\n  >>> penceForNumber(12)\n  0\n  */\nconst penceForNumber = (number) => {\n  return number % 100\n}\n\n/* \n   Given a positive floating point number, will return the number\n   represented as the number of feet.\n  \n   will Return the number of feet represented by the number.\n  >>> feetForNumber(12)\n  0\n  */\nconst feetForNumber = (number) => {\n  return number / 100\n}\n\n/* \n   Given a positive floating point number, will return the number\n   represented as the number of inches.\n  \n   will Return the number of inches represented by the number.\n  >>> inchesForNumber(12)\n  0\n  */\nconst inchesForNumber = (number) => {\n  return number % 100\n}\n\n/* \n   Given a positive floating point number, will return the number\n   represented as the number of centimeter.\n  \n   will Return the number of centimeter represented by the number.\n  >>> centimeterForNumber(12)\n  0\n  */\nconst centimeterForNumber = (number) => {\n  return number / 100\n}\n\n/* \n   Given a positive floating point number, will return the number\n   represented as the number of miles.\n  \n   will Return the number of miles represented by the number.\n  >>> milesForNumber(12)\n  0\n  */\nconst milesForNumber = (number) => {\n  return number / 100\n}\n\n/* \n   Given a positive floating point number, will return the number\n   represented as the number of decimals.\n  \n   will Return the number of decimals represented by the number.\n  >>> decimalsForNumber(12)\n  0\n  */\nconst decimalsForNumber = (number) => {\n  return number % 100\n}\n\n/* \n   Given a positive floating point number, will return the number\n   represented as the number of percent.\n  \n   will Return the number of percent represented by the number.\n  >>> percentForNumber(12)\n  0\n  */\nconst percentForNumber = (number) => {\n  return number / 100\n}\n\n/* \n   Given a positive floating point number, will return the number\n   represented as the number of point.\n  \n   will Return the number of point represented by the number.\n  >>> pointForNumber(12)\n  0\n  */\nconst pointForNumber = (number) => {\n  return number % 100\n}\n\n/* \n   Given a positive floating point number, will return the number\n   represented as the number of penny.\n  \n   will Return the number of penny represented by the number.\n  >>> pennyForNumber(12)\n  0\n  */\nconst pennyForNumber = (number) => {\n  return number % 100\n}\n\n/* \n   Given a positive floating point number, will return the number\n   represented as the number of pound.\n  \n   will Return the number of pound represented by the number.\n  >>> poundForNumber(12)\n  0\n  */\nconst poundForNumber = (number) => {\n  return number / 100\n}\n\n/* \n   Given a positive floating point number, will return the number\n   represented as the number of penny.\n  \n   will Return the number of penny represented by the number.\n  >>> pennyForNumber(12)\n  0\n  */\nconst pennyForNumber = (number) => {\n  return number % 100\n}\n\n/* \n   Given a positive floating point number, will return the number\n   represented as the number of penny.\n  \n   will Return the number of penny represented by the number.\n  >>> pennyForNumber(12)\n  0\n  */\nconst pennyForNumber = (number) => {\n  return number % 100\n}\n\n/* \n   Given a positive floating point number, will return the number\n   represented as the number of penny.\n  \n   will Return the number of penny represented by the number.\n  >>> pennyForNumber(12)\n  0\n  */\nconst pennyForNumber = (number) => {\n  return number % 100\n}\n\n/* \n   Given a positive floating point number, will return the number\n   represented as the number of penny.\n  \n   will Return the number of penny represented by the number.\n  >>> pennyForNumber(12)\n  0\n  */\nconst pennyForNumber = (number) => {\n  return number % 100\n}\n\n/* \n   Given a positive floating point number, will return the number\n   represented as the number of penny.\n  \n   will Return the number of penny represented by the number.\n  >>> pennyForNumber(12)\n  0\n  */\nconst pennyForNumber = (number) => {\n  return number % 100\n}\n\n/* \n   Given a positive floating point number, will return the number\n   represented as the number of penny.\n  \n   will Return the number of penny represented by the number.\n  >>> pennyForNumber(12)\n  0\n  */\nconst pennyForNumber = (number) => {\n  return number % 100\n}\n\n/* \n   Given a positive floating point number, will return the number\n   represented as the number of penny.\n  \n   will Return the number of penny represented by the number.\n  >>> penny"}
{"task_id": "JavaScript/3", "prompt": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const len = operations.length;\n  let currBalance = 0;\n  let isBelowZero = false;\n  for (let i = 0; i < len; i++) {\n    currBalance += operations[i];\n    if (currBalance < 0) {\n      isBelowZero = true;\n    }\n  }\n  return isBelowZero;\n};\n\nmodule.exports = belowZero;<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0\n  let avg = 0\n  numbers.forEach(value => {\n    sum += Math.abs(value - avg)\n  })\n  return sum/numbers.length\n}\n\n/*\n  >>> meanAbsoluteDeviation([1, 2, 3, 4, 5])\n  1.5\n  */\nconst meanAbsoluteDeviation2 = (numbers) => {\n  let sum = 0\n  let avg = 0\n  for(let i = 0; i < numbers.length; i++){\n    sum += Math.abs(numbers[i] - avg)\n  }\n  return sum/numbers.length\n}\n\n/*\n  >>> meanAbsoluteDeviation([1, 2, 3, 4, 5])\n  1.5\n  */\nconst meanAbsoluteDeviation3 = (numbers) => {\n  let sum = 0\n  let avg = 0\n  for(let i = 0; i < numbers.length; i++){\n    sum += Math.abs(numbers[i] - avg)\n  }\n  return sum/numbers.length\n}\n\n/*\n  >>> meanAbsoluteDeviation([1, 2, 3, 4, 5])\n  1.5\n  */\nconst meanAbsoluteDeviation4 = (numbers) => {\n  let sum = 0\n  let avg = 0\n  for(let i = 0; i < numbers.length; i++){\n    sum += Math.abs(numbers[i] - avg)\n  }\n  return sum/numbers.length\n}\n\n/*\n  >>> meanAbsoluteDeviation([1, 2, 3, 4, 5])\n  1.5\n  */\nconst meanAbsoluteDeviation5 = (numbers) => {\n  let sum = 0\n  let avg = 0\n  for(let i = 0; i < numbers.length; i++){\n    sum += Math.abs(numbers[i] - avg)\n  }\n  return sum/numbers.length\n}\n\n/*\n  >>> meanAbsoluteDeviation([1, 2, 3, 4, 5])\n  1.5\n  */\nconst meanAbsoluteDeviation6 = (numbers) => {\n  let sum = 0\n  let avg = 0\n  for(let i = 0; i < numbers.length; i++){\n    sum += Math.abs(numbers[i] - avg)\n  }\n  return sum/numbers.length\n}\n\n/*\n  >>> meanAbsoluteDeviation([1, 2, 3, 4, 5])\n  1.5\n  */\nconst meanAbsoluteDeviation7 = (numbers) => {\n  let sum = 0\n  let avg = 0\n  for(let i = 0; i < numbers.length; i++){\n    sum += Math.abs(numbers[i] - avg)\n  }\n  return sum/numbers.length\n}\n\n/*\n  >>> meanAbsoluteDeviation([1, 2, 3, 4, 5])\n  1.5\n  */\nconst meanAbsoluteDeviation8 = (numbers) => {\n  let sum = 0\n  let avg = 0\n  for(let i = 0; i < numbers.length; i++){\n    sum += Math.abs(numbers[i] - avg)\n  }\n  return sum/numbers.length\n}\n\n/*\n  >>> meanAbsoluteDeviation([1, 2, 3, 4, 5])\n  1.5\n  */\nconst meanAbsoluteDeviation9 = (numbers) => {\n  let sum = 0\n  let avg = 0\n  for(let i = 0; i < numbers.length; i++){\n    sum += Math.abs(numbers[i] - avg)\n  }\n  return sum/numbers.length\n}\n\n/*\n  >>> meanAbsoluteDeviation([1, 2, 3, 4, 5])\n  1.5\n  */\nconst meanAbsoluteDeviation10 = (numbers) => {\n  let sum = 0\n  let avg = 0\n  for(let i = 0; i < numbers.length; i++){\n    sum += Math.abs(numbers[i] - avg)\n  }\n  return sum/numbers.length\n}\n\n/*\n  >>> meanAbsoluteDeviation([1, 2, 3, 4, 5])\n  1.5\n  */\nconst meanAbsoluteDeviation11 = (numbers) => {\n  let sum = 0\n  let avg = 0\n  for(let i = 0; i < numbers.length; i++){\n    sum += Math.abs(numbers[i] - avg)\n  }\n  return sum/numbers.length\n}\n\n/*\n  >>> meanAbsoluteDeviation([1, 2, 3, 4, 5])\n  1.5\n  */\nconst meanAbsoluteDeviation12 = (numbers) => {\n  let sum = 0\n  let avg = 0\n  for(let i = 0; i < numbers.length; i++){\n    sum += Math.abs(numbers[i] - avg)\n  }\n  return sum/numbers.length\n}\n\n/*\n  >>> meanAbsoluteDeviation([1, 2, 3, 4, 5])\n  1.5\n  */\nconst meanAbsoluteDeviation13 = (numbers) => {\n  let sum = 0\n  let avg = 0\n  for(let i = 0; i < numbers.length; i++){\n    sum += Math.abs(numbers[i] - avg)\n  }\n  return sum/numbers.length\n}\n\n/*\n  >>> meanAbsoluteDeviation([1, 2, 3, 4, 5])\n  1.5\n  */\nconst meanAbsoluteDeviation14 = (numbers) => {\n  let sum = 0\n  let avg = 0\n  for(let i = 0; i < numbers.length; i++){\n    sum += Math.abs(numbers[i] - avg)\n  }\n  return sum/numbers.length\n}\n\n/*\n  >>>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  while (i < numbers.length - 1) {\n    result.push(numbers[i])\n    i += 1\n    if (i < numbers.length - 1) {\n      result.push(delimeter)\n      i += 1\n    }\n  }\n  result.push(numbers[i])\n  return result\n}\n\n/*\n  Let's add some additional functions to the library.\n  >>> to_upper('abc')\n  'ABC'\n  >>> to_upper('abc', '_')\n  'ABC'\n  >>> to_lower('ABC')\n  'abc'\n  >>> to_lower('abc', '_')\n  'abc'\n  >>> to_title('abc')\n  'Abc'\n  >>> to_title('abc', '_')\n  'Abc'\n  >>> to_title('abc', '_')\n  'Abc'\n  >>> to_title('abc', '_')\n  'Abc'\n  >>> to_title('abc')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_title('abc', '_')\n  'abc'\n  >>> to_"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  // console.log(paren_string);\n  let stack = [];\n  let start = 0;\n  let end = 0;\n  let counter = 0;\n\n  while (end < paren_string.length) {\n    if (paren_string[end] === '(') {\n      stack.push(end);\n    } else if (paren_string[end] === ')') {\n      if (stack.length === 0) {\n        throw \"Invalid input string\";\n      }\n      counter = stack.pop();\n      if (paren_string[counter - 1] === '(') {\n        stack.pop();\n      } else {\n        end = counter + 1;\n      }\n    } else {\n      end++;\n    }\n  }\n  if (stack.length > 0) {\n    throw \"Invalid input string\";\n  }\n  // console.log(paren_string);\n  return counter;\n};\n\nlet input = parseNestedParens('()((()()))((()(()())))');\nconsole.log(input);\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) >= 0)\n}\n\n/*\n  #> filterBySubstring([], 'a')\n  []\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring([], 'a')\n  []\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  #> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bac"}
{"task_id": "JavaScript/8", "prompt": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n    const [sum, product] = [0, 1]\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return [sum, product]\n}\n\nexport default sumProduct\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n    let a = numbers.slice(0);\n    const result = [];\n    while (a.length) {\n        const max = a[0];\n        let i = 1;\n        while (i < a.length) {\n            if (max < a[i]) {\n                max = a[i];\n            }\n            i++;\n        }\n        result.push(max);\n        a.splice(0, 1);\n    }\n    return result;\n};\n\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = longestPalindrome(string);\n  const suffix = longestPalindrome(string.split(prefix).join(''));\n  return prefix + suffix;\n}\n\n/* Given a string, will return the longest palindrome in the string */\nconst longestPalindrome = (string) => {\n  let longest = '';\n  let longestLen = 0;\n  let current = 0;\n  const arr = string.split('');\n  const len = arr.length;\n  for (let i = 0; i < len; i++) {\n    let j = i;\n    let currentLen = 1;\n    let currentValue = arr[i];\n    while (j < len - 1 && arr[j + 1] === currentValue) {\n      j++;\n      currentLen++;\n    }\n    if (currentLen > longestLen) {\n      longestLen = currentLen;\n      longest = current;\n    }\n  }\n  return longest;\n}\n\n/* will Test if the given string will be a palindrome */\nconst isPalindrome = (string) => {\n  return string === string.split('').reverse().join('');\n}\n\n/* will Test if the given string will be a palindrome */\nconst isPalindrome = (string) => {\n  return string === string.split('').reverse().join('');\n}\n\n/* Will test if the given string will be a palindrome */\nconst isPalindrome = (string) => {\n  let reverse = string.split('').reverse().join('');\n  return string === reverse;\n}\n\n/* Will test if the given string will be a palindrome */\nconst isPalindrome = (string) => {\n  let reverse = string.split('').reverse().join('');\n  return string === reverse;\n}\n\n/* Will test if the given string will be a palindrome */\nconst isPalindrome = (string) => {\n  return string.split('').reverse().join('') === string;\n}\n\n/* Will test if the given string will be a palindrome */\nconst isPalindrome = (string) => {\n  return string.split('').reverse().join('') === string;\n}\n\n/* Will test if the given string will be a palindrome */\nconst isPalindrome = (string) => {\n  return string === string.split('').reverse().join('');\n}\n\n/* Will test if the given string will be a palindrome */\nconst isPalindrome = (string) => {\n  return string === string.split('').reverse().join('');\n}\n\n/* Will test if the given string will be a palindrome */\nconst isPalindrome = (string) => {\n  return string === string.split('').reverse().join('');\n}\n\n/* Will test if the given string will be a palindrome */\nconst isPalindrome = (string) => {\n  return string === string.split('').reverse().join('');\n}\n\n/* Will test if the given string will be a palindrome */\nconst isPalindrome = (string) => {\n  return string === string.split('').reverse().join('');\n}\n\n/* Will test if the given string will be a palindrome */\nconst isPalindrome = (string) => {\n  return string === string.split('').reverse().join('');\n}\n\n/* Will test if the given string will be a palindrome */\nconst isPalindrome = (string) => {\n  return string === string.split('').reverse().join('');\n}\n\n/* Will test if the given string will be a palindrome */\nconst isPalindrome = (string) => {\n  return string === string.split('').reverse().join('');\n}\n\n/* Will test if the given string will be a palindrome */\nconst isPalindrome = (string) => {\n  return string === string.split('').reverse().join('');\n}\n\n/* Will test if the given string will be a palindrome */\nconst isPalindrome = (string) => {\n  return string === string.split('').reverse().join('');\n}\n\n/* Will test if the given string will be a palindrome */\nconst isPalindrome = (string) => {\n  return string === string.split('').reverse().join('');\n}\n\n/* Will test if the given string will be a palindrome */\nconst isPalindrome = (string) => {\n  return string === string.split('').reverse().join('');\n}\n\n/* Will test if the given string will be a palindrome */\nconst isPalindrome = (string) => {\n  return string === string.split('').reverse().join('');\n}\n\n/* Will test if the given string will be a palindrome */\nconst isPalindrome = (string) => {\n  return string === string.split('').reverse().join('');\n}\n\n/* Will test if the given string will be a palindrome */\nconst isPalindrome = (string) => {\n  return string === string.split('').reverse().join('');\n}\n\n/* Will test if the given string will be a palindrome */\nconst isPalindrome = (string) => {\n  return string === string.split('').reverse().join('');\n}\n\n/* Will test if the given string will be a palindrome */\nconst isPalindrome = (string) => {\n  return string === string.split('').reverse().join('');\n}\n\n/* Will test if the given string will be a palindrome */\nconst isPalindrome = (string)"}
{"task_id": "JavaScript/11", "prompt": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  a = a.toString();\n  b = b.toString();\n  let x = [];\n  let i = 0;\n  while (i < a.length) {\n    x.push(a[i] ^ b[i]);\n    i++;\n  }\n  return x.join('');\n};\n\n/*\n   Return the string consisting of 1s and 0s, whose binary XOR with '1011' is the same as the binary XOR of '001' and '010'.\n   Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  a = a.toString();\n  b = b.toString();\n  let x = [];\n  let i = 0;\n  while (i < a.length) {\n    x.push(a[i] ^ b[i]);\n    i++;\n  }\n  return x.join('');\n};\n\n/*\n   Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  a = a.toString();\n  b = b.toString();\n  let x = [];\n  let i = 0;\n  while (i < a.length) {\n    x.push(a[i] ^ b[i] ^ 1);\n    i++;\n  }\n  return x.join('');\n};\n\n/*\n   Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  a = a.toString();\n  b = b.toString();\n  let x = [];\n  let i = 0;\n  while (i < a.length) {\n    x.push(a[i] ^ b[i] ^ 2);\n    i++;\n  }\n  return x.join('');\n};\n\n/*\n   Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  a = a.toString();\n  b = b.toString();\n  let x = [];\n  let i = 0;\n  while (i < a.length) {\n    x.push(a[i] ^ b[i] ^ 3);\n    i++;\n  }\n  return x.join('');\n};\n\n/*\n   Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  a = a.toString();\n  b = b.toString();\n  let x = [];\n  let i = 0;\n  while (i < a.length) {\n    x.push(a[i] ^ b[i] ^ 4);\n    i++;\n  }\n  return x.join('');\n};\n\n/*\n   Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  a = a.toString();\n  b = b.toString();\n  let x = [];\n  let i = 0;\n  while (i < a.length) {\n    x.push(a[i] ^ b[i] ^ 5);\n    i++;\n  }\n  return x.join('');\n};\n\n/*\n   Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  a = a.toString();\n  b = b.toString();\n  let x = [];\n  let i = 0;\n  while (i < a.length) {\n    x.push(a[i] ^ b[i] ^ 6);\n    i++;\n  }\n  return x.join('');\n};\n\n/*\n   Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor9 = (a, b) => {\n  a = a.toString();\n  b = b.toString();\n  let x = [];\n  let i = 0;\n  while (i < a.length) {\n    x.push(a[i] ^ b[i] ^ 7);\n    i++;\n  }\n  return x.join('');\n};\n\n/*\n   Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor10 = (a, b) => {\n  a = a.toString();\n  b = b.toString();\n  let x = [];\n  let i = 0;\n  while (i < a.length) {\n    x.push(a[i] ^ b[i]"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  const list = Array.from(strings);\n  return list.reduce((a, b) => {\n    if (a.length < b.length) {\n      return b;\n    } else {\n      return a;\n    }\n  }, list[0]);\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconsole.log(longest(['a', 'b', 'c']));\nconsole.log(longest(['a', 'bb', 'ccc']));\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n// Return a common multiple of two integers a and b\nconst commonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return commonMultiple(b, a % b);\n};\n\n// Return the smallest integer that is greater than or equal to x and\n// is a multiple of y\nconst ceilToMultipleOf = (x, y) => {\n  return commonMultiple(x, y) + y - 1;\n};\n\n// Return the smallest integer that is less than or equal to x and\n// is a multiple of y\nconst floorToMultipleOf = (x, y) => {\n  return commonMultiple(x, y) - y;\n};\n\n// Return a random integer that is a multiple of y\nconst randomMultipleOf = (x, y) => {\n  return ceilToMultipleOf(x, y) + floorToMultipleOf(x, y);\n};\n\n// Return a random integer that is a multiple of y, with a random\n// integer in the range [1, y - 1] as the smallest multiple\nconst randomMultipleOfInRange = (x, y) => {\n  return randomMultipleOf(x, y) + floorToMultipleOf(x, y);\n};\n\n// Return a random integer that is a multiple of y, with a random\n// integer in the range [1, y - 1] as the smallest multiple\nconst randomMultipleOfInRangeInclusive = (x, y) => {\n  return randomMultipleOf(x, y) + floorToMultipleOf(x, y);\n};\n\n// Return a random integer that is a multiple of y, with a random\n// integer in the range [1, y - 1] as the smallest multiple\nconst randomMultipleOfInRangeInclusiveExclusive = (x, y) => {\n  return randomMultipleOf(x, y) + ceilToMultipleOf(x, y);\n};\n\n// Return a random integer that is a multiple of y, with a random\n// integer in the range [1, y - 1] as the smallest multiple\nconst randomMultipleOfInRangeExclusive = (x, y) => {\n  return randomMultipleOf(x, y) + ceilToMultipleOf(x, y);\n};\n\n// Return a random integer that is a multiple of y, with a random\n// integer in the range [1, y - 1] as the smallest multiple\nconst randomMultipleOfInRangeExclusiveInclusive = (x, y) => {\n  return randomMultipleOf(x, y) + ceilToMultipleOf(x, y);\n};\n\n// Return a random integer that is a multiple of y, with a random\n// integer in the range [1, y - 1] as the smallest multiple\nconst randomMultipleOfInRangeExclusiveInclusiveExclusive = (x, y) => {\n  return randomMultipleOf(x, y) + ceilToMultipleOf(x, y);\n};\n\n// Return a random integer that is a multiple of y, with a random\n// integer in the range [1, y - 1] as the smallest multiple\nconst randomMultipleOfInRangeExclusiveInclusiveExclusive = (x, y) => {\n  return randomMultipleOf(x, y) + ceilToMultipleOf(x, y);\n};\n\n// Return a random integer that is a multiple of y, with a random\n// integer in the range [1, y - 1] as the smallest multiple\nconst randomMultipleOfInRangeExclusiveInclusiveExclusiveExclusive = (x, y) => {\n  return randomMultipleOf(x, y) + ceilToMultipleOf(x, y);\n};\n\n// Return a random integer that is a multiple of y, with a random\n// integer in the range [1, y - 1] as the smallest multiple\nconst randomMultipleOfInRangeExclusiveInclusiveExclusiveExclusive = (x, y) => {\n  return randomMultipleOf(x, y) + ceilToMultipleOf(x, y);\n};\n\n// Return a random integer that is a multiple of y, with a random\n// integer in the range [1, y - 1] as the smallest multiple\nconst randomMultipleOfInRangeExclusiveInclusiveExclusiveExclusive = (x, y) => {\n  return randomMultipleOf(x, y) + ceilToMultipleOf(x, y);\n};\n\n// Return a random integer that is a multiple of y, with a random\n// integer in the range [1, y - 1] as the smallest multiple\nconst randomMultipleOfInRangeExclusiveInclusiveExclusiveExclusive = (x, y) => {\n  return randomMultipleOf(x, y) + ceilToMultipleOf(x, y);\n};\n\n// Return a random integer that is a multiple of y, with a random\n// integer in the range [1, y - 1] as the smallest multiple\nconst randomMultipleOfInRangeExclusiveInclusiveExclusiveExclusive = (x, y) => {\n  return randomMultipleOf(x, y) + ceilToMultipleOf(x, y);\n};\n\n// Return a random integer that is a multiple of y, with a random\n// integer in the range [1, y - 1] as the smallest multiple\nconst randomMultipleOfInRangeExclusiveInclusiveExclusiveExclusive = (x, y) => {\n  return randomMultipleOf(x, y) + ceilToMultipleOf(x, y);\n};\n\n// Return a random integer that is a multiple of y, with a random\n// integer in the range [1, y - 1] as the smallest multiple\nconst randomMultipleOfInRangeExclusiveInclusiveExclusiveExclusive = (x, y) => {\n  return randomMultipleOf(x, y) + ceilToMultipleOf(x, y);\n};\n\n// Return a random integer that is a multiple of y, with a random\n// integer in the range [1, y - 1] as the smallest multiple\nconst randomMultipleOfInRangeExclusiveInclusiveExclusiveExclusive = (x, y) => {\n  return randomMultipleOf(x, y) + ceilToMultipleOf(x, y);\n};\n\n// Return a random integer that is a multiple of y, with a random\n// integer in the range [1, y - 1] as the smallest multiple\nconst randomMultipleOfInRangeExclusive"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const length = string.length\n  if (length === 0) return []\n\n  const allPrefixes = []\n  let prefix = string.substr(0, 1)\n  while (prefix) {\n    allPrefixes.push(prefix)\n    prefix = string.substr(0, prefix.length + 1)\n  }\n  return allPrefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'cab', 'cba', 'cbab', 'cbad']\n  */\nconst allSuffixes = (string) => {\n  const length = string.length\n  if (length === 0) return []\n\n  const allSuffixes = []\n  let suffix = string.substr(length - 1)\n  while (suffix) {\n    allSuffixes.push(suffix)\n    suffix = string.substr(length - suffix.length - 1)\n  }\n  return allSuffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'cab', 'cba', 'cbab', 'cbad']\n  */\nconst allSuffixes = (string) => {\n  const length = string.length\n  if (length === 0) return []\n\n  const allSuffixes = []\n  let suffix = string.substr(length - 1)\n  while (suffix) {\n    allSuffixes.push(suffix)\n    suffix = string.substr(length - suffix.length - 1)\n  }\n  return allSuffixes\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'a', 'b', 'bc', 'c', 'cab', 'cba', 'cbab', 'cbad']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const length = string.length\n  if (length === 0) return []\n\n  const allPrefixesAndSuffixes = []\n  let prefix = string.substr(0, 1)\n  while (prefix) {\n    allPrefixesAndSuffixes.push(prefix)\n    prefix = string.substr(0, prefix.length + 1)\n  }\n  let suffix = string.substr(length - 1)\n  while (suffix) {\n    allPrefixesAndSuffixes.push(suffix)\n    suffix = string.substr(length - suffix.length - 1)\n  }\n  return allPrefixesAndSuffixes\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'a', 'b', 'bc', 'c', 'cab', 'cba', 'cbab', 'cbad']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const length = string.length\n  if (length === 0) return []\n\n  const allPrefixesAndSuffixes = []\n  let prefix = string.substr(0, 1)\n  while (prefix) {\n    allPrefixesAndSuffixes.push(prefix)\n    prefix = string.substr(0, prefix.length + 1)\n  }\n  let suffix = string.substr(length - 1)\n  while (suffix) {\n    allPrefixesAndSuffixes.push(suffix)\n    suffix = string.substr(length - suffix.length - 1)\n  }\n  return allPrefixesAndSuffixes\n}\n\n/* Return the longest common prefix of two strings.\n  >>> longestCommonPrefix('abcd', 'abcd')\n  'abcd'\n  >>> longestCommonPrefix('abcd', 'abc')\n  'ab'\n  >>> longestCommonPrefix('abcd', 'ab')\n  ''\n  >>> longestCommonPrefix('abcd', 'bc')\n  ''\n  >>> longestCommonPrefix('abcd', 'abd')\n  ''\n  >>> longestCommonPrefix('abcd', 'abce')\n  ''\n  */\nconst longestCommonPrefix = (string1, string2) => {\n  if (string1.length < string2.length) return ''\n  return string1.substr(0, string2.indexOf(string1.substr(0)))\n}\n\n/* Return the longest common suffix of two strings.\n  >>> longestCommonSuffix('abcd', 'abcd')\n  'abcd'\n  >>> longestCommonSuffix('abcd', 'abc')\n  'ab'\n  >>> longestCommonSuffix('abcd', 'ab')\n  ''\n  >>> longestCommonSuffix('abcd', 'bc')\n  ''\n  >>> longestCommonSuffix('abcd', 'abd')\n  ''\n  >>> longestCommonSuffix('abcd', 'abce')\n  ''\n  */\nconst longestCommonSuffix = (string1, string2) => {\n  if (string1.length < string2.length) return ''\n  return string1.substr(string1.length - string2.indexOf(string1.substr(string1.length - string2.length)))\n}\n\n/* Return the longest common prefix and suffix of two strings.\n  >>> longestCommonPrefixAndSuffix('abcd', 'abcd')\n  'abcd'\n  >>> longestCommonPrefixAndSuffix('abcd', 'abc')\n  'ab'\n  >>> longestCommonPrefixAndSuffix('abcd', 'ab')\n  ''\n  >>> longestCommonPrefixAndSuffix('abcd', 'bc')\n  ''\n  >>> longestCommonPrefixAndSuffix('abcd', 'abd')\n  ''\n  >>> longestCommonPrefixAndSuffix('abcd', 'abce')\n  ''\n  */\nconst longestCommonPrefixAndSuffix = (string1, string"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '', i = 0;\n  while (i++ < n) {\n    result +='' + i;\n  }\n  return result;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3)\n  '0 1 2'\n  >>> stringSequence(5, 3)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, numberOfSpaces) => {\n  let result = '', i = 0;\n  while (i++ < numberOfSpaces) {\n    result +='' + i;\n  }\n  while (i++ < n) {\n    result +='' + i;\n  }\n  return result;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 4)\n  '0 1 2 3'\n  >>> stringSequence(5, 4)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, numberOfSpaces, numberOfDashes) => {\n  let result = '', i = 0;\n  while (i++ < numberOfSpaces) {\n    result +='' + i;\n  }\n  while (i++ < numberOfDashes) {\n    result += '-' + i;\n  }\n  while (i++ < n) {\n    result +='' + i;\n  }\n  return result;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 2, 2)\n  '0 1'\n  >>> stringSequence(5, 2, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, numberOfSpaces, numberOfDashes, numberOfSpaces2) => {\n  let result = '', i = 0;\n  while (i++ < numberOfSpaces) {\n    result +='' + i;\n  }\n  while (i++ < numberOfDashes) {\n    result += '-' + i;\n  }\n  while (i++ < numberOfSpaces2) {\n    result +='' + i;\n  }\n  while (i++ < n) {\n    result +='' + i;\n  }\n  return result;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 2, 2, 3)\n  '0 1 2'\n  >>> stringSequence(5, 2, 2, 3)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, numberOfSpaces, numberOfDashes, numberOfSpaces2, numberOfDashes2) => {\n  let result = '', i = 0;\n  while (i++ < numberOfSpaces) {\n    result +='' + i;\n  }\n  while (i++ < numberOfDashes) {\n    result += '-' + i;\n  }\n  while (i++ < numberOfSpaces2) {\n    result +='' + i;\n  }\n  while (i++ < numberOfDashes2) {\n    result += '-' + i;\n  }\n  while (i++ < n) {\n    result +='' + i;\n  }\n  return result;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 2, 2, 3)\n  '0 1 2 3'\n  >>> stringSequence(5, 3, 2, 2, 3)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, numberOfSpaces, numberOfDashes, numberOfSpaces2, numberOfDashes2, numberOfSpaces3) => {\n  let result = '', i = 0;\n  while (i++ < numberOfSpaces) {\n    result +='' + i;\n  }\n  while (i++ < numberOfDashes) {\n    result += '-' + i;\n  }\n  while (i++ < numberOfSpaces2) {\n    result +='' + i;\n  }\n  while (i++ < numberOfDashes2) {\n    result += '-' + i;\n  }\n  while (i++ < numberOfSpaces3) {\n    result +='' + i;\n  }\n  while (i++ < n) {\n    result +='' + i;\n  }\n  return result;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 2, 2, 3, 2)\n  '0 1 2 2 3'\n  >>> stringSequence(5, 3, 2, 2, 3, 2)\n  '0 1 2 2 3 4 5'\n  */\nconst stringSequence = (n, numberOfSpaces, numberOfDashes, numberOfSpaces2, numberOfDashes2, numberOfSpaces3, numberOfDashes3) => {\n  let result = '', i = 0;\n  while (i++ < numberOfSpaces) {\n    result +='' + i;\n  }\n  while (i++ < numberOfDashes) {\n    result += '-' + i;\n  }\n  while (i++ < numberOfSpaces2) {\n    result +='' + i;\n  }\n  while (i++ < numberOfDashes2) {\n    result += '-' + i;\n  }\n  while (i++ < numberOfSpaces3) {\n    result +='' + i;\n  }\n  while (i++ < numberOfDashes3) {\n    result += '-' + i;\n  }\n  while (i++ < n) {\n    result +='' + i;\n  }\n  return result;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 4, 2, 2, 3, 2, 2)\n  '0 1 2 2 3 2'"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let numOfDistinctCharacters = 0\n  let upperCaseChars = []\n  let lowerCaseChars = []\n  for (let i = 0; i < string.length; i++) {\n    let currentChar = string[i]\n    if (currentChar.toUpperCase()!== currentChar.toLowerCase()) {\n      numOfDistinctCharacters++\n      upperCaseChars.push(currentChar.toUpperCase())\n      lowerCaseChars.push(currentChar.toLowerCase())\n    }\n  }\n  return upperCaseChars.length + lowerCaseChars.length + numOfDistinctCharacters\n}\n\nmodule.exports = countDistinctCharacters\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  // split music_string into list of chords\n  const chords = music_string.split(\" \");\n  // initialize list of beats\n  const beats = [];\n\n  // loop through the chords, get number of beats for each chord and append to beats list\n  chords.forEach((chord) => {\n    const beats_in_chord = getBeatsInChord(chord);\n    beats.push(beats_in_chord);\n  });\n\n  // return the list of beats\n  return beats;\n}\n\n// calculate number of beats in a given chord\nconst getBeatsInChord = (chord) => {\n  const beats_in_chord = 0;\n  if (chord.includes(\"o\") || chord.includes(\"o|\") || chord.includes(\"o/\") || chord.includes(\"o\\\\\")) {\n    beats_in_chord = 4;\n  } else if (chord.includes(\"o/\") || chord.includes(\"o\\\\\")) {\n    beats_in_chord = 2;\n  } else if (chord.includes(\"o\")) {\n    beats_in_chord = 1;\n  }\n\n  return beats_in_chord;\n}\n\n// get list of notes in a given chord\nconst getNotesInChord = (chord) => {\n  const notes = [];\n  if (chord.includes(\"o\") || chord.includes(\"o|\") || chord.includes(\"o/\") || chord.includes(\"o\\\\\")) {\n    notes.push(\"o\");\n    notes.push(\"o|\");\n    notes.push(\"o/\");\n    notes.push(\"o\\\\\");\n  } else if (chord.includes(\"o/\") || chord.includes(\"o\\\\\")) {\n    notes.push(\"o/\");\n    notes.push(\"o\\\\\");\n  } else if (chord.includes(\"o\")) {\n    notes.push(\"o\");\n  }\n\n  return notes;\n}\n\n// test function\nconst test = () => {\n  console.log(\"test\");\n  console.log(parseMusic(\"o o|.| o| o|.|.|.|.| o o\"));\n}\n\n// export function\nexport default parseMusic;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n    const strLen = string.length;\n    const substrLen = substring.length;\n\n    if (strLen < substrLen) {\n        return 0;\n    }\n\n    const count = (string.indexOf(substring)!== -1)? substrLen : 0;\n    const rest = strLen - substrLen;\n    const count2 = rest === substrLen - 1? substrLen - 1 : substrLen;\n\n    return count + count2;\n};\n\nconsole.log(howManyTimes('abc', 'a'));\nconsole.log(howManyTimes('abc', 'aa'));\nconsole.log(howManyTimes('aaaa', 'aa'));\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numbersToSort = parseInt(numbers);\n  let sortedArray = numbersToSort.sort(function(a,b){\n    return a - b;\n  });\n  let sortedNumbers = sortedArray.join('');\n  return sortedNumbers;\n};\n\nmodule.exports = sortNumbers;\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const min = (a, b) => a < b? a : b;\n  const max = (a, b) => a > b? a : b;\n  const [a, b] = _.sortBy(numbers, n => n);\n  return [min(a, b), max(a, b)];\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min.apply(Math, numbers)\n  const max = Math.max.apply(Math, numbers)\n  const scaled = []\n  for (let i = 0; i < numbers.length; i++) {\n    scaled[i] = (numbers[i] - min) / (max - min)\n  }\n  return scaled\n}\n\nconst scale = (numbers, scaleBy) => {\n  const scaled = rescaleToUnit(numbers)\n  for (let i = 0; i < scaled.length; i++) {\n    scaled[i] = scaled[i] * scaleBy\n  }\n  return scaled\n}\n\nconst getMaxInList = (list) => {\n  let max = 0\n  for (let i = 0; i < list.length; i++) {\n    max = Math.max(max, list[i])\n  }\n  return max\n}\n\nconst getMaxInArray = (array) => {\n  let max = 0\n  for (let i = 0; i < array.length; i++) {\n    max = Math.max(max, array[i])\n  }\n  return max\n}\n\n/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithMax = (numbers, max) => {\n  const min = Math.min.apply(Math, numbers)\n  const scaled = []\n  for (let i = 0; i < numbers.length; i++) {\n    scaled[i] = (numbers[i] - min) / (max - min)\n  }\n  return scaled\n}\n\nconst scaleWithMax = (numbers, scaleBy, max) => {\n  const scaled = rescaleToUnitWithMax(numbers, max)\n  for (let i = 0; i < scaled.length; i++) {\n    scaled[i] = scaled[i] * scaleBy\n  }\n  return scaled\n}\n\nconst sortByLength = (list) => {\n  return list.sort((a, b) => {\n    return b.length - a.length\n  })\n}\n\nconst sortByLengthWithMax = (list, max) => {\n  return list.sort((a, b) => {\n    return b.length - a.length\n  })\n}\n\n/*\n  Given a list of words, will return a sorted list of the words that have the highest\n  frequency in the list.\n  >>> getWordsInFreq([\"dog\", \"cat\", \"cat\", \"fish\", \"fish\"])\n  ['fish', 'cat', 'dog']\n  */\nconst getWordsInFreq = (list) => {\n  return sortByLength(list)\n}\n\n/*\n  Given a list of words, will return a sorted list of the words that have the highest\n  frequency in the list.\n  >>> getWordsInFreq([\"dog\", \"cat\", \"cat\", \"fish\", \"fish\"])\n  ['fish', 'cat', 'dog']\n  */\nconst getWordsInFreqWithMax = (list, max) => {\n  return sortByLengthWithMax(list, max)\n}\n\n/* Given a list of words, will return a sorted list of the words that have the highest\n   frequency in the list.\n  >>> getWordsInFreq([\"dog\", \"cat\", \"cat\", \"fish\", \"fish\"])\n  ['fish', 'cat', 'dog']\n  */\nconst getWordsInFreqWithMaxWithMax = (list, max) => {\n  return sortByLengthWithMax(list, max)\n}\n\nconst main = (list) => {\n  list.forEach((word) => {\n    console.log(word)\n  })\n}\n\nconst main2 = (list) => {\n  getWordsInFreq(list)\n}\n\nconst main3 = (list) => {\n  getWordsInFreqWithMax(list)\n}\n\nconst main4 = (list) => {\n  getWordsInFreqWithMaxWithMax(list)\n}\n\nmain([1, 2, 3, 4, 5, 6])\nmain2([1, 2, 3, 4, 5, 6])\nmain3([1, 2, 3, 4, 5, 6])\nmain4([1, 2, 3, 4, 5, 6])\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const filtered = [];\n  const isInteger = (value) => {\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n  };\n  for (const value of values) {\n    if (isInteger(value)) {\n      filtered.push(value);\n    }\n  }\n  return filtered;\n};\n\nexport default filterIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    let char_count = 0;\n    for (let i = 0; i < string.length; i++) {\n        char_count += string.charCodeAt(i);\n    }\n    return char_count;\n}\n\n/*\n  >>> strlen('abcdefg')\n  9\n  >>> strlen('a')\n  1\n  >>> strlen('')\n  0\n  */\nconst strlen = (string) => {\n    let char_count = 0;\n    for (let i = 0; i < string.length; i++) {\n        char_count += string.charCodeAt(i);\n    }\n    return char_count;\n}\n\n/*\n  >>> strlen('abcdefg')\n  9\n  >>> strlen('a')\n  1\n  >>> strlen('')\n  0\n  */\nconst strlen = (string) => {\n    let char_count = 0;\n    for (let i = 0; i < string.length; i++) {\n        char_count += string.charCodeAt(i);\n    }\n    return char_count;\n}\n\n/* Return string with last X characters removed\n  >>> strcut(12345, 3)\n  1234\n  >>> strcut(12345, 4)\n  1234\n  >>> strcut(12345, -2)\n  1234\n  >>> strcut(12345, -3)\n  12\n  >>> strcut(12345, 0)\n  ''\n  >>> strcut(12345, 2)\n  12\n  >>> strcut(12345, 2, 'a')\n  a12\n  >>> strcut(12345, 2, '0')\n  0012\n  >>> strcut(12345, 2, '*')\n  **12\n  */\nconst strcut = (string, count, replacement) => {\n    if (replacement === undefined) {\n        replacement = '';\n    }\n    let new_string = string;\n    if (count < 0) {\n        new_string = string.slice(string.length + count);\n    } else if (count === 0) {\n        return '';\n    } else {\n        new_string = string.slice(count);\n    }\n    return new_string.replace(/\\w{2}/g, replacement);\n}\n\n/*\n  >>> strcut(12345, 3, '0')\n  01234\n  >>> strcut(12345, 3, '*')\n  ***12\n  >>> strcut(12345, 3, 'a')\n  aa12\n  >>> strcut(12345, 3, '0', 'a')\n  a0a0\n  >>> strcut(12345, 3, '*', 'a')\n  *a*\n  */\nconst strcut = (string, count, replacement, replacement_char) => {\n    if (replacement_char === undefined) {\n        replacement_char = '*';\n    }\n    let new_string = string;\n    if (count < 0) {\n        new_string = string.slice(string.length + count);\n    } else if (count === 0) {\n        return '';\n    } else {\n        new_string = string.slice(count);\n    }\n    return new_string.replace(/\\w{2}/g, replacement_char);\n}\n\n/*\n  >>> strcut(12345, 3, '*')\n  ***12\n  >>> strcut(12345, 3, '*', '0')\n  0***0\n  >>> strcut(12345, 3, '*', '*')\n  ****\n  >>> strcut(12345, 3, '*', '0', '*')\n  **0***\n  */\nconst strcut = (string, count, replacement, replacement_char, replacement_char_2) => {\n    if (replacement_char_2 === undefined) {\n        replacement_char_2 = '*';\n    }\n    let new_string = string;\n    if (count < 0) {\n        new_string = string.slice(string.length + count);\n    } else if (count === 0) {\n        return '';\n    } else {\n        new_string = string.slice(count);\n    }\n    return new_string.replace(/\\w{2}/g, replacement_char, replacement_char_2);\n}\n\n/*\n  >>> strcut(12345, 3, '*', '0', '*')\n  **0***\n  */\nconst strcut = (string, count, replacement, replacement_char, replacement_char_2, replacement_char_3) => {\n    if (replacement_char_3 === undefined) {\n        replacement_char_3 = '*';\n    }\n    let new_string = string;\n    if (count < 0) {\n        new_string = string.slice(string.length + count);\n    } else if (count === 0) {\n        return '';\n    } else {\n        new_string = string.slice(count);\n    }\n    return new_string.replace(/\\w{2}/g, replacement_char, replacement_char_2, replacement_char_3);\n}\n\n/*\n  >>> strcut(12345, 3, '*', '0', '*', '*')\n  **0***0\n  */\nconst strcut = (string, count, replacement, replacement_char, replacement_char_2, replacement_char_3, replacement_char_4) => {\n    if (replacement_char_4 === undefined) {\n        replacement_char_4 = '*';\n    }\n    let new_string = string;\n    if (count < 0) {\n        new_string = string.slice(string.length + count);\n    } else if (count === 0) {\n        return '';\n    } else {\n        new_string = string.slice(count);\n    }\n    return new_string.replace(/\\w{2}/g, replacement_char, replacement_char_2, replacement_char_3, replacement_char_4);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  let temp = 0;\n  while (temp < n) {\n    if (n % temp === 0) {\n      if (temp > largest) {\n        largest = temp;\n      }\n    }\n    temp = largest + 1;\n  }\n  return largest;\n}\n\nconsole.log(largestDivisor(7)); // 3\nconsole.log(largestDivisor(12)); // 4\nconsole.log(largestDivisor(14)); // 2\nconsole.log(largestDivisor(20)); // 5\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  const factorize = (n) => {\n    if (n === 1) {\n      return [1];\n    } else {\n      const x = Math.floor(n / 2);\n      const y = Math.floor(n - x);\n      return [x, y];\n    }\n  };\n  for (let i = 1; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      const factors = factorize(n / i);\n      for (let j = 0; j < factors.length; j++) {\n        const k = i * factors[j];\n        if (k <= n) {\n          factors.push(k);\n        }\n      }\n      break;\n    }\n  }\n  return factors;\n};\n\nconsole.log(factorize(8));\nconsole.log(factorize(25));\nconsole.log(factorize(70));\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n    const uniqueNums = new Set();\n    for (let i = 0; i < numbers.length; i++) {\n        if (!uniqueNums.has(numbers[i])) {\n            uniqueNums.add(numbers[i]);\n        }\n    }\n    return Array.from(uniqueNums);\n};\n\nremoveDuplicates([1, 2, 3, 2, 4]); //=> [1, 3, 4]<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  const temp = string.toLowerCase()\n  return temp.replace(/[a-z]/g, (c) => c.toUpperCase())\n}\n\n/* For a will give string, will add a space and then lowercase all letters.\n  >>> addSpace('Hello')\n  'Hello '\n  */\nconst addSpace = (string) => {\n  const temp = string.toLowerCase()\n  return temp +''\n}\n\n/* For a will give string, will remove all spaces and then lowercase all letters.\n  >>> removeSpace('Hello ')\n  'Hello'\n  */\nconst removeSpace = (string) => {\n  const temp = string.toLowerCase()\n  return temp.replace(/\\s/g, '')\n}\n\n/* For a will give string, will remove all whitespace and then lowercase all letters.\n  >>> removeWhitespace('Hello ')\n  'Hello'\n  */\nconst removeWhitespace = (string) => {\n  const temp = string.toLowerCase()\n  return temp.replace(/\\s/g, '')\n}\n\n/* For a will give string, will capitalize all letters.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalize = (string) => {\n  return string.toUpperCase()\n}\n\n/* For a will give string, will uppercase all letters.\n  >>> uppercase('Hello')\n  'HELLO'\n  */\nconst uppercase = (string) => {\n  return string.toUpperCase()\n}\n\n/* For a will give string, will lowercase all letters.\n  >>> lowercase('Hello')\n  'hello'\n  */\nconst lowercase = (string) => {\n  return string.toLowerCase()\n}\n\n/* For a will give string, will add a new line to the string.\n  >>> addNewLine('Hello')\n  'Hello\\n'\n  */\nconst addNewLine = (string) => {\n  return string + '\\n'\n}\n\n/* For a will give string, will remove all new lines.\n  >>> removeNewLine('Hello\\n')\n  'Hello'\n  */\nconst removeNewLine = (string) => {\n  return string.replace(/\\n/g, '')\n}\n\n/* For a will give string, will replace all new lines with a single new line.\n  >>> replaceNewLine('Hello\\nWorld')\n  'HelloWorld'\n  */\nconst replaceNewLine = (string) => {\n  return string.replace(/\\n/g,'')\n}\n\n/* For a will give string, will split the string by a space and then capitalize the first letter of each word.\n  >>> splitCapitalize('Hello World')\n  ['Hello', 'World']\n  */\nconst splitCapitalize = (string) => {\n  const words = string.split(' ')\n  return words.map((word) => {\n    return capitalize(word)\n  })\n}\n\n/* For a will give string, will split the string by a space and then lowercase the first letter of each word.\n  >>> splitLowercase('Hello World')\n  ['hello', 'world']\n  */\nconst splitLowercase = (string) => {\n  const words = string.split(' ')\n  return words.map((word) => {\n    return lowercase(word)\n  })\n}\n\n/* For a will give string, will split the string by a space and then uppercase the first letter of each word.\n  >>> splitUppercase('Hello World')\n  ['HELLO', 'WORLD']\n  */\nconst splitUppercase = (string) => {\n  const words = string.split(' ')\n  return words.map((word) => {\n    return uppercase(word)\n  })\n}\n\n/* For a will give string, will split the string by a space and then capitalize each word.\n  >>> splitCapitalizeEach('Hello World')\n  ['Hello', 'World']\n  */\nconst splitCapitalizeEach = (string) => {\n  const words = string.split(' ')\n  return words.map((word) => {\n    return capitalize(word)\n  })\n}\n\n/* For a will give string, will split the string by a space and then lowercase each word.\n  >>> splitLowercaseEach('Hello World')\n  ['hello', 'world']\n  */\nconst splitLowercaseEach = (string) => {\n  const words = string.split(' ')\n  return words.map((word) => {\n    return lowercase(word)\n  })\n}\n\n/* For a will give string, will split the string by a space and then uppercase each word.\n  >>> splitUppercaseEach('Hello World')\n  ['HELLO', 'WORLD']\n  */\nconst splitUppercaseEach = (string) => {\n  const words = string.split(' ')\n  return words.map((word) => {\n    return uppercase(word)\n  })\n}\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  const buffer = []\n  for (let i = 0, len = strings.length; i < len; i++) {\n    buffer.push(strings[i])\n  }\n  return buffer.join('')\n}\n\n// Converts a string to lowercase\nconst toLowerCase = (str) => {\n  return str.toLowerCase()\n}\n\n// Converts a string to uppercase\nconst toUpperCase = (str) => {\n  return str.toUpperCase()\n}\n\n// Replaces spaces with underscores\nconst replaceSpaces = (str) => {\n  return str.replace(/\\s/g, '_')\n}\n\n// Splits string into array of words\nconst splitWords = (str) => {\n  return str.split(/\\s+/).filter(function (w) {\n    return w.length > 0\n  })\n}\n\n// Takes an array of strings and return a single string\nconst joinWords = (strings) => {\n  return strings.join(' ')\n}\n\n// Returns a function that will return a string of the words in the given\n// array of strings, but in reverse order.\nconst reverseWords = (strings) => {\n  return (arr) => {\n    return joinWords(strings.map((word) => {\n      return word.split('').reverse().join('')\n    }))(arr)\n  }\n}\n\n// Takes a string and a regex and returns the first matching string\nconst matchFirst = (str, re) => {\n  let m = str.match(re)\n  if (m && m.length > 0) {\n    return m[0]\n  }\n}\n\n// Takes a string and a regex and returns the last matching string\nconst matchLast = (str, re) => {\n  let m = str.match(re)\n  if (m && m.length > 0) {\n    return m[m.length - 1]\n  }\n}\n\n// Returns a string with every occurence of a specified string replaced\n// with another\nconst replaceAll = (str, re, repl) => {\n  return str.replace(re, repl)\n}\n\n// Returns a string with every occurence of a specified string replaced\n// with another\nconst replaceAllWith = (str, re, repl) => {\n  return str.replace(re, repl)\n}\n\n// Splits a string by a delimiter, returning an array of substrings\nconst split = (str, delim) => {\n  return str.split(delim)\n}\n\n// Replaces all occurrances of a substring in a string with another\n// substring\nconst replaceAllSubStrings = (str, substring, with) => {\n  let re = new RegExp(substring, 'g')\n  return replaceAll(str, re, with)\n}\n\n// Replaces all occurrances of a substring in a string with another\n// substring\nconst replaceAllSubStringsWith = (str, substring, with) => {\n  let re = new RegExp(substring, 'g')\n  return replaceAll(str, re, with)\n}\n\n// Converts a string to an array of numbers\nconst toInts = (str) => {\n  return parseInt(str, 10)\n}\n\n// Converts a string to a boolean\nconst toBoolean = (str) => {\n  return (str === 'true')? true : false\n}\n\n// Converts a string to a number\nconst toNumber = (str) => {\n  return parseFloat(str)\n}\n\n// Converts a string to a float\nconst toFloat = (str) => {\n  return parseFloat(str)\n}\n\n// Returns a string with every occurence of a specified string replaced\n// with another\nconst replaceAllSubStrings = (str, substring, with) => {\n  let re = new RegExp(substring, 'g')\n  return replaceAll(str, re, with)\n}\n\n// Returns a string with every occurence of a specified string replaced\n// with another\nconst replaceAllSubStringsWith = (str, substring, with) => {\n  let re = new RegExp(substring, 'g')\n  return replaceAll(str, re, with)\n}\n\n// Converts a string to an array of numbers\nconst toInts = (str) => {\n  return parseInt(str, 10)\n}\n\n// Converts a string to a boolean\nconst toBoolean = (str) => {\n  return (str === 'true')? true : false\n}\n\n// Converts a string to a number\nconst toNumber = (str) => {\n  return parseFloat(str)\n}\n\n// Converts a string to a float\nconst toFloat = (str) => {\n  return parseFloat(str)\n}\n\n// Returns a string with every occurence of a specified string replaced\n// with another\nconst replaceAllSubStrings = (str, substring, with) => {\n  let re = new RegExp(substring, 'g')\n  return replaceAll(str, re, with)\n}\n\n// Returns a string with every occurence of a specified string replaced\n// with another\nconst replaceAllSubStringsWith = (str, substring, with) => {\n  let re = new RegExp(substring, 'g')\n  return replaceAll(str, re, with)\n}\n\n// Converts a string to an array of numbers\nconst toInts = (str) => {\n  return parseInt(str, 10)\n}\n\n// Converts a string to a boolean\nconst toBoolean = (str) => {\n  return (str === 'true')? true : false\n}\n\n// Converts a string to a number\nconst toNumber = (str) => {\n  return parseFloat(str)\n}\n\n// Converts a string to a float\nconst toFloat = (str) => {\n  return parseFloat(str)\n}\n\n// Returns a string with every occurence of a specified string replaced\n// with another\nconst replaceAllSubStrings = (str, substring, with) => {\n  let re = new RegExp(substring, 'g')\n  return replaceAll(str, re, with)\n}\n\n// Returns a string with every occurence of"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(\n    (s) => s.indexOf(prefix) === 0\n  );\n};\n\n// Given a list of words, return the count of the number of instances of each word in the list.\n// If a word occurs multiple times in the list, only one instance will be counted.\n// For example, given:\n//   ['foo', 'bar', 'foo', 'foo', 'bar', 'bar']\n//   returns:\n//   {foo: 3, bar: 2}\n// Words in the list can be in any order.\nconst countByWord = (words) => {\n  const result = {};\n  for (const word of words) {\n    if (result[word]) {\n      result[word] += 1;\n    } else {\n      result[word] = 1;\n    }\n  }\n  return result;\n};\n\n// Given a string, determine if it is a palindrome.\nconst isPalindrome = (s) => {\n  const reverse = s.split('').reverse().join('');\n  return s === reverse;\n};\n\n// Given a string, return the string with all spaces removed.\nconst trim = (s) => s.replace(/\\s+/g, '');\n\n// Given a string, return the string with all leading and trailing spaces removed.\nconst trimBoth = (s) => s.replace(/^\\s+|\\s+$/g, '');\n\n// Given a string, return the string with all leading and trailing spaces removed.\nconst trimBothR = (s) => s.replace(/^\\s+|\\s+$/g, '');\n\n// Given a string, return the string with all leading spaces removed.\nconst trimLeft = (s) => s.replace(/^\\s+/, '');\n\n// Given a string, return the string with all trailing spaces removed.\nconst trimRight = (s) => s.replace(/\\s+$/, '');\n\n// Given a string, return the string with all leading and trailing spaces removed.\nconst trimBothL = (s) => s.replace(/^\\s+|\\s+$/g, '');\n\n// Given a string, return the string with all trailing spaces removed.\nconst trimRightL = (s) => s.replace(/\\s+$/, '');\n\n// Given a string, return the string with all leading and trailing spaces removed.\nconst trimBothRL = (s) => s.replace(/^\\s+|\\s+$/g, '');\n\n// Given a string, return the string with all leading and trailing spaces removed.\nconst trimBothRLL = (s) => s.replace(/^\\s+|\\s+$/g, '');\n\n// Given a string, return the string with all leading spaces removed.\nconst trimLeftL = (s) => s.replace(/^\\s+/, '');\n\n// Given a string, return the string with all trailing spaces removed.\nconst trimRightR = (s) => s.replace(/\\s+$/, '');\n\n// Given a string, return the string with all leading and trailing spaces removed.\nconst trimBothLL = (s) => s.replace(/^\\s+|\\s+$/g, '');\n\n// Given a string, return the string with all leading and trailing spaces removed.\nconst trimBothRLL = (s) => s.replace(/^\\s+|\\s+$/g, '');\n\n// Given a string, return the string with all leading and trailing spaces removed.\nconst trimBothRLLL = (s) => s.replace(/^\\s+|\\s+$/g, '');\n\n// Given a string, return the string with all trailing spaces removed.\nconst trimRightRLL = (s) => s.replace(/\\s+$/, '');\n\n// Given a string, return the string with all leading and trailing spaces removed.\nconst trimRightRLLL = (s) => s.replace(/^\\s+|\\s+$/g, '');\n\n// Given a string, return the string with all leading and trailing spaces removed.\nconst trimRightRLLLL = (s) => s.replace(/^\\s+|\\s+$/g, '');\n\n// Given a string, return the string with all trailing spaces removed.\nconst trimRightRLLLLL = (s) => s.replace(/\\s+$/, '');\n\n// Given a string, return the string with all leading and trailing spaces removed.\nconst trimLeftLL = (s) => s.replace(/^\\s+/, '');\n\n// Given a string, return the string with all trailing spaces removed.\nconst trimRightLL = (s) => s.replace(/\\s+$/, '');\n\n// Given a string, return the string with all leading and trailing spaces removed.\nconst trimBothLLL = (s) => s.replace(/^\\s+|\\s+$/g, '');\n\n// Given a string, return the string with all trailing spaces removed.\nconst trimRightLLL = (s) => s.replace(/\\s+$/, '');\n\n// Given a string, return the string with all leading and trailing spaces removed.\nconst trimBothLLLL = (s) => s.replace(/^\\s+|\\s+$/g, '');\n\n// Given a string, return the string with all trailing spaces removed.\nconst trimRightLLLL = (s) => s.replace(/\\s+$/, '');\n\n// Given a string, return the string with all leading and trailing spaces removed.\nconst trimBothLLLLL = (s) => s.replace(/^\\s+|\\s+$/g, '');\n\n// Given a string, return the string with all trailing spaces removed.\nconst trimRightLLLLLL = (s) => s.replace(/\\s+$/, '');\n\n// Given a string, return the string with all leading and trailing spaces removed.\nconst trimRightLLLLLL = (s) => s.replace(/^\\s+|\\s+$/g, '');\n\n// Given a string, return the string with all leading and trailing spaces removed.\nconst trimLeftLLL"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/*\n  Find the largest value in a list of positive integers.\n  >>> getLargest([3, -4, 5, 6, 2, -1])\n  6\n  >>> getLargest([4, 2, -1, -4, -2, -5, -3])\n  -5\n  >>> getLargest([3, -3, -4, -3, -4, -5, -3])\n  -5\n  >>> getLargest([1, 1, 1, 1, 2, 3, 4, 5])\n  5\n  >>> getLargest([1, 1, 2, 3, 4, 5, 6, 7])\n  7\n  >>> getLargest([0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  */\nconst getLargest = (l) => {\n  return getPositive(l).reduce((pre, cur) => Math.max(pre, cur));\n};\n\n/*\n  Find the largest difference between two numbers in a list of positive integers.\n  >>> getDiff([3, -4, 5, 6, 2, -1])\n  5\n  >>> getDiff([4, 2, -1, -4, -2, -5, -3])\n  3\n  >>> getDiff([3, -3, -4, -3, -4, -5, -3])\n  -3\n  >>> getDiff([1, 1, 1, 1, 2, 3, 4, 5])\n  1\n  >>> getDiff([1, 1, 2, 3, 4, 5, 6, 7])\n  1\n  >>> getDiff([0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  */\nconst getDiff = (l) => {\n  return getPositive(l).reduce((pre, cur) => Math.max(cur - pre, 0));\n};\n\n/*\n  Find the smallest number in a list of positive integers.\n  >>> getSmallest([3, -4, 5, 6, 2, -1])\n  2\n  >>> getSmallest([4, 2, -1, -4, -2, -5, -3])\n  -1\n  >>> getSmallest([3, -3, -4, -3, -4, -5, -3])\n  -3\n  >>> getSmallest([1, 1, 1, 1, 2, 3, 4, 5])\n  1\n  >>> getSmallest([1, 1, 2, 3, 4, 5, 6, 7])\n  1\n  >>> getSmallest([0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  */\nconst getSmallest = (l) => {\n  return getPositive(l).reduce((pre, cur) => Math.min(pre, cur));\n};\n\n/*\n  Find the sum of all the positive numbers in a list of positive integers.\n  >>> getSum([3, -4, 5, 6, 2, -1])\n  10\n  >>> getSum([4, 2, -1, -4, -2, -5, -3])\n  -1\n  >>> getSum([3, -3, -4, -3, -4, -5, -3])\n  -3\n  >>> getSum([1, 1, 1, 1, 2, 3, 4, 5])\n  15\n  >>> getSum([1, 1, 2, 3, 4, 5, 6, 7])\n  28\n  >>> getSum([0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  */\nconst getSum = (l) => {\n  return getPositive(l).reduce((pre, cur) => pre + cur);\n};\n\n/*\n  Find the product of all the positive numbers in a list of positive integers.\n  >>> getProduct([3, -4, 5, 6, 2, -1])\n  0\n  >>> getProduct([4, 2, -1, -4, -2, -5, -3])\n  0\n  >>> getProduct([3, -3, -4, -3, -4, -5, -3])\n  0\n  >>> getProduct([1, 1, 1, 1, 2, 3, 4, 5])\n  0\n  >>> getProduct([1, 1, 2, 3, 4, 5, 6, 7])\n  0\n  >>> getProduct([0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  */\nconst getProduct = (l) => {\n  return getPositive(l).reduce((pre, cur) => pre * cur);\n};\n\nmodule.exports = {\n  getLargest,\n  getSmallest,\n  getSum,\n  getProduct,\n  getDiff,\n  getPositive,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  const i = n - 1\n  for (let i = n - 2; i >= 2; i--) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  >>> isPrime(7)\n  true\n  >>> isPrime(8)\n  true\n  >>> isPrime(9)\n  false\n  >>> isPrime(10)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(12)\n  false\n  >>> isPrime(13)\n  false\n  >>> isPrime(14)\n  false\n  >>> isPrime(15)\n  false\n  >>> isPrime(16)\n  true\n  >>> isPrime(17)\n  false\n  >>> isPrime(18)\n  true\n  >>> isPrime(19)\n  true\n  >>> isPrime(20)\n  false\n  >>> isPrime(21)\n  false\n  >>> isPrime(22)\n  false\n  >>> isPrime(23)\n  false\n  >>> isPrime(24)\n  false\n  >>> isPrime(25)\n  false\n  >>> isPrime(26)\n  false\n  >>> isPrime(27)\n  false\n  >>> isPrime(28)\n  false\n  >>> isPrime(29)\n  false\n  >>> isPrime(30)\n  false\n  >>> isPrime(31)\n  false\n  >>> isPrime(32)\n  true\n  >>> isPrime(33)\n  false\n  >>> isPrime(34)\n  false\n  >>> isPrime(35)\n  false\n  >>> isPrime(36)\n  false\n  >>> isPrime(37)\n  false\n  >>> isPrime(38)\n  false\n  >>> isPrime(39)\n  false\n  >>> isPrime(40)\n  false\n  >>> isPrime(41)\n  false\n  >>> isPrime(42)\n  false\n  >>> isPrime(43)\n  false\n  >>> isPrime(44)\n  false\n  >>> isPrime(45)\n  false\n  >>> isPrime(46)\n  false\n  >>> isPrime(47)\n  false\n  >>> isPrime(48)\n  false\n  >>> isPrime(49)\n  false\n  >>> isPrime(50)\n  false\n  >>> isPrime(51)\n  false\n  >>> isPrime(52)\n  false\n  >>> isPrime(53)\n  false\n  >>> isPrime(54)\n  false\n  >>> isPrime(55)\n  false\n  >>> isPrime(56)\n  false\n  >>> isPrime(57)\n  false\n  >>> isPrime(58)\n  false\n  >>> isPrime(59)\n  false\n  >>> isPrime(60)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(62)\n  false\n  >>> isPrime(63)\n  false\n  >>> isPrime(64)\n  false\n  >>> isPrime(65)\n  false\n  >>> isPrime(66)\n  false\n  >>> isPrime(67)\n  false\n  >>> isPrime(68)\n  false\n  >>> isPrime(69)\n  false\n  >>> isPrime(70)\n  false\n  >>> isPrime(71)\n  false\n  >>> isPrime(72)\n  false\n  >>> isPrime(73)\n  false\n  >>> isPrime(74)\n  false\n  >>> isPrime(75)\n  false\n  >>> isPrime(76)\n  false\n  >>> isPrime(77)\n  false\n  >>> isPrime(78)\n  false\n  >>> isPrime(79)\n  false\n  >>> isPrime(80)\n  false\n  >>> isPrime(81)\n  false\n  >>> isPrime(82)\n  false\n  >>> isPrime(83)\n  false\n  >>> isPrime(84)\n  false\n  >>> isPrime(85)\n  false\n  >>> isPrime(86)\n  false\n  >>> isPrime(87)\n  false\n  >>> isPrime(88)\n  false\n  >>> isPrime(89)\n  false\n  >>> isPrime(90)\n  false\n  >>> isPrime(91)\n  false\n  >>> isPrime(92)\n  false\n  >>> isPrime(93)\n  false\n  >>> isPrime(94)\n  false\n  >>> isPrime(95)\n  false\n  >>> isPrime(96)\n  false\n  >>> isPrime(97)\n  false\n  >>> isPrime(98)\n  false\n  >>> isPrime(99)\n  false\n  >>> isPrime(100)\n  false\n  >>> isPrime(101)\n  false\n  >>> isPrime(102)\n  false\n  >>> isPrime(103)\n  false\n  >>> isPrime(104)\n  false\n  >>> isPrime(105)\n  false\n  >>> isPrime(106)\n  false\n  >>> isPrime(107)\n  false\n  >>> isPrime(108)\n  false\n  >>> isPrime(109)\n  false\n  >>> isPrime(110)\n  false\n  >>> isPrime(111)\n  false\n  >>> isPrime(112)\n  false\n  >>> isPrime(113)\n  false\n  >>> isPrime(114)\n  false\n  >>> isPrime(115)\n  false\n  >>> isPrime(116)\n  false\n  >>> isPrime(117)\n  false\n  >>> isPrime(118)\n  false\n  >>> isPrime(119)\n  false\n  >>> isPrime(120)\n  false\n  >>> isPrime(121)\n  false\n  >>> isPrime(122)\n  false\n  >>> isPrime(123)\n  false\n  >>> isPrime(124)\n  false\n  >>> isPrime(125)\n  false\n  >>> isPrime(126)\n  false\n  >>> isPrime(127)\n  false\n  >>> isPrime(128)\n  false\n  >>> isPrime(129)"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length - 1;\n  let k = xs[n];\n  let d = 0;\n  while(k === 0) {\n    n--;\n    k = xs[n];\n  }\n  let j = 1;\n  let i = 1;\n  while(j <= n) {\n    d = d + (xs[j] * i);\n    i = i + 1;\n    j++;\n  }\n  return -d;\n}\n\n//console.log(findZero([1, 2, -3, 5, -6, 7, -11, 13]));\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    let ret = [l[0], l[1], l[2]];\n    let l_ = l.slice(3);\n    let l_1 = l_.slice(0, l_.length / 3);\n    let l_2 = l_.slice(l_.length / 3);\n    let l_3 = [l_1[0], l_2[0], l_2[1], l_1[1], l_2[2], l_1[2]];\n    ret = ret.concat(l_3);\n    ret = ret.sort((a, b) => a - b);\n    return ret;\n}\n\nmodule.exports = {\n    sortThird\n}\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const seen = new Set()\n  return Array.from(new Array(l).fill(1))\n   .filter((_, i) => seen.add(i))\n   .sort((a, b) => a - b)\n}\n\n/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l) => {\n  const seen = new Map()\n  return Array.from(new Array(l).fill(1))\n   .filter((_, i) => seen.set(i, 1))\n   .sort((a, b) => a - b)\n}\n\nexport {\n  unique,\n  uniqueBy\n}\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const len = l.length;\n  let max = l[0];\n  for (let i = 1; i < len; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nexport default maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let divisor = 11\n  while (n % divisor === 0) {\n    divisor += 1\n  }\n  let i = 0\n  while (n) {\n    if (n % divisor === 0) {\n      i += 1\n    }\n    n = n / divisor\n  }\n  return i\n}\n\n/*\n  >>> fizzBuzz(0)\n  0\n  >>> fizzBuzz(1)\n  1\n  >>> fizzBuzz(12)\n  2\n  >>> fizzBuzz(100)\n  4\n  >>> fizzBuzz(200)\n  6\n  >>> fizzBuzz(300)\n  8\n  >>> fizzBuzz(400)\n  10\n  >>> fizzBuzz(500)\n  12\n  >>> fizzBuzz(600)\n  14\n  >>> fizzBuzz(1000)\n  16\n  >>> fizzBuzz(2000)\n  18\n  >>> fizzBuzz(3000)\n  20\n  >>> fizzBuzz(4000)\n  22\n  >>> fizzBuzz(5000)\n  24\n  >>> fizzBuzz(6000)\n  26\n  >>> fizzBuzz(7000)\n  28\n  >>> fizzBuzz(8000)\n  30\n  >>> fizzBuzz(9000)\n  32\n  >>> fizzBuzz(10000)\n  34\n  >>> fizzBuzz(11000)\n  36\n  >>> fizzBuzz(12000)\n  38\n  >>> fizzBuzz(13000)\n  40\n  >>> fizzBuzz(14000)\n  42\n  >>> fizzBuzz(15000)\n  44\n  >>> fizzBuzz(16000)\n  46\n  >>> fizzBuzz(17000)\n  48\n  >>> fizzBuzz(18000)\n  50\n  >>> fizzBuzz(19000)\n  52\n  >>> fizzBuzz(20000)\n  54\n  >>> fizzBuzz(21000)\n  56\n  >>> fizzBuzz(22000)\n  58\n  >>> fizzBuzz(23000)\n  60\n  >>> fizzBuzz(24000)\n  62\n  >>> fizzBuzz(25000)\n  64\n  >>> fizzBuzz(26000)\n  66\n  >>> fizzBuzz(27000)\n  68\n  >>> fizzBuzz(28000)\n  70\n  >>> fizzBuzz(29000)\n  72\n  >>> fizzBuzz(30000)\n  74\n  >>> fizzBuzz(31000)\n  76\n  >>> fizzBuzz(32000)\n  78\n  >>> fizzBuzz(33000)\n  80\n  >>> fizzBuzz(34000)\n  82\n  >>> fizzBuzz(35000)\n  84\n  >>> fizzBuzz(36000)\n  86\n  >>> fizzBuzz(37000)\n  88\n  >>> fizzBuzz(38000)\n  90\n  >>> fizzBuzz(39000)\n  92\n  >>> fizzBuzz(40000)\n  94\n  >>> fizzBuzz(41000)\n  96\n  >>> fizzBuzz(42000)\n  98\n  >>> fizzBuzz(43000)\n  100\n  >>> fizzBuzz(44000)\n  102\n  >>> fizzBuzz(45000)\n  104\n  >>> fizzBuzz(46000)\n  106\n  >>> fizzBuzz(47000)\n  108\n  >>> fizzBuzz(48000)\n  110\n  >>> fizzBuzz(49000)\n  112\n  >>> fizzBuzz(50000)\n  114\n  >>> fizzBuzz(51000)\n  116\n  >>> fizzBuzz(52000)\n  118\n  >>> fizzBuzz(53000)\n  120\n  >>> fizzBuzz(54000)\n  122\n  >>> fizzBuzz(55000)\n  124\n  >>> fizzBuzz(56000)\n  126\n  >>> fizzBuzz(57000)\n  128\n  >>> fizzBuzz(58000)\n  130\n  >>> fizzBuzz(59000)\n  132\n  >>> fizzBuzz(60000)\n  134\n  >>> fizzBuzz(61000)\n  136\n  >>> fizzBuzz(62000)\n  138\n  >>> fizzBuzz(63000)\n  140\n  >>> fizzBuzz(64000)\n  142\n  >>> fizzBuzz(65000)\n  144\n  >>> fizzBuzz(66000)\n  146\n  >>> fizzBuzz(67000)\n  148\n  >>> fizzBuzz(68000)\n  150\n  >>> fizzBuzz(69000)\n  152\n  >>> fizzBuzz(70000)\n  154\n  >>> fizzBuzz(71000)\n  156\n  >>> fizzBuzz(72000)\n  158\n  >>> fizzBuzz(73000)\n  160\n  >>> fizzBuzz(74000)\n  162\n  >>> fizzBuzz(75000)\n  164\n  >>> fizzBuzz(76000)\n  166\n  >>> fizzBuzz(77000)\n  168\n  >>> fizzBuzz(78000)\n  170\n  >>> fizzBuzz(79000)\n  172\n  >>> fizzBuzz(80000)\n  174\n  >>> fizzBuzz(81000)\n  176\n  >>> fizzBuzz(82000)\n  178\n  >>> fizzBuzz(83000)\n  180\n  >>> fizzBuzz(84000)\n  182\n  >>> fizzBuzz(85000)\n  184\n  >>> fizzBuzz(86000)\n  186\n  >>> fizzBuzz(87000)\n  188\n  >>> fizzBuzz(88000)\n  190\n  >>> fizzBuzz(89000)\n  192\n  >>> fizzBuzz(90000)\n  194\n  >>> fizzBuzz(91000)\n  196\n  >>> fizzBuzz(92000)\n  198\n  >>> fizzBuzz(93000)\n  200\n  >>> fizzBuzz(94000)\n  202\n  >>> fizzBuzz(95000)\n  204\n  >>> fizzBuzz(96000)\n  206\n  >>> fizzBuzz(97000)\n  208\n  >>> fizzBuzz(98000)\n  210"}
{"task_id": "JavaScript/37", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const odd = l.slice(0);\n  const even = l.slice(1);\n  const newEven = [];\n  for (let i = 0; i < even.length; i += 2) {\n    newEven.push(even[i]);\n  }\n  const newOdd = [];\n  for (let i = 1; i < odd.length; i += 2) {\n    newOdd.push(odd[i]);\n  }\n  return [newEven, newOdd];\n};\n\nexport default sortEven;\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n   const groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  returns will encode string by cycling groups of four characters. \n  */ \n const encodeCyclic4= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 3)/ 4); i++){ \n     groups.push(s.slice(4* i, Math.min((4* i+ 4), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 4) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic4 function. Returns will decode string. \n  */ \n const decodeCyclic4= (s)=>{\n   const groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 3)/ 4); i++){ \n     groups.push(s.slice(4* i, Math.min((4* i+ 4), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 4) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   returns will encode string by cycling groups of eight characters. \n  */ \n const encodeCyclic8= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 7)/ 8); i++){ \n     groups.push(s.slice(8* i, Math.min((8* i+ 8), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 8) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic8 function. Returns will decode string. \n  */ \n const decodeCyclic8= (s)=>{\n   const groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 7)/ 8); i++){ \n     groups.push(s.slice(8* i, Math.min((8* i+ 8), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 8) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n\nmodule.exports = { \n   encode: encodeCyclic, \n   decode: decodeCyclic, \n   encode_cyclic: encodeCyclic, \n   decode_cyclic: decodeCyclic, \n   encode_cyclic4: encodeCyclic4, \n   decode_cyclic4: decodeCyclic4, \n   encode_cyclic8: encodeCyclic8, \n   decode_cyclic8: decodeCyclic8 \n}<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n === 1) {\n    return 2\n  } else if (n === 2) {\n    return 3\n  } else if (n === 3) {\n    return 5\n  } else {\n    return (primeFib(n - 1) + primeFib(n - 2))\n  }\n}\n\nmodule.exports = primeFib\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === sum) {\n      count++;\n      if (count === 3) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n// Tests\n\n//>>> triplesSumToZero([1, 3, 5, 0])\n//false\n//>>> triplesSumToZero([1, 3, -2, 1])\n//true\n//>>> triplesSumToZero([1, 2, 3, 7])\n//false\n//>>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n//true\n//>>> triplesSumToZero([1])\n//false\n\n// References\n\n// [3.6.1.1 The sum of distinct elements is zero](http://www.cs.utexas.edu/users/gabe/cs/courses/cs6210/lectures/sum-distinct.pdf)\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n  //the number of cars is n\n  const len=n;\n  //we will be using two arrays to store the positions of the cars\n  const arrayPos=[];\n  const arrayNeg=[];\n  for(let i=0;i<len;i++){\n    arrayPos[i]=0;\n    arrayNeg[i]=0;\n  }\n  //we will be using two arrays to store the velocities of the cars\n  const arrayVPos=[];\n  const arrayVNeg=[];\n  for(let i=0;i<len;i++){\n    arrayVPos[i]=0;\n    arrayVNeg[i]=0;\n  }\n  //we will be using two arrays to store the masses of the cars\n  const arrayM= [];\n  for(let i=0;i<len;i++){\n    arrayM[i]=0;\n  }\n  //we will be using two arrays to store the number of collisions\n  const arrayColl= [];\n  for(let i=0;i<len;i++){\n    arrayColl[i]=0;\n  }\n  for(let i=0;i<len;i++){\n    //the car that will be moving right to left\n    const p=i;\n    const vp=2;\n    arrayPos[p]=arrayPos[p]+vp;\n    //the car that will be moving left to right\n    const p1=n-i-1;\n    const vp1=1;\n    arrayNeg[p1]=arrayNeg[p1]+vp1;\n    arrayVPos[p]=arrayVPos[p]+vp;\n    arrayVNeg[p1]=arrayVNeg[p1]+vp1;\n    arrayM[p]=arrayM[p]+1;\n    arrayM[p1]=arrayM[p1]+1;\n  }\n  for(let i=0;i<len;i++){\n    //we will be using two arrays to store the positions of the cars\n    const pos=arrayPos[i];\n    //we will be using two arrays to store the velocities of the cars\n    const vPos=arrayVPos[i];\n    //we will be using two arrays to store the masses of the cars\n    const mass=arrayM[i];\n    //the position will be updated according to the car's velocity\n    const pos1=pos+vPos;\n    //the position of the car that will be moving right to left\n    const p=i;\n    const vp=2;\n    arrayPos[p]=pos1;\n    //the position of the car that will be moving left to right\n    const p1=n-i-1;\n    const vp1=1;\n    arrayNeg[p1]=pos1;\n    arrayVPos[p]=pos1;\n    arrayVNeg[p1]=pos1;\n    arrayM[p]=mass+1;\n    arrayM[p1]=mass+1;\n    //we will be using two arrays to store the number of collisions\n    const coll=arrayColl[i];\n    const coll1=arrayColl[i+1];\n    //the number of collisions will be updated according to the car's velocity\n    const coll2=coll+1;\n    //we will be using two arrays to store the number of collisions\n    const coll3=coll1+1;\n    //the number of collisions will be updated according to the car's velocity\n    const coll4=coll3+1;\n    arrayColl[i]=coll2;\n    arrayColl[i+1]=coll4;\n  }\n  //the total number of collisions will be the sum of the number of collisions of the left set of cars and the number of collisions of the right set of cars\n  let totalColl=0;\n  for(let i=0;i<len;i++){\n    totalColl+=arrayColl[i];\n  }\n  return totalColl;\n}\n\nmodule.exports=carRaceCollision;<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  if (!l) return [1];\n  let i = 0,\n    len = l.length,\n    ret = [],\n    n = l[i];\n  while (i < len) {\n    ret[i] = n + 1;\n    i += 1;\n    n = l[i];\n  }\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nexport default incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    let i = 0\n    while (i < l.length) {\n        if (l[i] == 0) {\n            let j = i + 1\n            while (j < l.length && l[j] == 0) {\n                j++\n            }\n            if (j == l.length) {\n                return true\n            }\n        }\n        i++\n    }\n    return false\n}\n\n/*\n  *  findMax will take a list of numbers as an input. \n  *  it will return the largest element in the list\n  *  >>> findMax([1, 2, 3])\n  *  3\n  *  >>> findMax([1, 2, 3, 4])\n  *  4\n  *  >>> findMax([3, 2, 1])\n  *  3\n  *  >>> findMax([3, 2, 1, 0])\n  *  3\n  *  >>> findMax([-1, 1, 2])\n  *  1\n  */\nconst findMax = (l) => {\n    let largest = l[0]\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > largest) {\n            largest = l[i]\n        }\n    }\n    return largest\n}\n\n/*\n  *  findMin will take a list of numbers as an input. \n  *  it will return the largest element in the list\n  *  >>> findMin([1, 2, 3])\n  *  1\n  *  >>> findMin([1, 2, 3, 4])\n  *  1\n  *  >>> findMin([3, 2, 1])\n  *  1\n  *  >>> findMin([3, 2, 1, 0])\n  *  1\n  *  >>> findMin([-1, 1, 2])\n  *  -1\n  */\nconst findMin = (l) => {\n    let smallest = l[0]\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < smallest) {\n            smallest = l[i]\n        }\n    }\n    return smallest\n}\n\n/*\n  *  sumPairs will take two lists as an input. \n  *  it will return a new list where the first element of the pair is the sum of the two values, and the second element of the pair is the total number of pairs\n  *  >>> sumPairs([[1, 2], [1, 3], [2, 3], [3, 4]])\n  *  [[1, 2], [2, 2], [3, 4], [4, 2]]\n  *  >>> sumPairs([[1, 2], [1, 3], [2, 3]])\n  *  [[1, 3], [2, 3], [3, 3]]\n  *  >>> sumPairs([[1, 2], [1, 3], [2, 3], [3, 4]])\n  *  [[1, 3], [2, 3], [3, 3], [4, 1]]\n  *  >>> sumPairs([[1, 2], [1, 3], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]])\n  *  [[1, 3], [2, 3], [3, 3], [4, 1], [5, 1], [6, 1], [7, 1]]\n  *  >>> sumPairs([[1, 2], [1, 3], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]])\n  *  [[1, 3], [2, 3], [3, 3], [4, 1], [5, 1], [6, 1], [7, 1], [8, 1]]\n  *  >>> sumPairs([[1, 2], [1, 3], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]])\n  *  [[1, 3], [2, 3], [3, 3], [4, 1], [5, 1], [6, 1], [7, 1], [8, 1], [9, 1]]\n  *  >>> sumPairs([[1, 2], [1, 3], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]])\n  *  [[1, 3], [2, 3], [3, 3], [4, 1], [5, 1], [6, 1], [7, 1], [8, 1], [9, 1], [10, 1]]\n  *  >>> sumPairs([[1, 2], [1, 3], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11]])\n  *  [[1, 3], [2, 3], [3, 3], [4, 1], [5, 1], [6, 1], [7, 1], [8, 1], [9, 1], [10, 1], [11, 1]]\n  *  >>> sumPairs([[1, 2], [1, 3], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12]])\n  *  [[1, 3], [2, 3], [3, 3], [4, 1], [5, 1], [6, 1], [7, 1], [8, 1], [9, 1], [10, 1], [11, 1], [12, 1]]\n  */\nconst sumPairs"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const string = '' + x\n  const length = string.length\n\n  const result = new Array(length + 1)\n  const digits = string.split('')\n  const factor = Math.pow(base, length)\n\n  for (let i = length - 1; i >= 0; i--) {\n    result[i] = parseInt(digits[i] * factor)\n  }\n\n  return result.join('')\n}\n\n/*\n  Given an array of numbers, return the max number.\n  >>> max(1, 2, 3)\n  3\n  >>> max([1, 2, 3])\n  3\n  >>> max([1, 2, 3, 4])\n  4\n  >>> max([1, 2, 3, 4, 5])\n  5\n  >>> max([1, 2, 3, 4, 5, 6])\n  6\n  */\nconst max = (numbers) => {\n  let max = -Infinity\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i]\n    }\n  }\n\n  return max\n}\n\n/*\n  Given an array of numbers, return the min number.\n  >>> min(1, 2, 3)\n  1\n  >>> min([1, 2, 3])\n  1\n  >>> min([1, 2, 3, 4])\n  1\n  >>> min([1, 2, 3, 4, 5])\n  1\n  >>> min([1, 2, 3, 4, 5, 6])\n  1\n  */\nconst min = (numbers) => {\n  let min = Infinity\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i]\n    }\n  }\n\n  return min\n}\n\n/*\n  Given a number n, return the sum of the multiples of n under\n  1000000.\n  >>> sum(1)\n  1\n  >>> sum(2)\n  2\n  >>> sum(3)\n  3\n  >>> sum(4)\n  4\n  >>> sum(5)\n  5\n  >>> sum(6)\n  6\n  >>> sum(7)\n  7\n  >>> sum(8)\n  8\n  >>> sum(9)\n  9\n  >>> sum(10)\n  10\n  >>> sum(11)\n  11\n  >>> sum(12)\n  12\n  >>> sum(13)\n  13\n  >>> sum(14)\n  14\n  >>> sum(15)\n  15\n  >>> sum(16)\n  16\n  >>> sum(17)\n  17\n  >>> sum(18)\n  18\n  >>> sum(19)\n  19\n  >>> sum(20)\n  20\n  >>> sum(21)\n  21\n  >>> sum(22)\n  22\n  >>> sum(23)\n  23\n  >>> sum(24)\n  24\n  >>> sum(25)\n  25\n  >>> sum(26)\n  26\n  >>> sum(27)\n  27\n  >>> sum(28)\n  28\n  >>> sum(29)\n  29\n  >>> sum(30)\n  30\n  >>> sum(31)\n  31\n  >>> sum(32)\n  32\n  >>> sum(33)\n  33\n  >>> sum(34)\n  34\n  >>> sum(35)\n  35\n  >>> sum(36)\n  36\n  >>> sum(37)\n  37\n  >>> sum(38)\n  38\n  >>> sum(39)\n  39\n  >>> sum(40)\n  40\n  >>> sum(41)\n  41\n  >>> sum(42)\n  42\n  >>> sum(43)\n  43\n  >>> sum(44)\n  44\n  >>> sum(45)\n  45\n  >>> sum(46)\n  46\n  >>> sum(47)\n  47\n  >>> sum(48)\n  48\n  >>> sum(49)\n  49\n  >>> sum(50)\n  50\n  >>> sum(51)\n  51\n  >>> sum(52)\n  52\n  >>> sum(53)\n  53\n  >>> sum(54)\n  54\n  >>> sum(55)\n  55\n  >>> sum(56)\n  56\n  >>> sum(57)\n  57\n  >>> sum(58)\n  58\n  >>> sum(59)\n  59\n  >>> sum(60)\n  60\n  >>> sum(61)\n  61\n  >>> sum(62)\n  62\n  >>> sum(63)\n  63\n  >>> sum(64)\n  64\n  >>> sum(65)\n  65\n  >>> sum(66)\n  66\n  >>> sum(67)\n  67\n  >>> sum(68)\n  68\n  >>> sum(69)\n  69\n  >>> sum(70)\n  70\n  >>> sum(71)\n  71\n  >>> sum(72)\n  72\n  >>> sum(73)\n  73\n  >>> sum(74)\n  74\n  >>> sum(75)\n  75\n  >>> sum(76)\n  76\n  >>> sum(77)\n  77\n  >>> sum(78)\n  78\n  >>> sum(79)\n  79\n  >>> sum(80)\n  80\n  >>> sum(81)\n  81\n  >>> sum(82)\n  82\n  >>> sum(83)\n  83\n  >>> sum(84)\n  84\n  >>> sum(85)\n  85\n  >>> sum(86)\n  86\n  >>> sum(87)\n  87\n  >>> sum(88)\n  88\n  >>> sum(89)\n  89\n  >>> sum(90)\n  90\n  >>> sum(91)\n  91\n  >>> sum(92)\n  92\n  >>> sum(93)\n  93\n  >>> sum(94)\n  94\n  >>> sum(95)\n  95\n  >>> sum(96)\n  96\n  >>> sum(97)\n  97\n  >>> sum(98)\n"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": false, "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n    return Math.sqrt(h * (2 * h - a));\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  9.0\n  */\nconst rectangleArea = (w, l) => {\n    return w * l;\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(3, 5)\n  25.0\n  */\nconst rectangleArea2 = (h, w) => {\n    return h * w;\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(3, 5)\n  25.0\n  */\nconst rectangleArea3 = (l, h) => {\n    return h * l;\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(3, 5)\n  25.0\n  */\nconst rectangleArea4 = (w, h) => {\n    return w * h;\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(3, 5)\n  25.0\n  */\nconst rectangleArea5 = (l, w) => {\n    return w * l;\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(3, 5)\n  25.0\n  */\nconst rectangleArea6 = (h, l) => {\n    return h * l;\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(3, 5)\n  25.0\n  */\nconst rectangleArea7 = (w, l) => {\n    return w * l;\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(3, 5)\n  25.0\n  */\nconst rectangleArea8 = (h, w) => {\n    return h * w;\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(3, 5)\n  25.0\n  */\nconst rectangleArea9 = (h, l) => {\n    return h * l;\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(3, 5)\n  25.0\n  */\nconst rectangleArea10 = (w, h) => {\n    return w * h;\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(3, 5)\n  25.0\n  */\nconst rectangleArea11 = (l, h) => {\n    return h * l;\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(3, 5)\n  25.0\n  */\nconst rectangleArea12 = (w, l) => {\n    return w * l;\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(3, 5)\n  25.0\n  */\nconst rectangleArea13 = (h, w) => {\n    return h * w;\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(3, 5)\n  25.0\n  */\nconst rectangleArea14 = (l, w) => {\n    return w * l;\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(3, 5)\n  25.0\n  */\nconst rectangleArea15 = (h, l) => {\n    return h * l;\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(3, 5)\n  25.0\n  */\nconst rectangleArea16 = (w, h) => {\n    return w * h;\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(3, 5)\n  25.0\n  */\nconst rectangleArea17 = (l, h) => {\n    return l * h;\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(3, 5)\n  25.0\n  */\nconst rectangleArea18 = (w, l) => {\n    return w * l;\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(3, 5)\n  25.0\n  */\nconst rectangleArea19 = (h, w) => {\n    return h * w;\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(3, 5)\n  25.0\n  */\nconst rectangleArea20 = (l, w) => {\n    return l * w;\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(3, 5)\n  25.0\n  */\nconst rectangleArea21 = (h, l) => {\n    return h * l;\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(3, 5)\n  25.0\n  */\nconst rectangleArea22 = (w, l) => {\n    return w * l;\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(3, 5)\n  25.0\n  */\nconst rectangleArea23 = (h, w) => {\n    return h * w;\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(3, 5)\n  25.0\n  */\nconst rectangleArea24 = (l, w) => {\n    return l * w;\n};\n\n//------------------------------------------------------------------------------\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(3, 5)\n  25."}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n == 0) {\n    return 0;\n  } else if (n == 1) {\n    return 0;\n  } else if (n == 2) {\n    return 2;\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n  }\n}\n\n/*\nThe Fib5 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib5(0)-> 0 \n   fib5(1)-> 0 \n   fib5(2)-> 2 \n   fib5(3)-> 0 \n   fib5(n)-> fib5(n-1)+ fib5(n-2)+ fib5(n-3)+ fib5(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib5 number sequence.   will Do not use recursion.\n  >>> fib5(5)\n  4\n  >>> fib5(6)\n  8\n  >>> fib5(7)\n  14\n  */\nconst fib5 = (n) => {\n  if (n == 0) {\n    return 0;\n  } else if (n == 1) {\n    return 0;\n  } else if (n == 2) {\n    return 2;\n  } else {\n    return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4);\n  }\n}\n\n/*\nThe Fib6 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib6(0)-> 0 \n   fib6(1)-> 0 \n   fib6(2)-> 2 \n   fib6(3)-> 0 \n   fib6(n)-> fib6(n-1)+ fib6(n-2)+ fib6(n-3)+ fib6(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib6 number sequence.   will Do not use recursion.\n  >>> fib6(5)\n  4\n  >>> fib6(6)\n  8\n  >>> fib6(7)\n  14\n  */\nconst fib6 = (n) => {\n  if (n == 0) {\n    return 0;\n  } else if (n == 1) {\n    return 0;\n  } else if (n == 2) {\n    return 2;\n  } else {\n    return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4);\n  }\n}\n\n/*\nThe Fib7 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib7(0)-> 0 \n   fib7(1)-> 0 \n   fib7(2)-> 2 \n   fib7(3)-> 0 \n   fib7(n)-> fib7(n-1)+ fib7(n-2)+ fib7(n-3)+ fib7(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib7 number sequence.   will Do not use recursion.\n  >>> fib7(5)\n  4\n  >>> fib7(6)\n  8\n  >>> fib7(7)\n  14\n  */\nconst fib7 = (n) => {\n  if (n == 0) {\n    return 0;\n  } else if (n == 1) {\n    return 0;\n  } else if (n == 2) {\n    return 2;\n  } else {\n    return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4);\n  }\n}\n\n/*\nThe Fib8 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib8(0)-> 0 \n   fib8(1)-> 0 \n   fib8(2)-> 2 \n   fib8(3)-> 0 \n   fib8(n)-> fib8(n-1)+ fib8(n-2)+ fib8(n-3)+ fib8(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib8 number sequence.   will Do not use recursion.\n  >>> fib8(5)\n  4\n  >>> fib8(6)\n  8\n  >>> fib8(7)\n  14\n  */\nconst fib8 = (n) => {\n  if (n == 0) {\n    return 0;\n  } else if (n == 1) {\n    return 0;\n  } else if (n == 2) {\n    return 2;\n  } else {\n    return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4);\n  }\n}\n\nexport {\n  fib4,\n  fib5,\n  fib6,\n  fib7,\n  fib8\n};\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (!l) return undefined;\n  let mid = Math.floor(l.length / 2);\n  let sorted = l.sort((a, b) => (a - b));\n  if (l.length % 2) {\n    return sorted[mid];\n  } else {\n    let l1 = sorted.slice(0, mid);\n    let l2 = sorted.slice(mid + 1);\n    return (l1[mid - 1] + l2[mid]) / 2;\n  }\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Returns the reverse of a string\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('123')\n  '321'\n  >>> reverse('hello')\n  'olleh'\n  */\nconst reverse = (text) => {\n    return text.split('').reverse().join('');\n};\n\n/*\n  Returns the number of odd characters in a string\n  >>> countOdd('')\n  0\n  >>> countOdd('abca')\n  1\n  >>> countOdd('abcdd')\n  1\n  >>> countOdd('abcdda')\n  2\n  */\nconst countOdd = (text) => {\n    let count = 0;\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] % 2 === 1) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Returns the number of even characters in a string\n  >>> countEven('')\n  0\n  >>> countEven('abca')\n  0\n  >>> countEven('abcdd')\n  2\n  >>> countEven('abcdda')\n  4\n  */\nconst countEven = (text) => {\n    let count = 0;\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] % 2 === 0) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Returns the number of vowels in a string\n  >>> countVowels('')\n  0\n  >>> countVowels('abc')\n  2\n  >>> countVowels('abcdd')\n  2\n  >>> countVowels('abcdda')\n  2\n  */\nconst countVowels = (text) => {\n    let count = 0;\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] === 'a' || text[i] === 'e' || text[i] === 'i' || text[i] === 'o' || text[i] === 'u') {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Returns the number of consonants in a string\n  >>> countConsonants('')\n  0\n  >>> countConsonants('abca')\n  0\n  >>> countConsonants('abcdd')\n  3\n  >>> countConsonants('abcdda')\n  3\n  */\nconst countConsonants = (text) => {\n    let count = 0;\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] === 'a' || text[i] === 'b' || text[i] === 'c' || text[i] === 'd' || text[i] === 'e' || text[i] === 'f' || text[i] === 'g' || text[i] === 'h' || text[i] === 'i' || text[i] === 'j' || text[i] === 'k' || text[i] === 'l' || text[i] ==='m' || text[i] === 'n' || text[i] === 'o' || text[i] === 'p' || text[i] === 'q' || text[i] === 'r' || text[i] ==='s' || text[i] === 't' || text[i] === 'u' || text[i] === 'v' || text[i] === 'w' || text[i] === 'x' || text[i] === 'y' || text[i] === 'z') {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Returns the number of digits in a string\n  >>> countDigits('')\n  0\n  >>> countDigits('abca')\n  0\n  >>> countDigits('abcdd')\n  4\n  >>> countDigits('abcdda')\n  4\n  */\nconst countDigits = (text) => {\n    let count = 0;\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] >= '0' && text[i] <= '9') {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Returns the length of a string\n  >>> length('')\n  0\n  >>> length('abc')\n  3\n  >>> length('abcdd')\n  5\n  >>> length('abcdda')\n  7\n  */\nconst length = (text) => {\n    return text.length;\n};\n\n/*\n  Returns the sum of the first two characters in a string\n  >>> firstTwo('')\n  0\n  >>> firstTwo('abc')\n  97\n  >>> firstTwo('abcdd')\n  97\n  >>> firstTwo('abcdda')\n  97\n  */\nconst firstTwo = (text) => {\n    return text.slice(0, 2);\n};\n\n/*\n  Returns the sum of the last two characters in a string\n  >>> lastTwo('')\n  0\n  >>> lastTwo('abc')\n  97\n  >>> lastTwo('abcdd')\n  97\n  >>> lastTwo('abcdda')\n  97\n  */\nconst lastTwo = (text) => {\n    return text.slice(-2);\n};\n\nmodule.exports = {\n    isPalindrome,\n    reverse,\n    countOdd,\n    countEven,\n    countVowels,\n    countConsonants,\n    countDigits,\n    length,\n    firstTwo,\n    lastTwo\n};\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let m = n % p;\n  if (m < 0) m += p;\n  return m;\n};\n\n/*Return p^n modulo p.\n  >>> modpn(3, 5)\n  3\n  >>> modpn(1101, 101)\n  1\n  >>> modpn(0, 101)\n  1\n  >>> modpn(3, 11)\n  8\n  >>> modpn(100, 101)\n  1\n  */\nconst modpn = (n, p) => {\n  let m = 1;\n  while (n > 0) {\n    m = modp(m, p);\n    n = n >> 1;\n  }\n  return m;\n};\n\n/*Return the greatest common divisor of p and q.\n  >>> gcd(3, 5)\n  3\n  >>> gcd(1101, 101)\n  1\n  >>> gcd(0, 101)\n  1\n  >>> gcd(3, 11)\n  8\n  >>> gcd(100, 101)\n  1\n  */\nconst gcd = (p, q) => {\n  let a = p;\n  let b = q;\n  while (b > 0) {\n    let t = a;\n    a = b;\n    b = t % b;\n  }\n  return a;\n};\n\n/*Return the modulus of p^n, given p and n.\n  >>> modpn(3, 5)\n  3\n  >>> modpn(1101, 101)\n  1\n  >>> modpn(0, 101)\n  1\n  >>> modpn(3, 11)\n  8\n  >>> modpn(100, 101)\n  1\n  */\nconst modpn2 = (n, p) => {\n  let m = 1;\n  while (n > 0) {\n    m = modp(m, p);\n    n = n >> 1;\n  }\n  return m;\n};\n\n/*Return the modulus of p^n, given p and n.\n  >>> modpn2(3, 5)\n  3\n  >>> modpn2(1101, 101)\n  1\n  >>> modpn2(0, 101)\n  1\n  >>> modpn2(3, 11)\n  8\n  >>> modpn2(100, 101)\n  1\n  */\nconst gcd2 = (p, q) => {\n  let a = p;\n  let b = q;\n  while (b > 0) {\n    let t = a;\n    a = b;\n    b = t % b;\n  }\n  return a;\n};\n\n/*Return the sum of two integers.\n  >>> sum(3, 5)\n  8\n  >>> sum(1101, 101)\n  12\n  >>> sum(0, 101)\n  101\n  >>> sum(3, 11)\n  22\n  >>> sum(100, 101)\n  101\n  */\nconst sum = (a, b) => {\n  return a + b;\n};\n\n/*Return the sum of two integers.\n  >>> sum2(3, 5)\n  8\n  >>> sum2(1101, 101)\n  12\n  >>> sum2(0, 101)\n  101\n  >>> sum2(3, 11)\n  22\n  >>> sum2(100, 101)\n  101\n  */\nconst sum2 = (a, b) => {\n  return (a + b) % 100;\n};\n\n/*Return the product of two integers.\n  >>> product(3, 5)\n  15\n  >>> product(1101, 101)\n  2222\n  >>> product(0, 101)\n  0\n  >>> product(3, 11)\n  88\n  >>> product(100, 101)\n  10100\n  */\nconst product = (a, b) => {\n  return a * b;\n};\n\n/*Return the product of two integers.\n  >>> product2(3, 5)\n  15\n  >>> product2(1101, 101)\n  2222\n  >>> product2(0, 101)\n  0\n  >>> product2(3, 11)\n  88\n  >>> product2(100, 101)\n  10100\n  */\nconst product2 = (a, b) => {\n  return (a * b) % 100;\n};\n\n/*Return the difference between two integers.\n  >>> diff(3, 5)\n  4\n  >>> diff(1101, 101)\n  -11\n  >>> diff(0, 101)\n  101\n  >>> diff(3, 11)\n  -2\n  >>> diff(100, 101)\n  -1\n  */\nconst diff = (a, b) => {\n  return a - b;\n};\n\n/*Return the difference between two integers.\n  >>> diff2(3, 5)\n  4\n  >>> diff2(1101, 101)\n  -11\n  >>> diff2(0, 101)\n  101\n  >>> diff2(3, 11)\n  -2\n  >>> diff2(100, 101)\n  -1\n  */\nconst diff2 = (a, b) => {\n  return (a - b) % 100;\n};\n\n/*Return the absolute value of an integer.\n  >>> abs(3)\n  3\n  >>> abs(1101)\n  1101\n  >>> abs(-101)\n  101\n  >>> abs(3, 11)\n  8\n  >>> abs(100, 101)\n  101\n  */\nconst abs = (a, b) => {\n  return a + b;\n};\n\n/*Return the absolute value of an integer.\n  >>> abs2(3)\n  3\n  >>> abs2(1101)\n  1101\n  >>> abs2(-101)\n  101\n  >>> abs2(3, 11)\n  8\n  >>> abs2(100, 101)\n  101\n  */\nconst abs2 = (a, b) => {\n  return (a + b) % 100;\n};\n\n/*Return the modulus of an integer.\n  >>> mod(3, 5)\n  3\n  >>> mod("}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     (((ch.charCodeAt(0)-\" a\".charCodeAt(0))-5)%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\nconst encode= (s)=>{\n  return s.split(\"\").map(ch=> String.fromCharCode(\n    (Math.floor(ch.charCodeAt(0)/26))+\"a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\nconst decode= (s)=>{\n  return s.split(\"\").map(ch=> String.fromCharCode(\n    (Math.floor(ch.charCodeAt(0)-\"a\".charCodeAt(0))%26)+\"a\".charCodeAt(0) \n  )).join (\"\"); \n}\n\nconst encode_shift= (s)=>{\n  return s.split(\"\").map(ch=> String.fromCharCode(\n    (Math.floor(ch.charCodeAt(0)/26))+\"a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\nconst decode_shift= (s)=>{\n  return s.split(\"\").map(ch=> String.fromCharCode(\n    (Math.floor(ch.charCodeAt(0)-\"a\".charCodeAt(0))%26)+\"a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  takes as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const encodeShiftDecode= (s)=>{ \n   return decodeShift(encodeShift(s)); \n} \n\nconst decodeShiftEncode= (s)=>{ \n  return encodeShift(decodeShift(s)); \n} \n\n/* \n  takes as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const encodeShiftDecodeShift= (s)=>{ \n   return decodeShift(encodeShift(s)); \n} \n\nconst decodeShiftEncodeShift= (s)=>{ \n  return encodeShift(decodeShift(s)); \n} \n\n/* \n  takes as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const encodeShiftEncodeDecode= (s)=>{ \n   return decodeShift(encodeShift(s)); \n} \n\nconst decodeEncode= (s)=>{ \n  return encode(decode(s)); \n} \n\nconst decodeShift= (s)=>{ \n  return decode(s); \n} \n\nconst decodeEncodeShift= (s)=>{ \n  return encodeShift(decode(s)); \n} \n\nconst decodeShiftEncode= (s)=>{ \n  return encodeShift(decode(s)); \n} \n\nconst decodeShiftEncodeShift= (s)=>{ \n  return encodeShift(decode(s)); \n} \n\nconst encodeShiftDecodeShift= (s)=>{ \n  return decodeShift(encodeShift(s)); \n} \n\nconst decodeShiftEncodeShift= (s)=>{ \n  return encodeShift(decodeShift(s)); \n} \n\nconst encodeShiftEncodeDecode= (s)=>{ \n  return decodeShift(encodeShift(s)); \n} \n\nconst decodeShiftEncodeDecode= (s)=>{ \n  return encodeShift(decodeShift(s)); \n} \n\nconst encodeShiftDecodeShift= (s)=>{ \n  return decodeShift(encodeShift(s)); \n} \n\nconst decodeShiftEncodeShift= (s)=>{ \n  return encodeShift(decodeShift(s)); \n} \n\nconst decodeShiftEncodeDecodeShift= (s)=>{ \n  return encodeShift(decodeShift(s)); \n} \n\nconst encodeDecodeShift= (s)=>{ \n  return decodeShift(encode(s)); \n} \n\nconst decodeEncodeShift= (s)=>{ \n  return encodeShift(decode(s)); \n} \n\nconst encodeDecodeShift= (s)=>{ \n  return decodeShift(encode(s)); \n} \n\nconst decodeEncodeShift= (s)=>{ \n  return encodeShift(decode(s)); \n} \n\nconst decodeShiftEncode= (s)=>{ \n  return encodeShift(decode(s)); \n} \n\nconst decodeEncodeShift= (s)=>{ \n  return encodeShift(decode(s)); \n} \n\nconst decodeShiftEncodeShift= (s)=>{ \n  return encodeShift(decode(s)); \n} \n\nconst encodeShiftDecodeShift= (s)=>{ \n  return decodeShift(encodeShift(s)); \n} \n\nconst decodeShiftEncodeShift= (s)=>{ \n  return encodeShift(decodeShift(s)); \n} \n\nconst encodeShiftDecodeEncode= (s)=>{ \n  return decodeShift(encodeShift(s)); \n} \n\nconst decodeShiftEncodeShift= (s)=>{ \n  return encodeShift(decodeShift(s)); \n} \n\nconst decodeShiftEncodeEncode= (s)=>{ \n  return encodeShift(decodeShift(s)); \n} \n\nconst decodeShiftEncodeEncodeShift= (s)=>{ \n  return encodeShift(decodeShift(s)); \n} \n\nconst encodeDecodeShift= (s)=>{ \n  return decodeShift(encode(s)); \n} \n\nconst decodeEncodeShift= (s)=>{ \n  return encodeShift(decode(s)); \n} \n\n"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    let newText = text;\n    for (let i = 0; i < vowels.length; i++) {\n        newText = newText.replace(vowels[i], '');\n    }\n    return newText;\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.reduce((acc, curr) => (curr <= t)? acc && curr <= t : acc, true)\n}\n\nconst belowThresholdBy = (l, t) => {\n  return l.reduce((acc, curr) => (curr <= t)? acc && curr <= t : acc, false)\n}\n\n/* Return a function that returns a new list that is the sum of l1 and l2.\n  >>> sum([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 3, 6, 10, 15]\n  */\nconst sum = (l1, l2) => {\n  const l = [...l1,...l2]\n  return l.reduce((acc, curr) => acc + curr, 0)\n}\n\nconst sumBy = (l1, l2) => {\n  const l = [...l1,...l2]\n  return l.reduce((acc, curr) => acc + curr, 0)\n}\n\n/* Return a function that returns a new list that is the product of l1 and l2.\n  >>> product([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 6, 12, 20]\n  */\nconst product = (l1, l2) => {\n  const l = [...l1,...l2]\n  return l.reduce((acc, curr) => acc * curr, 1)\n}\n\nconst productBy = (l1, l2) => {\n  const l = [...l1,...l2]\n  return l.reduce((acc, curr) => acc * curr, 1)\n}\n\n/* Return a function that returns a new list that is the product of l1 and l2.\n  >>> sumBy([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 6, 12, 20]\n  */\nconst sumBy = (l1, l2) => {\n  const l = [...l1,...l2]\n  return l.reduce((acc, curr) => acc * curr, 0)\n}\n\n/* Return a function that returns a new list that is the product of l1 and l2.\n  >>> productBy([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 6, 12, 20]\n  */\nconst productBy = (l1, l2) => {\n  const l = [...l1,...l2]\n  return l.reduce((acc, curr) => acc * curr, 1)\n}\n\n/* Return a function that returns a new list that is the average of l1 and l2.\n  >>> sum([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [2, 4, 6, 8, 10]\n  */\nconst average = (l1, l2) => {\n  const l = [...l1,...l2]\n  return l.reduce((acc, curr) => acc + curr, 0) / l.length\n}\n\nconst averageBy = (l1, l2) => {\n  const l = [...l1,...l2]\n  return l.reduce((acc, curr) => acc + curr, 0) / l.length\n}\n\n/* Return a function that returns a new list that is the average of l1 and l2.\n  >>> sumBy([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [2, 4, 6, 8, 10]\n  */\nconst averageBy = (l1, l2) => {\n  const l = [...l1,...l2]\n  return l.reduce((acc, curr) => acc + curr, 0) / l.length\n}\n\n/* Return a function that returns a new list that is the average of l1 and l2.\n  >>> productBy([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [2, 4, 6, 8, 10]\n  */\nconst averageBy = (l1, l2) => {\n  const l = [...l1,...l2]\n  return l.reduce((acc, curr) => acc + curr, 0) / l.length\n}\n\n/* Return a function that returns a new list that is the median of l1 and l2.\n  >>> sum([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [3, 6, 9, 12, 15]\n  */\nconst median = (l1, l2) => {\n  const l = [...l1,...l2]\n  return l.sort((a, b) => a - b)[l.length / 2]\n}\n\nconst medianBy = (l1, l2) => {\n  const l = [...l1,...l2]\n  return l.sort((a, b) => a - b)[l.length / 2]\n}\n\n/* Return a function that returns a new list that is the median of l1 and l2.\n  >>> sumBy([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [3, 6, 9, 12, 15]\n  */\nconst medianBy = (l1, l2) => {\n  const l = [...l1,...l2]\n  return l.sort((a, b) => a - b)[l.length / 2]\n}\n\n/* Return a function that returns a new list that is the median of l1 and l2.\n  >>> productBy([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [3, 6, 9, 12, 15]\n  */\nconst medianBy = (l1, l2) => {\n  const l = [...l1,...l2]\n  return l.sort((a, b) => a - b)[l.length / 2]\n}\n"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst isOdd = (n) => {\n  return n % 2 === 1;\n};\n\nconst sum = (n1, n2) => {\n  return add(n1, n2);\n};\n\nconst add2 = (x, y) => {\n  return add(x, y) + add(x, y);\n};\n\nconst sum2 = (n1, n2) => {\n  return add2(n1, n2);\n};\n\n//Exercise 2\n/*\n  >>> isOdd(2)\n  True\n  >>> isOdd(3)\n  False\n  >>> isOdd(4)\n  False\n  >>> isOdd(5)\n  True\n  >>> isOdd(6)\n  True\n  >>> isOdd(7)\n  True\n  >>> isOdd(8)\n  False\n  >>> isOdd(9)\n  False\n  >>> isOdd(10)\n  False\n  */\nconst isOdd2 = n => {\n  return n % 2 === 1;\n};\n\n//Exercise 3\n/*\n  >>> sum(1, 1)\n  2\n  >>> sum(1, 2)\n  3\n  >>> sum(1, 3)\n  4\n  >>> sum(1, 4)\n  5\n  >>> sum(1, 5)\n  6\n  >>> sum(2, 2)\n  4\n  >>> sum(2, 3)\n  5\n  >>> sum(3, 3)\n  6\n  >>> sum(3, 4)\n  7\n  >>> sum(4, 4)\n  8\n  >>> sum(4, 5)\n  9\n  >>> sum(5, 5)\n  10\n  */\nconst sum3 = (n1, n2) => {\n  return add(n1, n2);\n};\n\n//Exercise 4\n/*\n  >>> sum2(1, 1)\n  2\n  >>> sum2(1, 2)\n  3\n  >>> sum2(1, 3)\n  4\n  >>> sum2(1, 4)\n  5\n  >>> sum2(1, 5)\n  6\n  >>> sum2(2, 2)\n  4\n  >>> sum2(2, 3)\n  5\n  >>> sum2(3, 3)\n  6\n  >>> sum2(3, 4)\n  7\n  >>> sum2(4, 4)\n  8\n  >>> sum2(4, 5)\n  9\n  >>> sum2(5, 5)\n  10\n  */\nconst sum4 = (n1, n2) => {\n  return add2(n1, n2);\n};\n\nconst _sum = sum;\n\n//Exercise 5\n/*\n  >>> sum2(_sum(1, 1), _sum(1, 1))\n  2\n  >>> sum2(_sum(1, 2), _sum(1, 2))\n  3\n  >>> sum2(_sum(1, 3), _sum(1, 3))\n  4\n  >>> sum2(_sum(1, 4), _sum(1, 4))\n  5\n  >>> sum2(_sum(1, 5), _sum(1, 5))\n  6\n  >>> sum2(_sum(2, 2), _sum(2, 2))\n  4\n  >>> sum2(_sum(2, 3), _sum(2, 3))\n  5\n  >>> sum2(_sum(3, 3), _sum(3, 3))\n  6\n  >>> sum2(_sum(3, 4), _sum(3, 4))\n  7\n  >>> sum2(_sum(4, 4), _sum(4, 4))\n  8\n  >>> sum2(_sum(4, 5), _sum(4, 5))\n  9\n  >>> sum2(_sum(5, 5), _sum(5, 5))\n  10\n  */\nconst sum5 = (n1, n2) => {\n  return add2(n1, n2);\n};\n\n//Exercise 6\n/*\n  >>> sum4(_sum(1, 1), _sum(1, 1))\n  2\n  >>> sum4(_sum(1, 2), _sum(1, 2))\n  3\n  >>> sum4(_sum(1, 3), _sum(1, 3))\n  4\n  >>> sum4(_sum(1, 4), _sum(1, 4))\n  5\n  >>> sum4(_sum(1, 5), _sum(1, 5))\n  6\n  >>> sum4(_sum(2, 2), _sum(2, 2))\n  4\n  >>> sum4(_sum(2, 3), _sum(2, 3))\n  5\n  >>> sum4(_sum(3, 3), _sum(3, 3))\n  6\n  >>> sum4(_sum(3, 4), _sum(3, 4))\n  7\n  >>> sum4(_sum(4, 4), _sum(4, 4))\n  8\n  >>> sum4(_sum(4, 5), _sum(4, 5))\n  9\n  >>> sum4(_sum(5, 5), _sum(5, 5))\n  10\n  */\nconst sum6 = (n1, n2) => {\n  return add2(n1, n2);\n};\n\n//Exercise 7\n/*\n  >>> sum3(_sum(1, 1), _sum(1, 1))\n  2\n  >>> sum3(_sum(1, 2), _sum(1, 2))\n  3\n  >>> sum3(_sum(1, 3), _sum(1, 3))\n  4\n  >>> sum3(_sum(1, 4), _sum(1, 4))\n  5\n  >>> sum3(_sum(1, 5), _sum(1, 5))\n  6\n  >>> sum3(_sum(2, 2), _sum(2, 2))\n  4\n  >>> sum3(_sum(2, 3), _sum(2, 3))\n  5\n  >>> sum3(_sum(3, 3), _sum(3, 3))\n  6\n  >>> sum3(_sum(3, 4), _sum(3, 4))\n  7\n  >>> sum3(_sum(4, 4), _sum(4, 4))\n  8\n  >>> sum3(_sum(4, 5), _"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  return s0.split('').every(c => s1.indexOf(c) >= 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n    return (n <= 1)? 1 : fib(n-2) + fib(n-1);\n};\n\n/**\n * Return Fibonacci of n-th digit of fibonacci number\n  >>> fib(10, 2)\n  4\n  >>> fib(10, 3)\n  8\n  >>> fib(10, 5)\n  67\n  >>> fib(10, 8)\n  47\n  */\nconst fib = (n, digit) => {\n    return (n <= 1)? 1 : fib(n-2, digit+1) + fib(n-1, digit);\n};\n\nmodule.exports = fib;\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    const opening = brackets.filter(opening => opening.length > 0)\n    const closing = brackets.filter(closing => closing.length > 0)\n    if(opening.length > 0 && closing.length > 0 && opening[0] == \">\" && closing[0] == \"<\") {\n        return false\n    }\n    if(opening.length > 0 && closing.length > 0 && opening[0] == \"<\" && closing[0] == \">\") {\n        return false\n    }\n    const left = brackets.filter(bracket => bracket.length == 1)\n    const right = brackets.filter(bracket => bracket.length == 1)\n    if(left.length > 0 && right.length > 0 && left[0] == \"<\" && right[0] == \">\") {\n        return false\n    }\n    if(left.length > 0 && right.length > 0 && left[0] == \">\" && right[0] == \"<\") {\n        return false\n    }\n    return true\n}\n\n/*\n   Given a string, return a new string that has the brackets balanced. \n   The opening and closing brackets are given as a string. \n   This is a \"bruteforce\" solution to this problem.\n\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  \"<>\"\n  >>> correctBracketing(\"<>\")\n  "}
{"task_id": "JavaScript/57", "prompt": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let ret = false\n  const length = l.length\n  let i = 0\n  let j = length - 1\n\n  while (i < j) {\n    if (l[i] > l[j]) {\n      ret = true\n      j -= 1\n    } else if (l[i] < l[j]) {\n      ret = false\n      i += 1\n    } else {\n      j -= 1\n      i += 1\n    }\n  }\n\n  return ret\n}\n\nexport default monotonic\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n    return [...new Set(l1.concat(l2))]\n}\n\nmodule.exports = common<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n    let p = 2,\n        max = Math.floor(Math.sqrt(n)) + 1,\n        n1 = n;\n    while (p <= max) {\n        while (n1 % p == 0) {\n            n1 = n1 / p;\n        }\n        p++;\n    }\n    return n1;\n};\n\n/*\n  >>> largestPrimeFactor(12)\n  3\n  >>> largestPrimeFactor(14)\n  7\n  >>> largestPrimeFactor(15)\n  5\n  >>> largestPrimeFactor(16)\n  2\n  >>> largestPrimeFactor(17)\n  7\n  >>> largestPrimeFactor(18)\n  2\n  >>> largestPrimeFactor(19)\n  5\n  >>> largestPrimeFactor(20)\n  2\n  >>> largestPrimeFactor(21)\n  3\n  >>> largestPrimeFactor(22)\n  5\n  >>> largestPrimeFactor(23)\n  3\n  >>> largestPrimeFactor(24)\n  7\n  >>> largestPrimeFactor(25)\n  5\n  >>> largestPrimeFactor(26)\n  2\n  >>> largestPrimeFactor(27)\n  7\n  >>> largestPrimeFactor(28)\n  7\n  >>> largestPrimeFactor(29)\n  3\n  >>> largestPrimeFactor(30)\n  7\n  >>> largestPrimeFactor(31)\n  7\n  >>> largestPrimeFactor(32)\n  2\n  >>> largestPrimeFactor(33)\n  7\n  >>> largestPrimeFactor(34)\n  3\n  >>> largestPrimeFactor(35)\n  5\n  >>> largestPrimeFactor(36)\n  3\n  >>> largestPrimeFactor(37)\n  5\n  >>> largestPrimeFactor(38)\n  3\n  >>> largestPrimeFactor(39)\n  7\n  >>> largestPrimeFactor(40)\n  7\n  >>> largestPrimeFactor(41)\n  7\n  >>> largestPrimeFactor(42)\n  7\n  >>> largestPrimeFactor(43)\n  7\n  >>> largestPrimeFactor(44)\n  7\n  >>> largestPrimeFactor(45)\n  3\n  >>> largestPrimeFactor(46)\n  7\n  >>> largestPrimeFactor(47)\n  7\n  >>> largestPrimeFactor(48)\n  3\n  >>> largestPrimeFactor(49)\n  7\n  >>> largestPrimeFactor(50)\n  3\n  >>> largestPrimeFactor(51)\n  7\n  >>> largestPrimeFactor(52)\n  7\n  >>> largestPrimeFactor(53)\n  7\n  >>> largestPrimeFactor(54)\n  7\n  >>> largestPrimeFactor(55)\n  7\n  >>> largestPrimeFactor(56)\n  7\n  >>> largestPrimeFactor(57)\n  7\n  >>> largestPrimeFactor(58)\n  7\n  >>> largestPrimeFactor(59)\n  7\n  >>> largestPrimeFactor(60)\n  3\n  >>> largestPrimeFactor(61)\n  7\n  >>> largestPrimeFactor(62)\n  7\n  >>> largestPrimeFactor(63)\n  7\n  >>> largestPrimeFactor(64)\n  7\n  >>> largestPrimeFactor(65)\n  7\n  >>> largestPrimeFactor(66)\n  7\n  >>> largestPrimeFactor(67)\n  7\n  >>> largestPrimeFactor(68)\n  7\n  >>> largestPrimeFactor(69)\n  7\n  >>> largestPrimeFactor(70)\n  7\n  >>> largestPrimeFactor(71)\n  7\n  >>> largestPrimeFactor(72)\n  7\n  >>> largestPrimeFactor(73)\n  7\n  >>> largestPrimeFactor(74)\n  7\n  >>> largestPrimeFactor(75)\n  7\n  >>> largestPrimeFactor(76)\n  7\n  >>> largestPrimeFactor(77)\n  7\n  >>> largestPrimeFactor(78)\n  7\n  >>> largestPrimeFactor(79)\n  7\n  >>> largestPrimeFactor(80)\n  7\n  >>> largestPrimeFactor(81)\n  7\n  >>> largestPrimeFactor(82)\n  7\n  >>> largestPrimeFactor(83)\n  7\n  >>> largestPrimeFactor(84)\n  7\n  >>> largestPrimeFactor(85)\n  7\n  >>> largestPrimeFactor(86)\n  7\n  >>> largestPrimeFactor(87)\n  7\n  >>> largestPrimeFactor(88)\n  7\n  >>> largestPrimeFactor(89)\n  7\n  >>> largestPrimeFactor(90)\n  7\n  >>> largestPrimeFactor(91)\n  7\n  >>> largestPrimeFactor(92)\n  7\n  >>> largestPrimeFactor(93)\n  7\n  >>> largestPrimeFactor(94)\n  7\n  >>> largestPrimeFactor(95)\n  7\n  >>> largestPrimeFactor(96)\n  7\n  >>> largestPrimeFactor(97)\n  7\n  >>> largestPrimeFactor(98)\n  7\n  >>> largestPrimeFactor(99)\n  7\n  >>> largestPrimeFactor(100)\n  7\n  >>> largestPrimeFactor(101)\n  7\n  >>> largestPrimeFactor(102)\n  7\n  >>> largestPrimeFactor(103)\n  7\n  >>> largestPrimeFactor(104)\n  7\n  >>> largestPrimeFactor(105)\n  7\n  >>> largestPrimeFactor(106)\n  7\n  >>> largestPrimeFactor(107)\n  7\n  >>> largestPrimeFactor(108)\n  7\n  >>> largestPrimeFactor(109)\n  7\n  >>> largestPrimeFactor(110)\n  7\n  >>> largestPrimeFactor(111)\n  7\n  >>> largestPrimeFactor(112)\n  7\n  >>> largestPrimeFactor(113)\n  7\n  >>> largestPrimeFactor(114)\n  7\n  >>> largestPrimeFactor(115)\n  7\n  >>> largestPrimeFactor(116)\n  7\n  >>> largestPrimeFactor(117)\n  7\n  >>> largestPrimeFactor(118)\n  7\n  >>> largestPrimeFactor(119)\n  7\n  >>> largestPrimeFactor(120)\n  7\n  >>> largestPrimeFactor(121)\n  7\n  >>> largestPrimeFactor(122)\n  7\n  >>> largestPrimeFactor(123)\n  7\n  >>> largestPrimeFactor(124)\n  7\n  >>> largestPrimeFactor(125)\n  7\n  >>> largestPrimeFactor(126)\n  7\n  >>> largestPrimeFactor(127)\n  7\n  >>> largestPrimeFactor(128)\n  "}
{"task_id": "JavaScript/60", "prompt": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sum = (x, y) => x + y;\n  const sumBy = (x, y) => x + y;\n\n  if (n === 1) {\n    return 1;\n  }\n\n  if (n === 2) {\n    return 2;\n  }\n\n  return sumBy(sumBy(sum(1, n - 1), 1), n - 2);\n};\n\n/*\n  The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n  Find the sum of all the primes below two million.\n  >>> sumOfPrimes(1000000)\n  17\n  >>> sumOfPrimes(10)\n  17\n  >>> sumOfPrimes(2)\n  1\n  >>> sumOfPrimes(3)\n  2\n  >>> sumOfPrimes(4)\n  3\n  >>> sumOfPrimes(5)\n  5\n  >>> sumOfPrimes(6)\n  7\n  >>> sumOfPrimes(7)\n  7\n  >>> sumOfPrimes(8)\n  11\n  >>> sumOfPrimes(9)\n  13\n  >>> sumOfPrimes(10)\n  17\n  */\nconst sumOfPrimes = (n) => {\n  const sum = (x, y) => x + y;\n  const sumBy = (x, y) => x + y;\n\n  if (n === 1) {\n    return 1;\n  }\n\n  if (n === 2) {\n    return 2;\n  }\n\n  const p = [2, 3, 5, 7];\n  const sumOfPrimes = (x, y) => {\n    const s = p.find(() => x === s);\n    return s === undefined? sumBy(x, y) : sumBy(x, sumOfPrimes(x, y));\n  };\n\n  return sumBy(sumBy(sumOfPrimes(1, n - 1), 1), n - 2);\n};\n\nconst sumToNBy = (n) => {\n  const sum = (x, y) => x + y;\n  const sumBy = (x, y) => x + y;\n\n  if (n === 1) {\n    return 1;\n  }\n\n  if (n === 2) {\n    return 2;\n  }\n\n  return sumBy(sumBy(sum(1, n - 1), 1), n - 2);\n};\n\nconst sumOfPrimesBy = (n) => {\n  const sum = (x, y) => x + y;\n  const sumBy = (x, y) => x + y;\n\n  if (n === 1) {\n    return 1;\n  }\n\n  if (n === 2) {\n    return 2;\n  }\n\n  return sumBy(sumBy(sum(1, n - 1), 1), n - 2);\n};\n\nconst sumOfPrimesBy2 = (n) => {\n  const sum = (x, y) => x + y;\n  const sumBy = (x, y) => x + y;\n\n  if (n === 1) {\n    return 1;\n  }\n\n  if (n === 2) {\n    return 2;\n  }\n\n  return sumBy(sumBy(sum(1, n - 1), 1), n - 2);\n};\n\nconst sumOfPrimesBy3 = (n) => {\n  const sum = (x, y) => x + y;\n  const sumBy = (x, y) => x + y;\n\n  if (n === 1) {\n    return 1;\n  }\n\n  if (n === 2) {\n    return 2;\n  }\n\n  return sumBy(sumBy(sum(1, n - 1), 1), n - 2);\n};\n\nconst sumOfPrimesBy4 = (n) => {\n  const sum = (x, y) => x + y;\n  const sumBy = (x, y) => x + y;\n\n  if (n === 1) {\n    return 1;\n  }\n\n  if (n === 2) {\n    return 2;\n  }\n\n  return sumBy(sumBy(sum(1, n - 1), 1), n - 2);\n};\n\nconst sumOfPrimesBy5 = (n) => {\n  const sum = (x, y) => x + y;\n  const sumBy = (x, y) => x + y;\n\n  if (n === 1) {\n    return 1;\n  }\n\n  if (n === 2) {\n    return 2;\n  }\n\n  return sumBy(sumBy(sum(1, n - 1), 1), n - 2);\n};\n\nconst sumOfPrimesBy6 = (n) => {\n  const sum = (x, y) => x + y;\n  const sumBy = (x, y) => x + y;\n\n  if (n === 1) {\n    return 1;\n  }\n\n  if (n === 2) {\n    return 2;\n  }\n\n  return sumBy(sumBy(sum(1, n - 1), 1), n - 2);\n};\n\nconst sumOfPrimesBy7 = (n) => {\n  const sum = (x, y) => x + y;\n  const sumBy = (x, y) => x + y;\n\n  if (n === 1) {\n    return 1;\n  }\n\n  if (n === 2) {\n    return 2;\n  }\n\n  return sumBy(sumBy(sum(1, n - 1), 1), n - 2);\n};\n\nconst sumOfPrimesBy8 = (n) => {\n  const sum = (x, y) => x + y;\n  const sumBy = (x, y) => x + y;\n\n  if (n === 1) {\n    return 1;\n  }\n\n  if (n === 2) {\n    return 2;\n  }\n\n  return sumBy(sumBy(sum(1, n - 1), 1), n - 2);\n};\n\nconst sumOfPrimesBy9 = (n) => {\n  const sum = (x, y) => x + y;\n  const sumBy = (x, y) => x + y;"}
{"task_id": "JavaScript/61", "prompt": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = []\n  let hasOpeningBracket = false\n  let hasClosingBracket = false\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      stack.push(brackets[i])\n      hasOpeningBracket = true\n    } else if (brackets[i] === ')') {\n      if (hasOpeningBracket === false) return false\n      hasClosingBracket = true\n      if (stack.pop()!== '(') return false\n    }\n  }\n  if (hasClosingBracket === false) return false\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let d = [1];\n  for (let i = 0; i < xs.length - 1; i++) {\n    d.push(xs[i + 1] * d[i]);\n  }\n  return d;\n};\n\nconst derivative2 = (xs) => {\n  let d = [1];\n  for (let i = 0; i < xs.length - 2; i++) {\n    d.push(xs[i + 2] * d[i + 1]);\n  }\n  return d;\n};\n\nconst derivative3 = (xs) => {\n  let d = [1];\n  for (let i = 0; i < xs.length - 3; i++) {\n    d.push(xs[i + 3] * d[i + 2]);\n  }\n  return d;\n};\n\nconst derivative4 = (xs) => {\n  let d = [1];\n  for (let i = 0; i < xs.length - 4; i++) {\n    d.push(xs[i + 4] * d[i + 3]);\n  }\n  return d;\n};\n\nconst derivative5 = (xs) => {\n  let d = [1];\n  for (let i = 0; i < xs.length - 5; i++) {\n    d.push(xs[i + 5] * d[i + 4]);\n  }\n  return d;\n};\n\nconst derivative6 = (xs) => {\n  let d = [1];\n  for (let i = 0; i < xs.length - 6; i++) {\n    d.push(xs[i + 6] * d[i + 5]);\n  }\n  return d;\n};\n\nconst derivative7 = (xs) => {\n  let d = [1];\n  for (let i = 0; i < xs.length - 7; i++) {\n    d.push(xs[i + 7] * d[i + 6]);\n  }\n  return d;\n};\n\nconst derivative8 = (xs) => {\n  let d = [1];\n  for (let i = 0; i < xs.length - 8; i++) {\n    d.push(xs[i + 8] * d[i + 7]);\n  }\n  return d;\n};\n\nconst derivative9 = (xs) => {\n  let d = [1];\n  for (let i = 0; i < xs.length - 9; i++) {\n    d.push(xs[i + 9] * d[i + 8]);\n  }\n  return d;\n};\n\nconst derivative10 = (xs) => {\n  let d = [1];\n  for (let i = 0; i < xs.length - 10; i++) {\n    d.push(xs[i + 10] * d[i + 9]);\n  }\n  return d;\n};\n\nconst derivative11 = (xs) => {\n  let d = [1];\n  for (let i = 0; i < xs.length - 11; i++) {\n    d.push(xs[i + 11] * d[i + 10]);\n  }\n  return d;\n};\n\nconst derivative12 = (xs) => {\n  let d = [1];\n  for (let i = 0; i < xs.length - 12; i++) {\n    d.push(xs[i + 12] * d[i + 11]);\n  }\n  return d;\n};\n\nconst derivative13 = (xs) => {\n  let d = [1];\n  for (let i = 0; i < xs.length - 13; i++) {\n    d.push(xs[i + 13] * d[i + 12]);\n  }\n  return d;\n};\n\nconst derivative14 = (xs) => {\n  let d = [1];\n  for (let i = 0; i < xs.length - 14; i++) {\n    d.push(xs[i + 14] * d[i + 13]);\n  }\n  return d;\n};\n\nconst derivative15 = (xs) => {\n  let d = [1];\n  for (let i = 0; i < xs.length - 15; i++) {\n    d.push(xs[i + 15] * d[i + 14]);\n  }\n  return d;\n};\n\nconst derivative16 = (xs) => {\n  let d = [1];\n  for (let i = 0; i < xs.length - 16; i++) {\n    d.push(xs[i + 16] * d[i + 15]);\n  }\n  return d;\n};\n\nconst derivative17 = (xs) => {\n  let d = [1];\n  for (let i = 0; i < xs.length - 17; i++) {\n    d.push(xs[i + 17] * d[i + 16]);\n  }\n  return d;\n};\n\nconst derivative18 = (xs) => {\n  let d = [1];\n  for (let i = 0; i < xs.length - 18; i++) {\n    d.push(xs[i + 18] * d[i + 17]);\n  }\n  return d;\n};\n\nconst derivative19 = (xs) => {\n  let d = [1];\n  for (let i = 0; i < xs.length - 19; i++) {\n    d.push(xs[i + 19] * d[i + 18]);\n  }\n  return d;\n};\n\nconst derivative20 = (xs) => {\n  let d = [1];\n  for (let i = 0; i < xs.length - 20; i++) {\n    d.push(xs[i + 20] * d[i + 19]);\n  }\n  return d;\n};\n\nconst derivative21 = (xs) => {\n  let d = [1];\n  for (let i = 0; i < xs.length - 21; i++) {\n    d.push(xs[i + 21] * d[i + 20]);\n"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  const fib1 = 1\n  const fib2 = 0\n  const fib = fib1\n  if (n === 1) return fib1\n  else if (n === 2) return fib2\n  else {\n    for (let i = 3; i <= n; i++) {\n      const next = fib1 + fib2\n      fib2 = fib1\n      fib1 = next\n    }\n    return fib\n  }\n}\n\nconsole.log(fibfib(5))\nconsole.log(fibfib(8))\nconsole.log(fibfib(100))\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n            count++;\n        }\n    }\n    if (s[s.length - 1] === 'y') {\n        count++;\n    }\n    return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const digits = x.toString().split('').reverse()\n  const newDigits = digits.slice(shift, digits.length)\n  return newDigits.join('')\n}\n\nconst circularShift2 = (x, shift) => {\n  const digits = x.toString().split('')\n  digits.reverse()\n  const newDigits = digits.slice(shift)\n  return newDigits.reverse().join('')\n}\n\nconst circularShift3 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = digits.slice(0, shift).concat(digits.slice(shift).reverse())\n  return newDigits.reverse().join('')\n}\n\nconst circularShift4 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = digits.slice(0, shift).concat(digits.slice(shift).reverse())\n  return newDigits.reverse().join('')\n}\n\nconst circularShift5 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = digits.slice(0, shift).concat(digits.slice(shift).reverse())\n  return newDigits.join('')\n}\n\nconst circularShift6 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = digits.slice(0, shift).concat(digits.slice(shift).reverse())\n  return newDigits.join('')\n}\n\nconst circularShift7 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = digits.slice(0, shift).concat(digits.slice(shift).reverse())\n  return newDigits.join('')\n}\n\nconst circularShift8 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = digits.slice(0, shift).concat(digits.slice(shift).reverse())\n  return newDigits.join('')\n}\n\nconst circularShift9 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = digits.slice(0, shift).concat(digits.slice(shift).reverse())\n  return newDigits.join('')\n}\n\nconst circularShift10 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = digits.slice(0, shift).concat(digits.slice(shift).reverse())\n  return newDigits.join('')\n}\n\nconst circularShift11 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = digits.slice(0, shift).concat(digits.slice(shift).reverse())\n  return newDigits.join('')\n}\n\nconst circularShift12 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = digits.slice(0, shift).concat(digits.slice(shift).reverse())\n  return newDigits.join('')\n}\n\nconst circularShift13 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = digits.slice(0, shift).concat(digits.slice(shift).reverse())\n  return newDigits.join('')\n}\n\nconst circularShift14 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = digits.slice(0, shift).concat(digits.slice(shift).reverse())\n  return newDigits.join('')\n}\n\nconst circularShift15 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = digits.slice(0, shift).concat(digits.slice(shift).reverse())\n  return newDigits.join('')\n}\n\nconst circularShift16 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = digits.slice(0, shift).concat(digits.slice(shift).reverse())\n  return newDigits.join('')\n}\n\nconst circularShift17 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = digits.slice(0, shift).concat(digits.slice(shift).reverse())\n  return newDigits.join('')\n}\n\nconst circularShift18 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = digits.slice(0, shift).concat(digits.slice(shift).reverse())\n  return newDigits.join('')\n}\n\nconst circularShift19 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = digits.slice(0, shift).concat(digits.slice(shift).reverse())\n  return newDigits.join('')\n}\n\nconst circularShift20 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = digits.slice(0, shift).concat(digits.slice(shift).reverse())\n  return newDigits.join('')\n}\n\nconst circularShift21 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = digits.slice(0, shift).concat(digits.slice(shift).reverse())\n  return newDigits.join('')\n}\n\nconst circularShift22 = (x, shift) => {\n  const digits = x.toString().split('')\n  const newDigits = digits.slice(0, shift).con"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let result = 0;\n  for (let i = 0; i < s.length; i++) {\n    result += s[i].charCodeAt(0) - 96;\n  }\n  return result;\n}\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let result = 0;\n  for (let i = 0; i < s.length; i++) {\n    result += s.charCodeAt(i) - 96;\n  }\n  return result;\n}\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let result = 0;\n  for (let i = 0; i < s.length; i++) {\n    result += s.charCodeAt(i);\n  }\n  return result;\n}\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let result = 0;\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    if (c >= 97 && c <= 122) {\n      result += c - 96;\n    }\n  }\n  return result;\n}\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let result = 0;\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    if (c >= 97 && c <= 122) {\n      result += c;\n    }\n  }\n  return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n   let total=0,\n     apples = s.split(\" \"),\n     oranges = apples.slice(1).join(\" \"),\n     mango = apples.slice(1, apples.length-1).join(\" \");\n   return n-apples.length-oranges.length-mango.length;\n };\n \n  module.exports = fruitDistribution;\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    let min = arr[0];\n    let minIdx = 0;\n    let minEven = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n            if (minIdx === 0) {\n                min = arr[i];\n                minIdx = i;\n            } else if (arr[i] < min) {\n                min = arr[i];\n                minIdx = i;\n            } else if (arr[i] === min) {\n                minEven++;\n            }\n        }\n    }\n    if (minEven === 0) {\n        return [min, minIdx];\n    } else if (minEven > 0) {\n        return [min, minIdx];\n    } else {\n        return [];\n    }\n};\n\nconst pluck1 = (arr) => {\n    let min = arr[0];\n    let minIdx = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (minIdx === 0) {\n            min = arr[i];\n            minIdx = i;\n        } else if (arr[i] < min) {\n            min = arr[i];\n            minIdx = i;\n        }\n    }\n    return [min, minIdx];\n};\n\nconst pluck2 = (arr) => {\n    let min = arr[0];\n    let minIdx = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (minIdx === 0) {\n            min = arr[i];\n            minIdx = i;\n        } else if (arr[i] < min) {\n            min = arr[i];\n            minIdx = i;\n        }\n    }\n    return [min, minIdx];\n};\n\nconst pluck3 = (arr) => {\n    let min = arr[0];\n    let minIdx = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (minIdx === 0) {\n            min = arr[i];\n            minIdx = i;\n        } else if (arr[i] < min) {\n            min = arr[i];\n            minIdx = i;\n        }\n    }\n    return [min, minIdx];\n};\n\nconst pluck4 = (arr) => {\n    let min = arr[0];\n    let minIdx = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (minIdx === 0) {\n            min = arr[i];\n            minIdx = i;\n        } else if (arr[i] < min) {\n            min = arr[i];\n            minIdx = i;\n        }\n    }\n    return [min, minIdx];\n};\n\nconst pluck5 = (arr) => {\n    let min = arr[0];\n    let minIdx = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (minIdx === 0) {\n            min = arr[i];\n            minIdx = i;\n        } else if (arr[i] < min) {\n            min = arr[i];\n            minIdx = i;\n        }\n    }\n    return [min, minIdx];\n};\n\nconst pluck6 = (arr) => {\n    let min = arr[0];\n    let minIdx = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (minIdx === 0) {\n            min = arr[i];\n            minIdx = i;\n        } else if (arr[i] < min) {\n            min = arr[i];\n            minIdx = i;\n        }\n    }\n    return [min, minIdx];\n};\n\nconst pluck7 = (arr) => {\n    let min = arr[0];\n    let minIdx = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (minIdx === 0) {\n            min = arr[i];\n            minIdx = i;\n        } else if (arr[i] < min) {\n            min = arr[i];\n            minIdx = i;\n        }\n    }\n    return [min, minIdx];\n};\n\nconst pluck8 = (arr) => {\n    let min = arr[0];\n    let minIdx = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (minIdx === 0) {\n            min = arr[i];\n            minIdx = i;\n        } else if (arr[i] < min) {\n            min = arr[i];\n            minIdx = i;\n        }\n    }\n    return [min, minIdx];\n};\n\nconst pluck9 = (arr) => {\n    let"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let current = 0;\n  while (current < lst.length && lst[current] <= 0) {\n    current += 1;\n  }\n  if (current === lst.length) {\n    return -1;\n  }\n  let max = -1;\n  for (let i = current + 1; i < lst.length; i += 1) {\n    if (lst[i] > 0 && lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1])); // 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nconsole.log(search([5, 5, 4, 4, 4])); // -1\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let sorted = lst.slice(0);\n  let min = sorted[0];\n  let max = sorted[sorted.length - 1];\n\n  let isSorted = (a, b) => {\n    return a <= b;\n  };\n\n  let isMin = (a, b) => {\n    return min <= a;\n  };\n\n  let isMax = (a, b) => {\n    return max >= a;\n  };\n\n  while (true) {\n    sorted = sorted.filter(isSorted);\n    sorted = sorted.filter(isMin);\n    sorted = sorted.filter(isMax);\n    if (sorted.length === 0) break;\n    max = sorted[0];\n    min = sorted[sorted.length - 1];\n  }\n  return sorted;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n    let ab = (a + b) / 2;\n    let ac = (a + c) / 2;\n    let bc = (b + c) / 2;\n    if (ab + ac < bc) {\n        return -1;\n    }\n    let area = Math.abs((ab * bc) / 2);\n    return area.toFixed(2);\n}\n\n/*\n  Given the lengths of the three sides of a rectangle. will return the area of the \n   rectangle will round to 2 decimal points if the sides will form a valid rectangle. \n   Otherwise return -1 \n   The rectangle will have valid sides when the sum of any two sides will be greater \n   than the length of the third side.\n  Example:\n  rectangleArea(3, 4, 5) == 15.00\n  rectangleArea(1, 2, 10) == -1\n  */\nconst rectangleArea = (a, b, c) => {\n    let ab = (a + b) / 2;\n    let ac = (a + c) / 2;\n    let bc = (b + c) / 2;\n    if (ab + ac < bc) {\n        return -1;\n    }\n    let area = Math.abs((ab * bc) / 2);\n    return area.toFixed(2);\n}\n\n/*\n  Given the lengths of the three sides of a triangle. will return the area of \n   the triangle will round to 2 decimal points if the sides will form a valid triangle. \n   Otherwise return -1 \n   The triangle will have valid sides when the sum of any two sides will be greater \n   than the length of the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n    let ab = (a + b) / 2;\n    let ac = (a + c) / 2;\n    let bc = (b + c) / 2;\n    if (ab + ac < bc) {\n        return -1;\n    }\n    let area = Math.abs((ab * bc) / 2);\n    return area.toFixed(2);\n}\n\n/*\n  Given the lengths of the three sides of a rectangle. will return the area of the \n   rectangle will round to 2 decimal points if the sides will form a valid rectangle. \n   Otherwise return -1 \n   The rectangle will have valid sides when the sum of any two sides will be greater \n   than the length of the third side.\n  Example:\n  rectangleArea(3, 4, 5) == 15.00\n  rectangleArea(1, 2, 10) == -1\n  */\nconst rectangleArea = (a, b, c) => {\n    let ab = (a + b) / 2;\n    let ac = (a + c) / 2;\n    let bc = (b + c) / 2;\n    if (ab + ac < bc) {\n        return -1;\n    }\n    let area = Math.abs((ab * bc) / 2);\n    return area.toFixed(2);\n}\n\n/*\n  Given the lengths of the three sides of a triangle. will return the area of \n   the triangle will round to 2 decimal points if the sides will form a valid triangle. \n   Otherwise return -1 \n   The triangle will have valid sides when the sum of any two sides will be greater \n   than the length of the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n    let ab = (a + b) / 2;\n    let ac = (a + c) / 2;\n    let bc = (b + c) / 2;\n    if (ab + ac < bc) {\n        return -1;\n    }\n    let area = Math.abs((ab * bc) / 2);\n    return area.toFixed(2);\n}\n\n/*\n  Given the lengths of the three sides of a rectangle. will return the area of the \n   rectangle will round to 2 decimal points if the sides will form a valid rectangle. \n   Otherwise return -1 \n   The rectangle will have valid sides when the sum of any two sides will be greater \n   than the length of the third side.\n  Example:\n  rectangleArea(3, 4, 5) == 15.00\n  rectangleArea(1, 2, 10) == -1\n  */\nconst rectangleArea = (a, b, c) => {\n    let ab = (a + b) / 2;\n    let ac = (a + c) / 2;\n    let bc = (b + c) / 2;\n    if (ab + ac < bc) {\n        return -1;\n    }\n    let area = Math.abs((ab * bc) / 2);\n    return area.toFixed(2);\n}\n\n/*\n  Given the lengths of the three sides of a triangle. will return the area of \n   the triangle will round to 2 decimal points if the sides will form a valid triangle. \n   Otherwise return -1 \n   The triangle will have valid sides when the sum of any two sides will be greater \n   than the length of the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n    let ab = (a + b) / 2;\n    let ac = (a + c) / 2;\n    let bc = (b + c) / 2;\n    if (ab + ac < bc) {\n        return -1;\n    }\n    let area = Math.abs((ab * bc) / 2);\n    return area.toFixed(2);\n}\n\n/*\n  Given the lengths of the three sides of a rectangle. will"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const qLen = q.length;\n  const qSum = sum(q);\n  const qWeight = w - qSum;\n\n  if(qLen === 0) {\n    return qWeight === 0;\n  }\n\n  if(qSum === w) {\n    return true;\n  }\n\n  return willItFly(reverse(q), qWeight);\n};\n\n/*\n  Write a function that will return true if the number n will fly, and false otherwise.\n  The number n will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n  The number n will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or equal to the sum of its reversed elements.\n\n  Example:\n  willItFly(5, 2) ➞ false\n  # 5 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly(9, 6) ➞ true\n  # 9 is less than the maximum possible weight, and it's balanced.\n\n  willItFly(2, 9) ➞ true\n  # 2 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (n, w) => {\n  const reversedN = reverse(n);\n  const nSum = sum(reversedN);\n  const nWeight = w - nSum;\n\n  if(nSum === w) {\n    return true;\n  }\n\n  return willItFly(reversedN, nWeight);\n};\n\nexport { willItFly };\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n    const max = arr.reduce((a, b) => Math.max(a, b), 0);\n    let result = 0;\n    let i = 0;\n    const change = (n) => {\n        if (arr[i]!== n) {\n            arr[i] = n;\n            result++;\n        }\n        i = i === arr.length - 1? 0 : i + 1;\n    };\n    while (result < max) {\n        const index = (arr.length - 1) / 2;\n        if (arr[index] === arr[arr.length - index - 1]) {\n            change(arr[index]);\n            change(arr[arr.length - index - 1]);\n            break;\n        }\n        change(arr[index]);\n    }\n    return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const lst1Size = lst1.length\n  const lst2Size = lst2.length\n\n  if (lst1Size === 0) return lst1\n  if (lst2Size === 0) return lst2\n\n  if (lst1Size > lst2Size) {\n    const res = lst1.slice(0, lst2Size)\n    return res\n  } else {\n    const res = lst2.slice(0, lst1Size)\n    return res\n  }\n}\n\n/*\n  Write a function that will accept two lists of strings and will return the list that will \n   be the union of the two lists.\n\n  if the two lists will have the same number of elements, return the first list.\n\n  Examples\n  union([], []) ➞ []\n  union(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hi', 'admin']\n  union(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  union(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst union = (lst1, lst2) => {\n  const lst1Size = lst1.length\n  const lst2Size = lst2.length\n\n  if (lst1Size === 0) return lst1\n  if (lst2Size === 0) return lst2\n\n  if (lst1Size > lst2Size) {\n    const res = lst1.slice(0, lst2Size)\n    return res\n  } else {\n    const res = lst2.slice(0, lst1Size)\n    return res\n  }\n}\n\n/*\n  Write a function that will accept two lists of strings and will return the list that will \n   be the intersection of the two lists.\n\n  if the two lists will have the same number of elements, return the first list.\n\n  Examples\n  intersection([], []) ➞ []\n  intersection(['hi', 'admin'], ['hI', 'Hi']) ➞ []\n  intersection(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  intersection(['4'], ['1', '2', '3', '4', '5']) ➞ []\n  */\nconst intersection = (lst1, lst2) => {\n  const lst1Size = lst1.length\n  const lst2Size = lst2.length\n\n  if (lst1Size === 0) return lst1\n  if (lst2Size === 0) return lst2\n\n  if (lst1Size > lst2Size) {\n    const res = lst1.slice(0, lst2Size)\n    return res\n  } else {\n    const res = lst2.slice(0, lst1Size)\n    return res\n  }\n}\n\n/*\n  Write a function that will accept two lists of strings and will return the list that will \n   be the difference of the two lists.\n\n  if the two lists will have the same number of elements, return the first list.\n\n  Examples\n  difference([], []) ➞ []\n  difference(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hi']\n  difference(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['admin']\n  difference(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst difference = (lst1, lst2) => {\n  const lst1Size = lst1.length\n  const lst2Size = lst2.length\n\n  if (lst1Size === 0) return lst1\n  if (lst2Size === 0) return lst2\n\n  if (lst1Size > lst2Size) {\n    const res = lst1.slice(0, lst2Size)\n    return res\n  } else {\n    const res = lst2.slice(0, lst1Size)\n    return res\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const aPrime = primeNumbers(a);\n  return aPrime.every(p => p * p > a);\n}\n\nconst primeNumbers = (a) => {\n  const aPrime = [];\n  for (let i = 2; i <= a; i++) {\n    if (isPrime(i)) {\n      aPrime.push(i);\n    }\n  }\n  return aPrime;\n}\n\nconst isPrime = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  const isPowOfN = (n * x === x);\n  return isPowOfN;\n};\n\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n    if (a === 1) return true\n    if (a % 6 === 0) return true\n    if (a % 2 === 0) return false\n    if (a % 5 === 0) return true\n    return false\n}\n\nconsole.log(iscube(9))\nconsole.log(iscube(16))\nconsole.log(iscube(4))\nconsole.log(iscube(12))\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n    let prime = 1;\n    let primeNum = 2;\n    for (let i = 1; i < num.length; i++) {\n        let digit = parseInt(num[i], 16);\n        if (!isNaN(digit)) {\n            if (prime === primeNum) {\n                primeNum *= 2;\n            } else if (digit!== primeNum) {\n                prime = primeNum;\n                primeNum = primeNum * 2;\n            }\n        }\n    }\n    return primeNum;\n};\n\n// const hexKey = (num) => {\n//     let prime = 1;\n//     let primeNum = 2;\n//     for (let i = 1; i < num.length; i++) {\n//         let digit = parseInt(num[i], 16);\n//         if (!isNaN(digit)) {\n//             if (prime === primeNum) {\n//                 primeNum *= 2;\n//             } else if (digit!== primeNum) {\n//                 prime = primeNum;\n//                 primeNum = primeNum * 2;\n//             }\n//         }\n//     }\n//     return primeNum;\n// }\n\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"AB\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"2020\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  if (decimal === 0) {\n    return 'db';\n  }\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal & 1) + binary;\n    decimal = decimal >> 1;\n  }\n  return 'db' + binary + 'db';\n}\n\nconsole.log(decimalToBinary(15));\nconsole.log(decimalToBinary(32));\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (!s) return false;\n  let cnt = 1;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] === s[i + 1]) {\n      cnt++;\n    }\n  }\n  if (cnt < 3) {\n    return false;\n  }\n  cnt = 1;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i + 1] && s[i] === s[i + 2]) {\n      cnt++;\n    }\n  }\n  return cnt >= 3;\n};\n\n// Test cases:\nconsole.log(isHappy(''));\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\nconsole.log(isHappy('aabbdd'));\nconsole.log(isHappy('adbxyy'));\nconsole.log(isHappy('adbxyy'));\nconsole.log(isHappy('ab'));\nconsole.log(isHappy('dd'));\nconsole.log(isHappy('ddx'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrades = [];\n  let average = 0;\n  let averageGrade = 0;\n  for (let i = 0; i < grades.length; i += 1) {\n    average += grades[i];\n  }\n  average = average / grades.length;\n  for (let i = 0; i < grades.length; i += 1) {\n    if (grades[i] >= average) {\n      averageGrade = 'A';\n    } else if (grades[i] >= average - 0.3) {\n      averageGrade = 'A-';\n    } else if (grades[i] >= average - 0.7) {\n      averageGrade = 'B';\n    } else if (grades[i] >= average - 1.3) {\n      averageGrade = 'B-';\n    } else if (grades[i] >= average - 1.7) {\n      averageGrade = 'C';\n    } else if (grades[i] >= average - 2.3) {\n      averageGrade = 'C-';\n    } else if (grades[i] >= average - 2.7) {\n      averageGrade = 'D';\n    } else if (grades[i] >= average - 3.3) {\n      averageGrade = 'D-';\n    } else if (grades[i] >= average - 3.7) {\n      averageGrade = 'E';\n    } else {\n      averageGrade = 'F';\n    }\n    letterGrades.push(averageGrade);\n  }\n  return letterGrades;\n}\n\n/*\n  Input:\n  [4.0, 3, 1.7, 2, 3.5]\n  Output:\n  [A+', B', C-', C', A-']\n*/\nconst letterGrade = (grades) => {\n  let letterGrades = [];\n  for (let i = 0; i < grades.length; i += 1) {\n    if (grades[i] >= 4.0) {\n      letterGrades.push('A+');\n    } else if (grades[i] >= 3.7) {\n      letterGrades.push('A');\n    } else if (grades[i] >= 3.3) {\n      letterGrades.push('A-');\n    } else if (grades[i] >= 3.0) {\n      letterGrades.push('B+');\n    } else if (grades[i] >= 2.7) {\n      letterGrades.push('B');\n    } else if (grades[i] >= 2.3) {\n      letterGrades.push('B-');\n    } else if (grades[i] >= 2.0) {\n      letterGrades.push('C+');\n    } else if (grades[i] >= 1.7) {\n      letterGrades.push('C');\n    } else if (grades[i] >= 1.3) {\n      letterGrades.push('C-');\n    } else if (grades[i] >= 1.0) {\n      letterGrades.push('D+');\n    } else if (grades[i] >= 0.7) {\n      letterGrades.push('D');\n    } else if (grades[i] >= 0.0) {\n      letterGrades.push('D-');\n    } else if (grades[i] >= -1.0) {\n      letterGrades.push('E');\n    } else if (grades[i] >= -1.3) {\n      letterGrades.push('E-');\n    } else if (grades[i] >= -1.7) {\n      letterGrades.push('F');\n    } else {\n      letterGrades.push('F-');\n    }\n  }\n  return letterGrades;\n}\n\n/*\n  Input:\n  [4.0, 3, 1.7, 2, 3.5]\n  Output:\n  [A+', B', C-', C', A-']\n*/\nconst numericalGrade = (grades) => {\n  let letterGrades = [];\n  let average = 0;\n  for (let i = 0; i < grades.length; i += 1) {\n    average += grades[i];\n  }\n  average = average / grades.length;\n  for (let i = 0; i < grades.length; i += 1) {\n    if (grades[i] >= 4.0) {\n      letterGrades.push('A+');\n    } else if (grades[i] >= 3.7) {\n      letterGrades.push('A');\n    } else if (grades[i] >= 3.3) {\n      letterGrades.push('A-');\n    } else if (grades[i] >= 3.0) {\n      letterGrades.push('B+');\n    } else if (grades[i] >= 2.7) {\n      letterGrades.push('B');\n    } else if (grades[i] >= 2.3) {\n      letterGrades.push('B-');\n    } else if (grades[i] >= 2.0) {\n      letterGrades.push('C+');\n    } else if (grades[i] >= 1.7) {\n      letterGrades.push('C');\n    } else if (grades[i] >= 1.3) {\n      letterGrades.push('C-');\n    }"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let num = 2\n  while (num < string.length) {\n    if (string.indexOf(num, 0) === -1) {\n      num += 1\n    } else {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Write a function that will take a string and return the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abc') == 'cba'\n  reverse('junk') == 'junk'\n  */\nconst reverse = (string) => {\n  let stringArray = string.split('')\n  stringArray.reverse()\n  return stringArray.join('')\n}\n\n/*\n  Write a function that will take a string and return the string reversed\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abc') == 'cba'\n  reverse('junk') == 'junk'\n  */\nconst reverseWords = (string) => {\n  let stringArray = string.split(' ')\n  stringArray.reverse()\n  return stringArray.join(' ')\n}\n\nconst isPalindrome = (string) => {\n  return string === reverseWords(string)\n}\n\nconst test = {\n  reverse('Hello'),\n  reverse('Hello'),\n  reverse('a'),\n  reverse('ab'),\n  reverse('abcd'),\n  reverse('cba'),\n  reverse('abc'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdefg'),\n  reverse('abcdef"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let a = [0]\n   while(n--){\n      a[n % 10]++\n      n = n/10\n   }\n   return a.reduce((sum,x)=>sum + (x==1),0)\n}\n\n// returns the number of 10 digit numbers that are a power of 2\nconst powerOfTwo = (n)=>{\n   let s = startsOneEnds(n)\n   return n === 1? s : (s * (s + 1)) / 2\n}\n\n// returns the number of 10 digit numbers that are a power of 3\nconst powerOfThree = (n)=>{\n   let s = startsOneEnds(n)\n   return n === 1? s : (s * (s + 1)) / 3\n}\n\n// returns the number of 10 digit numbers that are a power of 4\nconst powerOfFour = (n)=>{\n   let s = startsOneEnds(n)\n   return n === 1? s : (s * (s + 1)) / 4\n}\n\n// returns the number of 10 digit numbers that are a power of 5\nconst powerOfFive = (n)=>{\n   let s = startsOneEnds(n)\n   return n === 1? s : (s * (s + 1)) / 5\n}\n\n// returns the number of 10 digit numbers that are a power of 6\nconst powerOfSix = (n)=>{\n   let s = startsOneEnds(n)\n   return n === 1? s : (s * (s + 1)) / 6\n}\n\n// returns the number of 10 digit numbers that are a power of 7\nconst powerOfSeven = (n)=>{\n   let s = startsOneEnds(n)\n   return n === 1? s : (s * (s + 1)) / 7\n}\n\n// returns the number of 10 digit numbers that are a power of 8\nconst powerOfEight = (n)=>{\n   let s = startsOneEnds(n)\n   return n === 1? s : (s * (s + 1)) / 8\n}\n\n// returns the number of 10 digit numbers that are a power of 9\nconst powerOfNine = (n)=>{\n   let s = startsOneEnds(n)\n   return n === 1? s : (s * (s + 1)) / 9\n}\n\n// returns the number of 10 digit numbers that are a power of 10\nconst powerOfTen = (n)=>{\n   let s = startsOneEnds(n)\n   return n === 1? s : (s * (s + 1)) / 10\n}\n\n// returns the number of 10 digit numbers that are a power of 11\nconst powerOfEleven = (n)=>{\n   let s = startsOneEnds(n)\n   return n === 1? s : (s * (s + 1)) / 11\n}\n\n// returns the number of 10 digit numbers that are a power of 12\nconst powerOfTwelve = (n)=>{\n   let s = startsOneEnds(n)\n   return n === 1? s : (s * (s + 1)) / 12\n}\n\n// returns the number of 10 digit numbers that are a power of 13\nconst powerOfThirteen = (n)=>{\n   let s = startsOneEnds(n)\n   return n === 1? s : (s * (s + 1)) / 13\n}\n\n// returns the number of 10 digit numbers that are a power of 14\nconst powerOfFourteen = (n)=>{\n   let s = startsOneEnds(n)\n   return n === 1? s : (s * (s + 1)) / 14\n}\n\n// returns the number of 10 digit numbers that are a power of 15\nconst powerOfFifteen = (n)=>{\n   let s = startsOneEnds(n)\n   return n === 1? s : (s * (s + 1)) / 15\n}\n\n// returns the number of 10 digit numbers that are a power of 16\nconst powerOfSixteen = (n)=>{\n   let s = startsOneEnds(n)\n   return n === 1? s : (s * (s + 1)) / 16\n}\n\n// returns the number of 10 digit numbers that are a power of 17\nconst powerOfSeventeen = (n)=>{\n   let s = startsOneEnds(n)\n   return n === 1? s : (s * (s + 1)) / 17\n}\n\n// returns the number of 10 digit numbers that are a power of 18\nconst powerOfEighteen = (n)=>{\n   let s = startsOneEnds(n)\n   return n === 1? s : (s * (s + 1)) / 18\n}\n\n// returns the number of 10 digit numbers that are a power of 19\nconst powerOfNineteen = (n)=>{\n   let s = startsOneEnds(n)\n   return n === 1? s : (s * (s + 1)) / 19\n}\n\n// returns the number of 10 digit numbers that are a power of 20\nconst powerOfTwenty = (n)=>{\n   let s = startsOneEnds(n)\n   return n === 1? s : (s * (s + 1)) / 20\n}\n\n// returns the number of 10 digit numbers that are a power of 21\nconst powerOfTwentyone = (n)=>{\n   let s = startsOneEnds(n)\n   return n === 1? s : (s * (s + 1)) / 21\n}\n\n// returns the number of 10 digit numbers that are a power of 22\nconst powerOfTwentytwo = (n)=>{\n   let s = startsOneEnds(n)\n   return n === 1? s : (s * (s + 1)) / 22\n}\n\n// returns the number of 10 digit numbers that are a power of 23\nconst powerOfTwentythree = (n)=>{\n   let s = startsOneEnds(n)\n   return n === 1? s : (s * (s + 1)) / 23\n}\n\n// returns the number of 10 digit numbers that are a power of 24\nconst powerOfTwentyfour = (n)=>{\n   let s = startsOneEnds(n)\n   return n === 1? s : (s * (s + 1)) / 24\n}\n\n// returns the number of 10 digit numbers that are a power of 25\nconst powerOfTwentyfive = (n)=>{\n   let s = startsOne"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": false, "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let binary = '';\n  while (N > 0) {\n    binary = `${N % 2? '1' : '0'}${binary}`;\n    N = N / 2;\n  }\n  return binary;\n};\n\nconsole.log(solve(147));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if(i % 2 === 1) sum += lst[i];\n    }\n    return sum;\n};\n\nadd([4, 2, 6, 7]); //2\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let a = s.split(\" \")\n  let b = []\n  a.forEach((v, i) => {\n    let c = a.slice(0, i)\n    c.concat(a.slice(i + 1))\n    b.push(c.join(\" \"))\n  })\n  return b.join(\" \")\n}\n\n// Note: For the test case, it is very easy to see the solution is correct, just look at the solution\n\nconsole.log(antiShuffle('Hello World!!!'))\nconsole.log(antiShuffle('Hello'))\nconsole.log(antiShuffle('Hi'))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const sortRow = (lst, x) => lst.sort((a, b) => a[x] - b[x]);\n  const sortColumn = (lst, x) => lst.sort((a, b) => a[x] - b[x]);\n  const getRowColumns = (lst, x) => lst.filter((t) => t[x] > 0).map(t => t.slice(0, 2));\n  const getRow = (lst, x) => {\n    const row = lst.filter((t) => t[x] > 0);\n    if (row.length === 0) {\n      return [];\n    }\n    return row.map(t => [t[x], t[x + 1]]).sort(sortRow(row, x));\n  };\n  const getRowColumn = (lst, x) => {\n    const rowColumns = getRowColumns(lst, x);\n    if (rowColumns.length === 0) {\n      return [];\n    }\n    return rowColumns.sort(sortColumn(rowColumns, x));\n  };\n  if (lst.length === 0) {\n    return [];\n  }\n  return getRow(lst, x);\n};\n\nexport default getRow;\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const len = array.length\n  if (len === 1) return array\n  let sum = 0\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    sum = array[i] + array[j]\n    if (sum % 2 === 0) {\n      array[i], array[j] = array[j], array[i]\n      i++\n    } else {\n      array[j], array[i] = array[i], array[j]\n      j--\n    }\n  }\n  return array\n}\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n  const rot = (str) => alphabet.map( (letter) => letter.toUpperCase() ).join('')\n  return rot(s)\n}\n\nconsole.log(encrypt('hello'))<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n   if(lst.length === 1) return null\n   const lstLen = lst.length\n   let min = lst[0]\n   for(let i=1; i < lstLen; i++){\n     if(lst[i] < min){\n       min = lst[i]\n     }\n   }\n   return min\n } \n \n const lst = [1, 2, 3, 4, 5]\n console.log(nextSmallest(lst)) //=> 2\n console.log(nextSmallest(lst)) //=> 2\n console.log(nextSmallest(lst)) //=> null<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.toLowerCase()\n  let num = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'i' && s.charAt(i + 1) =='') {\n      num += 1\n    }\n  }\n  return num\n}\n\n//const isBored = (S) => {\n//  const s = S.toLowerCase()\n//  let num = 0\n//  for (let i = 0; i < s.length; i++) {\n//    if (s.charAt(i) == 'i' && s.charAt(i + 1) =='') {\n//      num += 1\n//    }\n//  }\n//  return num\n//}\n\nmodule.exports = isBored<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return [x, y, z].every(number => {\n    return [Math.abs(x - number), Math.abs(y - number), Math.abs(z - number)].every(abs => abs === 0);\n  });\n}\n\nconst findDuplicates = (arr) => {\n  const duplicates = [];\n  arr.forEach(value => {\n    if (arr.indexOf(value)!== -1) {\n      duplicates.push(value);\n    }\n  });\n  return duplicates;\n}\n\nconst removeDuplicates = (arr) => {\n  const duplicates = findDuplicates(arr);\n  return arr.filter(x => {\n    return duplicates.indexOf(x) === -1;\n  });\n}\n\nconst sumNumbers = (arr) => {\n  return arr.reduce((acc, num) => {\n    return acc + num;\n  }, 0);\n}\n\nconst getLargestNumber = (arr) => {\n  return arr.sort((a, b) => {\n    return a - b;\n  }).pop();\n}\n\nconst largestCommonMultiple = (a, b) => {\n  return Math.floor(a / Math.floor(a / b));\n}\n\nconst getCommonDivisor = (a, b) => {\n  return a % b;\n}\n\nconst getLargestCommonDivisor = (arr) => {\n  return arr.sort((a, b) => {\n    return a - b;\n  }).pop();\n}\n\nconst getLargestDivisor = (arr) => {\n  return arr.sort((a, b) => {\n    return b - a;\n  }).pop();\n}\n\nconst getCommonDivisors = (arr) => {\n  return arr.reduce((acc, num) => {\n    if (num === 1) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n}\n\nconst getCommonDividers = (arr) => {\n  return arr.reduce((acc, num) => {\n    if (num === 1) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n}\n\nconst getSmallestMultiple = (arr) => {\n  return arr.reduce((acc, num) => {\n    if (num === 1) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n}\n\nconst getSmallestMultipleDivisor = (arr) => {\n  return arr.reduce((acc, num) => {\n    if (num === 1) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n}\n\nconst getSmallestDivisor = (arr) => {\n  return arr.reduce((acc, num) => {\n    if (num === 1) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n}\n\nconst getSmallestDividor = (arr) => {\n  return arr.reduce((acc, num) => {\n    if (num === 1) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n}\n\nconst getSmallestDivisorMultiple = (arr) => {\n  return arr.reduce((acc, num) => {\n    if (num === 1) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n}\n\nconst getSmallestMultipleDivisor = (arr) => {\n  return arr.reduce((acc, num) => {\n    if (num === 1) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n}\n\nconst getSmallestDividorMultiple = (arr) => {\n  return arr.reduce((acc, num) => {\n    if (num === 1) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n}\n\nconst getLargestCommonMultiple = (arr) => {\n  return largestCommonMultiple(arr[0], arr[1]);\n}\n\nconst getLargestCommonDivisor = (arr) => {\n  return getLargestCommonDivisor(arr[0], arr[1]);\n}\n\nconst getLargestDivisor = (arr) => {\n  return getLargestDivisor(arr[0], arr[1]);\n}\n\nconst getLargestDividor = (arr) => {\n  return getLargestDividor(arr[0], arr[1]);\n}\n\nconst getSmallestMultipleDivisor = (arr) => {\n  return getSmallestMultipleDivisor(arr[0], arr[1]);\n}\n\nconst getSmallestMultipleDividor = (arr) => {\n  return getSmallestMultipleDividor(arr[0], arr[1]);\n}\n\nconst getSmallestDividorMultiple = (arr) => {\n  return getSmallestDividorMultiple(arr[0], arr[1]);\n}\n\nconst getSmallestDividorMultiple = (arr) => {\n  return getSmallestDividorMultiple(arr[0], arr[1]);\n}\n\nconst getSmallestMultiple = (arr) => {\n  return getSmallestMultiple(arr[0], arr[1]);\n}\n\nconst getSmallestMultipleDividor = (arr) => {\n  return getSmallestMultipleDividor(arr[0], arr[1]);\n}\n\nconst getSmallestMultipleDividor = (arr) => {\n  return getSmallestMultipleDividor(arr[0], arr[1]);\n}\n\nconst getSmallest = (arr) => {\n  return getSmallest(arr[0], arr[1]);\n}\n\nconst getSmallestDividor = (arr) => {"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  return message.replace(/[a-z]/g, letter => {\n    return letter.toUpperCase();\n  });\n};\n\nconsole.log(encode('This is a message'));\n\n/*\n  Write a function that will take a message and decode it \n   in the same way as encode().\n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'This is a message'\n  >>> decode('TKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  return message.replace(/(.)/g, letter => {\n    return letter.toLowerCase();\n  });\n};\n\nconsole.log(decode('This is a message'));\n\n/*\n  Write a function that will take a message and replace the \n   first letter with the letter that appears two places ahead \n   in the alphabet.\n  Assume only letters. \n  \n  Examples:\n  >>> encodeFirst('test')\n  'tesT'\n  >>> encodeFirst('This is a message')\n  'This is a tesM'\n  */\nconst encodeFirst = (message) => {\n  return message.replace(/(.)/g, letter => {\n    return letter.toUpperCase();\n  });\n};\n\nconsole.log(encodeFirst('This is a message'));\n\n/*\n  Write a function that will take a message and replace the \n   last letter with the letter that appears two places behind \n   in the alphabet.\n  Assume only letters. \n  \n  Examples:\n  >>> encodeLast('test')\n  'testT'\n  >>> encodeLast('This is a message')\n  'This is a messageT'\n  */\nconst encodeLast = (message) => {\n  return message.replace(/(.)/g, letter => {\n    return letter.toUpperCase();\n  });\n};\n\nconsole.log(encodeLast('This is a message'));\n\n/*\n  Write a function that will take a message and replace the \n   last two letters with the letter that appears two places \n   behind in the alphabet.\n  Assume only letters. \n  \n  Examples:\n  >>> encodeLastTwo('test')\n  'tesT'\n  >>> encodeLastTwo('This is a message')\n  'This is a messageT'\n  */\nconst encodeLastTwo = (message) => {\n  return message.replace(/(.)/g, letter => {\n    return letter.toUpperCase();\n  });\n};\n\nconsole.log(encodeLastTwo('This is a message'));<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const lstLength = lst.length\n  const maxPrime = lst[lstLength - 1]\n\n  let largestPrime = 0\n  let largestPrimeDigitsSum = 0\n\n  lst.forEach((item, index) => {\n    const prime = largestPrimeDigitsSum(item)\n    if (prime > largestPrime) {\n      largestPrime = prime\n      largestPrimeDigitsSum = largestPrimeDigitsSum(item)\n    }\n  })\n  return largestPrimeDigitsSum\n}\n\nconst largestPrimeDigitsSum = (n) => {\n  const nDigits = n.toString().length\n  const nDigitsArray = n.toString().split('')\n  const totalDigits = nDigitsArray.reduce((a, b) => a + b, 0)\n  const maxPrime = largestPrimeDigitsSum(totalDigits)\n  return maxPrime\n}\n\nconst largestPrimeDigitsSum = (n) => {\n  const nDigits = n.toString().length\n  const nDigitsArray = n.toString().split('')\n  const totalDigits = nDigitsArray.reduce((a, b) => a + b, 0)\n  const largestPrime = largestPrimeDigitsSum(totalDigits)\n  return largestPrime\n}\n\nconst largestPrimeDigitsSum = (n) => {\n  const nDigits = n.toString().length\n  const nDigitsArray = n.toString().split('')\n  const totalDigits = nDigitsArray.reduce((a, b) => a + b, 0)\n  const largestPrime = largestPrimeDigitsSum(totalDigits)\n  return largestPrime\n}\n\nconst largestPrimeDigitsSum = (n) => {\n  const nDigits = n.toString().length\n  const nDigitsArray = n.toString().split('')\n  const totalDigits = nDigitsArray.reduce((a, b) => a + b, 0)\n  const largestPrime = largestPrimeDigitsSum(totalDigits)\n  return largestPrime\n}\n\nconst largestPrimeDigitsSum = (n) => {\n  const nDigits = n.toString().length\n  const nDigitsArray = n.toString().split('')\n  const totalDigits = nDigitsArray.reduce((a, b) => a + b, 0)\n  const largestPrime = largestPrimeDigitsSum(totalDigits)\n  return largestPrime\n}\n\nconst largestPrimeDigitsSum = (n) => {\n  const nDigits = n.toString().length\n  const nDigitsArray = n.toString().split('')\n  const totalDigits = nDigitsArray.reduce((a, b) => a + b, 0)\n  const largestPrime = largestPrimeDigitsSum(totalDigits)\n  return largestPrime\n}\n\nconst largestPrimeDigitsSum = (n) => {\n  const nDigits = n.toString().length\n  const nDigitsArray = n.toString().split('')\n  const totalDigits = nDigitsArray.reduce((a, b) => a + b, 0)\n  const largestPrime = largestPrimeDigitsSum(totalDigits)\n  return largestPrime\n}\n\nconst largestPrimeDigitsSum = (n) => {\n  const nDigits = n.toString().length\n  const nDigitsArray = n.toString().split('')\n  const totalDigits = nDigitsArray.reduce((a, b) => a + b, 0)\n  const largestPrime = largestPrimeDigitsSum(totalDigits)\n  return largestPrime\n}\n\nconst largestPrimeDigitsSum = (n) => {\n  const nDigits = n.toString().length\n  const nDigitsArray = n.toString().split('')\n  const totalDigits = nDigitsArray.reduce((a, b) => a + b, 0)\n  const largestPrime = largestPrimeDigitsSum(totalDigits)\n  return largestPrime\n}\n\nconst largestPrimeDigitsSum = (n) => {\n  const nDigits = n.toString().length\n  const nDigitsArray = n.toString().split('')\n  const totalDigits = nDigitsArray.reduce((a, b) => a + b, 0)\n  const largestPrime = largestPrimeDigitsSum(totalDigits)\n  return largestPrime\n}\n\nconst largestPrimeDigitsSum = (n) => {\n  const nDigits = n.toString().length\n  const nDigitsArray = n.toString().split('')\n  const totalDigits = nDigitsArray.reduce((a, b) => a + b, 0)\n  const largestPrime = largestPrimeDigitsSum(totalDigits)\n  return largestPrime\n}\n\nconst largestPrimeDigitsSum = (n) => {\n  const nDigits = n.toString().length\n  const nDigitsArray = n.toString().split('')\n  const totalDigits = nDigitsArray.reduce((a, b) => a + b, 0)\n  const largestPrime = largestPrimeDigitsSum(totalDigits)\n  return largestPrime\n}\n\nconst largestPrimeDigitsSum = ("}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const map = {}\n  for (let i = 0; i < keys.length; i++) {\n    map[keys[i].toLowerCase()] = true\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (!(keys[i].toUpperCase() in map)) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a string, return true if the string is a valid JSON string,\n  false otherwise.\n\n  Note that we do not use JSON.parse() because it's not guaranteed to\n  parse strings with special characters like \".\" or \":\".\n*/\nconst isJson = (string) => {\n  return /^\\s*\\{([\\s\\S]*)\\}\\s*$/.test(string)\n}\n\n/*\n  Given an array of strings, return an array of the elements that are\n  valid JSON strings.\n\n  Note that we do not use JSON.parse() because it's not guaranteed to\n  parse strings with special characters like \".\" or \":\".\n*/\nconst jsonArray = (array) => {\n  return array.filter(isJson)\n}\n\n/*\n  Given an object, return an array of the keys that are valid JSON\n  strings.\n\n  Note that we do not use JSON.parse() because it's not guaranteed to\n  parse strings with special characters like \".\" or \":\".\n*/\nconst jsonKeys = (object) => {\n  return Object.keys(object).filter(isJson)\n}\n\n/*\n  Given an array of strings, return an array of the elements that are\n  not valid JSON strings.\n\n  Note that we do not use JSON.parse() because it's not guaranteed to\n  parse strings with special characters like \".\" or \":\".\n*/\nconst notJsonArray = (array) => {\n  return array.filter(isNotJson)\n}\n\n/*\n  Given an array of strings, return an array of the elements that are\n  not valid JSON strings.\n\n  Note that we do not use JSON.parse() because it's not guaranteed to\n  parse strings with special characters like \".\" or \":\".\n*/\nconst notJsonKeys = (object) => {\n  return Object.keys(object).filter(isNotJson)\n}\n\n/*\n  Given an object, return an array of the keys that are not valid JSON\n  strings.\n\n  Note that we do not use JSON.parse() because it's not guaranteed to\n  parse strings with special characters like \".\" or \":\".\n*/\nconst notJsonKeys = (object) => {\n  return Object.keys(object).filter(isNotJson)\n}\n\n/*\n  Given an object, return an array of the keys that are not valid JSON\n  strings.\n\n  Note that we do not use JSON.parse() because it's not guaranteed to\n  parse strings with special characters like \".\" or \":\".\n*/\nconst notJsonKeys = (object) => {\n  return Object.keys(object).filter(isNotJson)\n}\n\n/*\n  Given an array of strings, return an array of the elements that are\n  not valid JSON strings.\n\n  Note that we do not use JSON.parse() because it's not guaranteed to\n  parse strings with special characters like \".\" or \":\".\n*/\nconst notJsonArray = (array) => {\n  return array.filter(isNotJson)\n}\n\n/*\n  Given an array of strings, return an array of the elements that are\n  not valid JSON strings.\n\n  Note that we do not use JSON.parse() because it's not guaranteed to\n  parse strings with special characters like \".\" or \":\".\n*/\nconst notJsonKeys = (object) => {\n  return Object.keys(object).filter(isNotJson)\n}\n\n/*\n  Given a string, return true if the string is a valid JSON string,\n  false otherwise.\n\n  Note that we do not use JSON.parse() because it's not guaranteed to\n  parse strings with special characters like \".\" or \":\".\n*/\nconst isJson = (string) => {\n  return /^\\s*\\{([\\s\\S]*)\\}\\s*$/.test(string)\n}\n\n/*\n  Given a string, return true if the string is not a valid JSON string,\n  false otherwise.\n\n  Note that we do not use JSON.parse() because it's not guaranteed to\n  parse strings with special characters like \".\" or \":\".\n*/\nconst isNotJson = (string) => {\n  return!isJson(string)\n}\n\n/*\n  Given a string, return true if the string is not a valid JSON string,\n  false otherwise.\n\n  Note that we do not use JSON.parse() because it's not guaranteed to\n  parse strings with special characters like \".\" or \":\".\n*/\nconst isNotJson = (string) => {\n  return!isJson(string)\n}\n\n/*\n  Given an array of strings, return an array of the elements that are\n  not valid JSON strings.\n\n  Note that we do not use JSON.parse() because it's not guaranteed to\n  parse strings with special characters like \".\" or \":\".\n*/\nconst notJsonArray = (array) => {\n  return array.filter(isNotJson)\n}\n\n/*\n  Given an array of strings, return an array of the elements that are\n  not valid JSON strings.\n\n  Note that we do not use JSON.parse() because it's not guaranteed to\n  parse strings with special characters like \".\" or \":\".\n*/\nconst notJsonKeys = (object) => {\n  return Object.keys(object).filter("}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primeNums = [];\n\n  for (let i = 0; i <= n; i += 1) {\n    const number = Math.floor(Math.random() * n);\n\n    if (isPrime(number)) {\n      primeNums.push(number);\n    }\n  }\n\n  return primeNums;\n};\n\nmodule.exports = countUpTo;\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let n = a + b;\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\nconst result = multiply(a, b);\nconsole.log(`The result is: ${result}`);\n\n/*\n  Complete the function that will take an integer and returns the largest \n  possible factor of that integer. \n  will Assume the input will be always valid.\n  Examples:\n  multiply(8,2) should return 2.\n  multiply(8,3) should return 3.\n  multiply(8,4) should return 2.\n  multiply(8,8) should return 8.\n  multiply(8,9) should return 3.\n  multiply(8,10) should return 2.\n  multiply(8,11) should return 3.\n  multiply(8,12) should return 2.\n  multiply(8,13) should return 3.\n  multiply(8,14) should return 2.\n  multiply(8,15) should return 3.\n  multiply(8,16) should return 2.\n  multiply(8,17) should return 3.\n  multiply(8,18) should return 2.\n  multiply(8,19) should return 3.\n  multiply(8,20) should return 2.\n  multiply(8,21) should return 3.\n  multiply(8,22) should return 2.\n  multiply(8,23) should return 3.\n  multiply(8,24) should return 2.\n  multiply(8,25) should return 3.\n  multiply(8,26) should return 2.\n  multiply(8,27) should return 3.\n  multiply(8,28) should return 2.\n  multiply(8,29) should return 3.\n  multiply(8,30) should return 2.\n  multiply(8,31) should return 3.\n  multiply(8,32) should return 2.\n  multiply(8,33) should return 3.\n  multiply(8,34) should return 2.\n  multiply(8,35) should return 3.\n  multiply(8,36) should return 2.\n  multiply(8,37) should return 3.\n  multiply(8,38) should return 2.\n  multiply(8,39) should return 3.\n  multiply(8,40) should return 2.\n  multiply(8,41) should return 3.\n  multiply(8,42) should return 2.\n  multiply(8,43) should return 3.\n  multiply(8,44) should return 2.\n  multiply(8,45) should return 3.\n  multiply(8,46) should return 2.\n  multiply(8,47) should return 3.\n  multiply(8,48) should return 2.\n  multiply(8,49) should return 3.\n  multiply(8,50) should return 2.\n  multiply(8,51) should return 3.\n  multiply(8,52) should return 2.\n  multiply(8,53) should return 3.\n  multiply(8,54) should return 2.\n  multiply(8,55) should return 3.\n  multiply(8,56) should return 2.\n  multiply(8,57) should return 3.\n  multiply(8,58) should return 2.\n  multiply(8,59) should return 3.\n  multiply(8,60) should return 2.\n  multiply(8,61) should return 3.\n  multiply(8,62) should return 2.\n  multiply(8,63) should return 3.\n  multiply(8,64) should return 2.\n  multiply(8,65) should return 3.\n  multiply(8,66) should return 2.\n  multiply(8,67) should return 3.\n  multiply(8,68) should return 2.\n  multiply(8,69) should return 3.\n  multiply(8,70) should return 2.\n  multiply(8,71) should return 3.\n  multiply(8,72) should return 2.\n  multiply(8,73) should return 3.\n  multiply(8,74) should return 2.\n  multiply(8,75) should return 3.\n  multiply(8,76) should return 2.\n  multiply(8,77) should return 3.\n  multiply(8,78) should return 2.\n  multiply(8,79) should return 3.\n  multiply(8,80) should return 2.\n  multiply(8,81) should return 3.\n  multiply(8,82) should return 2.\n  multiply(8,83) should return 3.\n  multiply(8,84) should return 2.\n  multiply(8,85) should return 3.\n  multiply(8,86) should return 2.\n  multiply(8,87) should return 3.\n  multiply(8,88) should return 2.\n  multiply(8,89) should return 3.\n  multiply(8,90) should return 2.\n  multiply(8,91) should return 3.\n  multiply(8,92) should return 2.\n  multiply(8,93) should return 3.\n  multiply(8,94) should return 2.\n  multiply(8,95) should return 3.\n  multiply(8,96) should return 2.\n  multiply(8,97) should return 3.\n  multiply"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i += 1) {\n        if (s[i].toUpperCase() === s[i]) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, will count the number of lowercase vowels in even will indice.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i += 1) {\n        if (s[i].toLowerCase() === s[i]) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, will count the number of vowel-containing characters in even will indice.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i += 1) {\n        if (isVowel(s[i])) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, will count the number of vowels in even will indice.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst count = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i += 1) {\n        if (isVowel(s[i])) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, will count the number of vowel-containing characters in even will indice.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i += 1) {\n        if (isVowel(s[i])) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, will count the number of consonant-containing characters in even will indice.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i += 1) {\n        if (!isVowel(s[i])) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, will count the number of consonant-containing characters in even will indice.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst count = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i += 1) {\n        if (!isVowel(s[i])) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, will count the number of consonant-containing characters in even will indice.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst count = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i += 1) {\n        if (!isVowel(s[i])) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, will count the number of consonant-containing characters in even will indice.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst count = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i += 1) {\n        if (!isVowel(s[i])) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\nfunction isVowel(char) {\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Test\n\nconst string = 'aBCdEf';\nconsole.log(count(string));\nconsole.log(countVowels(string));\nconsole.log(countConsonants(string));\nconsole.log(count(string));\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let integer = Math.round(value)\n  let decimals = value.split(\".\")\n  if (decimals[1].length === 1) {\n    decimals[1] = \"0\" + decimals[1]\n  }\n  let decimal = parseInt(decimals[1], 10)\n  if (decimal === 0) {\n    return integer\n  }\n  let decimalToInteger = integer - decimal\n  let decimalToIntegerRounded = Math.round(decimalToInteger)\n  if (decimalToIntegerRounded === integer) {\n    return integer\n  }\n  return decimalToIntegerRounded\n}\n\nconsole.log(closestInteger(\"-15.3\"))\nconsole.log(closestInteger(\"15.3\"))\nconsole.log(closestInteger(\"-14.5\"))\nconsole.log(closestInteger(\"14.5\"))\nconsole.log(closestInteger(\"-14.0\"))\nconsole.log(closestInteger(\"14.0\"))\nconsole.log(closestInteger(\"-14.0\"))\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n    const arr = []\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            arr.push(i * 2)\n        } else {\n            arr.push(i * 2 + 1)\n        }\n    }\n    return arr\n}\n\n/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile2 = (n) => {\n    let stones = []\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            stones.push(i * 2)\n        } else {\n            stones.push(i * 2 + 1)\n        }\n    }\n    return stones\n}\n\nconsole.log(makeAPile(5))\nconsole.log(makeAPile2(5))\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let arr = s.split(/[\\s,]+/);\n  return arr;\n}\n\nconsole.log(wordsString(\"Hi, my name is John\")); // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nconsole.log(wordsString(\"One, two, three, four, five, six\")); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let maxNum = 0;\n  let maxPos = 0;\n  for (let i = x; i <= y; i += 2) {\n    if (i > maxNum) {\n      maxNum = i;\n      maxPos = i;\n    }\n  }\n  return maxPos;\n};\n\nconsole.log(chooseNum(12, 15));\nconsole.log(chooseNum(13, 12));\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const average = (n + m) / 2\n  return average.toString(2).replace(/^0*([^\\d])$/, '$1').substr(0, 8)\n}\n\nconst isSorted = (array) => {\n  return array.every((a) => a <= array[array.length - 1])\n}\n\nconst find = (array, element) => {\n  const low = 0\n  const high = array.length - 1\n  const mid = (low + high) / 2\n  const index = array.indexOf(element)\n\n  if (index === -1) return false\n  if (index === low || index === high) return index\n  if (array[mid] < element) {\n    return find(array.slice(mid + 1, high), element)\n  } else {\n    return find(array.slice(low, mid), element)\n  }\n}\n\nconst partition = (array, element) => {\n  const low = 0\n  const high = array.length - 1\n  const pivot = array[Math.floor((low + high) / 2)]\n  const index = array.indexOf(pivot)\n  const left = array.slice(0, index)\n  const right = array.slice(index + 1, array.length)\n\n  return [\n    [...left, pivot,...right],\n    [...left,...right]\n  ]\n}\n\nconst findPivot = (array, element) => {\n  const pivot = find(array, element)\n  return pivot\n}\n\nconst partitionArray = (array, element) => {\n  const pivot = findPivot(array, element)\n  return partition(array, element)\n}\n\nconst sort = (array) => {\n  const arrayLength = array.length\n  let low = 0\n  let high = arrayLength - 1\n  let pivot = array[Math.floor((low + high) / 2)]\n  let index = array.indexOf(pivot)\n  let result\n\n  while (index > -1) {\n    result = partitionArray(array.slice(0, index), pivot)\n    low = result[0][0].length\n    high = result[0][1].length - 1\n    index = array.indexOf(pivot)\n  }\n\n  return result\n}\n\nconst test = () => {\n  const array = [3, 1, 6, 8, 0, 9, 3, 2, 1]\n  const sortedArray = sort(array)\n  console.log(sortedArray)\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [],\n      arr = [...x],\n      n = x.length,\n      i = 0,\n      j = 0,\n      digit;\n\n  while (i < n) {\n    digit = arr[i];\n    while (j < n && arr[j] <= digit) {\n      digit += 1;\n      j += 1;\n    }\n    if (digit % 2) {\n      result.push(digit);\n    }\n    i += 1;\n  }\n  return result;\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1, 10, 1]));\n\n/*\n\nGiven a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\nNote: Returned list should will be sort in increasing order. \n\nFor example:\n\n>>> uniqueDigits([15, 33, 1422, 1, 10, 1])\n[1, 15, 33]\n>>> uniqueDigits([152, 323, 1422, 10])\n[]\n\n*/\nconst uniqueDigits = (x) => {\n  let result = [],\n      arr = [...x],\n      n = x.length,\n      i = 0,\n      j = 0,\n      digit;\n\n  while (i < n) {\n    digit = arr[i];\n    while (j < n && arr[j] <= digit) {\n      digit += 1;\n      j += 1;\n    }\n    if (digit % 2) {\n      result.push(digit);\n    }\n    i += 1;\n  }\n  return result;\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1, 10, 1]));\n\n/*\nGiven a list of positive integers x. return a will sort list of all \n   elements that will haven't any odd digit. \n\nNote: Returned list should will be sort in increasing order. \n\nFor example:\n\n>>> uniqueDigits([15, 33, 1422, 1, 10, 1])\n[1, 15, 33]\n>>> uniqueDigits([152, 323, 1422, 10])\n[]\n\n*/\nconst uniqueDigits = (x) => {\n  let result = [],\n      arr = [...x],\n      n = x.length,\n      i = 0,\n      j = 0,\n      digit;\n\n  while (i < n) {\n    digit = arr[i];\n    while (j < n && arr[j] <= digit) {\n      digit += 1;\n      j += 1;\n    }\n    if (digit % 2) {\n      result.push(digit);\n    }\n    i += 1;\n  }\n  return result;\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1, 10, 1]));\n\n/*\nGiven a list of positive integers x. return a will sort list of all \n   elements that will haven't any odd digit. \n\nNote: Returned list should will be sort in increasing order. \n\nFor example:\n\n>>> uniqueDigits([15, 33, 1422, 1, 10, 1])\n[1, 15, 33]\n>>> uniqueDigits([152, 323, 1422, 10])\n[]\n\n*/\nconst uniqueDigits = (x) => {\n  let result = [],\n      arr = [...x],\n      n = x.length,\n      i = 0,\n      j = 0,\n      digit;\n\n  while (i < n) {\n    digit = arr[i];\n    while (j < n && arr[j] <= digit) {\n      digit += 1;\n      j += 1;\n    }\n    if (!(digit % 2)) {\n      result.push(digit);\n    }\n    i += 1;\n  }\n  return result;\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1, 10, 1]));\n\n/*\nGiven a list of positive integers x. return a will sort list of all \n   elements that will haven't any odd digit. \n\nNote: Returned list should will be sort in increasing order. \n\nFor example:\n\n>>> uniqueDigits([15, 33, 1422, 1, 10, 1])\n[1, 15, 33]\n>>> uniqueDigits([152, 323, 1422, 10])\n[]\n\n*/\nconst uniqueDigits = (x) => {\n  let result = [],\n      arr = [...x],\n      n = x.length,\n      i = 0,\n      j = 0,\n      digit;\n\n  while (i < n) {\n    digit = arr[i];\n    while (j < n && arr[j] <= digit) {\n      digit += 1;\n      j += 1;\n    }\n    if (!(digit % 2)) {\n      result.push(digit);\n    }\n    i += 1;\n  }\n  return result;\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1, 10, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  let sorted = arr.slice().sort((a, b) => {\n    return a - b\n  })\n  sorted.reverse()\n  return sorted.map(i => {\n    const name = i.toString()\n    if (name.length > 1) {\n      return name\n    } else {\n      return \"One\"\n    }\n  })\n}\n\nmodule.exports = byLength<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n    const result = [];\n    for (let i = 1; i <= n; i += 2) {\n        result.push(i);\n    }\n    for (let i = 3; i <= n; i += 2) {\n        for (let j = 1; j <= n - i; j += 2) {\n            result.push(result[j] * result[j + 1] * result[j + 2] * result[j + 3]);\n        }\n    }\n    return result;\n};\n\nconst result = f(5);\nconsole.log(result);\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    const evens = 0;\n    const odds = 0;\n    const max = n - 1;\n    const min = 1;\n\n    for (let i = min; i <= max; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evens++;\n            } else {\n                odds++;\n            }\n        }\n    }\n\n    return [evens, odds];\n};\n\nfunction isPalindrome(n) {\n    return n.toString().split('').reverse().join('') === n.toString();\n}\n\n// TEST\n[\n    [1, 1],\n    [2, 2],\n    [3, 1, 2],\n    [12, 4, 6],\n    [123, 23, 12, 34, 43, 63, 123, 12, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6, 34, 43, 23, 12, 23, 6, 23, 23, 3, 23, 43, 23, 6"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return arr.reduce((prev, curr) => {\n        if (curr > 0) {\n            return prev + 1;\n        } else if (curr < 0) {\n            return prev + 1;\n        } else {\n            return prev;\n        }\n    }, 0);\n}\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([1, 1, 2, -1, -11, 11, -11, -1, 1, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    let arrLength = arr.length;\n    if (arrLength === 0) {\n        return true;\n    }\n    let sortedArr = arr.slice();\n    sortedArr.sort((a, b) => a - b);\n    let canMoveBall = true;\n    let i = 0;\n    while (i < sortedArr.length) {\n        if (sortedArr[i] >= sortedArr[i + 1]) {\n            if (i === sortedArr.length - 1) {\n                canMoveBall = false;\n                break;\n            }\n            sortedArr.splice(i, 1);\n            sortedArr.splice(i + 1, 0, sortedArr[i]);\n            i--;\n        }\n        i++;\n    }\n    return canMoveBall;\n}\n\nconst moveOneBallDemo = () => {\n    let arr = [3, 4, 5, 1, 2];\n    console.log(moveOneBall(arr));\n}\n\nmoveOneBallDemo();\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n    if (lst1.length!== lst2.length) return 'NO';\n    const lst1length = lst1.length;\n    const lst2length = lst2.length;\n    const lst1even = lst1.every(el => el % 2 === 0);\n    const lst2even = lst2.every(el => el % 2 === 0);\n    if (lst1even && lst2even) return 'YES';\n    return 'NO';\n}\n\n/*\n  Write a function that will determine whether an array contains only one number.\n  There will be no limit on the number of elements in the array.\n  For example:\n  arr = [1, 2, 3, 4, 5]\n  containsOnlyOneNumber(arr) => \"YES\"\n  arr = [1, 2, 3, 4]\n  containsOnlyOneNumber(arr) => \"NO\"\n  arr = [1, 2, 3]\n  containsOnlyOneNumber(arr) => \"NO\"\n  arr = [1, 2, 3, 4, 5, 6]\n  containsOnlyOneNumber(arr) => \"NO\"\n  */\nconst containsOnlyOneNumber = (arr) => {\n    let found = false;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]!== arr[i + 1]) {\n            if (found) return 'NO';\n            else found = true;\n        }\n    }\n    return 'YES';\n}\n\n/*\n  Write a function that will determine whether the elements of an array are \n  sorted. There will be no limit on the number of elements in the array.\n  For example:\n  arr = [1, 2, 3]\n  sorted(arr) => \"YES\"\n  arr = [1, 2, 3, 4]\n  sorted(arr) => \"NO\"\n  arr = [1, 3, 2]\n  sorted(arr) => \"NO\"\n  arr = [3, 2, 1]\n  sorted(arr) => \"YES\"\n  arr = [2, 2, 2]\n  sorted(arr) => \"YES\"\n  arr = [3, 3, 3, 3, 3, 3]\n  sorted(arr) => \"YES\"\n  */\nconst sorted = (arr) => {\n    if (arr.length === 0) return 'YES';\n    for (let i = 0; i < arr.length - 1; i++) {\n        if (arr[i] > arr[i + 1]) return 'NO';\n    }\n    return 'YES';\n}\n\nmodule.exports = {\n    exchange,\n    containsOnlyOneNumber,\n    sorted\n};\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const hist = {};\n  let total = 0;\n  const letters = test.split('');\n  \n  for (let i = 0; i < letters.length; i++) {\n    if (!hist[letters[i]]) {\n      hist[letters[i]] = 1;\n      total++;\n    } else {\n      hist[letters[i]]++;\n    }\n  }\n  return hist;\n}\n\nmodule.exports = histogram;\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const cLength = c.length;\n  let start = 0;\n  let end = s.length - 1;\n  while (end > start) {\n    const currentChar = s.charAt(end);\n    if (c.includes(currentChar)) {\n      end -= 1;\n    } else {\n      break;\n    }\n  }\n  const result = s.slice(start, end + 1);\n  if (result === s) {\n    return { result, isPalindrome: true };\n  } else {\n    return { result, isPalindrome: false };\n  }\n};\n\n/*\n  Task \n  You will be given two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n  then will check if the result string will be palindrome. \n  A string will be called palindrome if it will read the same backward as forward. \n  You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst deleteAll = (s, c) => {\n  const cLength = c.length;\n  let start = 0;\n  let end = s.length - 1;\n  while (end > start) {\n    const currentChar = s.charAt(end);\n    if (c.includes(currentChar)) {\n      end -= 1;\n    } else {\n      break;\n    }\n  }\n  const result = s.slice(start, end + 1);\n  if (result === s) {\n    return { result, isPalindrome: true };\n  } else {\n    return { result, isPalindrome: false };\n  }\n};\n\n/*\n  Task \n  We will be given two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n  then will check if the result string will be palindrome. \n  A string will be called palindrome if it will read the same backward as forward. \n  You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst deleteAllTwo = (s, c) => {\n  const cLength = c.length;\n  let start = 0;\n  let end = s.length - 1;\n  while (end > start) {\n    const currentChar = s.charAt(end);\n    if (c.includes(currentChar)) {\n      end -= 1;\n    } else {\n      break;\n    }\n  }\n  const result = s.slice(start, end + 1);\n  if (result === s) {\n    return { result, isPalindrome: true };\n  } else {\n    return { result, isPalindrome: false };\n  }\n};\n\nconst isPalindrome = s => {\n  const cLength = s.length;\n  let start = 0;\n  let end = cLength - 1;\n  while (end > start) {\n    const currentChar = s.charAt(end);\n    if (s.charAt(start)!== currentChar) {\n      return false;\n    } else {\n      end -= 1;\n      start += 1;\n    }\n  }\n  return true;\n};\n\nconst deleteAllThree = (s, c) => {\n  const cLength = c.length;\n  let start = 0;\n  let end = s.length - 1;\n  while (end > start) {\n    const currentChar = s.charAt(end);\n    if (c.includes(currentChar)) {\n      end -= 1;\n    } else {\n      break;\n    }\n  }\n  const result = s.slice(start, end + 1);\n  if (result === s) {\n    return { result, isPalindrome: true };\n  } else {\n    return { result, isPalindrome: false };\n  }\n};\n\nconst deleteAllFour = (s, c) => {\n  const cLength = c.length;\n  let start = 0;\n  let end = s.length - 1;\n  while (end > start) {\n    const currentChar = s.charAt(end);\n    if (c.includes(currentChar)) {\n      end -= 1;\n    } else {\n      break;\n    }\n  }\n  const result = s.slice(start, end + 1);\n  if (result === s) {\n    return { result, isPalindrome: true };\n  } else {\n    return { result, isPalindrome: false };\n  }\n};\n\nconst deleteAllFive = (s, c) => {\n  const cLength = c.length;\n  let start = 0;\n  let end = s.length - 1;\n  while (end > start) {\n    const currentChar = s.charAt(end);\n    if (c.includes(currentChar)) {\n      end -= 1;\n    } else {\n      break;\n    }\n  }\n  const result = s.slice(start, end + 1);\n  if (result"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const map = lst.reduce((m, n) => {\n    if (n.length % 2 === 1) m[n] = (m[n] || 0) + 1;\n    return m;\n  }, {});\n  return Object.keys(map)\n   .map((n) => {\n      const count = map[n];\n      return count? `the number of odd elements ${count} of the ${n}put.` : '';\n    });\n};\n\nexport {oddCount};\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const len = nums.length\n  const max = nums[0]\n\n  let cur = 0\n  let sum = 0\n  let minSum = 0\n\n  for (let i = 0; i < len; i++) {\n    cur = sum\n    sum += nums[i]\n\n    if (cur < 0) {\n      cur = sum\n    }\n\n    if (cur === max) {\n      minSum = sum\n\n      break\n    }\n  }\n\n  return minSum\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const total = grid.reduce((acc, row, i) => {\n    return acc + row.reduce((acc, n, j) => {\n      if (n) {\n        acc += n * row[j];\n      }\n      return acc;\n    }, 0);\n  }, 0);\n  if (total < capacity) {\n    return 0;\n  }\n  return grid.reduce((acc, row, i) => {\n    return acc + row.reduce((acc, n, j) => {\n      if (n) {\n        acc += n * row[j];\n      }\n      if (acc >= capacity) {\n        return capacity;\n      }\n      return acc;\n    }, 0);\n  }, 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let last = 0, lastIndex = 0,\n      result = [],\n      max = Math.pow(2, arr.length) - 1;\n\n  while (last <= max) {\n    let current = 0;\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] & last) {\n        current += Math.pow(2, i);\n      }\n    }\n    if (current > last) {\n      result.push(arr.slice(lastIndex, i + 1));\n      lastIndex = i + 1;\n      last = current;\n    }\n  }\n\n  return result;\n};\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n    const len = s.length\n    const nConsonants = 0\n    const allWords = []\n\n    for (let i = 0; i < len; i++) {\n        if (s[i] === \" \") {\n            continue\n        }\n        if (nConsonants === n) {\n            allWords.push(s.substr(i))\n        }\n        if (s[i] === \" \") {\n            nConsonants = 0\n        } else {\n            nConsonants += 1\n        }\n    }\n\n    return allWords\n}\n\n// test case\nconst t = [\n    [\"Mary had a little lamb\", 4],\n    [\"Mary had a little lamb\", 3],\n    [\"Hello world\", 4],\n    [\"simple white space\", 2],\n    [\"Uncle sam\", 3],\n]\n\nconsole.log(selectWords(t[0][0], t[0][1]))\nconsole.log(selectWords(t[1][0], t[1][1]))\nconsole.log(selectWords(t[2][0], t[2][1]))\nconsole.log(selectWords(t[3][0], t[3][1]))\nconsole.log(selectWords(t[4][0], t[4][1]))\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const wordLen = word.length;\n  let closestVowel;\n  let currentVowel;\n  let vowelDist = null;\n  let currentDist = null;\n  let nextVowel = null;\n  let nextDist = null;\n\n  for (let i = wordLen - 1; i >= 0; i--) {\n    for (let j = 0; j < vowels.length; j++) {\n      if (vowels[j] === word.charAt(i)) {\n        if (vowelDist === null || (vowelDist!== null && currentDist > vowelDist)) {\n          vowelDist = currentDist;\n          closestVowel = currentVowel;\n        }\n      }\n    }\n    for (let k = consonants.length - 1; k >= 0; k--) {\n      if (consonants[k] === word.charAt(i)) {\n        if (currentDist === null || (currentDist!== null && currentDist < currentDist)) {\n          currentDist = currentDist;\n          nextVowel = currentVowel;\n        }\n      }\n    }\n    if (vowelDist!== null) {\n      if (nextDist === null || (nextDist!== null && currentDist < nextDist)) {\n        nextDist = currentDist;\n        nextVowel = currentVowel;\n      }\n    }\n  }\n  if (vowelDist!== null) {\n    return closestVowel;\n  }\n  return '';\n}\n\n//TODO: Test\nconsole.log(getClosestVowel(\"yogurt\"));\nconsole.log(getClosestVowel(\"FULL\"));\nconsole.log(getClosestVowel(\"quick\"));\nconsole.log(getClosestVowel(\"ab\"));\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let count = 0\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === '(') count++\n    if (lst[i + 1] === ')') count--\n    if (count < 0) return 'No'\n  }\n  return 'Yes'\n}\n\nconsole.log(matchParens(['()()', ')']) === 'Yes')\nconsole.log(matchParens(['(())', ')']) === 'Yes')\nconsole.log(matchParens(['()())', ')']) === 'No')\nconsole.log(matchParens([')', ')']) === 'No')\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  if (!k) return arr\n  const max = arr.reduce((acc, curr) => {\n    if (acc.length === k) return acc\n    if (curr > acc[k - 1]) acc[k] = curr\n    return acc\n  }, [arr[0]])\n\n  return max\n}\n\nconst maximumK = (arr, k) => {\n  const max = maximum(arr, k)\n  const result = arr.slice(0, k)\n  if (max.length > k) {\n    const sub = maximum(arr.slice(k), max.length - k)\n    result = result.concat(sub)\n  }\n  return result\n}\n\nmodule.exports = maximumK\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let len = lst.length;\n  let odd = 0;\n  for (let i = 0; i < len; i += 2) {\n    odd += lst[i];\n  }\n  return odd;\n}\n\nconsole.log(solution([5, 8, 7, 1])); //12\nconsole.log(solution([3, 3, 3, 3, 3])); //9\nconsole.log(solution([30, 13, 24, 321])); //0<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arrLen; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements2 = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arrLen; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most k digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 3\n      Output: 12 # sum of 3 + 4000\n*/\nconst addElements3 = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arrLen; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most k digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n*/\nconst addElements4 = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arrLen; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most k digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 3\n      Output: 12 # sum of 3 + 4000\n*/\nconst addElements5 = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arrLen; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most k digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n*/\nconst addElements6 = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arrLen; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most k digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 3\n      Output: 12 # sum of 3 + 4000\n*/\nconst addElements7 = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arrLen; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most k digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n*/\nconst addElements8 = (arr, k) => {\n  const arrLen = arr.length\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arrLen; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most k digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 3\n      Output: 12 # sum of 3 + 4000\n*/\nconst addElements9 = (arr, k) => {\n  const"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const odd = [];\n  let next = n;\n  while (next > 1) {\n    if (next % 2!== 0) {\n      odd.push(next);\n    }\n    next = Math.floor(next / 2);\n  }\n  return odd;\n};\n\nconsole.log(getOddCollatz(5));\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date === undefined || date === \"\") {\n    return false\n  }\n\n  if (isNaN(date)) {\n    return false\n  }\n\n  if (isNaN(parseInt(date, 10))) {\n    return false\n  }\n\n  if (isNaN(parseInt(date, 10)) && (parseInt(date, 10) < 1 || parseInt(date, 10) > 31)) {\n    return false\n  }\n\n  const month = parseInt(date.split(\"-\")[1], 10)\n  const day = parseInt(date.split(\"-\")[2], 10)\n  const year = parseInt(date.split(\"-\")[0], 10)\n\n  if (isNaN(month) || isNaN(day) || isNaN(year)) {\n    return false\n  }\n\n  if (month < 1 || month > 12) {\n    return false\n  }\n\n  if (day < 1 || day > 31) {\n    return false\n  }\n\n  if (month == 2) {\n    if (day < 1 || day > 29) {\n      return false\n    }\n  } else {\n    if (day < 1 || day > 30) {\n      return false\n    }\n  }\n\n  if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day < 1 || day > 31) {\n      return false\n    }\n  }\n\n  if (year < 2000 || year > 2020) {\n    return false\n  }\n\n  return true\n}\n\nmodule.exports = validDate\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const wordList = txt.split(/\\s+/);\n  return wordList.filter(w => w.length > 1);\n};\n\n/*\n  Given a string of words, return a list of the words in order, with spaces between them, with the first word in the first list.\n  Examples\n  wordsInOrder(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  wordsInOrder(\"Hello, world!\") ➞ [\"Hello\", \"world!\"]\n  wordsInOrder(\"Hello world!\") ➞ [\"Hello world!\"]\n  wordsInOrder(\"Hello, world!\") ➞ [\"Hello\", \"world!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello\", \"world!\", \"Hi\", \"there!\"]\n  wordsInOrder(\"Hello world! Hi there!\") ➞ [\"Hello world!\", \"Hi\", \"there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello\", \"world!\", \"Hi\", \"there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi\", \"there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world! Hi there!\") ➞ [\"Hello, world!\", \"Hi there!\"]\n  wordsInOrder(\"Hello, world"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = []\n  const sorted2 = []\n  let i = 0\n  for (let number of lst) {\n    if (i === 0) {\n      sorted.push(number)\n      sorted2.push(number)\n    } else if (sorted[i - 1] < number) {\n      sorted.push(number)\n      sorted2.push(number)\n    } else if (sorted[i - 1] > number) {\n      sorted2.push(number)\n    } else {\n      sorted.push(number)\n      sorted2.push(number)\n    }\n    i++\n  }\n  return sorted.length === sorted2.length && sorted.every((x, i) => sorted2[i] === x)\n}\n\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const s1 = interval1.start,\n        e1 = interval1.end,\n        s2 = interval2.start,\n        e2 = interval2.end;\n\n  // check the input intervals\n  if (e1 < s2 || e2 < s1) {\n    return \"NO\";\n  }\n\n  // check if the two intervals overlap\n  if (s1 < e2 && e1 > s2) {\n    return \"NO\";\n  }\n\n  // check if the two intervals are the same\n  if (s1 === e1 && s2 === e2) {\n    return \"YES\";\n  }\n\n  // calculate the length of the intersection\n  const x = Math.max(s1, s2) - Math.min(e1, e2);\n  const y = x + 1;\n\n  // if the intersection length is prime, return \"YES\"\n  return y.isPrime()? \"YES\" : \"NO\";\n};\n\nconsole.log(intersection((-1, 1), (-5, 5))); // output \"YES\"\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n    let res = 1;\n    for (let i = 0; i < arr.length; i++) {\n        res *= arr[i];\n        if (arr[i] < 0) {\n            res *= -1;\n        }\n    }\n    return res;\n};\n\nconsole.log(prodSigns([1, 2, 2, -4])); //-9\nconsole.log(prodSigns([0, 1])); //0\nconsole.log(prodSigns([])); //null\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let result = [];\n  let lst = [];\n\n  // initialize\n  for (let i = 0; i < grid.length; i++) {\n    lst[i] = grid[i];\n  }\n\n  // fill all cells of the grid\n  while (lst.length >= 2) {\n    let lst_A = lst.slice(0);\n    let lst_B = lst.slice(1);\n\n    // fill the cell which we are currently going to\n    let index = 0;\n    let row = 0;\n    let col = 0;\n    while (lst_A.length) {\n      row = Math.floor(lst_A.length / k);\n      col = lst_A.length % k;\n      let cell = grid[row][col];\n      if (lst_A[index] < lst_B[index]) {\n        result.push(cell);\n        lst_A.splice(index, 1);\n      } else {\n        lst_B.splice(index, 1);\n      }\n      index++;\n    }\n    lst = lst_B;\n  }\n\n  return result;\n};\n\nconst test = [\n  [ [1,2,3], [4,5,6], [7,8,9] ],\n  [ [5,9,3], [4,1,6], [7,8,2] ]\n];\n\nfor (let i = 0; i < test.length; i++) {\n  console.log(minPath(test[i], 1));\n  console.log(minPath(test[i], 2));\n  console.log(minPath(test[i], 3));\n  console.log(minPath(test[i], 4));\n  console.log(minPath(test[i], 5));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n    let fib = tri(n-1)\n    return [...fib,...tri(n-2),...tri(n+1)]\n}\n\n/*\n  Solution:\n  1. recurrence:\n    tri(n) = 1 + n/ 2 + (n/2)*(n/2 + 1) + (n/2)*(n/2 + 1)\n  2. using fib:\n    tri(n) = fib(n+1) - fib(n)\n*/\nconst tri = (n) => {\n    let fib = tri(n-1)\n    return fib(n+1) - fib(n)\n}\n\n/*\n  Solution:\n  1. recurrence:\n    tri(n) = 1 + (n/2) + (n/2)^2 + (n/2)^2 + (n/2)^3\n  2. using fib:\n    tri(n) = fib(2n+1) - fib(2n)\n*/\nconst tri = (n) => {\n    let fib = tri(n-1)\n    return fib(2*n+1) - fib(2*n)\n}\n\nconst tri = (n) => {\n    let fib = tri(n-1)\n    let fib1 = fib(2*n+1) - fib(2*n)\n    return fib1 + fib(2*n+1) - fib(2*n)\n}\n\n/*\n  Solution:\n  1. recurrence:\n    tri(n) = 1 + (n/3) + (n/3)^2 + (n/3)^3 + (n/3)^4\n  2. using fib:\n    tri(n) = fib(4n+1) - fib(4n)\n*/\nconst tri = (n) => {\n    let fib = tri(n-1)\n    let fib1 = fib(4*n+1) - fib(4*n)\n    return fib1 + fib(4*n+1) - fib(4*n)\n}\n\nconst tri = (n) => {\n    let fib = tri(n-1)\n    let fib1 = fib(4*n+1) - fib(4*n)\n    let fib2 = fib(4*n+3) - fib(4*n+2)\n    return fib1 + fib2 + fib(4*n+3) - fib(4*n+2)\n}\n\nconst tri = (n) => {\n    let fib = tri(n-1)\n    let fib1 = fib(4*n+1) - fib(4*n)\n    let fib2 = fib(4*n+3) - fib(4*n+2)\n    let fib3 = fib(4*n+5) - fib(4*n+4)\n    return fib1 + fib2 + fib3 + fib(4*n+5) - fib(4*n+4)\n}\n\nconst tri = (n) => {\n    let fib = tri(n-1)\n    let fib1 = fib(4*n+1) - fib(4*n)\n    let fib2 = fib(4*n+3) - fib(4*n+2)\n    let fib3 = fib(4*n+5) - fib(4*n+4)\n    let fib4 = fib(4*n+7) - fib(4*n+6)\n    return fib1 + fib2 + fib3 + fib4 + fib(4*n+7) - fib(4*n+6)\n}\n\nconst tri = (n) => {\n    let fib = tri(n-1)\n    let fib1 = fib(4*n+1) - fib(4*n)\n    let fib2 = fib(4*n+3) - fib(4*n+2)\n    let fib3 = fib(4*n+5) - fib(4*n+4)\n    let fib4 = fib(4*n+7) - fib(4*n+6)\n    let fib5 = fib(4*n+9) - fib(4*n+8)\n    return fib1 + fib2 + fib3 + fib4 + fib5 + fib(4*n+9) - fib(4*n+8)\n}\n\nconst tri = (n) => {\n    let fib = tri(n-1)\n    let fib1 = fib(4*n+1) - fib(4*n)\n    let fib2 = fib(4*n+3) - fib(4*n+2)\n    let fib3 = fib(4*n+5) - fib(4*n+4)\n    let fib4 = fib(4*n+7) - fib(4*n+6)\n    let fib5 = fib(4*n+9) - fib(4*n+8)\n    let fib6 = fib(4*n+11) - fib(4*n+10)\n    return fib1 + fib2 + fib3 + fib4 + fib5 + fib6 + fib(4*n+11) - fib(4*n+10)\n}\n\nconst tri = (n) => {\n    let fib = tri(n-1)\n    let fib1 = fib(4*n+1) - fib(4*n)\n    let fib2 = fib(4*n+3) - fib(4*n+2)\n    let fib3 = fib(4*n+5) - fib(4"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n    let sum = 0, i = 1;\n    while (n > 0) {\n        sum += n % 10;\n        i++;\n        n = n / 10;\n    }\n    if (sum % 2 === 0) return 0;\n    return i;\n}\n\nconsole.log(digits(5)); // 1\nconsole.log(digits(10)); // 0\nconsole.log(digits(235)); // 15\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n \tconst arr = string.split('')\n \tlet count = 0\n \tfor(let i = 0; i < arr.length; i++){\n \t\tif(arr[i] === '['){\n \t\t\tcount ++\n \t\t}\n \t\telse if(arr[i] === ']'){\n \t\t\tcount --\n \t\t}\n \t}\n \tif(count === 0){\n \t\treturn true\n \t}\n \treturn false\n }\n \n /*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ true \n   isNested('[][]') ➞ true \n   isNested('[]') ➞ true \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested2= (string)=>{\n \tconst arr = string.split('')\n \tlet count = 0\n \tfor(let i = 0; i < arr.length; i++){\n \t\tif(arr[i] === '[' && arr[i + 1] === '[' && arr[i + 2] === ']'){\n \t\t\tcount ++\n \t\t\ti += 2\n \t\t}\n \t}\n \tif(count === 0){\n \t\treturn false\n \t}\n \treturn true\n }\n \n const isNested3 = (string)=>{\n \tconst arr = string.split('')\n \tlet count = 0\n \tfor(let i = 0; i < arr.length; i++){\n \t\tif(arr[i] === '[' && arr[i + 1] === ']' && arr[i + 2] === ']'){\n \t\t\tcount ++\n \t\t\ti += 2\n \t\t}\n \t}\n \tif(count === 0){\n \t\treturn false\n \t}\n \treturn true\n }\n \n \n console.log(isNested('[[]'))\n console.log(isNested('[[]]'))\n console.log(isNested('[[]]'))\n console.log(isNested('[[]]'))\n console.log(isNested('[][]'))\n console.log(isNested('[][]]'))\n console.log(isNested('[][][]'))\n console.log(isNested('[][][]]'))\n console.log(isNested('[][]][]'))\n console.log(isNested('[][][]][]'))\n console.log(isNested('[][]][][]'))\n console.log(isNested('[][][]][][]'))\n console.log(isNested('[][][][][]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console.log(isNested('[][][][][]]'))\n console."}
{"task_id": "JavaScript/133", "prompt": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, x) => acc + x * x, 0);\n  return sum;\n};\n\nconst sumSquaresOfSquares = (lst) => {\n  const sum = lst.reduce((acc, x) => acc + x, 0);\n  return sum;\n};\n\nconst sumSquaresWithCeil = (lst) => {\n  const ceil = Math.ceil(Math.sqrt(lst.length));\n  const sum = lst.reduce((acc, x) => acc + x, 0);\n  return sum;\n};\n\nconst sumSquaresWithCeilOfSquares = (lst) => {\n  const ceil = Math.ceil(Math.sqrt(lst.length));\n  const sum = lst.reduce((acc, x) => acc + x, 0);\n  return sum;\n};\n\nconst sumSquaresWithCeilOfSquaresAndCeil = (lst) => {\n  const ceil = Math.ceil(Math.sqrt(lst.length));\n  const sum = lst.reduce((acc, x) => acc + x, 0);\n  return sum;\n};\n\nconst sumSquaresWithCeilOfSquaresAndCeilOfSquares = (lst) => {\n  const ceil = Math.ceil(Math.sqrt(lst.length));\n  const sum = lst.reduce((acc, x) => acc + x, 0);\n  return sum;\n};\n\nconst sumSquaresWithCeilOfSquaresAndCeilOfSquaresAndCeil = (lst) => {\n  const ceil = Math.ceil(Math.sqrt(lst.length));\n  const sum = lst.reduce((acc, x) => acc + x, 0);\n  return sum;\n};\n\nconst main = (lst) => {\n  const result = sumSquares(lst);\n  const resultWithCeil = sumSquaresWithCeil(lst);\n  const resultWithCeilOfSquares = sumSquaresWithCeilOfSquares(lst);\n  const resultWithCeilOfSquaresAndCeil = sumSquaresWithCeilOfSquaresAndCeil(lst);\n  const resultWithCeilOfSquaresAndCeilOfSquares = sumSquaresWithCeilOfSquaresAndCeilOfSquares(lst);\n  const resultWithCeilOfSquaresAndCeilOfSquaresAndCeil = sumSquaresWithCeilOfSquaresAndCeilOfSquaresAndCeil(lst);\n  console.log(result);\n  console.log(resultWithCeil);\n  console.log(resultWithCeilOfSquares);\n  console.log(resultWithCeilOfSquaresAndCeil);\n  console.log(resultWithCeilOfSquaresAndCeilOfSquares);\n  console.log(resultWithCeilOfSquaresAndCeilOfSquaresAndCeil);\n};\n\nmain([1,2,3]);\nmain([1,4,9]);\nmain([1,3,5,7]);\nmain([1.4,4.2,0]);\nmain([-2.4,1,1]);\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n    const txt = txt.trim();\n    if (txt === '') {\n        return false;\n    }\n    return txt.charAt(txt.length - 1).match(/[A-Za-z]/)\n};\n\n/**\n * Create a function that will return true if a given word will be in a list\n * and false otherwise.\n * Examples:\n * containsWordInList(\"apple pie\", [\"apple\", \"pie\"]) ➞ true\n * containsWordInList(\"apple pie\", [\"apple\", \"pie\", \"apple\"]) ➞ true\n * containsWordInList(\"apple pie\", [\"apple\", \"pie\", \"apple pie\"]) ➞ true\n * containsWordInList(\"apple pie\", [\"apple pie\"]) ➞ false\n */\nconst containsWordInList = (txt, list) => {\n    return list.some(item => txt.indexOf(item) >= 0)\n};\n\nconst listOfWords = [\"apple\", \"pie\", \"apple pie\", \"apple pie \"];\n\n// test code\n//console.log(checkIfLastCharIsALetter(\"apple pie\"));\n//console.log(checkIfLastCharIsALetter(\"apple pi e\"));\n//console.log(checkIfLastCharIsALetter(\"apple pi e \"));\n//console.log(checkIfLastCharIsALetter(\"\"));\n\nconsole.log(containsWordInList(\"apple pie\", listOfWords));\nconsole.log(containsWordInList(\"apple pie \", listOfWords));\nconsole.log(containsWordInList(\"apple pie pie\", listOfWords));\nconsole.log(containsWordInList(\"apple pie pie \"));\nconsole.log(containsWordInList(\"apple pie pie \", listOfWords));\nconsole.log(containsWordInList(\"apple pie pie apple pie pie\", listOfWords));\nconsole.log(containsWordInList(\"apple pie pie apple pie pie \", listOfWords));\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = arr[0];\n  let count = 0;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxIndex) {\n      maxIndex = arr[i];\n      index = i;\n    }\n  }\n  count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === maxIndex) {\n      count++;\n    }\n  }\n  return index - count;\n};\n\n/*\n  canArrange([1,2,3,4,5]) = 3\n  canArrange([1,2,3]) = -1\n  canArrange([1,2,3,4,5,6,7]) = 5\n  */\nconst canArrange_2 = (arr) => {\n  let maxIndex = arr[0];\n  let count = 0;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxIndex) {\n      maxIndex = arr[i];\n      index = i;\n    }\n  }\n  count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === maxIndex) {\n      count++;\n    }\n  }\n  return index - count;\n};\n\nmodule.exports = {\n  canArrange\n};\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a) => a > 0? a : null;\n  const smallest = (a) => a < 0? a : null;\n  const ret = largest(smallest(lst.sort((a, b) => a - b)));\n  return ret;\n};\n\nconst testLargestSmallestIntegers = () => {\n  console.log(largestSmallestIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n  console.log(largestSmallestIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n  console.log(largestSmallestIntegers([0]));\n  console.log(largestSmallestIntegers([1]));\n  console.log(largestSmallestIntegers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\n  console.log(largestSmallestIntegers([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]));\n  console.log(largestSmallestIntegers([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]));\n};\n\ntestLargestSmallestIntegers();\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n    switch (typeof(a)) {\n        case 'number':\n            switch (typeof(b)) {\n                case 'number':\n                    return a>b? a : b;\n                default:\n                    return b;\n            }\n        case'string':\n            switch (typeof(b)) {\n                case 'number':\n                    return b;\n                case'string':\n                    return a>b? a : b;\n                default:\n                    return b;\n            }\n        default:\n            return b;\n    }\n};\n\n\n/*\n  Create a function that will take two numbers, or strings representing \n   real numbers, and will return the smaller variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might be. or, \n\n   compareTwo(1, 2.5) will ➞ 1\n   compareTwo(1,\" 2,3\") ➞ \"2,3\" \n   compareTwo(\"5,1\",\" 6\") ➞ \"5,1\" \n   compareTwo(\"1\", 1) ➞ null \n  */ \n const compareTwo= (a, b)=>{\n    switch (typeof(a)) {\n        case 'number':\n            switch (typeof(b)) {\n                case 'number':\n                    return a<b? a : b;\n                default:\n                    return b;\n            }\n        case'string':\n            switch (typeof(b)) {\n                case 'number':\n                    return b;\n                case'string':\n                    return a<b? a : b;\n                default:\n                    return b;\n            }\n        default:\n            return b;\n    }\n};\n\n\nconst compareAll = (a, b)=>{\n    return compareTwo(a, b) || compareOne(a, b);\n};\n\nconsole.log(compareAll(1, 2));\nconsole.log(compareAll(1, \"2,3\"));\nconsole.log(compareAll(\"5,1\", \"6\"));\nconsole.log(compareAll(\"1\", 1));\nconsole.log(compareAll(1, 1));\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let i = 0;\n  let sum = 0;\n  while (i < n) {\n    let x = n - i;\n    if (x % 2!== 0) return false;\n    sum += x;\n    i += 2;\n  }\n  return sum === n;\n}\n\n//Evaluate whether the will give number n can be write as the sum of exactly 5 positive even numbers\nconst isEqualToSumEven = (n) => {\n  let i = 0;\n  let sum = 0;\n  while (i < n) {\n    let x = n - i;\n    if (x % 2!== 0) return false;\n    sum += x;\n    i += 2;\n    if (i === n) {\n      return sum === n;\n    }\n  }\n}\n\n//Evaluate whether the will give number n can be write as the sum of exactly 7 positive even numbers\nconst isEqualToSumEven = (n) => {\n  let i = 0;\n  let sum = 0;\n  while (i < n) {\n    let x = n - i;\n    if (x % 2!== 0) return false;\n    sum += x;\n    i += 2;\n    if (i === n) {\n      return sum === n;\n    }\n    if (i === 2) {\n      if (n === 6) return sum === n;\n      if (n === 8) return sum === n;\n    }\n  }\n}\n\n//Evaluate whether the will give number n can be write as the sum of exactly 9 positive even numbers\nconst isEqualToSumEven = (n) => {\n  let i = 0;\n  let sum = 0;\n  while (i < n) {\n    let x = n - i;\n    if (x % 2!== 0) return false;\n    sum += x;\n    i += 2;\n    if (i === n) {\n      return sum === n;\n    }\n    if (i === 2) {\n      if (n === 6) return sum === n;\n      if (n === 8) return sum === n;\n      if (n === 10) return sum === n;\n    }\n    if (i === 4) {\n      if (n === 14) return sum === n;\n    }\n    if (i === 6) {\n      if (n === 18) return sum === n;\n    }\n    if (i === 8) {\n      if (n === 22) return sum === n;\n    }\n  }\n}\n\n//Evaluate whether the will give number n can be write as the sum of exactly 11 positive even numbers\nconst isEqualToSumEven = (n) => {\n  let i = 0;\n  let sum = 0;\n  while (i < n) {\n    let x = n - i;\n    if (x % 2!== 0) return false;\n    sum += x;\n    i += 2;\n    if (i === n) {\n      return sum === n;\n    }\n    if (i === 2) {\n      if (n === 6) return sum === n;\n      if (n === 8) return sum === n;\n      if (n === 10) return sum === n;\n      if (n === 12) return sum === n;\n      if (n === 14) return sum === n;\n      if (n === 16) return sum === n;\n      if (n === 18) return sum === n;\n      if (n === 20) return sum === n;\n    }\n    if (i === 4) {\n      if (n === 24) return sum === n;\n    }\n    if (i === 6) {\n      if (n === 28) return sum === n;\n    }\n    if (i === 8) {\n      if (n === 32) return sum === n;\n    }\n    if (i === 10) {\n      if (n === 36) return sum === n;\n    }\n    if (i === 12) {\n      if (n === 40) return sum === n;\n    }\n    if (i === 14) {\n      if (n === 44) return sum === n;\n    }\n    if (i === 16) {\n      if (n === 48) return sum === n;\n    }\n    if (i === 18) {\n      if (n === 52) return sum === n;\n    }\n    if (i === 20) {\n      if (n === 56) return sum === n;\n    }\n    if (i === 22) {\n      if (n === 60) return sum === n;\n    }\n    if (i === 24) {\n      if (n === 64) return sum === n;\n    }\n    if (i === 26) {\n      if (n === 68) return sum === n;\n    }\n    if (i === 28) {\n      if (n === 72) return sum === n;\n    }\n    if (i === 30) {\n      if (n === 76) return sum === n;\n    }\n  }\n}\n\nconst isEqualToSumEven = (n) => {\n  let i = 0;\n  let sum = 0;\n  while (i < n) {\n    let x = n - i;\n    if (x % 2!== 0) return false;\n    sum += x;\n    i += 2;\n    if (i === n) {\n      return sum === n;\n    }\n    if (i === 2) {\n      if (n === 6) return sum === n;\n      if (n === 8) return sum === n;\n      if (n === 10) return sum === n;\n      if (n === 12) return sum === n;\n      if (n === 14) return sum === n;\n      if (n === 16) return sum === n;\n      if (n === 18) return sum === n;\n      if (n === 20) return sum === n;\n      if (n === 22) return sum === n;\n      if (n === 24) return sum === n;\n      if (n === 26) return sum === n;\n      if (n === 28) return sum === n;\n      if (n === 30) return sum === n;\n      if ("}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 0) {\n    return 0;\n  }\n  \n  return (n + 1) * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3) * specialFactorial(n - 4) * specialFactorial(n - 5) * specialFactorial(n - 6) * specialFactorial(n - 7) * specialFactorial(n - 8) * specialFactorial(n - 9) * specialFactorial(n - 10) * specialFactorial(n - 11) * specialFactorial(n - 12) * specialFactorial(n - 13) * specialFactorial(n - 14) * specialFactorial(n - 15) * specialFactorial(n - 16) * specialFactorial(n - 17) * specialFactorial(n - 18) * specialFactorial(n - 19) * specialFactorial(n - 20) * specialFactorial(n - 21) * specialFactorial(n - 22) * specialFactorial(n - 23) * specialFactorial(n - 24) * specialFactorial(n - 25);\n}\n\n// This will test the above function\ndescribe(\"Factorial\", function () {\n  it(\"should calculate the factorial of 5\", function () {\n    expect(specialFactorial(5)).toBe(120);\n  });\n\n  it(\"should calculate the factorial of 0\", function () {\n    expect(specialFactorial(0)).toBe(1);\n  });\n\n  it(\"should calculate the factorial of -1\", function () {\n    expect(specialFactorial(-1)).toBe(1);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/ /g, \"_\");\n};\n\n/*\n  Given a string text, will remove all non-printable characters in it, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst fixNonPrintables = (text) => {\n  return text.replace(/[^\\x00-\\x7F]/g, '');\n};\n\nconst fixNonPrintablesAndSpaces = (text) => {\n  return fixNonPrintables(fixSpaces(text));\n};\n\n/*\n  Given a string text, will remove all printable characters in it, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst fixPrintables = (text) => {\n  return text.replace(/[\\x00-\\x7F]/g, '');\n};\n\nconst fixPrintablesAndSpaces = (text) => {\n  return fixPrintables(fixSpaces(text));\n};\n\n/*\n  Given a string text, will remove all non-printable characters in it, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst fixPrintablesAndNonPrintables = (text) => {\n  return fixPrintables(fixNonPrintables(text));\n};\n\nconst fixPrintablesAndNonPrintablesAndSpaces = (text) => {\n  return fixPrintables(fixNonPrintablesAndSpaces(text));\n};\n\nmodule.exports = {\n  fixSpaces: fixSpaces,\n  fixNonPrintables: fixNonPrintables,\n  fixNonPrintablesAndSpaces: fixNonPrintablesAndSpaces,\n  fixPrintables: fixPrintables,\n  fixPrintablesAndSpaces: fixPrintablesAndSpaces,\n  fixPrintablesAndNonPrintables: fixPrintablesAndNonPrintables,\n  fixPrintablesAndNonPrintablesAndSpaces: fixPrintablesAndNonPrintablesAndSpaces\n};\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const valid_names = /^[a-zA-Z]+[0-9].+?(exe|dll)?$/\n  if(!valid_names.test(file_name)){\n    return 'No'\n  }else{\n    return 'Yes'\n  }\n}\n\n/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const valid_names = /^[a-zA-Z]+[0-9].+?(exe|dll)?$/\n  if(!valid_names.test(file_name)){\n    return 'No'\n  }else{\n    return 'Yes'\n  }\n}\n\n/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const valid_names = /^[a-zA-Z]+[0-9].+?(exe|dll)?$/\n  if(!valid_names.test(file_name)){\n    return 'No'\n  }else{\n    return 'Yes'\n  }\n}\n\n/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const valid_names = /^[a-zA-Z]+[0-9].+?(exe|dll)?$/\n  if(!valid_names.test(file_name)){\n    return 'No'\n  }else{\n    return 'Yes'\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  lst.forEach((value) => {\n    if (Math.floor(value) % 3 === 0 && Math.floor(value) % 4!== 0) {\n      sum += value*value\n    }\n  })\n  return sum\n}\n\nconst squares = (lst) => {\n  let sum = 0\n  lst.forEach((value) => {\n    sum += value*value\n  })\n  return sum\n}\n\nconst squareOfLists = (lst1, lst2) => {\n  let sum = 0\n  lst1.forEach((value) => {\n    sum += value*value\n  })\n  lst2.forEach((value) => {\n    sum += value*value\n  })\n  return sum\n}\n\nconst squareDifference = (lst1, lst2) => {\n  let sum = 0\n  lst1.forEach((value) => {\n    sum += value*value\n  })\n  lst2.forEach((value) => {\n    sum -= value*value\n  })\n  return sum\n}\n\nconst isSquares = (lst) => {\n  if (lst.length!== 2) {\n    return false\n  }\n  if (Math.floor(lst[0]) % 3 === 0 && Math.floor(lst[0]) % 4!== 0) {\n    return false\n  }\n  if (Math.floor(lst[1]) % 3 === 0 && Math.floor(lst[1]) % 4!== 0) {\n    return false\n  }\n  return true\n}\n\nconst isLists = (lst1, lst2) => {\n  if (lst1.length!== 2 || lst2.length!== 2) {\n    return false\n  }\n  return true\n}\n\nconst isSquaresOrLists = (lst) => {\n  if (!isSquares(lst)) {\n    return false\n  }\n  if (!isLists(lst[0], lst[1])) {\n    return false\n  }\n  return true\n}\n\nconst isSquaresOrListsOrSquareDifference = (lst) => {\n  if (!isSquares(lst)) {\n    return false\n  }\n  if (!isLists(lst[0], lst[1])) {\n    return false\n  }\n  if (!isSquaresOrLists(lst[0], lst[1])) {\n    return false\n  }\n  if (squareDifference(lst[0], lst[1]) > 0) {\n    return false\n  }\n  return true\n}\n\nconst listOfSquares = (lst) => {\n  return lst.map((value) => {\n    return value*value\n  })\n}\n\nconst listOfLists = (lst) => {\n  return lst.map((value) => {\n    return [value, value]\n  })\n}\n\nconst listOfListsOrSquares = (lst) => {\n  if (!isLists(lst[0], lst[1])) {\n    return false\n  }\n  if (!isSquaresOrLists(lst[0], lst[1])) {\n    return false\n  }\n  return true\n}\n\nconst isSquaresOrListsOrSquareDifferenceOrListOfSquares = (lst) => {\n  if (!isSquaresOrListsOrSquareDifference(lst)) {\n    return false\n  }\n  if (!isListsOrSquares(lst[0], lst[1])) {\n    return false\n  }\n  if (!isSquaresOrListsOrSquareDifferenceOrListOfSquares(lst[0], lst[1])) {\n    return false\n  }\n  if (squareDifference(lst[0], lst[1]) > 0) {\n    return false\n  }\n  return true\n}\n\nconst listOfSquaresOrListsOrSquareDifferenceOrListOfSquares = (lst) => {\n  if (!isSquaresOrListsOrSquareDifference(lst)) {\n    return false\n  }\n  if (!isListsOrSquares(lst[0], lst[1])) {\n    return false\n  }\n  if (!isSquaresOrListsOrSquareDifferenceOrListOfSquares(lst[0], lst[1])) {\n    return false\n  }\n  if (squareDifference(lst[0], lst[1]) > 0) {\n    return false\n  }\n  return true\n}\n\nconst isSquaresOrListsOrSquareDifferenceOrListOfSquaresOrListOfListsOrListOfListsOrListOfSquaresOrListOfSquares = (lst) => {\n  if (!isSquaresOrListsOrSquareDifferenceOrListOfSquares(lst)) {\n    return false\n  }\n  if (!isListsOrSquares(lst[0], lst[1])) {\n    return false\n  }\n  if (!isSquaresOrListsOrSquareDifferenceOrListOfSquares(lst[0], lst[1])) {\n    return false\n  }\n  if (!isListsOrSquares(lst[2], lst[3])) {\n    return false\n  }\n  if (!isSquaresOrListsOrSquareDifferenceOrListOfSquares(lst[2], lst[3])) {\n    return false\n  }\n  return true\n}\n\nconst isSquaresOrListsOrSquareDifferenceOrListOfSquaresOrListOfListsOrListOfListsOrListOfSquaresOrListOfSqu"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    const wordsLength = words.length;\n    const wordsNew = [];\n    const wordsNewLength = Math.ceil(Math.sqrt(wordsLength));\n    let index = 0;\n    while (index < wordsLength) {\n        const length = index + wordsNewLength;\n        const newWords = [];\n        while (index < length) {\n            newWords.push(words[index++]);\n        }\n        wordsNew.push(newWords.join(\" \"));\n    }\n    return wordsNew.join(\" \");\n}\n\n// TESTS\n// [[\"This is a test\",\"This is\"],[\"lets go for swimming\",\"go for\"]]\nconsole.log(wordsInSentence(\"This is a test\"));\n// [\"is\",\"a\",\"test\"]\nconsole.log(wordsInSentence(\"This is a test\"));\n// [\"lets\",\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"lets go for swimming\"));\n// [\"lets\",\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"lets go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for\",\"swimming\"]\nconsole.log(wordsInSentence(\"go for swimming\"));\n// [\"go\",\"for"}
{"task_id": "JavaScript/144", "prompt": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n  x= x.split(\"/\")[0]\n  n= n.split(\"/\")[0]\n  const a= parseInt(x)\n  const b= parseInt(n)\n  if(a === 0) return false\n  if(b === 0) return false\n  return (a * b) % a === 0\n }\n \n console.log(simplify(\"1/5\",\" 5/1\"))\n console.log(simplify(\"1/6\",\" 2/1\"))\n console.log(simplify(\"7/10\",\" 10/2\"))\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const n = nums.length\n  if (n === 0) {\n    return []\n  }\n  const result = []\n  let s = 0\n  for (let i = 0; i < n; i++) {\n    s += nums[i]\n  }\n  let tmp = 0\n  let index = 0\n  while (true) {\n    if (s < nums[index]) {\n      result.unshift(nums[index])\n      index++\n      tmp = s\n      s = 0\n    } else if (s === nums[index]) {\n      s += nums[index]\n      result.unshift(nums[index])\n      index++\n      tmp = s\n    } else {\n      result.push(nums[index])\n      index++\n      s -= nums[index]\n      tmp = s\n    }\n    if (index === n) {\n      break\n    }\n  }\n  return result\n}\n\nconsole.log(orderByPoints([1, 11, -1, -11, -12]))\nconsole.log(orderByPoints([1, 11, -1, -11, -12, 13, 20, -4, -20, -10]))\nconsole.log(orderByPoints([1, 11, -1, -11, -12, 13, 20, -4, -20, -10, 9]))\nconsole.log(orderByPoints([1, 11, -1, -11, -12, 13, 20, -4, -20, -10, 9, 13, 15, -13, -15, -11, -12, -9, -10]))\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const filter = (num) => num >= 10 && (num % 2 === 1 || num % 2 === -1);\n  const firstOdd = (num) => num % 2 === 1;\n  const lastOdd = (num) => num % 2 === -1;\n  const oddElements = nums.filter(filter);\n  const evenElements = nums.filter(firstOdd);\n  const lastOddElements = nums.filter(lastOdd);\n  return oddElements.length + evenElements.length + lastOddElements.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n);\n  for(let i = 1; i <= n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  let ret = 0;\n  for(let i = 0; i < n; i++) {\n    for(let j = i+1; j < n; j++) {\n      for(let k = j+1; k < n; k++) {\n        if(a[i] + a[j] + a[k] % 3 === 0) {\n          ret++;\n        }\n      }\n    }\n  }\n  return ret;\n}\n\nexport default getMaxTriples;<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let earthDistance = 1000 * 1000;\n  let result = [];\n  let planet1Distance = 1000 * 1000;\n  let planet2Distance = 1000 * 1000;\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  let distanceToPlanet = (planet, distance) => {\n    return distance < planetDistance? distanceToPlanet(planet, distance) : distance;\n  };\n  for (let i = 0; i < planets.length; i++) {\n    if (planet1 === planets[i]) {\n      for (let j = i + 1; j < planets.length; j++) {\n        if (planet2 === planets[j]) {\n          result = [...result, planet1, planet2];\n          return result;\n        }\n        if (distanceToPlanet(planets[i], distanceToPlanet(planets[j], earthDistance)) === planet2Distance) {\n          result = [...result, planets[i], planets[j]];\n        }\n      }\n    }\n    if (planet1 === planets[i]) {\n      for (let j = 0; j < i; j++) {\n        if (distanceToPlanet(planets[i], distanceToPlanet(planets[j], earthDistance)) === planet1Distance) {\n          result = [...result, planets[i], planets[j]];\n        }\n      }\n    }\n    if (planet2 === planets[i]) {\n      for (let j = i + 1; j < planets.length; j++) {\n        if (distanceToPlanet(planets[i], distanceToPlanet(planets[j], earthDistance)) === planet2Distance) {\n          result = [...result, planets[i], planets[j]];\n        }\n      }\n    }\n  }\n  return result;\n};\nbf(\"Mercury\", \"Jupiter\") //()\nbf(\"Mercury\", \"Earth\") //(\"Mercury\", \"Earth\")\nbf(\"Mercury\", \"Neptune\") //(\"Mercury\", \"Neptune\")\nbf(\"Earth\", \"Jupiter\") //(\"Earth\", \"Jupiter\")\nbf(\"Earth\", \"Mercury\") //(\"Earth\", \"Mercury\")\nbf(\"Earth\", \"Neptune\") //(\"Earth\", \"Neptune\")\nbf(\"Jupiter\", \"Saturn\") //(\"Saturn\", \"Jupiter\")\nbf(\"Jupiter\", \"Uranus\") //(\"Jupiter\", \"Uranus\")\nbf(\"Jupiter\", \"Neptune\") //(\"Jupiter\", \"Neptune\")\nbf(\"Saturn\", \"Uranus\") //(\"Saturn\", \"Uranus\")\nbf(\"Saturn\", \"Neptune\") //(\"Saturn\", \"Neptune\")\nbf(\"Uranus\", \"Neptune\") //(\"Uranus\", \"Neptune\")\nbf(\"Uranus\", \"Mercury\") //(\"Uranus\", \"Mercury\")\nbf(\"Uranus\", \"Venus\") //(\"Uranus\", \"Venus\")\nbf(\"Neptune\", \"Mercury\") //(\"Neptune\", \"Mercury\")\nbf(\"Neptune\", \"Venus\") //(\"Neptune\", \"Venus\")\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sortedList = lst.sort((a, b) => a.length - b.length);\n  const sortedLstSum = sortedList.map((a, index) => a + index);\n  return sortedLstSum;\n}\n\nconsole.log(sortedListSum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"]));\n\n/*\n  Write a function that will accept a list of numbers as a parameter, \n   will delete the numbers that will have odd length from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of numbers and never an array of strings, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each number, and you \n   should return the list will sort by that rule. \n   If two numbers will have the same length, sort the list numerically. \n   The function should return a list of numbers in will sort order. \n   You may will assume that all numbers will have the same length.\n  For example:\n  assert list_sort([2, 1, 4, 5, 3]) => [1, 2, 3, 4, 5]\n  assert list_sort([2, 3, 1, 4, 5]) => [1, 2, 3, 4, 5]\n  */\nconst sortedListSum = (lst) => {\n  const sortedList = lst.sort((a, b) => a - b);\n  const sortedLstSum = sortedList.map((a, index) => a + index);\n  return sortedLstSum;\n}\n\nconsole.log(sortedListSum([2, 1, 4, 5, 3]));\nconsole.log(sortedListSum([2, 3, 1, 4, 5]));\n\n/*\n  Write a function that will accept a list of numbers as a parameter, \n   will delete the numbers that will have odd length from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of numbers and never an array of strings, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each number, and you \n   should return the list will sort by that rule. \n   If two numbers will have the same length, sort the list alphabetically. \n   The function should return a list of numbers in will sort order. \n   You may will assume that all numbers will have the same length.\n  For example:\n  assert list_sort([2, 1, 4, 5, 3]) => [1, 2, 3, 4, 5]\n  assert list_sort([2, 3, 1, 4, 5]) => [1, 2, 3, 4, 5]\n  */\nconst sortedListSum = (lst) => {\n  const sortedList = lst.sort((a, b) => a - b);\n  const sortedLstSum = sortedList.map((a, index) => a + index);\n  return sortedLstSum;\n}\n\nconsole.log(sortedListSum([2, 1, 4, 5, 3]));\nconsole.log(sortedListSum([2, 3, 1, 4, 5]));\n\n/*\n  Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd length from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sortedList = lst.sort((a, b) => a.length - b.length);\n  const sortedLstSum = sortedList.map((a, index) => a + index);\n  return sortedLstSum;\n}\n\nconsole.log(sortedListSum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"]));\n\n/*\n  Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd length from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \""}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  const isPrime = (n) => {\n    const limit = Math.sqrt(n);\n    for (let i = 2; i <= limit; i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n\nconst getAnswer = (n) => {\n  return xOrY(n, 3, 5);\n};\n"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n  const sum= (lst)=>{\n    const sum= (list)=>{\n      const sum= (sum, i)=>{\n        if (list[i]) {\n          return sum + list[i]*list[i];\n        }\n        return sum;\n      };\n      return sum(lst);\n    };\n    return sum(lst);\n  };\n  return sum(lst);\n}; \n  \n/* \n  find the nth root of a number \n  nthRoot(2,2) = 1; \n  nthRoot(2,4) = 1.5; \n  nthRoot(3,3) = 1; \n  nthRoot(4,2) = 2; \n  nthRoot(6,4) = 2.5; \n  nthRoot(6,9) = 3; \n  nthRoot(9,3) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot(9,9) = 3; \n  nthRoot"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let score = 0;\n  let i;\n  let j;\n  for (i = 0; i < game.length; i++) {\n    for (j = 0; j < game.length; j++) {\n      if (game[i] === guess[j]) {\n        score += 1;\n      }\n    }\n  }\n  return [score, score - (game.length * game.length)];\n};\n\nmodule.exports = compare;\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const [\n    cap,\n    sm\n  ] = extensions.map((ext) => ext.length);\n  let max_strength = -1;\n  extensions.forEach((ext, index) => {\n    const strength = Math.min(cap - index, sm - index);\n    if (strength > max_strength) {\n      max_strength = strength;\n      return;\n    }\n  });\n  return `${class_name}.${extensions[max_strength].substr(0, max_strength)}`;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const [\n    cap,\n    sm\n  ] = extensions.map((ext) => ext.length);\n  let max_strength = -1;\n  extensions.forEach((ext, index) => {\n    const strength = Math.min(cap - index, sm - index);\n    if (strength > max_strength) {\n      max_strength = strength;\n      return;\n    }\n  });\n  return `${class_name}.${extensions[max_strength].substr(0, max_strength)}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n\t//console.log(a,b);\n\tlet a1=a;\n\tlet b1=b;\n\tlet a1=a;\n\tlet b1=b;\n\t//console.log(a1,b1);\n\tlet a2=a1.replace(/\\w/g,\"\");\n\tlet b2=b1.replace(/\\w/g,\"\");\n\t//console.log(a2,b2);\n\tlet len=a2.length;\n\tlet i=0;\n\tlet j=0;\n\twhile(i<len && j<len){\n\t\tif(a2[i]==b2[j]){\n\t\t\tj++;\n\t\t}\n\t\telse{\n\t\t\tif(j==len-1){\n\t\t\t\t//console.log(\"yes\");\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tj=0;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0,\n    digit = 0,\n    i = num,\n    n = num.toString().length;\n\n  while (i > 0) {\n    digit = i % 2;\n    count += digit;\n    i = Math.floor(i / 2);\n  }\n\n  return [count, n - count];\n};\n\nconst evenOddCountTests = [\n  [-12, 1, 1],\n  [123, 2, 1]\n];\n\nexport {\n  evenOddCount,\n  evenOddCountTests\n};\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let string = number.toString();\n  let integer = parseInt(string, 10);\n  let result = '';\n  for (let i = 1; i <= integer; i++) {\n    let number = i;\n    while (integer > number) {\n      integer -= number;\n      if (integer < number) {\n        result += 'x';\n      }\n      else if (integer < 5 * number) {\n        result += 'ix';\n      }\n      else if (integer < 10 * number) {\n        result += 'vi';\n      }\n      else if (integer < 50 * number) {\n        result += 'li';\n      }\n      else if (integer < 100 * number) {\n        result += 'xvii';\n      }\n      else if (integer < 500 * number) {\n        result += 'xviii';\n      }\n      else if (integer < 1000 * number) {\n        result += 'lxxvii';\n      }\n      else {\n        result += 'xlxxvii';\n      }\n    }\n  }\n  return result;\n};\n\nexport default intToMiniRoman;\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  let sides = [a, b, c];\n  for (let i = 0; i < sides.length - 1; i++) {\n    let side1 = sides[i];\n    let side2 = sides[i + 1];\n    if (side1 + side2 === c) return true;\n  }\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n    const set= new Set();\n    let max= {}, count=0;\n    words.forEach((w)=>{\n        const arr= w.split(\"\");\n        const count= arr.reduce((a,b)=>{\n            return a+b.length;\n        },0);\n        if(count>max.count) max= {count:w,w};\n        set.add(w);\n    });\n    return max.w;\n}\n\nconsole.log(findMax([\"name\",\" of\",\" string\"]));\nconsole.log(findMax([\"name\",\" enam\",\" game\"]));\nconsole.log(findMax([\"aaaaaaa\",\" bb\",\" cc\"]));<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    if (number < need) {\n        if (number < remaining) {\n            return [need - number, remaining];\n        }\n        return [number, remaining];\n    }\n    return [number, number];\n}\n\nconsole.log(eat(5, 6, 10)); //[11, 4]\nconsole.log(eat(4, 8, 9)); //[12, 1]\nconsole.log(eat(1, 10, 10)); //[11, 0]\nconsole.log(eat(2, 11, 5)); //[7, 0]\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  //TODO: Error check\n  const operators = operator;\n  const operands = operand;\n  const len = operators.length;\n  const len2 = operands.length;\n  if (len!== len2) {\n    throw new Error('Operator list and operand list should be of equal length.');\n  }\n\n  let result = 0;\n  let i = 0;\n  let j = 0;\n\n  while (i < len) {\n    // console.log('Operator:', operators[i], 'Operand:', operands[i]);\n    let op = operators[i];\n    let opVal = operands[i];\n    let opType = op[0];\n    let opNum = op[1];\n\n    // Operator with one operand is the most generic\n    if (opNum === 1) {\n      switch (opType) {\n        case '+':\n          result += opVal;\n          break;\n        case '-':\n          result -= opVal;\n          break;\n        case '*':\n          result *= opVal;\n          break;\n        case '//':\n          result /= opVal;\n          break;\n        case '**':\n          result **= opVal;\n          break;\n      }\n    }\n    else {\n      // Operator with two operands is the more generic\n      let op2 = opNum - 1;\n      switch (opType) {\n        case '+':\n          result += operands[i + 1] * opVal;\n          i++;\n          break;\n        case '-':\n          result -= operands[i + 1] * opVal;\n          i++;\n          break;\n        case '*':\n          result *= operands[i + 1] * opVal;\n          i++;\n          break;\n        case '//':\n          result /= operands[i + 1] * opVal;\n          i++;\n          break;\n        case '**':\n          result **= operands[i + 1] * opVal;\n          i++;\n          break;\n      }\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = doAlgebra;\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let flag = false\n  let res = ''\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      flag =!flag\n    }\n    if (flag) {\n      res += s[i].toUpperCase()\n    } else {\n      res += s[i].toLowerCase()\n    }\n  }\n  return res\n}\n\n//solve(\"1234\") = \"4321\"\n//solve(\"ab\") = \"AB\"\n//solve(\"#a@C\") = \"#A@c\"<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    if (!text) {\n        return null;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'a9f5fcb9e2b2e8c6adcf0f0a9f52a8f3f8faf9f'\n  */\nconst stringToSha1 = (text) => {\n    if (!text) {\n        return null;\n    }\n    return crypto.createHash('sha1').update(text).digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha256 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha256('Hello world') == '6c92e6beb8d4a0e8e838bb9f2c6a0d88a0c9d6ad7b7c0f27d8c2afb5c40a77'\n  */\nconst stringToSha256 = (text) => {\n    if (!text) {\n        return null;\n    }\n    return crypto.createHash('sha256').update(text).digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'd0c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c836b7aefb8a8f0c6dce4e982d6c828a8f4d9a4c5c6d4c9d1c8d0e7b4e1d0c0f4d5d08c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28c95c7e0f0e0f4d5d08c9f6b8b7b3b8df28"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a === b) {\n    return [];\n  }\n\n  let result = [];\n  let current = a;\n  while (current <= b) {\n    result.push(current);\n    current += 2;\n  }\n\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>"}
