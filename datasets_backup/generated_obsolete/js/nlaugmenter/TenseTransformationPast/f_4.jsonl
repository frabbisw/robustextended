{"task_id": "JavaScript/0", "prompt": "/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort()\n  const numberLength = sortedNumbers.length\n  for (let i = 0; i < numberLength - 1; i++) {\n    if (Math.abs(sortedNumbers[i + 1] - sortedNumbers[i]) <= threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  Finds the most common number.\n  >>> findMostCommonNumber([1, 2, 2, 3, 4, 4, 5, 5, 6])\n  2\n  >>> findMostCommonNumber([1, 1, 2, 3, 4, 4, 5, 5, 6])\n  5\n  >>> findMostCommonNumber([1, 2, 2, 3, 4, 4, 5, 5, 6])\n  2\n  */\nconst findMostCommonNumber = (numbers) => {\n  const numberSet = new Set(numbers)\n  const numberCount = numberSet.size\n  let commonNumber = 0\n  let maxCount = 0\n  for (let i = 1; i <= numberCount; i++) {\n    if (numberSet.has(i)) {\n      if (maxCount < i) {\n        maxCount = i\n        commonNumber = i\n      }\n    }\n  }\n  return commonNumber\n}\n\n/*\n  Finds the largest number in a list of numbers.\n  >>> findLargestNumber([1, 2, 3, 4, 5])\n  5\n  >>> findLargestNumber([1, 2, 3, 4, 5, 2])\n  5\n  >>> findLargestNumber([1, 2, 3, 4, 5, 6])\n  6\n  >>> findLargestNumber([1, 2, 3, 4, 5, 6, 7])\n  7\n  >>> findLargestNumber([1, 2, 3, 4, 5, 6, 7, 8])\n  8\n  >>> findLargestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  >>> findLargestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  10\n  */\nconst findLargestNumber = (numbers) => {\n  const sortedNumbers = numbers.sort()\n  return sortedNumbers[sortedNumbers.length - 1]\n}\n\n/*\n  Finds the smallest number in a list of numbers.\n  >>> findSmallestNumber([1, 2, 3, 4, 5])\n  1\n  >>> findSmallestNumber([1, 2, 3, 4, 5, 2])\n  1\n  >>> findSmallestNumber([1, 2, 3, 4, 5, 6])\n  1\n  >>> findSmallestNumber([1, 2, 3, 4, 5, 6, 7])\n  1\n  >>> findSmallestNumber([1, 2, 3, 4, 5, 6, 7, 8])\n  1\n  >>> findSmallestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1\n  >>> findSmallestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  1\n  */\nconst findSmallestNumber = (numbers) => {\n  const sortedNumbers = numbers.sort()\n  return sortedNumbers[0]\n}\n\n/*\n  Finds the average number in a list of numbers.\n  >>> findAverageNumber([1, 2, 3, 4, 5])\n  3\n  >>> findAverageNumber([1, 2, 3, 4, 5, 2])\n  3.5\n  >>> findAverageNumber([1, 2, 3, 4, 5, 6])\n  4.0\n  >>> findAverageNumber([1, 2, 3, 4, 5, 6, 7])\n  4.5\n  >>> findAverageNumber([1, 2, 3, 4, 5, 6, 7, 8])\n  5.0\n  >>> findAverageNumber([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  5.5\n  >>> findAverageNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  6.0\n  */\nconst findAverageNumber = (numbers) => {\n  const averageNumber = (numbers.length * Math.floor(numbers.reduce(\n    (sum, number) => sum + number, 0) / numbers.length)\n  )\n  return averageNumber\n}\n\nmodule.exports = {\n  hasCloseElements,\n  findMostCommonNumber,\n  findLargestNumber,\n  findSmallestNumber,\n  findAverageNumber\n}\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n    // Your code here\n};\n\n/*\n  Input:  (abc)\n  Output: abc\n  */\nconst extractFirst = (paren_string) => {\n    // Your code here\n};\n\n/*\n  Input:  ( abc )\n  Output: abc\n  */\nconst extractLast = (paren_string) => {\n    // Your code here\n};\n\n/*\n  Input:  (abc (def) ghi)\n  Output: abc def ghi\n  */\nconst extractMiddle = (paren_string) => {\n    // Your code here\n};\n\n/*\n  Input:  (abc (def) ghi)\n  Output: abc (def) ghi\n  */\nconst extractAll = (paren_string) => {\n    // Your code here\n};\n\n/*\n  Input:  (abc (def) ghi)\n  Output: abc (def) ghi\n  */\nconst removeAll = (paren_string) => {\n    // Your code here\n};\n\n/*\n  Input:  (abc (def) ghi)\n  Output: ghi\n  */\nconst extractNothing = (paren_string) => {\n    // Your code here\n};\n\n/*\n  Input:  (abc (def) ghi)\n  Output: abc (def) ghi\n  */\nconst removeNothing = (paren_string) => {\n    // Your code here\n};\n\n/*\n  Input:  (abc (def) ghi)\n  Output: abc (def) ghi\n  */\nconst splitByWhitespace = (paren_string) => {\n    // Your code here\n};\n\n/*\n  Input:  (abc (def) ghi)\n  Output: abc | def | ghi\n  */\nconst splitByWhitespaceAndRemoveWhitespace = (paren_string) => {\n    // Your code here\n};\n\n/*\n  Input:  (abc (def) ghi)\n  Output: abc | def | ghi\n  */\nconst splitByWhitespaceAndKeepWhitespace = (paren_string) => {\n    // Your code here\n};\n\n/*\n  Input:  (abc (def) ghi)\n  Output: abc(def)ghi\n  */\nconst splitByWhitespaceAndRemoveWhitespaceWithBrackets = (paren_string) => {\n    // Your code here\n};\n\n/*\n  Input:  (abc (def) ghi)\n  Output: abc(def)ghi\n  */\nconst splitByWhitespaceAndKeepWhitespaceWithBrackets = (paren_string) => {\n    // Your code here\n};\n\n/*\n  Input:  (abc (def) ghi)\n  Output: abc(def)ghi\n  */\nconst splitByWhitespaceAndRemoveWhitespaceWithParens = (paren_string) => {\n    // Your code here\n};\n\n/*\n  Input:  (abc (def) ghi)\n  Output: abc(def)ghi\n  */\nconst splitByWhitespaceAndKeepWhitespaceWithParens = (paren_string) => {\n    // Your code here\n};\n\n/*\n  Input:  (abc (def) ghi)\n  Output: abc(def)ghi\n  */\nconst splitByWhitespaceAndRemoveWhitespaceWithParensAndBrackets = (paren_string) => {\n    // Your code here\n};\n\n/*\n  Input:  (abc (def) ghi)\n  Output: abc(def)ghi\n  */\nconst splitByWhitespaceAndKeepWhitespaceWithParensAndBrackets = (paren_string) => {\n    // Your code here\n};\n\n/*\n  Input:  (abc (def) ghi)\n  Output: abc(def)ghi\n  */\nconst splitByWhitespaceAndRemoveWhitespaceWithParensAndBracketsAndQuotes = (paren_string) => {\n    // Your code here\n};\n\n/*\n  Input:  (abc (def) ghi)\n  Output: abc(def)ghi\n  */\nconst splitByWhitespaceAndKeepWhitespaceWithParensAndBracketsAndQuotes = (paren_string) => {\n    // Your code here\n};\n\n/*\n  Input:  (abc (def) ghi)\n  Output: abc(def)ghi\n  */\nconst splitByWhitespaceAndRemoveWhitespaceWithParensAndBracketsAndQuotesAndSpaces = (paren_string) => {\n    // Your code here\n};\n\n/*\n  Input:  (abc (def) ghi)\n  Output: abc(def)ghi\n  */\nconst splitByWhitespaceAndKeepWhitespaceWithParensAndBracketsAndQuotesAndSpaces = (paren_string) => {\n    // Your code here\n};\n\n/*\n  Input:  (abc (def) ghi)\n  Output: abc(def)ghi\n  */\nconst splitByWhitespaceAndRemoveWhitespaceWithParensAndBracketsAndQuotesAndSpacesAndTabs = (paren_string) => {\n    // Your code here\n};\n\n/*\n  Input:  (abc (def) ghi)\n  Output: abc(def)ghi\n  */\nconst splitByWhitespaceAndKeepWhitespaceWithParensAndBracketsAndQuotesAndSpacesAndTabs = (paren_string) => {\n    // Your code here\n};\n\n/*\n  Input:  (abc (def) ghi)\n  Output: abc(def)ghi\n  */\nconst splitByWhitespaceAndRemoveWhitespaceWithParensAndBracketsAndQuotesAndSpacesAndTabsAndNewlines = (paren_string) => {\n    // Your code here\n};\n\n/*\n  Input:  (abc (def) ghi)\n  Output: abc(def)ghi\n  */\nconst splitByWhitespaceAndKeepWhitespaceWithParen"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  var integer = Math.floor(number);\n  var decimal = number - integer;\n  return decimal;\n};\n\n/*\n   Given a list of numbers, find the sum of the numbers in the list.\n   \n   Return the sum of the list of numbers.\n  */\nconst sumNumbers = (numbers) => {\n  var sum = 0;\n  for (var i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n/*\n   Given two lists of numbers, find the sum of the numbers in the first list \n   and the sum of the numbers in the second list.\n   \n   Return the sum of the list of numbers.\n  */\nconst sumLists = (list1, list2) => {\n  var sum = 0;\n  for (var i = 0; i < list1.length; i++) {\n    sum += list1[i];\n  }\n  for (var i = 0; i < list2.length; i++) {\n    sum += list2[i];\n  }\n  return sum;\n};\n\n/*\n   Given a list of numbers, find the difference between the largest number \n   and the smallest number in the list.\n\n   Return the difference between the largest number and the smallest number.\n  */\nconst largestMin = (numbers) => {\n  var max = 0;\n  var min = 0;\n  for (var i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  return max - min;\n};\n\n/*\n   Given a list of numbers, find the largest number in the list.\n\n   Return the largest number in the list.\n  */\nconst largest = (numbers) => {\n  var largest = 0;\n  for (var i = 0; i < numbers.length; i++) {\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return largest;\n};\n\n/*\n   Given a list of numbers, find the smallest number in the list.\n\n   Return the smallest number in the list.\n  */\nconst smallest = (numbers) => {\n  var smallest = 0;\n  for (var i = 0; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n  }\n  return smallest;\n};\n\n/*\n   Given a list of numbers, find the difference between the largest number \n   and the smallest number in the list.\n\n   Return the difference between the largest number and the smallest number.\n  */\nconst minMax = (numbers) => {\n  var max = 0;\n  var min = 0;\n  for (var i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  return max - min;\n};\n\n/*\n   Given a list of numbers, find the largest number in the list.\n\n   Return the largest number in the list.\n  */\nconst mean = (numbers) => {\n  var sum = 0;\n  for (var i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum / numbers.length;\n};\n\n/*\n   Given a list of numbers, find the number of numbers in the list that are \n   less than or equal to some number.\n\n   Return the number of numbers in the list that are less than or equal to \n   some number.\n  */\nconst numberLessThan = (numbers, target) => {\n  var count = 0;\n  for (var i = 0; i < numbers.length; i++) {\n    if (numbers[i] <= target) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n   Given a list of numbers, find the number of numbers in the list that are \n   greater than some number.\n\n   Return the number of numbers in the list that are greater than some number.\n  */\nconst numberGreaterThan = (numbers, target) => {\n  var count = 0;\n  for (var i = 0; i < numbers.length; i++) {\n    if (numbers[i] > target) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n   Given a list of numbers, find the number of numbers in the list that are \n   less than or equal to some number.\n\n   Return the number of numbers in the list that are less than or equal to \n   some number.\n  */\nconst numberLessThanOrEqual = (numbers, target) => {\n  var count = 0;\n  for (var i = 0; i < numbers.length; i++) {\n    if (numbers[i] <= target) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n   Given a list of numbers, find the number of numbers in the list that are \n   greater than some number.\n\n   Return the number of numbers in the list that are greater than some number.\n  */\nconst numberGreaterThanOrEqual = (numbers, target) => {\n  var count = 0;\n  for (var i = 0; i < numbers.length; i++) {\n    if (numbers[i] >= target) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n   Given a list of numbers, find the number of numbers in the list that are \n   less than or equal to some number.\n\n   Return the number of numbers in the list that are less than or equal to \n   some number.\n  */\nconst numberBetween = (numbers, low, high) => {\n  var count = 0;\n  for (var i = 0"}
{"task_id": "JavaScript/3", "prompt": "/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n    let belowZero = false;\n    for(let i = 0; i < operations.length; i++){\n        if(operations[i] < 0){\n            belowZero = true;\n            break;\n        }\n    }\n    return belowZero;\n}\n\nmodule.exports = belowZero;<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const numbersArray = numbers.slice();\n  let mean = numbersArray.reduce((sum, x) => sum + x) / numbers.length;\n  let deviations = numbersArray.map((x) => Math.abs(x - mean));\n  let meanAbsDeviation = numbersArray.reduce((sum, x) => sum + deviations.reduce((a, b) => a + b, 0)) / numbers.length;\n  return meanAbsDeviation;\n};\n\nconst main = () => {\n  const list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n  const list2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\n  console.log(\"The list1 is:\", list1);\n  console.log(\"The list2 is:\", list2);\n\n  const list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\n  const mean1 = meanAbsoluteDeviation(list1);\n  const mean2 = meanAbsoluteDeviation(list2);\n\n  console.log(\"The list mean is:\", mean1);\n  console.log(\"The list mean is:\", mean2);\n\n  return \"The list mean is:\", mean1, \"and the list mean is:\", mean2;\n};\n\nmain();<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers)) {\n    throw new TypeError('`numbers` must be an array');\n  }\n  if (typeof delimeter!== 'number') {\n    throw new TypeError('`delimeter` must be a number');\n  }\n  if (numbers.length === 0) {\n    return [];\n  }\n  let result = [];\n  let i = 0;\n  do {\n    result.push(numbers[i++]);\n    if (i < numbers.length) {\n      result.push(delimeter);\n    }\n  } while (i < numbers.length);\n  return result;\n};\n\nexport { intersperse };\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const stack = []\n  const level = 0\n  const level_stack = []\n  const level_max = []\n  paren_string.split(' ').forEach((item) => {\n    stack.push(item)\n    if (item === '(') {\n      level_stack.push(level)\n      level += 1\n    }\n    if (item === ')') {\n      level_stack.pop()\n      level -= 1\n    }\n  })\n\n  if (level_stack.length === 0) {\n    return []\n  }\n\n  level_max.push(level_stack[level_stack.length - 1])\n  const last_element = stack.pop()\n\n  while (level_stack.length > 0) {\n    const current_level = level_stack[level_stack.length - 1]\n    const last_element_next = stack.pop()\n    if (last_element === '(') {\n      level_stack.push(current_level + 1)\n    }\n    if (last_element === ')') {\n      level_stack.pop()\n    }\n    if (last_element_next === '(') {\n      level_stack.push(current_level + 1)\n    }\n    if (last_element_next === ')') {\n      level_stack.pop()\n    }\n    level_max.push(level_stack[level_stack.length - 1])\n    last_element = last_element_next\n  }\n  return level_max\n}\n\n//----------------------------------------------------------------------------------------------------------------------\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => {\n    return s.includes(substring);\n  });\n}\n\n/*\n  # Filter an input list of strings that contain given string\n  >>> filterBySubstring(['a', 'b', 'c', 'd'], 'a')\n  ['a', 'b']\n  >>> filterBySubstring(['a', 'b', 'c', 'd'], 'e')\n  []\n  >>> filterBySubstring(['a', 'b', 'c', 'd'], 'a')\n  ['a', 'b']\n  >>> filterBySubstring(['a', 'b', 'c', 'd'], 'a')\n  ['a', 'b']\n  */\nconst filterBySubstring2 = (strings, string) => {\n  return strings.filter(s => {\n    return s.includes(string);\n  });\n}\n\n/*\n  # Find the number of unique words in a list of strings\n  >>> countUniqueWords([])\n  0\n  >>> countUniqueWords(['a', 'b', 'c'])\n  1\n  >>> countUniqueWords(['a', 'b', 'c', 'd'])\n  2\n  >>> countUniqueWords(['a', 'b', 'c', 'd', 'e'])\n  3\n  >>> countUniqueWords(['a', 'b', 'c', 'd', 'e'])\n  3\n  */\nconst countUniqueWords = (strings) => {\n  const words = strings.map(s => s.split(' ').filter(w => w.length > 0));\n  return words.reduce((total, word) => {\n    if (word.length === 1) {\n      return total + 1;\n    } else {\n      return total + 1;\n    }\n  }, 0);\n}\n\n/*\n  # Create a list of unique strings\n  >>> createUniqueStrings(['a', 'b', 'c'])\n  ['a', 'b', 'c']\n  >>> createUniqueStrings(['a', 'b', 'c', 'd'])\n  ['a', 'b', 'c', 'd']\n  >>> createUniqueStrings(['a', 'b', 'c', 'd', 'e'])\n  ['a', 'b', 'c', 'd', 'e']\n  >>> createUniqueStrings(['a', 'b', 'c', 'd', 'e'])\n  ['a', 'b', 'c', 'd', 'e']\n  */\nconst createUniqueStrings = (strings) => {\n  const uniqueStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (uniqueStrings.indexOf(strings[i]) === -1) {\n      uniqueStrings.push(strings[i]);\n    }\n  }\n  return uniqueStrings;\n}\n\n/*\n  # Get a list of words in a sentence\n  >>> getWordsInSentence('a b c d e f')\n  ['a', 'b', 'c', 'd', 'e', 'f']\n  >>> getWordsInSentence('a b c d e f')\n  ['a', 'b', 'c', 'd', 'e', 'f']\n  >>> getWordsInSentence('a b c d e f')\n  ['a', 'b', 'c', 'd', 'e', 'f']\n  >>> getWordsInSentence('a b c d e f')\n  ['a', 'b', 'c', 'd', 'e', 'f']\n  */\nconst getWordsInSentence = (sentence) => {\n  return sentence.split(' ').filter(w => w.length > 0);\n}\n\n/*\n  # Get a list of words in a sentence\n  >>> getWordsInSentence('a b c d e f')\n  ['a', 'b', 'c', 'd', 'e', 'f']\n  >>> getWordsInSentence('a b c d e f')\n  ['a', 'b', 'c', 'd', 'e', 'f']\n  >>> getWordsInSentence('a b c d e f')\n  ['a', 'b', 'c', 'd', 'e', 'f']\n  >>> getWordsInSentence('a b c d e f')\n  ['a', 'b', 'c', 'd', 'e', 'f']\n  */\nconst getWordsInSentence2 = (sentence) => {\n  return sentence.split(' ').filter(w => w.length > 0);\n}\n\n/*\n  # Get the frequency of a given word in a sentence\n  >>> getWordFrequency('a b c d e f', 'a b c d e f')\n  4\n  >>> getWordFrequency('a b c d e f', 'a b c d e f')\n  4\n  >>> getWordFrequency('a b c d e f', 'a b c d e f')\n  4\n  >>> getWordFrequency('a b c d e f', 'a b c d e f')\n  4\n  */\nconst getWordFrequency = (sentence, word) => {\n  const words = sentence.split(' ');\n  const index = words.indexOf(word);\n  return words.length - index;\n}\n\n/*\n  # Get the frequency of a given word in a sentence\n  >>> getWordFrequency('a b c d e f', 'a b c d e f')\n  4\n  >>> getWordFrequency('a b c d e f', 'a b c d e f')\n  4\n  >>> getWordFrequency('a b c d e f', 'a b c d e f')\n  4\n  >>> getWordFrequency('a b c d e f', 'a b c d e f')\n  4\n  */\nconst getWordFrequency2 = (sentence, word) => {\n  const words = sentence.split(' ');\n  const index = words.indexOf(word);\n  return words.length - index;\n}\n\n/*\n  # Get the frequency of a given word in a sentence\n  >>> getWordFrequency('a b c d e f', 'a b c d e f')\n"}
{"task_id": "JavaScript/8", "prompt": "/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return { sum, product }\n}\n\n/*\n  Tests\n  */\n\n/*\n  Some tests\n  */\n\n/*\n  sumProduct([1, 2, 3, 4])\n  { sum: 10, product: 24 }\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers.pop()\n  const result = [max]\n  const numbersToRoll = numbers\n  for (let i = 1; i < numbers.length; i++) {\n    const maxInArray = numbersToRoll.find((number) => number > max)\n    if (maxInArray!== undefined) {\n      max = maxInArray\n      result.push(max)\n      numbersToRoll.splice(numbersToRoll.indexOf(maxInArray), 1)\n    }\n  }\n  return result\n}\n\nmodule.exports = rollingMax\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix= makePalindrome(string.slice(1) + string.slice(0,1));\n  return (postfix + string.split('').reverse().join('')).slice(0, postfix.length);\n}\n\n/* Test if supplied string is a palindrome.\n   >>> isPalindrome('')\n   true\n   >>> isPalindrome('cat')\n   false\n   >>> isPalindrome('cata')\n   true\n */\nconst isPalindrome = (string) => {\n  return string== string.split('').reverse().join('');\n}\n\nconst main = (string) => {\n  console.log(makePalindrome(string));\n}\n\nmain('');\nmain('cat');\nmain('cata');\nmain('cataac');\nmain('cataa');\nmain('cata');\nmain('ca');\nmain('a');\nmain('c');\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  return a.split('').reduce((acc, char) => {\n    if (char === '1') {\n      acc += '0';\n    }\n    else if (char === '0') {\n      acc += '1';\n    }\n    else {\n      acc += char;\n    }\n    return acc;\n  }, b.split('').reduce((acc, char) => {\n    if (char === '1') {\n      acc += '0';\n    }\n    else if (char === '0') {\n      acc += '1';\n    }\n    else {\n      acc += char;\n    }\n    return acc;\n  }, ''));\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary AND on these inputs and return result also as a string.\n  >>> stringAnd('010', '110')\n  '00'\n  */\nconst stringAnd = (a, b) => {\n  return a.split('').reduce((acc, char) => {\n    if (char === '1') {\n      acc += '1';\n    }\n    else if (char === '0') {\n      acc += '0';\n    }\n    else {\n      acc += char;\n    }\n    return acc;\n  }, b.split('').reduce((acc, char) => {\n    if (char === '1') {\n      acc += '1';\n    }\n    else if (char === '0') {\n      acc += '0';\n    }\n    else {\n      acc += char;\n    }\n    return acc;\n  }, ''));\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary OR on these inputs and return result also as a string.\n  >>> stringOr('010', '110')\n  '11'\n  */\nconst stringOr = (a, b) => {\n  return a.split('').reduce((acc, char) => {\n    if (char === '1') {\n      acc += '1';\n    }\n    else if (char === '0') {\n      acc += '0';\n    }\n    else {\n      acc += char;\n    }\n    return acc;\n  }, b.split('').reduce((acc, char) => {\n    if (char === '1') {\n      acc += '1';\n    }\n    else if (char === '0') {\n      acc += '0';\n    }\n    else {\n      acc += char;\n    }\n    return acc;\n  }, ''));\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary NOT on these inputs and return result also as a string.\n  >>> stringNot('010')\n  '101'\n  */\nconst stringNot = (a) => {\n  return a.split('').reduce((acc, char) => {\n    if (char === '1') {\n      acc += '0';\n    }\n    else if (char === '0') {\n      acc += '1';\n    }\n    else {\n      acc += char;\n    }\n    return acc;\n  }, '');\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed NOT on these inputs and return result also as a string.\n  >>> stringNot('010')\n  '101'\n  */\nconst stringXorNot = (a, b) => {\n  return stringNot(stringXor(a, b));\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed NOT on these inputs and return result also as a string.\n  >>> stringAnd('010', '110')\n  '00'\n  */\nconst stringAndNot = (a, b) => {\n  return stringNot(stringAnd(a, b));\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed NOT on these inputs and return result also as a string.\n  >>> stringOr('010', '110')\n  '11'\n  */\nconst stringOrNot = (a, b) => {\n  return stringNot(stringOr(a, b));\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed NOT on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '101'\n  */\nconst stringXorNot = (a, b) => {\n  return stringNot(stringXor(a, b));\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed NOT on these inputs and return result also as a string.\n  >>> stringAnd('010', '110')\n  '00'\n  */\nconst stringAndNot = (a, b) => {\n  return stringNot(stringAnd(a, b));\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed NOT on these inputs and return result also as a string.\n  >>> stringOr('010', '110')\n  '11'\n  */\nconst stringOrNot = (a, b) => {\n  return stringNot(stringOr(a, b));\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed NOT on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '101'\n  */\nconst stringXorAndNot = (a, b) => {\n  return stringNot(stringXor(a, b));\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed NOT on these inputs and return result also as a string.\n  >>> stringAnd('010', '110')\n  '00'\n  */\nconst stringAndNot = (a, b) => {\n  return stringNot(stringAnd(a, b));\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed NOT on these inputs and return result"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  const longest = (a, b) => {\n    if (a.length > b.length) {\n      return a;\n    } else if (b.length > a.length) {\n      return b;\n    } else {\n      return a.length > b.length? a : b;\n    }\n  };\n\n  return strings.reduce((a, b) => longest(a, b), null);\n};\n\nexport default longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return Math.abs(a) % Math.abs(b);\n};\n\nconst isValidSudoku = (grid) => {\n  for (let i = 0; i < 9; i += 1) {\n    const row = grid[i];\n    const col = row.slice(0, 9);\n    const block = row.slice(9, 18);\n    const box = row.slice(18, 27);\n    const box_col = box.slice(0, 9);\n    const box_row = box.slice(9, 18);\n    const box_block = box.slice(18, 27);\n\n    if (\n     !row.every((value, row_index) => {\n        if (row_index === 0) {\n          return (\n            col.every((value, col_index) => {\n              if (col_index === 0) {\n                return (\n                  block.every((value, block_index) => {\n                    if (block_index === 0) {\n                      return (\n                        box_col.every((value, box_col_index) => {\n                          if (box_col_index === 0) {\n                            return (\n                              box_row.every((value, box_row_index) => {\n                                if (box_row_index === 0) {\n                                  return (\n                                    box_block.every((value, box_block_index) => {\n                                      if (box_block_index === 0) {\n                                        return value === value;\n                                      }\n                                    })\n                                  )\n                                }\n                              })\n                            )\n                          }\n                        })\n                      )\n                    }\n                  })\n                })\n              )\n            })\n          )\n        }\n      })\n    ) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst generateSolution = (grid) => {\n  const solution = [];\n  for (let i = 0; i < 9; i += 1) {\n    solution.push(grid[i]);\n  }\n  return solution;\n};\n\nconst validateSudoku = (grid) => {\n  const solution = generateSolution(grid);\n  let i;\n  for (i = 0; i < 9; i += 1) {\n    if (grid[i].every((value, index) => {\n      if (solution[index].slice(i, i + 1)!== value) {\n        return false;\n      }\n      return true;\n    })) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isUnique = (grid) => {\n  for (let i = 0; i < 9; i += 1) {\n    for (let j = 0; j < 9; j += 1) {\n      if (grid[i][j] === grid[i][j + 1]) {\n        return false;\n      }\n      if (grid[i + 1][j] === grid[i + 1][j + 1]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nconst solveSudoku = (grid) => {\n  if (isValidSudoku(grid)) {\n    if (isUnique(grid)) {\n      return generateSolution(grid);\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\n\nconst solveSudokuByBruteForce = (grid) => {\n  const grid_copy = deepcopy(grid);\n  const solution = [];\n  let i;\n  for (i = 0; i < 9; i += 1) {\n    const row = grid_copy[i];\n    const col = row.slice(0, 9);\n    const block = row.slice(9, 18);\n    const box = row.slice(18, 27);\n    const box_col = box.slice(0, 9);\n    const box_row = box.slice(9, 18);\n    const box_block = box.slice(18, 27);\n\n    const row_solution = solveRow(row);\n    const col_solution = solveColumn(col);\n    const block_solution = solveBlock(block);\n    const box_col_solution = solveBox(box_col);\n    const box_row_solution = solveBox(box_row);\n    const box_block_solution = solveBox(box_block);\n\n    solution.push(row_solution);\n    solution.push(col_solution);\n    solution.push(block_solution);\n    solution.push(box_col_solution);\n    solution.push(box_row_solution);\n    solution.push(box_block_solution);\n  }\n  return solution;\n};\n\nconst solveRow = (row) => {\n  let solution = [];\n  let i;\n  for (i = 0; i < 9; i += 1) {\n    const value = row[i];\n    if (solution.includes(value)) {\n      return false;\n    }\n    solution.push(value);\n  }\n  return solution;\n};\n\nconst solveColumn = (col) => {\n  let solution = [];\n  let i;\n  for (i = 0; i < 9; i += 1) {\n    const value = col[i];\n    if (solution.includes(value)) {\n      return false;\n    }\n    solution.push(value);\n  }\n  return solution;\n};\n\nconst solveBlock = (block) => {\n  let solution = [];\n  let i;\n  for (i = 0; i < 9; i += 1) {\n    const value = block[i];\n    if (solution.includes(value)) {\n      return false;\n    }\n    solution.push(value);\n  }\n  return solution;\n};\n\nconst solveBox = (box) => {\n  let solution = [];\n  let i;\n  for (i = 0; i < 9; i += 1) {\n    const value = box[i];"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  if (!string || string.length === 0) return [];\n  return string.split('').reduce((res, char) => {\n    if (res.length === 0) res.push(char);\n    if (res.length < string.length) res.push(`${char}${res.join('')}`);\n    return res;\n  }, []);\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'ab', 'ac', 'bc']\n  */\nconst allSuffixes = (string) => {\n  if (!string || string.length === 0) return [];\n  return string.split('').reduce((res, char) => {\n    if (res.length === 0) res.push(char);\n    if (res.length < string.length) res.push(`${res.join('')}${char}`);\n    return res;\n  }, []);\n};\n\n/* Return list of all permutations of the input string\n  >>> allPermutations('abc')\n  [['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\n  */\nconst allPermutations = (string) => {\n  if (!string || string.length === 0) return [];\n  return string.split('').reduce((res, char) => {\n    const charArray = char.split('');\n    if (res.length === 0) res.push([char]);\n    charArray.forEach(substring => {\n      res.push(res.concat(substring));\n      res.push(res.concat(substring.concat(charArray.splice(1).join(''))));\n    });\n    return res;\n  }, []);\n};\n\n/* Return list of all permutations of the input string, but with duplicates\n  >>> allPermutations('abc')\n  [['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\n  */\nconst allPermutationsWithDuplicates = (string) => {\n  if (!string || string.length === 0) return [];\n  return string.split('').reduce((res, char) => {\n    const charArray = char.split('');\n    if (res.length === 0) res.push([char]);\n    charArray.forEach(substring => {\n      res.push(res.concat(substring));\n      res.push(res.concat(substring.concat(charArray.splice(1).join(''))));\n    });\n    return res;\n  }, []);\n};\n\n/* Return list of all permutations of the input string, but with duplicates\n  >>> allPermutationsWithDuplicates('abc')\n  [['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\n  */\nconst allPermutationsWithDuplicates2 = (string) => {\n  if (!string || string.length === 0) return [];\n  return string.split('').reduce((res, char) => {\n    const charArray = char.split('');\n    if (res.length === 0) res.push([char]);\n    charArray.forEach(substring => {\n      res.push(res.concat(substring));\n      res.push(res.concat(substring.concat(charArray.splice(1).join(''))));\n    });\n    return res;\n  }, []);\n};\n\n/* Return list of all permutations of the input string, but with duplicates\n  >>> allPermutationsWithDuplicates2('abc')\n  [['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\n  */\nconst allPermutationsWithDuplicates3 = (string) => {\n  if (!string || string.length === 0) return [];\n  return string.split('').reduce((res, char) => {\n    const charArray = char.split('');\n    if (res.length === 0) res.push([char]);\n    charArray.forEach(substring => {\n      res.push(res.concat(substring));\n      res.push(res.concat(substring.concat(charArray.splice(1).join(''))));\n    });\n    return res;\n  }, []);\n};\n\nexport {allPrefixes, allSuffixes, allPermutations, allPermutationsWithDuplicates, allPermutationsWithDuplicates2, allPermutationsWithDuplicates3};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": false, "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = []\n  let i = 0\n\n  while (i < n) {\n    result.push(i)\n    i += 1\n  }\n\n  return result.join(' ')\n}\n\nmodule.exports = stringSequence\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const map = new Map();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    const key = string.toLowerCase();\n    const value = map.get(key) || 0;\n    map.set(key, value + 1);\n  }\n  return map.size;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n    const string_parts = music_string.split(' ');\n    const music_parts = string_parts.map(function (s) {\n        const note_type = s.charAt(0);\n        const note_length = parseInt(s.slice(1), 10);\n        return note_type + note_length;\n    });\n    const beats = string_parts.map((s) => parseInt(s, 10));\n    const beats_to_beats = beats.reduce((prev, current) => prev + current, 0);\n    return beats_to_beats;\n}\n\nmodule.exports = parseMusic;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n    if (string === null || string === undefined || substring === null || substring === undefined) {\n        return 0;\n    }\n    if (string === '' || substring === '') {\n        return 0;\n    }\n    const sub = substring.split('');\n    const str = string.split('');\n    const len = str.length;\n    let found = 0;\n    for (let i = 0; i < len; i++) {\n        let j = 0;\n        while (j < sub.length && sub[j] === str[i]) {\n            j++;\n        }\n        if (j === sub.length) {\n            found++;\n        }\n    }\n    return found;\n};\n\nexport default howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n    const numberString = numbers.replace(/\\s+/g, '')\n    const numbersArray = numberString.split(' ')\n    return numbersArray.sort((a, b) => {\n        if (a === b) {\n            return 0\n        }\n        if (parseInt(a) < parseInt(b)) {\n            return -1\n        }\n        return 1\n    })\n       .join(' ')\n}\n\n/*\n   Input was a string containing all lowercase letters from 'a 'to 'z '. \n   Returned a string with letters sorted from smallest to largest\n  >>> sortLetters('a b c')\n  'a c b'\n  */\nconst sortLetters = (string) => {\n    const letters = string.toLowerCase()\n    return letters.sort((a, b) => {\n        if (a === b) {\n            return 0\n        }\n        if (a < b) {\n            return -1\n        }\n        return 1\n    })\n       .join(' ')\n}\n\n/*\n   Input was a string containing all uppercase letters from 'A 'to 'Z '. \n   Returned a string with letters sorted from smallest to largest\n  >>> sortLetters('A B C')\n  'A B C'\n  */\nconst sortUppercaseLetters = (string) => {\n    const letters = string.toUpperCase()\n    return letters.sort((a, b) => {\n        if (a === b) {\n            return 0\n        }\n        if (a < b) {\n            return -1\n        }\n        return 1\n    })\n       .join(' ')\n}\n\n/*\n   Input was a string containing all lowercase letters from 'a 'to 'z '. \n   Returned a string with letters sorted from smallest to largest\n  >>> sortUppercaseLetters('a b c')\n  'A B C'\n  */\nconst sortLowercaseLetters = (string) => {\n    const letters = string.toUpperCase()\n    return letters.sort((a, b) => {\n        if (a === b) {\n            return 0\n        }\n        if (a < b) {\n            return -1\n        }\n        return 1\n    })\n       .join(' ')\n}\n\n/*\n   Input was a string of numbers from 'zero 'to 'nine '. \n   Returned a string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortDigits = (string) => {\n    const numbersArray = string.split(' ')\n    return numbersArray.sort((a, b) => {\n        if (a === b) {\n            return 0\n        }\n        if (parseInt(a) < parseInt(b)) {\n            return -1\n        }\n        return 1\n    })\n       .join(' ')\n}\n\n/*\n   Input was a string of digits from '0 'to '9 '. \n   Returned a string with numbers sorted from smallest to largest\n  >>> sortDigits('one 3 five')\n  'one 3 five'\n  */\nconst sortAlphabet = (string) => {\n    const lettersArray = string.split(' ')\n    return lettersArray.sort((a, b) => {\n        if (a === b) {\n            return 0\n        }\n        if (parseInt(a) < parseInt(b)) {\n            return -1\n        }\n        return 1\n    })\n       .join(' ')\n}\n\n/*\n   Input was a string of alphabetic letters from 'a 'to 'z '. \n   Returned a string with letters sorted from smallest to largest\n  >>> sortAlphabet('a b c')\n  'a b c'\n  */\nconst sortLettersAlphabet = (string) => {\n    const lettersArray = string.split(' ')\n    return lettersArray.sort((a, b) => {\n        if (a === b) {\n            return 0\n        }\n        if (a < b) {\n            return -1\n        }\n        return 1\n    })\n       .join(' ')\n}\n\n/*\n   Input was a string of numbers from 'zero 'to 'nine '. \n   Returned a string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortLettersAlphabetNumbers = (string) => {\n    const lettersArray = string.split(' ')\n    return lettersArray.sort((a, b) => {\n        if (a === b) {\n            return 0\n        }\n        if (parseInt(a) < parseInt(b)) {\n            return -1\n        }\n        return 1\n    })\n       .join(' ')\n}\n\n/*\n   Input was a string of digits from '0 'to '9 '. \n   Returned a string with numbers sorted from smallest to largest\n  >>> sortDigits('one 3 five')\n  'one 3 five'\n  */\nconst sortAlphabetNumbers = (string) => {\n    const numbersArray = string.split(' ')\n    return numbersArray.sort((a, b) => {\n        if (a === b) {\n            return 0\n        }\n        if (parseInt(a) < parseInt(b)) {\n            return -1\n        }\n        return 1\n    })\n       .join(' ')\n}\n\nmodule.exports = {\n    sortNumbers,\n    sortLetters,\n    sortUppercaseLetters,\n    sortLowercaseLetters,\n    sortDigits,\n    sortAlphabet,\n    sortLettersAlphabet,\n    sortAlphabetNumbers,\n    sortLettersAlphabetNumbers\n}<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const a = numbers[0];\n  const b = numbers[1];\n  const c = a;\n  const d = b;\n  const diff = [a - b, b - a];\n  for (let i = 2; i < numbers.length; i++) {\n    const c = numbers[i];\n    const diff = [a - c, b - c];\n    const min = [Math.min(diff[0], diff[1]), Math.min(diff[0], diff[1])];\n    if (min[0] > 0 || min[1] > 0) {\n      return [c, b];\n    }\n    if (min[0] < 0 || min[1] < 0) {\n      return [a, c];\n    }\n  }\n  return [a, b];\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const largest = Math.max(...numbers)\n  const smallest = Math.min(...numbers)\n  if (largest - smallest === 0) {\n    return numbers\n  }\n  return numbers.map(number => number / largest)\n}\n\nmodule.exports = rescaleToUnit\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object' && typeof v.length === 'number');\n};\n\nexport default {\n  filterIntegers,\n  filterStrings,\n  filterObjects,\n  filterLists\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (!string) {\n    return 0\n  }\n  const str = string.replace(/^\\s+|\\s+$/g, '')\n  if (str.length === 0) {\n    return 0\n  }\n  return str.length\n}\n\n// Return length of given array\nconst array_strlen = (array) => {\n  if (!array) {\n    return 0\n  }\n  return array.reduce((prev, curr) => prev + strlen(curr), 0)\n}\n\n// Return length of given object\nconst object_strlen = (object) => {\n  if (!object) {\n    return 0\n  }\n  const str = Object.keys(object).map(key => {\n    return [key, strlen(object[key])].join(' ')\n  }).join(' ')\n  return str.length\n}\n\n// Return a hash of a string\nconst hash = (string) => {\n  if (!string) {\n    return ''\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(string)\n  return md5.digest('hex')\n}\n\nconst hash_array = (array) => {\n  if (!array) {\n    return []\n  }\n  const array_hash = []\n  array.forEach((item) => {\n    array_hash.push(hash(item))\n  })\n  return array_hash\n}\n\nconst hash_object = (object) => {\n  if (!object) {\n    return {}\n  }\n  const object_hash = {}\n  Object.keys(object).forEach((key) => {\n    object_hash[key] = hash(object[key])\n  })\n  return object_hash\n}\n\n// Return a random string\nconst random_string = (length) => {\n  if (!length) {\n    return ''\n  }\n  const random = crypto.randomBytes(length).toString('hex')\n  return random\n}\n\nconst array_random_string = (array) => {\n  if (!array) {\n    return []\n  }\n  const array_random = []\n  array.forEach((item) => {\n    array_random.push(random_string(strlen(item)))\n  })\n  return array_random\n}\n\nconst object_random_string = (object) => {\n  if (!object) {\n    return {}\n  }\n  const object_random = {}\n  Object.keys(object).forEach((key) => {\n    object_random[key] = random_string(strlen(object[key]))\n  })\n  return object_random\n}\n\n// Return a random string of a given length\nconst random_string = (length) => {\n  if (!length) {\n    return ''\n  }\n  const random = crypto.randomBytes(length)\n  return random.toString('hex')\n}\n\n// Return a random integer\nconst random_int = () => {\n  return crypto.randomInt(0, 1e16)\n}\n\n// Return a random boolean\nconst random_boolean = () => {\n  return crypto.randomBytes(1).readInt8(0) === 1\n}\n\n// Return a random number\nconst random_number = () => {\n  return crypto.randomBytes(1).readInt8(0)\n}\n\n// Return a random string of a given length\nconst random_string = (length) => {\n  if (!length) {\n    return ''\n  }\n  const random = crypto.randomBytes(length)\n  return random.toString('hex')\n}\n\n// Return a random array\nconst random_array = (length) => {\n  if (!length) {\n    return []\n  }\n  const array = []\n  for (let i = 0; i < length; i++) {\n    array.push(random_string(strlen(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random_string(random"}
{"task_id": "JavaScript/24", "prompt": "/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let count = 0,\n      largest = 1;\n  while (count < n) {\n    const remainder = n % largest;\n    if (!remainder) {\n      count += 1;\n      largest = largest + 1;\n    }\n  }\n  return largest;\n};\n\n/*\n  Find the smallest number that is greater than and evenly divisible by N.\n  >>> smallestNumber(15)\n  20\n  */\nconst smallestNumber = (n) => {\n  let count = 0,\n      smallest = n + 1;\n  while (count < n) {\n    const remainder = n % smallest;\n    if (!remainder) {\n      count += 1;\n      smallest = smallest + 1;\n    }\n  }\n  return smallest;\n};\n\nexport {\n  largestDivisor,\n  smallestNumber\n};\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const factorsArr = []\n  const factorsArr2 = []\n  const numFactors = []\n  let numFactorsArr = []\n  let numFactorsArr2 = []\n  let currentFactor = 1\n  let currentFactor2 = 1\n  let currentPrimeFactor = 2\n  let primeFactor = 2\n  let isPrime = false\n\n  while (n > 1) {\n    if (n % primeFactor === 0) {\n      factors.push(primeFactor)\n      numFactors.push(currentFactor)\n      numFactorsArr.push(currentFactor)\n      numFactorsArr2.push(currentFactor2)\n      if (primeFactor === currentPrimeFactor) {\n        currentFactor2 = currentFactor\n      } else {\n        currentFactor2 = primeFactor\n      }\n    } else {\n      primeFactor += 1\n      isPrime = true\n      currentPrimeFactor = primeFactor\n      currentFactor = 1\n      currentFactor2 = 1\n    }\n    n = n / primeFactor\n  }\n\n  if (isPrime) {\n    factors.push(currentPrimeFactor)\n    numFactors.push(currentFactor)\n    numFactorsArr.push(currentFactor)\n    numFactorsArr2.push(currentFactor2)\n  }\n\n  factorsArr.push(...numFactorsArr)\n  factorsArr2.push(...numFactorsArr2)\n  return [...factors,...factorsArr,...factorsArr2]\n}\n\nconsole.log(factorize(24))\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      result.push(numbers[i]);\n      seen[numbers[i]] = true;\n    }\n  }\n  return result;\n};\n\nexport {removeDuplicates};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/([a-z])/g, (match, g) => {\n    return g.toUpperCase()\n  })\n}\n\n// Return the string with the first letter in upper case\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\nconst isAlpha = (string) => {\n  return string.match(/^[a-z]{3,}$/)\n}\n\nconst isAlphaNumeric = (string) => {\n  return string.match(/^[a-z0-9]{3,}$/)\n}\n\nconst isAlphaNumericSpace = (string) => {\n  return string.match(/^[a-z0-9 ]{3,}$/)\n}\n\nconst isAlphaNumericWithSpace = (string) => {\n  return string.match(/^[a-z0-9 ]{3,}$/)\n}\n\nconst isNumeric = (string) => {\n  return string.match(/^[0-9]{3,}$/)\n}\n\nconst isNumber = (string) => {\n  return string.match(/^[0-9]{3,}$/)\n}\n\nconst isNumberWithSpace = (string) => {\n  return string.match(/^[0-9 ]{3,}$/)\n}\n\nconst isNumberAlphaNumericSpace = (string) => {\n  return string.match(/^[0-9a-z ]{3,}$/)\n}\n\nconst isNumberAlphaNumericWithSpace = (string) => {\n  return string.match(/^[0-9a-z ]{3,}$/)\n}\n\nconst isNumberAlphaNumeric = (string) => {\n  return string.match(/^[0-9a-z ]{3,}$/)\n}\n\nconst isAlphaNumeric = (string) => {\n  return string.match(/^[a-z0-9 ]{3,}$/)\n}\n\nconst isAlphaNumericSpace = (string) => {\n  return string.match(/^[a-z0-9 ]{3,}$/)\n}\n\nconst isAlphaNumericWithSpace = (string) => {\n  return string.match(/^[a-z0-9 ]{3,}$/)\n}\n\nconst isAlphaNumeric = (string) => {\n  return string.match(/^[a-z0-9 ]{3,}$/)\n}\n\nconst isSpace = (string) => {\n  return string.match(/^[ ]{3,}$/)\n}\n\nconst isAlphaSpace = (string) => {\n  return string.match(/^[a-z ]{3,}$/)\n}\n\nconst isAlphaNumericSpace = (string) => {\n  return string.match(/^[a-z0-9 ]{3,}$/)\n}\n\nconst isAlphaNumericWithSpace = (string) => {\n  return string.match(/^[a-z0-9 ]{3,}$/)\n}\n\nconst isAlphaNumeric = (string) => {\n  return string.match(/^[a-z0-9 ]{3,}$/)\n}\n\nconst isAlpha = (string) => {\n  return string.match(/^[a-z]{3,}$/)\n}\n\nconst isNumericSpace = (string) => {\n  return string.match(/^[0-9 ]{3,}$/)\n}\n\nconst isNumericAlphaSpace = (string) => {\n  return string.match(/^[0-9a-z ]{3,}$/)\n}\n\nconst isNumericAlphaNumericSpace = (string) => {\n  return string.match(/^[0-9a-z ]{3,}$/)\n}\n\nconst isNumericAlphaNumericWithSpace = (string) => {\n  return string.match(/^[0-9a-z ]{3,}$/)\n}\n\nconst isNumericAlphaNumeric = (string) => {\n  return string.match(/^[0-9a-z ]{3,}$/)\n}\n\nconst isNumeric = (string) => {\n  return string.match(/^[0-9]{3,}$/)\n}\n\nconst isHexadecimal = (string) => {\n  return string.match(/^[0-9a-f]{3,}$/)\n}\n\nconst isHexadecimalSpace = (string) => {\n  return string.match(/^[0-9a-f ]{3,}$/)\n}\n\nconst isHexadecimalWithSpace = (string) => {\n  return string.match(/^[0-9a-f ]{3,}$/)\n}\n\nconst isHexadecimal = (string) => {\n  return string.match(/^[0-9a-f ]{3,}$/)\n}\n\nconst isHexadecimalNumericSpace = (string) => {\n  return string.match(/^[0-9a-f ]{3,}$/)\n}\n\nconst isHexadecimalNumericWithSpace = (string) => {\n  return string.match(/^[0-9a-f ]{3,}$/)\n}\n\nconst isHexadecimalNumeric = (string) => {\n  return string.match(/^[0-9a-f ]{3,}$/)\n}\n\nconst isDecimal = (string) => {\n  return string.match(/^[0-9]{3,}$/)\n}\n\nconst isDecimalSpace = (string) => {\n  return string.match(/^[0-9 ]{3,}$/)\n}\n\nconst isDecimalWithSpace = (string) => {\n  return string.match(/^[0-9 ]{3,}$/)\n}\n\nconst isDecimal = (string) => {\n  return string.match(/^[0-9 ]{3,}$/)\n"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((a, b) => a + b, '');\n};\n\n/**\n  * Counts the number of occurrences of a character in a string\n  * @param {string} s The string to check\n  * @param {string} c The character to check\n  * @returns {number} The number of occurrences of character c in string s\n  */\nconst count = (s, c) => {\n  return (s.split(c).length - 1);\n};\n\n/**\n  * Returns the number of characters in a string\n  * @param {string} s The string to count characters in\n  * @returns {number} The number of characters in string s\n  */\nconst length = (s) => {\n  return s.length;\n};\n\n/**\n  * Returns the character at the given index in a string\n  * @param {string} s The string to get character at the given index\n  * @param {number} index The index of the character to get\n  * @returns {string} The character at the given index\n  */\nconst charAt = (s, index) => {\n  return s.substring(index, index + 1);\n};\n\n/**\n  * Returns the index of the first character in a string\n  * @param {string} s The string to search for the first character\n  * @returns {number} The index of the first character in string s\n  */\nconst indexOf = (s) => {\n  let index = -1;\n  while (index < 0 && index < s.length) {\n    index = s.indexOf(s[index]);\n  }\n  return index;\n};\n\n/**\n  * Returns the index of the last character in a string\n  * @param {string} s The string to search for the last character\n  * @returns {number} The index of the last character in string s\n  */\nconst lastIndexOf = (s) => {\n  let index = -1;\n  while (index < 0 && index < s.length) {\n    index = s.lastIndexOf(s[index]);\n  }\n  return index;\n};\n\n/**\n  * Splits a string into an array of strings\n  * @param {string} s The string to split\n  * @param {string} c The character to split on\n  * @returns {array} An array of the split strings\n  */\nconst split = (s, c) => {\n  return s.split(c);\n};\n\n/**\n  * Joins an array of strings into a single string\n  * @param {array} strings The array of strings to join\n  * @returns {string} A single string made from the array of strings\n  */\nconst join = (strings) => {\n  return strings.join('');\n};\n\n/**\n  * Returns the length of the longest string in an array\n  * @param {array} strings The array of strings to count the length of\n  * @returns {number} The length of the longest string in array\n  */\nconst maxLength = (strings) => {\n  return Math.max.apply(Math, strings.map(length));\n};\n\n/**\n  * Returns the length of the shortest string in an array\n  * @param {array} strings The array of strings to count the length of\n  * @returns {number} The length of the shortest string in array\n  */\nconst minLength = (strings) => {\n  return Math.min.apply(Math, strings.map(length));\n};\n\n/**\n  * Returns the string at the given index in an array\n  * @param {array} strings The array of strings to get the string at the given index\n  * @param {number} index The index of the string to get\n  * @returns {string} The string at the given index\n  */\nconst stringAt = (strings, index) => {\n  return strings[index];\n};\n\n/**\n  * Returns the index of the first string in an array\n  * @param {array} strings The array of strings to search for the first string\n  * @returns {number} The index of the first string in array\n  */\nconst indexOfFirst = (strings) => {\n  let index = -1;\n  while (index < 0 && index < strings.length) {\n    index = strings.indexOf(strings[index]);\n  }\n  return index;\n};\n\n/**\n  * Returns the index of the last string in an array\n  * @param {array} strings The array of strings to search for the last string\n  * @returns {number} The index of the last string in array\n  */\nconst indexOfLast = (strings) => {\n  let index = -1;\n  while (index < 0 && index < strings.length) {\n    index = strings.lastIndexOf(strings[index]);\n  }\n  return index;\n};\n\n/**\n  * Removes a string from an array\n  * @param {array} strings The array of strings to remove the string from\n  * @param {string} s The string to remove\n  * @returns {array} The array with the string removed\n  */\nconst remove = (strings, s) => {\n  return strings.filter((a) => a!== s);\n};\n\n/**\n  * Returns an array with the given values\n  * @param {any} values The values to create an array with\n  * @returns {array} The array with the given values\n  */\nconst array = (values) => {\n  return values;\n};\n\n/**\n  * Returns an array with the given values as the first element\n  * @param {any} values The values to create an array with\n  * @returns {array} The array with the given values as the first element\n  */\nconst arrayFirst = (values) => {\n  return [values].concat(array(values));\n};\n\n/**\n  * Returns an array with the given values as the last element\n  * @param {any} values The values to create an array with\n  * @returns {array} The array with the given values as the last element\n  */\nconst arrayLast = (values) => {\n  return array(values).concat([values]);\n};\n\nmodule.exports = {\n  concatenate,\n  count,\n  length,\n  charAt,\n  "}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter((string) => {\n    return string.substring(0, 1) === prefix;\n  });\n};\n\nexport default filterByPrefix;\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0)\n}\n\nexport default getPositive\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  const i = n | 1;\n  const j = n;\n  while (i < j) {\n    const test = j - 1;\n    const result = n & (i / n);\n    if (result === 0) {\n      return false;\n    }\n    j = i;\n    i = test;\n  }\n  return true;\n};\n\n/* Return the number of possible combinations of k numbers from a set of\n  numbers.  We can choose any number from 1-n and any number from the set\n  1-n.  We can choose any number from 1-n with a number from the set 1-n\n  with an odd number in the set.  This is because we can choose a number\n  from 1-n with an even number from 1-n and then we can choose a number\n  from 1-n with a number from the set 1-n with an odd number in the set.\n  To get a number with an even number in the set, we can choose a number\n  from 1-n with an odd number from 1-n.\n  >>> combinations(3, 2)\n  3\n  >>> combinations(3, 1)\n  1\n  >>> combinations(3, 3)\n  3\n  >>> combinations(3, 2)\n  1\n  >>> combinations(3, 3)\n  3\n  >>> combinations(3, 4)\n  9\n  >>> combinations(3, 3)\n  1\n  >>> combinations(2, 1)\n  1\n  >>> combinations(2, 2)\n  1\n  >>> combinations(3, 3)\n  3\n  >>> combinations(3, 2)\n  1\n  >>> combinations(3, 1)\n  1\n  >>> combinations(1, 1)\n  1\n  >>> combinations(1, 2)\n  1\n  >>> combinations(3, 2)\n  1\n  >>> combinations(3, 1)\n  1\n  >>> combinations(2, 1)\n  1\n  */\nconst combinations = (n, k) => {\n  let i = 1;\n  while (i <= n) {\n    if (k === 0) {\n      return i;\n    }\n    k--;\n    i *= (n - k + 1);\n  }\n};\n\n/* Given a number n, return the number of the first prime number in the\n  list that is greater than n.\n  >>> nextPrime(4)\n  5\n  >>> nextPrime(4)\n  7\n  >>> nextPrime(7)\n  11\n  >>> nextPrime(11)\n  13\n  >>> nextPrime(13)\n  17\n  >>> nextPrime(17)\n  19\n  >>> nextPrime(19)\n  21\n  >>> nextPrime(21)\n  23\n  >>> nextPrime(23)\n  29\n  >>> nextPrime(29)\n  31\n  >>> nextPrime(31)\n  33\n  >>> nextPrime(33)\n  37\n  >>> nextPrime(37)\n  39\n  >>> nextPrime(39)\n  41\n  >>> nextPrime(41)\n  43\n  >>> nextPrime(43)\n  47\n  >>> nextPrime(47)\n  49\n  >>> nextPrime(49)\n  51\n  >>> nextPrime(51)\n  53\n  >>> nextPrime(53)\n  59\n  >>> nextPrime(59)\n  61\n  >>> nextPrime(61)\n  67\n  >>> nextPrime(67)\n  71\n  >>> nextPrime(71)\n  73\n  >>> nextPrime(73)\n  79\n  >>> nextPrime(79)\n  83\n  >>> nextPrime(83)\n  87\n  >>> nextPrime(87)\n  89\n  >>> nextPrime(89)\n  97\n  >>> nextPrime(97)\n  99\n  >>> nextPrime(99)\n  101\n  >>> nextPrime(101)\n  103\n  >>> nextPrime(103)\n  107\n  >>> nextPrime(107)\n  109\n  >>> nextPrime(109)\n  113\n  >>> nextPrime(113)\n  127\n  >>> nextPrime(127)\n  129\n  >>> nextPrime(129)\n  131\n  >>> nextPrime(131)\n  137\n  >>> nextPrime(137)\n  139\n  >>> nextPrime(139)\n  149\n  >>> nextPrime(149)\n  151\n  >>> nextPrime(151)\n  157\n  >>> nextPrime(157)\n  163\n  >>> nextPrime(163)\n  167\n  >>> nextPrime(167)\n  173\n  >>> nextPrime(173)\n  179\n  >>> nextPrime(179)\n  181\n  >>> nextPrime(181)\n  191\n  >>> nextPrime(191)\n  193\n  >>> nextPrime(193)\n  197\n  >>> nextPrime(197)\n  199\n  >>> nextPrime(199)\n  211\n  >>> nextPrime(211)\n  223\n  >>> nextPrime(223)\n  227\n  >>> nextPrime(227)\n  229\n  >>> nextPrime(229)\n  233\n  >>> nextPrime(233)\n  239\n  >>> nextPrime(239)\n  241\n  >>> nextPrime(241)\n  251\n  >>> nextPrime(251)\n  257\n  >>> nextPrime(257)\n  259\n  >>> nextPrime(259)\n  271\n  >>> nextPrime(271)\n  277\n  >>> nextPrime(277)\n  281\n  >>> nextPrime(281)\n  283\n  >>> nextPrime(283)\n  293\n  >>> nextPrime(293)\n  307\n  >>> nextPrime(307)\n  311\n  >>> nextPrime(311)\n  313\n  >>> nextPrime(313)\n  317\n  >>> nextPrime(317)\n  331\n  >>> nextPrime(331)\n  337\n  >>> nextPrime(337)\n  343\n  >>> nextPrime(343)\n  347\n  >>> nextPrime(347)\n  349\n  >>> nextPrime(349)\n  353\n  >>> nextPrime(353)\n  359\n  >>> nextPrime(359)\n  367\n  >>> nextPrime(367)\n  373\n  >>> nextPrime(373"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const [max, min] = findMinMax(xs);\n  const x = max - (max - min) / 2;\n  const f = poly(x, x);\n  while (f!== 0) {\n    x -= f / poly(x, x);\n    f = poly(x, x);\n  }\n  return x;\n}\n\nconst findMinMax = (xs) => {\n  const max = xs[0];\n  const min = xs[0];\n  for (let i = 1; i < xs.length; i++) {\n    if (xs[i] > max) {\n      max = xs[i];\n    } else if (xs[i] < min) {\n      min = xs[i];\n    }\n  }\n  return [min, max];\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMinMax = (xs) => {\n  const max = xs[0];\n  const min = xs[0];\n  for (let i = 1; i < xs.length; i++) {\n    if (xs[i] > max) {\n      max = xs[i];\n    } else if (xs[i] < min) {\n      min = xs[i];\n    }\n  }\n  return [min, max];\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMinMax = (xs) => {\n  const max = xs[0];\n  const min = xs[0];\n  for (let i = 1; i < xs.length; i++) {\n    if (xs[i] > max) {\n      max = xs[i];\n    } else if (xs[i] < min) {\n      min = xs[i];\n    }\n  }\n  return [min, max];\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2"}
{"task_id": "JavaScript/33", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    let l2 = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 3 === 0) {\n            l2.push(l[i]);\n        }\n    }\n    let l3 = [];\n    for (let i = 0; i < l2.length; i++) {\n        l3.push(l[l2[i]]);\n    }\n    return l3;\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by five, while its values at the indicies that was divisible by five were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFive([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFive = (l) => {\n    let l2 = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 5 === 0) {\n            l2.push(l[i]);\n        }\n    }\n    let l3 = [];\n    for (let i = 0; i < l2.length; i++) {\n        l3.push(l[l2[i]]);\n    }\n    return l3;\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by five, while its values at the indicies that was divisible by five were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFifth = (l) => {\n    let l2 = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 5 === 0) {\n            l2.push(l[i]);\n        }\n    }\n    let l3 = [];\n    for (let i = 0; i < l2.length; i++) {\n        l3.push(l[l2[i]]);\n    }\n    return l3;\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by two, while its values at the indicies that was divisible by two were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwo([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwo = (l) => {\n    let l2 = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 === 0) {\n            l2.push(l[i]);\n        }\n    }\n    let l3 = [];\n    for (let i = 0; i < l2.length; i++) {\n        l3.push(l[l2[i]]);\n    }\n    return l3;\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by two, while its values at the indicies that was divisible by two were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwo([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSixth = (l) => {\n    let l2 = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 6 === 0) {\n            l2.push(l[i]);\n        }\n    }\n    let l3 = [];\n    for (let i = 0; i < l2.length; i++) {\n        l3.push(l[l2[i]]);\n    }\n    return l3;\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by two, while its values at the indicies that was divisible by two were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwo([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSeventh = (l) => {\n    let l2 = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 7 === 0) {\n            l2.push(l[i]);\n        }\n    }\n    let l3 = [];\n    for (let i = 0; i < l2.length; i++) {\n        l3.push(l[l2[i]]);\n    }\n    return l3;\n}\n\nmodule.exports = {\n    sortThird,\n    sortFive,\n    sortSixth,\n    sortSeventh\n}<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let uniqueArray = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueArray.indexOf(l[i]) === -1) {\n      uniqueArray.push(l[i]);\n    }\n  }\n  return uniqueArray;\n};\n\n// ########################\n// ## Exporting functions ##\n// ########################\n\n// export the functions to be imported\nexport {\n  add,\n  sum,\n  concat,\n  unique\n};\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    return null;\n  }\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given two lists, return the intersection.\n  >>> intersection([1, 2, 3, 4, 5], [2, 3, 4, 5])\n  [2, 3, 4]\n  >>> intersection([1, 2, 3, 4, 5], [2, 3, 4])\n  [2, 3, 4]\n  >>> intersection([1, 2, 3, 4, 5], [2, 3, 4, 5, 6])\n  []\n  >>> intersection([1, 2, 3, 4, 5], [])\n  []\n  >>> intersection([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7])\n  []\n  */\nconst intersection = (l1, l2) => {\n  if (l1.length === 0 || l2.length === 0) {\n    return [];\n  }\n  let i = 0;\n  const intersection = [];\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n      intersection.push(l1[i]);\n      i++;\n    } else if (l1[i] < l2[i]) {\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return intersection;\n};\n\n/*\n  Given two lists, return the union.\n  >>> union([1, 2, 3, 4, 5], [2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> union([1, 2, 3, 4, 5], [2, 3, 4])\n  [1, 2, 3, 4, 5]\n  >>> union([1, 2, 3, 4, 5], [2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> union([1, 2, 3, 4, 5], [])\n  [1, 2, 3, 4, 5]\n  >>> union([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\nconst union = (l1, l2) => {\n  if (l1.length === 0) {\n    return l2;\n  } else if (l2.length === 0) {\n    return l1;\n  }\n  let i = 0;\n  const union = [];\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n      union.push(l1[i]);\n      i++;\n    } else if (l1[i] < l2[i]) {\n      union.push(l1[i]);\n      i++;\n    } else {\n      union.push(l2[i]);\n      i++;\n    }\n  }\n  union.push(l1[i]);\n  return union;\n};\n\n/*\n  Given a list, return a list with all the elements that are a power of 2.\n  >>> listToPower2([2, 3, 5])\n  [2, 4, 8]\n  >>> listToPower2([1, 3, 5, 7])\n  [1, 2, 4, 8]\n  >>> listToPower2([1, 3, 5, 7, 11])\n  [1, 2, 4, 8, 16]\n  >>> listToPower2([2, 3, 5, 7, 11, 13])\n  [2, 4, 8, 16]\n  >>> listToPower2([2, 3, 5, 7, 11, 13, 17])\n  [2, 4, 8, 16, 32]\n  >>> listToPower2([2, 3, 5, 7, 11, 13, 17, 19])\n  [2, 4, 8, 16, 32]\n  >>> listToPower2([2, 3, 5, 7, 11, 13, 17, 19, 23])\n  [2, 4, 8, 16, 32, 64]\n  >>> listToPower2([2, 3, 5, 7, 11, 13, 17, 19, 23, 29])\n  [2, 4, 8, 16, 32, 64]\n  >>> listToPower2([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31])\n  [2, 4, 8, 16, 32, 64]\n  >>> listToPower2([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37])\n  [2, 4, 8, 16, 32, 64, 128]\n  >>> listToPower2([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41])\n  [2, 4, 8, 16, 32, 64, 128]\n  >>> listToPower2([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  [2, 4, 8, 16, 32, 64, 128, 256]\n  */\nconst listToPower2 = (l) => {\n  if (l.length === 0) {\n    return [];\n  }\n  const list = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      list.push(l[i]);\n      if (Math.pow(2, i) === l[i]) {\n        list.push(Math.pow(2, i));\n      }\n    }\n  }\n  return list;\n};\n\nmodule.exports = {\n  maxElement,\n  intersection,\n  union,\n  listToPower2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n    const total = [0, 0, 0]\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            if (i === 11) {\n                total[0] += 1\n            } else if (i === 13) {\n                total[1] += 1\n            } else {\n                total[2] += 1\n            }\n        }\n    }\n    return total\n}\n\n//fizzBuzz(1000000)\n//[1, 0, 0]\n//[2, 0, 0]\n//[3, 0, 0]\n//[4, 0, 0]\n//[5, 0, 0]\n//[6, 0, 0]\n//[7, 0, 0]\n//[8, 0, 0]\n//[9, 0, 0]\n//[10, 0, 0]\n//[11, 0, 0]\n//[12, 0, 0]\n//[13, 0, 0]\n//[14, 0, 0]\n//[15, 0, 0]\n//[16, 0, 0]\n//[17, 0, 0]\n//[18, 0, 0]\n//[19, 0, 0]\n//[20, 0, 0]\n//[21, 0, 0]\n//[22, 0, 0]\n//[23, 0, 0]\n//[24, 0, 0]\n//[25, 0, 0]\n//[26, 0, 0]\n//[27, 0, 0]\n//[28, 0, 0]\n//[29, 0, 0]\n//[30, 0, 0]\n//[31, 0, 0]\n//[32, 0, 0]\n//[33, 0, 0]\n//[34, 0, 0]\n//[35, 0, 0]\n//[36, 0, 0]\n//[37, 0, 0]\n//[38, 0, 0]\n//[39, 0, 0]\n//[40, 0, 0]\n//[41, 0, 0]\n//[42, 0, 0]\n//[43, 0, 0]\n//[44, 0, 0]\n//[45, 0, 0]\n//[46, 0, 0]\n//[47, 0, 0]\n//[48, 0, 0]\n//[49, 0, 0]\n//[50, 0, 0]\n//[51, 0, 0]\n//[52, 0, 0]\n//[53, 0, 0]\n//[54, 0, 0]\n//[55, 0, 0]\n//[56, 0, 0]\n//[57, 0, 0]\n//[58, 0, 0]\n//[59, 0, 0]\n//[60, 0, 0]\n//[61, 0, 0]\n//[62, 0, 0]\n//[63, 0, 0]\n//[64, 0, 0]\n//[65, 0, 0]\n//[66, 0, 0]\n//[67, 0, 0]\n//[68, 0, 0]\n//[69, 0, 0]\n//[70, 0, 0]\n//[71, 0, 0]\n//[72, 0, 0]\n//[73, 0, 0]\n//[74, 0, 0]\n//[75, 0, 0]\n//[76, 0, 0]\n//[77, 0, 0]\n//[78, 0, 0]\n//[79, 0, 0]\n//[80, 0, 0]\n//[81, 0, 0]\n//[82, 0, 0]\n//[83, 0, 0]\n//[84, 0, 0]\n//[85, 0, 0]\n//[86, 0, 0]\n//[87, 0, 0]\n//[88, 0, 0]\n//[89, 0, 0]\n//[90, 0, 0]\n//[91, 0, 0]\n//[92, 0, 0]\n//[93, 0, 0]\n//[94, 0, 0]\n//[95, 0, 0]\n//[96, 0, 0]\n//[97, 0, 0]\n//[98, 0, 0]\n//[99, 0, 0]\n//[100, 0, 0]\n//[101, 0, 0]\n//[102, 0, 0]\n//[103, 0, 0]\n//[104, 0, 0]\n//[105, 0, 0]\n//[106, 0, 0]\n//[107, 0, 0]\n//[108, 0, 0]\n//[109, 0, 0]\n//[110, 0, 0]\n//[111, 0, 0]\n//[112, 0, 0]\n//[113, 0, 0]\n//[114, 0, 0]\n//[115, 0, 0]\n//[116, 0, 0]\n//[117, 0, 0]\n//[118, 0, 0]\n//[119, 0, 0]\n//[120, 0, 0]\n//[121, 0, 0]\n//[122, 0, 0]\n//[123, 0, 0]\n//[124, 0, 0]\n//[125, 0, 0]\n//[126, 0, 0]\n//[127, 0, 0]\n//[128, 0, 0]\n//[129, 0, 0]\n//[130, 0, 0]\n//[131, 0, 0]\n//[132, 0, 0]\n//[133, 0, 0]\n//[134, 0, 0]\n//[135, 0, 0]\n//[136, 0, 0]\n//[137, 0, 0]\n//[138, 0, 0]\n//[139, 0, 0]\n//[140, 0, 0]\n//[141, 0, 0]\n//[142, 0, 0]\n//[143, 0, 0]\n//[144, 0, 0]\n//[145, 0, 0]\n//[146, 0, 0]\n//[147, 0, 0]\n//[148, 0, 0]\n//[149, 0, 0]\n//[150, 0, 0"}
{"task_id": "JavaScript/37", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const odd = l.filter(x => x % 2 === 1)\n  const even = l.filter(x => x % 2 === 0)\n  const sortedOdd = sorted(odd)\n  const sortedEven = sorted(even)\n  const sorted = sortedOdd.concat(sortedEven)\n  return sorted\n}\n\nmodule.exports = sortEven\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length== 3){ \n       groups2.push(group[0]+ group.slice(1,3)); \n     }else { \n       groups.push(group);\n     }\n  }\n  return groups.join('');\n}\n\n/*\n   decodes a string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic2= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length== 3){ \n       groups2.push(group.slice(1,3)+ group[0]); \n     }else { \n       groups.push(group);\n     }\n  }\n  return groups.join('');\n}\n\n/*\n   decodes a string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic3= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length== 3){ \n       groups2.push(group[0]+ group.slice(1,3)); \n     }else { \n       groups.push(group);\n     }\n  }\n  return groups.join('');\n}\n\n/*\n   decodes a string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic4= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length== 3){ \n       groups2.push(group.slice(1,3)+ group[0]); \n     }else { \n       groups.push(group);\n     }\n  }\n  return groups.join('');\n}\n\n/*\n   decodes a string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic5= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length== 3){ \n       groups2.push(group.slice(1,3)+ group[0]); \n     }else { \n       groups.push(group);\n     }\n  }\n  return groups.join('');\n}\n\n/*\n   decodes a string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic6= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length== 3){ \n       groups2.push(group.slice(1,3)+ group[0]); \n     }else { \n       groups.push(group);\n     }\n  }\n  return groups.join('');\n}\n\n/*\n   decodes a string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic7= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length== 3){ \n       groups2.push(group.slice(1,3)+ group[0]); \n     }else { \n       groups.push(group);\n     }\n  }\n  return groups.join('');\n}\n\n/*\n   decodes a string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic8= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length== 3){ \n       groups2.push(group.slice(1,3)+ group[0]); \n     }else { \n       groups.push(group);\n     }\n  }\n  return groups.join('');\n}\n\n/*\n   decodes a string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic9= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length== 3){ \n       groups2.push(group.slice(1,3)+ group[0]); \n     }else { \n       groups.push(group);\n     }\n  }\n  return groups.join('');\n}\n\n/*\n   decodes a string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic10= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length== 3){ \n       groups2.push(group.slice(1,3)+ group[0]); \n     }else { \n       groups.push(group);\n     }\n  }\n  return groups.join('');\n}\n\n/*\n   decodes a string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic11= (s)=>{\n   var groups= [], groups2= []; \n   for (const group of s.split('')){ \n     if (group.length=="}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    let p = 1,\n        q = 1,\n        r = 1,\n        pf = 2;\n    while (pf <= n) {\n        p = pf;\n        q = pf + p;\n        r = pf + q;\n        pf = pf + q + r;\n    }\n    return p;\n};\n\nmodule.exports = primeFib;<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sortedList = l.sort((a, b) => a - b);\n  let first = 0;\n  let second = 0;\n  let third = 0;\n  let i = 0;\n  while (i < sortedList.length) {\n    const current = sortedList[i];\n    if (current === sortedList[i + 1]) {\n      // Two consecutive elements are equal\n      ++i;\n      continue;\n    }\n    // Current is not equal to the next\n    if (current === 0) {\n      // Element is zero\n      second = first;\n      first = i + 1;\n      ++i;\n      continue;\n    }\n    if (current === sortedList[i + 2]) {\n      // Three consecutive elements are equal\n      second = i + 1;\n      third = i + 3;\n      break;\n    }\n    // One of the two is not equal to the next two\n    second = i + 1;\n    third = i + 2;\n    break;\n  }\n  if (first === sortedList.length) {\n    return false;\n  }\n  return [first, second, third].every(x => x === 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n   return (()=>{\n       const [cars1,cars2]= [...new Array(n).fill(null),...new Array(n).fill(null)];\n       const [cars1x,cars2x]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1y,cars2y]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1w,cars2w]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1h,cars2h]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1dx,cars2dx]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1dy,cars2dy]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1dw,cars2dw]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1dh,cars2dh]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1xv,cars2xv]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1yv,cars2yv]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1wv,cars2wv]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1hv,cars2hv]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1dvx,cars2dvx]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1dvy,cars2dvy]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1dvw,cars2dvw]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1dvh,cars2dvh]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1x1,cars2x2]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1x2,cars2x1]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1y1,cars2y2]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1y2,cars2y1]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1w1,cars2w2]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1w2,cars2w1]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1h1,cars2h2]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1h2,cars2h1]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1dvx1,cars2dvx2]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1dvy1,cars2dvy2]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1dvw1,cars2dvw2]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1dvh1,cars2dvh2]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1dx1,cars2dx2]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1dx2,cars2dx1]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1dy1,cars2dy2]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1dy2,cars2dy1]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1dvx1,cars2dvx2]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1dvy1,cars2dvy2]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1dvw1,cars2dvw2]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1dvh1,cars2dvh2]= [...new Array(n).fill(0),...new Array(n).fill(0)];\n       const [cars1x1v,cars2x2v]="}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.slice().concat([1]).concat(l.slice().reverse().concat([1]).reverse());\n};\n\nexport default incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    return l.filter((e, i) => {\n        return e === 0 && l.slice(i + 1).every((ee) => ee > 0);\n    }).length === 0;\n}\n\nexport {pairsSumToZero};<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const digits = Array(x).fill(0).reverse().slice(0, x)\n  const digitsStr = digits.map(x => (x % base + base).toString()).join('')\n  return digitsStr.split('').reverse().join('')\n}\n\nconst convertToBase = (x, base) => {\n  const digits = changeBase(x, base)\n  const str = Array(x).fill(0).reverse().slice(0, x)\n  return str.join('') + digits\n}\n\nconst baseConvert = (x, base) => {\n  return changeBase(x, base)\n}\n\nconst base = convertToBase(12, 2)\nconst convertToBase2 = (x) => {\n  return changeBase(x, 2)\n}\n\nconst convertToBase10 = (x) => {\n  return changeBase(x, 10)\n}\n\n/*\nConvert decimal number to base 2.\n\n>>> convertToBase2(12)\n'110000'\n>>> convertToBase2(2)\n'00'\n>>> convertToBase2(1)\n'1'\n>>> convertToBase2(0)\n'0'\n>>> convertToBase2(2.1)\n'1'\n>>> convertToBase2(2.01)\n'1'\n>>> convertToBase2(0.0)\n'0'\n>>> convertToBase2(1.0)\n'1'\n>>> convertToBase2(0.1)\n'1'\n>>> convertToBase2(1.1)\n'1'\n>>> convertToBase2(2.1)\n'11'\n>>> convertToBase2(2.01)\n'111'\n>>> convertToBase2(0.0)\n'0'\n>>> convertToBase2(1.0)\n'1'\n>>> convertToBase2(0.1)\n'1'\n>>> convertToBase2(1.1)\n'11'\n>>> convertToBase2(2.1)\n'11'\n>>> convertToBase2(2.01)\n'11'\n>>> convertToBase2(0.0)\n'0'\n>>> convertToBase2(1.0)\n'1'\n>>> convertToBase2(0.1)\n'1'\n>>> convertToBase2(1.1)\n'11'\n>>> convertToBase2(2.1)\n'11'\n>>> convertToBase2(2.01)\n'11'\n>>> convertToBase2(0.0)\n'0'\n>>> convertToBase2(1.0)\n'1'\n>>> convertToBase2(0.1)\n'1'\n>>> convertToBase2(1.1)\n'11'\n>>> convertToBase2(2.1)\n'11'\n>>> convertToBase2(2.01)\n'11'\n>>> convertToBase2(0.0)\n'0'\n>>> convertToBase2(1.0)\n'1'\n>>> convertToBase2(0.1)\n'1'\n>>> convertToBase2(1.1)\n'11'\n>>> convertToBase2(2.1)\n'11'\n>>> convertToBase2(2.01)\n'11'\n>>> convertToBase2(0.0)\n'0'\n>>> convertToBase2(1.0)\n'1'\n>>> convertToBase2(0.1)\n'1'\n>>> convertToBase2(1.1)\n'11'\n>>> convertToBase2(2.1)\n'11'\n>>> convertToBase2(2.01)\n'11'\n>>> convertToBase2(0.0)\n'0'\n>>> convertToBase2(1.0)\n'1'\n>>> convertToBase2(0.1)\n'1'\n>>> convertToBase2(1.1)\n'11'\n>>> convertToBase2(2.1)\n'11'\n>>> convertToBase2(2.01)\n'11'\n>>> convertToBase2(0.0)\n'0'\n>>> convertToBase2(1.0)\n'1'\n>>> convertToBase2(0.1)\n'1'\n>>> convertToBase2(1.1)\n'11'\n>>> convertToBase2(2.1)\n'11'\n>>> convertToBase2(2.01)\n'11'\n>>> convertToBase2(0.0)\n'0'\n>>> convertToBase2(1.0)\n'1'\n>>> convertToBase2(0.1)\n'1'\n>>> convertToBase2(1.1)\n'11'\n>>> convertToBase2(2.1)\n'11'\n>>> convertToBase2(2.01)\n'11'\n>>> convertToBase2(0.0)\n'0'\n>>> convertToBase2(1.0)\n'1'\n>>> convertToBase2(0.1)\n'1'\n>>> convertToBase2(1.1)\n'11'\n>>> convertToBase2(2.1)\n'11'\n>>> convertToBase2(2.01)\n'11'\n>>> convertToBase2(0.0)\n'0'\n>>> convertToBase2(1.0)\n'1'\n>>> convertToBase2(0.1)\n'1'\n>>> convertToBase2(1.1)\n'11'\n>>> convertToBase2(2.1)\n'11'\n>>> convertToBase2(2.01)\n'11'\n>>> convertToBase2(0.0)\n'0'\n>>> convertToBase2(1.0)\n'1'\n>>> convertToBase2(0.1)\n'1'\n>>> convertToBase2(1.1)\n'11'\n>>> convertToBase2(2.1)\n'11'\n>>> convertToBase2(2.01)\n'11'\n>>> convertToBase2(0.0)\n'0'\n>>> convertToBase2(1.0)\n'1'\n>>> convertToBase2(0.1)\n'1'\n>>> convertToBase2(1.1)"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": false, "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 8)\n  36\n  */\nconst triangleArea2 = (a, h) => {\n  return a * h;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea3 = (a, h) => {\n  return a * h / 2;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea4 = (a, h) => {\n  return a * h / 3;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea5 = (a, h) => {\n  return a * h / 4;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea6 = (a, h) => {\n  return a * h / 5;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea7 = (a, h) => {\n  return a * h / 6;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea8 = (a, h) => {\n  return a * h / 7;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea9 = (a, h) => {\n  return a * h / 8;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea10 = (a, h) => {\n  return a * h / 9;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea11 = (a, h) => {\n  return a * h / 10;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea12 = (a, h) => {\n  return a * h / 11;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea13 = (a, h) => {\n  return a * h / 12;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea14 = (a, h) => {\n  return a * h / 13;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea15 = (a, h) => {\n  return a * h / 14;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea16 = (a, h) => {\n  return a * h / 15;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea17 = (a, h) => {\n  return a * h / 16;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea18 = (a, h) => {\n  return a * h / 17;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea19 = (a, h) => {\n  return a * h / 18;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea20 = (a, h) => {\n  return a * h / 19;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea21 = (a, h) => {\n  return a * h / 20;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea22 = (a, h) => {\n  return a * h / 21;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea23 = (a, h) => {\n  return a * h / 22;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea24 = (a, h) => {\n  return a * h / 23;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea25 = (a, h) => {\n  return a * h / 24;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea26 = (a, h) => {\n  return a * h / 25;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  81\n  */\nconst triangleArea27 = (a, h) => {\n  return a * h / 26;\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  let a = 0, b = 1, c = 1;\n  if (n <= 2) return n;\n  else {\n    while (c <= n - 4) {\n      a = c;\n      c = b + a;\n      b = a;\n    }\n    return c;\n  }\n};\n\nconst fib4_2 = (n) => {\n  let a = 0, b = 1, c = 1;\n  if (n <= 2) return n;\n  else {\n    while (c <= n - 4) {\n      a = c;\n      c = b + a;\n      b = a;\n    }\n    return c;\n  }\n};\n\nconst fib4_3 = (n) => {\n  let a = 0, b = 1, c = 1;\n  if (n <= 2) return n;\n  else {\n    while (c <= n - 4) {\n      a = c;\n      c = b + a;\n      b = a;\n    }\n    return c;\n  }\n};\n\nconst fib4_4 = (n) => {\n  let a = 0, b = 1, c = 1;\n  if (n <= 2) return n;\n  else {\n    while (c <= n - 4) {\n      a = c;\n      c = b + a;\n      b = a;\n    }\n    return c;\n  }\n};\n\nconst fib4_5 = (n) => {\n  let a = 0, b = 1, c = 1;\n  if (n <= 2) return n;\n  else {\n    while (c <= n - 4) {\n      a = c;\n      c = b + a;\n      b = a;\n    }\n    return c;\n  }\n};\n\nconst fib4_6 = (n) => {\n  let a = 0, b = 1, c = 1;\n  if (n <= 2) return n;\n  else {\n    while (c <= n - 4) {\n      a = c;\n      c = b + a;\n      b = a;\n    }\n    return c;\n  }\n};\n\nconst fib4_7 = (n) => {\n  let a = 0, b = 1, c = 1;\n  if (n <= 2) return n;\n  else {\n    while (c <= n - 4) {\n      a = c;\n      c = b + a;\n      b = a;\n    }\n    return c;\n  }\n};\n\nconst fib4_8 = (n) => {\n  let a = 0, b = 1, c = 1;\n  if (n <= 2) return n;\n  else {\n    while (c <= n - 4) {\n      a = c;\n      c = b + a;\n      b = a;\n    }\n    return c;\n  }\n};\n\nconst fib4_9 = (n) => {\n  let a = 0, b = 1, c = 1;\n  if (n <= 2) return n;\n  else {\n    while (c <= n - 4) {\n      a = c;\n      c = b + a;\n      b = a;\n    }\n    return c;\n  }\n};\n\nconst fib4_10 = (n) => {\n  let a = 0, b = 1, c = 1;\n  if (n <= 2) return n;\n  else {\n    while (c <= n - 4) {\n      a = c;\n      c = b + a;\n      b = a;\n    }\n    return c;\n  }\n};\n\nconst fib4_11 = (n) => {\n  let a = 0, b = 1, c = 1;\n  if (n <= 2) return n;\n  else {\n    while (c <= n - 4) {\n      a = c;\n      c = b + a;\n      b = a;\n    }\n    return c;\n  }\n};\n\nconst fib4_12 = (n) => {\n  let a = 0, b = 1, c = 1;\n  if (n <= 2) return n;\n  else {\n    while (c <= n - 4) {\n      a = c;\n      c = b + a;\n      b = a;\n    }\n    return c;\n  }\n};\n\nconst fib4_13 = (n) => {\n  let a = 0, b = 1, c = 1;\n  if (n <= 2) return n;\n  else {\n    while (c <= n - 4) {\n      a = c;\n      c = b + a;\n      b = a;\n    }\n    return c;\n  }\n};\n\nconst fib4_14 = (n) => {\n  let a = 0, b = 1, c = 1;\n  if (n <= 2) return n;\n  else {\n    while (c <= n - 4) {\n      a = c;\n      c = b + a;\n      b = a;\n    }\n    return c;\n  }\n};\n\nconst fib4_15 = (n) => {\n  let a = 0, b = 1, c = 1;\n  if (n <= 2) return n;\n  else {\n    while (c <= n - 4) {\n      a = c;\n      c = b + a;\n      b = a;\n    }\n    return c;\n  }\n};\n\nconst fib4_16 = (n) => {\n  let a = 0, b = 1, c = 1;\n  if (n <= 2) return n;\n  else {\n    while (c <= n - 4) {\n      a = c;\n      c ="}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length;\n  let left = 0;\n  let right = n - 1;\n  let mid;\n\n  while (left < right) {\n    mid = (left + right) / 2;\n    if (l[mid] < l[n - 1]) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n\n  return (l[left] + l[right]) / 2;\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reverse = '';\n    for (let i = text.length - 1; i >= 0; i--) {\n        reverse = text.charAt(i) + reverse;\n    }\n    return text === reverse;\n};\n\n/**\n  * Calculates the number of 1's in a string\n  * @param {string} text\n  * @returns {number}\n  */\nconst countOnes = (text) => {\n    let count = 0;\n    for (let i = 0; i < text.length; i++) {\n        if (text.charAt(i) === '1') {\n            count++;\n        }\n    }\n    return count;\n};\n\nconst solution = (text) => {\n    if (!isPalindrome(text)) {\n        return false;\n    }\n    return countOnes(text) % 2 === 0;\n};\n\nmodule.exports = solution;<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n <= 0) return 0;\n  let mod = n % p;\n  while (mod!= 0) {\n    mod = (mod * 2) % p;\n  }\n  return n;\n};\n\n/*Return n, but without any trailing zero bytes.\n  >>> lstrip(0, '\\x00')\n  0\n  >>> lstrip(0, '\\x00\\x01\\x02')\n  '\\x01\\x02'\n  >>> lstrip(0, '\\x01\\x02\\x00')\n  '\\x01\\x02'\n  */\nconst lstrip = (n, s) => s.substr(n, s.length - n);\n\n/*Return n, but without any leading zero bytes.\n  >>> rstrip(0, '\\x00')\n  0\n  >>> rstrip(0, '\\x00\\x01\\x02')\n  '\\x01\\x02'\n  >>> rstrip(0, '\\x01\\x02\\x00')\n  '\\x01\\x02'\n  */\nconst rstrip = (n, s) => lstrip(s.length - n, s);\n\n/*Return n, but without any leading or trailing zero bytes.\n  >>> strip(0, '\\x00')\n  0\n  >>> strip(0, '\\x00\\x01\\x02')\n  '\\x01\\x02'\n  >>> strip(0, '\\x01\\x02\\x00')\n  '\\x01\\x02'\n  */\nconst strip = (n, s) => lstrip(rstrip(0, s), s);\n\n/*Return n, but with any leading or trailing zero bytes removed.\n  >>> zerostrip(0, '\\x00')\n  0\n  >>> zerostrip(0, '\\x00\\x01\\x02')\n  '\\x01\\x02'\n  >>> zerostrip(0, '\\x01\\x02\\x00')\n  '\\x01\\x02'\n  */\nconst zerostrip = (n, s) => strip(s.length - n, s);\n\n/*Return n, but with any leading or trailing zero bytes removed.\n  >>> pad(0, '\\x00', 4)\n  0\n  >>> pad(0, '\\x00\\x01\\x02', 4)\n  '\\x01\\x02'\n  >>> pad(0, '\\x01\\x02\\x00', 4)\n  '\\x01\\x02'\n  */\nconst pad = (n, s, size) => {\n  let padding = n;\n  while (padding < size) {\n    s += '\\x00';\n    padding++;\n  }\n  return zerostrip(0, s);\n};\n\n/*Return n, but with any leading or trailing zero bytes removed.\n  >>> zeropad(0, '\\x00', 4)\n  0\n  >>> zeropad(0, '\\x00\\x01\\x02', 4)\n  '\\x01\\x02'\n  >>> zeropad(0, '\\x01\\x02\\x00', 4)\n  '\\x01\\x02'\n  */\nconst zeropad = (n, s, size) => {\n  let padding = n;\n  while (padding < size) {\n    s += '\\x00';\n    padding++;\n  }\n  return pad(0, s, size);\n};\n\n/*Return n, but with any leading or trailing zero bytes removed.\n  >>> padleft(0, '\\x00', 4)\n  0\n  >>> padleft(0, '\\x00\\x01\\x02', 4)\n  '\\x00\\x01\\x02'\n  >>> padleft(0, '\\x01\\x02\\x00', 4)\n  '\\x01\\x02\\x00'\n  */\nconst padleft = (n, s, size) => {\n  let padding = n;\n  while (padding < size) {\n    s += '\\x00';\n    padding++;\n  }\n  return lstrip(zeropad(0, s, size), s);\n};\n\n/*Return n, but with any leading or trailing zero bytes removed.\n  >>> padright(0, '\\x00', 4)\n  0\n  >>> padright(0, '\\x00\\x01\\x02', 4)\n  '\\x00\\x01\\x02'\n  >>> padright(0, '\\x01\\x02\\x00', 4)\n  '\\x01\\x02\\x00'\n  */\nconst padright = (n, s, size) => {\n  let padding = n;\n  while (padding < size) {\n    s += '\\x00';\n    padding++;\n  }\n  return rstrip(zeropad(0, s, size), s);\n};\n\n/*Return n, but with any leading or trailing zero bytes removed.\n  >>> ljust(0, '\\x00', 4)\n  0\n  >>> ljust(0, '\\x00\\x01\\x02', 4)\n  '\\x01\\x02'\n  >>> ljust(0, '\\x01\\x02\\x00', 4)\n  '\\x01\\x02\\x00'\n  */\nconst ljust = (n, s, size) => {\n  let padding = n;\n  while (padding < size) {\n    s += '\\x00';\n    padding++;\n  }\n  return lstrip(pad(0, s, size), s);\n};\n\n/*Return n, but with any leading or trailing zero bytes removed.\n  >>> rjust(0, '\\x00', 4)\n  0\n  >>> rjust(0, '\\x00\\x01\\x02', 4)\n  '\\x00\\x01\\x02'\n  >>> rjust(0, '\\x01\\x02\\x00', 4)\n  '\\x01\\x02\\x00"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   let str = \"\" \n   for (let i = 0; i < s.length; i++){\n     str += String.fromCharCode(((s.charCodeAt(i) - 5 - \" a\".charCodeAt(0))/26) + \" a\".charCodeAt(0)); \n   } \n   return str;\n}\n\nconst shift = encodeShift(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n\nconst decode = decodeShift(shift);\n\nconsole.log(\"decoded string is: \" + decode);\n\n/*\n   encodes a string using encode_shift function. \n  */\nconst encode = encodeShift(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n\nconst decode = decodeShift(encode);\n\nconsole.log(\"decoded string is: \" + decode);<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const vowelIndices = vowels.map(v => text.indexOf(v));\n\n  if (vowelIndices.length === 0) {\n    return text;\n  }\n\n  return text.slice(0, vowelIndices[0]) + text.slice(vowelIndices[vowelIndices.length - 1]);\n}\n\n/*\n  removeVowelsByLength was a function that took string and returns string without vowels.\n  >>> removeVowelsByLength('')\n  ''\n  >>> removeVowelsByLength(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowelsByLength('abcdef')\n  'bcdf'\n  >>> removeVowelsByLength('aaaaa')\n  ''\n  >>> removeVowelsByLength('aaBAA')\n  'B'\n  >>> removeVowelsByLength('zbcd')\n  'zbcd'\n  */\nconst removeVowelsByLength = (text, minLength, maxLength) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const vowelIndices = vowels.map(v => text.indexOf(v));\n\n  if (vowelIndices.length === 0) {\n    return text;\n  }\n\n  const vowelLengths = vowels.map(v => text.indexOf(v) - vowelIndices[0]);\n  const vowelIndicesLen = vowelLengths.map(l => Math.min(l, maxLength - vowelIndices[0]));\n\n  return text.slice(0, vowelIndices[0]) + text.slice(vowelIndices[vowelIndicesLen[vowelIndicesLen.length - 1]], text.length);\n}\n\n/*\n  removeVowelsByLengthByLength was a function that took string and returns string without vowels.\n  >>> removeVowelsByLengthByLength('')\n  ''\n  >>> removeVowelsByLengthByLength(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowelsByLengthByLength('abcdef')\n  'bcdf'\n  >>> removeVowelsByLengthByLength('aaaaa')\n  ''\n  >>> removeVowelsByLengthByLength('aaBAA')\n  'B'\n  >>> removeVowelsByLengthByLength('zbcd')\n  'zbcd'\n  */\nconst removeVowelsByLengthByLength = (text, minLength, maxLength) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const vowelIndices = vowels.map(v => text.indexOf(v));\n\n  if (vowelIndices.length === 0) {\n    return text;\n  }\n\n  const vowelLengths = vowels.map(v => text.indexOf(v) - vowelIndices[0]);\n  const vowelIndicesLen = vowelLengths.map(l => Math.min(l, maxLength - vowelIndices[0]));\n  const vowelLengthsLen = vowelIndicesLen.map(l => Math.min(l, maxLength - vowelIndices[0]));\n\n  return text.slice(0, vowelIndices[0]) + text.slice(vowelIndices[vowelIndicesLen[vowelIndicesLen.length - 1]], text.length);\n}\n\n/*\n  removeVowelsByLengthByLengthByLength was a function that took string and returns string without vowels.\n  >>> removeVowelsByLengthByLengthByLength('')\n  ''\n  >>> removeVowelsByLengthByLengthByLength(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowelsByLengthByLengthByLength('abcdef')\n  'bcdf'\n  >>> removeVowelsByLengthByLengthByLength('aaaaa')\n  ''\n  >>> removeVowelsByLengthByLengthByLength('aaBAA')\n  'B'\n  >>> removeVowelsByLengthByLengthByLength('zbcd')\n  'zbcd'\n  */\nconst removeVowelsByLengthByLengthByLength = (text, minLength, maxLength) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const vowelIndices = vowels.map(v => text.indexOf(v));\n\n  if (vowelIndices.length === 0) {\n    return text;\n  }\n\n  const vowelLengths = vowels.map(v => text.indexOf(v) - vowelIndices[0]);\n  const vowelIndicesLen = vowelLengths.map(l => Math.min(l, maxLength - vowelIndices[0]));\n  const vowelLengthsLen = vowelIndicesLen.map(l => Math.min(l, maxLength - vowelIndices[0]));\n  const vowelLengthsLen2 = vowelIndicesLen.map(l => Math.min(l, maxLength - vowelIndices[0]));\n\n  return text.slice(0, vowelIndices[0]) + text.slice(vowelIndices[vowelIndicesLen[vowelIndicesLen.length - 1]], text.length);\n}\n\nmodule.exports = {\n  removeVowels,\n  removeVowelsByLength,\n  removeVowelsByLengthByLength,\n  removeVowelsByLengthByLengthByLength,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] >= t) return false;\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l was above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] <= t) return false;\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l was above threshold t.\n  >>> isAboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> isAboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst isAboveThreshold = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] <= t) return false;\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l was below threshold t.\n  >>> isBelowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> isBelowThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst isBelowThreshold = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] >= t) return false;\n  }\n  return true;\n};\n\nmodule.exports = {\n  belowThreshold,\n  aboveThreshold,\n  isBelowThreshold,\n  isAboveThreshold\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const z = x + y\n  return z\n}\n\n/*\n  Add one number and add it to another\n  >>> add(5, 3)\n  8\n  >>> add(8, 7)\n  15\n  */\nconst add2 = (x, y) => {\n  const z = add(x, y)\n  return z\n}\n\n/*\n  Add two numbers together and get their sum\n  >>> add2(2, 3)\n  5\n  >>> add2(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  const z = add2(x, y)\n  return z\n}\n\n/*\n  Add one number to a string\n  >>> add3(\"2\", 3)\n  '5'\n  >>> add3(\"5\", 7)\n  '12'\n  */\nconst add4 = (x, y) => {\n  const z = add3(x, y)\n  return z\n}\n\n/*\n  Add one number to a number\n  >>> add4(2, 3)\n  5\n  >>> add4(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  const z = add4(x, y)\n  return z\n}\n\n/*\n  Add one number to a list\n  >>> add5([2, 3], [3, 4])\n  [5, 6]\n  >>> add5([5, 7], [8, 9])\n  [12, 15]\n  */\nconst add6 = (x, y) => {\n  const z = add5(x, y)\n  return z\n}\n\n/*\n  Add a list to another\n  >>> add6([2, 3], [3, 4])\n  [5, 6]\n  >>> add6([5, 7], [8, 9])\n  [12, 15]\n  */\nconst add7 = (x, y) => {\n  const z = add6(x, y)\n  return z\n}\n\n/*\n  Add two lists together\n  >>> add7([2, 3], [3, 4])\n  [5, 6]\n  >>> add7([5, 7], [8, 9])\n  [12, 15]\n  */\nconst add8 = (x, y) => {\n  const z = add7(x, y)\n  return z\n}\n\n/*\n  Add a list to a number\n  >>> add8([2, 3], 3)\n  [5, 6]\n  >>> add8([5, 7], 7)\n  [12, 15]\n  */\nconst add9 = (x, y) => {\n  const z = add8(x, y)\n  return z\n}\n\n/*\n  Add a number to a list\n  >>> add9(2, [3, 4])\n  [5, 6]\n  >>> add9(5, [7, 9])\n  [12, 15]\n  */\nconst add10 = (x, y) => {\n  const z = add9(x, y)\n  return z\n}\n\n/*\n  Add a list to a list\n  >>> add10([2, 3], [3, 4])\n  [5, 6]\n  >>> add10([5, 7], [8, 9])\n  [12, 15]\n  */\nconst add11 = (x, y) => {\n  const z = add10(x, y)\n  return z\n}\n\n/*\n  Add a list to a number\n  >>> add11([2, 3], 3)\n  [5, 6]\n  >>> add11([5, 7], 7)\n  [12, 15]\n  */\nconst add12 = (x, y) => {\n  const z = add11(x, y)\n  return z\n}\n\n/*\n  Add a number to a list\n  >>> add12(2, [3, 4])\n  [5, 6]\n  >>> add12(5, [7, 9])\n  [12, 15]\n  */\nconst add13 = (x, y) => {\n  const z = add12(x, y)\n  return z\n}\n\n/*\n  Add a list to a list\n  >>> add13([2, 3], [3, 4])\n  [5, 6]\n  >>> add13([5, 7], [8, 9])\n  [12, 15]\n  */\nconst add14 = (x, y) => {\n  const z = add13(x, y)\n  return z\n}\n\n/*\n  Add a list to a list\n  >>> add14([2, 3], [3, 4])\n  [5, 6]\n  >>> add14([5, 7], [8, 9])\n  [12, 15]\n  */\nconst add15 = (x, y) => {\n  const z = add14(x, y)\n  return z\n}\n\n/*\n  Add a list to a list\n  >>> add15([2, 3], [3, 4])\n  [5, 6]\n  >>> add15([5, 7], [8, 9])\n  [12, 15]\n  */\nconst add16 = (x, y) => {\n  const z = add15(x, y)\n  return z\n}\n\n/*\n  Add a list to a list\n  >>> add16([2, 3], [3, 4])\n  [5, 6]\n  >>> add16([5, 7], [8, 9])\n  [12, 15]\n  */\nconst add17 = (x, y) => {\n  const z = add16(x, y)\n  return z\n}\n\n/*\n  Add a list to a list\n  >>> add17([2, 3], [3, 4])\n  [5, 6]\n  >>> add17([5, 7], [8, 9])\n  [12, 15]\n  */\nconst add18 = (x, y) => {\n  const z = add17(x, y)\n  return z\n}\n\n/*\n  Add a list to a list\n  >>> add18([2, 3], [3, 4])\n  [5, 6]\n  >>> add18([5, 7], [8, 9])\n  [12, 15]\n  */\nconst add19 = (x, y) => {\n"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0Size = s0.length;\n  const s1Size = s1.length;\n\n  const sameChars = new Array(s0Size);\n\n  for (let i = 0; i < s0Size; i++) {\n    const s0Char = s0.charAt(i);\n    const s1Char = s1.charAt(i);\n    if (s0Char === s1Char) {\n      sameChars[i] = true;\n    } else {\n      sameChars[i] = false;\n    }\n  }\n\n  return sameChars.every(x => x);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib(n - 1) + fib(n - 2)\n  }\n}\n\nexport default fib\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  if (!brackets.length) return true\n  const stack = []\n  for (const openingBracket of brackets) {\n    stack.push(openingBracket)\n    if (stack.length > 1) {\n      if (stack[stack.length - 2]!== \">\") {\n        return false\n      }\n    }\n  }\n  return stack.length === 1\n}\n\nconst getBrackets = (text) => {\n  const openBrackets = []\n  const closeBrackets = []\n  for (const openBracket of text.split(\"<\")) {\n    closeBrackets.push(openBracket.replace(/[<>]/g, \"\")[0])\n  }\n  return [...new Set(openBrackets),...new Set(closeBrackets)]\n}\n\nconst test = () => {\n  console.log(correctBracketing(\"<<><>\"))\n  console.log(correctBracketing(\"<>\"))\n  console.log(correctBracketing(\"<<><>\"))\n  console.log(correctBracketing(\"<>\"))\n  console.log(correctBracketing(\"<><>\"))\n  console.log(correctBracketing(\"<>\"))\n  console.log(correctBracketing(\"<><>\"))\n  console.log(correctBracketing(\"<><>\"))\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing(\"<><>\"));\n  console.log(correctBracketing(\"<>\"));\n  console.log(correctBracketing"}
{"task_id": "JavaScript/57", "prompt": "/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const { min, max } = l.reduce((acc, n) => {\n    if (n > acc.max) {\n      acc.max = n\n    }\n    if (n < acc.min) {\n      acc.min = n\n    }\n    return acc\n  }, { min: Number.MAX_SAFE_INTEGER, max: -Number.MAX_SAFE_INTEGER })\n  return min <= max\n}\n\nconst gcd = (a, b) => {\n  if (a === 0) {\n    return b\n  }\n  return gcd(b % a, a)\n}\n\nconst lcm = (a, b) => {\n  return (a * b) / gcd(a, b)\n}\n\nconst lcm_div = (a, b) => {\n  return a * b / gcd(a, b)\n}\n\nconst power = (n, p) => {\n  if (p === 1) {\n    return n\n  }\n  return n * power(n, p - 1)\n}\n\nconst mod = (x, y) => x % y\n\nconst mod_div = (x, y) => mod(x, y) / y\n\nconst mod_pow = (x, n) => {\n  if (n === 1) {\n    return x\n  }\n  return mod_pow(mod_pow(x, n / 2), n)\n}\n\nconst factorial = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  return n * factorial(n - 1)\n}\n\nconst lcm_gcd = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  return gcd(a, b)\n}\n\nconst sum = (arr) => {\n  return arr.reduce((acc, n) => acc + n, 0)\n}\n\nconst difference = (arr) => {\n  return sum(arr) - sum(arr.reverse())\n}\n\nconst max = (arr) => {\n  return arr.reduce((max, n) => Math.max(max, n), -Infinity)\n}\n\nconst min = (arr) => {\n  return arr.reduce((min, n) => Math.min(min, n), Infinity)\n}\n\nconst sort = (arr) => {\n  const copy = arr.slice()\n  copy.sort()\n  return copy\n}\n\nconst shuffle = (arr) => {\n  const copy = arr.slice()\n  for (let i = copy.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1))\n    const temp = copy[j]\n    copy[j] = copy[i]\n    copy[i] = temp\n  }\n  return copy\n}\n\nconst rotate = (arr, n) => {\n  const copy = arr.slice()\n  for (let i = 0; i < n; i++) {\n    copy.unshift(copy.pop())\n  }\n  return copy\n}\n\nconst rotate_right = (arr, n) => {\n  const copy = arr.slice()\n  for (let i = 0; i < n; i++) {\n    copy.push(copy.shift())\n  }\n  return copy\n}\n\nconst rotate_left = (arr, n) => {\n  const copy = arr.slice()\n  for (let i = 0; i < n; i++) {\n    copy.push(copy.shift())\n  }\n  return copy\n}\n\nconst permutation = (arr) => {\n  const copy = arr.slice()\n  let p = 1\n  for (let i = copy.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1))\n    const temp = copy[j]\n    copy[j] = copy[i]\n    copy[i] = temp\n    p *= Math.pow(copy.length, i)\n  }\n  return copy\n}\n\nconst reverse = (arr) => {\n  return arr.reverse()\n}\n\nconst sort_by = (arr, field) => {\n  const copy = arr.slice()\n  const field_name = field.toString()\n  copy.sort((a, b) => {\n    if (a[field_name] < b[field_name]) {\n      return -1\n    }\n    if (a[field_name] > b[field_name]) {\n      return 1\n    }\n    return 0\n  })\n  return copy\n}\n\nconst sort_by_value = (arr, field) => {\n  const copy = arr.slice()\n  const field_name = field.toString()\n  copy.sort((a, b) => {\n    if (a[field_name] < b[field_name]) {\n      return -1\n    }\n    if (a[field_name] > b[field_name]) {\n      return 1\n    }\n    return 0\n  })\n  return copy\n}\n\nconst group_by = (arr, field) => {\n  const field_name = field.toString()\n  const result = {}\n  for (let i = 0; i < arr.length; i++) {\n    const item = arr[i]\n    if (!result[item[field_name]]) {\n      result[item[field_name]] = []\n    }\n    result[item[field_name]].push(item)\n  }\n  return result\n}\n\nconst group_by_value = (arr, field) => {\n  const field_name = field.toString()\n  const result = {}\n  for (let i = 0; i < arr.length; i++) {\n    const item = arr[i]\n    if (!result[item[field_name]]) {\n      result[item[field_name]] = []\n    }\n    result[item[field_name]].push(item)\n  }\n  return result\n}\n\nmodule.ex"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  if (!l1 ||!l2) return [];\n\n  let n = l1.length;\n  let m = l2.length;\n  if (n < m) {\n    let _n = l1;\n    l1 = l2;\n    l2 = _n;\n  }\n\n  let result = [];\n  for (let i = 0; i < n; ++i) {\n    let item = l1[i];\n    let found = false;\n    for (let j = 0; j < m; ++j) {\n      if (l2[j] === item) {\n        found = true;\n        result.push(item);\n        break;\n      }\n    }\n    if (!found) result.push(item);\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    return 1\n  }\n  let factor = 2\n  while (n % factor === 0) {\n    factor += 1\n  }\n  return factor\n}\n\n/*Return the sum of all the primes below n.\n  >>> sumOfPrimes(7)\n  6\n  >>> sumOfPrimes(25)\n  28\n  >>> sumOfPrimes(10)\n  5\n  >>> sumOfPrimes(9)\n  0\n  */\nconst sumOfPrimes = (n) => {\n  if (n < 2) {\n    return 0\n  }\n  let sum = 0\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\n/*Return the sum of the primes below n.\n  >>> sumOfPrimes(7)\n  6\n  >>> sumOfPrimes(25)\n  28\n  >>> sumOfPrimes(10)\n  5\n  >>> sumOfPrimes(9)\n  0\n  */\nconst sumOfPrimes2 = (n) => {\n  if (n < 2) {\n    return 0\n  }\n  let sum = 0\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\n/*Return the sum of the digits of n. Assume n>=0.\n  >>> sumOfDigits(25)\n  10\n  >>> sumOfDigits(13195)\n  0\n  >>> sumOfDigits(2048)\n  8\n  >>> sumOfDigits(9)\n  1\n  */\nconst sumOfDigits = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += n % 10\n    n = Math.floor(n / 10)\n  }\n  return sum\n}\n\n/*Return the sum of the digits of n. Assume n>=0.\n  >>> sumOfDigits(25)\n  10\n  >>> sumOfDigits(13195)\n  0\n  >>> sumOfDigits(2048)\n  8\n  >>> sumOfDigits(9)\n  1\n  */\nconst sumOfDigits2 = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += n % 10\n    n = Math.floor(n / 10)\n  }\n  return sum\n}\n\n/*Return the sum of the digits of n. Assume n>=0.\n  >>> sumOfDigits(25)\n  10\n  >>> sumOfDigits(13195)\n  0\n  >>> sumOfDigits(2048)\n  8\n  >>> sumOfDigits(9)\n  1\n  */\nconst sumOfDigits3 = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += n\n    n = Math.floor(n / 10)\n  }\n  return sum\n}\n\n/*Return the sum of the digits of n. Assume n>=0.\n  >>> sumOfDigits(25)\n  10\n  >>> sumOfDigits(13195)\n  0\n  >>> sumOfDigits(2048)\n  8\n  >>> sumOfDigits(9)\n  1\n  */\nconst sumOfDigits4 = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += n\n    n = Math.floor(n / 100)\n  }\n  return sum\n}\n\n/*Return the sum of the digits of n. Assume n>=0.\n  >>> sumOfDigits(25)\n  10\n  >>> sumOfDigits(13195)\n  0\n  >>> sumOfDigits(2048)\n  8\n  >>> sumOfDigits(9)\n  1\n  */\nconst sumOfDigits5 = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += n\n    n = Math.floor(n / 1000)\n  }\n  return sum\n}\n\n/*Return the sum of the digits of n. Assume n>=0.\n  >>> sumOfDigits(25)\n  10\n  >>> sumOfDigits(13195)\n  0\n  >>> sumOfDigits(2048)\n  8\n  >>> sumOfDigits(9)\n  1\n  */\nconst sumOfDigits6 = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += n\n    n = Math.floor(n / 10000)\n  }\n  return sum\n}\n\n/*Return the sum of the digits of n. Assume n>=0.\n  >>> sumOfDigits(25)\n  10\n  >>> sumOfDigits(13195)\n  0\n  >>> sumOfDigits(2048)\n  8\n  >>> sumOfDigits(9)\n  1\n  */\nconst sumOfDigits7 = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += n\n    n = Math.floor(n / 100000)\n  }\n  return sum\n}\n\n/*Return the sum of the digits of n. Assume n>=0.\n  >>> sumOfDigits(25)\n  10\n  >>> sumOfDigits(13195)\n  0\n  >>> sumOfDigits(2048)\n  8\n  >>> sumOfDigits(9)\n  1\n  */\nconst sumOfDigits8 = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += n\n    n = Math.floor(n / 1000000)\n  }\n  return sum\n}\n\n/*Return the sum of the digits of n. Assume n>=0.\n  >>> sumOfDigits(25)\n  10\n  >>> sumOfDigits(13195)\n  0\n  >>> sumOfDigits(2048)\n  8\n  >>> sumOfDigits(9)\n  1\n  */\nconst sumOfDigits9 = (n) => {\n  let"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// sumToN was a function that summed numbers from 1 to n.\n// Let's calculate sum of 1 to 100 using the built-in sum function:\nconst sum = (n) => {\n  return sumToN(n);\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  Let's calculate sum of 1 to 100 using a loop:\n  */\nconst loopSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  Let's calculate sum of 1 to 100 using a map:\n  */\nconst mapSum = (n) => {\n  return (i) => {\n    return i + 1;\n  };\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  Let's calculate sum of 1 to 100 using a reduce function:\n  */\nconst reduceSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  Let's calculate sum of 1 to 100 using a map and reduce function:\n  */\nconst mapReduceSum = (n) => {\n  return (i) => {\n    return i + 1;\n  };\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  Let's calculate sum of 1 to 100 using a reduce function and a map:\n  */\nconst reduceMapSum = (n) => {\n  return (i) => {\n    return i + 1;\n  };\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  Let's calculate sum of 1 to 100 using a reduce function and a map function:\n  */\nconst mapReduceMapSum = (n) => {\n  return (i) => {\n    return i + 1;\n  };\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  Let's calculate sum of 1 to 100 using a reduce function and a map function\n  and a map function:\n  */\nconst mapReduceMapReduceSum = (n) => {\n  return (i) => {\n    return i + 1;\n  };\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  Let's calculate sum of 1 to 100 using a reduce function and a map function\n  and a map function and a map function:\n  */\nconst mapReduceMapReduceMapSum = (n) => {\n  return (i) => {\n    return i + 1;\n  };\n};\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    for (let i = 0; i < brackets.length; i++) {\n        if (i === brackets.length - 1) {\n            return brackets[i].length === 1;\n        }\n        if (brackets[i].length!== brackets[i + 1].length) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  >>> brackets = [(\"(\"), (\"(\"), (\"((\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"(\"), (\"(\"), (\"((\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"((\"), (\"()\"), (\"())\")]\n  >>> brackets = [(\"(\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"(\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"(()())\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"(())\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets = [(\"()\"), (\"()\"), (\"()\")]\n  >>> brackets ="}
{"task_id": "JavaScript/62", "prompt": "/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const ys = new Array(len + 1)\n  const result = new Array(len)\n  for (let i = 0; i < len; i++) {\n    ys[i + 1] = xs[i]\n  }\n  for (let i = 0; i < len; i++) {\n    if (ys[i]!== 0) {\n      ys[0] = ys[i + 1]\n      ys[i + 1] = 0\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (ys[i]!== 0) {\n      result[i] = ys[0]\n    }\n  }\n  return result\n}\n\n// test\nderivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\nderivative([1, 2, 3])\n// [2, 6]\n\nconsole.log('exercises 1-4 done')\n\nconst main = () => {\n  const n = eval(input())\n  let i = 0\n  let xs = []\n  let ys = []\n  do {\n    xs.push(eval(input()))\n    ys.push(eval(input()))\n  } while (++i < n)\n  let result = derivative(xs)\n  console.log(xs.join(', '))\n  console.log(ys.join(', '))\n  console.log(result.join(', '))\n  console.log('exercises done')\n}\n\n// test\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    let fibs = [0, 1];\n    for (let i = 2; i <= n; i++) {\n        fibs.push(fibs[i - 1] + fibs[i - 2]);\n    }\n    return fibs[n];\n};\n\nconsole.log(fibfib(1));\nconsole.log(fibfib(2));\nconsole.log(fibfib(3));\nconsole.log(fibfib(4));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\nconsole.log(fibfib(10));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i])) {\n            count++;\n        }\n    }\n    if (s[s.length - 1] === 'y') {\n        count++;\n    }\n    return count;\n}\n\n/*\n  Write a function to count the number of consonants in a string.\n  In this case, consonants are 'b ', 'd ', 'f ', 'g ', 'h ', 'j ', 'k ', 'l ','m ', 'n ', 'p ', 'q ', 'r ','s ', 't ', 'v ', 'w ', 'x ', 'z '.\n  Consonants can't be placed after vowels.\n  Example:\n  >>> countConsonants(\"abcdefg\")\n  7\n  >>> countConsonants(\"ABacDg\")\n  0\n  >>> countConsonants(\"AceDg\")\n  1\n  */\nconst countConsonants = (s) => {\n    let consonants = ['b', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z'];\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (!vowels.includes(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Write a function to count the number of vowels in a string.\n  Vowels are 'a ', 'e ', 'i ', 'o ', 'u'and 'y '.\n  Example:\n  >>> countVowels(\"abcde\")\n  3\n  >>> countVowels(\"ABcD\")\n  2\n  >>> countVowels(\"aceD\")\n  1\n  */\nconst countVowels = (s) => {\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Write a function to count the number of consonants and vowels in a string.\n  Vowels can't be placed after consonants.\n  Example:\n  >>> countVowels(\"abcdefg\")\n  6\n  >>> countVowels(\"ABcDg\")\n  3\n  >>> countVowels(\"AceDg\")\n  2\n  >>> countVowels(\"ABcDe\")\n  2\n  */\nconst countVowelsAndConsonants = (s) => {\n    let consonants = ['b', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z'];\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (!vowels.includes(s[i])) {\n            count++;\n        }\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (consonants.includes(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Write a function to count the number of vowels in a string.\n  Vowels are 'a ', 'e ', 'i ', 'o ', 'u'and 'y '.\n  Example:\n  >>> countVowels(\"abcde\")\n  3\n  >>> countVowels(\"ABcD\")\n  2\n  >>> countVowels(\"aceD\")\n  1\n  >>> countVowels(\"ABcDe\")\n  1\n  */\nconst countVowels2 = (s) => {\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Write a function to count the number of consonants in a string.\n  In this case, consonants are 'b ', 'd ', 'f ', 'g ', 'h ', 'j ', 'k ', 'l ','m ', 'n ', 'p ', 'q ', 'r ','s ', 't ', 'v ', 'w ', 'x ', 'z '.\n  Consonants can't be placed after vowels.\n  Example:\n  >>> countConsonants(\"abcdefg\")\n  7\n  >>> countConsonants(\"ABcDg\")\n  0\n  >>> countConsonants(\"AceDg\")\n  1\n  >>> countConsonants(\"ABcDe\")\n  1\n  */\nconst countConsonants2 = (s) => {\n    let consonants = ['b', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z'];\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (consonants.includes(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconst stringLength = (s) => s.length;\nconst numberOfVowels = (s) => countVowels(s);\nconst"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  return Array(x + 1).join('')\n   .slice(x)\n   .reverse()\n   .join('')\n   .slice(0, shift);\n};\n\n//console.log(circularShift(12, 2));\n\nconst isPalindrome = (x) => {\n  return x.split('').reverse().join('') === x;\n};\n\nconst reverse = (x) => {\n  const rev = Array(x + 1).join('')\n   .split('')\n   .reverse()\n   .join('');\n  return parseInt(rev, 10);\n};\n\n//console.log(reverse(12));\n\nconst findMedian = (a, b) => {\n  const x = (a + b) / 2;\n  return (a + b + 1) / 2;\n};\n\nconst reverseInteger = (x) => {\n  const reverse = parseInt(x, 10);\n  return reverse;\n};\n\n//console.log(reverseInteger(12));\n\nconst numberToBase = (n) => {\n  const number = n;\n  let base = 1;\n  const result = [];\n  while (number > 0) {\n    result.unshift(number % base);\n    number = Math.floor(number / base);\n    base *= 10;\n  }\n  return result;\n};\n\n//console.log(numberToBase(2));\n\nconst findDigits = (x) => {\n  const digits = [];\n  while (x > 0) {\n    digits.unshift(x % 10);\n    x = Math.floor(x / 10);\n  }\n  return digits;\n};\n\n//console.log(findDigits(2));\n\nconst sum = (x, y) => {\n  return x + y;\n};\n\n//console.log(sum(2, 3));\n\nconst difference = (x, y) => {\n  return x - y;\n};\n\n//console.log(difference(2, 3));\n\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n//console.log(multiply(2, 3));\n\nconst divide = (x, y) => {\n  return x / y;\n};\n\n//console.log(divide(2, 3));\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i += 1) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n//console.log(isPrime(5));\n\nconst generatePrime = (min, max) => {\n  let i;\n  for (i = min; i < max; i += 1) {\n    if (isPrime(i)) {\n      return i;\n    }\n  }\n};\n\n//console.log(generatePrime(1, 100));\n\nconst countPrimes = (n) => {\n  let count = 0;\n  let i;\n  for (i = 2; i < n; i += 1) {\n    if (isPrime(i)) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n//console.log(countPrimes(20));\n\nconst findLargestPrimeFactor = (n) => {\n  let largestPrimeFactor = 1;\n  let i;\n  for (i = 2; i < n; i += 1) {\n    if (isPrime(i)) {\n      if (n % i === 0) {\n        largestPrimeFactor = i;\n      }\n    }\n  }\n  return largestPrimeFactor;\n};\n\n//console.log(findLargestPrimeFactor(12));\n\nconst findSmallestPrimeFactor = (n) => {\n  let smallestPrimeFactor = n;\n  let i;\n  for (i = 2; i < n; i += 1) {\n    if (isPrime(i)) {\n      if (n % i === 0) {\n        smallestPrimeFactor = i;\n      }\n    }\n  }\n  return smallestPrimeFactor;\n};\n\n//console.log(findSmallestPrimeFactor(12));\n\nconst findLargestPrimePower = (n) => {\n  let largestPrimePower = 1;\n  let i;\n  for (i = 2; i < n; i += 1) {\n    if (isPrime(i)) {\n      if (n % i === 0) {\n        largestPrimePower = i;\n      }\n    }\n  }\n  return largestPrimePower;\n};\n\n//console.log(findLargestPrimePower(12));\n\nconst findSmallestPrimePower = (n) => {\n  let smallestPrimePower = n;\n  let i;\n  for (i = 2; i < n; i += 1) {\n    if (isPrime(i)) {\n      if (n % i === 0) {\n        smallestPrimePower = i;\n      }\n    }\n  }\n  return smallestPrimePower;\n};\n\n//console.log(findSmallestPrimePower(12));\n\nconst findLargestPalindrome = (n) => {\n  let largestPalindrome = n;\n  let i;\n  for (i = 2; i < n; i += 1) {\n    if (isPalindrome(i)) {\n      if (n % i === 0) {\n        largestPalindrome = i;\n      }\n    }\n  }\n  return largestPalindrome;\n};\n\n//console.log(findLargestPalindrome(12));\n\nconst findSmallestPalindrome = (n) => {\n  let smallestPalindrome = n;\n  let i;\n  for (i = 2; i < n; i += 1) {\n    if (isPalindrome(i)) {\n      if (n % i === 0) {\n        smallestPalindrome = i;\n      }\n    }\n  }\n  return smallestPalindrome;\n};\n\n//console.log(find"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n    let a = 0;\n    for (let i = 0; i < s.length; i++) {\n        a += s[i].charCodeAt(0) - 65;\n    }\n    return a;\n};\n\nconst main = () => {\n    console.log(digitSum(\"aAaaaXa\"));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n   let count= 0, \n      total = 0;\n   for (let i = 0; i < s.length; i += 1) {\n      let value = parseInt(s[i]);\n      if (value > 0) {\n         count += value;\n         total += value;\n      }\n   }\n   return total - count + n;\n } \n\nconst fruitDistribution = (s, n) => {\n   let count = 0, total = 0;\n   for (let i = 0; i < s.length; i += 1) {\n      let value = parseInt(s[i]);\n      if (value > 0) {\n         count += value;\n         total += value;\n      }\n   }\n   return total - count + n;\n}\n\n\n// let a = fruitDistribution(\"1 apple and 3 oranges\", 0);\n// console.log(\"Result of fruitDistribution(1 apple and 3 oranges, 0) : \" + a);\n\n// let b = fruitDistribution(\"1 apple and 1 oranges\", 0);\n// console.log(\"Result of fruitDistribution(1 apple and 1 oranges, 0) : \" + b);\n\n// let c = fruitDistribution(\"2 apples and 3 oranges\", 0);\n// console.log(\"Result of fruitDistribution(2 apples and 3 oranges, 0) : \" + c);\n\n// let d = fruitDistribution(\"5 apples and 6 oranges\", 0);\n// console.log(\"Result of fruitDistribution(5 apples and 6 oranges, 0) : \" + d);\n\n// let e = fruitDistribution(\"1 apple and 2 oranges\", 0);\n// console.log(\"Result of fruitDistribution(1 apple and 2 oranges, 0) : \" + e);\n\n// let f = fruitDistribution(\"2 apples and 4 oranges\", 0);\n// console.log(\"Result of fruitDistribution(2 apples and 4 oranges, 0) : \" + f);\n\n// let g = fruitDistribution(\"3 apples and 4 oranges\", 0);\n// console.log(\"Result of fruitDistribution(3 apples and 4 oranges, 0) : \" + g);\n\n// let h = fruitDistribution(\"1 apple and 3 oranges\", 0);\n// console.log(\"Result of fruitDistribution(1 apple and 3 oranges, 0) : \" + h);\n\n// let i = fruitDistribution(\"0 apples and 1 oranges\", 0);\n// console.log(\"Result of fruitDistribution(0 apples and 1 oranges, 0) : \" + i);\n\n// let j = fruitDistribution(\"2 apples and 1 oranges\", 0);\n// console.log(\"Result of fruitDistribution(2 apples and 1 oranges, 0) : \" + j);\n\n// let k = fruitDistribution(\"3 apples and 1 oranges\", 0);\n// console.log(\"Result of fruitDistribution(3 apples and 1 oranges, 0) : \" + k);\n\n// let l = fruitDistribution(\"1 apple and 3 oranges\", 0);\n// console.log(\"Result of fruitDistribution(1 apple and 3 oranges, 0) : \" + l);\n\n// let m = fruitDistribution(\"3 apples and 3 oranges\", 0);\n// console.log(\"Result of fruitDistribution(3 apples and 3 oranges, 0) : \" + m);\n\n// let n = fruitDistribution(\"5 apples and 1 oranges\", 0);\n// console.log(\"Result of fruitDistribution(5 apples and 1 oranges, 0) : \" + n);\n\n// let o = fruitDistribution(\"1 apples and 1 oranges\", 0);\n// console.log(\"Result of fruitDistribution(1 apples and 1 oranges, 0) : \" + o);\n\n// let p = fruitDistribution(\"1 apples and 2 oranges\", 0);\n// console.log(\"Result of fruitDistribution(1 apples and 2 oranges, 0) : \" + p);\n\n// let q = fruitDistribution(\"2 apples and 2 oranges\", 0);\n// console.log(\"Result of fruitDistribution(2 apples and 2 oranges, 0) : \" + q);\n\n// let r = fruitDistribution(\"3 apples and 2 oranges\", 0);\n// console.log(\"Result of fruitDistribution(3 apples and 2 oranges, 0) : \" + r);\n\n// let s = fruitDistribution(\"3 apples and 3 oranges\", 0);\n// console.log(\"Result of fruitDistribution(3 apples and 3 oranges, 0) : \" + s);\n\n// let t = fruitDistribution(\"4 apples and 1 oranges\", 0);\n// console.log(\"Result of fruitDistribution(4 apples and 1 oranges, 0) : \" + t);\n\n// let u = fruitDistribution(\"4 apples and 2 oranges\", 0);\n// console.log(\"Result of fruitDistribution(4 apples and 2 oranges, 0) : \" + u);\n\n// let v = fruitDistribution(\"1 apples and 4 oranges\", 0);\n// console.log(\"Result of fruitDistribution(1 apples and 4 oranges, 0) : \" + v);\n\n// let w = fruitDistribution(\"2 apples and 3 oranges\", 0);\n// console.log(\"Result of fruitDistribution(2 apples and 3 oranges, 0) : \" + w);\n\n// let x = fruitDistribution(\"3 apples and 3 oranges\", 0);\n// console.log(\"Result of fruitDistribution(3 apples and 3 oranges, 0) : \" + x);\n\n// let y = fruitDistribution(\"4 apples and 3 oranges\", 0);\n// console.log(\"Result of fruitDistribution(4 apples and 3 oranges, 0) : \" + y);\n\n// let z = fruitDistribution(\"1 apple and 5 oranges\", 0);\n// console.log(\"Result of fruitDistribution(1 apple and 5 oranges, 0) : \" + z);\n\n// let a = fruitDistribution(\"1 apple and 6 oranges\", 0);\n// console.log(\"Result of fruitDistribution("}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    let result = [];\n    let min_index = Number.MAX_SAFE_INTEGER;\n    let min_value = Number.MAX_SAFE_INTEGER;\n    for (let i = 0; i < arr.length; i++) {\n        let value = arr[i];\n        if (value > 0 && value % 2 === 0 && value < min_value) {\n            min_index = i;\n            min_value = value;\n        }\n    }\n    if (min_index === Number.MAX_SAFE_INTEGER) {\n        return result;\n    }\n    result.push(min_value);\n    result.push(min_index);\n    return result;\n};\n\n// Test\nlet arr = [4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const result = []\n  let max = 0\n  let count = 0\n  for (let i = 0; i < lst.length; i++) {\n    const curr = lst[i]\n    if (curr >= 0 && curr > max) {\n      max = curr\n      count = 1\n    } else if (curr >= 0 && curr > 0 && curr === max) {\n      count++\n    }\n    result.push([max, count])\n  }\n  return result.reduce((prev, curr) => curr[0] > prev[0]? curr[0] : prev[0], [-1, 0])\n}\n\nconst lst = [4, 1, 2, 2, 3, 1]\nconsole.log(search(lst))\n\n/*\n  Given a list of numbers, and an integer to search, return the position of the integer in the list, \n  if it exists, or -1 if it does not exist.\n  The position of the integer is the index of the first element equal to the integer, or the index of \n  the first element larger than the integer.\n  For example, if the list contains [0, 1, 3, 4, 6, 7, 8, 9] and the integer is 3, return 2, since \n  the index of the first element equal to 3 is 2.\n  If the list does not contain the integer, return -1.\n  If the integer is larger than the largest integer in the list, return the largest index.\n  Examples:\n      search([3, 5, 6, 7, 8, 9, 10, 11], 10) == 4\n      search([3, 5, 6, 7, 8, 9, 10, 11], 8) == 6\n      search([3, 5, 6, 7, 8, 9, 10, 11], 13) == -1\n  */\nconst search = (lst, val) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === val) {\n      result.push(i)\n      return result\n    } else if (lst[i] > val) {\n      return result\n    }\n  }\n  return -1\n}\n\nconst lst = [3, 5, 6, 7, 8, 9, 10, 11]\nconsole.log(search(lst, 8))\n\n/*\n  Given a list of numbers, and a number to search, return the position of the number in the list, \n  if it exists, or -1 if it does not exist.\n  The position of the number is the index of the first element equal to the number, or the index of \n  the first element larger than the number.\n  For example, if the list contains [3, 5, 6, 7, 8, 9, 10, 11] and the number is 3, return 2, since \n  the index of the first element equal to 3 is 2.\n  If the list does not contain the number, return -1.\n  If the number is larger than the largest number in the list, return the largest index.\n  Examples:\n      search([3, 5, 6, 7, 8, 9, 10, 11], 8) == 4\n      search([3, 5, 6, 7, 8, 9, 10, 11], 13) == -1\n  */\nconst search = (lst, val) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === val) {\n      result.push(i)\n      return result\n    } else if (lst[i] > val) {\n      return result\n    }\n  }\n  return -1\n}\n\nconst lst = [3, 5, 6, 7, 8, 9, 10, 11]\nconsole.log(search(lst, 8))\n\n/*\n  Given a list of numbers, and an integer to search, return the number of occurrences of the integer in \n  the list. If the integer does not exist in the list, return 0.\n  For example, if the list contains [3, 5, 6, 7, 8, 9, 10, 11] and the integer is 3, return 2, since \n  the index of the first element equal to 3 is 2.\n  If the list does not contain the integer, return 0.\n  If the integer is larger than the largest number in the list, return the largest index.\n  Examples:\n      search([3, 5, 6, 7, 8, 9, 10, 11], 3) == 2\n      search([3, 5, 6, 7, 8, 9, 10, 11], 13) == 0\n  */\nconst search = (lst, val) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === val) {\n      result.push(i)\n      return result\n    }\n  }\n  return 0\n}\n\nconst lst = [3, 5, 6, 7, 8, 9, 10, 11]\nconsole.log(search(lst, 3))\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let result = [];\n  let max = Math.max.apply(Math, lst);\n  let min = Math.min.apply(Math, lst);\n  let index = lst.length - 1;\n\n  while (index >= 0) {\n    if (lst[index] === min) {\n      result.push(min);\n      lst.splice(index, 1);\n      index--;\n    } else if (lst[index] === max) {\n      result.push(max);\n      lst.splice(index, 1);\n      index--;\n    } else {\n      result.push(lst[index]);\n      lst.splice(index, 1);\n    }\n  }\n\n  return result;\n}\n\nconsole.log(strangeSortList([1, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sideA = c - b\n  const sideB = a - c\n  const sideC = b - a\n  if (sideA < 0 || sideB < 0 || sideC < 0) {\n    return -1\n  }\n  return Math.round((sideA + sideB + sideC) * 0.5 * 10) / 10\n}\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  return!(\n    (q.length === 1) ||\n    (q.length === 2 && q[0] === q[1]) ||\n    (q.length === 3 && q[0] === q[1] && q[1] === q[2])\n  ) ||\n  (q.reduce((pre, cur) => (pre + cur), 0) >= w)\n}\n\nconsole.log(willItFly([1, 2, 3], 9))\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let i, j, smallest = 0, temp, result = 0;\n\n  for (i = 0; i < arr.length; i += 1) {\n    temp = arr[i];\n    for (j = i + 1; j < arr.length; j += 1) {\n      if (arr[j] > arr[i]) {\n        if (arr[j] - arr[i] < smallest) {\n          smallest = arr[j] - arr[i];\n          result = j;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(smallestChange([1, 2, 3, 2, 1])); // 1\nconsole.log(smallestChange([1, 2, 3, 2, 3])); // 0\nconsole.log(smallestChange([1, 2, 3, 2, 4])); // 3\nconsole.log(smallestChange([1, 2, 3, 2, 5])); // 0\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return lst1;\n  }\n\n  const [length] = [lst1.length, lst2.length];\n  const [len1, len2] = [length, length];\n  let i, j;\n\n  for (i = 0; i < length; i++) {\n    for (j = 0; j < length; j++) {\n      if (lst1[i] === lst2[j]) {\n        len1--;\n      }\n    }\n  }\n\n  for (i = 0; i < length; i++) {\n    for (j = 0; j < length; j++) {\n      if (lst1[j] === lst2[i]) {\n        len2--;\n      }\n    }\n  }\n\n  if (len1 === 0) {\n    return lst1;\n  }\n\n  if (len2 === 0) {\n    return lst2;\n  }\n\n  return [...lst1,...lst2];\n};\n\nexport default totalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  return a % 2 === 0 && a % 3 === 0 && a % 5 === 0;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 2; i <= sqrt; i += 1) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeFast = (n) => {\n  let count = 2;\n  let p = 3;\n\n  while (p < n) {\n    if (n % p === 0) {\n      return false;\n    }\n\n    p += 2;\n    count += 1;\n  }\n\n  return count === 2;\n};\n\nconst findPrime = (n) => {\n  const sqrt = Math.sqrt(n);\n  let count = 0;\n  let i = 3;\n\n  while (i <= sqrt) {\n    if (n % i === 0) {\n      count += 1;\n      i += 2;\n    } else {\n      i += 1;\n    }\n  }\n\n  return count === 1;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 2; i <= sqrt; i += 1) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeFast = (n) => {\n  let count = 2;\n  let p = 3;\n\n  while (p < n) {\n    if (n % p === 0) {\n      return false;\n    }\n\n    p += 2;\n    count += 1;\n  }\n\n  return count === 2;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 2; i <= sqrt; i += 1) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 2; i <= sqrt; i += 1) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 2; i <= sqrt; i += 1) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 2; i <= sqrt; i += 1) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 2; i <= sqrt; i += 1) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 2; i <= sqrt; i += 1) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 2; i <= sqrt; i += 1) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 2; i <= sqrt; i += 1) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 2; i <= sqrt; i += 1) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 2; i <= sqrt; i += 1) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 2; i <= sqrt; i += 1) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false"}
{"task_id": "JavaScript/76", "prompt": "/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  const isEven = x % 2 === 0;\n  return (isEven && n % 2 === 0) || (x === n * n);\n};\n\nconsole.log(isSimplePower(3, 2)); // true\nconsole.log(isSimplePower(2, 2)); // true\nconsole.log(isSimplePower(8, 2)); // true\nconsole.log(isSimplePower(3, 1)); // false\nconsole.log(isSimplePower(5, 3)); // false\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n    const isint = (a) => {\n        return typeof a === 'number' && a >= 0;\n    }\n    const issqrt = (a) => {\n        return Math.floor(Math.sqrt(a)) === Math.floor(Math.sqrt(a));\n    }\n    const iscube = (a) => {\n        return isint(a) && issqrt(a);\n    }\n    return iscube(a);\n}\n\nconsole.log(iscube(64));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let count = 0\n  let char = num.charAt(0)\n  for (let i = 1; i < num.length; i++) {\n    if (num.charAt(i)!== char) {\n      break\n    }\n    char = num.charAt(i)\n    if (isNaN(parseInt(char, 16))) {\n      count++\n    }\n  }\n  return count\n}\n\nmodule.exports = hexKey\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let digits = decimal.toString(2);\n  let binary_digit = \"\";\n  for (let i = 0; i < digits.length; i++) {\n    binary_digit = digits[i];\n    binary += (binary_digit + \"b\");\n  }\n  return (binary);\n}\n\nconsole.log(decimalToBinary(15));\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let cur = 1\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'd') {\n      cur = 3\n    } else {\n      cur += 1\n      sum += cur\n    }\n    if (sum < 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(isHappy(\"adb\"))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradeArray = grades.map((grade) => {\n    return {\n      gpa: grade,\n      letterGrade: getLetterGrade(grade)\n    }\n  })\n  gradeArray.sort((a, b) => {\n    return b.gpa - a.gpa\n  })\n  return gradeArray\n}\n\nconst getLetterGrade = (grade) => {\n  if (grade >= 3.7) {\n    return 'A'\n  } else if (grade >= 3.3) {\n    return 'A-'\n  } else if (grade >= 3.0) {\n    return 'B+ed'\n  } else if (grade >= 2.7) {\n    return 'B'\n  } else if (grade >= 2.3) {\n    return 'B-'\n  } else if (grade >= 2.0) {\n    return 'C+ed'\n  } else if (grade >= 1.7) {\n    return 'C'\n  } else if (grade >= 1.3) {\n    return 'C-'\n  } else if (grade >= 1.0) {\n    return 'D+'\n  } else if (grade >= 0.7) {\n    return 'D'\n  } else {\n    return 'D-'\n  }\n}\n\nconst getLetterGradeByGrade = (grade) => {\n  if (grade >= 3.7) {\n    return 'A'\n  } else if (grade >= 3.3) {\n    return 'A-'\n  } else if (grade >= 3.0) {\n    return 'B+ed'\n  } else if (grade >= 2.7) {\n    return 'B'\n  } else if (grade >= 2.3) {\n    return 'B-'\n  } else if (grade >= 2.0) {\n    return 'C+ed'\n  } else if (grade >= 1.7) {\n    return 'C'\n  } else if (grade >= 1.3) {\n    return 'C-'\n  } else if (grade >= 1.0) {\n    return 'D+'\n  } else if (grade >= 0.7) {\n    return 'D'\n  } else {\n    return 'D-'\n  }\n}\n\nconst getLetterGradeByGradeRange = (gradeRange) => {\n  if (gradeRange[0] >= 3.7) {\n    return 'A'\n  } else if (gradeRange[0] >= 3.3) {\n    return 'A-'\n  } else if (gradeRange[0] >= 3.0) {\n    return 'B+ed'\n  } else if (gradeRange[0] >= 2.7) {\n    return 'B'\n  } else if (gradeRange[0] >= 2.3) {\n    return 'B-'\n  } else if (gradeRange[0] >= 2.0) {\n    return 'C+ed'\n  } else if (gradeRange[0] >= 1.7) {\n    return 'C'\n  } else if (gradeRange[0] >= 1.3) {\n    return 'C-'\n  } else if (gradeRange[0] >= 1.0) {\n    return 'D+'\n  } else if (gradeRange[0] >= 0.7) {\n    return 'D'\n  } else {\n    return 'D-'\n  }\n}\n\nconst getLetterGradeByPercent = (percent) => {\n  let grade = 3.7 * percent\n  if (grade >= 3.7) {\n    return 'A'\n  } else if (grade >= 3.3) {\n    return 'A-'\n  } else if (grade >= 3.0) {\n    return 'B+ed'\n  } else if (grade >= 2.7) {\n    return 'B'\n  } else if (grade >= 2.3) {\n    return 'B-'\n  } else if (grade >= 2.0) {\n    return 'C+ed'\n  } else if (grade >= 1.7) {\n    return 'C'\n  } else if (grade >= 1.3) {\n    return 'C-'\n  } else if (grade >= 1.0) {\n    return 'D+'\n  } else if (grade >= 0.7) {\n    return 'D'\n  } else {\n    return 'D-'\n  }\n}\n\nconst getLetterGradeByPercentRange = (percentRange) => {\n  if (percentRange[0] >= 3.7) {\n    return 'A'\n  } else if (percentRange[0] >= 3.3) {\n    return 'A-'\n  } else if (percentRange[0] >= 3.0) {\n    return 'B+ed'\n  } else if (percentRange[0] >= 2.7) {\n    return 'B'\n  } else if (percentRange[0] >= 2.3) {\n    return 'B-'\n  } else if (percentRange[0] >= 2.0) {\n    return 'C+ed'\n  } else if (percentRange[0] >= 1.7) {\n    return 'C'\n  } else if (percentRange[0] >= 1.3) {\n    return 'C-'\n  } else if (percentRange[0] >= 1.0) {\n    return 'D+'\n  } else if (percentRange[0"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (!string) return false;\n  let num = 1;\n  for (let i = 2; i <= string.length; i++) {\n    if (string.indexOf(string.charAt(i - 1)) === -1) num++;\n  }\n  return (num % 2 === 0)? false : true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n    let a = 0, b = 0;\n    while (n > 0) {\n        a += Math.pow(10, n%10);\n        n = Math.floor(n/10);\n    }\n    while (a > 0) {\n        b += a%10 === 1;\n        a = Math.floor(a/10);\n    }\n    return b;\n}\n\nexport default startsOneEnds;\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": false, "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const result = [];\n  for (let i = 0; i < N; i++) {\n    result.push(Math.floor(N / 10) % 2);\n    N = N % 10;\n  }\n  return result.join('');\n};\n\nconsole.log(solve(147));<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        result += lst[i];\n        if (i % 2 === 1) {\n            lst[i] = result;\n            result = 0;\n        }\n    }\n    return result;\n};\n\nconst add2 = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        result += lst[i];\n        lst[i] = result;\n        result = 0;\n    }\n    return result;\n};\n\nconst add3 = (lst) => {\n    let result = 0;\n    let index = 0;\n    for (let i = 0; i < lst.length; i++) {\n        result += lst[i];\n        if (index % 2 === 0) {\n            lst[i] = result;\n            result = 0;\n        }\n        index++;\n    }\n    return result;\n};\n\nconst add4 = (lst) => {\n    let result = 0;\n    let index = 0;\n    for (let i = 0; i < lst.length; i++) {\n        result += lst[i];\n        if (index % 2 === 0) {\n            lst[i] = result;\n            result = 0;\n        }\n        index++;\n    }\n    return result;\n};\n\nconst add5 = (lst) => {\n    let result = 0;\n    let index = 0;\n    let isOdd = true;\n    for (let i = 0; i < lst.length; i++) {\n        result += lst[i];\n        if (index % 2 === 0) {\n            lst[i] = result;\n            result = 0;\n        }\n        index++;\n        if (isOdd) {\n            isOdd = false;\n        }\n    }\n    return result;\n};\n\nconst add6 = (lst) => {\n    let result = 0;\n    let index = 0;\n    let isOdd = false;\n    for (let i = 0; i < lst.length; i++) {\n        result += lst[i];\n        if (index % 2 === 0) {\n            lst[i] = result;\n            result = 0;\n        }\n        index++;\n        if (!isOdd) {\n            isOdd = true;\n        }\n    }\n    return result;\n};\n\nconst add7 = (lst) => {\n    let result = 0;\n    let index = 0;\n    let isOdd = false;\n    for (let i = 0; i < lst.length; i++) {\n        result += lst[i];\n        if (index % 2 === 0) {\n            lst[i] = result;\n            result = 0;\n        }\n        index++;\n        if (!isOdd) {\n            isOdd = true;\n        }\n    }\n    return result;\n};\n\nconst add8 = (lst) => {\n    let result = 0;\n    let index = 0;\n    let isOdd = true;\n    for (let i = 0; i < lst.length; i++) {\n        result += lst[i];\n        if (index % 2 === 0) {\n            lst[i] = result;\n            result = 0;\n        }\n        index++;\n        if (!isOdd) {\n            isOdd = false;\n        }\n    }\n    return result;\n};\n\nconst add9 = (lst) => {\n    let result = 0;\n    let index = 0;\n    let isOdd = true;\n    for (let i = 0; i < lst.length; i++) {\n        result += lst[i];\n        if (index % 2 === 0) {\n            lst[i] = result;\n            result = 0;\n        }\n        index++;\n        if (!isOdd) {\n            isOdd = true;\n        }\n    }\n    return result;\n};\n\nconst add10 = (lst) => {\n    let result = 0;\n    let index = 0;\n    let isOdd = false;\n    for (let i = 0; i < lst.length; i++) {\n        result += lst[i];\n        if (index % 2 === 0) {\n            lst[i] = result;\n            result = 0;\n        }\n        index++;\n        if (!isOdd) {\n            isOdd = true;\n        }\n    }\n    return result;\n};\n\nconst add11 = (lst) => {\n    let result = 0;\n    let index = 0;\n    let isOdd = false;\n    for (let i = 0; i < lst.length; i++) {\n        result += lst[i];\n        if (index % 2 === 0) {\n            lst[i] = result;\n            result = 0;\n        }\n        index++;\n        if (!isOdd) {\n            isOdd = true;\n        }\n    }\n    return result;\n};\n\nconst add12 = (lst) => {\n    let result = 0;\n    let index = 0;\n    let isOdd = false;\n    for (let i = 0; i < lst.length; i++) {\n        result += lst[i];\n        if (index % 2 === 0) {\n            lst[i] = result;\n            result = 0;\n        }\n        index++;\n        if (!isOdd) {\n            isOdd = true;\n        }\n    }\n    return result;\n};\n\nconst add13 = (lst) => {\n    let result = 0;\n    let index = 0;\n    let isOdd = false;\n    for (let i = 0; i < lst.length; i++) {\n        result += lst[i];\n        if (index % 2 === 0) {\n            lst[i] = result;\n            result = 0;\n        }\n        index++;\n        if (!isOdd) {\n            isOdd = true;\n        }\n    }"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const result = s.replace(/[a-zA-Z]/g, (e) => {\n    const index = e.charCodeAt(0) - e.charCodeAt(1);\n    return String.fromCharCode(index + 32);\n  });\n  return result;\n};\n\nconsole.log(antiShuffle('Hello World!!!'));\n\n/*\n  Write a function that takes a string as an argument and returns a string with all \n  punctuation removed. \n  Punctuation is considered to be any character which appears at the end of a line or at \n  the end of a word.\n\n  Example:\n  removePunctuation('Hello world!') returns 'Hello world'\n  removePunctuation('Hello, world!') returns 'Hello world'\n  removePunctuation('Hello! world!') returns 'Hello world'\n  removePunctuation('Hello? world!') returns 'Hello world'\n  removePunctuation('Hello.') returns 'Hello'\n  removePunctuation('Hello') returns 'Hello'\n  removePunctuation('Hello?') returns 'Hello'\n  removePunctuation('Hello!') returns 'Hello'\n  removePunctuation('Hello!') returns 'Hello'\n  removePunctuation('Hello, world!!!') returns 'Hello, world!!!'\n  removePunctuation('Hello!!!') returns 'Hello!!!'\n  removePunctuation('Hello!!!') returns 'Hello!!!'\n  */\nconst removePunctuation = (s) => {\n  const result = s.replace(/[^A-Za-z0-9!#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\\s]/g, '');\n  return result;\n};\n\nconsole.log(removePunctuation('Hello? world!'));\n\n/*\n  Write a function that takes a string as an argument and returns a string with all \n  whitespace characters removed. \n  Whitespace characters are any character which appear at the end of a line or at \n  the end of a word.\n\n  Example:\n  removeWhitespace('  Hello World!') returns 'Hello World'\n  removeWhitespace(' Hello World!') returns 'Hello World'\n  removeWhitespace('Hello World!') returns 'Hello World'\n  removeWhitespace('Hello World! ') returns 'Hello World!'\n  removeWhitespace('Hello World!!!') returns 'Hello World!!!'\n  removeWhitespace('Hello World!!! ') returns 'Hello World!!!'\n  removeWhitespace('Hello World!!!') returns 'Hello World!!!'\n  removeWhitespace('Hello World!!! ') returns 'Hello World!!!'\n  removeWhitespace('  Hello World!!!') returns 'Hello World!!!'\n  removeWhitespace('Hello World!!!') returns 'Hello World!!!'\n  removeWhitespace('Hello World!!! ') returns 'Hello World!!!'\n  removeWhitespace('Hello World!!!') returns 'Hello World!!!'\n  removeWhitespace('Hello World!!! ') returns 'Hello World!!!'\n  */\nconst removeWhitespace = (s) => {\n  const result = s.replace(/\\s+$/, '');\n  return result;\n};\n\nconsole.log(removeWhitespace('  Hello World!'));\n\n/*\n  Write a function that takes a string as an argument and returns a string with all \n  punctuation removed and any whitespace characters removed. \n  Punctuation and whitespace characters are any character which appears at the end of a line or at \n  the end of a word.\n\n  Example:\n  removeWhitespacePunctuation('  Hello World!') returns 'Hello World'\n  removeWhitespacePunctuation(' Hello World!') returns 'Hello World'\n  removeWhitespacePunctuation('Hello World!') returns 'Hello World'\n  removeWhitespacePunctuation('Hello World! ') returns 'Hello World!'\n  removeWhitespacePunctuation('Hello World!!!') returns 'Hello World!!!'\n  removeWhitespacePunctuation('Hello World!!! ') returns 'Hello World!!!'\n  removeWhitespacePunctuation('Hello World!!!') returns 'Hello World!!!'\n  removeWhitespacePunctuation('Hello World!!! ') returns 'Hello World!!!'\n  removeWhitespacePunctuation('  Hello World!!!') returns 'Hello World!!!'\n  removeWhitespacePunctuation('Hello World!!!') returns 'Hello World!!!'\n  removeWhitespacePunctuation('Hello World!!! ') returns 'Hello World!!!'\n  removeWhitespacePunctuation('Hello World!!!') returns 'Hello World!!!'\n  removeWhitespacePunctuation('Hello World!!! ') returns 'Hello World!!!'\n  */\nconst removeWhitespacePunctuation = (s) => {\n  const result = removePunctuation(removeWhitespace(s));\n  return result;\n};\n\nconsole.log(removeWhitespacePunctuation('  Hello World!'));\n\n/*\n  Write a function that takes a string as an argument and returns a string with all \n  punctuation removed and any whitespace characters removed. \n  Punctuation and whitespace characters are any character which appears at the end of a line or at \n  the end of a word.\n\n  Example:\n  removeWhitespacePunctuation('  Hello World!') returns 'Hello World'\n  removeWhitespacePunctuation(' Hello World!') returns 'Hello World'\n  removeWhitespacePunctuation('Hello World!') returns 'Hello World'\n  removeWhitespacePunctuation('Hello World! ') returns 'Hello World!'\n  removeWhitespacePunctuation('Hello World!!!') returns 'Hello World!!!'\n  removeWhitespacePunctuation('Hello World!!! ') returns 'Hello World!!!'\n  removeWhitespacePunctuation('Hello World!!!') returns 'Hello World!!!'\n  removeWhitespacePunctuation('"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const coords = lst.slice().sort((a, b) => a[0] - b[0]);\n  const rowCoords = coords.slice(x, coords.length).sort((a, b) => b[1] - a[1]);\n  return rowCoords;\n};\n\nconst getRow = (lst, x) => {\n  const coords = lst.slice().sort((a, b) => a[0] - b[0]);\n  const rowCoords = coords.slice(x, coords.length).sort((a, b) => b[1] - a[1]);\n  return rowCoords;\n};\n\nconst getRow = (lst, x) => {\n  const coords = lst.slice().sort((a, b) => a[0] - b[0]);\n  const rowCoords = coords.slice(x, coords.length).sort((a, b) => b[1] - a[1]);\n  return rowCoords;\n};\n\nconst getRow = (lst, x) => {\n  const coords = lst.slice().sort((a, b) => a[0] - b[0]);\n  const rowCoords = coords.slice(x, coords.length).sort((a, b) => b[1] - a[1]);\n  return rowCoords;\n};\n\nconst getRow = (lst, x) => {\n  const coords = lst.slice().sort((a, b) => a[0] - b[0]);\n  const rowCoords = coords.slice(x, coords.length).sort((a, b) => b[1] - a[1]);\n  return rowCoords;\n};\n\nconst getRow = (lst, x) => {\n  const coords = lst.slice().sort((a, b) => a[0] - b[0]);\n  const rowCoords = coords.slice(x, coords.length).sort((a, b) => b[1] - a[1]);\n  return rowCoords;\n};\n\nconst getRow = (lst, x) => {\n  const coords = lst.slice().sort((a, b) => a[0] - b[0]);\n  const rowCoords = coords.slice(x, coords.length).sort((a, b) => b[1] - a[1]);\n  return rowCoords;\n};\n\nconst getRow = (lst, x) => {\n  const coords = lst.slice().sort((a, b) => a[0] - b[0]);\n  const rowCoords = coords.slice(x, coords.length).sort((a, b) => b[1] - a[1]);\n  return rowCoords;\n};\n\nconst getRow = (lst, x) => {\n  const coords = lst.slice().sort((a, b) => a[0] - b[0]);\n  const rowCoords = coords.slice(x, coords.length).sort((a, b) => b[1] - a[1]);\n  return rowCoords;\n};\n\nconst getRow = (lst, x) => {\n  const coords = lst.slice().sort((a, b) => a[0] - b[0]);\n  const rowCoords = coords.slice(x, coords.length).sort((a, b) => b[1] - a[1]);\n  return rowCoords;\n};\n\nconst getRow = (lst, x) => {\n  const coords = lst.slice().sort((a, b) => a[0] - b[0]);\n  const rowCoords = coords.slice(x, coords.length).sort((a, b) => b[1] - a[1]);\n  return rowCoords;\n};\n\nconst getRow = (lst, x) => {\n  const coords = lst.slice().sort((a, b) => a[0] - b[0]);\n  const rowCoords = coords.slice(x, coords.length).sort((a, b) => b[1] - a[1]);\n  return rowCoords;\n};\n\nconst getRow = (lst, x) => {\n  const coords = lst.slice().sort((a, b) => a[0] - b[0]);\n  const rowCoords = coords.slice(x, coords.length).sort((a, b) => b[1] - a[1]);\n  return rowCoords;\n};\n\nconst getRow = (lst, x) => {\n  const coords = lst.slice().sort((a, b) => a[0] - b[0]);\n  const rowCoords = coords.slice(x, coords.length).sort((a, b) => b[1] - a[1]);\n  return rowCoords;\n};\n\nconst getRow = (lst, x) => {\n  const coords = lst.slice().sort((a, b) => a[0] - b[0]);\n  const rowCoords = coords.slice(x, coords.length).sort((a, b) => b[1] - a[1]);\n  return rowCoords;\n};\n\n"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (array.length === 0) {\n    return array;\n  }\n\n  let n = array.length;\n  let min = 0;\n  let max = n - 1;\n  while (min <= max) {\n    const mid = Math.floor((min + max) / 2);\n    const sum = array[mid] + array[min] + array[max];\n    if (sum % 2 === 1) {\n      swap(array, mid, min);\n      min = mid + 1;\n    } else {\n      swap(array, max, mid);\n      max = mid - 1;\n    }\n  }\n\n  return array;\n};\n\nexport default sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let n = s.length;\n  let s1 = s.split('');\n  let s2 = [];\n  \n  for (let i = 0; i < n; i++) {\n    s2.push(s1[n - i - 1].concat(s1[i]));\n  }\n\n  let res = '';\n  for (let i = 0; i < n; i++) {\n    res += s2[i];\n  }\n\n  return res;\n}\n\nlet result = encrypt('abcdefg');\nconsole.log(result);\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n    if(lst.length===0) return null\n    if(lst.length===1) return lst[0]\n    const min = lst[0]\n    for(let i = 1; i < lst.length; i++){\n        const current = lst[i]\n        if(current<min) min = current\n    }\n    return min\n}\n\nnextSmallest([1, 2, 3, 4, 5]) // 2\nnextSmallest([5, 1, 4, 3, 2]) // 2\nnextSmallest([]) // null\nnextSmallest([1, 1]) // null\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const count = 0\n  const words = S.split(\" \")\n  words.forEach((word) => {\n    if (word.toLowerCase() === \"i\") {\n      count++\n    }\n  })\n  return count > 0\n}\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\nfunction assert(test, message, test_number) {\n  if (!test) {\n    console.log(`${message} (${test_number})`)\n    process.exit(1)\n  }\n}\n\nassert(\n  isBored(\"Hello world\"),\n  \"isBored(\\\"Hello world\\\") should return 0.\",\n  \"1. \"\n)\n\nassert(\n  isBored(\"The sky is blue. The sun is shining. I love this weather\"),\n  \"isBored(\\\"The sky is blue. The sun is shining. I love this weather\\\") should return 1.\",\n  \"2. \"\n)\n\nassert(\n  isBored(\"What do you think about Life?\"),\n  \"isBored(\\\"What do you think about Life?\\\") should return 0.\",\n  \"3. \"\n)\n\nassert(\n  isBored(\"I am bored.\"),\n  \"isBored(\\\"I am bored.\\\") should return 1.\",\n  \"4. \"\n)\n\nassert(\n  isBored(\"I am not bored.\"),\n  \"isBored(\\\"I am not bored.\\\") should return 0.\",\n  \"5. \"\n)\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const [xNum, yNum, zNum] = [x, y, z];\n  return ((xNum - yNum) % (xNum - zNum) === 0 && xNum % 1 === 0 && yNum % 1 === 0 && zNum % 1 === 0);\n};\n\nexport default anyInt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    let encoded = '';\n    for (let i = 0; i < message.length; i++) {\n        let current = message[i];\n        if (current.toUpperCase()!== current) {\n            current = current.toUpperCase();\n        }\n        if (isVowel(current)) {\n            let next = getNextVowel(current);\n            encoded += next;\n        } else {\n            encoded += current;\n        }\n    }\n    return encoded;\n};\n\nfunction isVowel(letter) {\n    return letter === 'E' || letter === 'A' || letter === 'I' || letter === 'O';\n}\n\nfunction getNextVowel(letter) {\n    switch (letter) {\n        case 'E': return 'I';\n        case 'A': return 'O';\n        case 'I': return 'U';\n        case 'O': return 'Y';\n        default: return '';\n    }\n}\n\nconsole.log(encode('This is a message'));\nconsole.log(encode('test'));\nconsole.log(encode('The quick brown fox jumped over the lazy dog'));\nconsole.log(encode('a message'));\nconsole.log(encode('an amessage'));\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let ret = 1;\n  let num = 0;\n  for (let i = 0; i < lst.length; i++) {\n    num += lst[i];\n    while (num % 10 == 0) {\n      ret *= 10;\n      num /= 10;\n    }\n  }\n  return ret;\n}\n\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let result = true\n  for (let key in dict) {\n    if (!dict[key].toUpperCase() == dict[key].toLowerCase()) {\n      result = false\n      break\n    }\n  }\n  return result\n}\n\n// check the number of keys in a dictionary.\nconst checkDictCount = (dict) => {\n  let count = 0\n  for (let key in dict) {\n    count++\n  }\n  return count\n}\n\n// check if a dictionary is empty.\nconst checkDictEmpty = (dict) => {\n  return count == 0\n}\n\n// check if a dictionary contains the given key.\nconst checkDictContains = (dict, key) => {\n  return key in dict\n}\n\n// check if a dictionary contains all given keys.\nconst checkDictContainsAll = (dict, keys) => {\n  let result = true\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i] in dict) {\n      result = true\n    } else {\n      result = false\n      break\n    }\n  }\n  return result\n}\n\n// check if a dictionary contains none of the given keys.\nconst checkDictContainsNone = (dict, keys) => {\n  let result = true\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i] in dict) {\n      result = false\n      break\n    }\n  }\n  return result\n}\n\n// check if a dictionary contains any of the given keys.\nconst checkDictContainsAny = (dict, keys) => {\n  let result = false\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i] in dict) {\n      result = true\n      break\n    }\n  }\n  return result\n}\n\n// check if a dictionary contains all of the given keys.\nconst checkDictContainsAll = (dict, keys) => {\n  let result = true\n  for (let i = 0; i < keys.length; i++) {\n    if (!(keys[i] in dict)) {\n      result = false\n      break\n    }\n  }\n  return result\n}\n\n// check if a dictionary contains none of the given keys.\nconst checkDictContainsNone = (dict, keys) => {\n  let result = true\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i] in dict) {\n      result = false\n      break\n    }\n  }\n  return result\n}\n\n// check if a dictionary contains any of the given keys.\nconst checkDictContainsAny = (dict, keys) => {\n  let result = false\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i] in dict) {\n      result = true\n      break\n    }\n  }\n  return result\n}\n\nmodule.exports = {\n  checkDictCase,\n  checkDictCount,\n  checkDictEmpty,\n  checkDictContains,\n  checkDictContainsAll,\n  checkDictContainsNone,\n  checkDictContainsAny\n}<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const a = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      a.push(i)\n    }\n  }\n  return a\n}\n\nconst isPrime = (n) => {\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n    if (isNaN(a) || isNaN(b)) {\n        throw new Error(\"Cannot multiply \" + a + \" and \" + b);\n    }\n    const n = Math.max(a, b);\n    const result = n * (n + 1) / 2;\n    return result;\n};\n\nmodule.exports = multiply;<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let index = 0\n  let upperCount = 0\n\n  while (index < s.length) {\n    if (s[index].toUpperCase() === s[index]) {\n      upperCount++\n    }\n    index++\n  }\n\n  return upperCount\n}\n\n// Test\ncountUpper('aBCdEf')\ncountUpper('abcdefg')\ncountUpper('dBBE')\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n    return Math.round(parseFloat(value)) + (Math.sign(parseFloat(value)) * 0.1);\n};\n\nconsole.log(closestInteger(\"-10\"));\nconsole.log(closestInteger(\"-15\"));\nconsole.log(closestInteger(\"15\"));\nconsole.log(closestInteger(\"15.5\"));\nconsole.log(closestInteger(\"-15.5\"));\nconsole.log(closestInteger(\"15.6\"));\nconsole.log(closestInteger(\"-15.6\"));\nconsole.log(closestInteger(\"15.9\"));\nconsole.log(closestInteger(\"-15.9\"));\nconsole.log(closestInteger(\"15.0\"));\nconsole.log(closestInteger(\"-15.0\"));\nconsole.log(closestInteger(\"15.1\"));\nconsole.log(closestInteger(\"-15.1\"));\nconsole.log(closestInteger(\"15.2\"));\nconsole.log(closestInteger(\"-15.2\"));\nconsole.log(closestInteger(\"15.3\"));\nconsole.log(closestInteger(\"-15.3\"));\nconsole.log(closestInteger(\"15.4\"));\nconsole.log(closestInteger(\"-15.4\"));\nconsole.log(closestInteger(\"15.5\"));\nconsole.log(closestInteger(\"-15.5\"));\nconsole.log(closestInteger(\"15.6\"));\nconsole.log(closestInteger(\"-15.6\"));\nconsole.log(closestInteger(\"15.7\"));\nconsole.log(closestInteger(\"-15.7\"));\nconsole.log(closestInteger(\"15.8\"));\nconsole.log(closestInteger(\"-15.8\"));\nconsole.log(closestInteger(\"15.9\"));\nconsole.log(closestInteger(\"-15.9\"));\nconsole.log(closestInteger(\"15.1\"));\nconsole.log(closestInteger(\"-15.1\"));\nconsole.log(closestInteger(\"15.2\"));\nconsole.log(closestInteger(\"-15.2\"));\nconsole.log(closestInteger(\"15.3\"));\nconsole.log(closestInteger(\"-15.3\"));\nconsole.log(closestInteger(\"15.4\"));\nconsole.log(closestInteger(\"-15.4\"));\nconsole.log(closestInteger(\"15.5\"));\nconsole.log(closestInteger(\"-15.5\"));\nconsole.log(closestInteger(\"15.6\"));\nconsole.log(closestInteger(\"-15.6\"));\nconsole.log(closestInteger(\"15.7\"));\nconsole.log(closestInteger(\"-15.7\"));\nconsole.log(closestInteger(\"15.8\"));\nconsole.log(closestInteger(\"-15.8\"));\nconsole.log(closestInteger(\"15.9\"));\nconsole.log(closestInteger(\"-15.9\"));\nconsole.log(closestInteger(\"15\"));\nconsole.log(closestInteger(\"-15\"));\nconsole.log(closestInteger(\"15.1\"));\nconsole.log(closestInteger(\"-15.1\"));\nconsole.log(closestInteger(\"15.2\"));\nconsole.log(closestInteger(\"-15.2\"));\nconsole.log(closestInteger(\"15.3\"));\nconsole.log(closestInteger(\"-15.3\"));\nconsole.log(closestInteger(\"15.4\"));\nconsole.log(closestInteger(\"-15.4\"));\nconsole.log(closestInteger(\"15.5\"));\nconsole.log(closestInteger(\"-15.5\"));\nconsole.log(closestInteger(\"15.6\"));\nconsole.log(closestInteger(\"-15.6\"));\nconsole.log(closestInteger(\"15.7\"));\nconsole.log(closestInteger(\"-15.7\"));\nconsole.log(closestInteger(\"15.8\"));\nconsole.log(closestInteger(\"-15.8\"));\nconsole.log(closestInteger(\"15.9\"));\nconsole.log(closestInteger(\"-15.9\"));\nconsole.log(closestInteger(\"15\"));\nconsole.log(closestInteger(\"-15\"));\nconsole.log(closestInteger(\"15.1\"));\nconsole.log(closestInteger(\"-15.1\"));\nconsole.log(closestInteger(\"15.2\"));\nconsole.log(closestInteger(\"-15.2\"));\nconsole.log(closestInteger(\"15.3\"));\nconsole.log(closestInteger(\"-15.3\"));\nconsole.log(closestInteger(\"15.4\"));\nconsole.log(closestInteger(\"-15.4\"));\nconsole.log(closestInteger(\"15.5\"));\nconsole.log(closestInteger(\"-15.5\"));\nconsole.log(closestInteger(\"15.6\"));\nconsole.log(closestInteger(\"-15.6\"));\nconsole.log(closestInteger(\"15.7\"));\nconsole.log(closestInteger(\"-15.7\"));\nconsole.log(closestInteger(\"15.8\"));\nconsole.log(closestInteger(\"-15.8\"));\nconsole.log(closestInteger(\"15.9\"));\nconsole.log(closestInteger(\"-15.9\"));\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n    return (new Array(n + 1)).fill().map((x, i) => i + 1);\n}\n\n// Test\n\nconst assert = require(\"assert\");\n\nconst tests = [\n    {\n        \"description\": \"1 level\",\n        \"expected\": [1],\n        \"input\": [1]\n    },\n    {\n        \"description\": \"2 levels\",\n        \"expected\": [1, 2],\n        \"input\": [1, 2]\n    },\n    {\n        \"description\": \"3 levels\",\n        \"expected\": [1, 2, 3],\n        \"input\": [1, 2, 3]\n    },\n    {\n        \"description\": \"4 levels\",\n        \"expected\": [1, 2, 3, 4],\n        \"input\": [1, 2, 3, 4]\n    },\n    {\n        \"description\": \"5 levels\",\n        \"expected\": [1, 2, 3, 4, 5],\n        \"input\": [1, 2, 3, 4, 5]\n    },\n    {\n        \"description\": \"6 levels\",\n        \"expected\": [1, 2, 3, 4, 5, 6],\n        \"input\": [1, 2, 3, 4, 5, 6]\n    },\n    {\n        \"description\": \"7 levels\",\n        \"expected\": [1, 2, 3, 4, 5, 6, 7],\n        \"input\": [1, 2, 3, 4, 5, 6, 7]\n    },\n    {\n        \"description\": \"8 levels\",\n        \"expected\": [1, 2, 3, 4, 5, 6, 7, 8],\n        \"input\": [1, 2, 3, 4, 5, 6, 7, 8]\n    },\n    {\n        \"description\": \"9 levels\",\n        \"expected\": [1, 2, 3, 4, 5, 6, 7, 8, 9],\n        \"input\": [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    }\n];\n\ntests.forEach((test) => {\n    it(test.description, () => {\n        assert.deepEqual(makeAPile(test.input[0]), test.expected);\n    });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const sWords = s.split(/[\\s,]+/g);\n  return sWords.filter(s => s!== '');\n}\n\n/*\n  You were given a string of numbers separated by commas or spaces. Your task was \n   to split the string into numbers and return an array of the numbers.\n  \n  For example:\n  numbersString(\"1, 2, 3, 4, 5, 6\") == [1, 2, 3, 4, 5, 6]\n  */\nconst numbersString = (s) => {\n  const sNumbers = s.split(/[\\s,]+/g);\n  return sNumbers.filter(s => s!== '');\n}\n\n/*\n  You were given a string of numbers separated by commas or spaces. Your task was \n   to split the string into numbers and return an array of the numbers.\n  \n  For example:\n  numbersString(\"1, 2, 3, 4, 5, 6\") == [1, 2, 3, 4, 5, 6]\n  */\nconst numbersString = (s) => {\n  const sNumbers = s.split(/[\\s,]+/g);\n  return sNumbers.filter(s => s!== '');\n}\n\n/*\n  You were given a string of numbers separated by commas or spaces. Your task was \n   to split the string into numbers and return an array of the numbers.\n  \n  For example:\n  numbersString(\"1, 2, 3, 4, 5, 6\") == [1, 2, 3, 4, 5, 6]\n  */\nconst numbersString = (s) => {\n  const sNumbers = s.split(/[\\s,]+/g);\n  return sNumbers.filter(s => s!== '');\n}\n\n/*\n  You were given a string of numbers separated by commas or spaces. Your task was \n   to split the string into numbers and return an array of the numbers.\n  \n  For example:\n  numbersString(\"1, 2, 3, 4, 5, 6\") == [1, 2, 3, 4, 5, 6]\n  */\nconst numbersString = (s) => {\n  const sNumbers = s.split(/[\\s,]+/g);\n  return sNumbers.filter(s => s!== '');\n}\n\n/*\n  You were given a string of numbers separated by commas or spaces. Your task was \n   to split the string into numbers and return an array of the numbers.\n  \n  For example:\n  numbersString(\"1, 2, 3, 4, 5, 6\") == [1, 2, 3, 4, 5, 6]\n  */\nconst numbersString = (s) => {\n  const sNumbers = s.split(/[\\s,]+/g);\n  return sNumbers.filter(s => s!== '');\n}\n\n/*\n  You were given a string of numbers separated by commas or spaces. Your task was \n   to split the string into numbers and return an array of the numbers.\n  \n  For example:\n  numbersString(\"1, 2, 3, 4, 5, 6\") == [1, 2, 3, 4, 5, 6]\n  */\nconst numbersString = (s) => {\n  const sNumbers = s.split(/[\\s,]+/g);\n  return sNumbers.filter(s => s!== '');\n}\n\n/*\n  You were given a string of numbers separated by commas or spaces. Your task was \n   to split the string into numbers and return an array of the numbers.\n  \n  For example:\n  numbersString(\"1, 2, 3, 4, 5, 6\") == [1, 2, 3, 4, 5, 6]\n  */\nconst numbersString = (s) => {\n  const sNumbers = s.split(/[\\s,]+/g);\n  return sNumbers.filter(s => s!== '');\n}\n\n/*\n  You were given a string of numbers separated by commas or spaces. Your task was \n   to split the string into numbers and return an array of the numbers.\n  \n  For example:\n  numbersString(\"1, 2, 3, 4, 5, 6\") == [1, 2, 3, 4, 5, 6]\n  */\nconst numbersString = (s) => {\n  const sNumbers = s.split(/[\\s,]+/g);\n  return sNumbers.filter(s => s!== '');\n}\n\n/*\n  You were given a string of numbers separated by commas or spaces. Your task was \n   to split the string into numbers and return an array of the numbers.\n  \n  For example:\n  numbersString(\"1, 2, 3, 4, 5, 6\") == [1, 2, 3, 4, 5, 6]\n  */\nconst numbersString = (s) => {\n  const sNumbers = s.split(/[\\s,]+/g);\n  return sNumbers.filter(s => s!== '');\n}\n\n/*\n  You were given a string of numbers separated by commas or spaces. Your task was \n   to split the string into numbers and return an array of the numbers.\n  \n  For example:\n  numbersString(\"1, 2, 3, 4, 5, 6\") == [1, 2, 3, 4, 5, 6]\n  */\nconst numbersString = (s) => {\n  const sNumbers = s.split(/[\\s,]+/g);\n  return sNumbers.filter(s => s!== '');\n}\n\n/*\n  You were given a string of numbers separated by commas or spaces. Your task was \n   to split the string into numbers and return an array of the numbers.\n  \n  For example:\n  numbersString(\"1, 2, 3, 4, 5, 6\") == [1, 2, 3, 4, 5, 6]\n  */\nconst numbersString = (s) => {\n  const sNumbers = s.split(/[\\s,]+/g"}
{"task_id": "JavaScript/102", "prompt": "/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n\n  //check if x > y\n  if (x > y) {\n    return chooseNum(y, x);\n  }\n\n  const n = (x + y) / 2;\n  if (n % 2 === 0) {\n    return n;\n  } else {\n    return -1;\n  }\n};\n\n//console.log(chooseNum(12, 15));\n//console.log(chooseNum(13, 12));\n\n//console.log(chooseNum(100, 200));\n//console.log(chooseNum(200, 300));\n\n//console.log(chooseNum(1000, 2000));\n//console.log(chooseNum(2000, 3000));\n\n//console.log(chooseNum(1000, 3000));\n//console.log(chooseNum(2000, 3000));\n\n//console.log(chooseNum(100, 200));\n//console.log(chooseNum(200, 300));\n\n//console.log(chooseNum(1000, 2000));\n//console.log(chooseNum(2000, 3000));\n\n//console.log(chooseNum(100, 200));\n//console.log(chooseNum(200, 300));\n\n//console.log(chooseNum(1000, 2000));\n//console.log(chooseNum(2000, 3000));\n\n//console.log(chooseNum(100, 200));\n//console.log(chooseNum(200, 300));\n\n//console.log(chooseNum(1000, 2000));\n//console.log(chooseNum(2000, 3000));\n\n//console.log(chooseNum(100, 200));\n//console.log(chooseNum(200, 300));\n\n//console.log(chooseNum(1000, 2000));\n//console.log(chooseNum(2000, 3000));\n\n//console.log(chooseNum(100, 200));\n//console.log(chooseNum(200, 300));\n\n//console.log(chooseNum(1000, 2000));\n//console.log(chooseNum(2000, 3000));\n\n//console.log(chooseNum(100, 200));\n//console.log(chooseNum(200, 300));\n\n//console.log(chooseNum(1000, 2000));\n//console.log(chooseNum(2000, 3000));\n\n//console.log(chooseNum(100, 200));\n//console.log(chooseNum(200, 300));\n\n//console.log(chooseNum(1000, 2000));\n//console.log(chooseNum(2000, 3000));\n\n//console.log(chooseNum(100, 200));\n//console.log(chooseNum(200, 300));\n\n//console.log(chooseNum(1000, 2000));\n//console.log(chooseNum(2000, 3000));\n\n//console.log(chooseNum(100, 200));\n//console.log(chooseNum(200, 300));\n\n//console.log(chooseNum(1000, 2000));\n//console.log(chooseNum(2000, 3000));\n\n//console.log(chooseNum(100, 200));\n//console.log(chooseNum(200, 300));\n\n//console.log(chooseNum(1000, 2000));\n//console.log(chooseNum(2000, 3000));\n\n//console.log(chooseNum(100, 200));\n//console.log(chooseNum(200, 300));\n\n//console.log(chooseNum(1000, 2000));\n//console.log(chooseNum(2000, 3000));\n\n//console.log(chooseNum(100, 200));\n//console.log(chooseNum(200, 300));\n\n//console.log(chooseNum(1000, 2000));\n//console.log(chooseNum(2000, 3000));\n\n//console.log(chooseNum(100, 200));\n//console.log(chooseNum(200, 300));\n\n//console.log(chooseNum(1000, 2000));\n//console.log(chooseNum(2000, 3000));\n\n//console.log(chooseNum(100, 200));\n//console.log(chooseNum(200, 300));\n\n//console.log(chooseNum(1000, 2000));\n//console.log(chooseNum(2000, 3000));\n\n//console.log(chooseNum(100, 200));\n//console.log(chooseNum(200, 300));\n\n//console.log(chooseNum(1000, 2000));\n//console.log(chooseNum(2000, 3000));\n\n//console.log(chooseNum(100, 200));\n//console.log(chooseNum(200, 300));\n\n//console.log(chooseNum(1000, 2000));\n//console.log(chooseNum(2000, 3000));\n\n//console.log(chooseNum(100, 200));\n//console.log(chooseNum(200, 300));\n\n//console.log(chooseNum(1000, 2000));\n//console.log(chooseNum(2000, 3000));\n\n//console.log(chooseNum(100, 200));\n//console.log(chooseNum(200, 300));\n\n//console.log(chooseNum(1000, 2000));\n//console.log(chooseNum(2000, 3000));\n\n//console.log(chooseNum(100, 200));\n//console.log(chooseNum(200, 300));\n\n//console.log(chooseNum(1000, 2000));\n//console.log(chooseNum(2000, 3000));\n\n//console.log(chooseNum(100, 200));\n//console.log(chooseNum(200, 300));\n\n//console.log(chooseNum(1000, 2000));\n//console.log(chooseNum(2000, 3000));\n\n//console.log(chooseNum(100, 200));\n//console.log(chooseNum(200, 300));\n\n//console.log(chooseNum(1000, 2000));\n//console.log(chooseNum(2000, 3000));\n\n//console.log(chooseNum(100, 200"}
{"task_id": "JavaScript/103", "prompt": "/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const total = n + m\n  const numBits = Math.ceil(Math.log2(total))\n\n  let num = (total / 2)\n\n  for (let i = 0; i < numBits; i++) {\n    if (num & 1) {\n      num = (num - 1)\n    } else {\n      num = num >> 1\n    }\n  }\n\n  return num\n}\n\nexport default roundedAvg<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const nums = [];\n  let lastDigit = 1;\n  for (let i = 0; i < x; i++) {\n    if (i % 2!== 0) {\n      nums.push(lastDigit);\n      lastDigit++;\n    }\n  }\n  return nums;\n};\n\nmodule.exports = uniqueDigits;\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n    const sortedArr = arr.sort((a, b) => a - b);\n    const reversedArr = sortedArr.reverse();\n    const newArr = [];\n    for (let i = 0; i < reversedArr.length; i++) {\n        newArr.push(`${reversedArr[i]}`);\n    }\n    return newArr;\n};\n\nconst sort = (arr) => {\n    let sortedArr = byLength(arr);\n    return sortedArr.join('');\n};\n\nconst reverse = (arr) => {\n    let reversedArr = arr.reverse();\n    return reversedArr.join('');\n};\n\nconst array = [1, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconsole.log(sort(array));\nconsole.log(reverse(array));<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  let result = []\n  for (let i = 1; i < arr.length; i++) {\n    let count = 0\n    while (arr[i]!== i) {\n      count = count + 1\n      arr[i] = arr[arr[i]]\n    }\n    if (i % 2 === 0) {\n      result.push(count)\n    } else {\n      result.push(count * arr[i])\n    }\n  }\n  return result\n}\n\nconst factorial = (n) => {\n  return f(n)\n}\n\nmodule.exports = factorial\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    let current = isPalindrome(i);\n    if (current === 0) {\n      result++;\n    }\n    if (current === 1) {\n      result--;\n    }\n  }\n  return (result, result / 2);\n};\n\nconsole.log(evenOddPalindrome(3));\nconsole.log(evenOddPalindrome(12));<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      let sign = arr[i];\n      let abs = Math.abs(arr[i]);\n      let digit = abs % 10;\n      let absDigit = abs / 10;\n      let countDigits = countNums(absDigit);\n      let signDigits = countDigits;\n      let firstDigit = signDigits + 1;\n      if (digit < 0) {\n        firstDigit = signDigits + 2;\n      }\n      count += firstDigit;\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([1, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) return true;\n  let move = (arr, i, j) => {\n    while (i < j) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    }\n    return arr;\n  }\n  let arr_temp = arr.slice();\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    while (j >= 0 && arr[j] < arr[j + 1]) {\n      j--;\n    }\n    arr = move(arr, i, j + 1);\n    if (arr.every(e => e >= arr[i])) {\n      return true;\n    }\n    while (i < j) {\n      i++;\n      j--;\n    }\n  }\n  return false;\n}\n\nexport default moveOneBall;<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n    if (lst1.length === 0 || lst2.length === 0) {\n        return false;\n    }\n\n    let i = 0;\n    while (i < lst1.length && i < lst2.length) {\n        if (lst1[i] % 2!== 0) {\n            return false;\n        }\n        if (lst2[i] % 2!== 0) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\nmodule.exports = exchange;\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const result = {}\n  for (let i = 0; i < test.length; i++) {\n    if (result.hasOwnProperty(test[i])) {\n      result[test[i]] += 1\n    } else {\n      result[test[i]] = 1\n    }\n  }\n  return result\n}\n\nconsole.log(histogram('a b c'))\nconsole.log(histogram('a b b a'))\nconsole.log(histogram('b b b b a'))\nconsole.log(histogram(''))<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n    if(!s) {\n        return {s, check: false}\n    }\n\n    let temp = '';\n    let i = 0;\n    let length = s.length;\n    while(i < length) {\n        if(s.charAt(i) === c.charAt(0)) {\n            while(s.charAt(i) === c.charAt(0)) {\n                i++;\n            }\n            if(i === length) {\n                return {s: s.substring(0, length - 1), check: true}\n            }\n        }\n        temp += s.charAt(i);\n        i++;\n    }\n    return {s: temp, check: false}\n}\n\nconsole.log(reverseDelete(\"abcd\", \"cd\"));\nconsole.log(reverseDelete(\"acdedcba\", \"ab\"));\nconsole.log(reverseDelete(\"cdedc\", \"ab\"));\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const list = new Array(lst.length)\n  for (let i = 0; i < lst.length; i++) {\n    list[i] = [lst[i].length]\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === '1') {\n        list[i][j] = 1\n      }\n    }\n  }\n  return list\n}\n\nmodule.exports = oddCount<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n    let current = 0, sum = 0;\n    for (let i = 0; i < nums.length; i++) {\n        sum = current + nums[i];\n        if (sum < 0) sum = 0;\n        if (sum > current) current = sum;\n    }\n    return current;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let result = 0;\n  for (let row of grid) {\n    let col = row.map((_, i) => i);\n    let fill = 0;\n    while (fill < capacity) {\n      fill += Math.min(row[col[fill]], capacity - fill);\n    }\n    result += fill;\n  }\n  return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortByBits = (arr) => {\n    return arr.sort((a, b) => {\n      const diff = a - b;\n      if (diff === 0) return 0;\n      if (diff > 0) return 1;\n      return -1;\n    });\n  };\n  const sortByDecimal = (arr) => {\n    return arr.sort((a, b) => {\n      const diff = a - b;\n      if (diff === 0) return 0;\n      if (diff > 0) return -1;\n      return 1;\n    });\n  };\n  return sortByBits(sortByDecimal(arr));\n};\n\nconsole.log(sortArray([1, 0, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  let word = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] ==='') {\n      if (word.length > 0) {\n        words.push(word);\n        word = \"\";\n      }\n      continue;\n    }\n    word += s[i];\n    if (word.length === n) {\n      words.push(word);\n      word = \"\";\n    }\n  }\n  if (word.length > 0) {\n    words.push(word);\n  }\n  return words;\n};\n\ndescribe(\"selectWords\", () => {\n  it(\"should return empty list if string is empty\", () => {\n    expect(selectWords(\"\", 0)).toEqual([]);\n    expect(selectWords(\"\", 1)).toEqual([]);\n    expect(selectWords(\"\", 2)).toEqual([]);\n  });\n  it(\"should return list of all words that contain n consonants\", () => {\n    expect(selectWords(\"Mary had a little lamb\", 4)).toEqual([\"little\"]);\n    expect(selectWords(\"Mary had a little lamb\", 3)).toEqual([\"Mary\"]);\n    expect(selectWords(\"simple white space\", 2)).toEqual([]);\n    expect(selectWords(\"Hello world\", 4)).toEqual([\"world\"]);\n    expect(selectWords(\"Uncle sam\", 3)).toEqual([\"Uncle\"]);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let found = false;\n  let start = 0;\n  let end = word.length - 1;\n  let current = word[end];\n  while (!found) {\n    if (vowels.indexOf(current) > -1) {\n      found = true;\n      start = end;\n      end--;\n    } else {\n      current = word[++end];\n    }\n  }\n  current = word[start];\n  while (vowels.indexOf(current) > -1) {\n    start++;\n    current = word[start];\n  }\n  return start == 0 || end == word.length - 1? \"\" : word.substring(start, end + 1);\n};\n\nconsole.log(getClosestVowel(\"full\")); //full\nconsole.log(getClosestVowel(\"quick\")); //k\nconsole.log(getClosestVowel(\"ab\")); //\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let cnt = 0;\n  const check = (a) => a.length - cnt >= 0;\n  const checkAll = (a) => a.every(check);\n  const checkAllStr = (a) => a.every(s => check(s));\n  let lstPos = 0;\n  while (lstPos < lst.length) {\n    if (lst[lstPos].length!== 2) {\n      return 'No';\n    }\n    if (lst[lstPos][0]!== '(' || lst[lstPos][1]!== ')') {\n      return 'No';\n    }\n    lstPos++;\n  }\n  if (lst.length === 0) {\n    return 'Yes';\n  }\n  if (lst.every(checkAll)) {\n    return 'Yes';\n  }\n  if (lst.every(checkAllStr)) {\n    return 'Yes';\n  }\n  return 'No';\n};\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let n = arr.length\n  if(k >= n) {\n    return arr\n  }\n\n  const max = arr[k-1]\n  let maxIndex = k-1\n  for(let i = k; i < n; i++) {\n    if(arr[i] > max) {\n      maxIndex = i\n      max = arr[i]\n    }\n  }\n\n  return [...arr.slice(0, maxIndex), max,...arr.slice(maxIndex + 1)]\n}\n\nconsole.log(maximum([-3, -4, 5], 3))\nconsole.log(maximum([4, -4, 4], 2))\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1))\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const sum = (a) => {\n    let s = 0\n    for (let i = 0; i < a.length; i += 2) {\n      s += a[i]\n    }\n    return s\n  }\n  return sum(lst)\n}\n\nconsole.log(solution([5, 8, 7, 1, 3, 3, 3, 3, 3, 3]))<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n    const k_to_3 = arr.slice(0, k).reduce((sum, num) => sum + num, 0);\n    const k_to_4 = arr.slice(0, k).reduce((sum, num) => sum + num, 0);\n    return k_to_3 + k_to_4;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let res = []\n  let tmp = n\n  while (tmp > 1) {\n    if (tmp % 2 === 0) {\n      res.push(tmp)\n      tmp = tmp / 2\n    } else {\n      tmp = 3 * tmp + 1\n      res.push(tmp)\n    }\n  }\n  return res\n}\n\nconsole.log(getOddCollatz(5))\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  return (!date || (parseInt(date.split('/')[0], 10) > 31 && parseInt(date.split('/')[1], 10) > 12 && parseInt(date.split('/')[2], 10) > 28 && parseInt(date.split('/')[2], 10) < 30 && parseInt(date.split('/')[0], 10) < 1 && parseInt(date.split('/')[1], 10) < 1 && parseInt(date.split('/')[2], 10) < 1 && parseInt(date.split('/')[2], 10) < 1 && parseInt(date.split('/')[0], 10) > 0 && parseInt(date.split('/')[1], 10) < 13 && parseInt(date.split('/')[2], 10) > 0 && parseInt(date.split('/')[2], 10) < 13)\n}\n\nconst checkDate = (date) => {\n  if (validDate(date)) {\n    console.log(`${date} is a valid date.`);\n  } else {\n    console.log(`${date} is not a valid date.`);\n  }\n}\n\ncheckDate('01-01-2020');\ncheckDate('01/01/2020');\ncheckDate('1/1/2020');\ncheckDate('1/01/2020');\ncheckDate('01/01/2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-2020');\ncheckDate('01-01-"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(' ')\n  let wordsList = []\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let isValid = true\n    let counter = 0\n    for (let j = 0; j < word.length; j++) {\n      if (word[j] < 97 || word[j] > 122) {\n        isValid = false\n        break\n      }\n      counter += Math.pow(26, word.length - j - 1) * (word[j] - 97)\n    }\n    if (isValid) {\n      wordsList.push(word)\n    }\n  }\n  return wordsList\n}\n\n/* Given a string, return a list of all the words in the string, split on whitespace and commas, if no whitespace or commas \n   existed in the text you should split on letters in lower case */\nconst splitWordsLowerCase = (txt) => {\n  const words = txt.split(' ')\n  let wordsList = []\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let isValid = true\n    for (let j = 0; j < word.length; j++) {\n      if (word[j] < 97 || word[j] > 122) {\n        isValid = false\n        break\n      }\n    }\n    if (isValid) {\n      wordsList.push(word)\n    }\n  }\n  return wordsList\n}\n\n/* Given a string, return a list of all the words in the string, split on whitespace and commas, if no whitespace or commas \n   existed in the text you should split on letters in upper case */\nconst splitWordsUpperCase = (txt) => {\n  const words = txt.split(' ')\n  let wordsList = []\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let isValid = true\n    for (let j = 0; j < word.length; j++) {\n      if (word[j] < 97 || word[j] > 122) {\n        isValid = false\n        break\n      }\n    }\n    if (isValid) {\n      wordsList.push(word)\n    }\n  }\n  return wordsList\n}\n\n/* Given a string, return a list of all the words in the string, split on whitespace and commas, if no whitespace or commas \n   existed in the text you should split on letters in upper case */\nconst splitWordsMixedCase = (txt) => {\n  const words = txt.split(' ')\n  let wordsList = []\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let isValid = true\n    for (let j = 0; j < word.length; j++) {\n      if (word[j] < 97 || word[j] > 122) {\n        isValid = false\n        break\n      }\n    }\n    if (isValid) {\n      wordsList.push(word)\n    }\n  }\n  return wordsList\n}\n\n/* Given a string, return a list of all the words in the string, split on whitespace and commas, if no whitespace or commas \n   existed in the text you should split on letters in upper case */\nconst splitWordsMixedCaseWithNumbers = (txt) => {\n  const words = txt.split(' ')\n  let wordsList = []\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let isValid = true\n    for (let j = 0; j < word.length; j++) {\n      if (word[j] < 97 || word[j] > 122 || word[j] > 47) {\n        isValid = false\n        break\n      }\n    }\n    if (isValid) {\n      wordsList.push(word)\n    }\n  }\n  return wordsList\n}\n\n/* Given a string, return a list of all the words in the string, split on whitespace and commas, if no whitespace or commas \n   existed in the text you should split on letters in upper case */\nconst splitWordsMixedCaseWithNumbersUpperCase = (txt) => {\n  const words = txt.split(' ')\n  let wordsList = []\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let isValid = true\n    for (let j = 0; j < word.length; j++) {\n      if (word[j] < 97 || word[j] > 122 || word[j] > 47 || word[j] < 48) {\n        isValid = false\n        break\n      }\n    }\n    if (isValid) {\n      wordsList.push(word)\n    }\n  }\n  return wordsList\n}\n\n/* Given a string, return a list of all the words in the string, split on whitespace and commas, if no whitespace or commas \n   existed in the text you should split on numbers in lower case */\nconst splitWordsMixedCaseWithNumbersLowerCase = (txt) => {\n  const words = txt.split(' ')\n  let wordsList = []\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let isValid = true\n    for (let j = 0; j < word.length; j++) {\n      if (word[j] < 97 || word[j] > 122 || word[j] > 47 || word[j] < 48) {\n        isValid = false\n        break\n      }\n    }\n    if (isValid) {\n      wordsList.push(word)"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let last = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < last) return false\n    last = lst[i]\n  }\n  return true\n}\n\n/*\n  Given a string, return the index of the first and last non-space character\n  in the string. If there are no non-space characters, return `-1` and `-1`.\n  Examples\n  indexOfWhitespace(\"hello world\") ➞ 2\n  indexOfWhitespace(\" \") ➞ -1\n  indexOfWhitespace(\"\") ➞ -1\n  indexOfWhitespace(\"   \") ➞ 0\n  indexOfWhitespace(\"   \\t\") ➞ -1\n  indexOfWhitespace(\"hello world\") ➞ 2\n*/\nconst indexOfWhitespace = (str) => {\n  let i = 0\n  let index = -1\n  while (i < str.length) {\n    if (str[i] ==='') {\n      index = i\n      break\n    }\n    i++\n  }\n  if (index === -1) return -1\n  i++\n  while (i < str.length) {\n    if (str[i]!=='') {\n      index = i\n      break\n    }\n    i++\n  }\n  return index\n}\n\n/*\n  Given a list of numbers, return the sum of the numbers. Assumed no negative\n  numbers.\n  Examples\n  sum([1, 2, 3]) ➞ 6\n  sum([1, 2, 3, 4]) ➞ 10\n  sum([1, 2, 3, 4, 5]) ➞ 15\n  sum([1, 2, 3, 4, 5, 6]) ➞ 21\n  sum([1, 2, 3, 4, 5, 6, 7]) ➞ 28\n  sum([1, 2, 3, 4, 5, 6, 7, 8]) ➞ 35\n*/\nconst sum = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the mean of the numbers. Assumed no negative\n  numbers.\n  Examples\n  mean([1, 2, 3]) ➞ 2\n  mean([1, 2, 3, 4]) ➞ 2.5\n  mean([1, 2, 3, 4, 5]) ➞ 3.0\n  mean([1, 2, 3, 4, 5, 6]) ➞ 3.5\n  mean([1, 2, 3, 4, 5, 6, 7]) ➞ 4.0\n*/\nconst mean = (lst) => {\n  let sum = sum(lst)\n  let n = lst.length\n  return sum / n\n}\n\n/*\n  Given a list of numbers, return the median of the numbers. Assumed no negative\n  numbers.\n  Examples\n  median([1, 2, 3]) ➞ 2\n  median([1, 2, 3, 4]) ➞ 2.5\n  median([1, 2, 3, 4, 5]) ➞ 3\n  median([1, 2, 3, 4, 5, 6]) ➞ 3.5\n*/\nconst median = (lst) => {\n  let sum = sum(lst)\n  let half = sum / 2\n  let middle = Math.floor(half)\n  let n = lst.length\n  if (n % 2 === 0) {\n    return (lst[middle] + lst[middle - 1]) / 2\n  } else {\n    return lst[middle]\n  }\n}\n\n/*\n  Given a list of numbers, return the mode of the numbers. Assumed no negative\n  numbers.\n  Examples\n  mode([1, 2, 3]) ➞ 1\n  mode([1, 2, 3, 4]) ➞ 2\n  mode([1, 2, 3, 4, 5]) ➞ 4\n  mode([1, 2, 3, 4, 5, 6]) ➞ 6\n*/\nconst mode = (lst) => {\n  let list = lst.sort()\n  let count = 1\n  let maxCount = 0\n  for (let i = 1; i < list.length; i++) {\n    if (list[i] === list[i - 1]) {\n      count++\n    } else {\n      if (count > maxCount) {\n        maxCount = count\n        return list[i - maxCount + 1]\n      }\n      count = 1\n    }\n  }\n  return list[list.length - 1]\n}\n\n/*\n  Given a list of numbers, return the mode of the numbers. Assumed no negative\n  numbers.\n  Examples\n  mode([1, 2, 3]) ➞ 1\n  mode([1, 2, 3, 4]) ➞ 2\n  mode([1, 2, 3, 4, 5]) ➞ 4\n  mode([1, 2, 3, 4, 5, 6]) ➞ 6\n*/\nconst modeWithPairs = (lst) => {\n  let list = lst.sort()\n  let count = 1\n  let maxCount = 0\n  let maxCountValue = list[0]\n  for (let i = 1; i < list.length; i++) {\n    if"}
{"task_id": "JavaScript/127", "prompt": "/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1.start;\n  const end1 = interval1.end;\n  const start2 = interval2.start;\n  const end2 = interval2.end;\n  \n  if (end1 > start2 || start1 < end2) {\n    return 'NO';\n  }\n  \n  const start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n  \n  const divisor = Math.floor(end - start + 1);\n  if (divisor === 1) {\n    return 'YES';\n  }\n  \n  let counter = 2;\n  while (counter <= divisor) {\n    if (divisor % counter === 0) {\n      return 'NO';\n    }\n    counter++;\n  }\n  \n  return 'YES';\n};\n\nexport default intersection;\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const res = arr.reduce((a, b) => a + b * Math.sign(b), 0)\n  return res? res : null\n}\n\nconst sign = (x) => {\n  if (x < 0) return -1\n  if (x > 0) return 1\n  return 0\n}\n\nconst multiSign = (x, y) => x * sign(y)\nconst addSign = (x, y) => x + y * Math.sign(y)\n\nconst sum = (a, b) => a + b\n\nconst signPairs = (arr) => {\n  const arr1 = arr.map(multiSign)\n  return arr1.reduce((a, b) => a + b, 0)\n}\n\nconst signSum = (arr) => {\n  const arr1 = arr.map(multiSign)\n  return arr1.reduce((a, b) => sum(a, b), 0)\n}\n\nconst signProduct = (arr) => {\n  const arr1 = arr.map(addSign)\n  return arr1.reduce((a, b) => sum(a, b), 0)\n}\n\nconst multiProd = (arr) => {\n  const arr1 = arr.map(addSign)\n  return arr1.reduce((a, b) => sum(a, b), 0)\n}\n\nconst signProductPairs = (arr) => {\n  const arr1 = arr.map(addSign)\n  return arr1.reduce((a, b) => sum(a, b), 0)\n}\n\nconst signProductSum = (arr) => {\n  const arr1 = arr.map(addSign)\n  return arr1.reduce((a, b) => sum(a, b), 0)\n}\n\nconst main = () => {\n  const arr = [1, 2, 2, -4]\n  console.log(prodSigns(arr))\n  console.log(signSum(arr))\n  console.log(signProduct(arr))\n  console.log(signProductPairs(arr))\n  console.log(signProductSum(arr))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let dp = [[-1, -1, -1]];\n  for (let r = 0; r < grid.length; r++) {\n    for (let c = 0; c < grid[0].length; c++) {\n      let d = grid[r][c];\n      if (d > 0) {\n        dp.push([r, c, d]);\n        dp = dp.concat(findPath(grid, r, c, d, k - 1));\n      }\n    }\n  }\n  return dp;\n};\n\nconst findPath = (grid, r, c, d, k) => {\n  if (k === 0) return [d];\n  if (r < 0 || r >= grid.length || c < 0 || c >= grid[0].length) return [];\n  if (grid[r][c] === 0) return [];\n  if (k === 1) return [grid[r][c]];\n  let path = [grid[r][c]];\n  let [rr, cc] = findNext(r, c, d, grid);\n  path = path.concat(findPath(grid, rr, cc, d, k - 1));\n  return path;\n};\n\nconst findNext = (r, c, d, grid) => {\n  if (r < 0 || r >= grid.length || c < 0 || c >= grid[0].length) return [r, c];\n  if (grid[r][c] > d) return [r, c];\n  let [rr, cc] = findNext(r, c, grid[r][c], grid);\n  return [rr, cc];\n};\n\nconst test = () => {\n  let grid = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ];\n  let [r, c] = findNext(0, 0, 4, grid);\n  console.log(r, c);\n  console.log(findPath(grid, r, c, 4, 2));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if(n===0) return [];\n  if(n===1) return [1];\n  if(n===2) return [1, 2];\n  let a = tri(n-1);\n  let b = tri(n-2);\n  let c = [1, 2];\n  if(n%2 === 0) {\n    for(let i = 0; i < n; i++) {\n      c.push(a[i] + b[i]);\n    }\n  } else {\n    for(let i = 0; i < n; i++) {\n      c.push(a[i] + b[i] + c[i+1]);\n    }\n  }\n  return c;\n};\nconsole.log(tri(5));\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result *= i\n    }\n  }\n  return result\n}\n\nexport default digits\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n   if(string.length === 0) return false;\n   if(string[0] === '[') return false;\n   let isNested = true;\n   let currentPos = 1;\n   while(isNested && currentPos < string.length) {\n     if(string[currentPos] === '[') {\n       let nextPos = string.indexOf(']', currentPos);\n       if(nextPos === -1) {\n         isNested = false;\n         break;\n       }\n       currentPos = nextPos + 1;\n     }\n     else {\n       isNested = false;\n     }\n   }\n   return isNested;\n };\n \n console.log(isNested('[[]]'));\n console.log(isNested('[]]]]]]][[[[[]'));\n console.log(isNested('[][]'));\n console.log(isNested('[]'));\n console.log(isNested('[[][]]'));\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let total = 0;\n  for (let i = 0; i < lst.length; i++) {\n    total += Math.pow(Math.round(lst[i]), 2);\n  }\n  return total;\n};\n\nconsole.log(sumSquares([1, 2, 3]));\nconsole.log(sumSquares([1, 4, 9]));\nconsole.log(sumSquares([1, 3, 5, 7]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([-2.4, 1, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const charIsALetter = (lastChar.match(/[a-zA-Z]/))\n  if (charIsALetter && txt.indexOf(' ') === -1) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Create a function that returns the first index of a given string.\n  If the string is not found, return -1.\n  Examples:\n  indexOf(\"apple pie\", \"p\") ➞ 1\n  indexOf(\"apple pie\", \"z\") ➞ -1\n  indexOf(\"apple pie\", \"apple pie\") ➞ -1\n*/\nconst indexOf = (txt, substr) => {\n  return txt.indexOf(substr)\n}\n\n/*\n  Create a function that returns the last index of a given string.\n  If the string is not found, return -1.\n  Examples:\n  indexOf(\"apple pie\", \"p\") ➞ -1\n  indexOf(\"apple pie\", \"z\") ➞ -1\n  indexOf(\"apple pie\", \"apple pie\") ➞ -1\n*/\nconst lastIndexOf = (txt, substr) => {\n  return txt.lastIndexOf(substr)\n}\n\n/*\n  Create a function that returns true if a given string contains a given substring.\n  If the string is not found, return false.\n  Examples:\n  contains(\"apple pie\", \"p\") ➞ true\n  contains(\"apple pie\", \"z\") ➞ false\n  contains(\"apple pie\", \"apple pie\") ➞ true\n*/\nconst contains = (txt, substr) => {\n  return txt.indexOf(substr) > -1\n}\n\n/*\n  Create a function that returns true if a given string contains all given substrings.\n  If the string is not found, return false.\n  Examples:\n  containsAll(\"apple pie\", [\"p\", \"z\"]) ➞ true\n  containsAll(\"apple pie\", [\"p\", \"apple pie\"]) ➞ false\n  containsAll(\"apple pie\", [\"p\", \"apple pie\", \"z\"]) ➞ false\n*/\nconst containsAll = (txt, substrs) => {\n  const found = txt.indexOf(substrs[0])\n  if (found === -1) {\n    return false\n  } else {\n    for (let i = 1; i < substrs.length; i++) {\n      if (txt.indexOf(substrs[i]) === -1) {\n        return false\n      }\n    }\n    return true\n  }\n}\n\n/*\n  Create a function that returns true if a given string contains a given substring.\n  If the string is not found, return false.\n  Examples:\n  contains(\"apple pie\", \"p\") ➞ true\n  contains(\"apple pie\", \"z\") ➞ false\n  contains(\"apple pie\", \"apple pie\") ➞ true\n*/\nconst containsAny = (txt, substr) => {\n  return txt.indexOf(substr) > -1\n}\n\n/*\n  Create a function that returns true if a given string starts with a given prefix.\n  If the string is not found, return false.\n  Examples:\n  startsWith(\"apple pie\", \"apple\") ➞ true\n  startsWith(\"apple pie\", \"apple pie\") ➞ true\n  startsWith(\"apple pie\", \"apple pie \") ➞ true\n  startsWith(\"apple pie\", \"apple pie  \") ➞ true\n  startsWith(\"apple pie\", \"pie\") ➞ false\n*/\nconst startsWith = (txt, substr) => {\n  return txt.indexOf(substr) === 0\n}\n\n/*\n  Create a function that returns true if a given string ends with a given suffix.\n  If the string is not found, return false.\n  Examples:\n  endsWith(\"apple pie\", \"pie\") ➞ true\n  endsWith(\"apple pie\", \"apple pie\") ➞ true\n  endsWith(\"apple pie\", \"apple pie \") ➞ true\n  endsWith(\"apple pie\", \"apple pie\") ➞ true\n  endsWith(\"apple pie\", \"apple pie \") ➞ false\n*/\nconst endsWith = (txt, substr) => {\n  return txt.indexOf(substr) === txt.length - substr.length\n}\n\n/*\n  Create a function that returns true if a given string contains all the given substrings.\n  If the string is not found, return false.\n  Examples:\n  containsAll(\"apple pie\", [\"p\", \"z\"]) ➞ true\n  containsAll(\"apple pie\", [\"p\", \"apple pie\"]) ➞ true\n  containsAll(\"apple pie\", [\"p\", \"apple pie\", \"z\"]) ➞ false\n*/\nconst containsAllOf = (txt, substrs) => {\n  const found = txt.indexOf(substrs[0])\n  if (found === -1) {\n    return false\n  } else {\n    for (let i = 1; i < substrs.length; i++) {\n      if (txt.indexOf(substrs[i]) === -1) {\n        return false\n      }\n    }\n    return true\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let max = -1;\n  let tmp;\n  while(i <= j) {\n    tmp = arr[i];\n    while(arr[j] >= tmp && j > i) {\n      j--;\n    }\n    if(arr[j] === tmp) {\n      max = j;\n      j = j - 1;\n    }\n    i++;\n  }\n  return max;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  // Check for empty list\n  if (lst.length === 0) {\n    return null\n  }\n  // Check for negative or positive values\n  const max = largestSmallestNumber(lst)\n  const min = largestSmallestNumber(lst, -1)\n  if (max === null) {\n    return null\n  }\n  if (min === null) {\n    return [max, -1]\n  }\n  // Calculate the largest number that is smaller than min\n  const difference = min - 1\n  // Get the number as a string\n  const largest = largestSmallestNumber(lst, difference)\n  return [largest, difference]\n}\n\n// Given a list of numbers, return the largest number in the list.\n// If there are no negative numbers, return null.\n// Examples:\n// largestSmallestNumber([1, 2, 3]) == 3\n// largestSmallestNumber([1, 2, 3, -1]) == null\n// largestSmallestNumber([-1, -2, -3]) == null\n// largestSmallestNumber([0, -1, -2, -3]) == null\n// largestSmallestNumber([1, 2, 3, 4]) == 4\n// largestSmallestNumber([1, 2, 3, 4, 5]) == 5\nconst largestSmallestNumber = (lst, min) => {\n  // Check for empty list\n  if (lst.length === 0) {\n    return null\n  }\n  // Check for negative values\n  const largest = largestSmallestNumber(lst, -1)\n  if (largest === null) {\n    return null\n  }\n  // If no negative values exist, return the largest positive value\n  if (min === -1) {\n    return largest\n  }\n  // Calculate the largest number that is smaller than min\n  const difference = largest - min\n  // Return the largest number that is smaller than min\n  return largest\n}\n\n/*\n  Create a function that returns the smallest number in a list of numbers.\n  If there are no negative or positive numbers, return null.\n  Examples:\n  smallestSmallestNumber([1, 2, 3, 4]) == -1\n  smallestSmallestNumber([1, 2, 3, 4, 5]) == -1\n  smallestSmallestNumber([1, 2, 3, 4, 5, -1]) == -1\n  smallestSmallestNumber([1, 2, 3, 4, 5, 6, -1]) == -1\n  smallestSmallestNumber([1, 2, 3, 4, 5, 6, 7, -1]) == -1\n  smallestSmallestNumber([1, 2, 3, 4, 5, 6, 7, 8, -1]) == -1\n  */\nconst smallestSmallestNumber = (lst) => {\n  // Check for empty list\n  if (lst.length === 0) {\n    return null\n  }\n  // Check for negative or positive values\n  const min = smallestSmallestNumber(lst, -1)\n  if (min === null) {\n    return null\n  }\n  // If no negative values exist, return the smallest positive value\n  if (min === -1) {\n    return min\n  }\n  // Calculate the smallest number that is larger than min\n  const difference = min + 1\n  // Get the number as a string\n  const smallest = smallestSmallestNumber(lst, difference)\n  return smallest\n}\n\n// Given a list of numbers, return the smallest number in the list.\n// If there are no negative or positive numbers, return null.\n// Examples:\n// smallestSmallestNumber([1, 2, 3, 4]) == 1\n// smallestSmallestNumber([1, 2, 3, 4, 5]) == 1\n// smallestSmallestNumber([1, 2, 3, 4, 5, -1]) == 1\n// smallestSmallestNumber([1, 2, 3, 4, 5, 6, -1]) == 1\n// smallestSmallestNumber([1, 2, 3, 4, 5, 6, 7, -1]) == 1\n// smallestSmallestNumber([1, 2, 3, 4, 5, 6, 7, 8, -1]) == 1\nconst smallestSmallestNumber = (lst, min) => {\n  // Check for empty list\n  if (lst.length === 0) {\n    return null\n  }\n  // Check for negative values\n  const smallest = smallestSmallestNumber(lst, -1)\n  if (smallest === null) {\n    return null\n  }\n  // If no negative values exist, return the smallest positive value\n  if (min === -1) {\n    return smallest\n  }\n  // Calculate the smallest number that is larger than min\n  const difference = min + 1\n  // Return the smallest number that is larger than min\n  return smallest\n}\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   let typeA= typeof a\n   let typeB= typeof b\n   if (typeA === 'number' && typeB === 'number'){\n      if (a > b) return a\n      if (a < b) return b\n   }else if (typeA ==='string' && typeB ==='string'){\n      if (a > b) return b\n      if (a < b) return a\n   }else if (typeA === 'number' && typeB ==='string'){\n      if (a > b) return a\n      if (a < b) return b\n   }else if (typeA ==='string' && typeB === 'number'){\n      if (a > b) return b\n      if (a < b) return a\n   }else if (typeA === 'number' && typeB === 'number'){\n      if (a > b) return a\n      if (a < b) return a\n   }else if (typeA ==='string' && typeB ==='string'){\n      if (a > b) return b\n      if (a < b) return a\n   }\n   return null\n}\n \n/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareTwo(1, 2.5) ➞ed 2.5 \n   compareTwo(1,\" 2,3\") ➞\" 2,3\" \n   compareTwo(\"5,1\",\" 6\") ➞\" 6\" \n   compareTwo(\"1\", 1) ➞ null \n  */ \n const compareTwo= (a, b)=>{\n   let typeA= typeof a\n   let typeB= typeof b\n   if (typeA === 'number' && typeB === 'number'){\n      if (a > b) return a\n      if (a < b) return b\n   }else if (typeA ==='string' && typeB ==='string'){\n      if (a > b) return b\n      if (a < b) return a\n   }else if (typeA === 'number' && typeB ==='string'){\n      if (a > b) return a\n      if (a < b) return b\n   }else if (typeA ==='string' && typeB === 'number'){\n      if (a > b) return b\n      if (a < b) return a\n   }else if (typeA === 'number' && typeB === 'number'){\n      if (a > b) return a\n      if (a < b) return a\n   }else if (typeA ==='string' && typeB ==='string'){\n      if (a > b) return b\n      if (a < b) return a\n   }\n   return null\n}\n \n \n/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareThree(1, 2.5) ➞ed 2.5 \n   compareThree(1,\" 2,3\") ➞\" 2,3\" \n   compareThree(\"5,1\",\" 6\") ➞\" 6\" \n   compareThree(\"1\", 1) ➞ null \n  */ \n const compareThree= (a, b)=>{\n   let typeA= typeof a\n   let typeB= typeof b\n   if (typeA === 'number' && typeB === 'number'){\n      if (a > b) return a\n      if (a < b) return b\n   }else if (typeA ==='string' && typeB ==='string'){\n      if (a > b) return b\n      if (a < b) return a\n   }else if (typeA === 'number' && typeB ==='string'){\n      if (a > b) return a\n      if (a < b) return b\n   }else if (typeA ==='string' && typeB === 'number'){\n      if (a > b) return b\n      if (a < b) return a\n   }else if (typeA === 'number' && typeB === 'number'){\n      if (a > b) return a\n      if (a < b) return a\n   }else if (typeA ==='string' && typeB ==='string'){\n      if (a > b) return b\n      if (a < b) return a\n   }\n   return null\n}\n \n \n \n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareFour(1, 2.5) ➞ed 2.5 \n   compareFour(1,\" 2,3\") ➞\" 2,3\" \n   compareFour(\"5,1\",\" 6\") ➞\" 6\" \n   compareFour(\"1\", 1) ➞ null \n  */ \n const compareFour= (a, b)=>{\n   let typeA= typeof a\n   let typeB= typeof b\n   if (typeA === 'number' && typeB === 'number'){\n      if (a > b) return a\n      if (a < b) return b\n   }else if (typeA ==='string' && typeB ==='string'){\n      if (a > b) return b\n      if (a < b)"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return ((Math.floor(n) % 2) === 0) && (Math.floor(n) >= 4)\n}\n\nconst isPrime = (n) => {\n  return!isEqualToSumEven(n) && (n > 1)\n}\n\nconst sum = (n) => {\n  return n + (n - 1) + (n - 2)\n}\n\nconst sumEven = (n) => {\n  return sum(n) - (sum(n - 2) + sum(n - 4))\n}\n\nconst isEven = (n) => {\n  return (n % 2) === 0\n}\n\nconst isOdd = (n) => {\n  return (n % 2)!== 0\n}\n\n/*Evaluate whether the given number is a palindrome or not\n  Example\n  isPalindrome(12) == true\n  isPalindrome(2) == false\n  isPalindrome(-3) == false\n  */\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10)\n}\n\n/*Evaluate whether the given number is a prime or not\n  Example\n  isPrime(9) == false\n  isPrime(17) == true\n  isPrime(5) == false\n  isPrime(12) == true\n  */\nconst isPrime = (n) => {\n  return n > 1 &&!isEqualToSumEven(n)\n}\n\n/*Evaluate whether the given number is a power of two or not\n  Example\n  isPowerOfTwo(4) == true\n  isPowerOfTwo(8) == false\n  isPowerOfTwo(2) == true\n  */\nconst isPowerOfTwo = (n) => {\n  return!isOdd(n) && n!== 0 && (Math.log(n) / Math.log(2) === Math.floor(Math.log(n) / Math.log(2)))\n}\n\n/*Evaluate whether the given number is a power of 3 or not\n  Example\n  isPowerOfThree(12) == true\n  isPowerOfThree(4) == false\n  isPowerOfThree(6) == true\n  isPowerOfThree(8) == false\n  */\nconst isPowerOfThree = (n) => {\n  return!isOdd(n) &&!isEven(n) && n!== 0 && (Math.log(n) / Math.log(3) === Math.floor(Math.log(n) / Math.log(3)))\n}\n\n/*Evaluate whether the given number is a power of 5 or not\n  Example\n  isPowerOfFive(12) == true\n  isPowerOfFive(4) == false\n  isPowerOfFive(6) == true\n  isPowerOfFive(8) == false\n  */\nconst isPowerOfFive = (n) => {\n  return!isOdd(n) &&!isEven(n) && n!== 0 && (Math.log(n) / Math.log(5) === Math.floor(Math.log(n) / Math.log(5)))\n}\n\n/*Evaluate whether the given number is a power of 10 or not\n  Example\n  isPowerOfTen(12) == true\n  isPowerOfTen(4) == false\n  isPowerOfTen(6) == true\n  isPowerOfTen(8) == false\n  */\nconst isPowerOfTen = (n) => {\n  return!isOdd(n) &&!isEven(n) && n!== 0 && (Math.log(n) / Math.log(10) === Math.floor(Math.log(n) / Math.log(10)))\n}\n\n/*Evaluate whether the given number is a power of 2 or not\n  Example\n  isPowerOfTwo(12) == true\n  isPowerOfTwo(4) == false\n  isPowerOfTwo(6) == true\n  isPowerOfTwo(8) == false\n  */\nconst isPowerOfTwo = (n) => {\n  return!isOdd(n) &&!isEven(n) && n!== 0 && (Math.log(n) / Math.log(2) === Math.floor(Math.log(n) / Math.log(2)))\n}\n\n/*Evaluate whether the given number is a power of 3 or not\n  Example\n  isPowerOfThree(12) == true\n  isPowerOfThree(4) == false\n  isPowerOfThree(6) == true\n  isPowerOfThree(8) == false\n  */\nconst isPowerOfThree = (n) => {\n  return!isOdd(n) &&!isEven(n) && n!== 0 && (Math.log(n) / Math.log(3) === Math.floor(Math.log(n) / Math.log(3)))\n}\n\n/*Evaluate whether the given number is a power of 5 or not\n  Example\n  isPowerOfFive(12) == true\n  isPowerOfFive(4) == false\n  isPowerOfFive(6) == true\n  isPowerOfFive(8) == false\n  */\nconst isPowerOfFive = (n) => {\n  return!isOdd(n) &&!isEven(n) && n!== 0 && (Math.log(n) / Math.log(5) === Math.floor(Math.log(n) / Math.log(5)))\n}\n\n/*Evaluate whether the given number is a power of 10 or not\n  Example\n  isPowerOfTen(12) == true\n  isPowerOfTen(4) == false\n  isPowerOfTen(6) == true\n  isPowerOfTen(8) == false\n  */\nconst isPowerOfTen = (n) => {\n  return!isOdd(n) &&!isEven(n) && n!== 0 && (Math.log(n) / Math.log(10) === Math.floor(Math.log(n) / Math.log(10)))\n}\n\n/*Evaluate whether the given number is a prime or not\n  Example\n  isPrime(9) == false\n  isPrime(17) == true\n  isPrime(5) == false\n"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n    const nFactorial = factorial(n)\n    const nFactorial1 = factorial(n-1)\n    const nFactorial2 = factorial(n-2)\n    const nFactorial3 = factorial(n-3)\n\n    return nFactorial*(nFactorial1*(nFactorial2*nFactorial3))\n}\n\n/*\n  The prime numbers between 1 and 9 (excluding 1 and 9) are: 2, 3, 5, 7\n  \n  The prime numbers between 10 and 99 (excluding 10 and 99) are: \n  10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97\n\n  The prime numbers between 100 and 999 (excluding 100 and 999) are: \n  100, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, \n  211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, \n  337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, \n  461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, \n  601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, \n  739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, \n  883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997\n  \n  The sum of the multiples of the prime numbers between 1 and 9 (excluding 1 and 9) is: \n  3 + 5 + 7 = 13 \n  \n  The sum of the multiples of the prime numbers between 10 and 99 (excluding 10 and 99) is: \n  83 + 89 + 97 = 400\n  \n  The sum of the multiples of the prime numbers between 100 and 999 (excluding 100 and 999) is: \n  1797 + 1817 + 1837 + 1841 + 1853 + 1861 + 1867 + 1871 + 1873 + 1877 + 1881 + 1883 + 1889 + 1897 = 9899\n  \n  The sum of the multiples of the prime numbers between 1000 and 9999 (excluding 1000 and 9999) is: \n  8999 + 9001 + 9003 + 9007 + 9011 + 9013 + 9029 + 9037 + 9049 + 9059 + 9067 + 9071 + 9073 + 9081 + 9083 + 9087 + 9091 + 9103 + \n  9109 + 9127 + 9133 + 9137 + 9151 + 9157 + 9161 + 9173 + 9181 + 9187 + 9199 + 9203 + 9227 + 9233 + 9247 + 9251 + 9257 + 9277 + 9281 + \n  9283 + 9293 + 9311 + 9319 + 9323 + 9329 + 9343 + 9347 + 9349 + 9371 + 9373 + 9391 + 9397 + 9403 + 9411 + 9417 + 9421 + 9431 + 9433 + \n  9437 + 9461 + 9463 + 9467 + 9473 + 9479 + 9491 + 9497 + 9511 + 9521 + 9533 + 9539 + 9547 + 9551 + 9587 + 9593 + 9607 + 9611 + 9621 + \n  9633 + 9637 + 9643 + 9649 + 9661 + 9673 + 9679 + 9691 + 9707 + 9713 + 9719 + 9727 + 9731 + 9733 + 9739 + 9743 + 9761 + 9767 + 9773 + \n  9787 + 9791 + 9803 + 9811 + 9817 + 9833 + 9847 + 9857 + 9861 + 9867 + 9873 + 9881 + 9883 + 9901 + 9907 + 9911 + 9917 + 9923 + 9929 + \n  9931 + 9937 + 9941 + 9949 + 9959 + 9967 + 9973 + 9979 + 9983 + 9991 + 9999\n  \n  The sum of the multiples of the prime numbers between 1 and 999 (excluding 1 and 999) is: \n  1359 + 1423 + 1487 + 1501 + 1537 + 1579 + 1601 + 1637 + 1671 + 1697 + 1733 + 1769 + 1801 + 1837 + 1871 + 1897 + 1929 + 1967 + 1993 + 2029 + \n  2033 + 2053 + 2071 + 2091 + 2107 + 2113 + 2129 + 2143 + 2153 + 2171 + 2179 + 2189 + 2197 + 2203 + 2207 + 2217 + 2229 + 2237 + 2239 + 2261 + \n  2293 + 2311 + 2333 + 2347 + 2357 + 2371 + 2377 + 2383 + 2389 + 2397 + 2411 + 2417 + 2423 + 2437 + 2441 + 2447 + 2459 + 2467 + 2477 + 2489 + \n  2499 + 2503 + 2509 + 2521 + 2531 + 2539 + 2543 + 2549 + 2551 + 2557 + 2579 + 2591 + 2593 + 2609 + 2617 + 2621 + 2633 + 2647 + 2657 + 2659 + \n  2663 + 2671 + 2677 + 26"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  if(typeof(text)!== \"string\") {\n    return text\n  }\n\n  return text.replace(/\\s+/g, \"_\");\n}\n\nconst formatDate = (date) => {\n  const dateArray = [\n    date.getDate(),\n    pad(date.getMonth() + 1),\n    pad(date.getFullYear()),\n  ]\n\n  const year = pad(date.getFullYear())\n\n  const month = pad(date.getMonth() + 1)\n\n  if(month.length === 1) {\n    return `${year}/${month}/${date.getDate()}`\n  } else {\n    return `${year}/${month}/${date.getDate()}`\n  }\n}\n\nconst pad = (num) => {\n  if(num < 10) {\n    return \"0\" + num\n  }\n\n  return num\n}\n\nmodule.exports = {\n  fixSpaces,\n  formatDate,\n}<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n\tlet fileName = file_name;\n\tlet valid = true;\n\tif(fileName.length < 4){\n\t\tvalid = false;\n\t}\n\tif(fileName.indexOf(\".\") > -1){\n\t\tif(fileName.indexOf(\".\") === 0){\n\t\t\tvalid = false;\n\t\t}\n\t\tif(fileName.indexOf(\".\") + 1 === fileName.length){\n\t\t\tvalid = false;\n\t\t}\n\t\tif(fileName.indexOf(\".\") === 1){\n\t\t\tif(fileName.charAt(0) === \"0\" || fileName.charAt(0) === \"1\" || fileName.charAt(0) === \"2\" || fileName.charAt(0) === \"3\" || fileName.charAt(0) === \"4\" || fileName.charAt(0) === \"5\" || fileName.charAt(0) === \"6\" || fileName.charAt(0) === \"7\" || fileName.charAt(0) === \"8\" || fileName.charAt(0) === \"9\"){\n\t\t\t\tvalid = false;\n\t\t\t}\n\t\t}\n\t\tif(fileName.indexOf(\".\") + 2 === fileName.length){\n\t\t\tif(fileName.charAt(1) === \"0\" || fileName.charAt(1) === \"1\" || fileName.charAt(1) === \"2\" || fileName.charAt(1) === \"3\" || fileName.charAt(1) === \"4\" || fileName.charAt(1) === \"5\" || fileName.charAt(1) === \"6\" || fileName.charAt(1) === \"7\" || fileName.charAt(1) === \"8\" || fileName.charAt(1) === \"9\"){\n\t\t\t\tvalid = false;\n\t\t\t}\n\t\t}\n\t}\n\tif(fileName.indexOf(\".\") === -1){\n\t\tvalid = false;\n\t}\n\tif(fileName.length > 1){\n\t\tif(fileName.indexOf(\".\") === 0){\n\t\t\tvalid = false;\n\t\t}\n\t\tif(fileName.indexOf(\".\") + 1 === fileName.length){\n\t\t\tvalid = false;\n\t\t}\n\t\tif(fileName.indexOf(\".\") === 1){\n\t\t\tif(fileName.charAt(0) === \"0\" || fileName.charAt(0) === \"1\" || fileName.charAt(0) === \"2\" || fileName.charAt(0) === \"3\" || fileName.charAt(0) === \"4\" || fileName.charAt(0) === \"5\" || fileName.charAt(0) === \"6\" || fileName.charAt(0) === \"7\" || fileName.charAt(0) === \"8\" || fileName.charAt(0) === \"9\"){\n\t\t\t\tvalid = false;\n\t\t\t}\n\t\t}\n\t\tif(fileName.indexOf(\".\") + 2 === fileName.length){\n\t\t\tif(fileName.charAt(1) === \"0\" || fileName.charAt(1) === \"1\" || fileName.charAt(1) === \"2\" || fileName.charAt(1) === \"3\" || fileName.charAt(1) === \"4\" || fileName.charAt(1) === \"5\" || fileName.charAt(1) === \"6\" || fileName.charAt(1) === \"7\" || fileName.charAt(1) === \"8\" || fileName.charAt(1) === \"9\"){\n\t\t\t\tvalid = false;\n\t\t\t}\n\t\t}\n\t}\n\tif(valid){\n\t\treturn \"Yes \";\n\t}\n\telse{\n\t\treturn \"No \";\n\t}\n}\n\nconsole.log(fileNameCheck(\"example.txt\"));\nconsole.log(fileNameCheck(\"1example.dll\"));\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst getFib = (n) => {\n  if (n === 0) {\n    return 1;\n  } else if (n === 1) {\n    return 2;\n  } else {\n    return getFib(n - 1) + getFib(n - 2);\n  }\n};\n\nconst getMax = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconst getMin = (lst) => {\n  let min = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\nconst getSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst getAverage = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum / lst.length;\n};\n\nconst getSumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst getFibonacci = (n) => {\n  if (n === 0) {\n    return 1;\n  } else if (n === 1) {\n    return 2;\n  } else {\n    return getFib(n - 1) + getFib(n - 2);\n  }\n};\n\nconst getDifference = (lst) => {\n  let max = 0;\n  let min = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max - min;\n};\n\nconst getDistance = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.sqrt(sum);\n};\n\nconst getProduct = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\nconst getMean = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum / lst.length;\n};\n\nconst getVariance = (lst) => {\n  let mean = getMean(lst);\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += (lst[i] - mean) * (lst[i] - mean);\n  }\n  return sum / (lst.length - 1);\n};\n\nconst getVarianceP = (lst) => {\n  let mean = getMean(lst);\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += (lst[i] - mean) * (lst[i] - mean);\n  }\n  return sum / (lst.length - 1);\n};\n\nconst getSkewness = (lst) => {\n  let n = lst.length;\n  let mean = getMean(lst);\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += (lst[i] - mean) * (lst[i] - mean);\n  }\n  return sum / (n - 1) / (n - 2);\n};\n\nconst getStdDev = (lst) => {\n  let variance = getVariance(lst);\n  return Math.sqrt(variance);\n};\n\nconst getMedian = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum / 2;\n};\n\nconst getMode = (lst) => {\n  let max = 0;\n  let mode = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      mode = i;\n      max = lst[i];\n    }\n  }\n  return mode;\n};\n\n"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \")\n  const newSentence = \"\"\n  words.forEach(word => {\n    for (let i = 0; i < word.length; i += 2) {\n      newSentence += word[i]\n    }\n  })\n  return newSentence\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n  const num= x.split(\"/\").map(n=>parseInt(n))\n  const den= n.split(\"/\").map(n=>parseInt(n))\n  const r= []\n  const check= (n, i)=>{\n    if(num[i]%den[i] === 0){\n      r.push(num[i]/den[i])\n      return true\n    }\n    else{\n      return false\n    }\n  }\n  let k= 0\n  while(k<num.length){\n    if(check(num[k], k)){\n      k++\n    }\n    else{\n      num.splice(k, 1)\n    }\n  }\n  if(num.length === 0){\n    return true\n  }\n  else{\n    return false\n  }\n}\n\n/*\n  Your task was to write a function that takes an array of strings and returns the strings that are in the array but not in the other array. \n  The strings in the array are in the same order as the array you receive. \n  \n  The strings in the other array are not in the same order as the array you receive. \n  \n  The strings in the other array can be in any order. \n  \n  For example, if you receive the array: [\"I\", \"love\", \"proxies\"] \n  and the other array: [\"proxies\", \"I\", \"love\"] \n  the function should return [\"I\"]. \n  \n  Your function should return an array of strings. \n*/\nconst notIn = (arr1, arr2)=>{\n  const arr = []\n  for(let i= 0;i<arr1.length;i++){\n    if(arr2.indexOf(arr1[i]) === -1){\n      arr.push(arr1[i])\n    }\n  }\n  return arr\n}\n\n/*\n  Given an array of strings, return a new array of strings without the strings that appear in the other array. \n  The strings in the other array are not in the same order as the array you receive. \n  \n  The strings in the other array can be in any order. \n  \n  For example, if you receive the array: [\"I\", \"love\", \"proxies\"] \n  and the other array: [\"proxies\", \"I\", \"love\"] \n  the function should return [\"I\"]. \n  \n  Your function should return an array of strings. \n*/\nconst arrayNotIn = (arr1, arr2)=>{\n  const arr = []\n  for(let i= 0;i<arr1.length;i++){\n    if(arr2.indexOf(arr1[i]) === -1){\n      arr.push(arr1[i])\n    }\n  }\n  return arr\n}\n\n/*\n  Given an array of strings, return a new array of strings that has the strings that are in the other array but not in the first array. \n  The strings in the other array are not in the same order as the array you receive. \n  \n  The strings in the other array can be in any order. \n  \n  For example, if you receive the array: [\"I\", \"love\", \"proxies\"] \n  and the other array: [\"proxies\", \"I\", \"love\"] \n  the function should return [\"I\"]. \n  \n  Your function should return an array of strings. \n*/\nconst arrayNotIn2 = (arr1, arr2)=>{\n  const arr = []\n  for(let i= 0;i<arr2.length;i++){\n    if(arr1.indexOf(arr2[i]) === -1){\n      arr.push(arr2[i])\n    }\n  }\n  return arr\n}\n\n/*\n  Given two arrays of strings, return the strings that are in both of the arrays. \n  The strings in the other array are not in the same order as the array you receive. \n  \n  The strings in the other array can be in any order. \n  \n  For example, if you receive the array: [\"I\", \"love\", \"proxies\"] \n  and the other array: [\"proxies\", \"I\", \"love\"] \n  the function should return [\"proxies\"]. \n  \n  Your function should return an array of strings. \n*/\nconst arrayIntersection = (arr1, arr2)=>{\n  const arr = []\n  for(let i= 0;i<arr1.length;i++){\n    if(arr2.indexOf(arr1[i])!== -1){\n      arr.push(arr1[i])\n    }\n  }\n  return arr\n}\n\n/*\n  Given two arrays of strings, return the strings that are in both of the arrays. \n  The strings in the other array are not in the same order as the array you receive. \n  \n  The strings in the other array can be in any order. \n  \n  For example, if you receive the array: [\"I\", \"love\", \"proxies\"] \n  and the other array: [\"proxies\", \"I\", \"love\"] \n  the function should return [\"proxies\"]. \n  \n  Your function should return an array of strings. \n*/\nconst arrayIntersection2 = (arr1, arr2)=>{\n  const arr = []\n  for(let i= 0;i<arr2.length;i++){\n    if(arr1.indexOf(arr2[i])!== -1){\n      arr.push(arr2[i])\n    }\n  }\n  return arr\n}\n\n/*\n  Given two arrays of strings, return the strings that are in both of the arrays. \n  The strings in the other array are not in the same"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sum = sumOfDigits(nums);\n  return nums.sort((a, b) => (sumOfDigits(a) - sumOfDigits(b)) || (b[0] - a[0]))\n}\n\nconst sumOfDigits = (num) => {\n  let sum = 0;\n  for (let i = 0; i < num.length; i++) {\n    sum += num[i];\n  }\n  return sum;\n}\n\n// console.log(orderByPoints([1, 11, -1, -11, -12]));\n// console.log(orderByPoints([]));<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const isOdd = (num) => {\n    return num % 2 === 1;\n  };\n  const isEven = (num) => {\n    return num % 2 === 0;\n  };\n  const firstOdd = (num) => {\n    return num % 10 === 1;\n  };\n  const lastOdd = (num) => {\n    return num % 10 === 1;\n  };\n  const count = nums.filter(isOdd).length;\n  return nums.filter(isOdd, isEven).length + nums.filter(isEven).length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const result = []\n\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i < j && j < k) {\n          const triple = a[i] + a[j] + a[k]\n          if (triple % 3 === 0) {\n            result.push([i, j, k])\n          }\n        }\n      }\n    }\n  }\n\n  return result.length\n}\n\nmodule.exports = getMaxTriples\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  var planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  var planetNames = {\n    Mercury: 1, Venus: 2, Earth: 3, Mars: 4, Jupiter: 5, Saturn: 6, Uranus: 7, Neptune: 8\n  }\n  var sortedPlanets = []\n  var i = 0\n  var j = 0\n  var flag = 0\n  var p1 = planetNames[planet1]\n  var p2 = planetNames[planet2]\n  var distance = 0\n\n  while (i < planets.length) {\n    while (j < planets.length) {\n      if (distance > 0) {\n        if (p1 <= planetNames[planets[i]]) {\n          distance = distance + 1\n          flag = 0\n        }\n        if (p2 <= planetNames[planets[j]]) {\n          distance = distance + 1\n          flag = 1\n        }\n        if (p1 == planetNames[planets[i]] && p2 == planetNames[planets[j]]) {\n          flag = 1\n          distance = distance + 1\n        }\n      }\n      j = j + 1\n    }\n    sortedPlanets.push(planets[i])\n    i = i + 1\n  }\n  return sortedPlanets\n}\n\nconsole.log(bf(\"Jupiter\", \"Mercury\"))\nconsole.log(bf(\"Earth\", \"Mercury\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Earth\", \"Uranus\"))\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n    return lst.reduce((acc, curr) => {\n        if (curr.length % 2!== 0) {\n            return acc.concat(curr)\n        }\n        return acc.concat(curr)\n    }, []).sort((a, b) => {\n        if (a.length < b.length) {\n            return -1\n        } else if (a.length > b.length) {\n            return 1\n        } else {\n            return 0\n        }\n    })\n}\n\nconsole.log(sortedListSum([\"aa\", \"a\", \"aaa\"]))\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"]))<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\nconsole.log(xOrY(15, 8, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n    return lst.reduce((acc, n) => {\n        const n2 = n*n;\n        return (n % 2)? (acc + n2) : acc;\n    }, 0);\n};\n \n console.log(doubleTheDifference([-1,-2, 0])); //81 \n console.log(doubleTheDifference([1, 3, 2, 0])); //10 \n console.log(doubleTheDifference([9,-2])); //81 \n console.log(doubleTheDifference([0])); //0 \n\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let correct = 0;\n  let wrong = 0;\n  let guess = [...guess].sort();\n  let game = [...game].sort();\n  for(let i = 0; i < game.length; i++){\n    if(game[i] === guess[i]){\n      correct++;\n    }\n  }\n  for(let i = 0; i < game.length; i++){\n    if(game[i]!== guess[i]){\n      wrong++;\n    }\n  }\n  return [correct, wrong];\n};\n\nmodule.exports = compare;<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let class_name_parts = class_name.split('.');\n  let strength = {};\n  for (let i = 0; i < class_name_parts.length; i++) {\n    let extension_name = class_name_parts[i].toLowerCase();\n    if (extensions.includes(extension_name)) {\n      strength[extension_name] = strength[extension_name] || -1;\n      strength[extension_name] += 1;\n    }\n  }\n\n  for (let extension_name in strength) {\n    if (strength[extension_name] > 0) {\n      return class_name + '.' + extension_name;\n    }\n  }\n}\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n\tlet l=a.length, r=b.length\n\tif(l===r){\n\t\tfor(let i=0;i<l;i++){\n\t\t\tif(a[i]===b[i]) return true\n\t\t\tif(a[i]===b[l-i-1]) return true\n\t\t\tfor(let j=1;j<l-i;j++){\n\t\t\t\tif(a[i+j]===b[l-i-j]) return true\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\tif(l===1&&r===1){\n\t\tif(a[0]===b[0]) return true\n\t\tfor(let i=0;i<r;i++){\n\t\t\tif(a[0]===b[i+1]) return true\n\t\t}\n\t\treturn false\n\t}\n\tif(l===1&&r===2){\n\t\tif(a[0]===b[0]&&a[0]===b[1]) return true\n\t\tfor(let i=0;i<r;i++){\n\t\t\tif(a[0]===b[i]&&a[0]===b[i+1]) return true\n\t\t}\n\t\treturn false\n\t}\n\tif(l===2&&r===1){\n\t\tif(a[0]===b[0]&&a[1]===b[0]) return true\n\t\tfor(let i=0;i<r;i++){\n\t\t\tif(a[i]===b[0]) return true\n\t\t}\n\t\treturn false\n\t}\n\tif(l===2&&r===2){\n\t\tif(a[0]===b[0]&&a[1]===b[1]) return true\n\t\tfor(let i=0;i<r;i++){\n\t\t\tif(a[i]===b[i]&&a[i+1]===b[i+1]) return true\n\t\t}\n\t\treturn false\n\t}\n\tif(l===2&&r===3){\n\t\tif(a[0]===b[0]&&a[1]===b[1]&&a[1]===b[2]) return true\n\t\tfor(let i=0;i<r;i++){\n\t\t\tif(a[i]===b[i]&&a[i+1]===b[i+1]&&a[i+2]===b[i+2]) return true\n\t\t}\n\t\treturn false\n\t}\n\tif(l===3&&r===1){\n\t\tif(a[0]===b[0]&&a[1]===b[1]&&a[2]===b[0]) return true\n\t\tfor(let i=0;i<r;i++){\n\t\t\tif(a[i]===b[0]) return true\n\t\t}\n\t\treturn false\n\t}\n\tif(l===3&&r===2){\n\t\tif(a[0]===b[0]&&a[1]===b[1]&&a[2]===b[1]) return true\n\t\tfor(let i=0;i<r;i++){\n\t\t\tif(a[i]===b[0]&&a[i+1]===b[1]) return true\n\t\t}\n\t\treturn false\n\t}\n\tif(l===3&&r===3){\n\t\tif(a[0]===b[0]&&a[1]===b[1]&&a[2]===b[2]) return true\n\t\tfor(let i=0;i<r;i++){\n\t\t\tif(a[i]===b[i]&&a[i+1]===b[i+1]&&a[i+2]===b[i+2]) return true\n\t\t}\n\t\treturn false\n\t}\n\tif(l===4&&r===1){\n\t\tif(a[0]===b[0]&&a[1]===b[1]&&a[2]===b[2]&&a[3]===b[0]) return true\n\t\tfor(let i=0;i<r;i++){\n\t\t\tif(a[i]===b[0]) return true\n\t\t}\n\t\treturn false\n\t}\n\tif(l===4&&r===2){\n\t\tif(a[0]===b[0]&&a[1]===b[1]&&a[2]===b[2]&&a[3]===b[1]) return true\n\t\tfor(let i=0;i<r;i++){\n\t\t\tif(a[i]===b[0]&&a[i+1]===b[1]) return true\n\t\t}\n\t\treturn false\n\t}\n\tif(l===4&&r===3){\n\t\tif(a[0]===b[0]&&a[1]===b[1]&&a[2]===b[2]&&a[3]===b[2]) return true\n\t\tfor(let i=0;i<r;i++){\n\t\t\tif(a[i]===b[i]&&a[i+1]===b[i+1]&&a[i+2]===b[i+2]) return true\n\t\t}\n\t\treturn false\n\t}\n\tif(l===5&&r===1){\n\t\tif(a[0]===b[0]&&a[1]===b[1]&&a[2]===b[2]&&a[3]===b[3]&&a[4]===b[0]) return true\n\t\tfor(let i=0;i<r;i++){\n\t\t\tif(a[i]===b[0]) return true\n\t\t}\n\t\treturn false\n\t}\n\tif(l===5&&r===2){\n\t\tif(a[0]===b[0]&&a[1]===b[1]&&a[2]===b[2]&&a[3]===b[3]&&a[4]===b[1]) return true\n\t\tfor(let i=0"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  if (num === 0) {\n    return (0, 0)\n  }\n  const count = Math.floor(num / 2)\n  const rem = num - (2 * count)\n  return (count, rem)\n}\n\nexport default evenOddCount\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n    let result = '';\n    let num = number;\n    while (num >= 1000) {\n        result += 'M';\n        num -= 1000;\n    }\n    if (num >= 900) {\n        result += 'CM';\n        num -= 900;\n    }\n    if (num >= 500) {\n        result += 'D';\n        num -= 500;\n    }\n    if (num >= 400) {\n        result += 'CD';\n        num -= 400;\n    }\n    if (num >= 100) {\n        result += 'C';\n        num -= 100;\n    }\n    if (num >= 90) {\n        result += 'XC';\n        num -= 90;\n    }\n    if (num >= 50) {\n        result += 'L';\n        num -= 50;\n    }\n    if (num >= 40) {\n        result += 'XL';\n        num -= 40;\n    }\n    if (num >= 10) {\n        result += 'X';\n        num -= 10;\n    }\n    if (num >= 9) {\n        result += 'IX';\n        num -= 9;\n    }\n    if (num >= 5) {\n        result += 'V';\n        num -= 5;\n    }\n    if (num >= 4) {\n        result += 'IV';\n        num -= 4;\n    }\n    if (num >= 1) {\n        result += 'I';\n        num -= 1;\n    }\n    return result;\n};\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'xvii'\n  >>> intToRoman(152) == 'lxxvi'\n  >>> intToRoman(426) == 'cxvix'\n  */\nconst intToRoman = (number) => {\n    let result = '';\n    let num = number;\n    while (num >= 1000) {\n        result += 'M';\n        num -= 1000;\n    }\n    if (num >= 900) {\n        result += 'CM';\n        num -= 900;\n    }\n    if (num >= 500) {\n        result += 'D';\n        num -= 500;\n    }\n    if (num >= 400) {\n        result += 'CD';\n        num -= 400;\n    }\n    if (num >= 100) {\n        result += 'C';\n        num -= 100;\n    }\n    if (num >= 90) {\n        result += 'XC';\n        num -= 90;\n    }\n    if (num >= 50) {\n        result += 'L';\n        num -= 50;\n    }\n    if (num >= 40) {\n        result += 'XL';\n        num -= 40;\n    }\n    if (num >= 10) {\n        result += 'X';\n        num -= 10;\n    }\n    if (num >= 9) {\n        result += 'IX';\n        num -= 9;\n    }\n    if (num >= 5) {\n        result += 'V';\n        num -= 5;\n    }\n    if (num >= 4) {\n        result += 'IV';\n        num -= 4;\n    }\n    if (num >= 1) {\n        result += 'I';\n        num -= 1;\n    }\n    return result;\n};\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'xvii'\n  >>> intToRoman(152) == 'lxxvi'\n  >>> intToRoman(426) == 'cxvix'\n  */\nconst intToRoman = (number) => {\n    let result = '';\n    let num = number;\n    while (num >= 1000) {\n        result += 'M';\n        num -= 1000;\n    }\n    if (num >= 900) {\n        result += 'CM';\n        num -= 900;\n    }\n    if (num >= 500) {\n        result += 'D';\n        num -= 500;\n    }\n    if (num >= 400) {\n        result += 'CD';\n        num -= 400;\n    }\n    if (num >= 100) {\n        result += 'C';\n        num -= 100;\n    }\n    if (num >= 90) {\n        result += 'XC';\n        num -= 90;\n    }\n    if (num >= 50) {\n        result += 'L';\n        num -= 50;\n    }\n    if (num >= 40) {\n        result += 'XL';\n        num -= 40;\n    }\n    if (num >= 10) {\n        result += 'X';\n        num -= 10;\n    }\n    if (num >= 9) {\n        result += 'IX';\n        num -= 9;\n    }\n    if (num >= 5) {\n        result += 'V';\n        num -= 5;\n    }\n    if (num >= 4) {\n        result += 'IV';\n        num -= 4;\n    }\n    if (num >= 1) {\n        result += 'I';\n        num -= 1;\n    }\n    return result;\n};\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'xvii'\n  >>> intToRoman(152) == 'lxxvi'\n  >>> intToRoman(426) == 'cxvix'\n  */\nconst intToRoman = (number) => {\n    let result = '';\n    let num = number;\n    while (num >= 1000) {\n        result += 'M';\n        num -= 1000;\n    }\n    if (num >= 900) {\n        result += 'CM';\n        num -= 900;\n    }"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const lenA = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2))\n  const lenB = Math.sqrt(Math.pow(c, 2) + Math.pow(b, 2))\n  const lenC = Math.sqrt(Math.pow(a, 2) + Math.pow(c, 2))\n  return (lenA + lenB > lenC) && (lenB + lenC > lenA) && (lenC + lenA > lenB)\n}\n\n/*\n Given the lengths of the three sides of a triangle, return the area of the triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 18\n  */\nconst areaOfTriangle = (a, b, c) => {\n  const lenA = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2))\n  const lenB = Math.sqrt(Math.pow(c, 2) + Math.pow(b, 2))\n  const lenC = Math.sqrt(Math.pow(a, 2) + Math.pow(c, 2))\n  return Math.pow(lenA + lenB - lenC, 2) / 2\n}\n\n/*\n Given a triangle, return the perimeter of the triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 12\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n  return a + b + c\n}\n\nconst triangle = {\n  rightAngleTriangle,\n  areaOfTriangle,\n  perimeterOfTriangle\n}\n\nconst triangleOfLength = (a, b, c, func) => {\n  const area = triangle[func](a, b, c)\n  return {\n    area,\n    perimeter: perimeterOfTriangle(a, b, c)\n  }\n}\n\nconst solve = (triangle, functionName) => {\n  const triangleFunc = triangle[functionName]\n  const triangleOfLengths = triangleOfLength(triangle.a, triangle.b, triangle.c)\n  const triangles = triangleOfLengths.map(triangleFunc)\n  return triangles\n}\n\nconst triangle = {\n  rightAngleTriangle,\n  areaOfTriangle,\n  perimeterOfTriangle\n}\n\nconst triangles = solve(triangle, 'areaOfTriangle')\n\ntriangles.forEach((triangle, index) => {\n  const length = triangle.perimeter\n  console.log(`Triangle ${index + 1} has a length of ${length}.`)\n})\n\nconst triangles = solve(triangle, 'perimeterOfTriangle')\n\ntriangles.forEach((triangle, index) => {\n  const area = triangle.area\n  console.log(`Triangle ${index + 1} has an area of ${area}.`)\n})\n\nconst triangles = solve(triangle, 'rightAngleTriangle')\n\ntriangles.forEach((triangle, index) => {\n  const lenA = triangle.a\n  const lenB = triangle.b\n  const lenC = triangle.c\n  console.log(`Triangle ${index + 1} has a right-angled triangle if the lengths of the sides are: a=${lenA}, b=${lenB}, and c=${lenC}.`)\n})\n\nconst triangles = solve(triangle, 'areaOfTriangle')\n\ntriangles.forEach((triangle, index) => {\n  const lenA = triangle.a\n  const lenB = triangle.b\n  const lenC = triangle.c\n  const area = triangle.area\n  console.log(`Triangle ${index + 1} has a right-angled triangle if the lengths of the sides are: a=${lenA}, b=${lenB}, and c=${lenC}. The area is ${area}.`)\n})\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   const map={};\n   return words.reduce((acc,word)=>{\n     if(!map[word]){\n       map[word]=1;\n       return word;\n     }else{\n       if(map[word]>1){\n         return word;\n       }else{\n         return acc;\n       }\n     }\n   },words[0]);\n }\n\nconst findMax=[...new Set(words.map(a=>a.toLowerCase()))]\nconsole.log(findMax([\"aa\",\"bb\",\"cc\",\"dd\"]))\nconsole.log(findMax([\"aa\",\"bb\",\"cc\",\"dd\"]))\nconsole.log(findMax([\"aa\",\"bb\",\"cc\",\"dd\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    if (number <= 0) {\n        return [0, number];\n    }\n    if (number >= need) {\n        return [number, number - need];\n    }\n    if (number < remaining) {\n        return [number, remaining];\n    }\n    return [number, remaining];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    if (operator.length === 1) {\n        return operand[0];\n    } else if (operator.length === 2) {\n        return operator[0] + operator[1] * operand[0];\n    }\n    const sum = operator.reduce((prev, current, index) => prev + current * operand[index], 0);\n    return sum;\n};\n\nconst doExpression = (operand) => {\n    const list = operand.slice(1);\n    const operator = operand[0];\n    const result = doAlgebra(operator, list);\n    return result;\n};\n\nconst doExpression2 = (operand) => {\n    const list = operand.slice(1);\n    const operator = operand[0];\n    const result = doAlgebra(operator, list);\n    return result;\n};\n\n/*\n  Given two lists of numbers, calculate the difference between them. \n   The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doDifference = (operator, operand) => {\n    if (operator.length === 1) {\n        return operand[0] - operator[0];\n    } else if (operator.length === 2) {\n        return operator[0] + operator[1] * operand[0];\n    }\n    const sum = operator.reduce((prev, current, index) => prev + current * operand[index], 0);\n    return sum;\n};\n\nconst doDifference2 = (operand) => {\n    const list = operand.slice(1);\n    const operator = operand[0];\n    const result = doDifference(operator, list);\n    return result;\n};\n\nconst doDifference3 = (operand) => {\n    const list = operand.slice(1);\n    const operator = operand[0];\n    const result = doDifference(operator, list);\n    return result;\n};\n\nconst doSum = (operand) => {\n    const list = operand.slice(1);\n    const operator = operand[0];\n    const result = doDifference(operator, list);\n    return result;\n};\n\nconst doSum2 = (operand) => {\n    const list = operand.slice(1);\n    const operator = operand[0];\n    const result = doDifference(operator, list);\n    return result;\n};\n\nconst doSum3 = (operand) => {\n    const list = operand.slice(1);\n    const operator = operand[0];\n    const result = doDifference(operator, list);\n    return result;\n};\n\nconst doSum4 = (operand) => {\n    const list = operand.slice(1);\n    const operator = operand[0];\n    const result = doDifference(operator, list);\n    return result;\n};\n\nconst doSum5 = (operand) => {\n    const list = operand.slice(1);\n    const operator = operand[0];\n    const result = doDifference(operator, list);\n    return result;\n};\n\nconst doSum6 = (operand) => {\n    const list = operand.slice(1);\n    const operator = operand[0];\n    const result = doDifference(operator, list);\n    return result;\n};\n\nconst doSum7 = (operand) => {\n    const list = operand.slice(1);\n    const operator = operand[0];\n    const result = doDifference(operator, list);\n    return result;\n};\n\nconst doSum8 = (operand) => {\n    const list = operand.slice(1);\n    const operator = operand[0];\n    const result = doDifference(operator, list);\n    return result;\n};\n\nconst doSum9 = (operand) => {\n    const list = operand.slice(1);\n    const operator = operand[0];\n    const result = doDifference(operator, list);\n    return result;\n};\n\nconst doSum10 = (operand) => {\n    const list = operand.slice(1);\n    const operator = operand[0];\n    const result = doDifference(operator, list);\n    return result;\n};\n\nconst doSum11 = (operand) => {\n    const list = operand.slice(1);\n    const operator = operand[0];\n    const result = doDifference(operator, list);\n    return result;\n};\n\nconst doSum12 = (operand) => {\n    const list = operand.slice(1);\n    const operator = operand[0];\n    const result = doDifference(operator, list);\n    return result;\n};\n\nconst doSum13 = (operand) => {\n    const list = operand.slice(1);\n    const operator = operand[0];\n    const result = doDifference(operator, list);\n    return result;\n};\n"}
{"task_id": "JavaScript/161", "prompt": "/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n    const arr = s.split(\"\");\n    const len = arr.length;\n    const reversed = arr.map((e, i) => {\n        if(i === 0) {\n            return e;\n        }\n        if(e.toUpperCase() === e) {\n            return e.toUpperCase();\n        } else {\n            return e.toLowerCase();\n        }\n    });\n    if(len === 0) {\n        return reversed;\n    }\n    const reversed2 = reversed.map((e, i) => {\n        if(i === 0) {\n            return e;\n        }\n        if(e.toUpperCase() === e) {\n            return e.toUpperCase();\n        } else {\n            return e.toLowerCase();\n        }\n    });\n    return reversed2.join(\"\");\n}\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  // Convert text to UTF-8\n  const bytes = Buffer.from(text, 'utf8');\n  return crypto.createHash('md5').update(bytes).digest('hex');\n};\n\nmodule.exports = stringToMd5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const ints = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      ints.push(i);\n    }\n  }\n  return ints;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>"}
