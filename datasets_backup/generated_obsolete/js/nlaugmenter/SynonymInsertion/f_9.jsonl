{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  const l = len - 1\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasNearElements = (numbers, threshold) => {\n  const len = numbers.length\n  const l = len - 1\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasNearElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasNearElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasNearElements2 = (numbers, threshold) => {\n  const len = numbers.length\n  const l = len - 1\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasNearElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasNearElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasNearElements3 = (numbers, threshold) => {\n  const len = numbers.length\n  const l = len - 1\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasNearElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasNearElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasNearElements4 = (numbers, threshold) => {\n  const len = numbers.length\n  const l = len - 1\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasNearElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasNearElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasNearElements5 = (numbers, threshold) => {\n  const len = numbers.length\n  const l = len - 1\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nmodule.exports = {\n  hasCloseElements,\n  hasNearElements,\n  hasNearElements2,\n  hasNearElements3,\n  hasNearElements4,\n  hasNearElements5\n}\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   separate freestanding those group into separate strings string section and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   separate freestanding those group into separate strings string section and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const parenStack = [];\n  let currParen = null;\n  const stackSize = paren_string.length;\n  const stackCount = 0;\n  const stackMax = stackSize;\n  for(let i=0; i<stackSize; i++){\n    const char = paren_string[i];\n    if(char === '('){\n      stackCount++;\n      parenStack.push(currParen);\n      currParen = char;\n    }\n    else if(char === ')'){\n      stackCount--;\n      if(stackCount === 0) {\n        parenStack.pop();\n        currParen = parenStack.pop();\n      }\n    }\n  }\n  return parenStack;\n};\n\n/* \n   Input: string of the form \"string1, string2, string3\"\n   Output: List of all strings in the list\n  */\nconst splitString = (string) => {\n  return string.split(',');\n};\n\n/* \n   Input: List of strings\n   Output: List of all strings without duplicates\n  */\nconst removeDuplicates = (stringList) => {\n  const uniq = new Set();\n  const result = [];\n  for(let i=0; i<stringList.length; i++){\n    const string = stringList[i];\n    if(uniq.has(string)){\n      continue;\n    }\n    else{\n      uniq.add(string);\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/*\n  Input: string of the form \"string1, string2, string3\"\n  Output: List of all strings that are not empty strings\n  */\nconst filterStrings = (string) => {\n  const result = [];\n  const strings = splitString(string);\n  for(let i=0; i<strings.length; i++){\n    if(strings[i].trim() === ''){\n      continue;\n    }\n    else{\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/* \n   Input: List of strings\n   Output: List of all strings without duplicates and empty strings\n  */\nconst filterStringList = (stringList) => {\n  const result = [];\n  const uniq = new Set();\n  for(let i=0; i<stringList.length; i++){\n    const string = stringList[i];\n    if(uniq.has(string) || string.trim() === ''){\n      continue;\n    }\n    else{\n      uniq.add(string);\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/* \n   Input: string of the form \"string1, string2, string3\"\n   Output: List of all strings that are not empty strings\n  */\nconst filterNonEmptyStrings = (string) => {\n  const result = [];\n  const strings = splitString(string);\n  for(let i=0; i<strings.length; i++){\n    if(strings[i].trim()!== ''){\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Input: List of strings\n  Output: List of all strings that are not empty strings\n  */\nconst filterNonEmptyStringList = (stringList) => {\n  const result = [];\n  const uniq = new Set();\n  for(let i=0; i<stringList.length; i++){\n    const string = stringList[i];\n    if(uniq.has(string) || string.trim() === ''){\n      continue;\n    }\n    else{\n      uniq.add(string);\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/*\n  Input: List of strings\n  Output: List of all strings with unique characters\n  */\nconst filterUniqueChars = (stringList) => {\n  const result = [];\n  const uniq = new Set();\n  for(let i=0; i<stringList.length; i++){\n    const string = stringList[i];\n    if(uniq.has(string) || string.trim() === ''){\n      continue;\n    }\n    else{\n      uniq.add(string);\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/*\n  Input: List of strings\n  Output: List of all strings with unique characters\n  */\nconst filterUniqueCharList = (stringList) => {\n  const result = [];\n  const uniq = new Set();\n  for(let i=0; i<stringList.length; i++){\n    const string = stringList[i];\n    if(uniq.has(string) || string.trim() === ''){\n      continue;\n    }\n    else{\n      uniq.add(string);\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/*\n  Input: List of strings\n  Output: List of all strings that are not empty strings\n  */\nconst filterNonEmptyStrings = (stringList) => {\n  const result = [];\n  const uniq = new Set();\n  for(let i=0; i<stringList.length; i++){\n    const string = stringList[i];\n    if(uniq.has(string) || string.trim() === ''){\n      continue;\n    }\n    else{\n      uniq.add(string);\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/*\n  Input: List of strings\n  Output: List of all strings that are not empty strings\n  */\nconst filterNonEmptyStringList = (stringList) => {\n  const result = [];\n  const uniq = new Set();\n  for(let i"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating float point number, it can be decomposed disintegrate into \n   and integer part (largest bombastic integer smaller than given give number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating float point number, it can be decomposed disintegrate into \n   and integer part (largest bombastic integer smaller than given give number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    return (Math.floor(number))\n}\n\n/* Given a positive floating float number, return the integer part of it.\n   Return 0 if number is 0.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInt = (number) => {\n    if (number === 0) {\n        return 0\n    } else {\n        return Math.floor(number)\n    }\n}\n\n/* Given a positive float number, return a string representing the integer part of the number.\n   Return a zero-length string if number is 0.\n  >>> truncateInt(3.5)\n  '3'\n  */\nconst truncateIntToString = (number) => {\n    return (truncateInt(number)).toString()\n}\n\n/* Given a positive float number, return a string representing the decimal part of the number.\n   Return a zero-length string if number is 0.\n  >>> truncateInt(3.5)\n  '0.5'\n  */\nconst truncateFraction = (number) => {\n    return (truncateNumber(number) - truncateInt(number)).toString()\n}\n\n/* Given a positive float number, return a string representing the integer part of the number.\n   Return a zero-length string if number is 0.\n  >>> truncateFraction(3.5)\n  '0.5'\n  */\nconst truncateFractionToString = (number) => {\n    return (truncateFraction(number)).toString()\n}\n\n/* Given a positive float number, return a string representing the decimal part of the number.\n   Return a zero-length string if number is 0.\n  >>> truncateFraction(3.5)\n  '0.5'\n  */\nconst truncateDecimal = (number) => {\n    return (truncateFraction(number) + truncateInt(number)).toString()\n}\n\n/* Given a positive float number, return a string representing the integer part of the number.\n   Return a zero-length string if number is 0.\n  >>> truncateDecimal(3.5)\n  '3'\n  */\nconst truncateDecimalToString = (number) => {\n    return (truncateDecimal(number)).toString()\n}\n\n/* Given a positive float number, return a string representing the decimal part of the number.\n   Return a zero-length string if number is 0.\n  >>> truncateDecimal(3.5)\n  '0.5'\n  */\nconst truncateDecimalToFraction = (number) => {\n    return (truncateDecimal(number) + truncateInt(number)).toString()\n}\n\n/* Given a positive float number, return a string representing the integer part of the number.\n   Return a zero-length string if number is 0.\n  >>> truncateDecimal(3.5)\n  '0.5'\n  */\nconst truncateDecimalToFractionToString = (number) => {\n    return (truncateDecimalToFraction(number)).toString()\n}\n\n/* Given a positive float number, return a string representing the decimal part of the number.\n   Return a zero-length string if number is 0.\n  >>> truncateDecimal(3.5)\n  '0.5'\n  */\nconst truncateDecimalToFractionToString = (number) => {\n    return (truncateDecimalToFraction(number)).toString()\n}\n\n/* Given a positive float number, return a string representing the decimal part of the number.\n   Return a zero-length string if number is 0.\n  >>> truncateDecimal(3.5)\n  '0.5'\n  */\nconst truncateDecimalToFractionToString = (number) => {\n    return (truncateDecimalToFraction(number)).toString()\n}\n\n/* Given a positive float number, return a string representing the decimal part of the number.\n   Return a zero-length string if number is 0.\n  >>> truncateDecimal(3.5)\n  '0.5'\n  */\nconst truncateDecimalToFractionToString = (number) => {\n    return (truncateDecimalToFraction(number)).toString()\n}\n\n/* Given a positive float number, return a string representing the decimal part of the number.\n   Return a zero-length string if number is 0.\n  >>> truncateDecimal(3.5)\n  '0.5'\n  */\nconst truncateDecimalToFractionToString = (number) => {\n    return (truncateDecimalToFraction(number)).toString()\n}\n\n/* Given a positive float number, return a string representing the decimal part of the number.\n   Return a zero-length string if number is 0.\n  >>> truncateDecimal(3.5)\n  '0.5'\n  */\nconst truncateDecimalToFractionToString = (number) => {\n    return (truncateDecimalToFraction(number)).toString()\n}\n\n/* Given a positive float number, return a string representing the decimal part of the number.\n   Return a zero-length string if number is 0.\n  >>> truncateDecimal(3.5)\n  '0.5'\n  */\nconst truncateDecimalToFractionToString = (number) => {\n    return (truncateDecimalToFraction(number)).toString()\n}\n\n/* Given a positive float number, return a string representing the decimal part of the number.\n   Return a zero-length string if number is 0.\n  >>> truncateDecimal(3.5)\n  '0.5'\n  */\nconst truncateDecimalToFractionToString = (number) => {\n    return (truncateDecimalToFraction(number)).toString()\n}\n\n/* Given a positive float number, return a string representing the decimal part of the number.\n   Return a zero-length string if number is 0.\n  >>> truncateDecimal(3.5)\n  '0.5'\n  */\nconst truncateDecimalToFractionToString = (number) => {\n    return (truncateDecimalToF"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account that starts startle with \n   zero balance. Your task is to detect if at any point degree the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account that starts startle with \n   zero balance. Your task is to detect if at any point degree the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0\n  operations.forEach((item) => {\n    if (item.amount > 0) sum += item.amount\n  })\n  if (sum < 0) return true\n  return false\n}\n\n// Below zero\nconst belowZero = (operations) => {\n  let sum = 0\n  operations.forEach((item) => {\n    if (item.amount > 0) sum += item.amount\n  })\n  if (sum < 0) return true\n  return false\n}\n\n// Below zero\nconst belowZero = (operations) => {\n  let sum = 0\n  operations.forEach((item) => {\n    if (item.amount > 0) sum += item.amount\n  })\n  if (sum < 0) return true\n  return false\n}\n\n// Below zero\nconst belowZero = (operations) => {\n  let sum = 0\n  operations.forEach((item) => {\n    if (item.amount > 0) sum += item.amount\n  })\n  if (sum < 0) return true\n  return false\n}\n\n// Below zero\nconst belowZero = (operations) => {\n  let sum = 0\n  operations.forEach((item) => {\n    if (item.amount > 0) sum += item.amount\n  })\n  if (sum < 0) return true\n  return false\n}\n\n// Below zero\nconst belowZero = (operations) => {\n  let sum = 0\n  operations.forEach((item) => {\n    if (item.amount > 0) sum += item.amount\n  })\n  if (sum < 0) return true\n  return false\n}\n\n// Below zero\nconst belowZero = (operations) => {\n  let sum = 0\n  operations.forEach((item) => {\n    if (item.amount > 0) sum += item.amount\n  })\n  if (sum < 0) return true\n  return false\n}\n\n// Below zero\nconst belowZero = (operations) => {\n  let sum = 0\n  operations.forEach((item) => {\n    if (item.amount > 0) sum += item.amount\n  })\n  if (sum < 0) return true\n  return false\n}\n\n// Below zero\nconst belowZero = (operations) => {\n  let sum = 0\n  operations.forEach((item) => {\n    if (item.amount > 0) sum += item.amount\n  })\n  if (sum < 0) return true\n  return false\n}\n\n// Below zero\nconst belowZero = (operations) => {\n  let sum = 0\n  operations.forEach((item) => {\n    if (item.amount > 0) sum += item.amount\n  })\n  if (sum < 0) return true\n  return false\n}\n\n// Below zero\nconst belowZero = (operations) => {\n  let sum = 0\n  operations.forEach((item) => {\n    if (item.amount > 0) sum += item.amount\n  })\n  if (sum < 0) return true\n  return false\n}\n\n// Below zero\nconst belowZero = (operations) => {\n  let sum = 0\n  operations.forEach((item) => {\n    if (item.amount > 0) sum += item.amount\n  })\n  if (sum < 0) return true\n  return false\n}\n\n// Below zero\nconst belowZero = (operations) => {\n  let sum = 0\n  operations.forEach((item) => {\n    if (item.amount > 0) sum += item.amount\n  })\n  if (sum < 0) return true\n  return false\n}\n\n// Below zero\nconst belowZero = (operations) => {\n  let sum = 0\n  operations.forEach((item) => {\n    if (item.amount > 0) sum += item.amount\n  })\n  if (sum < 0) return true\n  return false\n}\n\n// Below zero\nconst belowZero = (operations) => {\n  let sum = 0\n  operations.forEach((item) => {\n    if (item.amount > 0) sum += item.amount\n  })\n  if (sum < 0) return true\n  return false\n}\n\n// Below zero\nconst belowZero = (operations) => {\n  let sum = 0\n  operations.forEach((item) => {\n    if (item.amount > 0) sum += item.amount\n  })\n  if (sum < 0) return true\n  return false\n}\n\n// Below zero\nconst belowZero = (operations) => {\n  let sum = 0\n  operations.forEach((item) => {\n    if (item.amount > 0) sum += item.amount\n  })\n  if (sum < 0) return true\n  return false\n}\n\n// Below zero\nconst belowZero = (operations) => {\n  let sum = 0\n  operations.forEach((item) => {\n    if (item.amount > 0) sum += item.amount\n  })\n  if (sum < 0) return true\n  return false\n}\n\n// Below zero\nconst belowZero = (operations) => {\n  let sum = 0\n  operations.forEach((item) => {\n    if (item.amount > 0) sum += item.amount\n  })\n  if (sum < 0) return true\n  return false\n}\n\n// Below zero\nconst belowZero = (operations) => {\n  let sum = 0\n  operations.forEach((item) => {\n    if (item.amount > 0) sum += item.amount\n  })\n  if (sum < 0) return true\n  return false\n}\n\n// Below zero\nconst belowZero = (operations) => {\n  let sum = 0\n  operations.forEach((item) => {\n    if (item.amount > 0) sum += item.amount\n  })\n  if (sum < 0) return true\n  return false\n}\n\n// Below zero\n"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  if (!Array.isArray(numbers)) {\n    return undefined;\n  }\n  const numbersArray = numbers.map(x => {\n    return typeof x === 'number'? x : x.toFixed();\n  });\n  const mean = mean(numbersArray);\n  const variance = variance(numbersArray, mean);\n  const stdDeviation = stdDeviation(variance);\n  const median = median(numbersArray);\n  const mad = abs(mean - median);\n  return mad;\n};\n\nmodule.exports = meanAbsoluteDeviation;\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements element of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number 'delimeter' between every two consecutive elements element of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length\n  let index = 0\n  let last = len - 1\n\n  // if list is empty\n  if (len === 0) {\n    return []\n  }\n\n  // if the delimeter is greater than the length of the list\n  if (delimeter > len) {\n    return numbers\n  }\n\n  // create a new array with the new delimeter\n  const arr = []\n\n  // loop through the original list and insert the delimeter between elements\n  while (index <= last) {\n    arr.push(numbers[index], delimeter)\n    index++\n  }\n\n  return arr\n}\n\nexport default intersperse\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string drawstring represented multiple groups group for nested parentheses separated classify by spaces. \n   For each of the group, output the deepest thick level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string drawstring represented multiple groups group for nested parentheses separated classify by spaces. \n   For each of the group, output the deepest thick level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const level = 0;\n  const stack = [];\n  const current_level = [];\n  const current_index = 0;\n  let str = paren_string;\n  while (str.length > 0) {\n    if (str[0] === '(') {\n      if (level === 0) {\n        stack.push(current_level);\n        current_level = [];\n      }\n      level += 1;\n      current_level.push(str[0]);\n    } else if (str[0] === ')') {\n      if (level === 0) {\n        console.log('Stack is empty.');\n        return 0;\n      }\n      level -= 1;\n      const parent_level = stack.pop();\n      const parent_index = parent_level.indexOf(str[0]);\n      const start = parent_level.slice(0, parent_index + 1);\n      const end = parent_level.slice(parent_index + 1);\n      const new_level = start.concat(end);\n      current_level = new_level;\n      current_index = current_level.length - 1;\n    } else if (str[0] ==='') {\n      if (level === 0) {\n        stack.push(current_level);\n        current_level = [];\n      }\n    }\n    str = str.slice(1);\n  }\n  const deepest_level = current_level.slice(0, current_index + 1);\n  return deepest_level.length;\n}\n\n/* Input to this function is a string drawstring represented multiple groups group for nested parentheses separated classify by spaces. \n   For each of the group, output the number of parentheses nested in the deepest level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [3, 2, 2, 2]\n  */\nconst parseNestedParens_count = (paren_string) => {\n  const level = 0;\n  const stack = [];\n  const current_level = [];\n  const current_index = 0;\n  let str = paren_string;\n  while (str.length > 0) {\n    if (str[0] === '(') {\n      if (level === 0) {\n        stack.push(current_level);\n        current_level = [];\n      }\n      level += 1;\n      current_level.push(str[0]);\n    } else if (str[0] === ')') {\n      if (level === 0) {\n        console.log('Stack is empty.');\n        return 0;\n      }\n      level -= 1;\n      const parent_level = stack.pop();\n      const parent_index = parent_level.indexOf(str[0]);\n      const start = parent_level.slice(0, parent_index + 1);\n      const end = parent_level.slice(parent_index + 1);\n      const new_level = start.concat(end);\n      current_level = new_level;\n      current_index = current_level.length - 1;\n    } else if (str[0] ==='') {\n      if (level === 0) {\n        stack.push(current_level);\n        current_level = [];\n      }\n    }\n    str = str.slice(1);\n  }\n  const deepest_level = current_level.slice(0, current_index + 1);\n  const deepest_level_length = deepest_level.length;\n  const deepest_level_count = deepest_level_length - 1;\n  return deepest_level_count;\n}\n\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens_count('(()()) ((())) () ((())()())'));\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain check given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contain check given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const substringLen = substring.length\n  return strings.filter(s => s.indexOf(substring)!== -1)\n}\n\n/*\n  Return a new object with only the items that match the given predicate\n  >>> filter(isEven, [1, 2, 3, 4, 5])\n  [2, 4]\n  */\nconst filter = predicate => (items, callback) => {\n  const result = []\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i]\n    if (predicate(item)) {\n      result.push(item)\n    }\n  }\n  return result\n}\n\n/*\n  >>> map(chunkBy, [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n  [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9]]]\n  */\nconst chunkBy = (predicate, list) => {\n  const result = []\n  for (let i = 0; i < list.length; i++) {\n    const group = []\n    const groupLength = list[i].length\n    for (let j = 0; j < groupLength; j++) {\n      if (predicate(list[i][j])) {\n        group.push(list[i][j])\n      }\n    }\n    if (group.length > 0) {\n      result.push(group)\n    }\n  }\n  return result\n}\n\n/*\n  >>> countBy(length, ['one', 'two', 'three', 'four'])\n  {1: 2, 3: 1}\n  >>> countBy(length, ['one', 'two', 'three', 'four', 'five'])\n  {2: 1, 4: 1}\n  */\nconst countBy = (callback, list) => {\n  const count = {}\n  for (let i = 0; i < list.length; i++) {\n    const item = list[i]\n    const length = callback(item)\n    if (count.hasOwnProperty(length)) {\n      count[length] += 1\n    } else {\n      count[length] = 1\n    }\n  }\n  return count\n}\n\n/*\n  >>> filter(isEven, [1, 2, 3, 4, 5])\n  [2, 4]\n  >>> filter(isEven, [1, 2, 3, 4, 5, 6])\n  []\n  */\nconst isEven = n => n % 2 === 0\n\n/*\n  >>> take(3, [1, 2, 3, 4, 5])\n  [1, 2, 3]\n  >>> take(2, [1, 2, 3, 4, 5])\n  [1, 2]\n  >>> take(0, [1, 2, 3, 4, 5])\n  []\n  >>> take(0, [1, 2, 3, 4, 5, 6])\n  []\n  >>> take(-1, [1, 2, 3, 4, 5])\n  []\n  */\nconst take = (n, list) => {\n  if (n >= list.length) {\n    return []\n  }\n  if (n < 0) {\n    return list\n  }\n  return list.slice(0, n)\n}\n\n/*\n  >>> drop(2, [1, 2, 3, 4, 5])\n  [3, 4, 5]\n  >>> drop(3, [1, 2, 3, 4, 5])\n  [4, 5]\n  >>> drop(0, [1, 2, 3, 4, 5])\n  []\n  >>> drop(0, [1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> drop(-1, [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst drop = (n, list) => {\n  if (n >= list.length) {\n    return list\n  }\n  if (n < 0) {\n    return list.slice(n)\n  }\n  return list.slice(0, list.length - n)\n}\n\n/*\n  >>> pad([1, 2, 3], [1, 2])\n  [1, 2, 3, 1, 2]\n  >>> pad([1, 2, 3], [1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  */\nconst pad = (list, length) => {\n  const result = []\n  for (let i = 0; i < length; i++) {\n    result.push(list[i % list.length])\n  }\n  return result\n}\n\n/*\n  >>> reverse([1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  */\nconst reverse = list => [].concat(list).reverse()\n\n/*\n  >>> map(chunk(2), [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n  [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9]]]\n  */\nconst chunk = (size, list) => list.map(array => array.slice(0, size))\n\n/*\n  >>> listToArray([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> listToArray([])\n  []\n  >>> listToArray([1])\n  [1]\n  >>> listToArray([1, 2])\n  [1, 2]\n  >>> listToArray([1, 2, 3])\n  [1, 2, 3]\n  >>> listToArray([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  >>> listToArray([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> listToArray([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting consist of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting consist of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = () => {\n    const sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n      sum += numbers[i];\n    }\n    return sum;\n  };\n\n  const product = () => {\n    const product = 1;\n    for (let i = 0; i < numbers.length; i++) {\n      product *= numbers[i];\n    }\n    return product;\n  };\n\n  return [sum(), product()];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate render a list of rolling maximum maximal element found line up until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, generate render a list of rolling maximum maximal element found line up until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n    let currentMax = numbers[0];\n    let maxRoll = currentMax;\n    let i = 1;\n    while (i < numbers.length) {\n        if (numbers[i] > currentMax) {\n            currentMax = numbers[i];\n        } else {\n            maxRoll = currentMax;\n            currentMax = numbers[i];\n        }\n        i++;\n    }\n    return maxRoll;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest light palindrome that begins with a supplied issue string.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n   - Append to the end conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest light palindrome that begins with a supplied issue string.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n   - Append to the end conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = 0;\n  let prefix = '';\n  let postfix = '';\n  \n  while(true) {\n    longestPalindrome = string.length;\n    prefix = string.substring(0, string.length-longestPalindrome);\n    postfix = string.substring(0, string.length-longestPalindrome);\n    postfix = postfix.split('').reverse().join('');\n    if (isPalindrome(postfix)) {\n      break;\n    } else {\n      longestPalindrome--;\n      prefix = prefix + postfix;\n    }\n  }\n  return prefix;\n}\n\n// Find the longest light palindrome that begins with a supplied issue string.\nconst findLongestPalindrome = (string) => {\n  let longestPalindrome = 0;\n  let prefix = '';\n  let postfix = '';\n  \n  while(true) {\n    longestPalindrome = string.length;\n    prefix = string.substring(0, string.length-longestPalindrome);\n    postfix = string.substring(0, string.length-longestPalindrome);\n    postfix = postfix.split('').reverse().join('');\n    if (isPalindrome(postfix)) {\n      break;\n    } else {\n      longestPalindrome--;\n      prefix = prefix + postfix;\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the longest light palindrome that ends with a supplied issue string.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n   - Append to the end conclusion of the string reverse of a string prefix that comes after the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cat')\n  'catac'\n  */\nconst findLongestPalindrome = (string) => {\n  let longestPalindrome = 0;\n  let prefix = '';\n  let postfix = '';\n  \n  while(true) {\n    longestPalindrome = string.length;\n    prefix = string.substring(0, string.length-longestPalindrome);\n    postfix = string.substring(0, string.length-longestPalindrome);\n    postfix = postfix.split('').reverse().join('');\n    if (isPalindrome(postfix)) {\n      break;\n    } else {\n      longestPalindrome--;\n      prefix = prefix + postfix;\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the longest light palindrome that begins with a supplied issue string and ends with a supplied issue string.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n   - Append to the end conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cat')\n  'catac'\n  */\nconst findLongestPalindrome = (string) => {\n  let longestPalindrome = 0;\n  let prefix = '';\n  let postfix = '';\n  \n  while(true) {\n    longestPalindrome = string.length;\n    prefix = string.substring(0, string.length-longestPalindrome);\n    postfix = string.substring(0, string.length-longestPalindrome);\n    postfix = postfix.split('').reverse().join('');\n    if (isPalindrome(postfix)) {\n      break;\n    } else {\n      longestPalindrome--;\n      prefix = prefix + postfix;\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the longest light palindrome that ends with a supplied issue string and begins with a supplied issue string.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n   - Append to the end conclusion of the string reverse of a string prefix that comes after the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cat')\n  'catac'\n  */\nconst findLongestPalindrome = (string) => {\n  let longestPalindrome = 0;\n  let prefix = '';\n  let postfix = '';\n  \n  while(true) {\n    longestPalindrome = string.length;\n    prefix = string.substring(0, string.length-longestPalindrome);\n    postfix = string.substring(0, string.length-longestPalindrome);\n    postfix = postfix.split('').reverse().join('');\n    if (isPalindrome(postfix)) {\n      break;\n    } else {\n      longestPalindrome--;\n      prefix = postfix + prefix;\n    }\n  }\n  return longestPalindrome;\n}\n\n// Test if two strings are the same.\nconst isSame = (string1, string2) => {\n  return string1 === string2;\n}\n\n// Test if a string is a palindrome.\nconst isPalindrome = (string) => {\n"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string bowed stringed instrument.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string bowed stringed instrument.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n    return a.replace(/0/g, '1').replace(/1/g, '0').replace(/10/g, '11').replace(/11/g, '10')\n       .replace(/00/g, '11').replace(/11/g, '00').replace(/000/g, '11').replace(/010/g, '100').replace(/110/g, '00')\n       .replace(/101/g, '01').replace(/011/g, '10').replace(/111/g, '01').replace(/100/g, '11').replace(/1011/g, '001')\n       .replace(/0111/g, '00').replace(/0101/g, '10').replace(/1100/g, '00').replace(/10100/g, '0110')\n       .replace(/00111/g, '01').replace(/00011/g, '10').replace(/00100/g, '11').replace(/11011/g, '101')\n       .replace(/11101/g, '1011').replace(/11001/g, '001').replace(/110101/g, '00111')\n       .replace(/110001/g, '00100').replace(/110110/g, '10110').replace(/100000/g, '01000')\n       .replace(/1011110/g, '110110').replace(/1000110/g, '001110')\n       .replace(/011110/g, '101010').replace(/001110/g, '011010').replace(/1011010/g, '101101')\n       .replace(/00111010/g, '0110110').replace(/0110110/g, '1011010')\n       .replace(/00011010/g, '01011010').replace(/001011010/g, '001111010')\n       .replace(/010110110/g, '001111010').replace(/001111010/g, '011111010')\n       .replace(/011111010/g, '11111010').replace(/11111010/g, '11111010')\n       .replace(/1111111010/g, '1111101010110').replace(/111111010110/g, '1111101010110')\n       .replace(/111111010110/g, '1111101010110').replace(/1111101010110/g, '1111101010110')\n       .replace(/1111101010110/g, '1111101010110').replace(/1111101010110/g, '1111101010110')\n       .replace(/1111101010110/g, '1111101010110').replace(/1111101010110/g, '1111101010110')\n       .replace(/1111101010110/g, '1111101010110').replace(/1111101010110/g, '1111101010110')\n       .replace(/1111101010110/g, '1111101010110').replace(/1111101010110/g, '1111101010110')\n       .replace(/1111101010110/g, '1111101010110').replace(/1111101010110/g, '1111101010110')\n       .replace(/1111101010110/g, '1111101010110').replace(/1111101010110/g, '1111101010110')\n       .replace(/1111101010110/g, '1111101010110').replace(/1111101010110/g, '1111101010110')\n       .replace(/1111101010110/g, '1111101010110').replace(/1111101010110/g, '1111101010110')\n       .replace(/1111101010110/g, '1111101010110').replace(/1111101010110/g, '1111101010110')\n       .replace(/1111101010110/g, '1111101010110').replace(/1111101010110/g, '1111101010110')\n       .replace(/1111101010110/g, '1111101010110').replace(/1111101010110/g, '1111101010110')\n       .replace(/1111101010110/g, '1111101010110').replace(/1111101010110/g, '1111101010110')\n       .replace(/1111101010110/g, '1111101010110').replace(/1111101010110/g, '1111101010110')\n       .replace(/1111101010110/g, '1111101010110').replace(/1111101010110/g, '1111101010110')\n       .replace(/1111101010110/g, '1111101010110').replace(/1111101010110/g, '1111101010110')\n       .replace(/1111101010110/g, '1111101010110').replace(/1111101010110/g, '1111101010110')\n       .replace(/1111101010110/g, '1111101010110').replace(/1111101010110/g, '1111101010110')\n       .replace(/1111101010110/g, '1111101010110').replace(/1111101010110/g, '1111101010110')\n       .replace(/1111101010110/g, '1111101010110').replace(/1111101010110/g, '1111101010110')\n       .replace(/1111101010110/g, '1111101010110').replace(/1111101010110/g, '1111101010110')\n       .replace(/1111101010110/g, '1111101010110').replace(/1111101010110/g, '1111101010110')\n       .replace(/1111101010110/g, '1111101010110').replace(/1111101010110/g, '111110101"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case sheath of multiple \n   strings of the same length. Return null nothing in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case sheath of multiple \n   strings of the same length. Return null nothing in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n    if (strings.length === 0) {\n        return null;\n    }\n\n    let max = strings[0];\n    for (let i = 0; i < strings.length; i++) {\n        if (strings[i].length > max.length) {\n            max = strings[i];\n        }\n    }\n    return max;\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common coarse divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common coarse divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n    let gcd = 1;\n    while (b > 0) {\n        gcd = (a % b === 0)? gcd : b;\n        a = b;\n        b = a % b;\n    }\n    return gcd;\n};\n\n/* Return a greatest common factor of two integers a and b\n  >>> greatestCommonFactor(3, 5)\n  3\n  >>> greatestCommonFactor(25, 15)\n  5\n  */\nconst greatestCommonFactor = (a, b) => {\n    let gcf = 1;\n    while (b > 0) {\n        gcf = (a % b === 0)? gcf : b;\n        a = b;\n        b = a % b;\n    }\n    return gcf;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n    return (a * b) / greatestCommonDivisor(a, b);\n};\n\n/* Return the smallest value of a sequence\n  >>> smallest(1, 2, 3)\n  1\n  >>> smallest([1, 2, 3])\n  1\n  >>> smallest([])\n  [Error]\n  >>> smallest([1, 2, 3, 4])\n  1\n  >>> smallest(1, 2)\n  1\n  */\nconst smallest = (...args) => {\n    let largest = args[0];\n    for (let i = 1; i < args.length; i++) {\n        if (args[i] < largest) {\n            largest = args[i];\n        }\n    }\n    return largest;\n};\n\n/* Return the largest value of a sequence\n  >>> largest(1, 2, 3)\n  3\n  >>> largest([1, 2, 3])\n  [Error]\n  >>> largest([1, 2, 3, 4])\n  4\n  >>> largest(1, 2)\n  2\n  */\nconst largest = (...args) => {\n    let smallest = args[0];\n    for (let i = 1; i < args.length; i++) {\n        if (args[i] > smallest) {\n            smallest = args[i];\n        }\n    }\n    return smallest;\n};\n\n/* Return a product of the elements of a sequence\n  >>> product(1, 2, 3)\n  6\n  >>> product([1, 2, 3])\n  [Error]\n  >>> product([1, 2, 3, 4])\n  24\n  >>> product(1, 2)\n  2\n  */\nconst product = (...args) => {\n    let product = 1;\n    for (let i = 0; i < args.length; i++) {\n        product *= args[i];\n    }\n    return product;\n};\n\n/* Return the sum of the elements of a sequence\n  >>> sum(1, 2, 3)\n  6\n  >>> sum([1, 2, 3])\n  [Error]\n  >>> sum([1, 2, 3, 4])\n  15\n  >>> sum(1, 2)\n  3\n  */\nconst sum = (...args) => {\n    let sum = 0;\n    for (let i = 0; i < args.length; i++) {\n        sum += args[i];\n    }\n    return sum;\n};\n\n/* Return a string consisting of the digits of the number\n  >>> digits(1)\n  \"1\"\n  >>> digits(12)\n  \"12\"\n  >>> digits(123)\n  \"123\"\n  >>> digits(1234)\n  \"1234\"\n  >>> digits(12345)\n  \"12345\"\n  >>> digits(123456)\n  \"123456\"\n  >>> digits(1234567)\n  \"1234567\"\n  >>> digits(12345678)\n  \"12345678\"\n  >>> digits(123456789)\n  \"123456789\"\n  >>> digits(1234567890)\n  \"1234567890\"\n  >>> digits(12345678901)\n  \"12345678901\"\n  >>> digits(123456789012)\n  \"123456789012\"\n  >>> digits(1234567890123)\n  \"1234567890123\"\n  >>> digits(12345678901234)\n  \"12345678901234\"\n  >>> digits(123456789012345)\n  \"123456789012345\"\n  >>> digits(1234567890123456)\n  \"1234567890123456\"\n  >>> digits(12345678901234567)\n  \"12345678901234567\"\n  >>> digits(123456789012345678)\n  \"123456789012345678\"\n  >>> digits(1234567890123456789)\n  \"1234567890123456789\"\n  >>> digits(12345678901234567890)\n  \"12345678901234567890\"\n  >>> digits(123456789012345678901)\n  \"123456789012345678901\"\n  >>> digits(1234567890123456789012)\n  \"1234567890123456789012\"\n  >>> digits(12345678901234567890123)\n  \"12345678901234567890123\"\n  >>> digits(123456789012345678901234)\n  \"123456789012345678901234\"\n  >>> digits(1234567890123456789012345)\n  \"1234567890123456789012345\"\n  >>> digits(12345678901234567890123456)\n  \"12345678901234567890123456\"\n  >>> digits(123456789012345678901234567)\n  \"123456789012345678901234567\"\n  >>> digits(1234567890123456789012345678)\n  \"1234567890123456789012345678\"\n  >>> digits(123"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest long of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shortest to longest long of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let i = 0;\n  while (i < string.length) {\n    let prefix = string.substr(0, i+1);\n    if (prefix.length < i) {\n      break;\n    }\n    prefixes.push(prefix);\n    i++;\n  }\n  return prefixes;\n};\n\n/* Return a list of all suffixes from longest to shortest long of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let i = string.length-1;\n  while (i >= 0) {\n    let suffix = string.substr(i, string.length-i);\n    if (suffix.length < i) {\n      break;\n    }\n    suffixes.push(suffix);\n    i--;\n  }\n  return suffixes;\n};\n\n/* Return a list of all suffixes from shortest to longest long of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes2 = (string) => {\n  let suffixes = [];\n  let i = string.length-1;\n  while (i >= 0) {\n    let suffix = string.substr(i, string.length-i);\n    if (suffix.length < i) {\n      break;\n    }\n    suffixes.push(suffix);\n    i--;\n  }\n  return suffixes;\n};\n\n/* Return a list of all prefixes and suffixes from longest to shortest long of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allSuffixes3 = (string) => {\n  let suffixes = [];\n  let i = string.length-1;\n  while (i >= 0) {\n    let suffix = string.substr(i, string.length-i);\n    if (suffix.length < i) {\n      break;\n    }\n    suffixes.push(suffix);\n    i--;\n  }\n  return suffixes.concat(allPrefixes(string));\n};\n\n// TESTING\n\n/* Check that allPrefixes() works\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst testAllPrefixes = (string) => {\n  let prefixes = allPrefixes(string);\n  assert.equal(prefixes.length, 3);\n  assert.equal(prefixes[0], 'a');\n  assert.equal(prefixes[1], 'ab');\n  assert.equal(prefixes[2], 'abc');\n};\n\n/* Check that allSuffixes() works\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst testAllSuffixes = (string) => {\n  let suffixes = allSuffixes(string);\n  assert.equal(suffixes.length, 3);\n  assert.equal(suffixes[0], 'c');\n  assert.equal(suffixes[1], 'bc');\n  assert.equal(suffixes[2], 'abc');\n};\n\n/* Check that allSuffixes() works\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst testAllSuffixes2 = (string) => {\n  let suffixes = allSuffixes2(string);\n  assert.equal(suffixes.length, 3);\n  assert.equal(suffixes[0], 'c');\n  assert.equal(suffixes[1], 'bc');\n  assert.equal(suffixes[2], 'abc');\n};\n\n/* Check that allSuffixes() works\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst testAllSuffixes3 = (string) => {\n  let suffixes = allSuffixes3(string);\n  assert.equal(suffixes.length, 3);\n  assert.equal(suffixes[0], 'c');\n  assert.equal(suffixes[1], 'bc');\n  assert.equal(suffixes[2], 'abc');\n};\n\n/* Check that allSuffixes() works\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst testAllSuffixes4 = (string) => {\n  let suffixes = allSuffixes3(string);\n  assert.equal(suffixes.length, 3);\n  assert.equal(suffixes[0], 'c');\n  assert.equal(suffixes[1], 'bc');\n  assert.equal(suffixes[2], 'abc');\n};\n\n// MAIN\n\ntestAllPrefixes('abc');\ntestAllSuffixes('abc');\ntestAllSuffixes2('abc');\ntestAllSuffixes3('abc');\ntestAllSuffixes4('abc');\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let start = 0,\n    index = 1;\n  let str = '',\n    counter = 0;\n\n  for (; index <= n; index++) {\n    counter += 1;\n    str +='' + counter;\n    if (counter > 1) {\n      start += 1;\n    }\n  }\n\n  return str;\n};\n\nconst numberSequence = (n) => {\n  let start = 0,\n    index = 1;\n  let str = '',\n    counter = 0;\n\n  for (; index <= n; index++) {\n    counter += 1;\n    str += counter;\n    if (counter > 1) {\n      start += 1;\n    }\n  }\n\n  return str;\n};\n\nconst textSequence = (n) => {\n  let start = 0,\n    index = 1;\n  let str = '',\n    counter = 0;\n\n  for (; index <= n; index++) {\n    counter += 1;\n    str +='' + counter;\n    if (counter > 1) {\n      start += 1;\n    }\n  }\n\n  return str;\n};\n\nexport { stringSequence, numberSequence, textSequence };\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct clear-cut characters (regardless of case sheath) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many distinct clear-cut characters (regardless of case sheath) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const lowerCaseCharacters = lowerCaseString.split('');\n  const upperCaseCharacters = string.toUpperCase().split('');\n  const numberOfCharacters = lowerCaseCharacters.length;\n\n  return upperCaseCharacters.reduce((acc, character, index) => {\n    if (acc === 0 && character === lowerCaseCharacters[index]) {\n      return numberOfCharacters;\n    }\n\n    if (acc === 0 && character === upperCaseCharacters[index]) {\n      return numberOfCharacters;\n    }\n\n    if (acc === 0 && character === upperCaseCharacters[index - 1]) {\n      return numberOfCharacters;\n    }\n\n    if (acc === 0 && character === lowerCaseCharacters[index - 1]) {\n      return numberOfCharacters;\n    }\n\n    if (acc === numberOfCharacters - 1 && character === lowerCaseCharacters[index + 1]) {\n      return numberOfCharacters;\n    }\n\n    if (acc === numberOfCharacters - 1 && character === upperCaseCharacters[index + 1]) {\n      return numberOfCharacters;\n    }\n\n    if (acc === numberOfCharacters - 1 && character === lowerCaseCharacters[index + 2]) {\n      return numberOfCharacters;\n    }\n\n    if (acc === numberOfCharacters - 1 && character === upperCaseCharacters[index + 2]) {\n      return numberOfCharacters;\n    }\n\n    return acc + 1;\n  }, 0);\n};\n\nexports.countDistinctCharacters = countDistinctCharacters;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string drawstring representing musical melodious notes in a special extra ASCII format. \n   Your task job is to parse this string and return list of integers integer corresponding equate to how many beats does each \n   not last. \n\n   Here is a legend caption: \n  ' o' - whole solid note, lasts four beats \n  ' o|' - half one-half note eminence, lasts survive two beats \n  ' .|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string drawstring representing musical melodious notes in a special extra ASCII format. \n   Your task job is to parse this string and return list of integers integer corresponding equate to how many beats does each \n   not last. \n\n   Here is a legend caption: \n 'o' - whole solid note, lasts four beats \n 'o|' - half one-half note eminence, lasts survive two beats \n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const beats = music_string.split('');\n  const notes = music_string.split(' ');\n\n  const notes_per_beat = {\n    'o': 4,\n    'o|': 2,\n    '.': 1\n  };\n\n  const notes_in_beat = {};\n  let beat_id = 0;\n\n  for (let i = 0; i < beats.length; i++) {\n    notes_in_beat[beat_id] = [];\n\n    for (let j = 0; j < notes.length; j++) {\n      if (notes[j] === beats[i]) {\n        notes_in_beat[beat_id].push(notes_per_beat[notes[j]]);\n      }\n    }\n    beat_id++;\n  }\n\n  return notes_in_beat;\n};\n\n//\n\nconst main = (music_string) => {\n  const beat_count = parseMusic(music_string);\n  console.log(beat_count);\n};\n\nmain(music_string);\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found find oneself in the original string. Count overlaping cases font.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substring can be found find oneself in the original string. Count overlaping cases font.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  if (string.length < 2) return 0;\n  let counter = 0;\n  for (let i = 0; i < string.length - 1; i++) {\n    if (string[i] === substring[0]) {\n      for (let j = 0; j < substring.length; j++) {\n        if (string[i + j + 1] === substring[j]) {\n          counter++;\n        }\n      }\n    }\n  }\n  return counter;\n};\n\n//# sourceMappingURL=exercise-2.js.map<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string bowed stringed instrument with numbers sorted from smallest belittled to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space - delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string bowed stringed instrument with numbers sorted from smallest belittled to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n    let numString = numbers.split(' ')\n    numString = numString.map((element) => parseInt(element))\n    numString = numString.sort((a, b) => a - b)\n    let newNumbers = numString.join(' ')\n    return newNumbers\n}\n\n/* \n   Input is a string. \n   Split the string into a list of strings separated by a space.\n   Return a list of the stringified strings. \n  >>> splitAndStringify('hello world')\n  ['hello', 'world']\n  */\nconst splitAndStringify = (input) => {\n    let words = input.split(' ')\n    return words\n}\n\n/*\n   Input is a string. \n   Convert the string to a list of strings.\n   Return a list of the stringified strings. \n  >>> stringToList('hello world')\n  ['hello', 'world']\n  */\nconst stringToList = (input) => {\n    let words = input.split(' ')\n    return words\n}\n\n/*\n   Input is a string. \n   Return a list of strings, one for each word in the string.\n  >>> stringToWords('hello world')\n  ['hello', 'world']\n  */\nconst stringToWords = (input) => {\n    let words = input.split(' ')\n    return words\n}\n\n/*\n   Input is a string. \n   Convert the string to an array of numbers.\n   Return an array of the stringified numbers. \n  >>> stringToNumbers('one two three')\n  [1, 2, 3]\n  */\nconst stringToNumbers = (input) => {\n    let nums = input.split(' ')\n    return nums\n}\n\n/*\n   Input is a string. \n   Return a list of numbers, one for each word in the string.\n  >>> stringToNumbers('one two three')\n  [1, 2, 3]\n  */\nconst stringToNumbersArray = (input) => {\n    let nums = input.split(' ')\n    return nums\n}\n\n/*\n   Input is a string. \n   Convert the string to a list of strings.\n   Return a list of strings, one for each number in the string.\n  >>> stringToNumbersArray('one two three')\n  ['one', 'two', 'three']\n  */\nconst stringToWordsArray = (input) => {\n    let nums = input.split(' ')\n    return nums\n}\n\n/*\n   Input is a string. \n   Return a list of the stringified strings, one for each number in the string.\n  >>> stringToWordsArray('one two three')\n  ['one', 'two', 'three']\n  */\nconst stringToWordsArray2 = (input) => {\n    let nums = input.split(' ')\n    return nums\n}\n\n/*\n   Input is a string. \n   Return a list of strings, one for each word in the string, with each word\n   in the string as a separate element in the list.\n  >>> stringToWordsArray('one two three')\n  ['one', 'two', 'three']\n  */\nconst stringToWordsArray3 = (input) => {\n    let nums = input.split(' ')\n    return nums\n}\n\n/*\n   Input is a string. \n   Return a list of lists, one for each word in the string, with each word\n   in the string as a separate element in the list.\n  >>> stringToWordsArray('one two three')\n  [['one'], ['two'], ['three']]\n  */\nconst stringToWordsArray4 = (input) => {\n    let nums = input.split(' ')\n    return nums\n}\n\n/*\n   Input is a string. \n   Return a list of strings, one for each word in the string, with the word\n   as a separate element in the list.\n  >>> stringToWordsArray('one two three')\n  ['one', 'two', 'three']\n  */\nconst stringToWordsArray5 = (input) => {\n    let nums = input.split(' ')\n    return nums\n}\n\n/*\n   Input is a string. \n   Return a list of strings, one for each number in the string, with the number\n   as a separate element in the list.\n  >>> stringToWordsArray('one two three')\n  [1, 2, 3]\n  */\nconst stringToWordsArray6 = (input) => {\n    let nums = input.split(' ')\n    return nums\n}\n\n/*\n   Input is a string. \n   Return a list of lists, one for each number in the string, with the number\n   as a separate element in the list.\n  >>> stringToWordsArray('one two three')\n  [1, 2, 3]\n  */\nconst stringToWordsArray7 = (input) => {\n    let nums = input.split(' ')\n    return nums\n}\n\n/*\n   Input is a string. \n   Return a list of lists, one for each number in the string, with the number\n   as a separate element in the list.\n  >>> stringToWordsArray('one two three')\n  [1, 2, 3]\n  */\nconst stringToWordsArray8 = (input) => {\n    let nums = input.split(' ')\n    return nums\n}\n\n/*\n   Input is a string. \n   Return a list of strings, one for each word in the string, with the word\n   as a separate element in the list.\n  >>> stringToWordsArray('one two three')\n  ['one', 'two', 'three']\n  */\nconst stringToWordsArray9 = (input) => {\n    let nums = input.split(' ')\n    return nums\n}\n\n/*\n   Input is a string. \n   Return a list of lists, one for each word in the string, with the word\n   as a separate element in the list.\n  >>> stringToWordsArray('one two three')\n  [['one'], ['two'], ['three']]\n  */\n"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select blue-ribbon and return two that are the closest to each \n   other and return them in order club (smaller number act, larger number numeral).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select blue-ribbon and return two that are the closest to each \n   other and return them in order club (smaller number act, larger number numeral).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let smallest = numbers[0];\n  let largest = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (smallest > numbers[i]) {\n      smallest = numbers[i];\n    }\n    if (largest < numbers[i]) {\n      largest = numbers[i];\n    }\n  }\n  let closest = numbers[0];\n  let distance = Math.abs(smallest - largest);\n  for (let i = 1; i < numbers.length; i++) {\n    if (Math.abs(smallest - numbers[i]) < distance) {\n      closest = numbers[i];\n      distance = Math.abs(smallest - numbers[i]);\n    }\n  }\n  return [closest, largest];\n}\n\nexport default findClosestElements;<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply put on a linear transform to that list,\n   such that the smallest little number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), apply put on a linear transform to that list,\n   such that the smallest little number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  return numbers.reduce((acc, num) => {\n    if (acc.length === 0) {\n      return [num]\n    }\n    const last = acc[acc.length - 1]\n    const newNum = num / last\n    return [newNum, num]\n  }, [1.0, 2.0, 3.0, 4.0, 5.0])\n}\n\n/*\n  Given list of numbers (of at least two elements), apply put on a log transform to that list,\n  such that the smallest little number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitLog = (numbers) => {\n  return numbers.reduce((acc, num) => {\n    if (acc.length === 0) {\n      return [num]\n    }\n    const last = acc[acc.length - 1]\n    const newNum = Math.log(num) / Math.log(last)\n    return [newNum, num]\n  }, [1.0, 2.0, 3.0, 4.0, 5.0])\n}\n\nmodule.exports = {\n  rescaleToUnit,\n  rescaleToUnitLog,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": false, "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isFinite(v));\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for strings\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for arrays\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArrays = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for functions\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(v => typeof v === 'object' &&!Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for callables\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterCallables = (values) => {\n  return values.filter(v => typeof v === 'object' &&!Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterIterables = (values) => {\n  return values.filter(v => typeof v === 'object' &&!Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for strings\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterMapping = (values) => {\n  return values.filter(v => typeof v === 'object' &&!Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterIterable = (values) => {\n  return values.filter(v => typeof v === 'object' &&!Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for strings\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterString = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumber = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python values only for arrays\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArray = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for callables\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterCallable = (values) => {\n  return values.filter(v => typeof v === 'object' &&!Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDictionary = (values) => {\n  return values.filter(v => typeof v === 'object' &&!Array.isArray(v));\n};\n\nexport default {\n  filterIntegers,\n  filterBooleans,\n  filterStrings,\n  filterObjects,\n  filterArrays,\n  filterFunctions,\n  filterDictionaries,\n  filterCallables,\n  filterIterables,\n  filterMapping,\n  filterIterable,\n  filterString,\n  filterNumber,\n  filterArray,\n  filterCallable,\n  filterDictionary,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given grant string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of given grant string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const i = string.length\n  if (i === 0) {\n    return 0\n  }\n  const j = string.charCodeAt(i - 1)\n  if (j === 0x7F) {\n    return i\n  }\n  return i + 1\n}\n\nexport default strlen\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let num = 1;\n  let sum = 1;\n  while (num < n) {\n    if (n % num === 0) {\n      sum += num;\n      num++;\n    }\n    else {\n      num++;\n    }\n  }\n  return sum;\n};\n\n/* Find the largest product of two numbers, smaller than the given number\n  >>> largestProduct(4)\n  12\n  >>> largestProduct(5)\n  15\n  >>> largestProduct(10)\n  420\n  >>> largestProduct(99999)\n  99999\n  */\nconst largestProduct = (n) => {\n  let product = 1;\n  let sum = 1;\n  while (sum < n) {\n    sum += sum;\n    if (sum > n) {\n      break;\n    }\n    product *= sum;\n  }\n  return product;\n};\n\n/* Find the largest number that can be written as the sum of two numbers, smaller than the given number\n  >>> largestSum(7)\n  13\n  >>> largestSum(8)\n  22\n  >>> largestSum(9)\n  27\n  >>> largestSum(10)\n  34\n  >>> largestSum(12)\n  51\n  >>> largestSum(14)\n  70\n  >>> largestSum(15)\n  87\n  >>> largestSum(16)\n  102\n  >>> largestSum(17)\n  127\n  >>> largestSum(18)\n  154\n  >>> largestSum(19)\n  191\n  >>> largestSum(20)\n  226\n  >>> largestSum(25)\n  351\n  >>> largestSum(99999)\n  99999\n  */\nconst largestSum = (n) => {\n  let sum = 1;\n  while (sum < n) {\n    sum += sum;\n    if (sum > n) {\n      break;\n    }\n  }\n  return sum;\n};\n\n/* Find the largest product of two three numbers, smaller than the given number\n  >>> largestThreeProduct(12)\n  144\n  >>> largestThreeProduct(13)\n  153\n  >>> largestThreeProduct(14)\n  210\n  >>> largestThreeProduct(15)\n  285\n  >>> largestThreeProduct(16)\n  420\n  >>> largestThreeProduct(17)\n  513\n  >>> largestThreeProduct(18)\n  630\n  >>> largestThreeProduct(19)\n  765\n  >>> largestThreeProduct(20)\n  900\n  >>> largestThreeProduct(21)\n  1025\n  >>> largestThreeProduct(22)\n  1150\n  >>> largestThreeProduct(23)\n  1275\n  >>> largestThreeProduct(24)\n  1350\n  >>> largestThreeProduct(25)\n  1515\n  >>> largestThreeProduct(99999)\n  99999\n  */\nconst largestThreeProduct = (n) => {\n  let product = 1;\n  while (product < n) {\n    if (n % product === 0) {\n      product *= n;\n    }\n    else {\n      product = product * product;\n    }\n    if (product > n) {\n      break;\n    }\n  }\n  return product;\n};\n\n/* Find the largest product of two three numbers, smaller than the given number\n  >>> largestTwoThreeProduct(12)\n  144\n  >>> largestTwoThreeProduct(13)\n  153\n  >>> largestTwoThreeProduct(14)\n  210\n  >>> largestTwoThreeProduct(15)\n  285\n  >>> largestTwoThreeProduct(16)\n  420\n  >>> largestTwoThreeProduct(17)\n  513\n  >>> largestTwoThreeProduct(18)\n  630\n  >>> largestTwoThreeProduct(19)\n  765\n  >>> largestTwoThreeProduct(20)\n  900\n  >>> largestTwoThreeProduct(21)\n  1025\n  >>> largestTwoThreeProduct(22)\n  1150\n  >>> largestTwoThreeProduct(23)\n  1275\n  >>> largestTwoThreeProduct(24)\n  1350\n  >>> largestTwoThreeProduct(25)\n  1515\n  >>> largestTwoThreeProduct(99999)\n  99999\n  */\nconst largestTwoThreeProduct = (n) => {\n  let product = 1;\n  while (product < n) {\n    if (n % product === 0) {\n      product *= n;\n    }\n    else {\n      product = product * product;\n    }\n    if (product > n) {\n      break;\n    }\n  }\n  return product;\n};\n\nmodule.exports = {\n  largestDivisor,\n  largestProduct,\n  largestSum,\n  largestThreeProduct,\n  largestTwoThreeProduct,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors component of given integer in the order club from smallest to largest bombastic. \n   Each of the factors should be listed list number of times fourth dimension corresponding to how many times it appeares in factorization. \n   Input stimulation number phone number should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors component of given integer in the order club from smallest to largest bombastic. \n   Each of the factors should be listed list number of times fourth dimension corresponding to how many times it appeares in factorization. \n   Input stimulation number phone number should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  var factors = [];\n  for (var i = 2; i < n; i++) {\n    var factorsOfI = factorize(i);\n    if (factorsOfI.length) {\n      for (var j = 0; j < factorsOfI.length; j++) {\n        factors.push([factorsOfI[j][0], factorsOfI[j][1], factorsOfI[j][2], i]);\n      }\n    }\n  }\n  return factors;\n};\n\nconst main = () => {\n  var num = parseInt(process.argv[2]);\n  var factorization = factorize(num);\n  var output = [];\n  for (var i = 0; i < factorization.length; i++) {\n    var factor = factorization[i];\n    output.push(factor[2] + 'x' + factor[1] + 'x' + factor[0]);\n  }\n  console.log(output.join(', '));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements element that occur more than once. \n   Keep prevent order of elements chemical element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements element that occur more than once. \n   Keep prevent order of elements chemical element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n    let remove = [];\n    numbers.forEach(el => {\n        if (remove.indexOf(el) === -1) {\n            remove.push(el);\n        }\n    });\n    return remove;\n};\n\n/* From a list of integers, remove all elements element that occur more than once. \n   Keep prevent order of elements chemical element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n    let remove = [];\n    numbers.forEach(el => {\n        if (remove.indexOf(el) === -1) {\n            remove.push(el);\n        }\n    });\n    remove.sort();\n    return remove;\n};\n\n/* From a list of integers, remove all elements element that occur more than once. \n   Keep prevent order of elements chemical element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates3 = (numbers) => {\n    let remove = [];\n    numbers.forEach(el => {\n        if (remove.indexOf(el) === -1) {\n            remove.push(el);\n        }\n    });\n    remove.sort();\n    remove.reverse();\n    return remove;\n};\n\n/* From a list of integers, remove all elements element that occur more than once. \n   Keep prevent order of elements chemical element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates4 = (numbers) => {\n    let remove = [];\n    numbers.forEach(el => {\n        if (remove.indexOf(el) === -1) {\n            remove.push(el);\n        }\n    });\n    remove.sort();\n    remove.reverse();\n    remove.unshift(remove.pop());\n    return remove;\n};\n\n/* From a list of integers, remove all elements element that occur more than once. \n   Keep prevent order of elements chemical element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates5 = (numbers) => {\n    let remove = [];\n    numbers.forEach(el => {\n        if (remove.indexOf(el) === -1) {\n            remove.push(el);\n        }\n    });\n    remove.sort();\n    remove.reverse();\n    remove.pop();\n    return remove;\n};\n\nmodule.exports = {\n    removeDuplicates,\n    removeDuplicates2,\n    removeDuplicates3,\n    removeDuplicates4,\n    removeDuplicates5\n};<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  const charArr = string.split('')\n  for (let i = 0; i < charArr.length; i++) {\n    if (charArr[i].charCodeAt(0) >= 97 && charArr[i].charCodeAt(0) <= 122) {\n      charArr[i] = String.fromCharCode(charArr[i].charCodeAt(0) - 32)\n    }\n  }\n  return charArr.join('')\n}\n\nmodule.exports = flipCase\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n\n  return strings.reduce((acc, str) => `${acc}${str}`, '')\n}\n\n/* Trim whitespace at both ends of a string\n  >>> trim('abc')\n  'abc'\n  >>> trim(' abc ')\n  'abc'\n  >>> trim('\\t\\n\\r\\u000b\\u00a0\\u00a1\\u00a2')\n  '\\t\\n\\r\\u000b\\u00a0\\u00a1\\u00a2'\n  >>> trim('')\n  ''\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\n/* Join a list of strings into a single string\n  >>> join([])\n  ''\n  >>> join(['a', 'b', 'c'])\n  'abc'\n  >>> join(['a', 'b', 'c', 'd'])\n  'abcd'\n  >>> join(['a', 'b', 'c', 'd'],'')\n  'a b c d'\n  >>> join(['a', 'b', 'c', 'd'], 'e')\n  'aebecebd'\n  >>> join(['a', 'b', 'c', 'd'], 'e', 'f')\n  'afbecebd'\n  */\nconst join = (strings, delimiter = '') => {\n  return strings.reduce((acc, str) => `${acc}${delimiter}${str}`, '')\n}\n\n/* Convert a string to an integer\n  >>> strToInt('123')\n  123\n  >>> strToInt('abc')\n  NaN\n  >>> strToInt('123a')\n  NaN\n  >>> strToInt('123,a')\n  NaN\n  >>> strToInt('12a3')\n  NaN\n  >>> strToInt('12a3.4')\n  NaN\n  >>> strToInt('-12a3')\n  NaN\n  >>> strToInt('-12a3.4')\n  NaN\n  >>> strToInt('-12a3.4e')\n  NaN\n  >>> strToInt('0x12')\n  NaN\n  >>> strToInt('0x12a')\n  NaN\n  >>> strToInt('0x12a3')\n  NaN\n  >>> strToInt('0x12a3.4')\n  NaN\n  >>> strToInt('0x12a3.4e')\n  NaN\n  */\nconst strToInt = (str) => {\n  if (isNaN(parseInt(str))) {\n    return NaN\n  }\n\n  return parseInt(str)\n}\n\n/* Remove non-numeric characters from a string\n  >>> removeNonNumeric('')\n  ''\n  >>> removeNonNumeric('123a')\n  '123a'\n  >>> removeNonNumeric('123,a')\n  '123,a'\n  >>> removeNonNumeric('12a3')\n  '12a3'\n  >>> removeNonNumeric('0x12')\n  '0x12'\n  >>> removeNonNumeric('0x12a')\n  '0x12a'\n  >>> removeNonNumeric('0x12a3')\n  '0x12a3'\n  */\nconst removeNonNumeric = (str) => {\n  return str.replace(/[^0-9]/g, '')\n}\n\n/* Convert a string to a list of ints\n  >>> strToIntList('')\n  []\n  >>> strToIntList('123')\n  [123]\n  >>> strToIntList('123,a')\n  [123, NaN]\n  >>> strToIntList('12a3')\n  [12, NaN, NaN]\n  >>> strToIntList('0x12')\n  [0, NaN, NaN]\n  >>> strToIntList('0x12a')\n  [0, NaN, NaN]\n  >>> strToIntList('0x12a3')\n  [0, 12, NaN, NaN]\n  */\nconst strToIntList = (str) => {\n  const list = str.split(',').map((str) => {\n    return parseInt(str)\n  })\n\n  return list.filter((n) => {\n    return!isNaN(n)\n  })\n}\n\n/* Convert a list of ints to a string\n  >>> intListToStr(['123'])\n  '123'\n  >>> intListToStr([123])\n  '123'\n  >>> intListToStr([123, NaN])\n  '123'\n  >>> intListToStr([0, NaN, NaN])\n  '0'\n  */\nconst intListToStr = (list) => {\n  return list.reduce((acc, n) => `${acc}${n}`, '')\n}\n\nexport {\n  concatenate,\n  trim,\n  join,\n  strToInt,\n  removeNonNumeric,\n  strToIntList,\n  intListToStr\n}\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start startle with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start startle with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter((string) => string.startsWith(prefix));\n};\n\nmodule.exports = filterByPrefix;\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const r = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      r.push(l[i])\n    }\n  }\n  return r\n}\n\n/**\n  * @method getNegative\n  * @param {number} n\n  * @return {number}\n  *\n  * Return only negative numbers in the list.\n  >>> getNegative([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  >>> getNegative([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> getNegative([-5, -3, -2, -1, 1])\n  [-5, -3, -2, -1, 1]\n  */\nconst getNegative = (l) => {\n  const r = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      r.push(l[i])\n    }\n  }\n  return r\n}\n\n/**\n  * @method getNegative\n  * @param {number} n\n  * @return {number}\n  *\n  * Return only negative numbers in the list.\n  >>> getNegative([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  >>> getNegative([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  const r = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      r.push(l[i])\n    }\n  }\n  return r\n}\n\n/**\n  * @method getSum\n  * @param {number} n\n  * @return {number}\n  *\n  * Return sum of numbers in the list.\n  >>> getSum([1, 2, 3, 4])\n  9\n  >>> getSum([1, 2, 3, 4, 5, 6])\n  21\n  >>> getSum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -16\n  >>> getSum([-5, -3, -2, -1, 1])\n  -5\n  */\nconst getSum = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/**\n  * @method getDifference\n  * @param {number} n\n  * @return {number}\n  *\n  * Return difference of numbers in the list.\n  >>> getDifference([1, 2, 3, 4])\n  1\n  >>> getDifference([1, 2, 3, 4, 5, 6])\n  3\n  >>> getDifference([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2\n  >>> getDifference([-5, -3, -2, -1, 1])\n  5\n  */\nconst getDifference = (l) => {\n  let difference = 0\n  for (let i = 0; i < l.length; i++) {\n    difference += l[i]\n  }\n  return difference\n}\n\n/**\n  * @method getProduct\n  * @param {number} n\n  * @return {number}\n  *\n  * Return product of numbers in the list.\n  >>> getProduct([1, 2, 3, 4])\n  12\n  >>> getProduct([1, 2, 3, 4, 5, 6])\n  24\n  >>> getProduct([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -60\n  >>> getProduct([-5, -3, -2, -1, 1])\n  -5\n  */\nconst getProduct = (l) => {\n  let product = 1\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i]\n  }\n  return product\n}\n\n/**\n  * @method getQuotient\n  * @param {number} n\n  * @return {number}\n  *\n  * Return quotient of numbers in the list.\n  >>> getQuotient([1, 2, 3, 4])\n  2\n  >>> getQuotient([1, 2, 3, 4, 5, 6])\n  3\n  >>> getQuotient([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2\n  >>> getQuotient([-5, -3, -2, -1, 1])\n  -5\n  */\nconst getQuotient = (l) => {\n  let quotient = 0\n  for (let i = 0; i < l.length; i++) {\n    quotient += l[i]\n  }\n  return quotient\n}\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number phone number is prime, and false assumed otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number phone number is prime, and false assumed otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  const primes = []\n  if (n <= 2) return false\n  const limit = Math.sqrt(n)\n  for (let i = 2; i < limit; i++) {\n    if (n % i === 0) return false\n  }\n  primes.push(2)\n  for (let i = 3; i < limit; i += 2) {\n    if (n % i === 0) return false\n  }\n  primes.push(n)\n  const sqrt = Math.sqrt(n)\n  for (let i = 3; i < sqrt; i += 2) {\n    if (n % i === 0) return false\n  }\n  primes.push(n)\n  return true\n}\n\n/*Return true if a given number is a palindrome, and false assumed otherwise.\n  >>> isPalindrome(1234)\n  true\n  >>> isPalindrome(11)\n  false\n  >>> isPalindrome(1212)\n  true\n  >>> isPalindrome(1)\n  false\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(1)\n  false\n  */\nconst isPalindrome = (n) => {\n  const str = n.toString()\n  if (str.length === 0) return false\n  return str === str.split('').reverse().join('')\n}\n\n/*Return true if a given number is a product of two prime numbers, and false assumed otherwise.\n  >>> isPrimeProduct(7)\n  false\n  >>> isPrimeProduct(9)\n  false\n  >>> isPrimeProduct(21)\n  false\n  >>> isPrimeProduct(8)\n  true\n  >>> isPrimeProduct(21)\n  true\n  >>> isPrimeProduct(5)\n  true\n  >>> isPrimeProduct(3)\n  false\n  >>> isPrimeProduct(6)\n  false\n  >>> isPrimeProduct(24)\n  true\n  >>> isPrimeProduct(12)\n  true\n  >>> isPrimeProduct(9)\n  true\n  >>> isPrimeProduct(3)\n  false\n  >>> isPrimeProduct(3)\n  false\n  >>> isPrimeProduct(6)\n  true\n  */\nconst isPrimeProduct = (n) => {\n  if (isPrime(n)) return false\n  const primes = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(n) === false) return false\n    primes.push(i)\n  }\n  const x = n\n  const result = 1\n  for (let i = 0; i < primes.length; i++) {\n    result *= x\n  }\n  return result === n\n}\n\n/*Return true if a given number is a perfect square, and false assumed otherwise.\n  >>> isPerfectSquare(0)\n  false\n  >>> isPerfectSquare(1)\n  false\n  >>> isPerfectSquare(4)\n  false\n  >>> isPerfectSquare(9)\n  true\n  >>> isPerfectSquare(16)\n  true\n  >>> isPerfectSquare(25)\n  true\n  >>> isPerfectSquare(27)\n  true\n  >>> isPerfectSquare(64)\n  true\n  >>> isPerfectSquare(81)\n  true\n  >>> isPerfectSquare(100)\n  true\n  >>> isPerfectSquare(121)\n  false\n  >>> isPerfectSquare(125)\n  false\n  >>> isPerfectSquare(128)\n  false\n  >>> isPerfectSquare(129)\n  false\n  >>> isPerfectSquare(144)\n  false\n  >>> isPerfectSquare(189)\n  true\n  >>> isPerfectSquare(512)\n  true\n  >>> isPerfectSquare(625)\n  true\n  >>> isPerfectSquare(826)\n  true\n  >>> isPerfectSquare(1009)\n  true\n  >>> isPerfectSquare(1116)\n  true\n  >>> isPerfectSquare(1225)\n  true\n  >>> isPerfectSquare(1296)\n  true\n  >>> isPerfectSquare(1729)\n  true\n  >>> isPerfectSquare(2496)\n  true\n  >>> isPerfectSquare(2525)\n  true\n  >>> isPerfectSquare(2600)\n  true\n  >>> isPerfectSquare(2725)\n  true\n  >>> isPerfectSquare(2746)\n  true\n  >>> isPerfectSquare(3225)\n  true\n  >>> isPerfectSquare(4321)\n  true\n  >>> isPerfectSquare(5432)\n  true\n  >>> isPerfectSquare(6543)\n  true\n  >>> isPerfectSquare(6546)\n  true\n  >>> isPerfectSquare(6800)\n  true\n  >>> isPerfectSquare(7125)\n  true\n  >>> isPerfectSquare(8226)\n  true\n  >>> isPerfectSquare(9249)\n  true\n  >>> isPerfectSquare(11226)\n  true\n  >>> isPerfectSquare(12495)\n  true\n  >>> isPerfectSquare(12961)\n  true\n  >>> isPerfectSquare(17291)\n  true\n  >>> isPerfectSquare(18012)\n  true\n  >>> isPerfectSquare(18125)\n  true\n  >>> isPerfectSquare(19321)\n  true\n  >>> isPerfectSquare(20136)\n  true\n  >>> isPerfectSquare(25000)\n  true\n  >>> isPerfectSquare(30000)\n  true\n  >>> isPerfectSquare(30001)\n  false\n  >>> isPerfectSquare(32001)\n  false\n  >>> isPerfectSquare(60000)\n  true\n  >>> isPerfectSquare(60000)\n  true\n  */\nconst isPerfectSquare = (n) => {\n  return n * n === n\n}\n\n/*Return true if a given number is a perfect cube, and false assumed otherwise.\n  >>> isPerfectCube(0)\n  false\n  >>> isPerfectCube(1)\n  false\n  >>> isPerfectCube(4)\n  false\n  >>> isPerfectCube(9)\n  true\n  >>> isPerfectCube(16)\n  true\n  >>> isPerfectCube"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns return key only only zero point, even if there are many. \n   Moreover, findZero only takes aim list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns return key only only zero point, even if there are many. \n   Moreover, findZero only takes aim list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n    const len = xs.length;\n    if (len % 2 === 0) {\n        const half = len / 2;\n        const key = xs.slice(0, half).reduce((prev, item, index) => prev + item * Math.pow(xs[index], half + index - half));\n        if (key === 0) {\n            return key;\n        }\n    }\n    for (let i = half + 1; i < len; i++) {\n        const key = xs.slice(0, half + 1).reduce((prev, item, index) => prev + item * Math.pow(xs[index], half + i - half));\n        if (key === 0) {\n            return key;\n        }\n    }\n    return key;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal adequate \n   to the values of the corresponding represent indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal adequate \n   to the values of the corresponding represent indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    let res = [];\n    for (let i = 0; i < l.length; i += 3) {\n        if (l[i]!= l[i + 1]) {\n            res.push(l[i + 1]);\n        }\n    }\n    res = res.concat(l.slice(0, l.length - res.length));\n    res.sort((a, b) => {\n        return a - b;\n    });\n    return res;\n}<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = [];\n  const unique = (x) => {\n    if (u.indexOf(x) === -1) {\n      u.push(x);\n      return x;\n    }\n  };\n  return l.reduce((acc, x) => {\n    return unique(acc.concat([x]));\n  }, []);\n};\n\n/*\n  Given a set of words, return a dictionary\n  >>> uniqueWords('the dog ate the cat')\n  {'dog': 1, 'cat': 1, 'the': 1}\n  >>> uniqueWords('the dog ate the cat')\n  {'dog': 1, 'cat': 1, 'the': 1}\n  >>> uniqueWords('the dog ate the cat')\n  {'dog': 1, 'cat': 1, 'the': 1}\n  >>> uniqueWords('the dog ate the cat')\n  {'dog': 1, 'cat': 1, 'the': 1}\n  */\nconst uniqueWords = (words) => {\n  const wordMap = {};\n  words.forEach((word) => {\n    word = word.toLowerCase();\n    wordMap[word] = (wordMap[word] || 0) + 1;\n  });\n  return wordMap;\n};\n\n/*\n  Given a list of words, return a dictionary\n  >>> uniqueWords('the dog ate the cat')\n  {'dog': 1, 'cat': 1, 'the': 1}\n  >>> uniqueWords('the dog ate the cat')\n  {'dog': 1, 'cat': 1, 'the': 1}\n  >>> uniqueWords('the dog ate the cat')\n  {'dog': 1, 'cat': 1, 'the': 1}\n  >>> uniqueWords('the dog ate the cat')\n  {'dog': 1, 'cat': 1, 'the': 1}\n  */\nconst uniqueWordsInList = (words) => {\n  const wordMap = {};\n  words.forEach((word) => {\n    word = word.toLowerCase();\n    wordMap[word] = (wordMap[word] || 0) + 1;\n  });\n  return wordMap;\n};\n\nmodule.exports = {\n  unique,\n  uniqueWords,\n  uniqueWordsInList\n};\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = -Infinity\n  l.forEach(x => {\n    if (x > max) {\n      max = x\n    }\n  })\n  return max\n}\n\n// BEGIN TEMPLATE\n\n/**\n * Finds the maximum element in a list.\n *\n * @param {Array} list\n * @returns {Number}\n */\nfunction maxElement(list) {\n  return maxElementRec(list, 0)\n}\n\nfunction maxElementRec(list, index) {\n  if (index >= list.length) {\n    return maxElement(list)\n  }\n\n  let el = list[index]\n  if (el === null) {\n    return maxElement(list)\n  }\n\n  const maxEl = maxElementRec(list, index + 1)\n  if (el > maxEl) {\n    return el\n  }\n\n  return maxEl\n}\n// END TEMPLATE\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n    if (n % 11 === 0) {\n        if (n % 13 === 0) {\n            return 1;\n        } else {\n            return 2;\n        }\n    } else {\n        return 0;\n    }\n};\n\n/* Return the number of ways to partition a set of n elements into k subsets.\n  >>> fizzBuzz(3)\n  0\n  >>> fizzBuzz(10)\n  15\n  >>> fizzBuzz(12)\n  12\n  >>> fizzBuzz(13)\n  13\n  >>> fizzBuzz(20)\n  50\n  */\nconst fizzBuzz = (n, k) => {\n    if (n === 0) {\n        return 0;\n    } else {\n        const result = fizzBuzz(n - 1, k - 1);\n        return result + fizzBuzz(n - 1, k);\n    }\n};\n\n/* Return the number of ways to partition a set of n elements into k subsets.\n  >>> fizzBuzz(3)\n  0\n  >>> fizzBuzz(10)\n  15\n  >>> fizzBuzz(12)\n  12\n  >>> fizzBuzz(13)\n  13\n  >>> fizzBuzz(20)\n  50\n  */\nconst fizzBuzz = (n, k) => {\n    if (k === 1) {\n        return fizzBuzz(n);\n    } else if (k === 2) {\n        return fizzBuzz(n, 1);\n    } else {\n        return fizzBuzz(n, k - 1) + fizzBuzz(n, k);\n    }\n};\n\n/* Return the number of ways to partition a set of n elements into k subsets.\n  >>> fizzBuzz(3)\n  0\n  >>> fizzBuzz(10)\n  15\n  >>> fizzBuzz(12)\n  12\n  >>> fizzBuzz(13)\n  13\n  >>> fizzBuzz(20)\n  50\n  */\nconst fizzBuzz = (n, k) => {\n    if (k === 1) {\n        return fizzBuzz(n);\n    } else if (k === 2) {\n        return fizzBuzz(n, 1);\n    } else {\n        return fizzBuzz(n, k - 1) + fizzBuzz(n, k);\n    }\n};\n\n/* Return the number of ways to partition a set of n elements into k subsets.\n  >>> fizzBuzz(3)\n  0\n  >>> fizzBuzz(10)\n  15\n  >>> fizzBuzz(12)\n  12\n  >>> fizzBuzz(13)\n  13\n  >>> fizzBuzz(20)\n  50\n  */\nconst fizzBuzz = (n, k) => {\n    if (k === 1) {\n        return fizzBuzz(n);\n    } else if (k === 2) {\n        return fizzBuzz(n, 1);\n    } else {\n        return fizzBuzz(n, k - 1) + fizzBuzz(n, k);\n    }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for(let i = 0; i < l.length; i += 2) {\n    even.push(l[i]);\n    odd.push(l[i + 1]);\n  }\n  return [even, odd];\n};\n\n/*\n  >>> sortEven([3, 5, 2, 4, 6, 1])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortEven([9, 2, 5, 1, 3, 6])\n  [1, 2, 3, 4, 5, 6, 9]\n  */\nconst sortEven_alternative = (l) => {\n  const even = [];\n  const odd = [];\n  for(let i = 0; i < l.length; i += 2) {\n    if(l[i] % 2 == 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\n/*\n  >>> sortEven([3, 5, 2, 4, 6, 1])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortEven([9, 2, 5, 1, 3, 6])\n  [1, 2, 3, 4, 5, 6, 9]\n  */\nconst sortEven_alternative2 = (l) => {\n  const even = [];\n  const odd = [];\n  for(let i = 0; i < l.length; i += 2) {\n    if(l[i] % 2 == 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [odd, even];\n};\n\n/*\n  >>> sortEven([3, 5, 2, 4, 6, 1])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortEven([9, 2, 5, 1, 3, 6])\n  [1, 2, 3, 4, 5, 6, 9]\n  */\nconst sortEven_alternative3 = (l) => {\n  const even = [];\n  const odd = [];\n  for(let i = 0; i < l.length; i += 2) {\n    if(l[i] % 2 == 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [odd, even];\n};\n\n/*\n  >>> sortEven([3, 5, 2, 4, 6, 1])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortEven([9, 2, 5, 1, 3, 6])\n  [1, 2, 3, 4, 5, 6, 9]\n  */\nconst sortEven_alternative4 = (l) => {\n  const even = [];\n  const odd = [];\n  for(let i = 0; i < l.length; i += 2) {\n    if(l[i] % 2 == 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [odd, even];\n};\n\nconst sortEven_alternative5 = (l) => {\n  const even = [];\n  const odd = [];\n  for(let i = 0; i < l.length; i += 2) {\n    if(l[i] % 2 == 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [odd, even];\n};\n\nconst sortEven_alternative6 = (l) => {\n  const even = [];\n  const odd = [];\n  for(let i = 0; i < l.length; i += 2) {\n    if(l[i] % 2 == 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [odd, even];\n};\n\nconst sortEven_alternative7 = (l) => {\n  const even = [];\n  const odd = [];\n  for(let i = 0; i < l.length; i += 2) {\n    if(l[i] % 2 == 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [odd, even];\n};\n\nconst sortEven_alternative8 = (l) => {\n  const even = [];\n  const odd = [];\n  for(let i = 0; i < l.length; i += 2) {\n    if(l[i] % 2 == 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [odd, even];\n};\n\nconst sortEven_alternative9 = (l) => {\n  const even = [];\n  const odd = [];\n  for(let i = 0; i < l.length; i += 2) {\n    if(l[i] % 2 == 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [odd, even];\n};\n\nconst sortEven_alternative10 = (l) => {\n  const even = [];\n  const odd = [];\n  for(let i = 0; i < l.length; i += 2) {\n    if(l[i] % 2 == 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [odd, even];\n};\n\nconst sortEven_alternative11 = (l) => {\n  const even = [];\n  const odd = [];\n  for(let i = 0; i <"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string drawstring by cycling groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string drawstring by cycling groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ];\n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   }\n   for (const group of groups) {\n     if (group.length = = 3)\n       groups2.push(group.slice(1) + group[0]);\n     else\n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\nconst decodeCyclic = (s) = => {\n  const groups = [ ];\n  for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length = = 3)\n      groups.push(group.slice(1) + group[0]);\n    else\n      groups.push(group);\n  }\n  return groups.join('');\n}\n\nconst encodeCyclic = (s) = => {\n  const groups = [ ], groups2 = [ ];\n  for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length = = 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decode = decodeCyclic\nconst encode = encodeCyclic\n\nconst decode_cyclic = (s) = => {\n  const groups = [ ];\n  for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length = = 3)\n      groups.push(group.slice(1) + group[0]);\n    else\n      groups.push(group);\n  }\n  return groups.join('');\n}\n\nconst encode_cyclic = (s) = => {\n  const groups = [ ];\n  for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length = = 3)\n      groups.push(group.slice(1) + group[0]);\n    else\n      groups.push(group);\n  }\n  return groups.join('');\n}\n\nconst decode_cyclic = (s) = => {\n  const groups = [ ];\n  for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length = = 3)\n      groups.push(group.slice(1) + group[0]);\n    else\n      groups.push(group);\n  }\n  return groups.join('');\n}\n\nconst encode_cyclic = (s) = => {\n  const groups = [ ];\n  for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length = = 3)\n      groups.push(group.slice(1) + group[0]);\n    else\n      groups.push(group);\n  }\n  return groups.join('');\n}\n\nconst decode_cyclic = (s) = => {\n  const groups = [ ];\n  for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length = = 3)\n      groups.push(group.slice(1) + group[0]);\n    else\n      groups.push(group);\n  }\n  return groups.join('');\n}\n\nconst encode_cyclic = (s) = => {\n  const groups = [ ];\n  for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length = = 3)\n      groups.push(group.slice(1) + group[0]);\n    else\n      groups.push(group);\n"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number phone number and it's also prime premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number phone number and it's also prime premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    if (n < 2) {\n        return 2;\n    } else if (n < 3) {\n        return 3;\n    } else {\n        return primeFib(n - 1) + primeFib(n - 2);\n    }\n};\n\nconst isPrime = (n) => {\n    let i = 2;\n    while (i < n) {\n        if (n % i === 0) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\nconsole.log(primeFib(6));\nconsole.log(isPrime(primeFib(6)));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const list = l.sort().reverse()\n  const len = list.length\n  const sum = list.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst sumToTriples = (l) => {\n  const list = l.sort().reverse()\n  const len = list.length\n  const sum = list.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  sumToTriples takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> sumToTriples([1, 3, 5, 0])\n  false\n  >>> sumToTriples([1, 3, -2, 1])\n  true\n  >>> sumToTriples([1, 2, 3, 7])\n  false\n  >>> sumToTriples([2, 4, -5, 3, 9, 7])\n  true\n  >>> sumToTriples([1])\n  false\n  */\nconst sumToOne = (l) => {\n  const list = l.sort().reverse()\n  const len = list.length\n  const sum = list.reduce((a, b) => a + b, 0)\n  return sum === 1\n}\n\n/*\n  sumToOne takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> sumToOne([1, 3, 5, 0])\n  false\n  >>> sumToOne([1, 3, -2, 1])\n  true\n  >>> sumToOne([1, 2, 3, 7])\n  false\n  >>> sumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> sumToOne([1])\n  false\n  */\nconst sumToTwo = (l) => {\n  const list = l.sort().reverse()\n  const len = list.length\n  const sum = list.reduce((a, b) => a + b, 0)\n  return sum === 2\n}\n\n/*\n  sumToTwo takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> sumToTwo([1, 3, 5, 0])\n  false\n  >>> sumToTwo([1, 3, -2, 1])\n  true\n  >>> sumToTwo([1, 2, 3, 7])\n  false\n  >>> sumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> sumToTwo([1])\n  false\n  */\nconst sumToThree = (l) => {\n  const list = l.sort().reverse()\n  const len = list.length\n  const sum = list.reduce((a, b) => a + b, 0)\n  return sum === 3\n}\n\n/*\n  sumToThree takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> sumToThree([1, 3, 5, 0])\n  false\n  >>> sumToThree([1, 3, -2, 1])\n  true\n  >>> sumToThree([1, 2, 3, 7])\n  false\n  >>> sumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> sumToThree([1])\n  false\n  */\nconst sumToFour = (l) => {\n  const list = l.sort().reverse()\n  const len = list.length\n  const sum = list.reduce((a, b) => a + b, 0)\n  return sum === 4\n}\n\n/*\n  sumToFour takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> sumToFour([1, 3, 5, 0])\n  false\n  >>> sumToFour([1, 3, -2, 1])\n  true\n  >>> sumToFour([1, 2, 3, 7])\n  false\n  >>> sumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> sumToFour([1])\n  false\n  */\nconst sumToFive = (l) => {\n  const list = l.sort().reverse()\n  const len = list.length\n  const sum = list.reduce((a, b) => a + b, 0)\n  return sum === 5\n}\n\n/*\n  sumToFive takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> sumToFive([1, 3, 5, 0])\n  false\n  >>> sumToFive([1, 3, -2, 1"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight uncoiled infinitely long retentive line. \n   n cars car are driving left bequeath to right;   simultaneously, a different unlike set stage set of n cars cable car \n   are driving repel right proper to left.    The two sets of cars start get down out being very far from \n   each other.   All cars car move affect in the same speed.   Two cars are said to collide \n   when a car that's moving travel left bequeath to right good hits hit a car that's moving act right to left. \n   However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function outputs the number issue of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly straight uncoiled infinitely long retentive line. \n   n cars car are driving left bequeath to right;   simultaneously, a different unlike set stage set of n cars cable car \n   are driving repel right proper to left.    The two sets of cars start get down out being very far from \n   each other.   All cars car move affect in the same speed.   Two cars are said to collide \n   when a car that's moving travel left bequeath to right good hits hit a car that's moving act right to left. \n   However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function outputs the number issue of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n      let collisionCount = 0;\n      for(let i = 0; i <= n; i++){\n         for(let j = 0; j <= n; j++){\n            if(i == j) continue;\n            let dist = Math.abs(car.pos.x - car2.pos.x) + Math.abs(car.pos.y - car2.pos.y);\n            if(dist > (car.length * car.width / 2) + (car2.length * car2.width / 2)) continue;\n            collisionCount++;\n         }\n      }\n      return collisionCount;\n   }\n*/\n\n// BEGIN KAWIGIEDIT TESTING\n// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof\nbool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, int p1) {\n\tcout << \"Test \" << testNum << \": [\" << p0;\n\tcout << \"]\" << endl;\n\n\tint answer;\n\tif (hasAnswer) {\n\t\tcout << \"Desired answer:\" << endl;\n\t\tanswer = p1;\n\t}\n\telse {\n\t\tcout << \"Desired answer: \" << endl;\n\t\tanswer = 0;\n\t}\n\tcout << \"Your answer:\" << endl;\n\tcout << p1 << endl;\n\tif (hasAnswer) {\n\t\tcout << \"Formulated answer:\" << endl;\n\t\tcout << answer << endl;\n\t}\n\treturn answer == p1;\n}\nint main(int argc, char * argv[]) {\n\tbool all_right;\n\tbool disabled;\n\tbool tests_disabled;\n\tall_right = true;\n\ttests_disabled = false;\n\t\n\tint p0;\n\tint p1;\n\t\n\t// ----- test 0 -----\n\tdisabled = false;\n\tp0 = 2;\n\tp1 = 0;\n\tall_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\t// ----- test 1 -----\n\tdisabled = false;\n\tp0 = 3;\n\tp1 = 2;\n\tall_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\t// ----- test 2 -----\n\tdisabled = false;\n\tp0 = 2;\n\tp1 = 1;\n\tall_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\tif (all_right) {\n\t\tif (tests_disabled) {\n\t\t\tcout << \"You're a stud (but some test cases were disabled)!\" << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << \"You're a stud (at least on given cases)!\" << endl;\n\t\t}\n\t}\n\telse {\n\t\tcout << \"Some of the test cases had errors.\" << endl;\n\t}\n\treturn 0;\n}\n// END KAWIGIEDIT TESTING\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const list = l.slice();\n  const r = [];\n  for (let i = 0; i < list.length; i++) {\n    r.push(list[i] + 1);\n  }\n  return r;\n};\n\nexport default incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const arr = l.map(x => Number(x));\n  return arr.reduce((a, b) => (a && b) || (!a &&!b))\n};\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number phone number x to base.\n   return string representation theatrical performance after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number phone number x to base.\n   return string representation theatrical performance after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base === 1) return x;\n  return changeBase(Math.pow(base, x), 1);\n}\n\nconst changeBase2 = (x, base) => {\n  if (base === 2) return x;\n  return changeBase2(Math.pow(base, x), 2);\n}\n\nconst changeBase3 = (x, base) => {\n  if (base === 3) return x;\n  return changeBase3(Math.pow(base, x), 3);\n}\n\nconst changeBase4 = (x, base) => {\n  if (base === 4) return x;\n  return changeBase4(Math.pow(base, x), 4);\n}\n\nconst changeBase5 = (x, base) => {\n  if (base === 5) return x;\n  return changeBase5(Math.pow(base, x), 5);\n}\n\nconst changeBase6 = (x, base) => {\n  if (base === 6) return x;\n  return changeBase6(Math.pow(base, x), 6);\n}\n\nconst changeBase7 = (x, base) => {\n  if (base === 7) return x;\n  return changeBase7(Math.pow(base, x), 7);\n}\n\nconst changeBase8 = (x, base) => {\n  if (base === 8) return x;\n  return changeBase8(Math.pow(base, x), 8);\n}\n\nconst changeBase9 = (x, base) => {\n  if (base === 9) return x;\n  return changeBase9(Math.pow(base, x), 9);\n}\n\nconst changeBase10 = (x, base) => {\n  if (base === 10) return x;\n  return changeBase10(Math.pow(base, x), 10);\n}\n\nconst changeBase11 = (x, base) => {\n  if (base === 11) return x;\n  return changeBase11(Math.pow(base, x), 11);\n}\n\nconst changeBase12 = (x, base) => {\n  if (base === 12) return x;\n  return changeBase12(Math.pow(base, x), 12);\n}\n\nconst changeBase13 = (x, base) => {\n  if (base === 13) return x;\n  return changeBase13(Math.pow(base, x), 13);\n}\n\nconst changeBase14 = (x, base) => {\n  if (base === 14) return x;\n  return changeBase14(Math.pow(base, x), 14);\n}\n\nconst changeBase15 = (x, base) => {\n  if (base === 15) return x;\n  return changeBase15(Math.pow(base, x), 15);\n}\n\nconst changeBase16 = (x, base) => {\n  if (base === 16) return x;\n  return changeBase16(Math.pow(base, x), 16);\n}\n\nconst changeBase17 = (x, base) => {\n  if (base === 17) return x;\n  return changeBase17(Math.pow(base, x), 17);\n}\n\nconst changeBase18 = (x, base) => {\n  if (base === 18) return x;\n  return changeBase18(Math.pow(base, x), 18);\n}\n\nconst changeBase19 = (x, base) => {\n  if (base === 19) return x;\n  return changeBase19(Math.pow(base, x), 19);\n}\n\nconst changeBase20 = (x, base) => {\n  if (base === 20) return x;\n  return changeBase20(Math.pow(base, x), 20);\n}\n\nconst changeBase21 = (x, base) => {\n  if (base === 21) return x;\n  return changeBase21(Math.pow(base, x), 21);\n}\n\nconst changeBase22 = (x, base) => {\n  if (base === 22) return x;\n  return changeBase22(Math.pow(base, x), 22);\n}\n\nconst changeBase23 = (x, base) => {\n  if (base === 23) return x;\n  return changeBase23(Math.pow(base, x), 23);\n}\n\nconst changeBase24 = (x, base) => {\n  if (base === 24) return x;\n  return changeBase24(Math.pow(base, x), 24);\n}\n\nconst changeBase25 = (x, base) => {\n  if (base === 25) return x;\n  return changeBase25(Math.pow(base, x), 25);\n}\n\nconst changeBase26 = (x, base) => {\n  if (base === 26) return x;\n  return changeBase26(Math.pow(base, x), 26);\n}\n\nconst changeBase27 = (x, base) => {\n  if (base === 27) return x;\n  return changeBase27(Math.pow(base, x), 27);\n}\n\nconst changeBase28 = (x, base) => {\n  if (base === 28) return x;\n  return changeBase28(Math.pow(base, x), 28);\n}\n\nconst changeBase29 = (x, base) => {\n  if (base === 29) return x;\n  return changeBase29(Math.pow(base, x), 29);\n}\n\nconst changeBase30 = (x, base) => {\n  if (base === 30) return x;\n  return changeBase30(Math.pow(base, x), 30);\n}\n\nconst changeBase31 = (x, base) => {\n  if (base === 31) return x;\n  return changeBase31(Math.pow(base, x), 31);\n}\n\nconst changeBase32 = (x, base) => {\n  if (base === 32) return x;\n  return changeBase32(Math.pow(base, x), 32);\n}\n\nconst changeBase33 = (x, base) => {\n  if"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high gamey return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high gamey return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h * a) / 2;\n};\n\nexport default triangleArea;\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write compose a function to efficiently compute calculate the n-th element of the fib4 number act sequence succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write compose a function to efficiently compute calculate the n-th element of the fib4 number act sequence succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  const fib1 = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    return fib1(n-1) + fib1(n-2);\n  };\n  const fib2 = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    if (n === 2) return 2;\n    return fib2(n-1) + fib2(n-2) + fib2(n-3);\n  };\n  const fib3 = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    if (n === 2) return 2;\n    if (n === 3) return 3;\n    return fib3(n-1) + fib3(n-2) + fib3(n-3);\n  };\n  const fib4 = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    if (n === 2) return 2;\n    if (n === 3) return 3;\n    if (n === 4) return 4;\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n  };\n  return fib4(n);\n};\n\nmodule.exports = fib4;\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sorted = l.sort();\n  let middle = sorted.length / 2;\n  let left = sorted[middle - 1];\n  let right = sorted[middle];\n  if (left < right) {\n    return (left + right) / 2;\n  }\n  return left;\n};\n\nconsole.log(median([3, 1, 2, 4, 5]));\nconsole.log(median([-10, 4, 6, 1000, 10, 20]));\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string drawstring is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string drawstring is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = '';\n    for (let i = text.length - 1; i >= 0; i--) {\n        reversed += text[i];\n    }\n    return text === reversed;\n};\n\n// TEST\nconsole.log(isPalindrome('aba'));\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return n % p;\n};\n\nexport default modp;\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string drawstring by shifting every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes aim as input string bowed stringed instrument encoded with encode_shift function affair. Returns reappearance decoded decode string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string drawstring by shifting every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes aim as input string bowed stringed instrument encoded with encode_shift function affair. Returns reappearance decoded decode string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n   ) ).join (\" \"); \n } \n*/\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n    const vowels = [\n        'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'y', 'Y', 'w', 'W', 'x', 'X'\n    ]\n\n    let out = text\n\n    for (let i = 0; i < vowels.length; i++) {\n        out = out.replace(vowels[i], '')\n    }\n\n    return out\n}\n\n/*\n  removePunctuations is a function that takes string drawstring and returns string drawstring without punctuations.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuations('abcdef')\n  'abcdef'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'aaBAA'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuations = (text) => {\n    const punctuations = [\n       '', ':', '.', '!', '?', ';', '-', '_', '~', '\\''\n    ]\n\n    let out = text\n\n    for (let i = 0; i < punctuations.length; i++) {\n        out = out.replace(punctuations[i], '')\n    }\n\n    return out\n}\n\n/*\n  isInArray is a function that takes array array of elements and checks if the element is in the array.\n  >>> isInArray(1, [1, 2, 3])\n  True\n  >>> isInArray(2, [1, 2, 3])\n  False\n  >>> isInArray(2, [2, 3, 4])\n  True\n  >>> isInArray(2, [1, 3, 5])\n  False\n  */\nconst isInArray = (element, array) => {\n    return array.includes(element)\n}\n\n/*\n  findMax is a function that takes array array of elements and returns maximum number of elements.\n  >>> findMax([1, 2, 3])\n  3\n  >>> findMax([1, 2, 3, 4])\n  4\n  >>> findMax([])\n  0\n  */\nconst findMax = (array) => {\n    return array.length? array.reduce((prev, curr) => {\n        return curr > prev? curr : prev\n    }, 0) : 0\n}\n\n/*\n  findMin is a function that takes array array of elements and returns minimum number of elements.\n  >>> findMin([1, 2, 3])\n  1\n  >>> findMin([1, 2, 3, 4])\n  1\n  >>> findMin([])\n  0\n  */\nconst findMin = (array) => {\n    return array.length? array.reduce((prev, curr) => {\n        return curr < prev? curr : prev\n    }, 0) : 0\n}\n\n/*\n  findMaxMin is a function that takes array array of elements and returns maximum and minimum number of elements.\n  >>> findMaxMin([1, 2, 3])\n  2\n  >>> findMaxMin([1, 2, 3, 4])\n  2\n  >>> findMaxMin([])\n  0\n  */\nconst findMaxMin = (array) => {\n    return [findMax(array), findMin(array)]\n}\n\n/*\n  getMaxMin is a function that takes array array of elements and returns maximum and minimum number of elements.\n  >>> getMaxMin([1, 2, 3])\n  [2, 1]\n  >>> getMaxMin([1, 2, 3, 4])\n  [2, 1]\n  >>> getMaxMin([])\n  [0, 0]\n  */\nconst getMaxMin = (array) => {\n    return findMaxMin(array.filter(x => x))\n}\n\n/*\n  sort is a function that takes array array of elements and returns sorted array of elements.\n  >>> sort([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  >>> sort([])\n  []\n  >>> sort([1, 2, 3])\n  [1, 2, 3]\n  */\nconst sort = (array) => {\n    return array.sort((a, b) => {\n        return a - b\n    })\n}\n\n/*\n  sortedArray is a function that takes array array of elements and returns sorted array of elements.\n  >>> sortedArray([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  >>> sortedArray([])\n  []\n  >>> sortedArray([1, 2, 3])\n  [1, 2, 3]\n  */\nconst sortedArray = (array) => {\n    return array.sort((a, b) => {\n        return b - a\n    })\n}\n\n/*\n  reverse is a function that takes array array of elements and returns reversed array of elements.\n  >>> reverse([1, 2, 3])\n  [3, 2, 1]\n  >>> reverse([])\n  []\n  */\nconst reverse = (array) => {\n    return array.reverse()\n}\n\n/*\n  isSorted is a function that takes array array of elements and returns boolean.\n  >>> isSorted([1, 2, 3])\n  True\n  >>> isSorted([1,"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold brink t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l are below threshold brink t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const l = Array.isArray(l)? l : [l];\n  const isBelowThreshold = (n) => n <= t;\n  return l.every(isBelowThreshold);\n};\n\n/**\n * Return a list of all the integers below threshold.\n * @param {number} t\n * @return {number[]}\n */\nconst getBelowThreshold = (t) => {\n  const l = [];\n  for (let i = 1; i < t; i++) {\n    l.push(i);\n  }\n  return l;\n};\n\n/**\n * Return a list of all the integers above threshold.\n * @param {number} t\n * @return {number[]}\n */\nconst getAboveThreshold = (t) => {\n  const l = [];\n  for (let i = t; i < Number.MAX_VALUE; i++) {\n    l.push(i);\n  }\n  return l;\n};\n\n/**\n * Return a list of all the integers below threshold.\n * @param {number} t\n * @return {number[]}\n */\nconst getAllBelowThreshold = (t) => {\n  const l = [];\n  for (let i = 1; i < t; i++) {\n    l.push(i);\n  }\n  return l;\n};\n\n/**\n * Return a list of all the integers above threshold.\n * @param {number} t\n * @return {number[]}\n */\nconst getAllAboveThreshold = (t) => {\n  const l = [];\n  for (let i = t; i < Number.MAX_VALUE; i++) {\n    l.push(i);\n  }\n  return l;\n};\n\nconst main = async () => {\n  const { t } = await load();\n  const belowThreshold = await belowThreshold(t);\n  const getBelowThreshold = await getBelowThreshold(t);\n  const getAboveThreshold = await getAboveThreshold(t);\n  const getAllBelowThreshold = await getAllBelowThreshold(t);\n  const getAllAboveThreshold = await getAllAboveThreshold(t);\n\n  console.log(`belowThreshold(${t}, ${t}) = ${belowThreshold}`);\n  console.log(`getBelowThreshold(${t}) = ${getBelowThreshold}`);\n  console.log(`getAllBelowThreshold(${t}) = ${getAllBelowThreshold}`);\n  console.log(`getAboveThreshold(${t}) = ${getAboveThreshold}`);\n  console.log(`getAllAboveThreshold(${t}) = ${getAllAboveThreshold}`);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n    return x + y;\n};\n\nconst add = (x, y) => {\n    return x + y;\n};\n\n/*\n  ## Function Arity\n  A function can be either defined as a function or as a class.\n\n  ## Function Arity\n\n  * A function can be defined as:\n    * - a function\n    * - a class\n    * - a method\n\n  * If the function is defined as a method, it is called with the instance as an argument.\n  * If the function is defined as a class, the constructor is called with the instance as an argument.\n\n  * A function can be also defined as a lambda expression, which is equivalent to a function.\n  * In this case, the function can be called as any function.\n\n  * When the function is defined as a class or as a method, the class method must have the same name than the function.\n  * This is not an exception for a lambda expression, which is a function.\n\n  ## Function Arity\n\n  * In JavaScript, functions can have a variable number of arguments.\n  * This is known as \"function arity\".\n\n  * JavaScript has an \"infinite arity\" function,\n    * which means that there is no limit on the number of arguments a function can accept.\n    * For example, the following function is defined as a method:\n      * setInterval(callback, delay)\n\n    * In JavaScript, the function can accept any number of arguments,\n      * including zero or more.\n\n  * The same function can be defined as a class method.\n  * In this case, the function can accept any number of arguments,\n    * including zero or more.\n\n  * If the function is defined as a class or as a method, the arity is defined by the number of arguments.\n\n  ## Function Arity\n\n  * In JavaScript, a function can be called with zero or more arguments.\n  * This is known as \"function arity\".\n\n  * JavaScript has an \"infinite arity\" function,\n    * which means that there is no limit on the number of arguments a function can accept.\n    * For example, the following function is defined as a method:\n      * setInterval(callback, delay)\n\n    * In JavaScript, the function can accept any number of arguments,\n      * including zero or more.\n\n  * The same function can be defined as a class method.\n  * In this case, the function can accept any number of arguments,\n    * including zero or more.\n\n  * If the function is defined as a class or as a method, the arity is defined by the number of arguments.\n\n  ## Function Arity\n\n  * In JavaScript, a function can be called with zero or more arguments.\n  * This is known as \"function arity\".\n\n  * JavaScript has an \"infinite arity\" function,\n    * which means that there is no limit on the number of arguments a function can accept.\n    * For example, the following function is defined as a method:\n      * setInterval(callback, delay)\n\n    * In JavaScript, the function can accept any number of arguments,\n      * including zero or more.\n\n  * The same function can be defined as a class method.\n  * In this case, the function can accept any number of arguments,\n    * including zero or more.\n\n  * If the function is defined as a class or as a method, the arity is defined by the number of arguments.\n\n  ## Function Arity\n\n  * In JavaScript, a function can be called with zero or more arguments.\n  * This is known as \"function arity\".\n\n  * JavaScript has an \"infinite arity\" function,\n    * which means that there is no limit on the number of arguments a function can accept.\n    * For example, the following function is defined as a method:\n      * setInterval(callback, delay)\n\n    * In JavaScript, the function can accept any number of arguments,\n      * including zero or more.\n\n  * The same function can be defined as a class method.\n  * In this case, the function can accept any number of arguments,\n    * including zero or more.\n\n  * If the function is defined as a class or as a method, the arity is defined by the number of arguments.\n\n  ## Function Arity\n\n  * In JavaScript, a function can be called with zero or more arguments.\n  * This is known as \"function arity\".\n\n  * JavaScript has an \"infinite arity\" function,\n    * which means that there is no limit on the number of arguments a function can accept.\n    * For example, the following function is defined as a method:\n      * setInterval(callback, delay)\n\n    * In JavaScript, the function can accept any number of arguments,\n      * including zero or more.\n\n  * The same function can be defined as a class method.\n  * In this case, the function can accept any number of arguments,\n    * including zero or more.\n\n  * If the function is defined as a class or as a method, the arity is defined by the number of arguments.\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters quality.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same characters quality.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const hash0 = hash(s0);\n  const hash1 = hash(s1);\n  if (hash0 === hash1) {\n    return true;\n  }\n  const map0 = map(s0);\n  const map1 = map(s1);\n  if (map0.indexOf(s1)!== -1 || map1.indexOf(s0)!== -1) {\n    return true;\n  }\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1\n  let b = 1\n  while (b < n) {\n    a += b\n    b = a - b\n  }\n  return a\n}\n\n/* Return n-th Fibonacci number.\n  >>> fib2(10)\n  55\n  >>> fib2(1)\n  1\n  >>> fib2(8)\n  21\n  */\nconst fib2 = (n) => {\n  let a = 1\n  let b = 1\n  let c = 1\n  let p = 1\n  while (c < n) {\n    p = a + b\n    a = b\n    b = c\n    c = p\n  }\n  return c\n}\n\n/* Return n-th Fibonacci number.\n  >>> fib3(10)\n  55\n  >>> fib3(1)\n  1\n  >>> fib3(8)\n  21\n  */\nconst fib3 = (n) => {\n  let a = 1\n  let b = 1\n  let c = 1\n  let p = 1\n  while (c < n) {\n    p = a + b\n    a = b\n    b = c\n    c = p\n  }\n  return c\n}\n\n/* Return n-th Fibonacci number.\n  >>> fib4(10)\n  55\n  >>> fib4(1)\n  1\n  >>> fib4(8)\n  21\n  */\nconst fib4 = (n) => {\n  let a = 1\n  let b = 1\n  let c = 1\n  let p = 1\n  while (c < n) {\n    p = a + b\n    a = b\n    b = c\n    c = p\n  }\n  return c\n}\n\n/* Return n-th Fibonacci number.\n  >>> fib5(10)\n  55\n  >>> fib5(1)\n  1\n  >>> fib5(8)\n  21\n  */\nconst fib5 = (n) => {\n  let a = 1\n  let b = 1\n  let c = 1\n  let p = 1\n  let q = 1\n  while (c < n) {\n    p = a + b\n    a = b\n    b = c\n    c = p\n    q = a + b\n    a = b\n    b = c\n    c = q\n  }\n  return c\n}\n\n/* Return n-th Fibonacci number.\n  >>> fib6(10)\n  55\n  >>> fib6(1)\n  1\n  >>> fib6(8)\n  21\n  */\nconst fib6 = (n) => {\n  let a = 1\n  let b = 1\n  let c = 1\n  let p = 1\n  let q = 1\n  while (c < n) {\n    p = a + b\n    a = b\n    b = c\n    c = p\n    q = a + b\n    a = b\n    b = c\n    c = q\n  }\n  return c\n}\n\n/* Return n-th Fibonacci number.\n  >>> fib7(10)\n  55\n  >>> fib7(1)\n  1\n  >>> fib7(8)\n  21\n  */\nconst fib7 = (n) => {\n  let a = 1\n  let b = 1\n  let c = 1\n  let p = 1\n  let q = 1\n  while (c < n) {\n    p = a + b\n    a = b\n    b = c\n    c = p\n    q = a + b\n    a = b\n    b = c\n    c = q\n  }\n  return c\n}\n\n/* Return n-th Fibonacci number.\n  >>> fib8(10)\n  55\n  >>> fib8(1)\n  1\n  >>> fib8(8)\n  21\n  */\nconst fib8 = (n) => {\n  let a = 1\n  let b = 1\n  let c = 1\n  let p = 1\n  let q = 1\n  while (c < n) {\n    p = a + b\n    a = b\n    b = c\n    c = p\n    q = a + b\n    a = b\n    b = c\n    c = q\n  }\n  return c\n}\n\n/* Return n-th Fibonacci number.\n  >>> fib9(10)\n  55\n  >>> fib9(1)\n  1\n  >>> fib9(8)\n  21\n  */\nconst fib9 = (n) => {\n  let a = 1\n  let b = 1\n  let c = 1\n  let p = 1\n  let q = 1\n  while (c < n) {\n    p = a + b\n    a = b\n    b = c\n    c = p\n    q = a + b\n    a = b\n    b = c\n    c = q\n  }\n  return c\n}\n\n/* Return n-th Fibonacci number.\n  >>> fib10(10)\n  55\n  >>> fib10(1)\n  1\n  >>> fib10(8)\n  21\n  */\nconst fib10 = (n) => {\n  let a = 1\n  let b = 1\n  let c = 1\n  let p = 1\n  let q = 1\n  while (c < n) {\n    p = a + b\n    a = b\n    b = c\n    c = p\n    q = a + b\n    a = b\n    b = c\n    c = q\n  }\n  return c\n}\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  return brackets.split('').every((char) => {\n    return!char || char!== '<' || brackets.indexOf(char) === brackets.lastIndexOf(char);\n  });\n};\n\n/*\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<\")\n  <\n  >>> printBrackets(\"<>\")\n  >\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  >\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  >\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  >\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  >\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  >>> printBrackets(\"<>\")\n  <>\n  "}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let previous = null\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < previous) {\n      return false\n    }\n    previous = l[i]\n  }\n  return true\n}\n\n/*Return true if list is monotonic increasing or monotonic decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  false\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let previous = null\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > previous) {\n      return false\n    }\n    previous = l[i]\n  }\n  return true\n}\n\n/* Return a list of pairs, where the first element is the index of the pair\n   in the input list, and the second element is the value of the pair.\n\n   >>> sort(pairs([2, 3, 5, 7, 9]))\n   [(0, 2), (1, 3), (2, 5), (3, 7), (4, 9)]\n */\nconst sort = (l) => {\n  return l.slice(0).sort((a, b) => {\n    return a - b\n  })\n}\n\n/* Return a list of pairs, where the first element is the index of the pair\n   in the input list, and the second element is the value of the pair.\n\n   >>> sort(pairs([2, 3, 5, 7, 9]))\n   [(0, 2), (1, 3), (2, 5), (3, 7), (4, 9)]\n */\nconst sort = (l) => {\n  return l.slice(0).sort((a, b) => {\n    return b - a\n  })\n}\n\n/* Return a list of pairs, where the first element is the index of the pair\n   in the input list, and the second element is the value of the pair.\n\n   >>> sort(pairs([2, 3, 5, 7, 9]))\n   [(0, 2), (1, 3), (2, 5), (3, 7), (4, 9)]\n */\nconst sort = (l) => {\n  return l.slice(0).sort((a, b) => {\n    return a - b\n  })\n}\n\n/* Return a list of pairs, where the first element is the index of the pair\n   in the input list, and the second element is the value of the pair.\n\n   >>> sort(pairs([2, 3, 5, 7, 9]))\n   [(0, 2), (1, 3), (2, 5), (3, 7), (4, 9)]\n */\nconst sort = (l) => {\n  return l.slice(0).sort((a, b) => {\n    return b - a\n  })\n}\n\n/*Return true if the list contains an element that is less than\n  the element in the list before it.\n  >>> sort([2, 3, 5, 7, 9])\n  false\n  >>> sort([2, 3, 5, 7, 9, 8])\n  true\n */\nconst sort = (l) => {\n  return sort(l.slice(0).concat([l[l.length - 1]]))\n}\n\n/* Return a list of pairs, where the first element is the index of the pair\n   in the input list, and the second element is the value of the pair.\n\n   >>> sort(pairs([2, 3, 5, 7, 9]))\n   [(0, 2), (1, 3), (2, 5), (3, 7), (4, 9)]\n */\nconst sort = (l) => {\n  return l.slice(0).sort((a, b) => {\n    return a - b\n  })\n}\n\n/* Return a list of pairs, where the first element is the index of the pair\n   in the input list, and the second element is the value of the pair.\n\n   >>> sort(pairs([2, 3, 5, 7, 9]))\n   [(0, 2), (1, 3), (2, 5), (3, 7), (4, 9)]\n */\nconst sort = (l) => {\n  return l.slice(0).sort((a, b) => {\n    return b - a\n  })\n}\n\n/* Return a list of pairs, where the first element is the index of the pair\n   in the input list, and the second element is the value of the pair.\n\n   >>> sort(pairs([2, 3, 5, 7, 9]))\n   [(0, 2), (1, 3), (2, 5), (3, 7), (4, 9)]\n */\nconst sort = (l) => {\n  return l.slice(0).sort((a, b) => {\n    return a - b\n  })\n}\n\n/* Return a list of pairs, where the first element is the index of the pair\n   in the input list, and the second element is the value of the pair.\n\n   >>> sort(pairs([2, 3, 5, 7, 9]))\n   [(0, 2), (1, 3), (2, 5), (3, 7), (4, 9)]\n */\nconst sort = (l) => {\n  return l.slice(0).sort((a, b) => {\n    return b - a\n  })\n}\n\n/* Return a list of pairs, where the first element is the index of the pair\n   in the input list, and the second element is the value of the pair.\n\n   >>> sort(pairs([2, 3, 5, 7, 9]))\n   [(0, 2), (1, 3), (2, 5), (3, 7), (4, 9)]\n */\nconst sort = (l) => {\n  return l.slice(0).sort((a, b) => {\n    return a - b\n  })\n}\n\n/* Return a list of pairs, where the first element is the index of the pair\n   in the input list, and the second element is the value of the pair."}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements element for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elements element for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const map = {};\n  for (let i = 0; i < l1.length; i++) {\n    map[l1[i]] = true;\n  }\n  const res = [];\n  for (let i = 0; i < l2.length; i++) {\n    if (map[l2[i]]) {\n      res.push(l2[i]);\n    }\n  }\n  return res;\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let current = 2;\n  while (current * current < n) {\n    if (n % current === 0) {\n      return current;\n    }\n    current += 1;\n  }\n  return n;\n};\n\nconst test_cases = [\n  [1, 1],\n  [2, 2],\n  [3, 3],\n  [4, 2],\n  [8, 2],\n  [9, 3],\n  [10, 5],\n  [12, 4],\n  [16, 4],\n  [17, 5],\n  [20, 5],\n  [21, 7],\n  [25, 5],\n  [26, 7],\n  [30, 5],\n  [31, 7],\n  [33, 7],\n  [34, 7],\n  [36, 7],\n  [37, 7],\n  [40, 7],\n  [41, 9],\n  [42, 9],\n  [43, 9],\n  [44, 9],\n  [45, 9],\n  [46, 9],\n  [47, 9],\n  [50, 7],\n  [51, 7],\n  [53, 7],\n  [54, 9],\n  [55, 9],\n  [56, 9],\n  [57, 9],\n  [60, 7],\n  [61, 9],\n  [62, 9],\n  [63, 9],\n  [64, 9],\n  [65, 9],\n  [66, 9],\n  [67, 9],\n  [68, 9],\n  [69, 9],\n  [70, 9],\n  [71, 9],\n  [72, 9],\n  [73, 9],\n  [74, 9],\n  [75, 9],\n  [76, 9],\n  [77, 9],\n  [78, 9],\n  [79, 9],\n  [80, 9],\n  [81, 9],\n  [82, 9],\n  [83, 9],\n  [84, 9],\n  [85, 9],\n  [86, 9],\n  [87, 9],\n  [88, 9],\n  [89, 9],\n  [90, 9],\n  [91, 9],\n  [92, 9],\n  [93, 9],\n  [94, 9],\n  [95, 9],\n  [96, 9],\n  [97, 9],\n  [98, 9],\n  [99, 9],\n  [100, 9],\n  [101, 9],\n  [102, 9],\n  [103, 9],\n  [104, 9],\n  [105, 9],\n  [106, 9],\n  [107, 9],\n  [108, 9],\n  [109, 9],\n  [110, 9],\n  [111, 9],\n  [112, 9],\n  [113, 9],\n  [114, 9],\n  [115, 9],\n  [116, 9],\n  [117, 9],\n  [118, 9],\n  [119, 9],\n  [120, 9],\n  [121, 9],\n  [122, 9],\n  [123, 9],\n  [124, 9],\n  [125, 9],\n  [126, 9],\n  [127, 9],\n  [128, 9],\n  [129, 9],\n  [130, 9],\n  [131, 9],\n  [132, 9],\n  [133, 9],\n  [134, 9],\n  [135, 9],\n  [136, 9],\n  [137, 9],\n  [138, 9],\n  [139, 9],\n  [140, 9],\n  [141, 9],\n  [142, 9],\n  [143, 9],\n  [144, 9],\n  [145, 9],\n  [146, 9],\n  [147, 9],\n  [148, 9],\n  [149, 9],\n  [150, 9],\n  [151, 9],\n  [152, 9],\n  [153, 9],\n  [154, 9],\n  [155, 9],\n  [156, 9],\n  [157, 9],\n  [158, 9],\n  [159, 9],\n  [160, 9],\n  [161, 9],\n  [162, 9],\n  [163, 9],\n  [164, 9],\n  [165, 9],\n  [166, 9],\n  [167, 9],\n  [168, 9],\n  [169, 9],\n  [170, 9],\n  [171, 9],\n  [172, 9],\n  [173, 9],\n  [174, 9],\n  [175, 9],\n  [176, 9],\n  [177, 9],\n  [178, 9],\n  [179, 9],\n  [180, 9],\n  [181, 9],\n  [182, 9],\n  [183, 9],\n  [184, 9],\n  [185, 9],\n  [186, 9],\n  [187, 9],\n  [188, 9],\n  [189, 9],\n  [190, 9],\n  [191, 9],\n  [192, 9],\n  [193, 9],\n  [194, 9],\n  [195, 9],\n  [196, 9],\n  [197, 9],\n  [198, 9],\n  [199, 9],\n  [200, 9],\n  [201, 9],\n  [202, 9],\n  [203, 9],\n  [204, 9],\n  [205, 9],\n  [206, 9],\n  [207, 9],\n  [208, 9],\n  [209, 9],\n  [210, 9],\n  [211, 9],\n  [212, 9],\n  [213, 9],\n  [214, 9],\n  [215, 9],\n  [216, 9],\n  [217, 9],\n  [218, 9],\n  [219, 9],\n  [220, 9],\n  [221, 9],\n  [222, 9],\n  [223, 9],\n  [224, 9],\n  [225, 9],\n  [226, 9],"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers issue from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums numbers issue from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let total = 0;\n  for (let i = 1; i <= n; i++) {\n    total += i;\n  }\n  return total;\n};\n\n/*\n  findNumberInArray finds the number in the array.\n  >>> findNumberInArray([1, 2, 3, 4])\n  4\n  >>> findNumberInArray([1, 2, 3, 4, 5])\n  3\n  >>> findNumberInArray([1, 2, 3, 4, 5, 6])\n  2\n  >>> findNumberInArray([1, 2, 3, 4, 5, 6, 7])\n  1\n  >>> findNumberInArray([1, 2, 3, 4, 5, 6, 7, 8])\n  0\n  >>> findNumberInArray([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  -1\n  */\nconst findNumberInArray = (nums) => {\n  const sum = sumToN(nums.length);\n  let sumIndex = 0;\n  let sumCheck = 0;\n  while (sumCheck < sum) {\n    sumCheck += nums[sumIndex];\n    sumIndex++;\n  }\n  return sumIndex - 1;\n};\n\n/*\n  findNumberInArray finds the number in the array.\n  >>> findNumberInArray([1, 2, 3, 4])\n  4\n  >>> findNumberInArray([1, 2, 3, 4, 5])\n  3\n  >>> findNumberInArray([1, 2, 3, 4, 5, 6])\n  2\n  >>> findNumberInArray([1, 2, 3, 4, 5, 6, 7])\n  1\n  >>> findNumberInArray([1, 2, 3, 4, 5, 6, 7, 8])\n  0\n  >>> findNumberInArray([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  -1\n  */\nconst findNumberInArray = (nums) => {\n  const sum = sumToN(nums.length);\n  let sumIndex = 0;\n  let sumCheck = 0;\n  while (sumCheck < sum) {\n    sumCheck += nums[sumIndex];\n    sumIndex++;\n  }\n  return sumIndex;\n};\n\n/*\n  findNumberInArray finds the number in the array.\n  >>> findNumberInArray([1, 2, 3, 4])\n  4\n  >>> findNumberInArray([1, 2, 3, 4, 5])\n  3\n  >>> findNumberInArray([1, 2, 3, 4, 5, 6])\n  2\n  >>> findNumberInArray([1, 2, 3, 4, 5, 6, 7])\n  1\n  >>> findNumberInArray([1, 2, 3, 4, 5, 6, 7, 8])\n  0\n  >>> findNumberInArray([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  -1\n  */\nconst findNumberInArray = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  findNumberInArray finds the number in the array.\n  >>> findNumberInArray([1, 2, 3, 4])\n  4\n  >>> findNumberInArray([1, 2, 3, 4, 5])\n  3\n  >>> findNumberInArray([1, 2, 3, 4, 5, 6])\n  2\n  >>> findNumberInArray([1, 2, 3, 4, 5, 6, 7])\n  1\n  >>> findNumberInArray([1, 2, 3, 4, 5, 6, 7, 8])\n  0\n  >>> findNumberInArray([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  -1\n  */\nconst findNumberInArray = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  findNumberInArray finds the number in the array.\n  >>> findNumberInArray([1, 2, 3, 4])\n  4\n  >>> findNumberInArray([1, 2, 3, 4, 5])\n  3\n  >>> findNumberInArray([1, 2, 3, 4, 5, 6])\n  2\n  >>> findNumberInArray([1, 2, 3, 4, 5, 6, 7])\n  1\n  >>> findNumberInArray([1, 2, 3, 4, 5, 6, 7, 8])\n  0\n  >>> findNumberInArray([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  -1\n  */\nconst findNumberInArray = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  findNumberInArray finds the number in the array.\n  >>> findNumberInArray([1, 2, 3, 4])\n  4\n  >>> findNumberInArray([1, 2, 3, 4, 5])\n  3\n  >>> findNumberInArray([1, 2, 3, 4, 5, 6])\n  2\n  >>> findNumberInArray([1, 2, 3, 4, 5, 6, 7])\n  1\n  >>> findNumberInArray([1, 2, 3, 4, 5, 6, 7, 8])\n  0\n  >>> findNumberInArray([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  -1\n  */\nconst findNumberInArray = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  findNumberInArray finds the number in the array.\n  >>> findNumberInArray([1, 2,"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const closingBrackets = brackets.split(\"(\")\n  const openingBrackets = brackets.split(\")\")\n\n  const closingBracketsLength = closingBrackets.length\n  const openingBracketsLength = openingBrackets.length\n\n  let bracketCount = 0\n\n  for (let i = 0; i < closingBracketsLength; i++) {\n    if (closingBrackets[i].length === 0) {\n      return false\n    }\n\n    bracketCount += closingBrackets[i].length\n    bracketCount -= openingBrackets[i].length\n  }\n\n  return bracketCount === 0\n}\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return restitution derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return restitution derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let d = [1, 0];\n  for (let i = 0; i < xs.length - 1; i++) {\n    d.push(xs[i]);\n  }\n  d.push(xs[xs.length - 1]);\n  return d;\n}\n\n/**\n  Compute the derivative of a polynomial using the \n  Newton's method. \n  Return the derivative of the polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  >>> derivative([1, 1])\n  [1]\n  */\nconst derivativeNewton = (xs) => {\n  let f = derivative(xs);\n  let x = -1;\n  let g = [];\n  let h = [];\n  while (f[0]!= 0) {\n    x++;\n    g = derivative(xs);\n    h = [1];\n    for (let i = 0; i < f.length - 1; i++) {\n      h.push(h[i] * f[i] + x * g[i]);\n    }\n    f = h;\n  }\n  return f;\n}\n\n/**\n  Compute the derivative of a polynomial using the \n  Newton's method.\n  Return the derivative of the polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  >>> derivative([1, 1])\n  [1]\n  */\nconst derivativeNewton2 = (xs) => {\n  let f = derivative(xs);\n  let g = [];\n  let h = [];\n  let x = -1;\n  while (f[0]!= 0) {\n    x++;\n    g = derivative(xs);\n    h = [1];\n    for (let i = 0; i < f.length - 1; i++) {\n      h.push(h[i] * f[i] + x * g[i]);\n    }\n    f = h;\n  }\n  return f;\n}\n\n// Test\nconst test = (xs, ys) => {\n  const f = derivative(xs);\n  const g = derivative(ys);\n  console.log(f);\n  console.log(g);\n}\n\n// Tests\nconst test1 = ([1, 2, 3]) => {\n  console.log(derivative(test1));\n}\n\nconst test2 = ([1, 2, 3, 4, 5]) => {\n  console.log(derivative(test2));\n}\n\nconst test3 = ([1, 1, 1]) => {\n  console.log(derivative(test3));\n}\n\nconst test4 = ([3, 1, 2, 4, 5]) => {\n  console.log(derivative(test4));\n}\n\n// Test\nconst testNewton = ([1, 2, 3, 4, 5, 6]) => {\n  const f = derivativeNewton(testNewton);\n  console.log(f);\n}\n\n// Test\nconst testNewton2 = ([1, 2, 3, 4, 5, 6]) => {\n  const f = derivativeNewton2(testNewton2);\n  console.log(f);\n}\n\n// Tests\nconst testNewton3 = ([1, 2, 3, 4, 5, 6]) => {\n  const f = derivativeNewton3(testNewton3);\n  console.log(f);\n}\n\n// Test\nconst testNewton4 = ([1, 2, 3, 4, 5, 6]) => {\n  const f = derivativeNewton4(testNewton4);\n  console.log(f);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write compose a function to efficiently compute calculate the n-th element of the fibfib number act sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write compose a function to efficiently compute calculate the n-th element of the fibfib number act sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    if (n === 0) {\n        return 0;\n    } else if (n === 1) {\n        return 0;\n    } else if (n === 2) {\n        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n};\n\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string drawstring representing \n   a word parole as input and returns hark back the number of vowels in the string bowed stringed instrument. \n   Vowels in this case event are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also besides a \n   vowel, but only when it is at the end goal of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string drawstring representing \n   a word parole as input and returns hark back the number of vowels in the string bowed stringed instrument. \n   Vowels in this case event are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also besides a \n   vowel, but only when it is at the end goal of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a','e','i','o','u','y']\n  const ret = 0\n  for(let i = 0, len = s.length; i < len; i++){\n    if(vowels.indexOf(s[i]) > -1){\n      ret++\n    }\n  }\n  return ret\n}\n\n/*Write a function that takes a string as input and returns the number of \n   occurrences of vowels in the string. For example:\n  >>> occurence('abc')\n  3\n  >>> occurence('aae')\n  1\n  >>> occurence('aaa')\n  2\n  >>> occurence('d')\n  0\n  \n  Note that this function is different from countVowels. \n  The reason is the first letter of the word is not counted as vowel.\n  \n  The first letter of the word is also not counted as a vowel.\n  \n  Example:\n  >>> occurence(\"abc\")\n  3\n  >>> occurence(\"aa\")\n  2\n  >>> occurence(\"aae\")\n  1\n  */\nconst occurence = (s) => {\n  const vowels = ['a','e','i','o','u','y']\n  let ret = 0\n  for(let i = 0, len = s.length; i < len; i++){\n    if(vowels.indexOf(s[i]) > -1){\n      ret++\n    }\n  }\n  return ret\n}\n\n/*Write a function called countVowels which takes a string as input and returns \n   the number of vowels in the string. For example:\n  >>> countVowels(\"abc\")\n  2\n  >>> countVowels(\"aa\")\n  1\n  >>> countVowels(\"aae\")\n  1\n  >>> countVowels(\"aab\")\n  2\n  \n  The first letter of the word is not counted as a vowel.\n  \n  Example:\n  >>> countVowels(\"aae\")\n  1\n  \n  The vowels count of a word is the number of vowels plus one. For example:\n  >>> countVowels(\"aac\")\n  3\n  \n  Vowels are 'a','e','i','o','u','y',and the first letter is not counted as a vowel. \n  This is because the first letter of the word is not counted as a vowel.\n  \n  Example:\n  >>> countVowels(\"aac\")\n  3\n  \n  Vowels are 'a','e','i','o','u','y',and the first letter is not counted as a vowel. \n  This is because the first letter of the word is not counted as a vowel.\n  \n  Example:\n  >>> countVowels(\"aae\")\n  1\n  \n  Vowels are 'a','e','i','o','u','y',and the first letter is not counted as a vowel. \n  This is because the first letter of the word is not counted as a vowel.\n  \n  Example:\n  >>> countVowels(\"aab\")\n  2\n  \n  Vowels are 'a','e','i','o','u','y',and the first letter is not counted as a vowel. \n  This is because the first letter of the word is not counted as a vowel.\n  \n  Example:\n  >>> countVowels(\"aaa\")\n  2\n  \n  Vowels are 'a','e','i','o','u','y',and the first letter is not counted as a vowel. \n  This is because the first letter of the word is not counted as a vowel.\n  \n  Example:\n  >>> countVowels(\"cae\")\n  1\n  \n  Vowels are 'a','e','i','o','u','y',and the first letter is not counted as a vowel. \n  This is because the first letter of the word is not counted as a vowel.\n  \n  Example:\n  >>> countVowels(\"aab\")\n  2\n  \n  Vowels are 'a','e','i','o','u','y',and the first letter is not counted as a vowel. \n  This is because the first letter of the word is not counted as a vowel.\n  \n  Example:\n  >>> countVowels(\"ab\")\n  0\n  \n  Vowels are 'a','e','i','o','u','y',and the first letter is not counted as a vowel. \n  This is because the first letter of the word is not counted as a vowel.\n  \n  Example:\n  >>> countVowels(\"\")\n  0\n  \n  Vowels are 'a','e','i','o','u','y',and the first letter is not counted as a vowel. \n  This is because the first letter of the word is not counted as a vowel.\n  \n  Example:\n  >>> countVowels(\"aa\")\n  1\n  \n  Vowels are 'a','e','i','o','u','y',and the first letter is not counted as a vowel. \n  This is because the first letter of the word is not counted as a vowel.\n  \n  Example:\n  >>> countVowels(\"aa\")\n  1\n  \n  Vowels are 'a','e','i','o','u','y',and the first letter is not counted as a vowel. \n  This is because the first letter of the word is not counted as a vowel.\n  \n  Example:\n  >>> countVowels(\"aa\")\n  1\n  \n  Vowels are 'a','e','i','o','u','y',and the first letter is not counted as a vowel. \n  This is because the first letter of the word is not counted as a vowel.\n  \n  Example:\n  >>> countVowels(\"aaa\")\n  2\n  \n  Vowels are 'a','e','i','o','u','y',and the first letter is not counted as a vowel. "}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right proper by shift\n   and return the result as a string drawstring. \n   If shift > number of digits finger, return digits reversed change by reversal.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right proper by shift\n   and return the result as a string drawstring. \n   If shift > number of digits finger, return digits reversed change by reversal.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let reversed = x.toString();\n  let result = reversed;\n  let i;\n  if (shift >= reversed.length) {\n    for (i = 0; i < reversed.length; i++) {\n      reversed = reversed.substring(1, reversed.length);\n    }\n    result = reversed;\n  } else {\n    for (i = 0; i < reversed.length; i++) {\n      result = result.substring(1, result.length) + reversed.substring(i, reversed.length);\n    }\n  }\n  return result;\n};\n\n/* \n  Given a positive integer x, return the next larger integer in the sequence.\n  If there is no next largest integer, return the first larger integer.\n  >>> nextLarger(8)\n  12\n  >>> nextLarger(9)\n  10\n  >>> nextLarger(10)\n  11\n  >>> nextLarger(11)\n  12\n  >>> nextLarger(12)\n  13\n  */\nconst nextLarger = (x) => {\n  let i;\n  for (i = x + 1; i < 10; i++) {\n    if (i % 2 === 0) {\n      return i;\n    }\n  }\n  return i;\n};\n\n/*\n  Given a positive integer x, return the next smaller integer in the sequence.\n  If there is no next smaller integer, return the first smaller integer.\n  >>> nextSmaller(10)\n  8\n  >>> nextSmaller(9)\n  9\n  >>> nextSmaller(8)\n  7\n  >>> nextSmaller(7)\n  6\n  >>> nextSmaller(6)\n  5\n  >>> nextSmaller(5)\n  4\n  >>> nextSmaller(4)\n  3\n  >>> nextSmaller(3)\n  2\n  >>> nextSmaller(2)\n  1\n  >>> nextSmaller(1)\n  0\n  */\nconst nextSmaller = (x) => {\n  let i;\n  for (i = x - 1; i >= 0; i--) {\n    if (i % 2 === 1) {\n      return i;\n    }\n  }\n  return i;\n};\n\n/*\n  Given a positive integer x, return the number of digits of the number.\n  >>> numberOfDigits(123)\n  3\n  >>> numberOfDigits(12)\n  2\n  >>> numberOfDigits(1)\n  1\n  >>> numberOfDigits(0)\n  1\n  >>> numberOfDigits(5)\n  1\n  >>> numberOfDigits(5.5)\n  2\n  >>> numberOfDigits(10)\n  2\n  >>> numberOfDigits(11)\n  2\n  >>> numberOfDigits(12)\n  3\n  */\nconst numberOfDigits = (x) => {\n  let i;\n  for (i = 1; i <= x; i++) {\n    if (Math.round(i) === i) {\n      return 1;\n    }\n  }\n  return 2;\n};\n\n/*\n  Given two positive integers x and y, return the sum of the digits of the numbers.\n  >>> sumDigits(10, 12)\n  20\n  >>> sumDigits(5, 2)\n  9\n  >>> sumDigits(5, 5.5)\n  11\n  >>> sumDigits(10, 20)\n  22\n  >>> sumDigits(10, 2)\n  20\n  >>> sumDigits(20, 21)\n  30\n  >>> sumDigits(10, 21)\n  20\n  */\nconst sumDigits = (x, y) => {\n  return x + y;\n};\n\n/*\n  Given a positive integer x, return the sum of the digits of the number.\n  >>> sumDigits(123)\n  9\n  >>> sumDigits(12)\n  3\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(5)\n  1\n  >>> sumDigits(5.5)\n  1\n  >>> sumDigits(10)\n  2\n  >>> sumDigits(11)\n  2\n  >>> sumDigits(12)\n  3\n  */\nconst sumDigits_2 = (x) => {\n  let sum = 0;\n  while (x > 0) {\n    sum = sum + Math.round(x % 10);\n    x = Math.floor(x / 10);\n  }\n  return sum;\n};\n\n/*\n  Given a positive integer x, return the sum of the digits of the number.\n  >>> sumDigits_3(10)\n  9\n  >>> sumDigits_3(5)\n  1\n  >>> sumDigits_3(5.5)\n  1\n  >>> sumDigits_3(10)\n  2\n  >>> sumDigits_3(11)\n  2\n  >>> sumDigits_3(12)\n  3\n  */\nconst sumDigits_3 = (x) => {\n  return sumDigits_2(x) + sumDigits_2(x);\n};\n\n/*\n  Given a positive integer x, return the sum of the digits of the number.\n  >>> sumDigits_4(10)\n  9\n  >>> sumDigits_4(5)\n  1\n  >>> sumDigits_4(5.5)\n  1\n  >>> sumDigits_4(10)\n  2\n  >>> sumDigits_4(11)\n  2\n  >>> sumDigits_4(12)\n  3\n  */\nconst sumDigits_4 = (x) => {\n  return sumDigits_3(x) + sumDigits_3(x);\n};\n\n/*\n  Given a positive integer x, return the sum of the digits of the number.\n  >>> sumDigits_5(10)\n  9\n  >>> sumDigits_5(5)\n  1\n  >>> sumDigits_5(5.5)\n  1\n  >>> sumDigits_5(10)\n  "}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function routine that takes a string drawstring as input and returns hark back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   Write a function routine that takes a string drawstring as input and returns hark back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if(!s) {\n    return 0;\n  }\n\n  let result = 0;\n  for(let i=0; i<s.length; i++) {\n    if(s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      result += s.charCodeAt(i);\n    }\n  }\n\n  return result;\n}\n\nconsole.log(digitSum(\"a\"));\nconsole.log(digitSum(\"ab\"));\nconsole.log(digitSum(\"abc\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"abcCdC\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string drawstring that represents a number phone number of apples and oranges orange \n   that are distributed in a basket of fruit yield this basket contains \n   apples apple, oranges orange, and mango fruits. Given the string bowed stringed instrument that represents represent the total number of \n   the oranges and apples apple and an integer that represent act the total full number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a string drawstring that represents a number phone number of apples and oranges orange \n   that are distributed in a basket of fruit yield this basket contains \n   apples apple, oranges orange, and mango fruits. Given the string bowed stringed instrument that represents represent the total number of \n   the oranges and apples apple and an integer that represent act the total full number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n    fruit: Array[],\n    distribute(fruit: Array[], n: number, i: number): Array[];\n    fruitDistribution: (fruit: Array[], n: number) => Array[];\n    distribute(fruit: Array[], n: number, i: number): Array[];\n    fruitDistribution: (fruit: Array[], n: number) => number;\n    distribute(fruit: Array[], n: number, i: number): number;\n    fruitDistribution(s: string, n: number) {\n        fruit = Array.from(s);\n        distribute(fruit, n, 0);\n    }\n    fruitDistribution(s: string, n: number) {\n        fruit = Array.from(s);\n        distribute(fruit, n, 0);\n    }\n    fruitDistribution(fruit: Array[], n: number) {\n        this.fruit = fruit;\n        fruit = this.fruit;\n        distribute(fruit, n, 0);\n    }\n    fruitDistribution(fruit: Array[], n: number) {\n        fruit = fruit;\n        fruit = this.fruit;\n        distribute(fruit, n, 0);\n    }\n    fruitDistribution(fruit: Array[], n: number, i: number) {\n        fruit = fruit;\n        fruit = this.fruit;\n        distribute(fruit, n, i);\n    }\n    fruitDistribution(fruit: Array[], n: number, i: number) {\n        fruit = fruit;\n        fruit = this.fruit;\n        distribute(fruit, n, i);\n    }\n    fruitDistribution: (fruit: Array[], n: number) => Array[];\n    fruitDistribution: (fruit: Array[], n: number) => number;\n    fruitDistribution(fruit: Array[], n: number): number {\n        return fruit.reduce((a, b) => a + b);\n    }\n    fruitDistribution(fruit: Array[], n: number): number {\n        return fruit.reduce((a, b) => a + b);\n    }\n    fruitDistribution: (fruit: Array[], n: number, i: number) => number;\n    fruitDistribution(fruit: Array[], n: number, i: number): number {\n        fruit = fruit;\n        fruit = this.fruit;\n        distribute(fruit, n, i);\n    }\n    fruitDistribution(fruit: Array[], n: number, i: number): number {\n        fruit = fruit;\n        fruit = this.fruit;\n        distribute(fruit, n, i);\n    }\n    fruitDistribution(fruit: Array[], n: number, i: number) {\n        fruit = fruit;\n        fruit = this.fruit;\n        distribute(fruit, n, i);\n    }\n    fruitDistribution(fruit: Array[], n: number, i: number) {\n        fruit = fruit;\n        fruit = this.fruit;\n        distribute(fruit, n, i);\n    }\n}\n */\nconst FruitDistribution = (fruit, n) => {\n    fruit = fruit;\n    fruit = this.fruit;\n    fruit.reduce((a, b) => a + b);\n}\n\nmodule.exports = FruitDistribution;<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch arm of a tree that has non - negative integer nodes lymph node \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes node with the same smallest even value are found determine return the node lymph node that has smallest index. \n\n   The plucked node should be returned fall in a list, [ smalest_value, its index exponent ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" Given an array representing a branch arm of a tree that has non - negative integer nodes lymph node \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes node with the same smallest even value are found determine return the node lymph node that has smallest index. \n\n   The plucked node should be returned fall in a list, [ smalest_value, its index exponent ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    let smallest = arr[0];\n    let smallestIndex = 0;\n    let result = [];\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < smallest) {\n            smallest = arr[i];\n            smallestIndex = i;\n        }\n    }\n\n    if (arr.length) {\n        result.push([smallest, smallestIndex]);\n    }\n\n    return result;\n};\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of positive integers integer. Return the greatest bang-up integer that is greater than \n   zero, and has a frequency greater capital than or equal to the value of the integer itself. \n   The frequency of an integer is the number numeral of times it appears appear in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non - empty list of positive integers integer. Return the greatest bang-up integer that is greater than \n   zero, and has a frequency greater capital than or equal to the value of the integer itself. \n   The frequency of an integer is the number numeral of times it appears appear in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const hash = {}\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] in hash) {\n      hash[lst[i]] += 1\n    } else {\n      hash[lst[i]] = 1\n    }\n  }\n  const max = 0\n  for (let [key, value] of Object.entries(hash)) {\n    if (value > value) {\n      max = key\n    }\n  }\n  return max\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]))\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(search([5, 5, 4, 4, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange foreign order. \n   Strange foreign sorting, is when you start begin with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange foreign order. \n   Strange foreign sorting, is when you start begin with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  return lst.slice().reverse().reduce((acc, x) => {\n    const len = acc.length\n    let low = acc[0]\n    let high = acc[len - 1]\n    let i = 0\n    const range = high - low + 1\n    const rem = lst.slice(1)\n    while (i < len) {\n      if (x > low && x <= high) {\n        break\n      }\n      low = low + range / 2\n      high = low + range / 2 - 1\n      i++\n    }\n    acc.splice(i, 0, low, high)\n    return acc\n  }, []);\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides side of a triangle. Return reelect the area of \n   the triangle rounded round to 2 decimal points if the three sides slope form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides side of a triangle. Return reelect the area of \n   the triangle rounded round to 2 decimal points if the three sides slope form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  const area = Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)\n  return Math.round(area * 10) / 10\n}\n\nconst isValid = (a, b, c) => {\n  return triangleArea(a, b, c) >= 0\n}\n\nconst getMaxSide = (triangle) => {\n  const maxSide = Math.max(triangle[0], triangle[1], triangle[2])\n  return maxSide\n}\n\nconst findTriangle = (triangle) => {\n  const [a, b, c] = triangle\n  if (!isValid(a, b, c)) {\n    return undefined\n  }\n  const sideSum = (a + b + c)\n  const maxSide = getMaxSide(triangle)\n  if (sideSum > maxSide) {\n    return undefined\n  }\n  return triangle\n}\n\nconst test = () => {\n  const triangle = [3, 4, 5]\n  console.log(findTriangle(triangle))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns come back true if the object aim q will fly, and false fake otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns come back true if the object aim q will fly, and false fake otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const qq = q.sort();\n  const r = qq.join(\"\");\n  const c = qq.map(Number);\n  const t = c.reduce((t, c) => t + c, 0);\n  if (t > w) return false;\n  if (q.length === 1) return true;\n  const qw = q.reduce((qw, x, i) => {\n    if (i!== 0) {\n      qw += x;\n    }\n    return qw;\n  }, 0);\n  if (qw === t) return true;\n  return false;\n};\n\nconsole.log(willItFly([3, 2, 3], 1)); // true\nconsole.log(willItFly([1, 2, 3], 5)); // false\nconsole.log(willItFly([3, 2, 3], 9)); // true\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find discover the minimum number phone number of elements that \n   need want to be changed to make create the array palindromic. A palindromic array is an array that \n   is read the same backwards backward and forwards ahead. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find discover the minimum number phone number of elements that \n   need want to be changed to make create the array palindromic. A palindromic array is an array that \n   is read the same backwards backward and forwards ahead. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  if (!arr || arr.length < 2) {\n    return 0\n  }\n  let min = arr.length - 1\n  let minChange = arr.length - 1\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      let temp = arr[i]\n      arr[i] = arr[i + 1]\n      arr[i + 1] = temp\n      min = i\n      minChange = i\n    }\n  }\n  return minChange\n}\n\nconst smallestChange2 = (arr) => {\n  if (!arr || arr.length < 2) {\n    return 0\n  }\n  let min = arr.length - 1\n  let minChange = arr.length - 1\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      let temp = arr[i]\n      arr[i] = arr[i + 1]\n      arr[i + 1] = temp\n      min = i\n      minChange = i\n    }\n  }\n  return minChange\n}\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 2, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 2, 2, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 2, 2, 2, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 2, 2, 2, 2, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts accept two lists of strings chain and returns the list that has \n   total entire number of chars char in the all strings of the list less than the other list.\n\n   if the two lists tilt have the same number numeral of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts accept two lists of strings chain and returns the list that has \n   total entire number of chars char in the all strings of the list less than the other list.\n\n   if the two lists tilt have the same number numeral of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let lst = []\n\n  lst1.forEach(v => {\n    lst2.forEach(v => {\n      lst.push(v)\n    })\n  })\n  return lst\n}\n\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'Hi']))\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5']))\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true on-key if the given number phone number is the multiplication of 3 prime choice numbers \n   and false fake otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns true on-key if the given number phone number is the multiplication of 3 prime choice numbers \n   and false fake otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  let multiplyResult = 0;\n  const result = a * a;\n  for (let prime of primeNumbers) {\n    if (result % prime === 0) {\n      multiplyResult += prime;\n    }\n  }\n  return (multiplyResult === a);\n}\nconsole.log(isMultiplyPrime(30));<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function routine that returns true on-key if a number x is a simple bare \n   power of n and false in other cases casing. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function routine that returns true on-key if a number x is a simple bare \n   power of n and false in other cases casing. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 0) return false\n  if (x % n === 0) return true\n  const isPower = x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)))\n  return isPower\n}\n\nconsole.log(isSimplePower(3, 2))\nconsole.log(isSimplePower(3, 1))\nconsole.log(isSimplePower(5, 3))\nconsole.log(isSimplePower(8, 2))\nconsole.log(isSimplePower(9, 2))\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes claim an integer a and returns true on-key \n   if this ingeger is a cube of some integer number act. \n   Note: you may assume simulate the input is always constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes claim an integer a and returns true on-key \n   if this ingeger is a cube of some integer number act. \n   Note: you may assume simulate the input is always constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n    return a % 6 === 0;\n};\n\nexport default iscube;\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function routine that receives \n   a hexadecimal number phone number as a string and counts count the number of hexadecimal \n   digits finger that are primes (prime number=== or a prime=== is a natural lifelike number numeral \n   greater than 1 that is not a product of two smaller belittled natural lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So thus you have to determine decide a number of the following succeed digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note bill: you may assume the input stimulation is always constantly correct or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a function routine that receives \n   a hexadecimal number phone number as a string and counts count the number of hexadecimal \n   digits finger that are primes (prime number=== or a prime=== is a natural lifelike number numeral \n   greater than 1 that is not a product of two smaller belittled natural lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So thus you have to determine decide a number of the following succeed digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note bill: you may assume the input stimulation is always constantly correct or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  var result = 0,\n      key,\n      keyLen = num.length;\n  for (var i = 0; i < keyLen; i++) {\n    key = parseInt(num[i], 16);\n    if (key === 0) {\n      continue;\n    }\n    while (key >= 2) {\n      result++;\n      key--;\n    }\n  }\n  return result;\n};\n\nconst main = (num) => {\n  var nums = num.split(''),\n      key = nums.length,\n      sum = 0;\n  while (key--) {\n    if (nums[key] === '1') {\n      sum++;\n    }\n  }\n  return sum;\n};\n\nconsole.log(main('AB'));\nconsole.log(main('1077E'));\nconsole.log(main('ABED1A33'));\nconsole.log(main('123456789ABCDEF0'));\nconsole.log(main('2020'));\n\n//\n// Reflection\n//\n//\n//  What was the most difficult part of this challenge?\n//  I did not know exactly what to write to parse a string as a number. I did not know the\n//  number of digits finger in a number. I did not know how to determine the number of prime\n//  number in a number. I did not know how to convert a number to its decimal number representation.\n//  I did not know how to convert a decimal number to a number representation in a string.\n//  I was not able to figure out how to solve a problem in my first time using the challenge\n//  in which I solved the second problem.\n//  What did you learn about solutions to problems?\n//  We tried to make it clear to the students that a simple solution is not a good solution.\n//  We also tried to explain what is a good solution and why it is a good solution.\n//\n//  Did you learn about any new built-in methods you could use in your refactored solution? If so,\n//  what were they and how do they work?\n//  We used to use parseInt(num, 16) method to convert hexadecimal number to decimal number\n//  and use result of parseInt() to determine the number of digits finger.\n//\n//  How can you access and manipulate the DOM of your page?\n//  We can use the global variable document to access and manipulate the DOM of our page.\n//\n//  How can you access and manipulate the window of your page?\n//  We can use the global variable window to access and manipulate the window of our page.\n//\n//  How can you select and manipulate text within the page?\n//  We can use the global variable document.querySelector() to select and manipulate text within\n//  the page.\n//\n//  How can you create text within the page?\n//  We can use the global variable document.createTextNode() to create text within the page.\n//\n//  How can you insert HTML within the page?\n//  We can use the global variable document.insertBefore() and document.insertAfter() to insert HTML\n//  within the page.\n//\n//  How can you add and remove CSS classes within the page?\n//  We can use the global variable document.getElementsByClassName() to get all elements in the\n//  page with a CSS class and document.getElementsByClassName() to get all elements in the page\n//  with a CSS class.\n//\n//  How can you add and remove an event listener within the page?\n//  We can use the global variable document.getElementById() to get an element within the page\n//  and document.getElementById() to get an element within the page.\n//  We can use the global variable document.addEventListener() to add an event listener within the page.\n//\n//  How can you create and manage a hidden CSS class within the page?\n//  We can use the global variable document.createStyleSheet() to create a CSS class within the page\n//  and document.createStyleSheet() to create a CSS class within the page.\n//  We can use the global variable document.addStyleSheet() to add a CSS class within the page.\n//\n//  What JavaScript knowledge did you solidify in this challenge?\n//  We used JavaScript language to write the code for the challenge.\n//\n//  What are the next steps you plan on taking in this challenge?\n//  It is our aim to solve the problem without using any JavaScript libraries.\n//\n\n//\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form shape and your task is to convert change it to \n   binary format. The function should return a string bowed stringed instrument, with each character representing present a binary \n   number. Each character fictional character in the string chain will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end goal of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal form shape and your task is to convert change it to \n   binary format. The function should return a string bowed stringed instrument, with each character representing present a binary \n   number. Each character fictional character in the string chain will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end goal of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const str = decimal.toString(2);\n  const len = str.length;\n  const binary = [];\n  const remainder = Math.pow(2, len);\n  for (let i = 0; i < len; i++) {\n    if (str[i] === '1') {\n      binary.push('1');\n    } else {\n      binary.push('0');\n    }\n  }\n  if (decimal % remainder!== 0) {\n    binary.push('1');\n  } else {\n    binary.push('0');\n  }\n  return binary.join('');\n};\n\nexport default decimalToBinary;\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task undertaking is to check if the string drawstring is happy or not. \n   A string bowed stringed instrument is happy if its length distance is at least 3 and every 3 consecutive letters letter are distinct discrete\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   Your task undertaking is to check if the string drawstring is happy or not. \n   A string bowed stringed instrument is happy if its length distance is at least 3 and every 3 consecutive letters letter are distinct discrete\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  let prev = 0;\n  let newStr = '';\n  for (let i = 0; i < s.length; i++) {\n    count = 0;\n    newStr = '';\n    for (let j = 0; j < s.length; j++) {\n      if (s[j] === s[i]) {\n        count += 1;\n      } else {\n        newStr += s[j];\n      }\n    }\n    if (count >= 3 && count % 3 === 0) {\n      if (prev === newStr) {\n        return false;\n      } else {\n        prev = newStr;\n      }\n    }\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give grant the grades\n   to students. The teacher has been making produce her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used practice for grading. \n   She has given sacrifice you a list of GPAs for some students and you have to write \n   a function affair that can output a list of letter grades using the following table mesa: \n            GPA        |     Letter grade degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher has to give grant the grades\n   to students. The teacher has been making produce her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used practice for grading. \n   She has given sacrifice you a list of GPAs for some students and you have to write \n   a function affair that can output a list of letter grades using the following table mesa: \n            GPA        |     Letter grade degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const result = [];\n  for (let i = 0; i < grades.length; i++) {\n    let grade = grades[i];\n    let gradeDegree = Math.floor(grade);\n    if (grade === gradeDegree) {\n      result.push(`${grade}`);\n    } else if (grade > gradeDegree) {\n      result.push(`${gradeDegree}+`);\n    } else if (grade < gradeDegree) {\n      result.push(`${gradeDegree}`);\n    }\n  }\n  return result;\n};\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]));\n\n/*\n\n# BEGIN SOLUTION\n\n#define NUMBER_OF_GRADES_PER_LETTER = 4\n\nconst getLetterGrade = (grade) => {\n  const num = Math.floor(grade);\n  const diff = grade - num;\n  const gradeDegree = num / NUMBER_OF_GRADES_PER_LETTER;\n\n  if (diff === 0) {\n    return gradeDegree;\n  }\n\n  if (diff > 0) {\n    if (diff > 0.25) {\n      return `${gradeDegree}+`;\n    } else if (diff > 0.25 && diff < 0.5) {\n      return `${gradeDegree}`;\n    } else if (diff < 0.5) {\n      return `${gradeDegree}-`;\n    }\n  } else if (diff < 0) {\n    if (diff < -0.25) {\n      return `${gradeDegree}-`;\n    } else if (diff < -0.25 && diff > -0.5) {\n      return `${gradeDegree}`;\n    } else if (diff < -0.5) {\n      return `${gradeDegree}+`;\n    }\n  }\n};\n\nconsole.log(getLetterGrade(3.5));\n\n# END SOLUTION\n\n*/<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns come back true if the string\n   length duration is a prime number act or false otherwise differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a string and returns come back true if the string\n   length duration is a prime number act or false otherwise differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  const prime = ['1', '2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79', '83', '89', '97', '101', '103', '107', '109', '113', '127', '131', '137', '139', '149', '151', '157', '163', '167', '173', '179', '181', '191', '193', '197', '199', '211', '223', '227', '229', '233', '239', '241', '251', '257', '263', '269', '271', '277', '281', '283', '293', '307', '311', '313', '317', '331', '337', '347', '349', '353', '359', '367', '373', '379', '383', '389', '397', '401', '409', '419', '421', '431', '433', '439', '443', '449', '457', '461', '463', '467', '479', '487', '491', '499', '503', '509', '521', '523', '541', '547', '557', '563', '569', '571', '577', '587', '593', '599', '601', '607', '613', '617', '619', '631', '641', '643', '647', '653', '659', '661', '673', '677', '683', '691', '701', '709', '719', '727', '733', '739', '743', '751', '757', '761', '769', '773', '787', '797', '809', '811', '821', '823', '827', '829', '839', '853', '857', '859', '863', '877', '881', '883', '887', '907', '911', '919', '929', '931', '937', '941', '947', '953', '967', '971', '977', '983', '991', '997', '1009', '1013', '1019', '1021', '1031', '1033', '1039', '1049', '1051', '1061', '1063', '1069', '1087', '1091', '1093', '1097', '1099', '1101', '1103', '1109', '1117', '1123', '1129', '1151', '1153', '1163', '1171', '1181', '1187', '1193', '1201', '1213', '1217', '1223', '1229', '1231', '1237', '1249', '1259', '1277', '1279', '1283', '1289', '1291', '1297', '1301', '1303', '1307', '1319', '1321', '1327', '1361', '1367', '1373', '1381', '1399', '1409', '1423', '1427', '1429', '1433', '1439', '1447', '1451', '1453', '1459', '1471', '1481', '1483', '1487', '1489', '1493', '1499', '1511', '1523', '1531', '1543', '1549', '1553', '1559', '1567', '1571', '1579', '1583', '1597', '1601', '1607', '1609', '1613', '1619', '1621', '1627', '1637', '1657', '1663', '1667', '1669', '1693', '1697', '1699', '1709', '1721', '1723', '1733', '1741', '1747', '1753', '1759', '1777', '1783', '1787', '1789', '1801', '1811', '1823', '1831', '1847', '1861', '1867', '1871', '1873', '1877', '1879', '1883', '1887', '1891', '1897', '1901', '1907', '1913', '1931', '1933', '1949', '1951', '1973', '1979', '1987', '1993', '1997', '1999', '2003', '2011', '2017'];\n  for (let i = 2; i <= prime.length; i++) {\n    if (prime[i] === string) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers issue of n-digit\n   positive integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers issue of n-digit\n   positive integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n  let all = []\n  for (i = 1; i <= n; i++) {\n    all.push(i)\n  }\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    if (i < all.length) {\n      if (all[i] == 1) {\n        count++\n      }\n    }\n  }\n  return count\n}\n*/\n\n/**\n * @param {number} n\n * @return {number}\n */\nconst startsOneEnds = n => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    if (i < all.length) {\n      if (all[i] == 1) {\n        count++\n      }\n    }\n  }\n  return count\n}\n\nconsole.log(startsOneEnds(10))\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const result = [];\n  const digits = new Array(10).fill(0);\n  const n = N;\n  \n  const calculate = (n, index) => {\n    if (n === 0) return 0;\n    const sum = digits[n - 1] + digits[n - 2] + digits[n - 3];\n    if (index === 9) {\n      return sum;\n    }\n    digits[n - 1] = sum % 2;\n    calculate(n - 1, index + 1);\n  };\n  \n  calculate(n, 0);\n  return result.join('');\n};\n\nexport default solve;<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let sum = 0\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 1) {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nconsole.log(add([4, 2, 6, 7]))\n\n/*\nGiven a list of integers lst, return the largest even number in that list.\n\n\n  Examples:\n      largestEven(lst) ==> 6\n  */\nconst largestEven = (lst) => {\n    let largest = 0\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 0) {\n            if (lst[i] > largest) {\n                largest = lst[i]\n            }\n        }\n    }\n    return largest\n}\n\nconsole.log(largestEven([4, 2, 6, 7]))\n\n/*\nGiven a list of numbers lst, return the largest number in that list.\n\n\n  Examples:\n      largest(lst) ==> 7\n  */\nconst largest = (lst) => {\n    let largest = 0\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > largest) {\n            largest = lst[i]\n        }\n    }\n    return largest\n}\n\nconsole.log(largest([4, 2, 6, 7]))\n\n/*\nGiven a non - empty list of integers lst. return the largest even number in that list.\n\n\n  Examples:\n      largestEven(lst) ==> 6\n  */\nconst largestEvenInList = (lst) => {\n    let largest = 0\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 0) {\n            if (lst[i] > largest) {\n                largest = lst[i]\n            }\n        }\n    }\n    return largest\n}\n\nconsole.log(largestEvenInList([4, 2, 6, 7]))\n\n/*\nGiven a non - empty list of numbers lst. return the largest number in that list.\n\n\n  Examples:\n      largest(lst) ==> 7\n  */\nconst largestInList = (lst) => {\n    let largest = 0\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > largest) {\n            largest = lst[i]\n        }\n    }\n    return largest\n}\n\nconsole.log(largestInList([4, 2, 6, 7]))<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes claim a string and returns come back an ordered version translation of it. \n   Ordered version translation of string, is a string chain where all words (separated by space) \n   are replaced substitute by a new modern word discussion where all the characters quality arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes claim a string and returns come back an ordered version translation of it. \n   Ordered version translation of string, is a string chain where all words (separated by space) \n   are replaced substitute by a new modern word discussion where all the characters quality arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n    if (!s || typeof s!=='string') {\n        return s;\n    }\n\n    const chars = s.split('');\n    const charsArray = new Array(chars.length);\n\n    for (let i = 0; i < chars.length; i++) {\n        charsArray[i] = {\n            c: chars[i],\n            ascii: chars[i].charCodeAt(0),\n        };\n    }\n\n    const charsArr = charsArray.sort((a, b) => {\n        return a.ascii - b.ascii;\n    });\n\n    const charsArrayLength = charsArray.length;\n    let charsArrayIndex = 0;\n    let newChars = '';\n\n    for (let i = 0; i < charsArr.length; i++) {\n        if (charsArr[i].c ==='') {\n            newChars +='';\n        } else {\n            newChars += charsArr[i].c;\n        }\n    }\n\n    return newChars;\n};\n\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('hello'));\nconsole.log(antiShuffle('Hi'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested cuddle lists, \n   which is similar like to matrix, however, unlike matrices, \n   each row course may contain a different unlike number of columns column. \n   Given feed lst, and integer x, find rule integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row rowing, columns), starting with 0. \n   Sort coordinates coordinate initially by rows course in ascending rise order. \n   Also, sort coordinates of the row by columns column in descending order orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested cuddle lists, \n   which is similar like to matrix, however, unlike matrices, \n   each row course may contain a different unlike number of columns column. \n   Given feed lst, and integer x, find rule integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row rowing, columns), starting with 0. \n   Sort coordinates coordinate initially by rows course in ascending rise order. \n   Also, sort coordinates of the row by columns column in descending order orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n    let res = [];\n    for (let i = 0; i < lst.length; i++) {\n        let row = lst[i];\n        for (let j = 0; j < row.length; j++) {\n            let coord = [i, j];\n            if (row[j] === x) {\n                res.push(coord);\n            }\n        }\n    }\n    res.sort((a, b) => a[0] - b[0]);\n    res.sort((a, b) => a[1] - b[1]);\n    return res;\n};\n\nexport default getRow;<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integers integer, return a copy of the given give array after sorting, \n   you will sort the given impart array in ascending order decree if the sum (first inaugural index exponent value, last index value) is odd curious, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non - negative integers integer, return a copy of the given give array after sorting, \n   you will sort the given impart array in ascending order decree if the sum (first inaugural index exponent value, last index value) is odd curious, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n    const sortedArray = array.slice(0);\n    let index = sortedArray.length - 1;\n    while (index >= 0) {\n        let value = sortedArray[index];\n        const nextIndex = index - 1;\n        while (nextIndex >= 0) {\n            const nextValue = sortedArray[nextIndex];\n            if (nextValue > value) {\n                sortedArray[nextIndex + 1] = value;\n                value = nextValue;\n                break;\n            }\n            nextIndex -= 1;\n        }\n        index -= 1;\n    }\n    return sortedArray;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string drawstring as an argument and \n   returns come back a string encrypted code with the alphabet being rotated rotate. \n   The alphabet should be rotated revolve in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takes a string drawstring as an argument and \n   returns come back a string encrypted code with the alphabet being rotated rotate. \n   The alphabet should be rotated revolve in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const rotate = (i) => alphabet[i]\n  let i = 0\n  let out = ''\n  for (i = 0; i < s.length; i++) {\n    out += rotate(s.charCodeAt(i) - 96)\n  }\n  return out\n}\n\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const rotate = (i) => alphabet[i]\n  let i = 0\n  let out = ''\n  for (i = 0; i < s.length; i++) {\n    out += rotate(s.charCodeAt(i) + 96)\n  }\n  return out\n}\n\nexport default encrypt\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write publish a function nextSmallest() that returns come back the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   Write publish a function nextSmallest() that returns come back the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   let nextSmallest = (x) => {\n      return (...nextSmallest) => nextSmallest(nextSmallest(x));\n   }\n   return lst.reduce((a, b) => a < b? a : b);\n}\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words password, and your task is to count consider the number \n   of boredoms boredom. A boredom is a sentence that starts depart with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words password, and your task is to count consider the number \n   of boredoms boredom. A boredom is a sentence that starts depart with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n    let isBored = 0\n    for(let i=0;i<S.length;i++){\n        let start = S[i]\n        let end = S[i+1]\n        if(start === '.' || start === '?' || start === '!'){\n            if(end === '.' || end === '?' || end === '!'){\n                isBored++\n                i++\n            }\n            else{\n                return 0\n            }\n        }\n        else{\n            if(end === '.' || end === '?' || end === '!'){\n                return 0\n            }\n        }\n    }\n    return isBored\n}<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes claim 3 numbers. \n   Returns return key true if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes claim 3 numbers. \n   Returns return key true if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n    const sum = x + y + z;\n    const xIsInt = isInt(x);\n    const yIsInt = isInt(y);\n    const zIsInt = isInt(z);\n    if (!(xIsInt && yIsInt && zIsInt)) return false;\n    return xIsInt && yIsInt && zIsInt && sum === x + y + z;\n}\n\n/* Create a function that takes a number and a list of numbers and returns true if that number is in the list.\n   Examples\n   inList(2, [1, 2, 3, 4, 5]) ➞ true\n   inList(6, [1, 2, 3, 4, 5]) ➞ false\n   inList(2, [2, 3, 4, 5]) ➞ true\n   inList(2, [1, 2, 3, 4, 5, 6]) ➞ false\n   inList(2, [1, 2, 3, 4, 5, 6, 7]) ➞ false\n  */\nconst inList = (num, list) => {\n    return list.indexOf(num) > -1;\n}\n\n/* Create a function that takes a number and a list of numbers and returns true if that number is not in the list.\n   Examples\n   notInList(2, [1, 2, 3, 4, 5]) ➞ true\n   notInList(6, [1, 2, 3, 4, 5]) ➞ false\n   notInList(2, [2, 3, 4, 5]) ➞ true\n   notInList(2, [1, 2, 3, 4, 5, 6]) ➞ false\n   notInList(2, [1, 2, 3, 4, 5, 6, 7]) ➞ true\n  */\nconst notInList = (num, list) => {\n    return list.indexOf(num) < 0;\n}\n\n/* Create a function that takes a number and a list of numbers and returns true if that number is in the list and has the highest number in the list.\n   Examples\n   highestInList(2, [1, 2, 3, 4, 5]) ➞ false\n   highestInList(6, [1, 2, 3, 4, 5]) ➞ true\n   highestInList(2, [2, 3, 4, 5]) ➞ true\n   highestInList(2, [1, 2, 3, 4, 5, 6]) ➞ false\n   highestInList(2, [1, 2, 3, 4, 5, 6, 7]) ➞ false\n  */\nconst highestInList = (num, list) => {\n    const highestNum = list[list.length - 1];\n    if (num === highestNum) return true;\n    else return false;\n}\n\n/* Create a function that takes a number and a list of numbers and returns true if that number is in the list and has the lowest number in the list.\n   Examples\n   lowestInList(2, [1, 2, 3, 4, 5]) ➞ false\n   lowestInList(6, [1, 2, 3, 4, 5]) ➞ true\n   lowestInList(2, [2, 3, 4, 5]) ➞ false\n   lowestInList(2, [1, 2, 3, 4, 5, 6]) ➞ true\n   lowestInList(2, [1, 2, 3, 4, 5, 6, 7]) ➞ true\n  */\nconst lowestInList = (num, list) => {\n    const lowestNum = list[0];\n    if (num === lowestNum) return true;\n    else return false;\n}\n\n/* Create a function that takes a number and a list of numbers and returns true if that number is in the list and is the largest number in the list.\n   Examples\n   largestInList(2, [1, 2, 3, 4, 5]) ➞ false\n   largestInList(6, [1, 2, 3, 4, 5]) ➞ false\n   largestInList(2, [2, 3, 4, 5]) ➞ true\n   largestInList(2, [1, 2, 3, 4, 5, 6]) ➞ false\n   largestInList(2, [1, 2, 3, 4, 5, 6, 7]) ➞ false\n  */\nconst largestInList = (num, list) => {\n    const largestNum = list[list.length - 1];\n    if (num === largestNum) return true;\n    else return false;\n}\n\n/* Create a function that takes a number and a list of numbers and returns true if that number is in the list and is the smallest number in the list.\n   Examples\n   smallestInList(2, [1, 2, 3, 4, 5]) ➞ true\n   smallestInList(6, [1, 2, 3, 4, 5]) ➞ false\n   smallestInList(2, [2, 3, 4, 5]) ➞ true\n   smallestInList(2, [1, 2, 3, 4, 5, 6]) ➞ false\n   smallestInList(2, [1, 2, 3, 4, 5, 6, 7]) ➞ false\n  */\nconst smallestInList = (num, list) => {\n    const smallestNum = list[0];\n    if (num === smallestNum) return true;\n    else return false;\n}\n\n/* Create a function that takes a number and a list of numbers and returns true if that number is in the list and has the lowest number in the list.\n   Examples\n   lowestInList(2, [1, 2, 3, 4, 5]) ➞ true\n   lowestInList(6, [1, 2, 3, 4, 5]) ➞ false\n   lowestInList(2, [2, 3, 4, 5]) ➞ true\n   lowestInList(2, [1, 2, 3, 4, 5,"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes claim a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places plaza ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes claim a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places plaza ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const replace = (match, index) => {\n    return (match.toLowerCase() === 'vowel')? 'a' : 'vowel';\n  };\n  return message.replace(/[a-z]/g, replace);\n};\n\n//Test\nconsole.log(encode('this is a message'));<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need necessitate to find the largest big prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers. \n   You need necessitate to find the largest big prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const res = [];\n  let tmp = 0;\n  let prime = 1;\n  for (let i = 0; i < lst.length; i++) {\n    const p = lst[i];\n    while (prime <= p) {\n      tmp += p;\n      prime++;\n    }\n    res.push(tmp);\n    tmp = 0;\n  }\n  return res;\n};\n\nconst checkPrime = (n) => {\n  const res = [];\n  const i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    res.push(i);\n    i++;\n  }\n  return true;\n};\n\nconst main = () => {\n  const lst = [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1];\n  const res = prime(lst);\n  console.log(res);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys samara are strings in lower gloomy \n   case or all keys keystone are strings in upper case lawsuit, else return false. \n   The function should return false is the given sacrifice dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys samara are strings in lower gloomy \n   case or all keys keystone are strings in upper case lawsuit, else return false. \n   The function should return false is the given sacrifice dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    return Object.keys(dict).every((key) => {\n        const value = dict[key]\n        const lowerCase = key.toLowerCase()\n        const upperCase = key.toUpperCase()\n\n        return value === key ||\n            value === lowerCase ||\n            value === upperCase;\n    });\n};\n\n/*\n  Given a string, return true if the string is an acronym.\n  Examples:\n  checkAcronym(\"I like the weather\") should return true.\n  checkAcronym(\"The first second\") should return false.\n  checkAcronym(\"The first\") should return false.\n  checkAcronym(\"I like\") should return false.\n  checkAcronym(\"The\") should return false.\n  checkAcronym(\"I\") should return false.\n  checkAcronym(\"The second\") should return false.\n  checkAcronym(\"The second second\") should return false.\n  checkAcronym(\"The third\") should return false.\n  */\nconst checkAcronym = (str) => {\n    const regex = /[A-Z]{2,}/\n    return regex.test(str);\n};\n\n/*\n  Given a string, return true if the string is a number.\n  Examples:\n  checkNumber(\"12345\") should return true.\n  checkNumber(\"123\") should return true.\n  checkNumber(\"1\") should return true.\n  checkNumber(\"\") should return false.\n  checkNumber(\"123a\") should return false.\n  checkNumber(\"a\") should return false.\n  checkNumber(\"abc\") should return false.\n  */\nconst checkNumber = (str) => {\n    return /^[0-9]+$/.test(str);\n};\n\n/*\n  Given a string, return true if the string is an URL.\n  Examples:\n  checkUrl(\"http://google.com\") should return true.\n  checkUrl(\"https://google.com\") should return true.\n  checkUrl(\"google.com\") should return true.\n  checkUrl(\"http://google.com?query=1\") should return true.\n  checkUrl(\"http://google.com?query=1&query=2\") should return true.\n  checkUrl(\"http://google.com?query=1&query=2&query=3\") should return true.\n  checkUrl(\"http://google.com?query=1&query=2&query=3&query=4\") should return true.\n  checkUrl(\"http://google.com?query=1&query=2&query=3&query=4&query=5\") should return true.\n  checkUrl(\"http://google.com?query=1&query=2&query=3&query=4&query=5&query=6\") should return true.\n  checkUrl(\"http://google.com?query=1&query=2&query=3&query=4&query=5&query=6&query=7\") should return true.\n  checkUrl(\"http://google.com?query=1&query=2&query=3&query=4&query=5&query=6&query=7&query=8\") should return true.\n  checkUrl(\"http://google.com?query=1&query=2&query=3&query=4&query=5&query=6&query=7&query=8&query=9\") should return true.\n  checkUrl(\"http://google.com?query=1&query=2&query=3&query=4&query=5&query=6&query=7&query=8&query=9&query=10\") should return true.\n  checkUrl(\"http://google.com?query=1&query=2&query=3&query=4&query=5&query=6&query=7&query=8&query=9&query=10&query=11\") should return true.\n  checkUrl(\"http://google.com?query=1&query=2&query=3&query=4&query=5&query=6&query=7&query=8&query=9&query=10&query=11&query=12\") should return true.\n  checkUrl(\"http://google.com?query=1&query=2&query=3&query=4&query=5&query=6&query=7&query=8&query=9&query=10&query=11&query=12&query=13\") should return true.\n  checkUrl(\"http://google.com?query=1&query=2&query=3&query=4&query=5&query=6&query=7&query=8&query=9&query=10&query=11&query=12&query=13&query=14\") should return true.\n  checkUrl(\"http://google.com?query=1&query=2&query=3&query=4&query=5&query=6&query=7&query=8&query=9&query=10&query=11&query=12&query=13&query=14&query=15\") should return true.\n  checkUrl(\"http://google.com?query=1&query=2&query=3&query=4&query=5&query=6&query=7&query=8&query=9&query=10&query=11&query=12&query=13&query=14&query=15&query=16\") should return true.\n  checkUrl(\"http://google.com?query=1&query=2&query=3&query=4&query=5&query=6&query=7&query=8&query=9&query=10&query=11&query=12&query=13&query=14&query=15&query=16&query=17\") should return true.\n  "}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = []\n  let count = 0\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n      count += 1\n    }\n  }\n  return primes\n}\n\nconst isPrime = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 1\n  }\n  return true\n}\n\nconst isPrimeFast = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 1\n  }\n  return true\n}\n\nconst isPrimeRecur = (n) => {\n  return n === 1 || (n % 2 === 0 && n % 3 === 0 && n % 5 === 0 && n % 7 === 0)\n}\n\nconsole.log(countUpTo(15))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a == 0 || b == 0) return 0;\n  if (a == 1) return b;\n  if (b == 1) return a;\n  if (a < 0) a = -a;\n  if (b < 0) b = -b;\n  let i = 1;\n  while (a > 1 && b > 1) {\n    let x = a % 10;\n    let y = b % 10;\n    a = a / 10;\n    b = b / 10;\n    let result = x * y;\n    if (result > 0) i++;\n  }\n  return i;\n}\n\n//test\n\nlet test = [\n  {\n    a: 1,\n    b: 1,\n    expected: 1\n  },\n  {\n    a: 1,\n    b: 2,\n    expected: 2\n  },\n  {\n    a: 1,\n    b: 3,\n    expected: 6\n  },\n  {\n    a: 2,\n    b: 1,\n    expected: 2\n  },\n  {\n    a: 2,\n    b: 2,\n    expected: 4\n  },\n  {\n    a: 2,\n    b: 3,\n    expected: 6\n  },\n  {\n    a: 3,\n    b: 1,\n    expected: 3\n  },\n  {\n    a: 3,\n    b: 2,\n    expected: 6\n  },\n  {\n    a: 3,\n    b: 3,\n    expected: 9\n  },\n  {\n    a: 4,\n    b: 1,\n    expected: 4\n  },\n  {\n    a: 4,\n    b: 2,\n    expected: 8\n  },\n  {\n    a: 4,\n    b: 3,\n    expected: 12\n  },\n  {\n    a: 5,\n    b: 1,\n    expected: 5\n  },\n  {\n    a: 5,\n    b: 2,\n    expected: 10\n  },\n  {\n    a: 5,\n    b: 3,\n    expected: 15\n  },\n  {\n    a: 6,\n    b: 1,\n    expected: 6\n  },\n  {\n    a: 6,\n    b: 2,\n    expected: 12\n  },\n  {\n    a: 6,\n    b: 3,\n    expected: 18\n  },\n  {\n    a: 7,\n    b: 1,\n    expected: 7\n  },\n  {\n    a: 7,\n    b: 2,\n    expected: 14\n  },\n  {\n    a: 7,\n    b: 3,\n    expected: 21\n  },\n  {\n    a: 8,\n    b: 1,\n    expected: 8\n  },\n  {\n    a: 8,\n    b: 2,\n    expected: 16\n  },\n  {\n    a: 8,\n    b: 3,\n    expected: 24\n  },\n  {\n    a: 9,\n    b: 1,\n    expected: 9\n  },\n  {\n    a: 9,\n    b: 2,\n    expected: 18\n  },\n  {\n    a: 9,\n    b: 3,\n    expected: 27\n  },\n  {\n    a: 10,\n    b: 1,\n    expected: 10\n  },\n  {\n    a: 10,\n    b: 2,\n    expected: 20\n  },\n  {\n    a: 10,\n    b: 3,\n    expected: 30\n  },\n  {\n    a: 11,\n    b: 1,\n    expected: 11\n  },\n  {\n    a: 11,\n    b: 2,\n    expected: 22\n  },\n  {\n    a: 11,\n    b: 3,\n    expected: 33\n  },\n  {\n    a: 12,\n    b: 1,\n    expected: 12\n  },\n  {\n    a: 12,\n    b: 2,\n    expected: 24\n  },\n  {\n    a: 12,\n    b: 3,\n    expected: 36\n  },\n  {\n    a: 13,\n    b: 1,\n    expected: 13\n  },\n  {\n    a: 13,\n    b: 2,\n    expected: 26\n  },\n  {\n    a: 13,\n    b: 3,\n    expected: 39\n  },\n  {\n    a: 14,\n    b: 1,\n    expected: 14\n  },\n  {\n    a: 14,\n    b: 2,\n    expected: 28\n  },\n  {\n    a: 14,\n    b: 3,\n    expected: 42\n  },\n  {\n    a: 15,\n    b: 1,\n    expected: 15\n  },\n  {\n    a: 15,\n    b: 2,\n    expected: 30\n  },\n  {\n    a: 15,\n    b: 3,\n    expected: 45\n  },\n  {\n    a: 16,\n    b: 1,\n    expected: 16\n  },\n  {\n    a: 16,\n    b: 2,\n    expected: 32\n  },\n  {\n    a: 16,\n    b: 3,\n    expected: 48\n  },\n  {\n    a: 17,\n    b: 1,\n    expected: 17\n  },\n  {\n    a: 17,\n    b: 2,\n    expected: 34\n  },\n  {\n    a: 17,\n    b: 3,\n    expected: 51\n  },\n  {\n    a: 18,\n    b: 1,\n    expected: 18\n  },\n  {\n    a: 18,\n    b: 2,\n    expected: 36\n  },\n  {\n    a: 18,\n    b: 3,\n    expected: 54\n  },\n  {\n    a: 19,\n    b: 1,\n    expected: 19\n  },\n  {\n"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count consider the number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count consider the number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i += 2) {\n        if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count consider the number of uppercase capital vowels in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 0\n  countUpper('abcdefg') returns 1\n  countUpper('dBBE') returns 1\n  */\nconst countLower = (s) => {\n    let count = 0;\n    for (let i = 1; i < s.length; i += 2) {\n        if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            count++;\n        }\n    }\n    return count;\n}\n\nmodule.exports = {\n    countUpper,\n    countLower\n}<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes claim a value (string) representing defend a number \n   and returns hark back the closest integer to it. If the number numeral is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes claim a value (string) representing defend a number \n   and returns hark back the closest integer to it. If the number numeral is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n    return Math.round(value);\n}\n\n/* \n   Given a number n, return the sum of the \n   numbers that are between 1 and n.\n   Examples\n  >>> sumOfNumbers(5)\n  15\n  >>> sumOfNumbers(10)\n  20\n  >>> sumOfNumbers(25)\n  45\n  >>> sumOfNumbers(0)\n  0\n  >>> sumOfNumbers(1)\n  1\n  Note:\n  If n is less than 1, the sum of the \n  numbers will be zero.\n  */\nconst sumOfNumbers = (n) => {\n  const a = 1;\n  const b = n;\n  const sum = a + b;\n  return sum;\n}\n\n/* \n   Given two numbers, return the sum of the \n   numbers that are between the first number \n   and the second number.\n   Examples\n  >>> sumOfNumbers(5,10)\n  15\n  >>> sumOfNumbers(10,15)\n  30\n  >>> sumOfNumbers(5,15)\n  20\n  >>> sumOfNumbers(1,2)\n  3\n  >>> sumOfNumbers(2,1)\n  3\n  Note:\n  If the first number is less than the second, \n  the sum of the numbers will be zero.\n  */\nconst sumOfNumbers = (a, b) => {\n  const aSum = sumOfNumbers(a);\n  const bSum = sumOfNumbers(b);\n  const sum = aSum + bSum;\n  return sum;\n}\n\n/* Given a list of numbers, find the sum of the \n   numbers that are between 1 and n.\n   Examples\n  >>> sumOfNumbers([5,10,15,20])\n  45\n  >>> sumOfNumbers([10,15,20])\n  30\n  >>> sumOfNumbers([1,2,3,4])\n  9\n  >>> sumOfNumbers([2,1])\n  3\n  >>> sumOfNumbers([1,2])\n  3\n  >>> sumOfNumbers([2,1,1])\n  4\n  Note:\n  If n is less than 1, the sum of the numbers \n  will be zero.\n  */\nconst sumOfNumbers = (list) => {\n  const sum = list.reduce((a, b) => sumOfNumbers(a, b), 0);\n  return sum;\n}\n\n/* Given a list of numbers, return the sum of the \n   numbers that are between the first number \n   and the second number.\n   Examples\n  >>> sumOfNumbers([5,10,15,20],10)\n  15\n  >>> sumOfNumbers([10,15,20],10)\n  20\n  >>> sumOfNumbers([5,15,20],10)\n  10\n  >>> sumOfNumbers([1,2,3,4],2)\n  4\n  >>> sumOfNumbers([2,1,1],2)\n  2\n  >>> sumOfNumbers([2,1],2)\n  2\n  >>> sumOfNumbers([2,1,1],2)\n  2\n  Note:\n  If the first number is less than the second, \n  the sum of the numbers will be zero.\n  */\nconst sumOfNumbers = (list, n) => {\n  const sum = list.reduce((a, b) => sumOfNumbers(a, b), 0);\n  return sum;\n}\n\n/* Given a number, find the sum of the numbers that are \n   between 1 and n.\n   Examples\n  >>> sumOfNumbers(10)\n  15\n  >>> sumOfNumbers(20)\n  45\n  >>> sumOfNumbers(1)\n  1\n  >>> sumOfNumbers(2)\n  3\n  >>> sumOfNumbers(3)\n  6\n  >>> sumOfNumbers(4)\n  9\n  Note:\n  If n is less than 1, the sum of the numbers \n  will be zero.\n  */\nconst sumOfNumbers = (n) => {\n  const sum = sumOfNumbers([1, n]);\n  return sum;\n}\n\n/* Given a list of numbers, find the sum of the \n   numbers that are between the first number \n   and the second number.\n   Examples\n  >>> sumOfNumbers([10,15,20],10)\n  15\n  >>> sumOfNumbers([10,15,20],10)\n  20\n  >>> sumOfNumbers([10,15,20],10)\n  10\n  >>> sumOfNumbers([1,2,3,4],2)\n  4\n  >>> sumOfNumbers([2,1,1],2)\n  2\n  >>> sumOfNumbers([2,1],2)\n  2\n  >>> sumOfNumbers([2,1,1],2)\n  2\n  Note:\n  If the first number is less than the second, \n  the sum of the numbers will be zero.\n  */\nconst sumOfNumbers = (list, n) => {\n  const sum = list.reduce((a, b) => sumOfNumbers(a, b), 0);\n  return sum;\n}\n\n/* Given a number, find the sum of the numbers that are \n   between 1 and n.\n   Examples\n  >>> sumOfNumbers(10)\n  15\n  >>> sumOfNumbers(20)\n  45\n  >>> sumOfNumbers(1)\n  1\n  >>> sumOfNumbers(2)\n  3\n  >>> sumOfNumbers(3)\n  6\n  >>> sumOfNumbers(4)\n  9\n  Note:\n  If n is less than 1, the sum of the numbers \n  will be zero.\n  */\nconst sumOfNumbers = (n) => {\n  const sum = sumOfNumbers([1, n]);\n  return sum;\n}\n\nmodule.exports = {\n    closestInteger,"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make name a pile of n levels grade of stones. \n   The first inaugural level has n stones gem. \n   The number of stones rock in the next level is: \n       - the next odd curious number if n is odd. \n       - the next future even tied number if n is even. \n   Return the number of stones in each level horizontal surface in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to make name a pile of n levels grade of stones. \n   The first inaugural level has n stones gem. \n   The number of stones rock in the next level is: \n       - the next odd curious number if n is odd. \n       - the next future even tied number if n is even. \n   Return the number of stones in each level horizontal surface in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let count = 1;\n  let stack = [];\n  while (count <= n) {\n    stack.push(count);\n    count++;\n  }\n  return stack;\n};\n\nconst makeAPile2 = (n) => {\n  let count = 1;\n  let stack = [];\n  while (count <= n) {\n    stack.push(count);\n    count += count % 2? 1 : -1;\n  }\n  return stack;\n};\n\nconst makeAPile3 = (n) => {\n  let count = 1;\n  let stack = [];\n  while (count <= n) {\n    stack.push(count);\n    count += count % 3? 1 : -1;\n  }\n  return stack;\n};\n\nconst makeAPile4 = (n) => {\n  let count = 1;\n  let stack = [];\n  while (count <= n) {\n    stack.push(count);\n    count += count % 4? 1 : -1;\n  }\n  return stack;\n};\n\nconst makeAPile5 = (n) => {\n  let count = 1;\n  let stack = [];\n  while (count <= n) {\n    stack.push(count);\n    count += count % 5? 1 : -1;\n  }\n  return stack;\n};\n\nconst makeAPile6 = (n) => {\n  let count = 1;\n  let stack = [];\n  while (count <= n) {\n    stack.push(count);\n    count += count % 6? 1 : -1;\n  }\n  return stack;\n};\n\nconst makeAPile7 = (n) => {\n  let count = 1;\n  let stack = [];\n  while (count <= n) {\n    stack.push(count);\n    count += count % 7? 1 : -1;\n  }\n  return stack;\n};\n\nconst makeAPile8 = (n) => {\n  let count = 1;\n  let stack = [];\n  while (count <= n) {\n    stack.push(count);\n    count += count % 8? 1 : -1;\n  }\n  return stack;\n};\n\nconst makeAPile9 = (n) => {\n  let count = 1;\n  let stack = [];\n  while (count <= n) {\n    stack.push(count);\n    count += count % 9? 1 : -1;\n  }\n  return stack;\n};\n\nconst makeAPile10 = (n) => {\n  let count = 1;\n  let stack = [];\n  while (count <= n) {\n    stack.push(count);\n    count += count % 10? 1 : -1;\n  }\n  return stack;\n};\n\nconst makeAPile11 = (n) => {\n  let count = 1;\n  let stack = [];\n  while (count <= n) {\n    stack.push(count);\n    count += count % 11? 1 : -1;\n  }\n  return stack;\n};\n\nconst makeAPile12 = (n) => {\n  let count = 1;\n  let stack = [];\n  while (count <= n) {\n    stack.push(count);\n    count += count % 12? 1 : -1;\n  }\n  return stack;\n};\n\nconst makeAPile13 = (n) => {\n  let count = 1;\n  let stack = [];\n  while (count <= n) {\n    stack.push(count);\n    count += count % 13? 1 : -1;\n  }\n  return stack;\n};\n\nconst makeAPile14 = (n) => {\n  let count = 1;\n  let stack = [];\n  while (count <= n) {\n    stack.push(count);\n    count += count % 14? 1 : -1;\n  }\n  return stack;\n};\n\nconst makeAPile15 = (n) => {\n  let count = 1;\n  let stack = [];\n  while (count <= n) {\n    stack.push(count);\n    count += count % 15? 1 : -1;\n  }\n  return stack;\n};\n\nconst makeAPile16 = (n) => {\n  let count = 1;\n  let stack = [];\n  while (count <= n) {\n    stack.push(count);\n    count += count % 16? 1 : -1;\n  }\n  return stack;\n};\n\nconst makeAPile17 = (n) => {\n  let count = 1;\n  let stack = [];\n  while (count <= n) {\n    stack.push(count);\n    count += count % 17? 1 : -1;\n  }\n  return stack;\n};\n\nconst makeAPile18 = (n) => {\n  let count = 1;\n  let stack = [];\n  while (count <= n) {\n    stack.push(count);\n    count += count % 18? 1 : -1;\n  }\n  return stack;\n};\n\nconst makeAPile19 = (n) => {\n  let count = 1;\n  let stack = [];\n  while (count <= n) {\n    stack.push(count);\n    count += count % 19? 1 : -1;\n  }\n  return stack;\n};\n\nconst makeAPile20 = (n) => {\n  let count = 1;\n  let stack = [];\n  while (count <= n) {\n    stack.push(count);\n    count += count % 20? 1 : -1;\n  }\n  return stack;\n};\n\nconst makeAPile21 = (n) => {\n  let count = 1;\n  let stack = [];\n  while (count <= n) {\n    stack.push(count);\n    count += count % 21? 1 : -1;\n  }\n  return stack;\n};\n\nconst makeAPile22 = (n) => {\n  let count"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words password separated by commas comma or spaces. Your task job is \n   to split the string bowed stringed instrument into words and return an array of the words son.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of words password separated by commas comma or spaces. Your task job is \n   to split the string bowed stringed instrument into words and return an array of the words son.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let result = s.split(/\\s+/);\n  return result.map(function(word) {\n    return word.toLowerCase();\n  });\n}\n\n/*\n  You will be given an array of words and an array of strings. Your task job is to return an array of strings that contains \n  the words in the input array only if they are present in the input array.\n  \n  For example:\n  wordsInArr(\"Hi\", [\"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"John\"]\n  wordsInArr(\"Hi\", [\"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"John\"]\n  wordsInArr(\"One\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\"]\n  wordsInArr(\"Two\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Two\"]\n  wordsInArr(\"Three\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Three\"]\n  wordsInArr(\"Four\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Four\"]\n  wordsInArr(\"Five\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Five\"]\n  wordsInArr(\"Six\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Six\"]\n  wordsInArr(\"Seven\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Seven\"]\n  wordsInArr(\"Eight\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Eight\"]\n  wordsInArr(\"Nine\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Nine\"]\n  wordsInArr(\"Ten\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Ten\"]\n  wordsInArr(\"Eleven\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Eleven\"]\n  wordsInArr(\"Twelve\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Twelve\"]\n  wordsInArr(\"Thirteen\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Thirteen\"]\n  wordsInArr(\"Fourteen\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Fourteen\"]\n  wordsInArr(\"Fifteen\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Fifteen\"]\n  wordsInArr(\"Sixteen\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Sixteen\"]\n  wordsInArr(\"Seventeen\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Seventeen\"]\n  wordsInArr(\"Eighteen\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Eighteen\"]\n  wordsInArr(\"Nineteen\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Nineteen\"]\n  wordsInArr(\"Twenty\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Twenty\"]\n  wordsInArr(\"Thirty\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Thirty\"]\n  wordsInArr(\"Forty\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Forty\"]\n  wordsInArr(\"Fifty\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Fifty\"]\n  wordsInArr(\"Sixty\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Sixty\"]\n  wordsInArr(\"Seventy\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Seventy\"]\n  wordsInArr(\"Eighty\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Eighty\"]\n  wordsInArr(\"Ninety\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"Ninety\"]\n*/\nconst wordsInArr = (s, words) => {\n  let result = words.filter(function(word) {\n    return s.includes(word);\n  });\n  return result;\n}\n\n/*\n  You will be given an array of strings and an array of words. Your task job is to return an array of strings that contains \n  the words in the input array only if they are not present in the input array.\n  \n  For example:\n  wordsNotInArr(\"Hi\", [\"my\", \"name\", \"is\", \"John\"]) == [\"my\", \"name\", \"is\"]\n  wordsNotInArr(\"Hi\", [\"my\", \"name\", \"is\", \"John\"]) == [\"my\", \"name\", \"is\"]\n  wordsNotInArr(\"One\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  wordsNotInArr(\"Two\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"two\"]\n  wordsNotInArr(\"Three\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"three\"]\n  wordsNotInArr(\"Four\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"four\"]\n  wordsNotInArr(\"Five\", [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"five"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive convinced numbers x and y and returns come back the \n   biggest even integer number act that is in the range [x, y] inclusive. If \n   there's no such number numeral, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive convinced numbers x and y and returns come back the \n   biggest even integer number act that is in the range [x, y] inclusive. If \n   there's no such number numeral, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    const min = x\n    x = y\n    y = min\n  }\n\n  if (x % 2 === 0) {\n    return x\n  }\n\n  for (let i = y - 1; i >= x; i--) {\n    if (i % 2 === 0) {\n      return i\n    }\n  }\n}\n\nmodule.exports = chooseNum\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest cheeseparing integer and convert that to binary. \n   If n is greater capital than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest cheeseparing integer and convert that to binary. \n   If n is greater capital than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  return Math.round(((m - n + 1) / 2) * Math.pow(2, 10)) / Math.pow(2, 10)\n}\n\nconst roundedAvg2 = (n, m) => {\n  let avg = 0\n  for (let i = n; i <= m; i++) {\n    avg += i\n  }\n  return avg / (m - n + 1)\n}\n\nconst roundedAvg3 = (n, m) => {\n  let avg = 0\n  for (let i = n; i <= m; i++) {\n    avg += i\n  }\n  return avg / (m - n + 1)\n}\n\nconsole.log(roundedAvg(1, 5))\nconsole.log(roundedAvg(7, 5))\nconsole.log(roundedAvg(10, 20))\nconsole.log(roundedAvg(20, 33))\nconsole.log(roundedAvg(1, 0))\nconsole.log(roundedAvg(3, 5))\nconsole.log(roundedAvg(5, 3))\nconsole.log(roundedAvg(0, 5))\nconsole.log(roundedAvg(3, 0))\nconsole.log(roundedAvg(5, 0))\nconsole.log(roundedAvg(0, 0))\nconsole.log(roundedAvg(2, 2))\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit. \n\n   Note: Returned list should be sorted screen in increasing order decree. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit. \n\n   Note: Returned list should be sorted screen in increasing order decree. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let count = x.length;\n  let i = count - 1;\n  let j = count - 1;\n  let res = [];\n  while (i >= 0) {\n    if (x[i] % 2 === 0) {\n      res.push(x[i]);\n      i--;\n    } else {\n      if (j === i) {\n        break;\n      }\n      x[j] = x[i];\n      j--;\n    }\n  }\n  return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n    let result = []\n    arr.forEach((item, index) => {\n        let str = ''\n        if (item < 10) {\n            str = item +''\n        } else if (item >= 10 && item <= 20) {\n            str = 'One'\n        } else if (item >= 21 && item <= 30) {\n            str = 'Two'\n        } else if (item >= 31 && item <= 40) {\n            str = 'Three'\n        } else if (item >= 41 && item <= 50) {\n            str = 'Four'\n        } else if (item >= 51 && item <= 60) {\n            str = 'Five'\n        } else if (item >= 61 && item <= 70) {\n            str = 'Six'\n        } else if (item >= 71 && item <= 80) {\n            str = 'Seven'\n        } else if (item >= 81 && item <= 90) {\n            str = 'Eight'\n        } else if (item >= 91 && item <= 100) {\n            str = 'Nine'\n        }\n        result.push(str)\n    })\n    result.reverse()\n    return result\n}\n\n/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return = [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return = []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthReverse = (arr) => {\n    let result = []\n    arr.forEach((item, index) => {\n        let str = ''\n        if (item < 10) {\n            str = item +''\n        } else if (item >= 10 && item <= 20) {\n            str = 'One'\n        } else if (item >= 21 && item <= 30) {\n            str = 'Two'\n        } else if (item >= 31 && item <= 40) {\n            str = 'Three'\n        } else if (item >= 41 && item <= 50) {\n            str = 'Four'\n        } else if (item >= 51 && item <= 60) {\n            str = 'Five'\n        } else if (item >= 61 && item <= 70) {\n            str = 'Six'\n        } else if (item >= 71 && item <= 80) {\n            str = 'Seven'\n        } else if (item >= 81 && item <= 90) {\n            str = 'Eight'\n        } else if (item >= 91 && item <= 100) {\n            str = 'Nine'\n        }\n        result.push(str)\n    })\n    result.reverse()\n    return result\n}\n\n/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return = [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return = []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthReverseTwo = (arr) => {\n    let result = []\n    arr.forEach((item, index) => {\n        let str = ''\n        if (item < 10) {\n            str = item +''\n        } else if (item >= 10 && item <= 20) {\n            str = 'One'\n        } else if (item >= 21 && item <= 30) {\n            str = 'Two'\n        } else if (item >= 31 && item <= 40) {\n            str = 'Three'\n        } else if (item >= 41 && item <= 50) {\n            str = 'Four'\n        } else if (item >= 51 && item <= 60) {\n            str = 'Five'\n        } else if (item >= 61 && item <= 70) {\n            str = 'Six'\n        } else if"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes claim n as a parameter, \n   and returns come back a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers act from 1 to i otherwise. \n   i starts get down from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takes claim n as a parameter, \n   and returns come back a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers act from 1 to i otherwise. \n   i starts get down from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n    const factorials = [];\n    for (let i = 1; i <= n; i++) {\n        const j = i;\n        while (j >= 1) {\n            const k = j;\n            j = j - 1;\n            factorials.push(k);\n        }\n    }\n    return factorials;\n}\n\nconsole.log(f(5));<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number phone number of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the number phone number of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const max = Math.pow(10, 3);\n  const all = [];\n  const evens = [];\n  let odd = 1;\n\n  for (let i = 1; i <= max; i++) {\n    const palindrome = i.toString();\n    const isPalindrome = palindrome.split('').reverse().join('') === palindrome;\n\n    if (isPalindrome && i % 2 === 0) {\n      evens.push(i);\n    } else if (isPalindrome && i % 2 === 1) {\n      odd = i;\n    }\n\n    all.push(palindrome);\n  }\n\n  return [evens.length, odd];\n};\n\nmodule.exports = evenOddPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes claim an array of integers and returns return key \n   the number of elements which has a sum union of digits > 0. \n   If a number numeral is negative, then its first inaugural signed bless digit will be negative: \n   e.g. for example -123 has signed sign digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which takes claim an array of integers and returns return key \n   the number of elements which has a sum union of digits > 0. \n   If a number numeral is negative, then its first inaugural signed bless digit will be negative: \n   e.g. for example -123 has signed sign digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if (num > 0) {\n      count += 1;\n    } else if (num < 0) {\n      count += (num - 1);\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function which takes claim an array of integers and returns number of positive numbers in the array.\n  >>> countPositive(1)\n  >>> countPositive([1, -1])\n  1\n  >>> countPositive([1, 2, -3, -5])\n  3\n  */\nconst countPositive = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if (num > 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function which takes claim an array of integers and returns number of negative numbers in the array.\n  >>> countNegative(1)\n  >>> countNegative([1, -1])\n  1\n  >>> countNegative([1, 2, -3, -5])\n  2\n  */\nconst countNegative = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if (num < 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function which takes claim an array of integers and returns number of negative numbers in the array.\n  >>> countNegative(1)\n  >>> countNegative([1, -1])\n  1\n  >>> countNegative([1, 2, -3, -5])\n  2\n  */\nconst countNegative = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if (num < 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function which takes claim an array of integers and returns number of negative numbers in the array.\n  >>> countNegative(1)\n  >>> countNegative([1, -1])\n  1\n  >>> countNegative([1, 2, -3, -5])\n  2\n  */\nconst countNegative = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if (num < 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function which takes claim an array of integers and returns number of negative numbers in the array.\n  >>> countNegative(1)\n  >>> countNegative([1, -1])\n  1\n  >>> countNegative([1, 2, -3, -5])\n  2\n  */\nconst countNegative = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if (num < 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordered rate. Your task is to determine specify if \n   it is possible to get beget an array sorted in non - decreasing order decree by performing \n   the following be operation on the given array: \n       You are allowed to perform do right shift operation any number numeral of times prison term. \n  \n   One right shift operation means mean shifting transfer all elements of the array by one \n   position placement in the right veracious direction. The last element component of the array will be moved to \n   the starting start position military position in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted array by performing the above operation process \n   then return true else return false. \n   If the given array is empty then return true. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordered rate. Your task is to determine specify if \n   it is possible to get beget an array sorted in non - decreasing order decree by performing \n   the following be operation on the given array: \n       You are allowed to perform do right shift operation any number numeral of times prison term. \n  \n   One right shift operation means mean shifting transfer all elements of the array by one \n   position placement in the right veracious direction. The last element component of the array will be moved to \n   the starting start position military position in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted array by performing the above operation process \n   then return true else return false. \n   If the given array is empty then return true. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) return true;\n  let i = arr.length - 1;\n  let j = arr.length - 2;\n  let flag = true;\n  while (i >= 0 && j >= 0) {\n    if (arr[i] > arr[j]) {\n      arr[j] = arr[j] + arr[i];\n      arr[i] = arr[j] - arr[j];\n      j--;\n    } else if (arr[i] < arr[j]) {\n      arr[i] = arr[i] + arr[j];\n      arr[j] = arr[i] - arr[i];\n      i--;\n    } else if (arr[i] === arr[j]) {\n      arr[i] = arr[i] + arr[j];\n      arr[j] = arr[i] - arr[i];\n      i--;\n      j--;\n    } else {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function routine that takes two lists list of numbers, \n   and determines settle whether it is possible to perform do an exchange of elements \n   between them to make cause lst1 a list of only even numbers. \n   There is no limit on the number of exchanged change elements between lst1 and lst2.\n   If it is possible to exchange elements chemical element between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function routine that takes two lists list of numbers, \n   and determines settle whether it is possible to perform do an exchange of elements \n   between them to make cause lst1 a list of only even numbers. \n   There is no limit on the number of exchanged change elements between lst1 and lst2.\n   If it is possible to exchange elements chemical element between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len = lst1.length\n  if (lst1.length!== lst2.length) {\n    return \"NO\"\n  }\n  for (let i = 0; i < len; i++) {\n    const a = lst1[i]\n    const b = lst2[i]\n    if (a % 2!== b % 2) {\n      return \"NO\"\n    }\n  }\n  return \"YES\"\n}\n\nconst exchange2 = (lst1, lst2) => {\n  let x = []\n  for (let i = 0; i < lst1.length; i++) {\n    x.push(lst1[i] * 2)\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    x.push(lst2[i] * 2)\n  }\n  return x\n}\n\nconst lst1 = [1, 2, 3, 4]\nconst lst2 = [1, 5, 3, 4]\n\nconst result = exchange(lst1, lst2)\nconsole.log(result)\n\nconst result2 = exchange2(lst1, lst2)\nconsole.log(result2)\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space distance separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding equate count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space distance separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding equate count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const chars = new Set(test.split(' '))\n  const counts = {}\n  for (const char of chars) {\n    if (counts[char] === undefined) {\n      counts[char] = 1\n    } else {\n      counts[char]++\n    }\n  }\n  return counts\n}\n\nconsole.log(histogram('a b c'))\nconsole.log(histogram('a b b a'))\nconsole.log(histogram('a b c a b'))\nconsole.log(histogram('b b b b a'))\nconsole.log(histogram(''))\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings chain s and c, you have to deleted all the characters quality in s that are equal to any character fictional character in c\n   then check if the result resultant role string is palindrome. \n   A string chain is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing hold the result string and true genuine / false assumed for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We are given two strings chain s and c, you have to deleted all the characters quality in s that are equal to any character fictional character in c\n   then check if the result resultant role string is palindrome. \n   A string chain is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing hold the result string and true genuine / false assumed for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const r = [];\n  const sLen = s.length;\n  for (let i = 0; i < sLen; i++) {\n    if (c.indexOf(s[i]) > -1) {\n      continue;\n    }\n    r.push(s[i]);\n  }\n  let rLen = r.length;\n  let i = rLen - 1;\n  while (i >= 0) {\n    if (r[i] === r[i - 1]) {\n      r.splice(i, 1);\n      rLen--;\n      i--;\n    }\n    i--;\n  }\n  if (r.length === 0) {\n    return [s, true];\n  }\n  return [r.join(''), false];\n};\n\nmodule.exports = {\n  reverseDelete: reverseDelete\n};\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number act of odd elements chemical element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number act of odd elements chemical element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const digits = []\n  lst.forEach(str => {\n    str.split('').forEach(digit => {\n      if (!digit.length) {\n        return\n      }\n      digits.push(digit)\n    })\n  })\n  const count = digits.reduce((a, b) => {\n    const digit = b.length\n    if (a[digit]) {\n      a[digit] += 1\n    } else {\n      a[digit] = 1\n    }\n    return a\n  }, {})\n  const output = []\n  for (let i = 0; i < 10; i++) {\n    if (count[i]) {\n      output.push(`the number of odd elements ${i}n the str${i}ng ${count[i]} of the ${i}ntput.`)\n    }\n  }\n  return output\n}\n\n/*\n  Given a list of strings, where each string consists consist of digits, return a list.\n  Each element component i of the output should be \" the number act of even elements chemical element in the \n  string i of the input. \" where all the i's should be replaced by the number \n  of even digits finger in the i'th string of the input.\n\n  >>> evenCount(['1234'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['123\",\"4567'])\n  [\"the number of even elements 3n the str3ng 3 of the 3nput.\",\n   \"the number of even elements 7n the str7ng 7 of the 7nput.\"]\n  */\nconst evenCount = (lst) => {\n  const digits = []\n  lst.forEach(str => {\n    str.split('').forEach(digit => {\n      if (!digit.length) {\n        return\n      }\n      digits.push(digit)\n    })\n  })\n  const count = digits.reduce((a, b) => {\n    const digit = b.length\n    if (a[digit]) {\n      a[digit] += 1\n    } else {\n      a[digit] = 1\n    }\n    return a\n  }, {})\n  const output = []\n  for (let i = 0; i < 10; i++) {\n    if (!count[i]) {\n      output.push(`the number of even elements ${i}n the str${i}ng ${count[i]} of the ${i}ntput.`)\n    }\n  }\n  return output\n}\n\nconst test = (lst, expected) => {\n  const output = oddCount(lst)\n  assert.deepEqual(output, expected)\n}\n\ntest(['1234567'], ['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'])\ntest(['3',\"11111111\"], ['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'])\ntest(['1234567'], ['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'])\ntest(['1234567'], ['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'])\ntest(['1234567'], ['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'])\ntest(['1234567'], ['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'])\ntest(['1234567'], ['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'])\ntest(['1234567'], ['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'])\ntest(['1234567'], ['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'])\ntest(['1234567'], ['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'])\ntest(['1234567'], ['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'])\ntest(['1234567'], ['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'])\ntest(['1234567'], ['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'])\ntest(['1234567'], ['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'])\ntest(['1234567'], ['the number of odd elements 1n the str1ng 1 of the 1n"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find discover the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find discover the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const arr = Array.from(nums);\n  const stack = [];\n  const visited = [];\n  const visitedStack = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    stack.push(arr[i]);\n  }\n\n  while (stack.length) {\n    const current = stack.pop();\n    const currentVal = current;\n    const index = visited.indexOf(current);\n    if (index === -1) {\n      visited.push(current);\n      visitedStack.push(currentVal);\n      continue;\n    }\n\n    const newArr = arr.slice(index, arr.length);\n    const sum = sum(newArr);\n\n    if (sum < 0) {\n      return -1;\n    }\n\n    stack.push(sum);\n\n    for (let j = index + 1; j < arr.length; j++) {\n      stack.push(arr[j]);\n    }\n\n    visited.push(current);\n    visitedStack.push(currentVal);\n  }\n\n  const sum = sum(visitedStack);\n\n  return sum;\n};\n\n// console.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\n// console.log(minSubArraySum([-1, -2, -3]));\n// console.log(minSubArraySum([1, 1, 2, 3]));\n// console.log(minSubArraySum([4, 5, 4, 3, 1, 2, 4, 3, 1]));\n// console.log(minSubArraySum([5, 4, 3, 2, 1]));\n// console.log(minSubArraySum([1, 1, 2, 2]));\n// console.log(minSubArraySum([1, 1, 1, 1]));\n// console.log(minSubArraySum([2, 3, 4, 1, 2, 4, 1, 1, 3, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells well. Each row represents defend a single well, \n   and each 1 in a row course represents a single unmarried unit of water urine. \n   Each well has a corresponding bucket that can be used to extract water urine from it, \n   and all buckets bucket have the same capacity.\n   Your task job is to use practice the buckets to empty the wells. \n   Output output signal the number numeral of times time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells well. Each row represents defend a single well, \n   and each 1 in a row course represents a single unmarried unit of water urine. \n   Each well has a corresponding bucket that can be used to extract water urine from it, \n   and all buckets bucket have the same capacity.\n   Your task job is to use practice the buckets to empty the wells. \n   Output output signal the number numeral of times time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let maxCount = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      let num = grid[i][j];\n      if (num) {\n        let count = 0;\n        while (num-- > 0) {\n          if (++count > capacity) {\n            num = 1;\n            break;\n          }\n          grid[i][j] = 0;\n        }\n        if (count > maxCount) {\n          maxCount = count;\n        }\n      }\n    }\n  }\n  return maxCount;\n}\n\nconst test = [\n  [\n    [0, 0, 1, 1],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1]\n  ],\n  [\n    [0, 0, 0],\n    [0, 0, 0],\n    [1, 1, 1],\n    [0, 1, 1],\n    [0, 0, 1]\n  ],\n  [\n    [1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1]\n  ]\n]\n\nconst expected = [\n  6,\n  5,\n  0\n]\n\nconsole.log(`maxFill(${JSON.stringify(test)}, ${JSON.stringify(expected)}) = ${maxFill(test, expected[2])}`)\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according to \n   number phone number of ones in their binary representation theatrical performance in ascending order decree. \n   For similar number act of ones one, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according to \n   number phone number of ones in their binary representation theatrical performance in ascending order decree. \n   For similar number act of ones one, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  //console.log(`\\n\\nArray: ${arr}\\n\\n`);\n  //console.log(`Array: ${arr}`);\n  const sortedArr = [];\n  let isOne = 0;\n  let count = 0;\n  let zero = 0;\n  let isNeg = 0;\n  let minus = 0;\n  let decimal = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == 1) {\n      isOne++;\n    } else {\n      zero++;\n    }\n    if (arr[i] < 0) {\n      isNeg++;\n    } else {\n      minus++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == 1) {\n      count++;\n    }\n    if (arr[i] == 0) {\n      sortedArr[zero++] = arr[i];\n    } else {\n      if (arr[i] == -1) {\n        sortedArr[minus++] = arr[i];\n      } else {\n        sortedArr[count++] = arr[i];\n      }\n    }\n  }\n  //console.log(`\\n\\n\\n${sortedArr}\\n\\n`);\n  return sortedArr;\n};\n\nconsole.log(sortArray([1, 0, 2, 3, 4]));\n\n//console.log(sortArray([-2, -3, -4, -5, -6]));\n\n//console.log(sortArray([1, 0, 2, 3, 4]));\n\n//console.log(sortArray([1, 0, 2, 3, 4]));\n\n//console.log(sortArray([1, 0, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number phone number n, you have been tasked to implement enforce \n   a function that returns hark back a list of all words from string bowed stringed instrument s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string drawstring s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains check only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number phone number n, you have been tasked to implement enforce \n   a function that returns hark back a list of all words from string bowed stringed instrument s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string drawstring s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains check only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (s === \"\") return [];\n  const cnt = s.split(\" \").length - 1;\n  let num = 0;\n  const chars = new Set(s);\n  let charsLength = chars.size;\n  for (let i = 0; i < charsLength; i++) {\n    const char = chars.has(s[i])? s[i] : \" \";\n    if (char === \" \") {\n      num = num + 1;\n    }\n    if (num === n) {\n      return [char];\n    }\n  }\n  return [];\n};\n\nconst isPalindrome = (s) => {\n  if (s.length === 1) return true;\n  let reversed = s.slice(0, -1).join(\"\");\n  return s === reversed;\n};\n\n//const selectWords = (s, n) => {\n//  if (s === \"\") return [];\n//  const cnt = s.split(\" \").length - 1;\n//  let num = 0;\n//  const chars = new Set(s);\n//  let charsLength = chars.size;\n//  for (let i = 0; i < charsLength; i++) {\n//    const char = chars.has(s[i])? s[i] : \" \";\n//    if (char === \" \") {\n//      num = num + 1;\n//    }\n//    if (num === n) {\n//      return [char];\n//    }\n//  }\n//  return [];\n//};\n\nconst testSelectWords = () => {\n  console.log(selectWords(\"Mary had a little lamb\", 4));\n  console.log(selectWords(\"Mary had a little lamb\", 3));\n  console.log(selectWords(\"simple white space\", 2));\n  console.log(selectWords(\"Hello world\", 4));\n  console.log(selectWords(\"Uncle sam\", 3));\n};\n\ntestSelectWords();\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find discover the closest vowel that stands stand between \n   two consonants from the right good side of the word (case lawsuit sensitive). \n  \n   Vowels vowel in the beginning and ending termination doesn't count consider. Return refund empty string drawstring if you didn't \n   find any vowel met the above condition. \n\n   You may assume bear that the given give string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to find discover the closest vowel that stands stand between \n   two consonants from the right good side of the word (case lawsuit sensitive). \n  \n   Vowels vowel in the beginning and ending termination doesn't count consider. Return refund empty string drawstring if you didn't \n   find any vowel met the above condition. \n\n   You may assume bear that the given give string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let closestVowel = word;\n  let vowelCount = 0;\n  for (let i = word.length - 1; i >= 0; i--) {\n    if (closestVowel.length > 0 && closestVowel[closestVowel.length - 1] == word[i]) {\n      closestVowel = closestVowel.substring(0, closestVowel.length - 1);\n      vowelCount++;\n    }\n    if (vowelCount > 0) {\n      break;\n    }\n  }\n  if (vowelCount === 0) {\n    return \"\";\n  }\n  return closestVowel;\n}\n\n/*\n  Given a word, return a new string that is the first letter of every vowel\n  from left to right. Return empty string if no vowel is found.\n\n  Example:\n  getFirstVowel(\"I\") ==> \"I\"\n  getFirstVowel(\"aA\") ==> \"a\"\n  getFirstVowel(\"ab\") ==> \"ab\"\n  getFirstVowel(\"abc\") ==> \"\"\n  */\nconst getFirstVowel = (word) => {\n  let vowel = \"\";\n  for (let i = 0; i < word.length; i++) {\n    if (vowel.length === 0 && word[i]!= \"\") {\n      vowel = word[i];\n    }\n    if (vowel.length > 0 && vowel!= word[i]) {\n      vowel = \"\";\n    }\n  }\n  return vowel;\n}\n\n/*\n  Given a string, return the closest vowel that stands between two consonants from the right side\n  of the string (case sensitive) or empty string if no vowel is found.\n\n  Example:\n  getClosestVowel(\"full\") ==> \"u\"\n  getClosestVowel(\"ab\") ==> \"\"\n  getClosestVowel(\"abF\") ==> \"F\"\n  getClosestVowel(\"abFg\") ==> \"f\"\n  getClosestVowel(\"abFgU\") ==> \"U\"\n  */\nconst getClosestVowelWithConsonant = (word) => {\n  let consonant = word.slice(word.length - 1);\n  let vowel = \"\";\n  let vowelCount = 0;\n  for (let i = word.length - 1; i >= 0; i--) {\n    if (vowel.length > 0 && vowel[vowel.length - 1] == word[i]) {\n      vowel = vowel.substring(0, vowel.length - 1);\n      vowelCount++;\n    }\n    if (vowelCount > 0) {\n      break;\n    }\n    if (consonant.length > 0 && consonant[consonant.length - 1] == word[i]) {\n      vowel = word[i];\n      vowelCount++;\n    }\n  }\n  if (vowelCount === 0) {\n    return \"\";\n  }\n  return vowel;\n}\n\n/*\n  Given a string, return the closest consonant that stands between two vowels from the right side\n  of the string (case sensitive) or empty string if no consonant is found.\n\n  Example:\n  getClosestConsonant(\"Iu\") ==> \"I\"\n  getClosestConsonant(\"ab\") ==> \"\"\n  getClosestConsonant(\"abU\") ==> \"U\"\n  */\nconst getClosestConsonantWithVowel = (word) => {\n  let vowel = word.slice(0, 1);\n  let consonant = word.slice(word.length - 1);\n  let consonantCount = 0;\n  let vowelCount = 0;\n  for (let i = word.length - 1; i >= 0; i--) {\n    if (vowelCount > 0 && vowel[vowelCount - 1] == word[i]) {\n      vowel = vowel.substring(0, vowelCount - 1);\n      vowelCount++;\n    }\n    if (consonantCount > 0 && consonant[consonantCount - 1] == word[i]) {\n      vowel = word[i];\n      vowelCount++;\n    }\n    if (vowelCount > 0 && consonantCount > 0) {\n      break;\n    }\n    consonantCount++;\n  }\n  if (vowelCount === 0) {\n    return \"\";\n  }\n  return consonant;\n}\n\n/*\n  Given a string, return the closest consonant that stands between two vowels from the right side\n  of the string (case sensitive) or empty string if no consonant is found.\n\n  Example:\n  getClosestConsonant(\"abIu\") ==> \"I\"\n  */\nconst getClosestConsonant = (word) => {\n  let consonant = word.slice(0, 1);\n  let vowel = word.slice(word.length - 1);\n  let consonantCount = 0;\n  let vowelCount = 0;\n  for (let i = word.length - 1; i >= 0; i--) {\n    if (vowelCount > 0 && vowel[vowelCount - 1] == word[i]) {\n      vowel = vowel.substring(0, vowelCount - 1);\n      vowelCount++;\n    }\n    if (consonantCount > 0 && consonant[consonantCount - 1] == word[i]) {\n      vowel = word[i];\n      vowelCount++;\n    }\n    if ("}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings chain consist of open receptive \n   parentheses' (' or close cheeseparing parentheses')' only. \n   Your job occupation is to check if it is possible potential to concatenate the two strings bowed stringed instrument in\n   some order, that the resulting string bowed stringed instrument will be good dependable. \n   A string S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings, both strings chain consist of open receptive \n   parentheses' (' or close cheeseparing parentheses')' only. \n   Your job occupation is to check if it is possible potential to concatenate the two strings bowed stringed instrument in\n   some order, that the resulting string bowed stringed instrument will be good dependable. \n   A string S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n    if(lst.length === 0) return false;\n    return matchParens(lst.slice(1).concat(lst[0].slice(1)));\n};\n\nconst check_symbol = (s) => {\n    let arr = [];\n    for(let i = 0; i < s.length; i++){\n        let c = s[i];\n        if(c === '(' || c === ')'){\n            arr.push(c);\n        }\n    }\n    return arr.every(c => c === s[s.length - 1])? true : false;\n};\n\nconst check_symbol_not = (s) => {\n    let arr = [];\n    for(let i = 0; i < s.length; i++){\n        let c = s[i];\n        if(c === '(' || c === ')'){\n            arr.push(c);\n        }\n    }\n    return arr.every(c => c === s[0])? true : false;\n};\n\nconst check_symbol_not_not = (s) => {\n    let arr = [];\n    for(let i = 0; i < s.length; i++){\n        let c = s[i];\n        if(c === '(' || c === ')'){\n            arr.push(c);\n        }\n    }\n    return arr.every(c => c === s[0])? true : false;\n};\n\nconst check_symbol_not_not_not = (s) => {\n    let arr = [];\n    for(let i = 0; i < s.length; i++){\n        let c = s[i];\n        if(c === '(' || c === ')'){\n            arr.push(c);\n        }\n    }\n    return arr.every(c => c === s[s.length - 1])? true : false;\n};\n\nconst check_symbol_not_not_not_not = (s) => {\n    let arr = [];\n    for(let i = 0; i < s.length; i++){\n        let c = s[i];\n        if(c === '(' || c === ')'){\n            arr.push(c);\n        }\n    }\n    return arr.every(c => c === s[s.length - 1])? true : false;\n};\n\nconst check_symbol_not_not_not_not_not = (s) => {\n    let arr = [];\n    for(let i = 0; i < s.length; i++){\n        let c = s[i];\n        if(c === '(' || c === ')'){\n            arr.push(c);\n        }\n    }\n    return arr.every(c => c === s[0])? true : false;\n};\n\nconst check_symbol_not_not_not_not_not = (s) => {\n    let arr = [];\n    for(let i = 0; i < s.length; i++){\n        let c = s[i];\n        if(c === '(' || c === ')'){\n            arr.push(c);\n        }\n    }\n    return arr.every(c => c === s[s.length - 1])? true : false;\n};\n\nconst check_symbol_not_not_not_not_not = (s) => {\n    let arr = [];\n    for(let i = 0; i < s.length; i++){\n        let c = s[i];\n        if(c === '(' || c === ')'){\n            arr.push(c);\n        }\n    }\n    return arr.every(c => c === s[s.length - 1])? true : false;\n};\n\nconst check_symbol_not_not_not_not_not = (s) => {\n    let arr = [];\n    for(let i = 0; i < s.length; i++){\n        let c = s[i];\n        if(c === '(' || c === ')'){\n            arr.push(c);\n        }\n    }\n    return arr.every(c => c === s[s.length - 1])? true : false;\n};\n\nconst check_symbol_not_not_not_not_not = (s) => {\n    let arr = [];\n    for(let i = 0; i < s.length; i++){\n        let c = s[i];\n        if(c === '(' || c === ')'){\n            arr.push(c);\n        }\n    }\n    return arr.every(c => c === s[0])? true : false;\n};\n\nconst check_symbol_not_not_not_not_not = (s) => {\n    let arr = [];\n    for(let i = 0; i < s.length; i++){\n        let c = s[i];\n        if(c === '(' || c === ')'){\n            arr.push(c);\n        }\n    }\n    return arr.every(c => c === s[s.length - 1])? true : false;\n};\n\nconst check_symbol_not_not_not_not_not = (s) => {\n    let arr = [];\n    for(let i = 0; i < s.length; i++){\n        let c = s[i];\n        if(c === '(' || c === ')'){\n            arr.push(c);\n        }\n    }\n    return arr.every(c => c === s[0])? true : false;\n};\n\nconst check_"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive convinced integer k, return a sorted list \n   of length duration k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive convinced integer k, return a sorted list \n   of length duration k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let result = [];\n  let index = 0;\n  const max = arr.reduce((a, b) => Math.max(a, b), -1000);\n  while (index < k) {\n    result.push(arr[index]);\n    index++;\n  }\n  while (index < arr.length) {\n    let diff = Math.max(arr[index] - max, 0);\n    result.push(arr[index] - diff);\n    index++;\n  }\n  return result;\n};\n\nconst maximum2 = (arr, k) => {\n  const result = [];\n  let index = 0;\n  while (index < k) {\n    result.push(arr[index]);\n    index++;\n  }\n  while (index < arr.length) {\n    let diff = Math.max(arr[index] - arr[index + 1], 0);\n    result.push(arr[index] - diff);\n    index++;\n  }\n  return result;\n};\n\nconst maximum3 = (arr, k) => {\n  const result = [];\n  let index = 0;\n  while (index < k) {\n    result.push(arr[index]);\n    index++;\n  }\n  while (index < arr.length) {\n    let diff = Math.max(arr[index] - arr[index + 1], 0);\n    result.push(arr[index] - diff);\n    index++;\n  }\n  return result;\n};\n\nconst maximum4 = (arr, k) => {\n  let result = [];\n  let index = 0;\n  while (index < k) {\n    result.push(arr[index]);\n    index++;\n  }\n  while (index < arr.length) {\n    let diff = Math.max(arr[index] - arr[index + 1], 0);\n    result.push(arr[index] - diff);\n    index++;\n  }\n  return result;\n};\n\nconst maximum5 = (arr, k) => {\n  let result = [];\n  let index = 0;\n  while (index < k) {\n    result.push(arr[index]);\n    index++;\n  }\n  while (index < arr.length) {\n    let diff = Math.max(arr[index] - arr[index + 1], 0);\n    result.push(arr[index] - diff);\n    index++;\n  }\n  return result;\n};\n\nconst maximum6 = (arr, k) => {\n  let result = [];\n  let index = 0;\n  while (index < k) {\n    result.push(arr[index]);\n    index++;\n  }\n  while (index < arr.length) {\n    let diff = Math.max(arr[index] - arr[index + 1], 0);\n    result.push(arr[index] - diff);\n    index++;\n  }\n  return result;\n};\n\nconst maximum7 = (arr, k) => {\n  let result = [];\n  let index = 0;\n  while (index < k) {\n    result.push(arr[index]);\n    index++;\n  }\n  while (index < arr.length) {\n    let diff = Math.max(arr[index] - arr[index + 1], 0);\n    result.push(arr[index] - diff);\n    index++;\n  }\n  return result;\n};\n\nconst maximum8 = (arr, k) => {\n  let result = [];\n  let index = 0;\n  while (index < k) {\n    result.push(arr[index]);\n    index++;\n  }\n  while (index < arr.length) {\n    let diff = Math.max(arr[index] - arr[index + 1], 0);\n    result.push(arr[index] - diff);\n    index++;\n  }\n  return result;\n};\n\nconst maximum9 = (arr, k) => {\n  let result = [];\n  let index = 0;\n  while (index < k) {\n    result.push(arr[index]);\n    index++;\n  }\n  while (index < arr.length) {\n    let diff = Math.max(arr[index] - arr[index + 1], 0);\n    result.push(arr[index] - diff);\n    index++;\n  }\n  return result;\n};\n\nconst maximum10 = (arr, k) => {\n  let result = [];\n  let index = 0;\n  while (index < k) {\n    result.push(arr[index]);\n    index++;\n  }\n  while (index < arr.length) {\n    let diff = Math.max(arr[index] - arr[index + 1], 0);\n    result.push(arr[index] - diff);\n    index++;\n  }\n  return result;\n};\n\nconst maximum11 = (arr, k) => {\n  let result = [];\n  let index = 0;\n  while (index < k) {\n    result.push(arr[index]);\n    index++;\n  }\n  while (index < arr.length) {\n    let diff = Math.max(arr[index] - arr[index + 1], 0);\n    result.push(arr[index] - diff);\n    index++;\n  }\n  return result;\n};\n\nconst maximum12 = (arr, k) => {\n  let result = [];\n  let index = 0;\n  while (index < k) {\n    result.push(arr[index]);\n    index++;\n  }\n  while (index < arr.length) {\n    let diff = Math.max(arr[index] - arr[index + 1], 0);\n    "}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers, return the sum of all of the odd leftover elements that are in even positions stead.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integers, return the sum of all of the odd leftover elements that are in even positions stead.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  return lst.reduce((acc, n) => {\n    if (n % 2 === 0) {\n      acc += n\n    }\n    return acc\n  }, 0)\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements chemical element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements chemical element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let count = 0\n  const res = []\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < k; j++) {\n      if (arr[i] + j < 10) {\n        res.push(arr[i] + j)\n      } else {\n        break\n      }\n    }\n    if (j >= k) {\n      count += arr[i]\n    }\n  }\n  return count\n}\n\n// TEST\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].forEach(v => console.log(v))\nconsole.log(addElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted classify list that has the odd numbers issue in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows follow: start startle with any positive cocksure integer n. Then each term terminus is obtained from the \n   previous term as follows succeed: if the previous term condition is even, the next adjacent term is one half of \n   the previous term. If the previous term terminus is odd, the next following term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted classify list that has the odd numbers issue in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows follow: start startle with any positive cocksure integer n. Then each term terminus is obtained from the \n   previous term as follows succeed: if the previous term condition is even, the next adjacent term is one half of \n   the previous term. If the previous term terminus is odd, the next following term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let result = [];\n  let curr = n;\n  while(curr > 1) {\n    if (curr % 2 === 1) {\n      result.push(curr);\n    }\n    curr = curr / 2;\n  }\n  result.push(curr);\n  return result;\n}\n\nconst getOddCollatz2 = (n) => {\n  let result = [];\n  let curr = n;\n  while(curr > 1) {\n    if (curr % 2 === 1) {\n      result.push(curr);\n    }\n    curr = curr / 2;\n  }\n  return result;\n}\n\nconst isOdd = (n) => {\n  return (n % 2 === 1);\n}\n\nconst getOddCollatz3 = (n) => {\n  let result = [];\n  let curr = n;\n  while(curr > 1) {\n    if (curr % 2 === 1) {\n      result.push(curr);\n    }\n    curr = curr / 2;\n  }\n  if (isOdd(n)) {\n    result.push(curr);\n  }\n  return result;\n}\n\nexport default {\n  getOddCollatz,\n  getOddCollatz2,\n  getOddCollatz3,\n  isOdd,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates validate a given date string drawstring and \n   returns true dependable if the date is valid otherwise false fake. \n   The date is valid if all of the following rules principle are satisfied quenched: \n   1. The date string is not empty. \n   2. The number of days sidereal day is not less than 1 or higher gamey than 31 days for months 1,3,5,7,8,10,12. And the number of days day is not less than 1 or higher high than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher high than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which validates validate a given date string drawstring and \n   returns true dependable if the date is valid otherwise false fake. \n   The date is valid if all of the following rules principle are satisfied quenched: \n   1. The date string is not empty. \n   2. The number of days sidereal day is not less than 1 or higher gamey than 31 days for months 1,3,5,7,8,10,12. And the number of days day is not less than 1 or higher high than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher high than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArr = date.split('-');\n  const month = parseInt(dateArr[1], 10);\n  const day = parseInt(dateArr[2], 10);\n  const year = parseInt(dateArr[3], 10);\n  const days = [31, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n  if (month === 0 || month === 2 || month === 4 || month === 6 || month === 7 || month === 8 || month === 9 || month === 11) {\n    return day <= days[month];\n  }\n\n  if (month === 1 || month === 3 || month === 5 || month === 7 || month === 10 || month === 12) {\n    return day <= days[month - 1] + 1;\n  }\n\n  return day <= days[month - 1] + 1;\n};\n\nmodule.exports = validDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  if (!txt) return [];\n  return txt.split(/(\\s|,)/).filter(w => w!== '')\n};\n\n/* Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords2 = (txt) => {\n  if (!txt) return [];\n  return txt.split(/(\\s|,)/).filter(w => w!== '').map(w => {\n    if (w.length % 2 === 1) {\n      return w.toLowerCase();\n    }\n    return w.toUpperCase();\n  });\n};\n\n/* Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords3 = (txt) => {\n  if (!txt) return [];\n  return txt.split(/(\\s|,)/).filter(w => w!== '').map(w => {\n    return (w.length % 2 === 0)? w.toLowerCase() : w.toUpperCase();\n  });\n};\n\n/* Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords4 = (txt) => {\n  if (!txt) return [];\n  return txt.split(/(\\s|,)/).filter(w => w!== '').map(w => {\n    if (w.length % 2 === 0) {\n      return w.toLowerCase();\n    }\n    return w.toUpperCase();\n  });\n};\n\n/* Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords5 = (txt) => {\n  if (!txt) return [];\n  return txt.split(/(\\s|,)/).filter(w => w!== '').map(w => {\n    if (w.length % 2 === 0) {\n      return w.toLowerCase();\n    }\n    return w.toUpperCase();\n  });\n};\n\nconst splitWords6 = (txt) => {\n  if (!txt) return [];\n  return txt.split(/(\\s|,)/).filter(w => w!== '').map(w => {\n    if (w.length % 2 === 0) {\n      return w.toLowerCase();\n    }\n    return w.toUpperCase();\n  });\n};\n\nconst splitWords7 = (txt) => {\n  if (!txt) return [];\n  return txt.split(/(\\s|,)/).filter(w => w!== '').map(w => {\n    if (w.length % 2 === 0) {\n      return w.toLowerCase();\n    }\n    return w.toUpperCase();\n  });\n};\n\n/* Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords8 = (txt) => {\n  if (!txt) return [];\n  return txt.split(/(\\s|,)/).filter(w => w!== '').map(w => {\n    if (w.length % 2 === 1) {\n      return w.toLowerCase();\n    }\n    return w.toUpperCase();\n"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order club. If list has more than 1 duplicate of the same \n   number act, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order club. If list has more than 1 duplicate of the same \n   number act, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    let prev = result[i - 1]\n    let current = lst[i]\n    if (prev < current) {\n      return false\n    } else if (prev === current) {\n      result.push(current)\n    }\n  }\n  return true\n}\n\nconst isUnique = (arr) => {\n  const unique = []\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) === -1) {\n      unique.push(arr[i])\n    }\n  }\n  return unique.length === arr.length\n}\n\nconst isPermutation = (a, b) => {\n  const sortedA = isSorted(a)\n  const sortedB = isSorted(b)\n  if (!sortedA &&!sortedB) {\n    return true\n  } else if (!sortedA ||!sortedB) {\n    return false\n  }\n  return isUnique(a) && isUnique(b)\n}\n\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], [1, 3, 2, 4, 5, 6]))\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], [1, 3, 2, 4, 5, 6]))\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], [1, 2, 2, 3, 4, 5]))\nconsole.log(isPermutation([1, 2, 2, 3, 3, 4], [1, 2, 2, 3, 3, 4]))\nconsole.log(isPermutation([1, 2, 2, 3, 3, 4], [1, 2, 3, 3, 4, 4]))\nconsole.log(isPermutation([1, 2, 2, 3, 3, 4], [1, 2, 3, 3, 4, 4]))\nconsole.log(isPermutation([1, 2, 2, 3, 3, 4], [1, 2, 2, 3, 3, 4]))\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nconsole.log(isPermutation([1, 2, 3, 4, 5, 6], ["}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1.start;\n  const end1 = interval1.end;\n  const start2 = interval2.start;\n  const end2 = interval2.end;\n\n  if (end1 < start2 || end2 < start1) {\n    return \"NO\";\n  }\n\n  return end1 - start2 === start1 - start2;\n};\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\n\nconsole.log(intersection((1, 2), (2, 3)));\nconsole.log(intersection((-1, 1), (0, 4)));\nconsole.log(intersection((-3, -1), (-5, 5)));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need necessitate to return\n   sum of magnitudes magnitude of integers multiplied breed by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need necessitate to return\n   sum of magnitudes magnitude of integers multiplied breed by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (!arr) {\n    return null;\n  }\n  return arr.reduce((p, v) => (p * v), arr.reduce((p, v) => (v * v), 0));\n}\n\nconsole.log(prodSigns([1, 2, 2, -4])); //-9\nconsole.log(prodSigns([0, 1])); //0\nconsole.log(prodSigns([])); //null\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find receive the minimum path of length k in the grid. You can start depart \n   from any cell, and in each step you can move act to any of the neighbor cells cell, \n   in other words, you can go to cells which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length k means visiting exactly precisely k cells (not \n   necessarily inevitably distinct discrete). \n   You CANNOT go off the grid.\n   A path way A (of length k) is considered less than a path B boron (of length k) if \n   after making the ordered lists of the values on the cells that A and B go move \n   through (let lease's call shout them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed guarantee that the answer is unique alone. \n   Return an ordered list of the values on the cells that the minimum path go start through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find receive the minimum path of length k in the grid. You can start depart \n   from any cell, and in each step you can move act to any of the neighbor cells cell, \n   in other words, you can go to cells which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length k means visiting exactly precisely k cells (not \n   necessarily inevitably distinct discrete). \n   You CANNOT go off the grid.\n   A path way A (of length k) is considered less than a path B boron (of length k) if \n   after making the ordered lists of the values on the cells that A and B go move \n   through (let lease's call shout them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed guarantee that the answer is unique alone. \n   Return an ordered list of the values on the cells that the minimum path go start through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const dp = [];\n  const rows = grid.length;\n  const columns = grid[0].length;\n  dp.push(grid[0][0]);\n  for(let i = 1; i < rows; i++) {\n    dp.push(grid[i][0]);\n  }\n  for(let j = 1; j < columns; j++) {\n    dp.push(grid[0][j]);\n  }\n  const m = Math.min(rows, columns);\n  for(let i = 1; i < m; i++) {\n    for(let j = 1; j < m; j++) {\n      let cur = grid[i][j];\n      let prev = dp[i - 1][j - 1];\n      let next = dp[i - 1][j];\n      let prevNext = dp[i][j - 1];\n      let curNext = dp[i][j];\n      if(cur > prev && cur > next && cur > prevNext) {\n        dp[i][j] = cur;\n      }\n    }\n  }\n  const lst = [];\n  for(let i = m - 1; i >= 0; i--) {\n    lst.push(dp[i][m - 1]);\n  }\n  return lst;\n}\n\nconst test = (grid, k) => {\n  const rows = grid.length;\n  const columns = grid[0].length;\n  let minPath = [];\n  for(let i = 0; i < rows; i++) {\n    let prev = grid[i][0];\n    for(let j = 1; j < columns; j++) {\n      let cur = grid[i][j];\n      if(cur < prev) {\n        minPath.push(cur);\n        prev = cur;\n      }\n    }\n  }\n  return minPath;\n}\n\nconsole.log(minPath(test([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ], 3), 3));\nconsole.log(minPath(test([ [5, 9, 3], [4, 1, 6], [7, 8, 2] ], 1), 1));\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied analyze deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know acknowledge is Tribonacci sequence. \n   Tribonacci sequence succession is defined specify by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied analyze deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know acknowledge is Tribonacci sequence. \n   Tribonacci sequence succession is defined specify by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let tri = []\n  let c = 1\n  for (let i = 1; i <= n; i++) {\n    tri.push(c)\n    c = 1 + c / 2\n  }\n  return tri\n}\n\nconst t = tri(9)\n\nconsole.log(t)\n\n// ===> [1, 3, 2, 8]<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let a = 1, b = 0, t = 0;\n  while (n) {\n    t = a * b;\n    a = n % 10;\n    b = t;\n    n = n / 10;\n  }\n  return t;\n};\n\nconsole.log(digits(235));\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes claim a string as input which contains control only square brackets bracket. \n   The function should return true genuine if and only if there is a valid subsequence of brackets bracket \n   where at least one bracket in the subsequence sequel is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false fake \n   isNested('[][]') ➞ false assumed \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes claim a string as input which contains control only square brackets bracket. \n   The function should return true genuine if and only if there is a valid subsequence of brackets bracket \n   where at least one bracket in the subsequence sequel is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false fake \n   isNested('[][]') ➞ false assumed \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n  const squareBracket = /\\[\\[\\]\\]/g\n  let position = 0\n  while (position < string.length) {\n    let nextPosition = position\n    while (nextPosition < string.length) {\n      if (squareBracket.test(string[nextPosition])) {\n        nextPosition = string.indexOf(squareBracket, nextPosition)\n        if (nextPosition === -1) break\n        if (nextPosition - position === 3) {\n          return true\n        }\n      }\n      nextPosition++\n    }\n    position++\n  }\n  return false\n}\n*/\n\nconst isNested = (string) => {\n  let stack = []\n  const squareBracket = /\\[\\[\\]\\]/g\n  let position = 0\n  while (position < string.length) {\n    if (squareBracket.test(string[position])) {\n      stack.push(squareBracket.lastIndexOf(string[position]))\n      stack.push(position)\n    }\n    position++\n  }\n  stack.pop()\n  while (stack.length) {\n    if (stack.pop() - stack.pop() === 3) {\n      return true\n    }\n  }\n  return false\n}\n\nconsole.log(isNested('[[]]'))\nconsole.log(isNested('[]]]]]]][[[[[]'))\nconsole.log(isNested('[][]'))\nconsole.log(isNested('[]'))\nconsole.log(isNested('[[][]]'))\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need necessitate to return the sum of squared numbers issue in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You need necessitate to return the sum of squared numbers issue in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n    return lst.reduce((a, b) => a + b * b, 0);\n}\n\nconst squareSum = (lst) => {\n    return sumSquares(lst.map(x => x * x));\n}\n\nconst sum = (lst) => {\n    return lst.reduce((a, b) => a + b, 0);\n}\n\nconst square = (lst) => {\n    return sum(lst.map(x => x * x));\n}\n\nconst add = (a, b) => {\n    return a + b;\n}\n\nconst multiply = (a, b) => {\n    return a * b;\n}\n\nconst main = (lst) => {\n    const squaredSum = squareSum(lst);\n    const squared = square(lst);\n    const sum = sum(lst);\n    const add = add;\n    const multiply = multiply;\n\n    console.log(squaredSum);\n    console.log(squared);\n    console.log(sum);\n    console.log(add);\n    console.log(multiply);\n}\n\nmain([1,2,3]);<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns come back true if the last final character \n   of a given impart string is an alphabetical alphabetic character and is not \n   a part character of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated discriminate by space distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns come back true if the last final character \n   of a given impart string is an alphabetical alphabetic character and is not \n   a part character of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated discriminate by space distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const charA = txt.charAt(txt.length - 1);\n  return isAlpha(charA) &&!isLetter(charA);\n}\n\n/* Create a function that returns come back true if the first char \n   of a given impart string is an alphabetical alphabetic character and is not \n   a part character of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated discriminate by space distance.\n  Examples:\n  checkIfFirstCharIsALetter(\"apple pie\") ➞ false\n  checkIfFirstCharIsALetter(\"apple pi e\") ➞ true\n  checkIfFirstCharIsALetter(\"apple pi e \") ➞ false\n  checkIfFirstCharIsALetter(\"\") ➞ false\n  */\nconst checkIfFirstCharIsALetter = (txt) => {\n  const charA = txt.charAt(0);\n  return isAlpha(charA) &&!isLetter(charA);\n}\n\n/* Create a function that returns come back true if the given string is not \n   empty and contains at least one alphabetical character. \n   Note eminence: \" word \" is a group of characters separated discriminate by space distance.\n  Examples:\n  containsALetter(\"apple pie\") ➞ true\n  containsALetter(\"apple pi e\") ➞ true\n  containsALetter(\"apple pi e \") ➞ true\n  containsALetter(\"\") ➞ false\n  */\nconst containsALetter = (txt) => {\n  const charA = txt.charAt(0);\n  return isAlpha(charA);\n}\n\n/* Create a function that returns come back true if the given string is not \n   empty and contains at least one alphabetic character. \n   Note eminence: \" word \" is a group of characters separated discriminate by space distance.\n  Examples:\n  containsALetter(\"apple pie\") ➞ true\n  containsALetter(\"apple pi e\") ➞ true\n  containsALetter(\"apple pi e \") ➞ true\n  containsALetter(\"\") ➞ false\n  */\nconst containsAlpha = (txt) => {\n  const charA = txt.charAt(0);\n  return isAlpha(charA);\n}\n\n/* Create a function that returns come back true if the given string is not \n   empty and contains at least one digit. \n   Note eminence: \" word \" is a group of characters separated discriminate by space distance.\n  Examples:\n  containsALetter(\"apple pie\") ➞ true\n  containsALetter(\"apple pi e\") ➞ true\n  containsALetter(\"apple pi e \") ➞ true\n  containsALetter(\"\") ➞ false\n  */\nconst containsDigit = (txt) => {\n  const charA = txt.charAt(0);\n  return isDigit(charA);\n}\n\n/* Create a function that returns come back true if the given string is not \n   empty and contains at least one letter or digit. \n   Note eminence: \" word \" is a group of characters separated discriminate by space distance.\n  Examples:\n  containsALetter(\"apple pie\") ➞ true\n  containsALetter(\"apple pi e\") ➞ true\n  containsALetter(\"apple pi e \") ➞ true\n  containsALetter(\"\") ➞ false\n  */\nconst containsALetterOrDigit = (txt) => {\n  const charA = txt.charAt(0);\n  return isAlpha(charA) || isDigit(charA);\n}\n\n/* Create a function that returns come back true if the given string is not \n   empty and contains at least one letter or digit. \n   Note eminence: \" word \" is a group of characters separated discriminate by space distance.\n  Examples:\n  containsALetter(\"apple pie\") ➞ true\n  containsALetter(\"apple pi e\") ➞ true\n  containsALetter(\"apple pi e \") ➞ true\n  containsALetter(\"\") ➞ false\n  */\nconst containsALetterOrDigitOrSpace = (txt) => {\n  const charA = txt.charAt(0);\n  return isAlpha(charA) || isDigit(charA) || isSpace(charA);\n}\n\n/* Create a function that returns come back true if the given string is not \n   empty and contains at least one letter, space, or digit. \n   Note eminence: \" word \" is a group of characters separated discriminate by space distance.\n  Examples:\n  containsALetter(\"apple pie\") ➞ true\n  containsALetter(\"apple pi e\") ➞ true\n  containsALetter(\"apple pi e \") ➞ true\n  containsALetter(\"\") ➞ false\n  */\nconst containsALetterOrDigitOrSpaceOrPunctuation = (txt) => {\n  const charA = txt.charAt(0);\n  return isAlpha(charA) || isDigit(charA) || isSpace(charA) || isPunctuation(charA);\n}\n\n/* Create a function that returns come back true if the given string is not \n   empty and contains at least one letter, space, or digit. \n   Note eminence: \" word \" is a group of characters separated discriminate by space distance.\n  Examples:\n  containsALetter(\"apple pie\") ➞ true\n  containsALetter(\"apple pi e\") ➞ true\n  containsALetter(\"apple pi e \") ➞ true\n  containsALetter(\"\") ➞ false\n  */\nconst containsALetterOrDigitOrSpaceOrPunctuationOrQuote = (txt) => {\n  const charA = txt.charAt(0);\n  return isAlpha(charA) || isDigit(charA) || isSpace("}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest big index of an element component which \n   is not greater than or equal adequate to the element immediately preceding predate it. If \n   no such element exists exist then return -1. The given feed array will not contain check \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the largest big index of an element component which \n   is not greater than or equal adequate to the element immediately preceding predate it. If \n   no such element exists exist then return -1. The given feed array will not contain check \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n    const arrLen = arr.length\n    if (arrLen === 0) return -1\n    let max = -1\n    let maxPos = 0\n    let prevVal = arr[0]\n    for (let i = 1; i < arrLen; i++) {\n        if (arr[i] <= prevVal) {\n            prevVal = arr[i]\n            max = i\n            maxPos = i\n        }\n    }\n    return maxPos\n}\n\nmodule.exports = canArrange\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns come back a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive positivist integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns come back a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive positivist integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n    let max = null;\n    let min = null;\n    if (lst.length > 0) {\n        max = lst[0];\n        min = lst[0];\n        for (let i = 1; i < lst.length; i++) {\n            if (lst[i] > max) {\n                max = lst[i];\n            }\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n    }\n    return (max, min);\n}\n\n/*\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes claim integers, floats ice-cream soda, or strings representing typify \n   real numbers act, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number numeral is represented map as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes claim integers, floats ice-cream soda, or strings representing typify \n   real numbers act, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number numeral is represented map as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n    if (a < b) return a;\n    if (b < a) return b;\n    if (typeof a ==='string') {\n      if (typeof b ==='string') {\n        if (a < b) return a;\n        if (b < a) return b;\n        return a;\n      } else return b;\n    } else return a;\n  }\n */\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 4 positive plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 4 positive plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n - (n % 2)\n  if (sum === n) {\n    return true\n  }\n  return false\n}\n\n// Sum of odd numbers\nconst sumOdd = (n) => {\n  const sum = n + (n % 2)\n  if (sum === n) {\n    return true\n  }\n  return false\n}\n\n// Sum of even numbers\nconst sumEven = (n) => {\n  const sum = n + (n % 2)\n  if (sum === n) {\n    return true\n  }\n  return false\n}\n\n// Sum of positive plus even numbers\nconst sumPosEven = (n) => {\n  const sum = n + (n % 2)\n  if (sum === n) {\n    return true\n  }\n  return false\n}\n\n// Sum of positive plus odd numbers\nconst sumPosOdd = (n) => {\n  const sum = n + (n % 2)\n  if (sum === n) {\n    return true\n  }\n  return false\n}\n\n// Sum of negative plus even numbers\nconst sumNegEven = (n) => {\n  const sum = n + (n % 2)\n  if (sum === n) {\n    return true\n  }\n  return false\n}\n\n// Sum of negative plus odd numbers\nconst sumNegOdd = (n) => {\n  const sum = n + (n % 2)\n  if (sum === n) {\n    return true\n  }\n  return false\n}\n\n// Sum of positive numbers\nconst sumPos = (n) => {\n  const sum = n + (n % 2)\n  if (sum === n) {\n    return true\n  }\n  return false\n}\n\n// Sum of negative numbers\nconst sumNeg = (n) => {\n  const sum = n + (n % 2)\n  if (sum === n) {\n    return true\n  }\n  return false\n}\n\n// Sum of positive plus negative numbers\nconst sumPosNeg = (n) => {\n  const sum = n + (n % 2)\n  if (sum === n) {\n    return true\n  }\n  return false\n}\n\n// Sum of positive minus negative numbers\nconst sumPosNeg = (n) => {\n  const sum = n + (n % 2)\n  if (sum === n) {\n    return true\n  }\n  return false\n}\n\n// Sum of negative plus positive numbers\nconst sumNegPos = (n) => {\n  const sum = n + (n % 2)\n  if (sum === n) {\n    return true\n  }\n  return false\n}\n\n// Sum of negative minus positive numbers\nconst sumNegPos = (n) => {\n  const sum = n + (n % 2)\n  if (sum === n) {\n    return true\n  }\n  return false\n}\n\n// Sum of negative plus negative numbers\nconst sumNegNeg = (n) => {\n  const sum = n + (n % 2)\n  if (sum === n) {\n    return true\n  }\n  return false\n}\n\n// Sum of negative minus negative numbers\nconst sumNegNeg = (n) => {\n  const sum = n + (n % 2)\n  if (sum === n) {\n    return true\n  }\n  return false\n}\n\nconst isEqualToSum = (n) => {\n  if (sumOdd(n) && sumEven(n) && sumPosEven(n) && sumPosOdd(n) && sumNegEven(n) && sumNegOdd(n) && sumPosNeg(n) && sumNegNeg(n) && sumPosPos(n)) {\n    return true\n  }\n  return false\n}\n\nconst isEqualToSum = (n) => {\n  if (isEqualToSumEven(n) && isEqualToSumOdd(n) && isEqualToSumPosEven(n) && isEqualToSumPosOdd(n) && isEqualToSumNegEven(n) && isEqualToSumNegOdd(n) && isEqualToSumPosNeg(n) && isEqualToSumNegNeg(n) && isEqualToSumPosPos(n)) {\n    return true\n  }\n  return false\n}\n\nexport { isEqualToSum, sumOdd, sumEven, sumPosEven, sumPosOdd, sumNegEven, sumNegOdd, sumPosNeg, sumNegNeg, sumPosPos }\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let i = 1;\n  let result = 1;\n  while (i <= n) {\n    result = result * i;\n    i++;\n  }\n  return result;\n};\n\n/*The Catalan number C(n) is defined as:\n  C(n) = n*(n+1)*(2*n+1)/6 \n  where n > 0.\n  \n  For example:\n  >>> specialCatalan(10)\n  5520\n\n  The function will receive an integer as input and should return the special\n  Catalan number of this integer.\n  */\nconst specialCatalan = (n) => {\n  let i = 1;\n  let result = 0;\n  while (i <= n) {\n    result = result + i * (i + 1);\n    i++;\n  }\n  return result;\n};\n\n/*The Fibonacci number F(n) is defined as:\n  F(n) = F(n-1) + F(n-2) where n > 1.\n  \n  For example:\n  >>> specialFibonacci(10)\n  55\n  \n  The function will receive an integer as input and should return the fibonacci\n  number of this integer.\n  */\nconst specialFibonacci = (n) => {\n  let i = 1;\n  let result = 1;\n  while (i <= n) {\n    result = result + i;\n    i++;\n  }\n  return result;\n};\n\n/*The harmonic number H(n) is defined as:\n  H(n) = 1/n * sum(1/x for x in [1..n])\n  \n  For example:\n  >>> specialHarmonic(10)\n  1.73205080756887729\n  \n  The function will receive an integer as input and should return the harmonic\n  number of this integer.\n  */\nconst specialHarmonic = (n) => {\n  let i = 1;\n  let result = 0;\n  while (i <= n) {\n    result = result + 1 / i;\n    i++;\n  }\n  return result;\n};\n\n/*The number of primes in [1..n] is defined as:\n  P(n) = n + 1 - (1/2)n + 1 - (1/3)n + 1 -... - (1/n)n\n  \n  For example:\n  >>> specialPrimeCount(10)\n  22\n\n  The function will receive an integer as input and should return the number of\n  primes in [1..n].\n  */\nconst specialPrimeCount = (n) => {\n  let i = 1;\n  let result = 0;\n  while (i <= n) {\n    if (isPrime(i)) {\n      result = result + 1;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*The sum of the first n primes is defined as:\n  S(n) = sum(1/p for p in [1..n])\n  \n  For example:\n  >>> specialPrimeSum(10)\n  10.25\n\n  The function will receive an integer as input and should return the sum of\n  the first n primes.\n  */\nconst specialPrimeSum = (n) => {\n  let i = 1;\n  let result = 0;\n  while (i <= n) {\n    result = result + 1 / i;\n    i++;\n  }\n  return result;\n};\n\n/*The sum of the first n primes squared is defined as:\n  S2(n) = sum(1/p for p in [1..n])^2\n  \n  For example:\n  >>> specialPrimeSum2(10)\n  9.25\n\n  The function will receive an integer as input and should return the sum of the\n  first n primes squared.\n  */\nconst specialPrimeSum2 = (n) => {\n  let i = 1;\n  let result = 0;\n  while (i <= n) {\n    result = result + 1 / i;\n    i++;\n  }\n  return result * result;\n};\n\n/*The sum of the first n primes cubed is defined as:\n  S3(n) = sum(1/p for p in [1..n])^3\n  \n  For example:\n  >>> specialPrimeSum3(10)\n  8.25\n\n  The function will receive an integer as input and should return the sum of the\n  first n primes cubed.\n  */\nconst specialPrimeSum3 = (n) => {\n  let i = 1;\n  let result = 0;\n  while (i <= n) {\n    result = result + 1 / i;\n    i++;\n  }\n  return result * result * result;\n};\n\n/*The sum of the first n primes cubed is defined as:\n  S4(n) = sum(1/p for p in [1..n])^4\n  \n  For example:\n  >>> specialPrimeSum4(10)\n  6.75\n\n  The function will receive an integer as input and should return the sum of the\n  first n primes cubed.\n  */\nconst specialPrimeSum4 = (n) => {\n  let i = 1;\n  let result = 0;\n  while (i <= n) {\n    result = result + 1 / i;\n    i++;\n  }\n  return result * result * result * result;\n};\n\n/*The sum of the first n primes cubed is defined as:\n  S5(n) = sum(1/p for p in [1..n])^5\n  \n  For example:\n  >>> specialPrimeSum5(10)\n  7.125\n\n  The function will receive an integer as input and should return the sum of the\n  first n primes cubed.\n  */\nconst specialPrimeSum5 = (n) => {\n  let i = 1;\n  let result = 0;\n  while (i <= n) {\n    result = result + 1 / i;\n    i++;\n  }\n  return result * result * result * result * result;\n};\n\n/*"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace substitute all spaces in it with underscores underscore, \n   and if a string has more than 2 consecutive straight spaces, \n   then replace supplant all consecutive spaces distance with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace substitute all spaces in it with underscores underscore, \n   and if a string has more than 2 consecutive straight spaces, \n   then replace supplant all consecutive spaces distance with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  if (!text) {\n    return text\n  }\n\n  let newString = ''\n  let lastPos = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text.charAt(i) ==='') {\n      newString += text.substring(lastPos, i)\n      newString += '_'\n      lastPos = i + 1\n    }\n  }\n  newString += text.substring(lastPos, text.length)\n  return newString\n}\n\nconst stripQuotes = (text) => {\n  if (!text) {\n    return text\n  }\n\n  return text.replace(/^\"(.*)\"$/, '$1')\n}\n\nconst capitalize = (text) => {\n  if (!text) {\n    return text\n  }\n\n  return text.substring(0, 1).toUpperCase() + text.substring(1)\n}\n\nconst toCamelCase = (text) => {\n  if (!text) {\n    return text\n  }\n\n  let words = text.split('_')\n  let words = words.map(capitalize)\n  words = words.join(' ')\n  return words\n}\n\nconst isAllUpperCase = (text) => {\n  return text.toUpperCase().every(function (letter) {\n    return letter === letter.toUpperCase()\n  })\n}\n\nconst isAllLowerCase = (text) => {\n  return text.toLowerCase().every(function (letter) {\n    return letter === letter.toLowerCase()\n  })\n}\n\nconst isCapitalized = (text) => {\n  return text.charAt(0) === text.charAt(0).toUpperCase()\n}\n\nconst isUncapitalized = (text) => {\n  return text.charAt(0) === text.charAt(0).toLowerCase()\n}\n\nconst isNumeric = (text) => {\n  return text.match(/^\\d+$/)\n}\n\nconst isWhitespace = (text) => {\n  return text ==='' || text === '\\n' || text === '\\t' || text === '\\r'\n}\n\nconst isWord = (text) => {\n  return /^\\w+$/.test(text)\n}\n\nconst isCapitalizedWord = (text) => {\n  return text.charAt(0) === text.charAt(0).toUpperCase()\n}\n\nconst isUncapitalizedWord = (text) => {\n  return text.charAt(0) === text.charAt(0).toLowerCase()\n}\n\nconst isAlphanumeric = (text) => {\n  return /^\\w+$/.test(text)\n}\n\nconst isCapitalizedAlphanumeric = (text) => {\n  return text.charAt(0) === text.charAt(0).toUpperCase()\n}\n\nconst isUncapitalizedAlphanumeric = (text) => {\n  return text.charAt(0) === text.charAt(0).toLowerCase()\n}\n\nconst isWordOrNumber = (text) => {\n  return /^\\w+$/.test(text) || /^\\d+$/.test(text)\n}\n\nconst isCapitalizedWordOrNumber = (text) => {\n  return text.charAt(0) === text.charAt(0).toUpperCase()\n}\n\nconst isUncapitalizedWordOrNumber = (text) => {\n  return text.charAt(0) === text.charAt(0).toLowerCase()\n}\n\nconst isNumericOrLetter = (text) => {\n  return /^[a-zA-Z_0-9]+$/.test(text)\n}\n\nconst isCapitalizedNumericOrLetter = (text) => {\n  return text.charAt(0) === text.charAt(0).toUpperCase()\n}\n\nconst isUncapitalizedNumericOrLetter = (text) => {\n  return text.charAt(0) === text.charAt(0).toLowerCase()\n}\n\nconst isNumericOrLetterOrDash = (text) => {\n  return /^[a-zA-Z_0-9\\-]+$/.test(text)\n}\n\nconst isCapitalizedNumericOrLetterOrDash = (text) => {\n  return text.charAt(0) === text.charAt(0).toUpperCase()\n}\n\nconst isUncapitalizedNumericOrLetterOrDash = (text) => {\n  return text.charAt(0) === text.charAt(0).toLowerCase()\n}\n\nconst isNumericOrLetterOrDashOrPeriod = (text) => {\n  return /^[a-zA-Z_0-9\\-\\.]+$/.test(text)\n}\n\nconst isCapitalizedNumericOrLetterOrDashOrPeriod = (text) => {\n  return text.charAt(0) === text.charAt(0).toUpperCase()\n}\n\nconst isUncapitalizedNumericOrLetterOrDashOrPeriod = (text) => {\n  return text.charAt(0) === text.charAt(0).toLowerCase()\n}\n\nconst isNumericOrLetterOrPeriod = (text) => {\n  return /^[a-zA-Z_0-9\\.]+$/.test(text)\n}\n\nconst isCapitalizedNumericOrLetterOrPeriod = (text) => {\n  return text.charAt(0) === text.charAt(0).toUpperCase()\n}\n\nconst isUncapitalizedNumericOrLetterOrPeriod = (text) => {\n  return text.charAt(0) === text.charAt(0).toLowerCase()\n}\n\nconst isCapitalizedAlphanumericOrDashOrPeriod = (text) => {\n  return text.charAt(0) === text.charAt(0).to"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string drawstring representing a file's name, and returns come back \n  ' Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following watch conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot point'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot point should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a string drawstring representing a file's name, and returns come back \n 'Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following watch conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot point'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot point should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_pattern = /[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+/\n  const file_name_length = file_name.length\n  if (file_name_pattern.test(file_name) && file_name_length > 1 && file_name_length < 5) {\n    const valid_characters = /[a-zA-Z]/\n    const dot = /\\.[a-zA-Z]{1}/\n    if (valid_characters.test(file_name.substring(0,1)) && valid_characters.test(file_name.substring(file_name.indexOf(\".\")+1,file_name_length))) {\n      return \"Yes\"\n    } else {\n      return \"No\"\n    }\n  } else {\n    return \"No\"\n  }\n}\n\n/*Given a string, return the first char of the string.\n  Examples:\n  firstChar(\"abc\") # => 'a'\n  firstChar(\"\") # => ''\n  firstChar(\"abcdef\") # => 'a'\n  firstChar(\"ab\") # => 'a'\n  firstChar(\"c\") # => 'c'\n  firstChar(\"\") # => ''\n  */\nconst firstChar = (string) => {\n  if (string.length > 0) {\n    return string[0]\n  } else {\n    return ''\n  }\n}\n\n/*Given a string, return the last char of the string.\n  Examples:\n  lastChar(\"abc\") # => 'c'\n  lastChar(\"\") # => ''\n  lastChar(\"abcdef\") # => 'f'\n  lastChar(\"ab\") # => 'b'\n  lastChar(\"c\") # => 'c'\n  lastChar(\"\") # => ''\n  */\nconst lastChar = (string) => {\n  if (string.length > 0) {\n    return string[string.length - 1]\n  } else {\n    return ''\n  }\n}\n\n/*Given a string, return the length of the string.\n  Examples:\n  length(\"abc\") # => 3\n  length(\"\") # => 0\n  length(\"abcdef\") # => 6\n  length(\"ab\") # => 2\n  length(\"c\") # => 1\n  length(\"\") # => 0\n  */\nconst length = (string) => {\n  if (string.length > 0) {\n    return string.length\n  } else {\n    return 0\n  }\n}\n\n/*Given two strings, return their concatenation.\n  Examples:\n  concatenate(\"ab\", \"c\") # => 'abc'\n  concatenate(\"\", \"ab\") # => 'ab'\n  concatenate(\"abc\", \"\") # => 'abc'\n  concatenate(\"ab\", \"\") # => 'ab'\n  concatenate(\"\", \"\") # => ''\n  */\nconst concatenate = (string1, string2) => {\n  if (string1.length > 0 && string2.length > 0) {\n    return string1 + string2\n  } else {\n    return ''\n  }\n}\n\n/*Given a string, return a string of its vowels.\n  Examples:\n  vowels(\"abc\") # => 'ab'\n  vowels(\"\") # => ''\n  vowels(\"abcd\") # => 'ab'\n  vowels(\"abcdefghijklmnopqrstuvwxyz\") # => 'ab'\n  */\nconst vowels = (string) => {\n  if (string.length > 0) {\n    const vowels_pattern = /[aeiou]/\n    const vowels_list = string.split('')\n    let string_length = string.length\n    for (var i = 0; i < string_length; i++) {\n      if (vowels_pattern.test(vowels_list[i])) {\n        return string.slice(0, i + 1)\n      }\n    }\n  } else {\n    return ''\n  }\n}\n\n/*Given a string, return the number of vowels in the string.\n  Examples:\n  vowels(\"abc\") # => 2\n  vowels(\"\") # => 0\n  vowels(\"abcdef\") # => 2\n  vowels(\"ab\") # => 0\n  vowels(\"c\") # => 1\n  vowels(\"\") # => 0\n  */\nconst numberOfVowels = (string) => {\n  const vowels_pattern = /[aeiou]/\n  if (string.length > 0) {\n    const vowels_list = string.split('')\n    let string_length = string.length\n    let vowels_count = 0\n    for (var i = 0; i < string_length; i++) {\n      if (vowels_pattern.test(vowels_list[i])) {\n        vowels_count = vowels_count + 1\n      }\n    }\n    return vowels_count\n  } else {\n    return 0\n  }\n}\n\n/*Given a string, return the string without vowels.\n  Examples:\n  withoutVowels(\"abc\") # => \"abc\"\n  withoutVowels(\"\") # => \"\"\n  withoutVowels(\"abcdef\") # => \"def\"\n  withoutVowels(\"ab\") # => \"ab\"\n  withoutV"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry introduction if its index is a \n   multiple of 3 and will cube the integer entry introduction if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change switch the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry introduction if its index is a \n   multiple of 3 and will cube the integer entry introduction if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change switch the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      result += lst[i] * lst[i]\n    }\n    if (i % 4 === 0) {\n      result += lst[i] * lst[i]\n    }\n  }\n  return result\n}\n\n/*\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry introduction if its index is \n   a multiple of 3 and will cube the integer entry introduction if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change switch the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares2 = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      result += lst[i] * lst[i]\n    }\n    if (i % 4 === 0) {\n      result += lst[i] * lst[i]\n    }\n  }\n  return result\n}\n\n/*\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry introduction if its index is \n   a multiple of 3 and will cube the integer entry introduction if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change switch the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares3 = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      result += lst[i] * lst[i]\n    }\n    if (i % 4 === 0) {\n      result += lst[i] * lst[i]\n    }\n  }\n  return result\n}\n\nmodule.exports = {\n  sumSquares,\n  sumSquares2,\n  sumSquares3\n}<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing defend a sentence,\n   the sentence contains some words password separated by a space outer space, \n   and you have to return a string that contains hold the words from the original sentence,\n   whose lengths duration are prime numbers, \n   the order of the words discussion in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representing defend a sentence,\n   the sentence contains some words password separated by a space outer space, \n   and you have to return a string that contains hold the words from the original sentence,\n   whose lengths duration are prime numbers, \n   the order of the words discussion in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let isPrime = (x) => x % 2 === 1;\n  const prime = (x) => x === 1 || x === 3 || prime(x - 1) && prime(x - 3);\n  const getPrime = (x) => prime(x)? x + 2 : x;\n  let lastPrime = 1;\n  const num = (x) => {\n    const prime2 = getPrime(x);\n    return prime2 === 1? x : num(prime2);\n  }\n  const string = (sentence) => sentence.split(' ').map(x => x.toLowerCase()).join(' ');\n  const words = string(sentence);\n  const wordCount = (words) => words.split(' ').length;\n  const findIndex = (word, words) => words.indexOf(word);\n  const findFirst = (word, words) => words.indexOf(word);\n  const removeIndex = (word, words, index) => words.splice(index, 1);\n  const removeFirst = (word, words) => words.splice(0, 1);\n  const removeLast = (word, words) => words.splice(-1, 1);\n  const lastPrimeIndex = (words) => words.findIndex((word) => isPrime(word));\n  const wordsInSentence = (sentence) => {\n    const words = sentence.split(' ').map((x) => x.toLowerCase());\n    const lastPrime = lastPrimeIndex(words);\n    const wordCount = words.length;\n    if (wordCount % 2 === 1) {\n      const lastPrimeIndex = lastPrime(words);\n      const newSentence = words.splice(0, lastPrimeIndex).join(' ');\n      const lastPrimeIndex = lastPrimeIndex(words);\n      const newWords = words.splice(lastPrimeIndex, words.length - lastPrimeIndex).join(' ');\n      return [newSentence, newWords];\n    } else {\n      return [words.join(' '), words];\n    }\n  }\n  return wordsInSentence(sentence);\n}\n\nconst test = () => {\n  console.log(findFirst('is', ['this', 'a', 'test']));\n  console.log(findFirst('go', ['lets', 'go', 'for','swimming']));\n  console.log(removeFirst('is', ['this', 'a', 'test']));\n  console.log(removeFirst('go', ['lets', 'go', 'for','swimming']));\n  console.log(removeFirst('for', ['lets', 'go', 'for','swimming']));\n  console.log(removeLast('is', ['this', 'a', 'test']));\n  console.log(removeLast('go', ['lets', 'go', 'for','swimming']));\n  console.log(removeLast('for', ['lets', 'go', 'for','swimming']));\n}\n\ntest();<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true dependable if x * n evaluates to a whole hale number and false delusive \n   otherwise. Both x and n, are string representation of a fraction, and have the following follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole hale numbers issue. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false delusive \n   simplify(\"7/10\", \" 10/2 \") = false delusive \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true dependable if x * n evaluates to a whole hale number and false delusive \n   otherwise. Both x and n, are string representation of a fraction, and have the following follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole hale numbers issue. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false delusive \n   simplify(\"7/10\", \" 10/2 \") = false delusive \n   * / \n const simplify = (x, n) = > {\n  let x = to_fraction(x)\n  let n = to_fraction(n)\n  return x.numerator === n.numerator && x.denominator === n.denominator\n}\n*/<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts classify the given list of integers integer \n   in ascending order holy order according to the sum union of their digits. \n   Note eminence: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example case:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts classify the given list of integers integer \n   in ascending order holy order according to the sum union of their digits. \n   Note eminence: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example case:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sumOfDigits = (n) => sumOfDigits(n)\n  const sumOfDigitsRecursive = (n) => {\n    if (n < 0) {\n      return 0\n    } else if (n === 0) {\n      return 1\n    } else {\n      return sumOfDigits(n) + sumOfDigitsRecursive(n / 10)\n    }\n  }\n  const sortBySumOfDigits = (nums) => nums.sort((a, b) => sumOfDigitsRecursive(a) - sumOfDigitsRecursive(b))\n  return sortBySumOfDigits(nums)\n}\n\nconst sumOfDigits = (n) => {\n  return n.toString().split('').reduce((a, b) => (a + parseInt(b, 10)), 0)\n}\n\nconst orderBySumOfDigits = (nums) => {\n  const sumOfDigitsRecursive = (n) => {\n    if (n < 0) {\n      return 0\n    } else if (n === 0) {\n      return 1\n    } else {\n      return sumOfDigits(n) + sumOfDigitsRecursive(n / 10)\n    }\n  }\n  const sortBySumOfDigits = (nums) => nums.sort((a, b) => sumOfDigitsRecursive(a) - sumOfDigitsRecursive(b))\n  return sortBySumOfDigits(nums)\n}\n\nconst orderBySumOfDigits2 = (nums) => {\n  const sumOfDigitsRecursive = (n) => {\n    if (n < 0) {\n      return 0\n    } else if (n === 0) {\n      return 1\n    } else {\n      return sumOfDigits(n) + sumOfDigitsRecursive(n / 10)\n    }\n  }\n  const sortBySumOfDigits = (nums) => nums.sort((a, b) => {\n    if (sumOfDigitsRecursive(a) - sumOfDigitsRecursive(b) === 0) {\n      return a - b\n    } else {\n      return sumOfDigitsRecursive(a) - sumOfDigitsRecursive(b)\n    }\n  })\n  return sortBySumOfDigits(nums)\n}\n\nconst orderBySumOfDigits3 = (nums) => {\n  const sumOfDigitsRecursive = (n) => {\n    if (n < 0) {\n      return 0\n    } else if (n === 0) {\n      return 1\n    } else {\n      return sumOfDigits(n) + sumOfDigitsRecursive(n / 10)\n    }\n  }\n  const sortBySumOfDigits = (nums) => nums.sort((a, b) => {\n    if (sumOfDigitsRecursive(a) - sumOfDigitsRecursive(b) === 0) {\n      return a - b\n    } else {\n      return sumOfDigitsRecursive(a) - sumOfDigitsRecursive(b)\n    }\n  })\n  return sortBySumOfDigits(nums)\n}\n\nconst orderBySumOfDigits4 = (nums) => {\n  const sumOfDigitsRecursive = (n) => {\n    if (n < 0) {\n      return 0\n    } else if (n === 0) {\n      return 1\n    } else {\n      return sumOfDigits(n) + sumOfDigitsRecursive(n / 10)\n    }\n  }\n  const sortBySumOfDigits = (nums) => nums.sort((a, b) => {\n    if (sumOfDigitsRecursive(a) - sumOfDigitsRecursive(b) === 0) {\n      return a - b\n    } else {\n      return sumOfDigitsRecursive(a) - sumOfDigitsRecursive(b)\n    }\n  })\n  return sortBySumOfDigits(nums)\n}\n\nconst orderBySumOfDigits5 = (nums) => {\n  const sumOfDigitsRecursive = (n) => {\n    if (n < 0) {\n      return 0\n    } else if (n === 0) {\n      return 1\n    } else {\n      return sumOfDigits(n) + sumOfDigitsRecursive(n / 10)\n    }\n  }\n  const sortBySumOfDigits = (nums) => nums.sort((a, b) => {\n    if (sumOfDigitsRecursive(a) - sumOfDigitsRecursive(b) === 0) {\n      return a - b\n    } else {\n      return sumOfDigitsRecursive(a) - sumOfDigitsRecursive(b)\n    }\n  })\n  return sortBySumOfDigits(nums)\n}\n\nconst orderBySumOfDigits6 = (nums) => {\n  const sumOfDigitsRecursive = (n) => {\n    if (n < 0) {\n      return 0\n    } else if (n === 0) {\n      return 1\n    } else {\n      return sumOfDigits(n) + sumOfDigitsRecursive(n / 10)\n    }\n  }\n  const sortBySumOfDigits = (nums) => nums.sort((a, b) => {\n    if (sumOfDigitsRecursive(a) - sumOfDigitsRecursive(b) === 0) {\n      return a - b\n    } else {\n      return sumOfDigitsRecursive(a) - sumOfDigitsRecursive(b)\n    }\n  })\n  return sortBySumOfDigits(nums)\n}\n\nconst orderBySumOfDigits7 = (nums) => {\n  const sumOfDigitsRecursive = (n) => {\n    if (n < 0) {\n      return 0\n    } else if ("}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers issue as input and returns return key \n   the number of elements in the array that are greater capital than 10 and both \n   first and last concluding digits of a number act are odd curious (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an array of numbers issue as input and returns return key \n   the number of elements in the array that are greater capital than 10 and both \n   first and last concluding digits of a number act are odd curious (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n    const first = nums.slice(0, 1)\n    const last = nums.slice(-1)\n    const even = nums.filter((x) => x % 2 === 0)\n    const odd = nums.filter((x) => x % 2!== 0)\n    return even.length + odd.length\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]))\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]))\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create make an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to create make an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [1, 3, 7, 13, 21];\n  let triples = 0;\n  let cur = 1;\n  let prev = 1;\n  let max = 0;\n  for (let i = 1; i < n; i++) {\n    triples += (a[i] - prev);\n    cur += (a[i] - prev);\n    if (cur % 3 === 0) {\n      triples += (cur - prev);\n      cur = 1;\n      prev = a[i];\n    } else {\n      cur = 0;\n      prev = a[i];\n    }\n    max = Math.max(triples, max);\n  }\n  return max;\n}\n\nmodule.exports = getMaxTriples;<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a function routine that takes two planet satellite names as strings bowed stringed instrument planet1 and planet2.\n   The function should return a tuple containing incorporate all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit sphere of planet2, sorted screen by \n   the proximity to the sun sunday. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names name calling.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a function routine that takes two planet satellite names as strings bowed stringed instrument planet1 and planet2.\n   The function should return a tuple containing incorporate all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit sphere of planet2, sorted screen by \n   the proximity to the sun sunday. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names name calling.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1s = {\n    Mercury: 6.4397,\n    Venus: 6.4185,\n    Earth: 6.378,\n    Mars: 6.35,\n    Jupiter: 6.4,\n    Saturn: 10.45,\n    Uranus: 29.45,\n    Neptune: 11.05,\n  };\n  const planet2s = {\n    Mercury: 6.4397,\n    Venus: 6.4185,\n    Earth: 6.378,\n    Mars: 6.35,\n    Jupiter: 6.4,\n    Saturn: 10.45,\n    Uranus: 29.45,\n    Neptune: 11.05,\n  };\n  const sorted_planets = [];\n  for (const planet1 in planet1s) {\n    for (const planet2 in planet2s) {\n      const planet1_distance = planet1s[planet1] - planet2s[planet2];\n      const planet2_distance = planet2s[planet2] - planet1s[planet1];\n      if (planet1_distance <= planet2_distance) {\n        sorted_planets.push([planet1, planet2]);\n      }\n    }\n  }\n  const sorted_planets = sorted_planets.sort((planet1, planet2) => planet1[1] - planet2[1]);\n  return sorted_planets;\n};\n\n/* \n  bf2 = bf(planet1, planet2)\n  */\nconst bf2 = (planet1, planet2) => {\n  const planet1s = {\n    Mercury: 6.4397,\n    Venus: 6.4185,\n    Earth: 6.378,\n    Mars: 6.35,\n    Jupiter: 6.4,\n    Saturn: 10.45,\n    Uranus: 29.45,\n    Neptune: 11.05,\n  };\n  const planet2s = {\n    Mercury: 6.4397,\n    Venus: 6.4185,\n    Earth: 6.378,\n    Mars: 6.35,\n    Jupiter: 6.4,\n    Saturn: 10.45,\n    Uranus: 29.45,\n    Neptune: 11.05,\n  };\n  const sorted_planets = [];\n  for (const planet1 in planet1s) {\n    for (const planet2 in planet2s) {\n      const planet1_distance = planet1s[planet1] - planet2s[planet2];\n      const planet2_distance = planet2s[planet2] - planet1s[planet1];\n      if (planet1_distance <= planet2_distance) {\n        sorted_planets.push([planet1, planet2]);\n      }\n    }\n  }\n  return sorted_planets;\n};\n\n/* \n  bf3 = bf(planet1, planet2)\n  */\nconst bf3 = (planet1, planet2) => {\n  const planet1s = {\n    Mercury: 6.4397,\n    Venus: 6.4185,\n    Earth: 6.378,\n    Mars: 6.35,\n    Jupiter: 6.4,\n    Saturn: 10.45,\n    Uranus: 29.45,\n    Neptune: 11.05,\n  };\n  const planet2s = {\n    Mercury: 6.4397,\n    Venus: 6.4185,\n    Earth: 6.378,\n    Mars: 6.35,\n    Jupiter: 6.4,\n    Saturn: 10.45,\n    Uranus: 29.45,\n    Neptune: 11.05,\n  };\n  const sorted_planets = [];\n  for (const planet1 in planet1s) {\n    for (const planet2 in planet2s) {\n      const planet1_distance = planet1s[planet1] - planet2s[planet2];\n      const planet2_distance = planet2s[planet2] - planet1s[planet1];\n      if (planet1_distance <= planet2_distance) {\n        sorted_planets.push([planet1, planet2]);\n      }\n    }\n  }\n  return sorted_planets;\n};\n\n/* \n  bf4 = bf(planet1, planet2)\n  */\nconst bf4 = (planet1, planet2) => {\n  const planet1s = {\n    Mercury: 6.4397,\n    Venus: 6.4185,\n    Earth: 6.378,\n    Mars: 6.35,\n    Jupiter: 6.4,\n    Saturn: 10.45,\n    Uranus: 29.45,\n    Neptune: 11.05,\n  };\n  const planet2s = {\n    Mercury: 6.4397,\n    Venus: 6.4185,\n    Earth: 6.378,\n    Mars: 6.35,\n    Jupiter: 6.4,\n    Saturn: 10.45,\n    Uranus: 29.45,\n    Neptune: 11.05,\n  };\n  const sorted_planets = [];\n  for (const planet1 in planet1s) {\n    for (const planet2 in planet2s) {\n      const planet1_distance = planet1s[planet1] - planet2s[planet2];\n      const planet2_distance = planet2s[planet2] - planet1s[planet1];\n      if"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings chain as a parameter, \n   deletes edit the strings that have odd curious lengths from it, \n   and returns refund the resulted list with a sorted screen order decree, \n   The list is always a list of strings and never an array of numbers act, \n   and it may contain check duplicates. \n   The order of the list should be ascending by length duration of each word son, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order club. \n   You may assume that all words bible will have the same length distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings chain as a parameter, \n   deletes edit the strings that have odd curious lengths from it, \n   and returns refund the resulted list with a sorted screen order decree, \n   The list is always a list of strings and never an array of numbers act, \n   and it may contain check duplicates. \n   The order of the list should be ascending by length duration of each word son, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order club. \n   You may assume that all words bible will have the same length distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  return lst.map(str => {\n    return str.length + (lst.indexOf(str) % 2);\n  });\n}\n\nconst list_sort = (lst) => {\n  const sorted = sortedListSum(lst);\n  const sortedList = sorted.sort((a, b) => {\n    if (a == b) return 0;\n    else if (a < b) return -1;\n    else return 1;\n  });\n  return sortedList;\n}\n\nconsole.log(list_sort([\"a\", \"a\", \"a\"])); // [\"a\", \"a\", \"a\"]\nconsole.log(list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])); // [\"ab\", \"cd\"]\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  const isPrime = prime =>\n    n % prime === 0? x : y;\n  const isPrimeOrEven = prime =>\n    n % prime === 0 || n % (prime + 2) === 0? x : y;\n  const isPrimeOrOdd = prime =>\n    n % prime === 0? x : y;\n  const isPrimeOrPrime = prime =>\n    prime === 1? xOrY(n, x, y) : n % prime === 0? x : y;\n  const isPrimeOrOddOrEven = prime =>\n    prime === 1? xOrY(n, x, y) : n % prime === 0? x : y;\n  const isPrimeOrOddOrPrime = prime =>\n    prime === 1? xOrY(n, x, y) : n % prime === 0? x : y;\n  return prime => {\n    switch(prime) {\n      case 2:\n        return isPrime(2)? x : y;\n      case 3:\n        return isPrimeOrPrime(3)? x : y;\n      case 5:\n        return isPrimeOrEven(5)? x : y;\n      case 7:\n        return isPrimeOrEven(7)? x : y;\n      case 11:\n        return isPrimeOrEven(11)? x : y;\n      case 13:\n        return isPrimeOrEven(13)? x : y;\n      case 17:\n        return isPrimeOrEven(17)? x : y;\n      case 19:\n        return isPrimeOrEven(19)? x : y;\n      case 23:\n        return isPrimeOrEven(23)? x : y;\n      case 29:\n        return isPrimeOrEven(29)? x : y;\n      case 31:\n        return isPrimeOrEven(31)? x : y;\n      case 37:\n        return isPrimeOrEven(37)? x : y;\n      case 41:\n        return isPrimeOrEven(41)? x : y;\n      case 43:\n        return isPrimeOrEven(43)? x : y;\n      case 47:\n        return isPrimeOrEven(47)? x : y;\n      case 53:\n        return isPrimeOrEven(53)? x : y;\n      case 59:\n        return isPrimeOrEven(59)? x : y;\n      case 61:\n        return isPrimeOrEven(61)? x : y;\n      case 67:\n        return isPrimeOrEven(67)? x : y;\n      case 71:\n        return isPrimeOrEven(71)? x : y;\n      case 73:\n        return isPrimeOrEven(73)? x : y;\n      case 79:\n        return isPrimeOrEven(79)? x : y;\n      case 83:\n        return isPrimeOrEven(83)? x : y;\n      case 89:\n        return isPrimeOrEven(89)? x : y;\n      case 97:\n        return isPrimeOrEven(97)? x : y;\n      case 101:\n        return isPrimeOrEven(101)? x : y;\n      case 103:\n        return isPrimeOrEven(103)? x : y;\n      case 107:\n        return isPrimeOrEven(107)? x : y;\n      case 109:\n        return isPrimeOrEven(109)? x : y;\n      case 113:\n        return isPrimeOrEven(113)? x : y;\n      case 127:\n        return isPrimeOrEven(127)? x : y;\n      case 131:\n        return isPrimeOrEven(131)? x : y;\n      case 137:\n        return isPrimeOrEven(137)? x : y;\n      case 139:\n        return isPrimeOrEven(139)? x : y;\n      case 149:\n        return isPrimeOrEven(149)? x : y;\n      case 151:\n        return isPrimeOrEven(151)? x : y;\n      case 157:\n        return isPrimeOrEven(157)? x : y;\n      case 163:\n        return isPrimeOrEven(163)? x : y;\n      case 167:\n        return isPrimeOrEven(167)? x : y;\n      case 173:\n        return isPrimeOrEven(173)? x : y;\n      case 179:\n        return isPrimeOrEven(179)? x : y;\n      case 181:\n        return isPrimeOrEven(181)? x : y;\n      case 191:\n        return isPrimeOrEven(191)? x : y;\n      case 193:\n        return isPrimeOrEven(193)? x : y;\n      case 197:\n        return isPrimeOrEven(197)? x : y;\n      case 199:\n        return isPrimeOrEven(199)? x : y;\n      case 211:\n        return isPrimeOrEven(211)? x : y;\n      case 223:\n        return isPrimeOrEven(223)? x : y;\n      case 227:\n        return isPrimeOrEven(227)? x : y;\n      case 229:\n        return isPrimeOrEven(229)? x : y;\n      case 233:\n        return isPrimeOrEven(233)? x : y;\n      case 239:\n        return isPrimeOrEven(239)? x : y;\n      case 241:\n        return isPrimeOrEven(241)? x : y;\n      case 251:\n        return isPrimeOrEven(251)? x : y;\n      case 257:\n        return isPrimeOrEven(257)? x : y;\n      case 263:\n        return isPrimeOrEven(263)? x : y;\n      case 269:\n        return isPrimeOrEven(269)? x : y;\n      case 271:\n        return isPrimeOrEven(271)? x : y;\n      case 277:\n        return isPrimeOrEven(277)? x : y;\n      case 281:\n        return isPrimeOrEven(281)? x : y;\n      case 283:\n        return isPrimeOrEven(283)? x : y;\n      case 293:\n        return isPrimeOrEven(293)? x : y;\n      case 307:\n        return"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum kernel of squares of the numbers issue \n   in the list that are odd. Ignore numbers numeral that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum kernel of squares of the numbers issue \n   in the list that are odd. Ignore numbers numeral that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let [i, _] of lst)\n   if (i % 2 === 1) {\n     sum += i * i;\n   }\n   return sum;\n }\n */\n\nlet doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let [i, _] of lst) {\n    if (i % 2 === 1) {\n      sum += i * i;\n    }\n  }\n  return sum;\n};\n\nconsole.log(doubleTheDifference([1, 3, 2, 0])); // 10\nconsole.log(doubleTheDifference([-1, -2, 0])); // 0\nconsole.log(doubleTheDifference([9, -2])); // 81\nconsole.log(doubleTheDifference([0])); // 0\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling impression when the result of some long - awaited expect \n   event is finally ultimately known. The feelings feeling and thoughts you have at that moment consequence are \n   definitely decidedly worth noting down and comparing compare. \n   Your task undertaking is to determine if a person correctly guessed the results of a number phone number of matches catch. \n   You are given render two arrays array of scores and guesses of equal adequate length, where each index exponent shows testify a match. \n   Return an array of the same length distance denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling impression when the result of some long - awaited expect \n   event is finally ultimately known. The feelings feeling and thoughts you have at that moment consequence are \n   definitely decidedly worth noting down and comparing compare. \n   Your task undertaking is to determine if a person correctly guessed the results of a number phone number of matches catch. \n   You are given render two arrays array of scores and guesses of equal adequate length, where each index exponent shows testify a match. \n   Return an array of the same length distance denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let scores = game.slice();\n  let guesses = guess.slice();\n  for (let i = 0; i < scores.length; i++) {\n    if (guesses[i] === scores[i]) {\n      scores[i] = 0;\n    } else {\n      scores[i] = Math.abs(guesses[i] - scores[i]);\n    }\n  }\n  return scores;\n};\n\nlet test = compare([1,2,3,4,5,1],[1,2,3,4,2,-2]);\nconsole.log(test);\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string drawstring) and a list of extensions.\n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let permit CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find receive the strongest firm extension and return a string drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class (a string drawstring) and a list of extensions.\n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let permit CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find receive the strongest firm extension and return a string drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n    if (!extensions || extensions.length === 0) {\n        return class_name;\n    }\n    return extensions.sort((a, b) => {\n        const strength = a.length - b.length;\n        if (strength < 0) {\n            return -1;\n        }\n        if (strength > 0) {\n            return 1;\n        }\n        return 0;\n    })[0];\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need necessitate to return true if the second word parole or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false fake \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false delusive \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need necessitate to return true if the second word parole or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false fake \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false delusive \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n    return (a.indexOf(b) >= 0 || b.indexOf(a) >= 0);\n };\n \n */\n\nimport java.util.*;\n\npublic class cycpatternCheck {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String a = in.next();\n        String b = in.next();\n        System.out.println(cycpatternCheck(a,b));\n    }\n    \n    public static boolean cycpatternCheck(String a, String b) {\n        if(a.indexOf(b) >= 0 || b.indexOf(a) >= 0)\n            return true;\n        else return false;\n    }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number of even and odd digits digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('').filter((digit) => {\n    return digit.charAt(0) % 2 === 0;\n  }).length;\n  const oddDigits = num.toString().split('').filter((digit) => {\n    return digit.charAt(0) % 2!== 0;\n  }).length;\n  return (evenDigits, oddDigits);\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain prevail its roman numeral equivalent as a string, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples model:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain prevail its roman numeral equivalent as a string, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples model:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = []\n  for (let i = 1; i <= number; i++) {\n    let n = number - i\n    let p = 0\n    if (n >= 3 && n <= 4) {\n      p = 1\n    }\n    if (n >= 5 && n <= 8) {\n      p = 2\n    }\n    if (n >= 9 && n <= 13) {\n      p = 3\n    }\n    if (n >= 14 && n <= 17) {\n      p = 4\n    }\n    if (n >= 18 && n <= 40) {\n      p = 5\n    }\n    if (n >= 41 && n <= 90) {\n      p = 6\n    }\n    if (n >= 91 && n <= 122) {\n      p = 7\n    }\n    if (n >= 123 && n <= 146) {\n      p = 8\n    }\n    if (n >= 147 && n <= 159) {\n      p = 9\n    }\n    if (n >= 160) {\n      p = 10\n    }\n    roman.push(p)\n  }\n  return roman.join('')\n}\n\nconsole.log(intToMiniRoman(19))\nconsole.log(intToMiniRoman(152))\nconsole.log(intToMiniRoman(426))\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides slope form a right mighty - angled triangle triangulum, false delusive otherwise differently. \n   A right mighty - angled angle triangle is a triangle in which one angle is right proper angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides slope form a right mighty - angled triangle triangulum, false delusive otherwise differently. \n   A right mighty - angled angle triangle is a triangle in which one angle is right proper angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n\tif (a === c && b === c) {\n\t\treturn true\n\t}\n\tif (a === b || b === c || a === c) {\n\t\treturn false\n\t}\n\tif ((a + b) === (c + b) && (a + c) === (b + c)) {\n\t\treturn true\n\t}\n\treturn false\n}\n\n/*\n Given the lengths of the three sides of a rectangle. Return the area of the rectangle\n  Example:\n  rectangleArea(3, 4, 5) == 6\n  rectangleArea(2, 4, 3) == 7\n  rectangleArea(1, 4, 3) == 6\n  rectangleArea(4, 5, 6) == 12\n  */\nconst rectangleArea = (a, b, c) => {\n\treturn a * b\n}\n\n/*\n Given the lengths of the two opposite sides of a triangle. Return the length of the\n   perpendicular bisector of the three sides of the triangle.\n  Example:\n  perpendicularBisector(3, 4, 5) == 4\n  perpendicularBisector(2, 4, 3) == 3\n  perpendicularBisector(1, 4, 3) == 2\n  */\nconst perpendicularBisector = (a, b, c) => {\n\treturn (b + c) / 2\n}\n\n/*\n Given the lengths of the two opposite sides of a rectangle. Return the length of the\n   side opposite the longest edge of the rectangle.\n  Example:\n  oppositeSide(3, 4, 5) == 4\n  oppositeSide(2, 4, 3) == 3\n  oppositeSide(1, 4, 3) == 3\n  */\nconst oppositeSide = (a, b, c) => {\n\treturn Math.max(a, b, c)\n}\n\n/*\n Given the lengths of the three opposite sides of a triangle. Return the length of the \n   side opposite the longest edge of the triangle.\n  Example:\n  oppositeSideTriangle(3, 4, 5) == 3\n  oppositeSideTriangle(2, 4, 3) == 4\n  oppositeSideTriangle(1, 4, 3) == 5\n  */\nconst oppositeSideTriangle = (a, b, c) => {\n\treturn Math.min(a, b, c)\n}\n\n/*\n Given the lengths of the two opposite sides of a rectangle. Return the length of the\n   side opposite the shorter edge of the rectangle.\n  Example:\n  oppositeSideRectangle(3, 4, 5) == 4\n  oppositeSideRectangle(2, 4, 3) == 3\n  oppositeSideRectangle(1, 4, 3) == 3\n  */\nconst oppositeSideRectangle = (a, b, c) => {\n\treturn Math.min(a, b, c)\n}\n\nconst main = () => {\n\tconst a = rectangleArea(3, 4, 5)\n\tconst b = perpendicularBisector(3, 4, 5)\n\tconst c = oppositeSide(3, 4, 5)\n\tconst d = oppositeSideTriangle(3, 4, 5)\n\tconst e = oppositeSideRectangle(3, 4, 5)\n\tconsole.log(a, b, c, d, e)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings chain. \n   The list contains different unlike words. Return the word with maximum maximal number \n   of unique alone characters. If multiple strings string section have maximum number of unique \n   characters character, return the one which comes come first foremost in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings chain. \n   The list contains different unlike words. Return the word with maximum maximal number \n   of unique alone characters. If multiple strings string section have maximum number of unique \n   characters character, return the one which comes come first foremost in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n     let {length} = words;\n     let i = 0;\n     let max = 0;\n     while (i < words.length) {\n         let current = words[i];\n         let currentLength = current.length;\n         let unique = 0;\n         for (let j = i + 1; j < words.length; j++) {\n             if (words[j].length === currentLength && words[j].includes(current)) {\n                 unique++;\n             }\n         }\n         if (unique > max) {\n             max = unique;\n             maxChar = current;\n         }\n         i++;\n     }\n     return maxChar;\n }\n * \n */<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten corrode a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have eaten corrode a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    if (remaining <= number) {\n        return [remaining, number];\n    } else {\n        return [Math.min(number, need), number - need];\n    }\n}\n\nconst test = (testNumber, expected, message) => {\n    if (testNumber === expected) {\n        console.log(message);\n    } else {\n        console.log(message, 'Expected:', expected, 'Received:', testNumber);\n    }\n}\n\nconst testEats = (testNumber, number, need) => {\n    const [eaten, remaining] = eat(number, need);\n    return test(testNumber, eaten, `Expected: ${testNumber} to be eaten to make up ${need} more carrots`) &&\n           test(remaining, testNumber - eaten, `Expected: ${remaining} carrots to remain`);\n}\n\nconst testEats2 = (testNumber, number, need) => {\n    const [eaten, remaining] = eat(number, need);\n    return test(testNumber, eaten, `Expected: ${testNumber} to be eaten to make up ${need} more carrots`) &&\n           test(remaining, testNumber - eaten, `Expected: ${remaining} carrots to remain`);\n}\n\nconst tests = [\n    [4, 4, 5],\n    [4, 5, 5],\n    [4, 4, 3],\n    [3, 4, 4],\n    [4, 3, 2],\n    [3, 2, 2],\n    [2, 2, 1],\n    [1, 2, 3],\n    [3, 1, 1],\n    [3, 1, 0],\n    [2, 2, 0],\n    [1, 1, 0],\n    [0, 0, 0]\n]\n\nfor (let i = 0; i < tests.length; i++) {\n    const [need, number] = tests[i]\n    testEats(need, number, need);\n    testEats2(need, number, need);\n}\n\nconsole.log('Done.');\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations, and \n   the second list is a list of integers integer. Use the two given impart lists to build build up the algebric \n   expression and return the evaluation of this expression formula. \n\n   The basic algebra operations operation: \n   Addition accession (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations, and \n   the second list is a list of integers integer. Use the two given impart lists to build build up the algebric \n   expression and return the evaluation of this expression formula. \n\n   The basic algebra operations operation: \n   Addition accession (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    if (!operator ||!operand ||!operand[0] ||!operand[1]) {\n        return undefined;\n    }\n\n    const operandLen = operand.length;\n    const operatorLen = operator.length;\n    let operandIndex = 0;\n    let operatorIndex = 0;\n\n    const result = [];\n    while (operatorIndex < operatorLen) {\n        let operatorValue = operator[operatorIndex];\n        const operandValue = operand[operandIndex];\n        let resultValue = undefined;\n\n        if (operatorValue === '+') {\n            resultValue = operandValue + operand[operandIndex + 1];\n        }\n        else if (operatorValue === '-') {\n            resultValue = operandValue - operand[operandIndex + 1];\n        }\n        else if (operatorValue === '*') {\n            resultValue = operandValue * operand[operandIndex + 1];\n        }\n        else if (operatorValue === '//') {\n            resultValue = operandValue // operand[operandIndex + 1];\n        }\n        else if (operatorValue === '**') {\n            resultValue = Math.pow(operandValue, operand[operandIndex + 1]);\n        }\n\n        result.push(resultValue);\n        operandIndex += 2;\n        operatorIndex++;\n    }\n\n    return result;\n};\n\n// console.log(doAlgebra([], [2, 3, 4, 5]));\n// console.log(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]));\n// console.log(doAlgebra(['*', '**'], [2, 3, 4, 5]));\nconsole.log(doAlgebra([], [1, 2, 3, 4]));\nconsole.log(doAlgebra(['+', '*', '-'], [1, 2, 3, 4]));\nconsole.log(doAlgebra(['+', '*', '-'], [1, 2, 3, 4, 5]));\nconsole.log(doAlgebra(['*', '**'], [1, 2, 3, 4, 5]));\nconsole.log(doAlgebra(['*', '**'], [1, 2, 3, 4]));\nconsole.log(doAlgebra(['*', '**'], [1, 2, 3]));\nconsole.log(doAlgebra(['*', '**'], [1, 2]));\nconsole.log(doAlgebra(['*', '**'], [1]));\nconsole.log(doAlgebra(['*', '**'], []));\nconsole.log(doAlgebra(['*', '**'], [1, 2, 3]));\nconsole.log(doAlgebra(['*', '**'], [1, 2, 3, 4]));\nconsole.log(doAlgebra(['*', '**'], [1, 2, 3, 4, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse turn back its case from lower gloomy to upper or vise versa, \n   otherwise keep sustain it as it is. \n   If the string contains hold no letters, reverse overrule the string. \n   The function should return the resulted string chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse turn back its case from lower gloomy to upper or vise versa, \n   otherwise keep sustain it as it is. \n   If the string contains hold no letters, reverse overrule the string. \n   The function should return the resulted string chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let a = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '#') {\n      a = [];\n      continue;\n    }\n    a.push(s[i]);\n  }\n  a.reverse();\n  let b = [];\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '#') {\n      b = [];\n      continue;\n    }\n    b.push(a[i]);\n  }\n  return b.reverse().join('');\n}\n\nconsole.log(solve('#a@C'));<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const bytes = new Uint8Array(text.length);\n  const bytesLength = text.length;\n  for (let i = 0; i < bytesLength; i++) {\n    bytes[i] = text.charCodeAt(i);\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(bytes, 'binary', 'hex');\n  return md5.digest('hex');\n}\n\nmodule.exports = stringToMd5;<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers integer a and b, return the even digits digit between a\n   and b, in ascending order holy order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers integer a and b, return the even digits digit between a\n   and b, in ascending order holy order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const r = []\n  while (a <= b) {\n    r.push(a % 10)\n    a = Math.floor(a / 10)\n  }\n  return r\n}\n\nmodule.exports = generateIntegers\n<|endoftext|>"}
