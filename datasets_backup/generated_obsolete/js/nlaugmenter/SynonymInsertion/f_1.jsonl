{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const diff = max - min;\n  return numbers.some(num => Math.abs(num - min) < threshold * diff);\n};\n\n/*\n  Check if a number is in the list of numbers.\n  >>> hasElement(3, [1, 2, 3, 4, 5])\n  true\n  >>> hasElement(2, [1, 2, 3, 4, 5])\n  false\n  >>> hasElement(2, [1, 2])\n  false\n  >>> hasElement(3, [])\n  false\n  */\nconst hasElement = (num, numbers) => {\n  return numbers.indexOf(num) >= 0;\n};\n\nconst getFirstNotInList = (numbers) => {\n  const isInList = number => hasElement(number, numbers);\n  const isNotInList = number =>!hasElement(number, numbers);\n\n  const firstNotInList = getFirst(numbers, isInList);\n  const firstInList = getFirst(numbers, isNotInList);\n\n  if (firstNotInList === firstInList) {\n    throw new Error('Cannot find the first number not in list.');\n  }\n  return firstNotInList;\n};\n\n/*\n  Get first number from list that has a property\n  >>> getFirstNumber({a: 1, b: 2}, 'a')\n  1\n  >>> getFirstNumber({a: 1, b: 2}, 'c')\n  undefined\n  */\nconst getFirstNumber = (numbers, prop) => {\n  const isNumber = number => typeof number === 'number';\n  const hasProp = number => numbers[prop] === number;\n  const isNotNumber = number =>!isNumber(number);\n  const firstNumber = getFirst(numbers, hasProp, isNumber, isNotNumber);\n  return firstNumber;\n};\n\nconst getFirst = (numbers, predicate,...predicates) => {\n  const isFirst = predicate(numbers[0]);\n  const isNotFirst = predicate(numbers[1]);\n  const first = numbers.find(predicate);\n\n  if (isFirst === false && isNotFirst === false) {\n    throw new Error('Cannot find the first number');\n  }\n  return first;\n};\n\nmodule.exports = {\n  getFirst,\n  hasCloseElements,\n  hasElement,\n  getFirstNumber,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   separate freestanding those group into separate strings string section and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   separate freestanding those group into separate strings string section and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  if (paren_string === '') {\n    return []\n  }\n  const parens = paren_string.split('')\n  const last_opening_paren = parens[parens.length - 1]\n  const opening_braces = parens.filter((char) => char === '(')\n  const opening_parens = opening_braces.filter((char) => char!== last_opening_paren)\n  const closing_braces = parens.filter((char) => char === ')')\n  const closing_parens = closing_braces.filter((char) => char!== last_opening_paren)\n  const opening_parens_are_balanced = opening_braces.every((char) => char === '(')\n  const opening_parens_are_balanced = opening_braces.every((char) => char === ')')\n  const closing_parens_are_balanced = closing_braces.every((char) => char === ')')\n  if (opening_parens_are_balanced && closing_parens_are_balanced) {\n    return opening_parens.concat(closing_parens)\n  }\n  return []\n}\n\n/* Input to this function is a string string section containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   return the list of those. Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> separateParenGroups('()()())')\n  ['()()()()', '(())()', '()(())', '(())()']\n  */\nconst separateSection = (paren_string) => {\n  if (paren_string === '') {\n    return ''\n  }\n  const parens = paren_string.split('')\n  const last_opening_paren = parens[parens.length - 1]\n  const opening_braces = parens.filter((char) => char === '(')\n  const opening_parens = opening_braces.filter((char) => char!== last_opening_paren)\n  const closing_braces = parens.filter((char) => char === ')')\n  const closing_parens = closing_braces.filter((char) => char!== last_opening_paren)\n  const opening_parens_are_balanced = opening_braces.every((char) => char === '(')\n  const opening_parens_are_balanced = opening_braces.every((char) => char === ')')\n  const closing_parens_are_balanced = closing_braces.every((char) => char === ')')\n  if (opening_parens_are_balanced && closing_parens_are_balanced) {\n    return opening_parens.concat(closing_parens)\n  }\n  return ''\n}\n\nconst findSection = (paren_string) => {\n  if (paren_string === '') {\n    return []\n  }\n  const parens = paren_string.split('')\n  const last_opening_paren = parens[parens.length - 1]\n  const opening_braces = parens.filter((char) => char === '(')\n  const opening_parens = opening_braces.filter((char) => char!== last_opening_paren)\n  const closing_braces = parens.filter((char) => char === ')')\n  const closing_parens = closing_braces.filter((char) => char!== last_opening_paren)\n  const opening_parens_are_balanced = opening_braces.every((char) => char === '(')\n  const opening_parens_are_balanced = opening_braces.every((char) => char === ')')\n  const closing_parens_are_balanced = closing_braces.every((char) => char === ')')\n  if (opening_parens_are_balanced && closing_parens_are_balanced) {\n    return opening_parens\n  }\n  return []\n}\n\nmodule.exports = {\n  separateParenGroups,\n  separateSection,\n  findSection\n}<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating float point number, it can be decomposed disintegrate into \n   and integer part (largest bombastic integer smaller than given give number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating float point number, it can be decomposed disintegrate into \n   and integer part (largest bombastic integer smaller than given give number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    const i = Math.floor(number);\n    const decimal = number - i;\n    return decimal < 0.5? i : i + 1;\n}\n\n/**\n   Given an array of numbers, return a dictionary of tuples representing the numbers in the array\n   and the number of occurrences of that number.\n  \n   Example:\n   >>> array = [1, 2, 2, 2, 3, 4, 5, 5, 6]\n   >>> countArray(array)\n   {1: 2, 2: 3, 3: 2, 4: 1, 5: 2, 6: 1}\n   \n   >>> array = [1, 1, 2, 2, 3, 4, 5, 5, 6]\n   >>> countArray(array)\n   {1: 2, 2: 3, 3: 2, 4: 1, 5: 2, 6: 1}\n  \n   >>> array = [1, 1, 1, 1, 1, 1, 1, 1, 1]\n   >>> countArray(array)\n   {1: 1}\n  \n   >>> array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n   >>> countArray(array)\n   {1: 2, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1}\n  \n   >>> array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n   >>> countArray(array)\n   {1: 2, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1, 15: 1, 16: 1, 17: 1, 18: 1, 19: 1, 20: 1}\n   \n   >>> array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account that starts startle with \n   zero balance. Your task is to detect if at any point degree the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account that starts startle with \n   zero balance. Your task is to detect if at any point degree the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let current = 0\n  let previous = 0\n  const steps = operations.length\n\n  for (let i = 0; i < steps; i++) {\n    const next = operations[i]\n    if (next < 0) {\n      current = previous\n      return true\n    }\n    previous = current\n    current = previous + next\n  }\n  return false\n}\n\nconsole.log(belowZero([1, 2, 3]))\nconsole.log(belowZero([1, 2, -4, 5]))\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const numbersAsArray = numbers.slice(0);\n  let sum = 0;\n  let sumSquared = 0;\n  let median;\n  for (let i = 0; i < numbersAsArray.length; i++) {\n    sum += numbersAsArray[i];\n    sumSquared += Math.pow(numbersAsArray[i], 2);\n  }\n  median = Math.sqrt(sumSquared / numbersAsArray.length);\n  const sumDividedByNumberOfNumbers = sum / numbersAsArray.length;\n  const mean = sumDividedByNumberOfNumbers;\n  const mad = (Math.abs(mean - numbers[0]));\n  return mad;\n};\n\n// Test the function\nconsole.log(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]));\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements element of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number 'delimeter' between every two consecutive elements element of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let res = [];\n  let i = 0;\n  while (i < numbers.length) {\n    let next = i + 1;\n    if (next < numbers.length) {\n      res.push(numbers[i]);\n      res.push(delimeter);\n      res.push(numbers[next]);\n      i = next;\n    } else {\n      res.push(numbers[i]);\n      res.push(delimeter);\n      res.push(numbers[i]);\n    }\n  }\n  return res;\n};\n\n/**\n  * @param {number[]} numbers\n  * @param {number} x\n  * @return {number[]}\n  *\n  * @description\n  * Given an array of numbers and a value x, partition the array such that\n  * elements less than x come before elements greater than or equal to x.\n  * Return the partitioned array.\n  *\n  * For example,\n  * given [3, 4, 5, 1, 2], and x = 3,\n  * return [ [ 1, 2 ], [ 3, 4, 5 ] ].\n  *\n  * Follow up:\n  * Could you solve it in O(n) time and O(1) space?\n  */\nconst partition = (numbers, x) => {\n  let res = [];\n  let partitioned = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < x) {\n      res.push(numbers[i]);\n      partitioned.push(res);\n      res = [];\n    } else {\n      res.push(numbers[i]);\n    }\n  }\n  res.push(numbers[numbers.length - 1]);\n  partitioned.push(res);\n  return partitioned;\n};\n\nmodule.exports = {\n  intersperse,\n  partition,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string drawstring represented multiple groups group for nested parentheses separated classify by spaces. \n   For each of the group, output the deepest thick level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string drawstring represented multiple groups group for nested parentheses separated classify by spaces. \n   For each of the group, output the deepest thick level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let levels = [];\n  let current_level = 0;\n  let depth = 0;\n  let prev_depth = 0;\n  let parenthesis_count = 0;\n  let prev_depth_parenthesis = 0;\n  let prev_depth_parenthesis_string = '';\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === ')') {\n      if (paren_string[i - 1] === '(') {\n        depth = current_level + 1;\n        current_level--;\n      }\n    } else if (paren_string[i] === '(') {\n      if (paren_string[i - 1] === ')') {\n        depth = current_level;\n        current_level++;\n      } else if (paren_string[i - 1] === '(') {\n        depth = current_level + 1;\n        current_level++;\n      }\n      parenthesis_count++;\n    } else if (paren_string[i] === ')') {\n      if (paren_string[i - 1] === ')') {\n        depth = current_level;\n        current_level--;\n      }\n    }\n    if (parenthesis_count > 0) {\n      prev_depth = depth;\n      prev_depth_parenthesis = prev_depth_parenthesis_string;\n      prev_depth_parenthesis_string = paren_string[i - 1];\n    }\n  }\n  if (parenthesis_count > 0) {\n    levels.push(prev_depth_parenthesis);\n  }\n  return levels;\n};\n\n/* Output is a list of all of the levels of nesting of parentheses.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParensNoParens = (paren_string) => {\n  let levels = [];\n  let current_level = 0;\n  let depth = 0;\n  let parenthesis_count = 0;\n  let prev_depth = 0;\n  let prev_depth_parenthesis = 0;\n  let prev_depth_parenthesis_string = '';\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === ')') {\n      if (paren_string[i - 1] === '(') {\n        depth = current_level + 1;\n        current_level--;\n      }\n    } else if (paren_string[i] === '(') {\n      if (paren_string[i - 1] === ')') {\n        depth = current_level;\n        current_level++;\n      } else if (paren_string[i - 1] === '(') {\n        depth = current_level + 1;\n        current_level++;\n      }\n      parenthesis_count++;\n    } else if (paren_string[i] === ')') {\n      if (paren_string[i - 1] === ')') {\n        depth = current_level;\n        current_level--;\n      }\n    }\n    if (parenthesis_count > 0) {\n      prev_depth = depth;\n      prev_depth_parenthesis = prev_depth_parenthesis_string;\n      prev_depth_parenthesis_string = paren_string[i - 1];\n    }\n  }\n  if (parenthesis_count > 0) {\n    levels.push(prev_depth_parenthesis);\n  }\n  return levels;\n};\n\n// test\n\nconst tests = [\n  parseNestedParens('(()()) ((())) () ((())()())'),\n  parseNestedParens('(()()) ((())) () ((())()())'),\n  parseNestedParens('()()'),\n  parseNestedParens('()'),\n  parseNestedParens('()()'),\n  parseNestedParens('(())()'),\n  parseNestedParens('(()())')\n];\n\ntests.forEach((test) => {\n  const output = parseNestedParensNoParens(test);\n  console.log(test, output);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain check given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contain check given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const substr = substr => new RegExp(`[${substr}]`, 'i');\n\n  return strings.filter(\n    (str) =>\n      str.split('').every(\n        (c) =>\n          substr(str.split('').map(() => c).join('')) === substr(str)\n      )\n  );\n};\n\n/*\n  Takes a string and returns the length of that string\n  >>> length('abc')\n  3\n  >>> length('')\n  0\n  >>> length('1234')\n  4\n  */\nconst length = (str) => str.length;\n\n/*\n  Takes a string and returns a string with the first letter capitalized\n  >>> capitalize('abc')\n  'ABC'\n  >>> capitalize('')\n  ''\n  >>> capitalize('1234')\n  '1234'\n  */\nconst capitalize = (str) => {\n  return str.length? str[0].toUpperCase() + str.slice(1) : str;\n};\n\n/*\n  Takes a string and returns a string with the first letter lowercase\n  >>> lowercase('ABC')\n  'abc'\n  >>> lowercase('')\n  ''\n  >>> lowercase('1234')\n  '1234'\n  */\nconst lowercase = (str) => {\n  return str.length? str[0].toLowerCase() + str.slice(1) : str;\n};\n\n/*\n  Takes a string and returns a string with the first letter uppercased\n  >>> uppercase('abc')\n  'ABC'\n  >>> uppercase('')\n  ''\n  >>> uppercase('1234')\n  '1234'\n  */\nconst uppercase = (str) => {\n  return str.length? str[0].toUpperCase() + str.slice(1) : str;\n};\n\n/*\n  Takes a string and returns a string with the first letter reversed\n  >>> reverse('ABC')\n  'CBA'\n  >>> reverse('')\n  ''\n  >>> reverse('1234')\n  '4321'\n  */\nconst reverse = (str) => {\n  return str.length? str.split('').reverse().join('') : str;\n};\n\n/*\n  Takes a string and returns a string with all words capitalized\n  >>> capitalizeAll('abc')\n  'ABC'\n  >>> capitalizeAll('')\n  ''\n  >>> capitalizeAll('1234')\n  '1234'\n  */\nconst capitalizeAll = (str) => {\n  return str.split(' ').map(capitalize).join(' ');\n};\n\n/*\n  Takes a string and returns a string with all words lowercased\n  >>> lowercaseAll('ABC')\n  'abc'\n  >>> lowercaseAll('')\n  ''\n  >>> lowercaseAll('1234')\n  '1234'\n  */\nconst lowercaseAll = (str) => {\n  return str.split(' ').map(lowercase).join(' ');\n};\n\n/*\n  Takes a string and returns a string with all words uppercased\n  >>> uppercaseAll('ABC')\n  'ABC'\n  >>> uppercaseAll('')\n  ''\n  >>> uppercaseAll('1234')\n  '1234'\n  */\nconst uppercaseAll = (str) => {\n  return str.split(' ').map(uppercase).join(' ');\n};\n\n/*\n  Takes a string and returns a string with all words reversed\n  >>> reverseAll('ABC')\n  'CBA'\n  >>> reverseAll('')\n  ''\n  >>> reverseAll('1234')\n  '4321'\n  */\nconst reverseAll = (str) => {\n  return str.split(' ').reverse().join(' ');\n};\n\n/*\n  Takes a string and returns a string with all words reversed\n  >>> reverseAll('ABC')\n  'CBA'\n  >>> reverseAll('')\n  ''\n  >>> reverseAll('1234')\n  '4321'\n  */\nconst capitalizeAll = (str) => {\n  return str.split(' ').map(capitalize).join(' ');\n};\n\n/*\n  Takes a string and returns a string with all words reversed\n  >>> reverseAll('ABC')\n  'CBA'\n  >>> reverseAll('')\n  ''\n  >>> reverseAll('1234')\n  '4321'\n  */\nconst lowercaseAll = (str) => {\n  return str.split(' ').map(lowercase).join(' ');\n};\n\n/*\n  Takes a string and returns a string with all words reversed\n  >>> reverseAll('ABC')\n  'CBA'\n  >>> reverseAll('')\n  ''\n  >>> reverseAll('1234')\n  '4321'\n  */\nconst uppercaseAll = (str) => {\n  return str.split(' ').map(uppercase).join(' ');\n};\n\nmodule.exports = {\n  capitalize,\n  capitalizeAll,\n  lowercase,\n  lowercaseAll,\n  reverse,\n  reverseAll,\n  uppercase,\n  uppercaseAll\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting consist of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting consist of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  let sum = 0\n  let product = 1\n  numbers.forEach((num, index) => {\n    sum += num\n    if (index < numbers.length - 1) {\n      product *= num\n    }\n  })\n  return (sum, product)\n}\n\nconst testSumProduct = () => {\n  expect(sumProduct([], 2)).toEqual((0, 1))\n  expect(sumProduct([1, 2, 3, 4], 2)).toEqual((10, 24))\n}\n\ntestSumProduct()\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate render a list of rolling maximum maximal element found line up until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, generate render a list of rolling maximum maximal element found line up until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let i, j, k = 0, max, prevMax, temp;\n  const result = [];\n\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  for (i = 0; i < numbers.length; i++) {\n    j = i;\n    max = numbers[i];\n    while (j + 1 < numbers.length && max === numbers[j + 1]) {\n      j++;\n    }\n    prevMax = max;\n    while (j + 1 < numbers.length && j + 1 < i + k && max === numbers[j + 1]) {\n      j++;\n    }\n    temp = j + 1;\n    if (temp < i + k) {\n      while (i + k < temp) {\n        max = prevMax;\n        j = i;\n        while (j + 1 < numbers.length && max === numbers[j + 1]) {\n          j++;\n        }\n        prevMax = max;\n        while (j + 1 < numbers.length && j + 1 < i + k && max === numbers[j + 1]) {\n          j++;\n        }\n        temp = j + 1;\n      }\n      result.push(max);\n    }\n    k = temp - i;\n  }\n\n  return result;\n};\n\nexport default rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest light palindrome that begins with a supplied issue string.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n   - Append to the end conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest light palindrome that begins with a supplied issue string.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n   - Append to the end conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let lastChr = null;\n  let i = string.length - 1;\n  while (i >= 0) {\n    let chr = string[i];\n    if (lastChr && chr == lastChr) {\n      palindrome += chr;\n      i--;\n    } else {\n      lastChr = chr;\n      i--;\n      break;\n    }\n  }\n  return palindrome;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string bowed stringed instrument.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string bowed stringed instrument.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n    if (a === b) return a;\n    if (a.length === 0) return b;\n    if (b.length === 0) return a;\n\n    const first = a.charAt(0);\n    const second = b.charAt(0);\n    const firstBits = first.charCodeAt(0);\n    const secondBits = second.charCodeAt(0);\n\n    const isFirst = firstBits & 1;\n    const isSecond = secondBits & 1;\n\n    return isFirst!== isSecond? first : second;\n};\n\n// console.log(stringXor('010', '110'));\n// console.log(stringXor('01010101', '01010101'));\n\nexport {stringXor};<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case sheath of multiple \n   strings of the same length. Return null nothing in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case sheath of multiple \n   strings of the same length. Return null nothing in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) return null;\n  let maxLength = 0;\n  let longestStr = '';\n  strings.forEach((s) => {\n    if (s.length > maxLength) {\n      maxLength = s.length;\n      longestStr = s;\n    }\n  });\n  return longestStr;\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common coarse divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common coarse divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n    if (b === 0) {\n        return a;\n    }\n    return greatestCommonDivisor(b, a % b);\n};\n\n// Return a least common multiple of two integers a and b\nconst leastCommonMultiple = (a, b) => {\n    return a * greatestCommonDivisor(a, b)\n};\n\n// Return a number whose value is the greatest common divisor of a and b\nconst gcd = (a, b) => {\n    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return a;\n    }\n    if (a < b) {\n        return gcd(b, a);\n    }\n\n    const temp = a;\n    a = b;\n    b = temp;\n    while (a > 1) {\n        const remainder = a % b;\n        a = b;\n        b = remainder;\n    }\n    return b;\n};\n\n// Return a number whose value is the least common multiple of a and b\nconst lcm = (a, b) => {\n    return a * leastCommonMultiple(a, b);\n};\n\nmodule.exports = {\n    greatestCommonDivisor,\n    leastCommonMultiple,\n    gcd,\n    lcm\n};\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest long of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shortest to longest long of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  if (!string || typeof string!=='string') {\n    return [];\n  }\n\n  const result = [];\n  let s = string.toLowerCase();\n  let current = s;\n  let prefix = '';\n\n  while (s.length > 0) {\n    prefix += s[0];\n    current = s.slice(1);\n    result.push(prefix);\n  }\n\n  return result;\n};\n\n/**\n  * Return a list of all suffixes from shortest to longest long of the input string\n  * @param {string} string The string to return the suffixes from\n  * @return {Array} The list of all suffixes from the shortest to the longest long of the input string\n  * @example\n  * // Return list of all suffixes from shortest to longest long of the input string\n  * allSuffixes('abc')\n  * // => ['c', 'b', 'ac', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  if (!string || typeof string!=='string') {\n    return [];\n  }\n\n  const result = [];\n  let s = string.toLowerCase();\n  let current = s;\n  let suffix = '';\n\n  while (s.length > 0) {\n    suffix = s.slice(-1);\n    current = s.slice(0, -1);\n    result.push(suffix);\n  }\n\n  return result;\n};\n\nexport default {\n  allPrefixes,\n  allSuffixes\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let string = ''\n  for (let i = 0; i < n; i++) {\n    string += `${i}`\n  }\n  return string\n}\n\n/**\n  Return a string containing a number with the appropriate number of leading zeroes.\n  >>> zeroes(0)\n  '0'\n  >>> zeroes(1)\n  '00'\n  >>> zeroes(2)\n  '000'\n  >>> zeroes(3)\n  '0000'\n  >>> zeroes(4)\n  '00000'\n  >>> zeroes(5)\n  '000000'\n  */\nconst zeroes = (n) => {\n  let zeroes = ''\n  for (let i = 0; i < n; i++) {\n    zeroes += `0`\n  }\n  return zeroes\n}\n\n/**\n  Return a string containing a number with the appropriate number of trailing zeroes.\n  >>> zeros(0)\n  '0'\n  >>> zeros(1)\n  '00'\n  >>> zeros(2)\n  '000'\n  >>> zeros(3)\n  '0000'\n  >>> zeros(4)\n  '00000'\n  >>> zeros(5)\n  '000000'\n  */\nconst zeroesReverse = (n) => {\n  let zeroes = ''\n  for (let i = 0; i < n; i++) {\n    zeroes += `0`\n  }\n  return zeroes\n}\n\n/**\n  Return a string containing a number with the appropriate number of leading and trailing zeroes.\n  >>> zeros(0)\n  '0'\n  >>> zeros(1)\n  '00'\n  >>> zeros(2)\n  '000'\n  >>> zeros(3)\n  '0000'\n  >>> zeros(4)\n  '00000'\n  >>> zeros(5)\n  '000000'\n  */\nconst zeroesBoth = (n) => {\n  let zeroes = ''\n  for (let i = 0; i < n; i++) {\n    zeroes += `0`\n  }\n  return zeroes\n}\n\n/**\n  Return a string containing a number with the appropriate number of leading and trailing zeroes.\n  >>> zeroesReverse(0)\n  '0'\n  >>> zeroesReverse(1)\n  '00'\n  >>> zeroesReverse(2)\n  '000'\n  >>> zeroesReverse(3)\n  '0000'\n  >>> zeroesReverse(4)\n  '00000'\n  >>> zeroesReverse(5)\n  '000000'\n  */\nconst zeroesReverseBoth = (n) => {\n  let zeroes = ''\n  for (let i = 0; i < n; i++) {\n    zeroes += `0`\n  }\n  return zeroes\n}\n\n/**\n  Return a string containing a number with the appropriate number of leading and trailing zeroes.\n  >>> zeroesBoth(0)\n  '0'\n  >>> zeroesBoth(1)\n  '00'\n  >>> zeroesBoth(2)\n  '000'\n  >>> zeroesBoth(3)\n  '0000'\n  >>> zeroesBoth(4)\n  '00000'\n  >>> zeroesBoth(5)\n  '000000'\n  */\nconst zeroesBothReverse = (n) => {\n  let zeroes = ''\n  for (let i = 0; i < n; i++) {\n    zeroes += `0`\n  }\n  return zeroes\n}\n\n/**\n  Return a string containing a number with the appropriate number of leading and trailing zeroes.\n  >>> zeroesBothReverse(0)\n  '0'\n  >>> zeroesBothReverse(1)\n  '00'\n  >>> zeroesBothReverse(2)\n  '000'\n  >>> zeroesBothReverse(3)\n  '0000'\n  >>> zeroesBothReverse(4)\n  '00000'\n  >>> zeroesBothReverse(5)\n  '000000'\n  */\nconst zeroesBothReverseBoth = (n) => {\n  let zeroes = ''\n  for (let i = 0; i < n; i++) {\n    zeroes += `0`\n  }\n  return zeroes\n}\n\nexport {\n  stringSequence,\n  zeroes,\n  zeroesReverse,\n  zeroesBoth,\n  zeroesReverseBoth,\n  zeroesBothReverse\n}\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct clear-cut characters (regardless of case sheath) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many distinct clear-cut characters (regardless of case sheath) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set(string.toLowerCase());\n  return charSet.size;\n};\n\nconst countDistinctCharacters2 = (string) => {\n  const charSet = new Set(string.toLowerCase());\n  const charSet2 = new Set(string.toUpperCase());\n  return charSet.size + charSet2.size;\n};\n\nconst countDistinctCharacters3 = (string) => {\n  const charSet = new Set(string.toLowerCase());\n  const charSet2 = new Set(string.toUpperCase());\n  return charSet.size + charSet2.size + charSet.size;\n};\n\nconst countDistinctCharacters4 = (string) => {\n  const charSet = new Set(string.toLowerCase());\n  const charSet2 = new Set(string.toUpperCase());\n  const charSet3 = new Set(string.toLowerCase().toUpperCase());\n  return charSet.size + charSet2.size + charSet3.size;\n};\n\nconst countDistinctCharacters5 = (string) => {\n  const charSet = new Set(string.toLowerCase());\n  const charSet2 = new Set(string.toUpperCase());\n  const charSet3 = new Set(string.toLowerCase().toUpperCase());\n  const charSet4 = new Set(string.toUpperCase().toLowerCase());\n  return charSet.size + charSet2.size + charSet3.size + charSet4.size;\n};\n\nconst countDistinctCharacters6 = (string) => {\n  const charSet = new Set(string.toLowerCase());\n  const charSet2 = new Set(string.toUpperCase());\n  const charSet3 = new Set(string.toLowerCase().toUpperCase());\n  const charSet4 = new Set(string.toUpperCase().toLowerCase());\n  const charSet5 = new Set(string.toLowerCase().toUpperCase().toLowerCase());\n  return charSet.size + charSet2.size + charSet3.size + charSet4.size + charSet5.size;\n};\n\nconst countDistinctCharacters7 = (string) => {\n  const charSet = new Set(string.toLowerCase());\n  const charSet2 = new Set(string.toUpperCase());\n  const charSet3 = new Set(string.toLowerCase().toUpperCase());\n  const charSet4 = new Set(string.toUpperCase().toLowerCase());\n  const charSet5 = new Set(string.toLowerCase().toUpperCase().toLowerCase());\n  const charSet6 = new Set(string.toUpperCase().toLowerCase().toUpperCase());\n  return charSet.size + charSet2.size + charSet3.size + charSet4.size + charSet5.size + charSet6.size;\n};\n\nconst countDistinctCharacters8 = (string) => {\n  const charSet = new Set(string.toLowerCase());\n  const charSet2 = new Set(string.toUpperCase());\n  const charSet3 = new Set(string.toLowerCase().toUpperCase());\n  const charSet4 = new Set(string.toUpperCase().toLowerCase());\n  const charSet5 = new Set(string.toLowerCase().toUpperCase().toLowerCase());\n  const charSet6 = new Set(string.toUpperCase().toLowerCase().toUpperCase());\n  const charSet7 = new Set(string.toLowerCase().toUpperCase().toUpperCase().toLowerCase());\n  return charSet.size + charSet2.size + charSet3.size + charSet4.size + charSet5.size + charSet6.size + charSet7.size;\n};\n\nconst countDistinctCharacters9 = (string) => {\n  const charSet = new Set(string.toLowerCase());\n  const charSet2 = new Set(string.toUpperCase());\n  const charSet3 = new Set(string.toLowerCase().toUpperCase());\n  const charSet4 = new Set(string.toUpperCase().toLowerCase());\n  const charSet5 = new Set(string.toLowerCase().toUpperCase().toLowerCase());\n  const charSet6 = new Set(string.toUpperCase().toLowerCase().toUpperCase());\n  const charSet7 = new Set(string.toLowerCase().toUpperCase().toUpperCase().toLowerCase());\n  const charSet8 = new Set(string.toUpperCase().toLowerCase().toUpperCase().toUpperCase());\n  return charSet.size + charSet2.size + charSet3.size + charSet4.size + charSet5.size + charSet6.size + charSet7.size + charSet8.size;\n};\n\nexport { countDistinctCharacters, countDistinctCharacters2, countDistinctCharacters3, countDistinctCharacters4, countDistinctCharacters5, countDistinctCharacters6, countDistinctCharacters7, countDistinctCharacters8, countDistinctCharacters9 };\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string drawstring representing musical melodious notes in a special extra ASCII format. \n   Your task job is to parse this string and return list of integers integer corresponding equate to how many beats does each \n   not last. \n\n   Here is a legend caption: \n  ' o' - whole solid note, lasts four beats \n  ' o|' - half one-half note eminence, lasts survive two beats \n  ' .|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string drawstring representing musical melodious notes in a special extra ASCII format. \n   Your task job is to parse this string and return list of integers integer corresponding equate to how many beats does each \n   not last. \n\n   Here is a legend caption: \n 'o' - whole solid note, lasts four beats \n 'o|' - half one-half note eminence, lasts survive two beats \n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const all_numbers = {};\n  const split_string = music_string.split('');\n  const note_list = [];\n\n  // loop through string\n  for (let i = 0; i < split_string.length; i++) {\n    const current_note = split_string[i];\n\n    if (current_note === 'o') {\n      note_list.push(1);\n    } else if (current_note === 'o|') {\n      note_list.push(2);\n    } else if (current_note === '.') {\n      note_list.push(3);\n    } else {\n      note_list.push(4);\n    }\n  }\n\n  const note_list_final = note_list.reduce((a, b) => a + b, 0);\n\n  return note_list_final;\n};\n\n/* Input to this function is a string drawstring representing musical melodious notes in a special extra ASCII format. \n   Your task job is to parse this string and return list of integers integer corresponding to how many beats does each \n   not last. \n\n   Here is a legend caption: \n 'o' - whole solid note, lasts four beats \n 'o|' - half one-half note eminence, lasts survive two beats \n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic2 = (music_string) => {\n  const note_list = [];\n\n  const split_string = music_string.split('');\n  let current_note = split_string[0];\n  let current_index = 0;\n\n  // loop through string\n  for (let i = 0; i < split_string.length; i++) {\n    const current_note = split_string[i];\n\n    if (current_note === 'o') {\n      note_list.push(1);\n    } else if (current_note === 'o|') {\n      note_list.push(2);\n    } else if (current_note === '.') {\n      note_list.push(3);\n    } else {\n      note_list.push(4);\n    }\n\n    current_index++;\n  }\n\n  const note_list_final = note_list.reduce((a, b) => a + b, 0);\n\n  return note_list_final;\n};\n\nmodule.exports = {\n  parseMusic,\n  parseMusic2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found find oneself in the original string. Count overlaping cases font.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substring can be found find oneself in the original string. Count overlaping cases font.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0\n  for (let i = 0; i < string.length; i++) {\n    let j = 0\n    while (j < substring.length && string[i + j] === substring[j]) {\n      j++\n    }\n    if (j === substring.length) {\n      count++\n    }\n  }\n  return count\n}\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string bowed stringed instrument with numbers sorted from smallest belittled to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space - delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string bowed stringed instrument with numbers sorted from smallest belittled to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let newNums = numbers.split(\" \")\n  newNums.sort((a, b) => a.localeCompare(b))\n  return newNums.join(\"\")\n}\n\nconsole.log(sortNumbers(\"three one five\"))\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select blue-ribbon and return two that are the closest to each \n   other and return them in order club (smaller number act, larger number numeral).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select blue-ribbon and return two that are the closest to each \n   other and return them in order club (smaller number act, larger number numeral).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  let num1 = sorted[0];\n  let num2 = sorted[1];\n  let dist1 = sorted[2];\n  let dist2 = sorted[3];\n  if (sorted[1] - sorted[0] < sorted[2] - sorted[1]) {\n    num1 = sorted[1];\n    num2 = sorted[0];\n    dist1 = sorted[3];\n    dist2 = sorted[2];\n  }\n  return [num1, num2, dist1, dist2];\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply put on a linear transform to that list,\n   such that the smallest little number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), apply put on a linear transform to that list,\n   such that the smallest little number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const unit = numbers[1] - numbers[0]\n  const rescaled = numbers.map((x) => x / unit)\n  return rescaled\n}\n\n/*\n  Given list of numbers (of at least two elements), apply put on a linear transform to that list,\n  such that the smallest little number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([0.25, 0.5, 0.75, 1.0, 1.25])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  const unit = numbers[1] - numbers[0]\n  const rescaled = numbers.map((x) => x * unit)\n  return rescaled\n}\n\n/*\n  Given list of numbers (of at least two elements), apply put on a linear transform to that list,\n  such that the smallest little number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([0.1, 0.2, 0.3, 0.4, 0.5])\n  [0.0, 0.2, 0.4, 0.6, 0.8]\n  >>> rescaleToUnit([0.5, 0.6, 0.7, 0.8, 0.9])\n  [0.0, 0.5, 0.7, 0.9, 1.0]\n  */\nconst rescaleToUnit3 = (numbers) => {\n  const unit = numbers[1] - numbers[0]\n  const rescaled = numbers.map((x) => x * unit)\n  return rescaled\n}\n\n/*\n  Given list of numbers (of at least two elements), apply put on a linear transform to that list,\n  such that the smallest little number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([0.1, 0.2, 0.3, 0.4, 0.5])\n  [0.0, 0.2, 0.4, 0.6, 0.8]\n  >>> rescaleToUnit([0.5, 0.6, 0.7, 0.8, 0.9])\n  [0.0, 0.5, 0.7, 0.9, 1.0]\n  */\nconst rescaleToUnit4 = (numbers) => {\n  const unit = numbers[1] - numbers[0]\n  const rescaled = numbers.map((x) => x * unit)\n  return rescaled\n}\n\n/*\n  Given list of numbers (of at least two elements), apply put on a linear transform to that list,\n  such that the smallest little number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([0.1, 0.2, 0.3, 0.4, 0.5])\n  [0.0, 0.2, 0.4, 0.6, 0.8]\n  >>> rescaleToUnit([0.5, 0.6, 0.7, 0.8, 0.9])\n  [0.0, 0.5, 0.7, 0.9, 1.0]\n  */\nconst rescaleToUnit5 = (numbers) => {\n  const unit = numbers[1] - numbers[0]\n  const rescaled = numbers.map((x) => x * unit)\n  return rescaled\n}\n\n/*\n  Given list of numbers (of at least two elements), apply put on a linear transform to that list,\n  such that the smallest little number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([0.1, 0.2, 0.3, 0.4, 0.5])\n  [0.0, 0.2, 0.4, 0.6, 0.8]\n  >>> rescaleToUnit([0.5, 0.6, 0.7, 0.8, 0.9])\n  [0.0, 0.5, 0.7, 0.9, 1.0]\n  */\nconst rescaleToUnit6 = (numbers) => {\n  const unit = numbers[1] - numbers[0]\n  const rescaled = numbers.map((x) => x / unit)\n  return rescaled\n}\n\n/*\n  Given list of numbers (of at least two elements), apply put on a linear transform to that list,\n  such that the smallest little number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([0.1, 0.2, 0.3, 0.4, 0.5])\n  [0.0, 0.2, 0.4, 0.6, 0.8]\n  >>> rescaleToUnit([0.5, 0.6, 0.7, 0.8, 0.9])\n  [0.0, 0.5, 0.7, 0.9, 1.0]\n  */\nconst rescaleToUnit7 = (numbers) => {\n  const unit = numbers[1] - numbers[0]\n  const rescaled = numbers.map((x) => x / unit)\n  return rescaled\n}\n\n/*\n  Given list of numbers (of at least two elements), apply put on a linear transform to that list,\n  such that the smallest little number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([0.1, 0.2, 0.3, 0.4, 0.5])\n  [0.0, 0.2, 0.4, 0.6, 0.8]\n  >>> rescaleToUnit([0.5, 0.6, 0.7, 0.8, 0.9])\n  [0.0, 0.5, 0.7, 0.9, 1.0]\n  */\nconst rescaleToUnit8 = (numbers) => {\n  const unit = numbers[1] - numbers[0]\n  const rescaled = numbers.map((x) => x * unit)\n  return rescaled\n}\n\n/*\n  Given list of numbers (of at least two elements), apply put on a linear transform to that list,\n"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": false, "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(\n    (value) => typeof value === 'number' &&!isNaN(value) &&!isInfinite(value)\n  );\n};\n\n// This is the actual benchmark.\nconst bench = (values, expected) => {\n  const result = filterIntegers(values);\n  if (result.length!== expected.length) {\n    throw new Error(\n      'Expected length of'+ expected.length +'but got'+ result.length\n    );\n  }\n};\n\n// Benchmarking results.\nbench([1, 2, 3, 'abc', {}, []]);\nbench(\n  [1, 2, 3, 'abc', {}, [1, 2, 3, 'abc', {}, []]],\n  [1, 2, 3]\n);\n\n// Benchmarking results.\nbench(\n  [1, 2, 3, 'abc', {}, [1, 2, 3, 'abc', {}, []]],\n  [1, 2, 3]\n);\n\n// Benchmarking results.\nbench([1, 2, 3, 'abc', {}, [1, 2, 3, 'abc', {}, []]], [1, 2, 3]);\n\n// Benchmarking results.\nbench(\n  [1, 2, 3, 'abc', {}, [1, 2, 3, 'abc', {}, []]],\n  [1, 2, 3]\n);\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given grant string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of given grant string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\n') {\n      len += 1;\n    }\n    else if (string[i] ==='') {\n      len += 1;\n    }\n    else {\n      len += 1;\n    }\n  }\n  return len;\n};\n\n/* Return given string with leading spaces\n  >>> strtrim('abc')\n  'abc'\n  >>> strtrim('  abc')\n  'abc'\n  >>> strtrim('abc ')\n  'abc'\n  */\nconst strtrim = (string) => {\n  let len = strlen(string);\n  if (len > 0) {\n    if (string[0] ==='') {\n      return string.substr(1);\n    }\n    else {\n      return string;\n    }\n  }\n  else {\n    return string;\n  }\n};\n\n/* Return given string with leading and trailing spaces\n  >>> strtrim('  abc')\n  'abc'\n  >>> strtrim('abc  ')\n  'abc'\n  */\nconst strtrimBoth = (string) => {\n  let len = strlen(string);\n  if (len > 0) {\n    if (string[0] ==='') {\n      if (string[len - 1] ==='') {\n        return string.substr(1);\n      }\n      else {\n        return string.substr(1, len - 1);\n      }\n    }\n    else {\n      if (string[len - 1] ==='') {\n        return string;\n      }\n      else {\n        return string.substr(0, len);\n      }\n    }\n  }\n  else {\n    return string;\n  }\n};\n\nmodule.exports = {\n  strlen,\n  strtrim,\n  strtrimBoth,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let i = 1,\n      x = n,\n      count = 0;\n  while (x > 0) {\n    if (n % x === 0) {\n      count = count + 1;\n    }\n    x = x / 2;\n  }\n  return count;\n};\n\n// console.log(largestDivisor(12));\nconsole.log(largestDivisor(15));\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors component of given integer in the order club from smallest to largest bombastic. \n   Each of the factors should be listed list number of times fourth dimension corresponding to how many times it appeares in factorization. \n   Input stimulation number phone number should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors component of given integer in the order club from smallest to largest bombastic. \n   Each of the factors should be listed list number of times fourth dimension corresponding to how many times it appeares in factorization. \n   Input stimulation number phone number should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let f = factor(n)\n  let s = []\n  for (let i = 0; i < f.length; i++) {\n    s.push(f[i].toString())\n  }\n  s.sort((a, b) => {\n    if (a[0] > b[0]) {\n      return 1\n    } else if (a[0] < b[0]) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return s\n}\n\nmodule.exports = factorize\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements element that occur more than once. \n   Keep prevent order of elements chemical element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements element that occur more than once. \n   Keep prevent order of elements chemical element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const temp = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (temp.indexOf(numbers[i]) === -1) {\n      temp.push(numbers[i])\n    }\n  }\n  return temp\n}\n\nexport {\n  removeDuplicates\n}\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, function(c) {\n    return c.toUpperCase()\n  })\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse('Hello')\n  'olleH'\n  >>> reverse('Hello World')\n 'dOLleH'\n  */\nconst reverse = (string) => {\n  return string.split('').reverse().join('')\n}\n\n/*\n  Given a string, return the string reversed, lowercase.\n  >>> reverse('Hello')\n  'oleH'\n  >>> reverse('Hello World')\n 'dOLleH'\n  */\nconst reverseLowercase = (string) => {\n  return string.split('').reverse().join('').toLowerCase()\n}\n\n/*\n  Given a string, return the string reversed, uppercase.\n  >>> reverse('Hello')\n  'OLEH'\n  >>> reverse('Hello World')\n 'DOLLEH'\n  */\nconst reverseUppercase = (string) => {\n  return string.split('').reverse().join('').toUpperCase()\n}\n\n/*\n  Given a string, return the string reversed, lowercase and uppercase.\n  >>> reverse('Hello')\n  'OLLEH'\n  >>> reverse('Hello World')\n  'DOLLEH'\n  */\nconst reverseUppercaseAndLowercase = (string) => {\n  return string.split('').reverse().join('').toUpperCase().toLowerCase()\n}\n\n/*\n  Given a string, return the string reversed, uppercase and lowercase.\n  >>> reverse('Hello')\n  'OLEH'\n  >>> reverse('Hello World')\n  'DOLLEH'\n  */\nconst reverseUppercaseAndLowercaseReversed = (string) => {\n  return string.split('').reverse().join('').toLowerCase().toUpperCase()\n}\n\n/*\n  Given a string, return the string reversed, uppercase and lowercase.\n  >>> reverse('Hello')\n  'OLEH'\n  >>> reverse('Hello World')\n  'DOLLEH'\n  */\nconst reverseUppercaseAndLowercaseReversedAndFlipped = (string) => {\n  return string.split('').reverse().join('').toLowerCase().toUpperCase().toLowerCase()\n}\n\n/*\n  Given a string, return the string reversed, uppercase and lowercase.\n  >>> reverse('Hello')\n  'OLEH'\n  >>> reverse('Hello World')\n  'DOLLEH'\n  */\nconst reverseUppercaseAndLowercaseReversedAndFlippedAndFlipped = (string) => {\n  return string.split('').reverse().join('').toUpperCase().toLowerCase().toUpperCase()\n}\n\n/*\n  Given a string, return the string reversed, uppercase and lowercase.\n  >>> reverse('Hello')\n  'OLEH'\n  >>> reverse('Hello World')\n  'DOLLEH'\n  */\nconst reverseUppercaseAndLowercaseReversedAndFlippedAndFlippedReversed = (string) => {\n  return string.split('').reverse().join('').toUpperCase().toLowerCase().toLowerCase()\n}\n\nmodule.exports = {\n  flipCase,\n  reverse,\n  reverseLowercase,\n  reverseUppercase,\n  reverseUppercaseAndLowercase,\n  reverseUppercaseAndLowercaseReversed,\n  reverseUppercaseAndLowercaseReversedAndFlipped,\n  reverseUppercaseAndLowercaseReversedAndFlippedAndFlipped,\n  reverseUppercaseAndLowercaseReversedAndFlippedAndFlippedReversed,\n  reverseUppercaseAndLowercaseReversedAndFlippedAndFlippedReversedReversed\n}\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = ''\n  strings.forEach(s => {\n    result += s\n  })\n  return result\n}\n\n/* Given a number, return the base-10 number, i.e. the integer part of\n  the number.  If the number is negative, return the negative base-10\n  number.  If the number is zero, return the base-10 number.  If the\n  number is NaN, return NaN. */\nconst intOf = (n) => {\n  return n | 0\n}\n\n/* Given a number, return the base-10 number, i.e. the integer part of\n  the number.  If the number is negative, return the negative base-10\n  number.  If the number is zero, return the base-10 number.  If the\n  number is NaN, return NaN. */\nconst uintOf = (n) => {\n  return n >>> 0\n}\n\n/* Return the number of bits set in n */\nconst bitCount = (n) => {\n  return (n & -n) - 1\n}\n\n/* Return the number of one-bits in n */\nconst popCount = (n) => {\n  return bitCount(~n)\n}\n\n/* Return the index of the first bit that is set in n */\nconst firstBit = (n) => {\n  return popCount(~n)\n}\n\n/* Return the index of the last bit that is set in n */\nconst lastBit = (n) => {\n  return bitCount(n) - 1\n}\n\n/* Given a number n, return the next highest number of the same base.\n  If n is zero, return zero.  If n is negative, return the same base\n  number.  If n is NaN, return NaN. */\nconst next = (n) => {\n  if (n === 0) return 0\n  if (n === -0) return -0\n  return (n >>> 0) + 1\n}\n\n/* Given a number n, return the next lowest number of the same base.\n  If n is zero, return zero.  If n is negative, return the same base\n  number.  If n is NaN, return NaN. */\nconst prev = (n) => {\n  if (n === 0) return 0\n  if (n === -0) return -0\n  return (n >>> 0) - 1\n}\n\n/* Given a number n, return the previous highest number of the same base.\n  If n is zero, return zero.  If n is negative, return the same base\n  number.  If n is NaN, return NaN. */\nconst prevp = (n) => {\n  if (n === 0) return 0\n  if (n === -0) return -0\n  return (n >>> 0) + 1\n}\n\n/* Given a number n, return the previous lowest number of the same base.\n  If n is zero, return zero.  If n is negative, return the same base\n  number.  If n is NaN, return NaN. */\nconst nextp = (n) => {\n  if (n === 0) return 0\n  if (n === -0) return -0\n  return (n >>> 0) - 1\n}\n\n/* Given two numbers, return the smaller of the two.  If either number\n  is NaN, return NaN.  Otherwise, return the smaller of the two\n  numbers. */\nconst min = (n, m) => {\n  if (n === m) return n\n  if (n === n) return m\n  if (n === m) return n\n  if (n === n) return m\n  if (n === m) return n\n  if (n === n) return m\n  return n\n}\n\n/* Given two numbers, return the larger of the two.  If either number\n  is NaN, return NaN.  Otherwise, return the larger of the two\n  numbers. */\nconst max = (n, m) => {\n  if (n === m) return n\n  if (n === n) return m\n  if (n === m) return n\n  if (n === n) return m\n  if (n === m) return n\n  if (n === n) return m\n  return m\n}\n\n/* Given a number, return the closest number to n that is just a\n  multiple of the number n is not.  If n is zero, return zero.  If n\n  is negative, return the same base number.  If n is NaN, return NaN.\n  Otherwise, return the same base number. */\nconst round = (n, base) => {\n  if (n === 0) return 0\n  if (n === -0) return -0\n  return Math.round(n / base) * base\n}\n\n/* Given a number, return the closest number to n that is a multiple of\n  the number n is not.  If n is zero, return zero.  If n is negative,\n  return the same base number.  If n is NaN, return NaN.  Otherwise,\n  return the same base number. */\nconst floor = (n, base) => {\n  if (n === 0) return 0\n  if (n === -0) return -0\n  return Math.floor(n / base) * base\n}\n\n/* Given a number, return the closest number to n that is a multiple of\n  the number n is not.  If n is zero, return zero.  If n is negative,\n  return the same base number.  If n is NaN, return NaN.  Otherwise,\n  return the same base number. */\nconst ceil = (n, base) => {\n  if (n === 0) return 0\n  if (n === -0) return -0\n  return Math.ceil(n / base) * base\n}\n\n/* Given a number, return the closest number to n that is an integer.\n  If n is zero, return zero.  If n is negative, return the same base\n  number.  If n is NaN, return NaN.  Otherwise, return the same base\n  number. */\nconst trunc = (n, base) => {\n  if (n === 0) return 0\n  if (n === -0) return -0\n  return Math.trunc(n / base) * base\n}\n\n/* Given a number, return the closest number to n that is"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start startle with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start startle with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string."}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const r = [];\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] > 0) {\n      r.push(l[i]);\n    }\n  }\n  return r;\n};\n\n/*\n  >>> getNegative([1, 2, 3, -2, -4, -5, -7, -9, -10])\n  [-2, -4, -5, -7, -9, -10]\n  >>> getNegative([-2, -1, 0, 1, 2])\n  [-2, -1, 0, 1, 2]\n  >>> getNegative([])\n  []\n  >>> getNegative([-2, -1, 0, 1, 2, 3, 4, 5, 6, 7])\n  [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7]\n  */\nconst getNegative = (l) => {\n  const r = [];\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] < 0) {\n      r.push(l[i]);\n    }\n  }\n  return r;\n};\n\n/*\n  >>> getSorted([4, 3, 2, 1, 5])\n  [1, 2, 3, 4, 5]\n  >>> getSorted([-3, -2, -1, 0, 1])\n  [-1, -2, -3, 0, 1]\n  >>> getSorted([-3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [-3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> getSorted([4, 5, 2, 3, 1])\n  [1, 2, 3, 4, 5]\n  */\nconst getSorted = (l) => {\n  const r = [];\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] >= 0) {\n      r.push(l[i]);\n    }\n  }\n  r.sort((a, b) => a - b);\n  return r;\n};\n\nmodule.exports = {\n  getPositive,\n  getNegative,\n  getSorted,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number phone number is prime, and false assumed otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number phone number is prime, and false assumed otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) return false;\n    i++;\n  }\n  return true;\n}\n\nconst sum = (a, b) => {\n  return a + b;\n}\n\nconst isOdd = (n) => {\n  return n % 2 === 1;\n}\n\nconst isEven = (n) => {\n  return n % 2 === 0;\n}\n\nconst getSum = (a, b) => {\n  return a + b;\n}\n\nconst isBetween = (a, b, c) => {\n  if (a < b && b < c) return true;\n  if (a > b && b > c) return true;\n  return false;\n}\n\nconst getOdd = (a, b) => {\n  return a + b;\n}\n\nconst getEven = (a, b) => {\n  return a + b;\n}\n\nconst getMax = (a, b) => {\n  if (a > b) return a;\n  else return b;\n}\n\nconst getMin = (a, b) => {\n  if (a < b) return a;\n  else return b;\n}\n\nconst getRange = (a, b) => {\n  if (a > b) return b - a;\n  else return a - b;\n}\n\nconst getMaxLength = (a, b) => {\n  return Math.max(a, b);\n}\n\nconst getMinLength = (a, b) => {\n  return Math.min(a, b);\n}\n\nconst getRangeLength = (a, b) => {\n  return getRange(a, b);\n}\n\nconst getMaxLengthRange = (a, b) => {\n  return getMaxLength(a, b);\n}\n\nconst getMinLengthRange = (a, b) => {\n  return getMinLength(a, b);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMinLengthRangeWithDefault = (a, b, c) => {\n  return getMinLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMinLengthRangeWithDefault = (a, b, c) => {\n  return getMinLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a, b, c) => {\n  return getMaxLength(a, b, c);\n}\n\nconst getMaxLengthRangeWithDefault = (a"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns return key only only zero point, even if there are many. \n   Moreover, findZero only takes aim list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns return key only only zero point, even if there are many. \n   Moreover, findZero only takes aim list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  return Math.round(Math.abs(xs.reduce((prev, item, index) = > { \n    return prev + item * Math.pow(x, index);\n  }, 0)));\n}\n\nconsole.log(findZero([1, 2, -2, -1, 1]));\nconsole.log(findZero([-6, 11, -6, 1, -1, -1, -2, 2, -2, -3, 1, 3, 3, -3, -4, -5, 5, -5, 4, 2, -2, -4, -2, 3, 2, -4, 3, 2, -1, -2, 1, 2, -2, 2, 1, -2, -1, 1, -2, -3, 3, 3, -2, -3, 3, 2, -3, -2, 2, -1, -2, 1, 2, -2, -3, 3, 3, -2, -2, 2, -2, -3, 3, 2, -2, -2, 2, -2, -1, 1, 2, -1, 1, -1, -2, 1, 2, -2, -2, 1, -1, -1, 1, -1, -2, 1, 2, -1, -1, 1, 2, -2, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1,"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal adequate \n   to the values of the corresponding represent indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal adequate \n   to the values of the corresponding represent indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  return l.slice().sort((a, b) => {\n    const ai = a % 3;\n    const bi = b % 3;\n    if (ai === bi) return 0;\n    if (ai > bi) return 1;\n    return -1;\n  });\n}\n\n/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal adequate \n   to the values of the corresponding represent indicies of l, but sorted.\n  >>> sortFifth([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> sortFifth([3, 4, 5, 6, 7, 8, 9, 10])\n  [3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst sortFifth = (l) => {\n  return l.slice().sort((a, b) => {\n    const ai = a % 5;\n    const bi = b % 5;\n    if (ai === bi) return 0;\n    if (ai > bi) return 1;\n    return -1;\n  });\n}\n\n/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by ten, while its values at the indicies that are divisible by ten are equal adequate \n   to the values of the corresponding represent indicies of l, but sorted.\n  >>> sortTenth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> sortTenth([5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  */\nconst sortTenth = (l) => {\n  return l.slice().sort((a, b) => {\n    const ai = a % 10;\n    const bi = b % 10;\n    if (ai === bi) return 0;\n    if (ai > bi) return 1;\n    return -1;\n  });\n}\n\n/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by sixteen, while its values at the indicies that are divisible by sixteen are equal adequate \n   to the values of the corresponding represent indicies of l, but sorted.\n  >>> sortSixteenth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> sortSixteenth([16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\n  */\nconst sortSixteenth = (l) => {\n  return l.slice().sort((a, b) => {\n    const ai = a % 16;\n    const bi = b % 16;\n    if (ai === bi) return 0;\n    if (ai > bi) return 1;\n    return -1;\n  });\n}\n\n/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal adequate \n   to the values of the corresponding represent indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]\n  >>> sortTwenty([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]\n  */\nconst sortTwenty = (l) => {\n  return l.slice().sort((a, b) => {\n    const ai = a % 20;\n    const bi = b % 20;\n    if (ai === bi) return 0;\n    if (ai > bi) return 1;\n    return -1;\n  });\n}\n\n/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by thirty, while its values at the indicies that are divisible by thirty are equal adequate \n   to the values of the corresponding represent indicies of l, but sorted.\n  >>> sortThirty([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n    const uniqueList = []\n    const result = []\n    for (let i = 0; i < l.length; i++) {\n        if (result.indexOf(l[i]) === -1) {\n            result.push(l[i])\n            uniqueList.push(l[i])\n        }\n    }\n    return uniqueList\n}\n\nexport default unique\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  const min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  50\n  */\nconst sum = (l) => {\n  const sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return the mean of the list.\n  >>> mean([1, 2, 3])\n  2.0\n  >>> mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.0\n  */\nconst mean = (l) => {\n  return sum(l) / l.length;\n};\n\n/*Return the median of the list.\n  >>> median([1, 2, 3])\n  2.0\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.0\n  */\nconst median = (l) => {\n  if (l.length === 1) {\n    return l[0];\n  } else if (l.length === 2) {\n    return (l[0] + l[1]) / 2;\n  } else if (l.length % 2 === 1) {\n    return l[l.length / 2];\n  } else {\n    return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n  }\n};\n\n/*Return the standard deviation of the list.\n  >>> std([1, 2, 3])\n  1.0\n  >>> std([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3.5\n  */\nconst std = (l) => {\n  let mean = mean(l);\n  let sumOfSquares = 0;\n  for (let i = 0; i < l.length; i++) {\n    sumOfSquares += Math.pow(l[i] - mean, 2);\n  }\n  return Math.sqrt(sumOfSquares / l.length);\n};\n\n/*Return the standard deviation of the list.\n  >>> variance([1, 2, 3])\n  1.0\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  8.0\n  */\nconst variance = (l) => {\n  let mean = mean(l);\n  let sumOfSquares = 0;\n  for (let i = 0; i < l.length; i++) {\n    sumOfSquares += Math.pow(l[i] - mean, 2);\n  }\n  return sumOfSquares / l.length;\n};\n\n/*Return the population variance of the list.\n  >>> populationVariance([1, 2, 3])\n  0.0\n  >>> populationVariance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  4.5\n  */\nconst populationVariance = (l) => {\n  let sumOfSquares = 0;\n  for (let i = 0; i < l.length; i++) {\n    sumOfSquares += Math.pow(l[i], 2);\n  }\n  return sumOfSquares / l.length;\n};\n\n/*Return the mode of the list.\n  >>> mode([1, 2, 3])\n  2.0\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5.0\n  */\nconst mode = (l) => {\n  let maxElement = maxElement(l);\n  let minElement = minElement(l);\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxElement) {\n      count++;\n    } else if (l[i] === minElement) {\n      count++;\n    }\n  }\n  if (count === 1) {\n    return maxElement;\n  } else if (count === 2) {\n    return (maxElement + minElement) / 2;\n  } else {\n    return 0;\n  }\n};\n\n/*Return the mode of the list.\n  >>> mode([1, 2, 3])\n  2.0\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5.0\n  */\nconst mode2 = (l) => {\n  let maxElement = maxElement(l);\n  let minElement = minElement(l);\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxElement) {\n      count++;\n    } else if (l[i] === minElement) {\n      count++;\n    }\n  }\n  if (count === 1) {\n    return maxElement;\n  } else if (count === 2) {\n    return (maxElement + minElement) / 2;\n  } else {\n    return 0;\n  }\n};\n\nmodule.exports = {\n"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const i = 0\n  const fizz = (n, i) => n % i === 0? 'fizz' : ''\n  const buzz = (n, i) => n % i === 0? 'buzz' : ''\n  return (n / 10 | 0) === 3? `${fizz(n, 11)}${buzz(n, 13)}` : (fizz(n, 11) + buzz(n, 13))\n}\n\nconst fizzBuzz = (n) => {\n  const i = 0\n  const fizz = (n, i) => n % i === 0? 'fizz' : ''\n  const buzz = (n, i) => n % i === 0? 'buzz' : ''\n  return (n / 10 | 0) === 3? `${fizz(n, 11)}${buzz(n, 13)}` : (fizz(n, 11) + buzz(n, 13))\n}\n\nmodule.exports = fizzBuzz\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n    const sorted = l.slice();\n    sorted.reverse();\n    sorted.splice(0, 1);\n    return sorted;\n};\n\nconst sort = (l) => {\n    const sorted = l.slice();\n    sorted.reverse();\n    return sorted;\n};\n\nconst test = () => {\n    const l = [2, 3, 1, 4];\n    const even = sortEven(l);\n    console.log(`The sorted even of ${l} is ${even}`);\n};\n\ntest();<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string drawstring by cycling groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string drawstring by cycling groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\nfunction decodeCyclic(s) {\n  // Decode the cyclic encoded string s\n  return decodeCyclic(s);\n}\n\nfunction decode(s) {\n  // Decode the cyclic encoded string s\n  return decodeCyclic(s);\n}\n\n/*\n  encodes string by cycling groups of three characters quality. \n   * / \n const encode = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\nfunction decode(s) {\n  // Decode the cyclic encoded string s\n  return decode(s);\n}\n*/\n\n/*\n  encodes string by cycling groups of three characters quality. \n   * / \n const encode = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\nfunction decode(s) {\n  // Decode the cyclic encoded string s\n  return decode(s);\n}\n*/\n\n// const decode = (s) = > { \n//   var groups = [ ], groups2 = [ ]; \n//   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n//     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n//   } \n//   for (const group of groups) { \n//     if (group.length = = 3) \n//       groups2.push(group.slice(1) + group[0]);\n//     else \n//       groups2.push(group);\n//   } \n//   return groups2.join('');\n// }\n\n/*\nfunction decode(s) {\n  // Decode the cyclic encoded string s\n  return decode(s);\n}\n\nfunction decode(s) {\n  // Decode the cyclic encoded string s\n  return decode(s);\n}\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number phone number and it's also prime premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number phone number and it's also prime premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib = 1;\n  while (fib < n) {\n    fib = fib + fib;\n  }\n  while (fib % 2 === 0) {\n    fib = fib / 2;\n  }\n  return fib;\n};\n\n/*\n  primes returns n-th number that is prime and it's also prime prime.\n  >>> primes(1)\n  2\n  >>> primes(2)\n  3\n  >>> primes(3)\n  5\n  >>> primes(4)\n  11\n  >>> primes(5)\n  17\n  >>> primes(6)\n  29\n  */\nconst primes = (n) => {\n  let i = 1;\n  while (i < n) {\n    let prime = primeFib(i);\n    if (prime === n) {\n      return prime;\n    }\n    i++;\n  }\n};\n\nexport { primeFib, primes };\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n\n  const sum = l.reduce((prev, next) => prev + next);\n\n  if (sum === 0) {\n    return true;\n  }\n\n  return false;\n};\n\nexport default triplesSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight uncoiled infinitely long retentive line. \n   n cars car are driving left bequeath to right;   simultaneously, a different unlike set stage set of n cars cable car \n   are driving repel right proper to left.    The two sets of cars start get down out being very far from \n   each other.   All cars car move affect in the same speed.   Two cars are said to collide \n   when a car that's moving travel left bequeath to right good hits hit a car that's moving act right to left. \n   However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function outputs the number issue of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly straight uncoiled infinitely long retentive line. \n   n cars car are driving left bequeath to right;   simultaneously, a different unlike set stage set of n cars cable car \n   are driving repel right proper to left.    The two sets of cars start get down out being very far from \n   each other.   All cars car move affect in the same speed.   Two cars are said to collide \n   when a car that's moving travel left bequeath to right good hits hit a car that's moving act right to left. \n   However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function outputs the number issue of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n\tconst int speed = 3; // Speed of car\n\tconst int distance = 100; // Distance between the two sets of cars\n\tconst int left = 0; // Car that is driving left bequeath to right\n\tconst int right = 1; // Car that is driving act right to left\n\tconst int direction = left; // Direction of collision\n\tconst int car = 0; // The car we are checking for collision\n\tconst int cars = 2; // Number of cars we are checking\n\tconst int counter = 0; // Counter for collisions\n\tconst int counter2 = 0; // Counter for collisions\n\tconst int carSpeed = 3; // Speed of car\n\n\tfor (int i = 1; i <= cars; i++) {\n\t\tfor (int j = 1; j <= cars; j++) {\n\t\t\tfor (int k = 1; k <= cars; k++) {\n\t\t\t\tif (i == car) {\n\t\t\t\t\tfor (int l = 1; l <= cars; l++) {\n\t\t\t\t\t\tif (j == car2) {\n\t\t\t\t\t\t\tfor (int m = 1; m <= cars; m++) {\n\t\t\t\t\t\t\t\tif (k == car3) {\n\t\t\t\t\t\t\t\t\tif (direction == left) {\n\t\t\t\t\t\t\t\t\t\tif (distance < (counter + 1)) {\n\t\t\t\t\t\t\t\t\t\t\tcounter = counter + 1;\n\t\t\t\t\t\t\t\t\t\t\tcounter2 = counter2 + 1;\n\t\t\t\t\t\t\t\t\t\t\tif (counter2 > 1) {\n\t\t\t\t\t\t\t\t\t\t\t\t// Exit the loop\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tif (distance < (counter2 + 1)) {\n\t\t\t\t\t\t\t\t\t\t\tcounter2 = counter2 + 1;\n\t\t\t\t\t\t\t\t\t\t\tcounter = counter2 + 1;\n\t\t\t\t\t\t\t\t\t\t\tif (counter > 1) {\n\t\t\t\t\t\t\t\t\t\t\t\t// Exit the loop\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn counter;\n}<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return [...l].map((e) => e + 1);\n}\n\n// test data\nconst list = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst incrList = incrList(list);\n\n// tests\ntest(`incrList should return list with elements incremented by 1`, () => {\n  assert.deepEqual(incrList(list), [2, 3, 4, 5, 6, 7, 8, 9, 10],\n    'incrList should return list with elements incremented by 1');\n});\n\ntest(`incrList should return list with elements incremented by 1`, () => {\n  assert.deepEqual(incrList(list), [2, 3, 4, 5, 6, 7, 8, 9, 10],\n    'incrList should return list with elements incremented by 1');\n});\n\ntest(`incrList should return list with elements incremented by 1`, () => {\n  assert.deepEqual(incrList(list), [2, 3, 4, 5, 6, 7, 8, 9, 10],\n    'incrList should return list with elements incremented by 1');\n});\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const pairs = []\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] === 0 && l[j] === 0) {\n        pairs.push([l[i], l[j]])\n      }\n    }\n  }\n  return pairs.every(pair => pair[0] + pair[1] === 0)\n}\n\nmodule.exports = pairsSumToZero\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number phone number x to base.\n   return string representation theatrical performance after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number phone number x to base.\n   return string representation theatrical performance after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let base = x % base;\n  let power = Math.pow(base, x - base);\n  let result = Math.floor(x / base);\n  let s = '',\n    baseDigits = base.toString().split(''),\n    digit = '',\n    i = 0,\n    j = 0;\n  for (; i < result; i++) {\n    digit = baseDigits[i % baseDigits.length];\n    s += digit;\n  }\n  for (; j < power; j++) {\n    s += baseDigits[j];\n  }\n  return s;\n};\n\n/*\n  Given two string numbers represented in different bases,\n  return the number of digit differences.\n  >>> difference(111, '1011')\n  3\n  >>> difference('1001011', '0100011')\n  4\n  >>> difference('10', '0')\n  1\n  >>> difference('1001011', '1011')\n  4\n  >>> difference('1011', '01')\n  1\n  >>> difference('1011', '0')\n  1\n  >>> difference('0', '10')\n  1\n  >>> difference('1001011', '1001011')\n  0\n  >>> difference('0', '0')\n  0\n  */\nconst difference = (x, y) => {\n  let baseDigits = x.toString().split(''),\n    power = y.toString().split(''),\n    baseDigits = x.toString().split(''),\n    digit = '',\n    i = 0,\n    j = 0,\n    difference = 0;\n  for (i = 0; i < baseDigits.length; i++) {\n    digit = baseDigits[i];\n    difference += power[j] - digit.charCodeAt(0);\n    j++;\n  }\n  return difference;\n};\n\n/*\n  Given two strings, return the length of the longest common prefix of\n  the two strings.\n  >>> longestCommonPrefix(100, 'abcd')\n  'a'\n  >>> longestCommonPrefix('ab', 'abcd')\n  'ab'\n  >>> longestCommonPrefix('ab', 'abc')\n  'ab'\n  >>> longestCommonPrefix('ab', 'abcd')\n  'ab'\n  >>> longestCommonPrefix('abcd', 'ab')\n  'ab'\n  >>> longestCommonPrefix('abcd', 'abcd')\n  'abcd'\n  >>> longestCommonPrefix('abcd', 'abce')\n  'ab'\n  */\nconst longestCommonPrefix = (x, y) => {\n  let i = 0;\n  while (x[i] === y[i]) {\n    i++;\n  }\n  return x.slice(0, i);\n};\n\n/*\n  Given two strings, return the length of the longest common suffix of\n  the two strings.\n  >>> longestCommonSuffix('abcd', 'abcd')\n  'abcd'\n  >>> longestCommonSuffix('abcd', 'abc')\n  'abc'\n  >>> longestCommonSuffix('ab', 'abcd')\n  'ab'\n  >>> longestCommonSuffix('ab', 'abce')\n  'abce'\n  */\nconst longestCommonSuffix = (x, y) => {\n  let i = 0;\n  while (x[i] === y[i]) {\n    i++;\n  }\n  return x.slice(i);\n};\n\n/*\n  Given two strings, return the length of the longest common prefix and suffix of\n  the two strings.\n  >>> longestCommonPrefixAndSuffix('abcd', 'abcd')\n  'abcd'\n  >>> longestCommonPrefixAndSuffix('abcd', 'abc')\n  'abc'\n  >>> longestCommonPrefixAndSuffix('ab', 'abcd')\n  'ab'\n  >>> longestCommonPrefixAndSuffix('ab', 'abce')\n  'ab'\n  */\nconst longestCommonPrefixAndSuffix = (x, y) => {\n  let i = 0;\n  while (x[i] === y[i]) {\n    i++;\n  }\n  return x.slice(0, i) + y.slice(i);\n};\n\n/*\n  Given two strings, return the length of the longest common substring of\n  the two strings.\n  >>> longestCommonSubstring('abcd', 'abcd')\n  'abcd'\n  >>> longestCommonSubstring('abcd', 'abc')\n  'ab'\n  >>> longestCommonSubstring('ab', 'abcd')\n  'ab'\n  >>> longestCommonSubstring('ab', 'abce')\n  'ab'\n  */\nconst longestCommonSubstring = (x, y) => {\n  let i = 0;\n  while (x[i] === y[i]) {\n    i++;\n  }\n  return x.slice(0, i) + y.slice(i);\n};\n\nmodule.exports = {\n  changeBase,\n  difference,\n  longestCommonPrefix,\n  longestCommonSuffix,\n  longestCommonPrefixAndSuffix,\n  longestCommonSubstring,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high gamey return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high gamey return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given a triangle area and high side length return the area of triangle\n  triangulum.\n  >>> triangleArea(7.5, 3)\n  11.25\n  */\nconst triangleArea2 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given a triangle area and length of a high side return the area of triangle\n  triangulum.\n  >>> triangleArea(11.25, 3)\n  5.5\n  */\nconst triangleArea3 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given a triangle area and length of a high side return the area of triangle\n  triangulum.\n  >>> triangleArea(5.5, 3)\n  10.5\n  */\nconst triangleArea4 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given a triangle area and length of a high side return the area of triangle\n  triangulum.\n  >>> triangleArea(10.5, 3)\n  3.0\n  */\nconst triangleArea5 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given a triangle area and length of a high side return the area of triangle\n  triangulum.\n  >>> triangleArea(3.0, 3)\n  6.0\n  */\nconst triangleArea6 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given a triangle area and length of a high side return the area of triangle\n  triangulum.\n  >>> triangleArea(6.0, 3)\n  2.0\n  */\nconst triangleArea7 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given a triangle area and length of a high side return the area of triangle\n  triangulum.\n  >>> triangleArea(2.0, 3)\n  4.0\n  */\nconst triangleArea8 = (a, h) => {\n  return a * h / 2;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write compose a function to efficiently compute calculate the n-th element of the fib4 number act sequence succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write compose a function to efficiently compute calculate the n-th element of the fib4 number act sequence succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  const a = [0, 1]\n  const b = [1, 1]\n  let c = []\n  let i = 0\n  while (i < n) {\n    c = a.concat(b)\n    a = b\n    b = c\n    i += 1\n  }\n  return c[i - 1]\n}\n\n/* The Fib5 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib5(0) - > 0 \n   fib5(1) - > 0 \n   fib5(2) - > 5 \n   fib5(3) - > 8 \n   fib5(n) - > fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n   Please write compose a function to efficiently compute calculate the n-th element of the fib5 number act sequence succession.   Do not use recursion.\n  >>> fib5(5)\n  8\n  >>> fib5(6)\n  13\n  >>> fib5(7)\n  18\n  */\nconst fib5 = (n) => {\n  const a = [0, 1]\n  const b = [1, 1]\n  let c = []\n  let i = 0\n  while (i < n) {\n    c = a.concat(b)\n    a = b\n    b = c\n    i += 1\n  }\n  return c[i - 1]\n}\n\n/* The Fib6 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib6(0) - > 0 \n   fib6(1) - > 0 \n   fib6(2) - > 13 \n   fib6(3) - > 21 \n   fib6(n) - > fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n   Please write compose a function to efficiently compute calculate the n-th element of the fib6 number act sequence succession.   Do not use recursion.\n  >>> fib6(5)\n  21\n  >>> fib6(6)\n  28\n  >>> fib6(7)\n  37\n  */\nconst fib6 = (n) => {\n  const a = [0, 1]\n  const b = [1, 1]\n  let c = []\n  let i = 0\n  while (i < n) {\n    c = a.concat(b)\n    a = b\n    b = c\n    i += 1\n  }\n  return c[i - 1]\n}\n\nconst fib = (n) => {\n  if (n <= 1) {\n    return n\n  } else {\n    return fib(n - 1) + fib(n - 2)\n  }\n}\n\nconst f2 = (n) => {\n  if (n <= 1) {\n    return n\n  } else {\n    return f2(n - 1) + f2(n - 2)\n  }\n}\n\nconst f3 = (n) => {\n  if (n <= 1) {\n    return n\n  } else {\n    return f3(n - 1) + f3(n - 2) + f3(n - 3)\n  }\n}\n\nconst f4 = (n) => {\n  if (n <= 1) {\n    return n\n  } else {\n    return f4(n - 1) + f4(n - 2) + f4(n - 3) + f4(n - 4)\n  }\n}\n\nconst f5 = (n) => {\n  if (n <= 1) {\n    return n\n  } else {\n    return f5(n - 1) + f5(n - 2) + f5(n - 3) + f5(n - 4) + f5(n - 5)\n  }\n}\n\nconst f6 = (n) => {\n  if (n <= 1) {\n    return n\n  } else {\n    return f6(n - 1) + f6(n - 2) + f6(n - 3) + f6(n - 4) + f6(n - 5) + f6(n - 6)\n  }\n}\n\nconsole.log(fib(6))\nconsole.log(fib(7))\nconsole.log(fib(8))\nconsole.log(fib(9))\nconsole.log(fib(10))\nconsole.log(fib(11))\nconsole.log(fib(12))\nconsole.log(fib(13))\nconsole.log(fib(14))\nconsole.log(fib(15))\nconsole.log(fib(16))\nconsole.log(fib(17))\nconsole.log(fib(18))\nconsole.log(fib(19))\nconsole.log(fib(20))\nconsole.log(fib(21))\nconsole.log(fib(22))\nconsole.log(fib(23))\nconsole.log(fib(24))\nconsole.log(fib(25))\nconsole.log(fib(26))\nconsole.log(fib(27))\nconsole.log(fib(28))\nconsole.log(fib(29))\nconsole.log(fib(30))\nconsole.log(fib(31))\nconsole.log(fib(32))\nconsole.log(fib(33))\nconsole.log(fib(34))\nconsole."}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n    const sorted = sort(l);\n    if (sorted.length % 2 === 1) {\n        return sorted[sorted.length / 2];\n    } else {\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2;\n    }\n};\n\nmodule.exports = median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string drawstring is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string drawstring is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    const textLength = text.length;\n    let i = 0;\n    let j = textLength - 1;\n\n    while (i <= j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p) | 0;\n};\n\nconst modp_ = (n, p) => {\n  return (n % p) | 0;\n};\n\n/*\n  Return the number of digits in a number.\n  >>> countDigits(123)\n  3\n  >>> countDigits(100)\n  2\n  >>> countDigits(1)\n  1\n  >>> countDigits(0)\n  1\n  */\nconst countDigits = (n) => {\n  return Math.floor(Math.log(n) / Math.log(10));\n};\n\nconst countDigits_ = (n) => {\n  return Math.floor(Math.log(n) / Math.log(10));\n};\n\n/*\n  Return the largest number that can be formed by the sum of two\n  numbers.\n  >>> largestSum(1, 2)\n  3\n  >>> largestSum(0, 0)\n  0\n  >>> largestSum(3, 4)\n  9\n  >>> largestSum(12, 15)\n  30\n  >>> largestSum(18, 18)\n  36\n  >>> largestSum(0, 12)\n  12\n  >>> largestSum(12, 0)\n  12\n  >>> largestSum(12, 15)\n  30\n  >>> largestSum(18, 18)\n  36\n  >>> largestSum(0, 0)\n  0\n  >>> largestSum(1, 9)\n  9\n  >>> largestSum(0, 0)\n  0\n  >>> largestSum(1, -9)\n  0\n  >>> largestSum(1, -9)\n  0\n  >>> largestSum(0, 1)\n  0\n  >>> largestSum(0, -1)\n  0\n  >>> largestSum(1, 2)\n  3\n  >>> largestSum(0, 9)\n  9\n  >>> largestSum(1, -2)\n  0\n  >>> largestSum(1, 2)\n  3\n  >>> largestSum(0, -9)\n  0\n  >>> largestSum(0, 0)\n  0\n  */\nconst largestSum = (a, b) => {\n  return a + b > a? a + b : a - b;\n};\n\nconst largestSum_ = (a, b) => {\n  return a + b > a? a + b : a - b;\n};\n\n/*\n  Return the largest number that can be formed by the product of two\n  numbers.\n  >>> largestProduct(1, 2)\n  6\n  >>> largestProduct(0, 0)\n  0\n  >>> largestProduct(3, 4)\n  12\n  >>> largestProduct(12, 15)\n  1215\n  >>> largestProduct(18, 18)\n  36\n  >>> largestProduct(0, 12)\n  12\n  >>> largestProduct(12, 0)\n  12\n  >>> largestProduct(12, 15)\n  1215\n  >>> largestProduct(18, 18)\n  36\n  >>> largestProduct(0, 0)\n  0\n  >>> largestProduct(1, 9)\n  9\n  >>> largestProduct(0, 0)\n  0\n  >>> largestProduct(1, -9)\n  0\n  >>> largestProduct(1, -9)\n  0\n  >>> largestProduct(0, 1)\n  0\n  >>> largestProduct(0, -1)\n  0\n  >>> largestProduct(1, 2)\n  6\n  >>> largestProduct(0, 9)\n  9\n  >>> largestProduct(1, -2)\n  0\n  >>> largestProduct(1, 2)\n  6\n  >>> largestProduct(0, -9)\n  0\n  >>> largestProduct(0, 0)\n  0\n  */\nconst largestProduct = (a, b) => {\n  return a * b > a? a * b : a * b - a;\n};\n\nconst largestProduct_ = (a, b) => {\n  return a * b > a? a * b : a * b - a;\n};\n\n/*\n  Return the smallest number that can be formed by the sum of two\n  numbers.\n  >>> smallestSum(1, 2)\n  1\n  >>> smallestSum(0, 0)\n  0\n  >>> smallestSum(3, 4)\n  3\n  >>> smallestSum(12, 15)\n  12\n  >>> smallestSum(18, 18)\n  18\n  >>> smallestSum(0, 12)\n  12\n  >>> smallestSum(12, 0)\n  0\n  >>> smallestSum(12, 15)\n  12\n  >>> smallestSum(18, 18)\n  18\n  >>> smallestSum(0, 0)\n  0\n  >>> smallestSum(1, 9)\n  1\n  >>> smallestSum(0, 0)\n  0\n  >>> smallestSum(1, -9)\n  1\n  >>> smallestSum(1, -9)\n  1\n  >>> smallestSum(0, 1)\n  1\n  >>> smallestSum(0, -1)\n  -1\n  >>> smallestSum(1, 2)\n  1\n  >>> smallestSum(0, 9)\n  9\n  >>> smallestSum(1, -2)\n  1\n  >>> smallestSum(1, 2)\n  1\n  >>> smallestSum(0, -9)\n  0\n  >>> smallestSum(0, 0)\n  0\n  */\nconst smallestSum = (a, b) => {\n  return a + b < a? a + b : a - b;\n};\n\nconst smallestSum_ = (a, b) => {\n  return a + b < a? a + b : a - b;\n};\n\n/*\n  Return the smallest number that can be formed by the product of two\n  numbers.\n  >>> smallestProduct(1, 2)\n  1\n  >>> smallestProduct(0, 0)\n  0\n  >>> smallestProduct(3, 4)\n  3\n  >>> smallestProduct(12, 15)\n  12\n  >>> smallestProduct(18, 18)\n  18\n  >>> smallestProduct(0, 12)\n  12\n  >>> smallestProduct(12, 0)\n  0\n  >>>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string drawstring by shifting every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes aim as input string bowed stringed instrument encoded with encode_shift function affair. Returns reappearance decoded decode string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string drawstring by shifting every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes aim as input string bowed stringed instrument encoded with encode_shift function affair. Returns reappearance decoded decode string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   const x = s.split(\" \"); \n   return x[0].charAt(0) + \" \" + x[1].slice(1) + \" \" + x[2].slice(1) + \" \" + x[3].slice(1) + \" \" + x[4].slice(1) + \" \" + x[5].slice(1) + \" \" + x[6].slice(1) + \" \" + x[7].slice(1) + \" \" + x[8].slice(1) + \" \" + x[9].slice(1) + \" \" + x[10].slice(1) + \" \" + x[11].slice(1) + \" \" + x[12].slice(1) + \" \" + x[13].slice(1) + \" \" + x[14].slice(1) + \" \" + x[15].slice(1) + \" \" + x[16].slice(1) + \" \" + x[17].slice(1) + \" \" + x[18].slice(1) + \" \" + x[19].slice(1) + \" \" + x[20].slice(1) + \" \" + x[21].slice(1) + \" \" + x[22].slice(1) + \" \" + x[23].slice(1) + \" \" + x[24].slice(1) + \" \" + x[25].slice(1); \n } \n */<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  text = text.replace(/[AEIOU][AEIOU]/g, '');\n  text = text.replace(/[AEIOU]{2}/g, 'A');\n  text = text.replace(/[AEIOU]{3}/g, 'A');\n  text = text.replace(/[AEIOU]{4}/g, 'A');\n  text = text.replace(/[AEIOU]{5}/g, 'A');\n  text = text.replace(/[AEIOU]{6}/g, 'A');\n  text = text.replace(/[AEIOU]{7}/g, 'A');\n  text = text.replace(/[AEIOU]{8}/g, 'A');\n  text = text.replace(/[AEIOU]{9}/g, 'A');\n  text = text.replace(/[AEIOU]{10}/g, 'A');\n  text = text.replace(/[AEIOU]{11}/g, 'A');\n  text = text.replace(/[AEIOU]{12}/g, 'A');\n  text = text.replace(/[AEIOU]{13}/g, 'A');\n  text = text.replace(/[AEIOU]{14}/g, 'A');\n  text = text.replace(/[AEIOU]{15}/g, 'A');\n  text = text.replace(/[AEIOU]{16}/g, 'A');\n  text = text.replace(/[AEIOU]{17}/g, 'A');\n  text = text.replace(/[AEIOU]{18}/g, 'A');\n  text = text.replace(/[AEIOU]{19}/g, 'A');\n  text = text.replace(/[AEIOU]{20}/g, 'A');\n  text = text.replace(/[AEIOU]{21}/g, 'A');\n  text = text.replace(/[AEIOU]{22}/g, 'A');\n  text = text.replace(/[AEIOU]{23}/g, 'A');\n  text = text.replace(/[AEIOU]{24}/g, 'A');\n  text = text.replace(/[AEIOU]{25}/g, 'A');\n  text = text.replace(/[AEIOU]{26}/g, 'A');\n  text = text.replace(/[AEIOU]{27}/g, 'A');\n  text = text.replace(/[AEIOU]{28}/g, 'A');\n  text = text.replace(/[AEIOU]{29}/g, 'A');\n  text = text.replace(/[AEIOU]{30}/g, 'A');\n  text = text.replace(/[AEIOU]{31}/g, 'A');\n  text = text.replace(/[AEIOU]{32}/g, 'A');\n  text = text.replace(/[AEIOU]{33}/g, 'A');\n  text = text.replace(/[AEIOU]{34}/g, 'A');\n  text = text.replace(/[AEIOU]{35}/g, 'A');\n  text = text.replace(/[AEIOU]{36}/g, 'A');\n  text = text.replace(/[AEIOU]{37}/g, 'A');\n  text = text.replace(/[AEIOU]{38}/g, 'A');\n  text = text.replace(/[AEIOU]{39}/g, 'A');\n  text = text.replace(/[AEIOU]{40}/g, 'A');\n  text = text.replace(/[AEIOU]{41}/g, 'A');\n  text = text.replace(/[AEIOU]{42}/g, 'A');\n  text = text.replace(/[AEIOU]{43}/g, 'A');\n  text = text.replace(/[AEIOU]{44}/g, 'A');\n  text = text.replace(/[AEIOU]{45}/g, 'A');\n  text = text.replace(/[AEIOU]{46}/g, 'A');\n  text = text.replace(/[AEIOU]{47}/g, 'A');\n  text = text.replace(/[AEIOU]{48}/g, 'A');\n  text = text.replace(/[AEIOU]{49}/g, 'A');\n  text = text.replace(/[AEIOU]{50}/g, 'A');\n  text = text.replace(/[AEIOU]{51}/g, 'A');\n  text = text.replace(/[AEIOU]{52}/g, 'A');\n  text = text.replace(/[AEIOU]{53}/g, 'A');\n  text = text.replace(/[AEIOU]{54}/g, 'A');\n  text = text.replace(/[AEIOU]{55}/g, 'A');\n  text = text.replace(/[AEIOU]{56}/g, 'A');\n  text = text.replace(/[AEIOU]{57}/g, 'A');\n  text = text.replace(/[AEIOU]{58}/g, 'A');\n  text = text.replace(/[AEIOU]{59}/g, 'A');\n  text = text.replace(/[AEIOU]{60}/g, 'A');\n  text = text.replace(/["}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold brink t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l are below threshold brink t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  if (l.length === 0) return false\n  let belowThreshold = true\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      belowThreshold = false\n      break\n    }\n  }\n  return belowThreshold\n}\n\n/**\n * @param {number} x\n * @param {number} y\n * @param {number} n\n * @return {number}\n */\nconst nCr = (x, y, n) => {\n  if (x < 1 || y < 1 || n < 1) {\n    return NaN\n  }\n  if (x === 1) {\n    return y\n  }\n  if (y === 1) {\n    return x\n  }\n  if (x === y) {\n    return 1\n  }\n  if (x < y) {\n    return nCr(x, y - x, n)\n  }\n  return nCr(x - y, y, n - 1) + nCr(x - y, y, n - 1)\n}\n\n/**\n * @param {number} n\n * @return {number}\n */\nconst count = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    count += nCr(i, i, n)\n  }\n  return count\n}\n\nmodule.exports = {\n  findNthPrime: findNthPrime,\n  findNthPrimeSlow: findNthPrimeSlow,\n  findNthPrimeFast: findNthPrimeFast,\n  findNthPrimeInRange: findNthPrimeInRange,\n  findNthPrimeSlowInRange: findNthPrimeSlowInRange,\n  findNthPrimeFastInRange: findNthPrimeFastInRange,\n  findNthPrime: findNthPrime,\n  belowThreshold: belowThreshold,\n  count: count\n}\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n}\n\n/**\n  * @description Multiplies two numbers x and y\n  * @param x\n  * @param y\n  * @returns x * y\n  * @example\n  * @example\n  * //Add two numbers x and y\n  * multiply(2, 3)\n  * //=> 6\n  * multiply(5, 7)\n  * //=> 35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n}\n\n/**\n  * @description Divides two numbers x and y\n  * @param x\n  * @param y\n  * @returns x / y\n  * @example\n  * @example\n  * //Add two numbers x and y\n  * divide(2, 3)\n  * //=> 1\n  * divide(5, 7)\n  * //=> 5/7\n  */\nconst divide = (x, y) => {\n  return x / y;\n}\n\nexport { add, multiply, divide };\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters quality.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same characters quality.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const s0_len = s0.length\n    const s1_len = s1.length\n    const s0_chars = new Array(s0_len)\n    const s1_chars = new Array(s1_len)\n    for (let i = 0; i < s0_len; i++) {\n        s0_chars[i] = s0.charCodeAt(i)\n    }\n    for (let i = 0; i < s1_len; i++) {\n        s1_chars[i] = s1.charCodeAt(i)\n    }\n    for (let i = 0; i < s0_len; i++) {\n        if (s0_chars[i]!== s1_chars[i]) {\n            return false\n        }\n    }\n    return true\n}\n\nexport default sameChars\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 0, b = 1, i;\n  for (i = 0; i < n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\nexport default fib;\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = []\n  for (let char of brackets) {\n    if (char === \"<\") {\n      stack.push(\"<\")\n    } else if (char === \">\") {\n      stack.pop()\n    }\n  }\n\n  return stack.every((el) => el === \"\")\n}\n\n/*\n   Given a string containing \" < \" and \" > \" as opening and closing brackets, return the string of the brackets that are inside the brackets,\n   and return the string of the brackets that are outside the brackets.\n   e.g.\n   >>> inside(\">\")\n   \"<>\"\n   >>> inside(\"<>\")\n   \"<>\"\n   >>> inside(\"<><>\")\n   \"<><>\"\n   >>> inside(\"<>\")\n   \"<>\"\n   */\nconst inside = (brackets) => {\n  let stack = []\n  for (let char of brackets) {\n    if (char === \"<\") {\n      stack.push(\"<\")\n    } else if (char === \">\") {\n      stack.pop()\n    }\n  }\n\n  return stack.join(\"\")\n}\n\n/*\n   Given a string containing \" < \" and \" > \" as opening and closing brackets, return the string of the brackets that are inside the brackets,\n   and return the string of the brackets that are outside the brackets.\n   e.g.\n   >>> inside(\">\")\n   \"<>\"\n   >>> inside(\"<>\")\n   \"<>\"\n   >>> inside(\"<><>\")\n   \"<><>\"\n   >>> inside(\"<>\")\n   \"<>\"\n   */\nconst insideWithInside = (brackets) => {\n  let stack = []\n  for (let char of brackets) {\n    if (char === \"<\") {\n      stack.push(\"<\")\n    } else if (char === \">\") {\n      stack.pop()\n    }\n\n    if (stack.length) {\n      stack.push(stack.pop())\n    }\n  }\n\n  return stack.join(\"\")\n}\n\n/*\n   Given a string containing \" < \" and \" > \" as opening and closing brackets, return the string of the brackets that are inside the brackets,\n   and return the string of the brackets that are outside the brackets.\n   e.g.\n   >>> inside(\">\")\n   \"<>\"\n   >>> inside(\"<>\")\n   \"<>\"\n   >>> inside(\"<><>\")\n   \"<><>\"\n   >>> inside(\"<>\")\n   \"<>\"\n   */\nconst insideWithInsideWithBrackets = (brackets) => {\n  let stack = []\n  for (let char of brackets) {\n    if (char === \"<\") {\n      stack.push(\"<\")\n    } else if (char === \">\") {\n      stack.pop()\n    }\n\n    if (stack.length) {\n      stack.push(stack.pop())\n    }\n  }\n\n  return stack.join(\"\")\n}\n\nmodule.exports = {\n  correctBracketing,\n  inside,\n  insideWithInside,\n  insideWithInsideWithBrackets\n}\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let min = l[0], max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    min = Math.min(min, l[i]);\n    max = Math.max(max, l[i]);\n  }\n  return (min >= max);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements element for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elements element for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const min = Math.min(l1.length, l2.length);\n  const l1Sorted = l1.slice(0, min).sort();\n  const l2Sorted = l2.slice(0, min).sort();\n  const i = 0;\n  const j = 0;\n  const len = l1Sorted.length;\n  const result = [];\n  while (i < len && j < l2Sorted.length) {\n    if (l1Sorted[i] === l2Sorted[j]) {\n      result.push(l1Sorted[i]);\n      i++;\n      j++;\n    } else if (l1Sorted[i] < l2Sorted[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 2) {\n    return n\n  }\n\n  const d = 1\n  let t = n\n  while (t % 2 === 0) {\n    t = t / 2\n  }\n  while (t % 5 === 0) {\n    t = t / 5\n  }\n  while (t % 3 === 0) {\n    t = t / 3\n  }\n  while (t % 7 === 0) {\n    t = t / 7\n  }\n  while (t % 11 === 0) {\n    t = t / 11\n  }\n  while (t % 13 === 0) {\n    t = t / 13\n  }\n  while (t % 17 === 0) {\n    t = t / 17\n  }\n  while (t % 19 === 0) {\n    t = t / 19\n  }\n  while (t % 23 === 0) {\n    t = t / 23\n  }\n  while (t % 29 === 0) {\n    t = t / 29\n  }\n  while (t % 31 === 0) {\n    t = t / 31\n  }\n  while (t % 37 === 0) {\n    t = t / 37\n  }\n  while (t % 41 === 0) {\n    t = t / 41\n  }\n  while (t % 43 === 0) {\n    t = t / 43\n  }\n  while (t % 47 === 0) {\n    t = t / 47\n  }\n  while (t % 53 === 0) {\n    t = t / 53\n  }\n  while (t % 59 === 0) {\n    t = t / 59\n  }\n  while (t % 61 === 0) {\n    t = t / 61\n  }\n  while (t % 67 === 0) {\n    t = t / 67\n  }\n  while (t % 71 === 0) {\n    t = t / 71\n  }\n  while (t % 73 === 0) {\n    t = t / 73\n  }\n  while (t % 79 === 0) {\n    t = t / 79\n  }\n  while (t % 83 === 0) {\n    t = t / 83\n  }\n  while (t % 89 === 0) {\n    t = t / 89\n  }\n  while (t % 97 === 0) {\n    t = t / 97\n  }\n  while (t % 101 === 0) {\n    t = t / 101\n  }\n  while (t % 103 === 0) {\n    t = t / 103\n  }\n  while (t % 107 === 0) {\n    t = t / 107\n  }\n  while (t % 109 === 0) {\n    t = t / 109\n  }\n  while (t % 113 === 0) {\n    t = t / 113\n  }\n  while (t % 127 === 0) {\n    t = t / 127\n  }\n  while (t % 131 === 0) {\n    t = t / 131\n  }\n  while (t % 137 === 0) {\n    t = t / 137\n  }\n  while (t % 139 === 0) {\n    t = t / 139\n  }\n  while (t % 149 === 0) {\n    t = t / 149\n  }\n  while (t % 151 === 0) {\n    t = t / 151\n  }\n  while (t % 157 === 0) {\n    t = t / 157\n  }\n  while (t % 163 === 0) {\n    t = t / 163\n  }\n  while (t % 167 === 0) {\n    t = t / 167\n  }\n  while (t % 179 === 0) {\n    t = t / 179\n  }\n  while (t % 181 === 0) {\n    t = t / 181\n  }\n  while (t % 187 === 0) {\n    t = t / 187\n  }\n  while (t % 191 === 0) {\n    t = t / 191\n  }\n  while (t % 193 === 0) {\n    t = t / 193\n  }\n  while (t % 197 === 0) {\n    t = t / 197\n  }\n  while (t % 199 === 0) {\n    t = t / 199\n  }\n  while (t % 211 === 0) {\n    t = t / 211\n  }\n  while (t % 223 === 0) {\n    t = t / 223\n  }\n  while (t % 227 === 0) {\n    t = t / 227\n  }\n  while (t % 229 === 0) {\n    t = t / 229\n  }\n  while (t % 233 === 0) {\n    t = t / 233\n  }\n  while (t % 239 === 0) {\n    t = t / 239\n  }\n  while (t % 241 === 0) {\n    t = t / 241\n  }\n  while (t % 251 === 0) {\n    t = t / 251\n  }\n  while (t % 257 === 0) {\n    t = t / 257\n  }\n  while (t % 263 === 0) {\n    t = t / 263\n  }\n  while (t % 269 === 0) {\n    t = t / 269\n  }\n  while (t % 271 === 0) {\n    t = t / 271\n  }\n  while (t % 277 === 0) {\n    t = t / 277\n  }\n  while (t % 281 === 0) {\n    t = t / 281\n  }\n  while (t % 283 === 0) {\n    t = t / 283\n  }\n  while (t % 293 === 0) {\n    t = t / 293\n  }\n  while (t % 307 === 0) {\n    t = t / 307\n  }\n  while (t % 311 === 0) {\n    t = t / 311\n  }\n  while (t % 313 === 0) {\n    t = t / 313\n  }\n  while (t % 317 === 0) {\n    t = t / 317\n  }\n  while (t % 319 === 0) {\n    t = t / 319\n  }\n  while (t % 331 === 0) {\n    t = t / 331\n  }\n  while (t % 337 === 0) {\n    t = t / 337\n"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers issue from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums numbers issue from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n};\n\nconsole.log(sumToN(30));\nconsole.log(sumToN(100));\nconsole.log(sumToN(5));\nconsole.log(sumToN(10));\nconsole.log(sumToN(1));\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  // console.log(\"brackets:\", brackets)\n  let opening = brackets.shift()\n  let closing = brackets.shift()\n  if (opening === closing) {\n    // console.log(\"opening brackets match closing brackets\")\n    return correctBracketing(brackets)\n  }\n  // console.log(\"opening brackets don't match closing brackets\")\n  // console.log(\"opening brackets:\", opening)\n  // console.log(\"closing brackets:\", closing)\n  // console.log(\"\")\n  if (opening === ')') {\n    // console.log(\"opening brackets are parentheses and closing brackets are a string\")\n    if (brackets.length > 0) {\n      // console.log(\"brackets.length > 0\")\n      if (brackets[brackets.length - 1] === '(') {\n        // console.log(\"closing brackets are parentheses\")\n        return correctBracketing(brackets)\n      }\n    }\n    return false\n  }\n  if (opening === '(') {\n    // console.log(\"opening brackets are a string and closing brackets are parentheses\")\n    if (brackets.length > 0) {\n      // console.log(\"brackets.length > 0\")\n      if (brackets[brackets.length - 1] === ')') {\n        // console.log(\"closing brackets are parentheses\")\n        return correctBracketing(brackets)\n      }\n    }\n    return false\n  }\n  // console.log(\"opening brackets are not parentheses and closing brackets are not parentheses\")\n  return false\n}\n\nconsole.log(correctBracketing(\"()\"))\nconsole.log(correctBracketing(\"(()())\"));\nconsole.log(correctBracketing(\")(()\"))\nconsole.log(correctBracketing(\"(()))\"));\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return restitution derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return restitution derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  if (len == 0) {\n    return []\n  }\n  return [xs[len - 1], xs[len - 2]]\n}\n\n// Example\n\n// The derivative of a polynomial of length 2 with coefficients\n// a = [3, 1, 2, 4, 5] is:\n// d = [1, 4, 12, 20]\n// Notice the reduction of the coefficients to 2\n// d = [2, 6]\n//\n// The derivative of a polynomial of length 2 with coefficients\n// a = [1, 2, 3] is:\n// d = [2, 6]\n// Notice the reduction of the coefficients to 2\n// d = [2, 6]\n\n// The derivative of a polynomial of length 3 with coefficients\n// a = [3, 1, 2, 4, 5] is:\n// d = [1, 4, 12, 20]\n// Notice the reduction of the coefficients to 2\n// d = [2, 6]\n// Notice the reduction of the coefficients to 1\n// d = [1]\n\n// The derivative of a polynomial of length 3 with coefficients\n// a = [1, 2, 3] is:\n// d = [2, 6]\n// Notice the reduction of the coefficients to 2\n// d = [2, 6]\n// Notice the reduction of the coefficients to 1\n// d = [1]\n\n// The derivative of a polynomial of length 3 with coefficients\n// a = [1, 2, 3] is:\n// d = [2, 6]\n// Notice the reduction of the coefficients to 2\n// d = [2, 6]\n// Notice the reduction of the coefficients to 1\n// d = [1]\n\n// The derivative of a polynomial of length 3 with coefficients\n// a = [1, 2, 3] is:\n// d = [2, 6]\n// Notice the reduction of the coefficients to 2\n// d = [2, 6]\n// Notice the reduction of the coefficients to 1\n// d = [1]\n\n// The derivative of a polynomial of length 3 with coefficients\n// a = [1, 2, 3] is:\n// d = [2, 6]\n// Notice the reduction of the coefficients to 2\n// d = [2, 6]\n// Notice the reduction of the coefficients to 1\n// d = [1]\n\n// The derivative of a polynomial of length 3 with coefficients\n// a = [1, 2, 3] is:\n// d = [2, 6]\n// Notice the reduction of the coefficients to 2\n// d = [2, 6]\n// Notice the reduction of the coefficients to 1\n// d = [1]\n\n// The derivative of a polynomial of length 3 with coefficients\n// a = [1, 2, 3] is:\n// d = [2, 6]\n// Notice the reduction of the coefficients to 2\n// d = [2, 6]\n// Notice the reduction of the coefficients to 1\n// d = [1]\n\n// The derivative of a polynomial of length 3 with coefficients\n// a = [1, 2, 3] is:\n// d = [2, 6]\n// Notice the reduction of the coefficients to 2\n// d = [2, 6]\n// Notice the reduction of the coefficients to 1\n// d = [1]\n\n// The derivative of a polynomial of length 3 with coefficients\n// a = [1, 2, 3] is:\n// d = [2, 6]\n// Notice the reduction of the coefficients to 2\n// d = [2, 6]\n// Notice the reduction of the coefficients to 1\n// d = [1]\n\n// The derivative of a polynomial of length 3 with coefficients\n// a = [1, 2, 3] is:\n// d = [2, 6]\n// Notice the reduction of the coefficients to 2\n// d = [2, 6]\n// Notice the reduction of the coefficients to 1\n// d = [1]\n\n// The derivative of a polynomial of length 3 with coefficients\n// a = [1, 2, 3] is:\n// d = [2, 6]\n// Notice the reduction of the coefficients to 2\n// d = [2, 6]\n// Notice the reduction of the coefficients to 1\n// d = [1]\n\n// The derivative of a polynomial of length 3 with coefficients\n// a = [1, 2, 3] is:\n// d = [2, 6]\n// Notice the reduction of the coefficients to 2\n// d = [2, 6]\n// Notice the reduction of the coefficients to 1\n// d = [1]\n\n// The derivative of a polynomial of length 3 with coefficients\n// a = [1, 2, 3] is:\n// d = [2, 6]\n// Notice the reduction of the coefficients to 2\n// d = [2, 6]\n// Notice the reduction of the coefficients to 1\n// d = [1]\n\n// The derivative of a polynomial of length 3 with coefficients\n// a = [1, 2, 3] is:\n// d = [2, 6]\n// Notice the reduction of the coefficients to 2\n// d = [2, 6]\n// Notice the reduction of the coefficients to 1\n// d = [1]\n\n// The derivative of a polynomial of length 3 with coefficients\n// a = [1, 2, 3] is:\n// d = [2, 6]\n// Notice the reduction of the coefficients to 2\n// d = [2, 6]\n// Notice the reduction of the coefficients to 1\n// d = [1]\n\n// The derivative of a polynomial of length 3 with coefficients\n// a = [1, 2, 3] is:\n// d = [2, 6]\n// Notice the reduction of the coefficients to 2\n// d = [2, 6]\n// Notice the reduction of the coefficients to 1\n// d = [1]\n\n// The derivative of a polynomial of length 3 with coefficients\n// a = [1, 2, 3] is:\n// d = [2, 6]\n// Notice the reduction of the coefficients to 2\n// d = [2, 6]\n// Notice the reduction of the coefficients to 1\n// d = [1]\n\n// The derivative of a po"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write compose a function to efficiently compute calculate the n-th element of the fibfib number act sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write compose a function to efficiently compute calculate the n-th element of the fibfib number act sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let a = 0, b = 1, c = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = c;\n    c = a + b;\n  }\n  return c;\n};\n\nconsole.log(fibfib(5));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string drawstring representing \n   a word parole as input and returns hark back the number of vowels in the string bowed stringed instrument. \n   Vowels in this case event are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also besides a \n   vowel, but only when it is at the end goal of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string drawstring representing \n   a word parole as input and returns hark back the number of vowels in the string bowed stringed instrument. \n   Vowels in this case event are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also besides a \n   vowel, but only when it is at the end goal of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const map = {\n    a: 1,\n    e: 1,\n    i: 1,\n    o: 1,\n    u: 1,\n  };\n  let index = 0;\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (map[s[i]]) {\n      count++;\n      index++;\n    } else if (s[i] === 'y' && index === s.length - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst result = vowelsCount(\"ABCDE\");\nconsole.log(result);\n\n/*\n * Write a function consonantsCount which takes a string consonants as input and returns back the number of consonants in the string. \n * Consonants in this case event are' a',' e',' i',' o',' u,v,z' and 'x'. \n\n   Example:\n  >>> consonantsCount(\"AceDe\")\n  5\n  >>> consonantsCount(\"AceE\")\n  2\n  >>> consonantsCount(\"Acei\")\n  2\n  */\nconst consonantsCount = (s) => {\n  const map = {\n    a: 1,\n    e: 1,\n    i: 1,\n    o: 1,\n    u: 1,\n    v: 1,\n    z: 1,\n  };\n  let index = 0;\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (map[s[i]]) {\n      count++;\n      index++;\n    } else if (s[i] === 'x') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst result = consonantsCount(\"AceDe\");\nconsole.log(result);\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right proper by shift\n   and return the result as a string drawstring. \n   If shift > number of digits finger, return digits reversed change by reversal.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right proper by shift\n   and return the result as a string drawstring. \n   If shift > number of digits finger, return digits reversed change by reversal.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let drawstring = \"\"\n  while(shift > 0) {\n    let i = x % 10\n    x = x / 10\n    drawstring = String(i) + drawstring\n    shift--\n  }\n  if(shift < 0) {\n    let reversed = \"\"\n    for(let i = x; i > 0; i--) {\n      reversed = String(i) + reversed\n    }\n    return reversed\n  }\n  return drawstring\n}\n\n/*\n  Return the factorial of n\n  */\nconst factorial = (n) => {\n  if(n <= 1) return 1\n  return n * factorial(n - 1)\n}\n\n/*\n  Find the largest prime factor of n.\n  If it is a prime factor of n, return the prime number, else return n.\n  */\nconst largestPrimeFactor = (n) => {\n  let largestPrime = 1\n  for(let i = 2; i < n; i++) {\n    if(n % i === 0) {\n      if(i > largestPrime) largestPrime = i\n    }\n  }\n  return largestPrime\n}\n\n/*\n  Return the sum of the numbers in the list.\n  */\nconst sum = (numbers) => {\n  let sum = 0\n  for(let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n  }\n  return sum\n}\n\n/*\n  Return the difference of the numbers in the list.\n  */\nconst difference = (numbers) => {\n  let difference = 0\n  for(let i = 0; i < numbers.length; i++) {\n    difference += numbers[i]\n  }\n  return difference\n}\n\n/*\n  Return the sum of the squares of the numbers in the list.\n  */\nconst sumOfSquares = (numbers) => {\n  let sumOfSquares = 0\n  for(let i = 0; i < numbers.length; i++) {\n    sumOfSquares += numbers[i] * numbers[i]\n  }\n  return sumOfSquares\n}\n\n/*\n  Find the greatest common divisor (gcd) of two numbers.\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while(b!== 0) {\n    let tmp = a\n    a = b\n    b = tmp % b\n  }\n  return a\n}\n\n/*\n  Find the smallest common multiple (lcm) of two numbers.\n  */\nconst smallestCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b)\n}\n\n/*\n  Find the greatest common factor (gcf) of two numbers.\n  */\nconst greatestCommonFactor = (a, b) => {\n  while(a!== b) {\n    let tmp = a\n    a = b\n    b = tmp % b\n  }\n  return a\n}\n\n/*\n  Find the greatest common divisor (gcd) of n numbers.\n  */\nconst greatestCommonDivisorN = (numbers) => {\n  let gcd = 0\n  for(let i = 0; i < numbers.length; i++) {\n    gcd = greatestCommonDivisor(gcd, numbers[i])\n  }\n  return gcd\n}\n\n/*\n  Find the smallest common multiple (lcm) of n numbers.\n  */\nconst smallestCommonMultipleN = (numbers) => {\n  let lcm = 0\n  for(let i = 0; i < numbers.length; i++) {\n    lcm = smallestCommonMultiple(lcm, numbers[i])\n  }\n  return lcm\n}\n\n/*\n  Find the greatest common factor (gcf) of n numbers.\n  */\nconst greatestCommonFactorN = (numbers) => {\n  let gcf = 0\n  for(let i = 0; i < numbers.length; i++) {\n    gcf = greatestCommonFactor(gcf, numbers[i])\n  }\n  return gcf\n}\n\n/*\n  Find the smallest prime number p that is greater than n.\n  */\nconst largestPrimeNumber = (n) => {\n  let p = 2\n  while(p < n) {\n    p += 1\n  }\n  return p\n}\n\n/*\n  Find the smallest prime number p that is less than n.\n  */\nconst largestPrimeNumberLessThan = (n) => {\n  let p = 2\n  while(p < n) {\n    p += 1\n  }\n  return p - 1\n}\n\n/*\n  Find the smallest prime number p that is less than or equal to n.\n  */\nconst largestPrimeNumberLessThanOrEqualTo = (n) => {\n  let p = 2\n  while(p <= n) {\n    p += 1\n  }\n  return p - 1\n}\n\n/*\n  Find the smallest prime number p that is greater than or equal to n.\n  */\nconst largestPrimeNumberGreaterThanOrEqualTo = (n) => {\n  let p = 2\n  while(p <= n) {\n    p += 1\n  }\n  return p\n}\n\n/*\n  Find the smallest prime number p that is less than or equal to n.\n  */\nconst largestPrimeNumberGreaterThan = (n) => {\n  let p = 2\n  while(p < n) {\n    p += 1\n  }\n  return p\n}\n\n/*\n  Find the sum of the digits of n.\n  */\nconst sumOfDigits = (n) => {\n  let sum = 0\n  while(n > 0) {\n    sum = sum + n % 10\n    n = n / 10\n  }\n  return sum\n}\n\n/*\n  Find the sum of the digits of n.\n  */\nconst sumOfDigitsN = (numbers) => {\n  let sum = 0\n  for(let i = 0; i < numbers.length; i++) {\n    sum = sum + numbers[i]\n  }\n  return sum\n}\n\n/*\n  Find the product of the digits"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function routine that takes a string drawstring as input and returns hark back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   Write a function routine that takes a string drawstring as input and returns hark back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const charSet = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n  const charMap = { 'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6, 'H': 7, 'I': 8, 'J': 9, 'K': 10, 'L': 11, 'M': 12, 'N': 13, 'O': 14, 'P': 15, 'Q': 16, 'R': 17, 'S': 18, 'T': 19, 'U': 20, 'V': 21, 'W': 22, 'X': 23, 'Y': 24, 'Z': 25 }\n\n  const upperChars = s.split('').filter(x => x.toUpperCase() === x)\n  return upperChars.reduce((acc, c, i) => {\n    return charMap[c] + (acc + charSet.indexOf(c.toUpperCase())) % 26\n  }, 0)\n}\n\nconsole.log(digitSum(\"\"))\nconsole.log(digitSum(\"abAB\"))\nconsole.log(digitSum(\"abcCd\"))\nconsole.log(digitSum(\"helloE\"))\nconsole.log(digitSum(\"woArBld\"))\nconsole.log(digitSum(\"aAaaaXa\"))\nconsole.log(digitSum(\"a1b2c3\"))\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string drawstring that represents a number phone number of apples and oranges orange \n   that are distributed in a basket of fruit yield this basket contains \n   apples apple, oranges orange, and mango fruits. Given the string bowed stringed instrument that represents represent the total number of \n   the oranges and apples apple and an integer that represent act the total full number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a string drawstring that represents a number phone number of apples and oranges orange \n   that are distributed in a basket of fruit yield this basket contains \n   apples apple, oranges orange, and mango fruits. Given the string bowed stringed instrument that represents represent the total number of \n   the oranges and apples apple and an integer that represent act the total full number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n  let {\n    s: string,\n    n: number\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {\n    fruitDistribution: {\n      s: string,\n      n: number\n    } = {}\n  } = _\n  let {"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch arm of a tree that has non - negative integer nodes lymph node \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes node with the same smallest even value are found determine return the node lymph node that has smallest index. \n\n   The plucked node should be returned fall in a list, [ smalest_value, its index exponent ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" Given an array representing a branch arm of a tree that has non - negative integer nodes lymph node \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes node with the same smallest even value are found determine return the node lymph node that has smallest index. \n\n   The plucked node should be returned fall in a list, [ smalest_value, its index exponent ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    const array = arr.slice()\n    array.sort((a, b) => {\n        if (a % 2 === 0 && b % 2 === 0) {\n            return a - b\n        } else if (a % 2 === 0) {\n            return -1\n        } else if (b % 2 === 0) {\n            return 1\n        } else {\n            return a - b\n        }\n    })\n    const len = array.length\n    const min = array[0]\n    const index = array.findIndex(v => v % 2 === 0)\n    const result = [min, index]\n    return result\n}\n\nconsole.log(pluck([4, 2, 3]))\nconsole.log(pluck([1, 2, 3]))\nconsole.log(pluck([5, 0, 3, 0, 4, 2]))\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of positive integers integer. Return the greatest bang-up integer that is greater than \n   zero, and has a frequency greater capital than or equal to the value of the integer itself. \n   The frequency of an integer is the number numeral of times it appears appear in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non - empty list of positive integers integer. Return the greatest bang-up integer that is greater than \n   zero, and has a frequency greater capital than or equal to the value of the integer itself. \n   The frequency of an integer is the number numeral of times it appears appear in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n    const maxFreq = {\n        1: 1,\n        2: 1,\n        3: 2,\n        4: 2,\n        5: -1\n    };\n    const max = lst.reduce((acc, v, i) => {\n        if (maxFreq[v] > maxFreq[acc]) {\n            maxFreq[v] = maxFreq[acc];\n        }\n        return v;\n    }, lst[0]);\n    return maxFreq[max] > maxFreq[lst[0]]? max : -1;\n};\n\nexport default search;\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange foreign order. \n   Strange foreign sorting, is when you start begin with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange foreign order. \n   Strange foreign sorting, is when you start begin with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let list = [];\n  for(let i = 0; i < lst.length; i++) {\n    let smallest = lst[i];\n    let index = 0;\n    for(let j = i+1; j < lst.length; j++) {\n      if(smallest > lst[j]) {\n        smallest = lst[j];\n        index = j;\n      }\n    }\n    let largest = lst[index];\n    list.push(smallest);\n    list.push(largest);\n  }\n  return list;\n}\n\nconst crazySortList = (lst) => {\n  let list = [];\n  for(let i = 0; i < lst.length; i++) {\n    let smallest = lst[i];\n    let index = i;\n    for(let j = i+1; j < lst.length; j++) {\n      if(smallest > lst[j]) {\n        smallest = lst[j];\n        index = j;\n      }\n    }\n    let largest = lst[index];\n    list.push(largest);\n    list.push(smallest);\n  }\n  return list;\n}\n\nconst randomSortList = (lst) => {\n  let list = [];\n  for(let i = 0; i < lst.length; i++) {\n    let randomIndex = Math.floor(Math.random()*lst.length);\n    let temp = lst[i];\n    lst[i] = lst[randomIndex];\n    lst[randomIndex] = temp;\n  }\n  return lst;\n}\n\nconst bubbleSortList = (lst) => {\n  let list = [];\n  for(let i = 0; i < lst.length; i++) {\n    for(let j = 0; j < lst.length-1; j++) {\n      if(lst[j] > lst[j+1]) {\n        let temp = lst[j];\n        lst[j] = lst[j+1];\n        lst[j+1] = temp;\n      }\n    }\n  }\n  return lst;\n}\n\nconst insertionSortList = (lst) => {\n  for(let i = 1; i < lst.length; i++) {\n    for(let j = i; j > 0; j--) {\n      if(lst[j] < lst[j-1]) {\n        let temp = lst[j];\n        lst[j] = lst[j-1];\n        lst[j-1] = temp;\n      }\n    }\n  }\n  return lst;\n}\n\nconst mergeSortList = (lst) => {\n  let helper = [];\n  for(let i = 0; i < lst.length; i++) {\n    helper.push(lst[i]);\n  }\n  let helperLength = helper.length;\n  while(helperLength > 1) {\n    let half = Math.floor(helperLength/2);\n    for(let i = 0; i < half; i++) {\n      let largest = helper[i];\n      let index = i;\n      for(let j = i+1; j < helperLength; j++) {\n        if(largest < helper[j]) {\n          largest = helper[j];\n          index = j;\n        }\n      }\n      helper[index] = largest;\n    }\n    helperLength = half;\n  }\n  return helper;\n}\n\nconst quickSortList = (lst) => {\n  if(lst.length < 2) {\n    return lst;\n  }\n  let middle = Math.floor(lst.length/2);\n  let left = lst.slice(0, middle);\n  let right = lst.slice(middle);\n  quickSort(left);\n  quickSort(right);\n  let leftL = left.length;\n  let rightL = right.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = lst[0];\n  while(leftL > 0 && rightL > 0) {\n    if(left[i] < right[j]) {\n      lst[k] = left[i];\n      i++;\n      leftL--;\n    } else {\n      lst[k] = right[j];\n      j++;\n      rightL--;\n    }\n    k++;\n  }\n  while(leftL > 0) {\n    lst[k] = left[i];\n    i++;\n    leftL--;\n    k++;\n  }\n  while(rightL > 0) {\n    lst[k] = right[j];\n    j++;\n    rightL--;\n    k++;\n  }\n  return lst;\n}\n\nconst quickSort = (lst) => {\n  if(lst.length < 2) {\n    return lst;\n  }\n  let middle = Math.floor(lst.length/2);\n  let left = lst.slice(0, middle);\n  let right = lst.slice(middle);\n  quickSort(left);\n  quickSort(right);\n  let leftL = left.length;\n  let rightL = right.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = lst[0];\n  while(leftL > 0 && rightL > 0) {\n    if(left[i] < right[j]) {\n      lst[k] = left[i];\n      i++;\n      leftL--;\n    } else {\n      lst[k] = right[j];\n      j++;\n      rightL--;\n    }\n    k++;\n  }\n  while(leftL > 0) {\n    lst[k] = left[i];\n"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides side of a triangle. Return reelect the area of \n   the triangle rounded round to 2 decimal points if the three sides slope form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides side of a triangle. Return reelect the area of \n   the triangle rounded round to 2 decimal points if the three sides slope form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const side1 = a - b\n  const side2 = c - b\n  const cross = side1 * side2\n  const area = (cross / 2)\n\n  return area.toFixed(2)\n}\n\n/*\n  Given the lengths of the three sides side of a triangle. Return the area of \n   the triangle rounded round to 2 decimal points if the three sides slope form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const side1 = a - b\n  const side2 = c - b\n  const cross = side1 * side2\n  const area = (cross / 2)\n\n  return area.toFixed(2)\n}\n\n/*\n  Given the lengths of the three sides side of a triangle. Return the area of \n   the triangle rounded round to 2 decimal points if the three sides slope form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const side1 = a - b\n  const side2 = c - b\n  const cross = side1 * side2\n  const area = (cross / 2)\n\n  return area.toFixed(2)\n}\n\nconst triangleArea = (a, b, c) => {\n  const side1 = a - b\n  const side2 = c - b\n  const cross = side1 * side2\n  const area = (cross / 2)\n\n  return area.toFixed(2)\n}\n\nconst triangleArea = (a, b, c) => {\n  const side1 = a - b\n  const side2 = c - b\n  const cross = side1 * side2\n  const area = (cross / 2)\n\n  return area.toFixed(2)\n}\n\nconst triangleArea = (a, b, c) => {\n  const side1 = a - b\n  const side2 = c - b\n  const cross = side1 * side2\n  const area = (cross / 2)\n\n  return area.toFixed(2)\n}\n\nconst triangleArea = (a, b, c) => {\n  const side1 = a - b\n  const side2 = c - b\n  const cross = side1 * side2\n  const area = (cross / 2)\n\n  return area.toFixed(2)\n}\n\nconst triangleArea = (a, b, c) => {\n  const side1 = a - b\n  const side2 = c - b\n  const cross = side1 * side2\n  const area = (cross / 2)\n\n  return area.toFixed(2)\n}\n\nconst triangleArea = (a, b, c) => {\n  const side1 = a - b\n  const side2 = c - b\n  const cross = side1 * side2\n  const area = (cross / 2)\n\n  return area.toFixed(2)\n}\n\nconst triangleArea = (a, b, c) => {\n  const side1 = a - b\n  const side2 = c - b\n  const cross = side1 * side2\n  const area = (cross / 2)\n\n  return area.toFixed(2)\n}\n\nconst triangleArea = (a, b, c) => {\n  const side1 = a - b\n  const side2 = c - b\n  const cross = side1 * side2\n  const area = (cross / 2)\n\n  return area.toFixed(2)\n}\n\nconst triangleArea = (a, b, c) => {\n  const side1 = a - b\n  const side2 = c - b\n  const cross = side1 * side2\n  const area = (cross / 2)\n\n  return area.toFixed(2)\n}\n\nconst triangleArea = (a, b, c) => {\n  const side1 = a - b\n  const side2 = c - b\n  const cross = side1 * side2\n  const area = (cross / 2)\n\n  return area.toFixed(2)\n}\n\nconst triangleArea = (a, b, c) => {\n  const side1 = a - b\n  const side2 = c - b\n  const cross = side1 * side2\n  const area = (cross / 2)\n\n  return area.toFixed(2)\n}\n\nconst triangleArea = (a, b, c) => {\n  const side1 = a - b\n  const side2 = c - b\n  const cross = side1 * side2\n  const area = (cross / 2)\n\n  return area.toFixed(2)\n}\n\nconst triangleArea = (a, b, c) => {\n  const side1 = a - b\n  const side2 = c - b\n  const cross = side1 * side2\n  const area = (cross / 2)\n\n  return area.toFixed(2)\n}\n\nconst triangleArea = (a, b, c) => {\n  const side1 = a - b\n  const side2 = c - b\n  const cross = side1 * side2\n  const area = (cross / 2)\n\n  return area.toFixed(2)\n}\n\nconst triangleArea = (a, b, c) => {\n  const side1 = a - b\n  const side2 = c - b\n  const cross = side1 * side2\n  const area = (cross / 2)\n\n  return area.toFixed(2)\n}\n\nconst triangleArea ="}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns come back true if the object aim q will fly, and false fake otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns come back true if the object aim q will fly, and false fake otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const length = q.length\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && (length === 1 || (q.every((item) => item === q[length - 1 - item]) && sum <= w))\n}\n\n// console.log(willItFly([3, 2, 3], 9))\n// console.log(willItFly([3], 5))\n// console.log(willItFly([3, 2, 3, 2], 9))\n// console.log(willItFly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4))\n// console.log(willItFly([3, 2, 3], 9))\n// console.log(willItFly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], 99))\n// console.log(willItFly([2, 4, 8, 16, 32, 64, 128, 256], 1))\n// console.log(willItFly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\n// console.log(willItFly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], 3))\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find discover the minimum number phone number of elements that \n   need want to be changed to make create the array palindromic. A palindromic array is an array that \n   is read the same backwards backward and forwards ahead. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find discover the minimum number phone number of elements that \n   need want to be changed to make create the array palindromic. A palindromic array is an array that \n   is read the same backwards backward and forwards ahead. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  //TODO: implement it\n};\n\nexport {\n  smallestChange\n}\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts accept two lists of strings chain and returns the list that has \n   total entire number of chars char in the all strings of the list less than the other list.\n\n   if the two lists tilt have the same number numeral of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts accept two lists of strings chain and returns the list that has \n   total entire number of chars char in the all strings of the list less than the other list.\n\n   if the two lists tilt have the same number numeral of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const count1 = lst1.reduce((count, elm) => (count + elm.length), 0);\n  const count2 = lst2.reduce((count, elm) => (count + elm.length), 0);\n\n  if (count1 === count2) {\n    return lst1;\n  } else if (count1 > count2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n\nconst test = () => {\n  const lst1 = [\n    'hi',\n    'admin'\n  ];\n  const lst2 = [\n    'hi',\n    'hi',\n    'admin',\n    'project'\n  ];\n  console.log(totalMatch(lst1, lst2));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true on-key if the given number phone number is the multiplication of 3 prime choice numbers \n   and false fake otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns true on-key if the given number phone number is the multiplication of 3 prime choice numbers \n   and false fake otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const primeTable = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  return a in primeTable\n}\n\n/*Write a function that returns true on-key if the given number phone number is the multiplication of 2 prime choice numbers \n  and false fake otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime2 = (a) => {\n  const primeTable = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 511, 517, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  return a in primeTable\n}\n\n/*Write a function that returns true on-key if the given number phone number is the multiplication of 3 prime choice numbers \n  and false fake otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime3 = (a) => {\n  const primeTable = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 511, 517, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941,"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function routine that returns true on-key if a number x is a simple bare \n   power of n and false in other cases casing. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function routine that returns true on-key if a number x is a simple bare \n   power of n and false in other cases casing. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  return Math.pow(n, parseInt(x, 10)) === x;\n};\n\n/*\n  Your task is to write a function that takes a number x and returns the greatest \n  power of n that is less than or equal to x. \n  For example:\n  isSimplePower(4, 2) => 3\n  isSimplePower(3, 2) => 2\n  isSimplePower(3, 1) => 1\n  isSimplePower(5, 3) => 2\n  isSimplePower(6, 2) => 3\n  isSimplePower(2, 2) => 1\n  isSimplePower(1, 3) => 1\n  */\nconst largestSimplePowerLessThanOrEqualTo = (x, n) => {\n  return Math.floor(Math.log(x) / Math.log(n)) || 1;\n};\n\nconst largestSimplePowerLessThanOrEqualTo_2 = (x, n) => {\n  return largestSimplePowerLessThanOrEqualTo(x, n) - 1;\n};\n\nconst largestSimplePowerLessThanOrEqualTo_3 = (x, n) => {\n  const maxPower = largestSimplePowerLessThanOrEqualTo(x, n);\n  return maxPower === 1? x : largestSimplePowerLessThanOrEqualTo(x, n) - 1;\n};\n\nconst largestSimplePowerLessThanOrEqualTo_4 = (x, n) => {\n  const maxPower = largestSimplePowerLessThanOrEqualTo(x, n);\n  return maxPower === 1? x : largestSimplePowerLessThanOrEqualTo(x, n) - 1;\n};\n\nconst largestSimplePowerLessThanOrEqualTo_5 = (x, n) => {\n  const maxPower = largestSimplePowerLessThanOrEqualTo(x, n);\n  return maxPower === 1? x : largestSimplePowerLessThanOrEqualTo(x, n) - 1;\n};\n\nconst largestSimplePowerLessThanOrEqualTo_6 = (x, n) => {\n  const maxPower = largestSimplePowerLessThanOrEqualTo(x, n);\n  return maxPower === 1? x : largestSimplePowerLessThanOrEqualTo(x, n) - 1;\n};\n\nconst largestSimplePowerLessThanOrEqualTo_7 = (x, n) => {\n  const maxPower = largestSimplePowerLessThanOrEqualTo(x, n);\n  return maxPower === 1? x : largestSimplePowerLessThanOrEqualTo(x, n) - 1;\n};\n\nconst largestSimplePowerLessThanOrEqualTo_8 = (x, n) => {\n  const maxPower = largestSimplePowerLessThanOrEqualTo(x, n);\n  return maxPower === 1? x : largestSimplePowerLessThanOrEqualTo(x, n) - 1;\n};\n\nconst largestSimplePowerLessThanOrEqualTo_9 = (x, n) => {\n  const maxPower = largestSimplePowerLessThanOrEqualTo(x, n);\n  return maxPower === 1? x : largestSimplePowerLessThanOrEqualTo(x, n) - 1;\n};\n\nconst largestSimplePowerLessThanOrEqualTo_10 = (x, n) => {\n  const maxPower = largestSimplePowerLessThanOrEqualTo(x, n);\n  return maxPower === 1? x : largestSimplePowerLessThanOrEqualTo(x, n) - 1;\n};\n\nconst largestSimplePowerLessThanOrEqualTo_11 = (x, n) => {\n  const maxPower = largestSimplePowerLessThanOrEqualTo(x, n);\n  return maxPower === 1? x : largestSimplePowerLessThanOrEqualTo(x, n) - 1;\n};\n\nconst largestSimplePowerLessThanOrEqualTo_12 = (x, n) => {\n  const maxPower = largestSimplePowerLessThanOrEqualTo(x, n);\n  return maxPower === 1? x : largestSimplePowerLessThanOrEqualTo(x, n) - 1;\n};\n\nconst largestSimplePowerLessThanOrEqualTo_13 = (x, n) => {\n  const maxPower = largestSimplePowerLessThanOrEqualTo(x, n);\n  return maxPower === 1? x : largestSimplePowerLessThanOrEqualTo(x, n) - 1;\n};\n\nconst largestSimplePowerLessThanOrEqualTo_14 = (x, n) => {\n  const maxPower = largestSimplePowerLessThanOrEqualTo(x, n);\n  return maxPower === 1? x : largestSimplePowerLessThanOrEqualTo(x, n) - 1;\n};\n\nconst largestSimplePowerLessThanOrEqualTo_15 = (x, n) => {\n  const maxPower = largestSimplePowerLessThanOrEqualTo(x, n);\n  return maxPower === 1? x : largestSimplePowerLessThanOrEqualTo(x, n) - 1;\n};\n\nconst largestSimplePowerLessThanOrEqualTo_16 = (x, n) => {\n  const maxPower = largestSimplePowerLessThanOrEqualTo(x, n);\n  return maxPower === 1? x : largestSimplePowerLessThanOrEqualTo(x, n) - 1;\n};\n\nconst largestSimplePowerLessThanOrEqualTo_17 = (x, n) => {\n  const maxPower = largestSimplePowerLessThanOrEqualTo(x, n);\n  return maxPower === 1? x : largestSimplePowerLessThanOrEqualTo(x, n) - 1;\n};\n\nconst largestSimplePowerLessThanOrEqualTo_18 = (x, n) => {\n  const maxPower = largestSimplePowerLessThanOrEqualTo"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes claim an integer a and returns true on-key \n   if this ingeger is a cube of some integer number act. \n   Note: you may assume simulate the input is always constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes claim an integer a and returns true on-key \n   if this ingeger is a cube of some integer number act. \n   Note: you may assume simulate the input is always constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a <= 0) {\n    return false;\n  }\n  let cube = 1;\n  while (cube * cube <= a) {\n    if (a % cube === 0) {\n      return true;\n    }\n    cube++;\n  }\n  return false;\n};\n\nmodule.exports = iscube;\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function routine that receives \n   a hexadecimal number phone number as a string and counts count the number of hexadecimal \n   digits finger that are primes (prime number=== or a prime=== is a natural lifelike number numeral \n   greater than 1 that is not a product of two smaller belittled natural lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So thus you have to determine decide a number of the following succeed digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note bill: you may assume the input stimulation is always constantly correct or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a function routine that receives \n   a hexadecimal number phone number as a string and counts count the number of hexadecimal \n   digits finger that are primes (prime number=== or a prime=== is a natural lifelike number numeral \n   greater than 1 that is not a product of two smaller belittled natural lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So thus you have to determine decide a number of the following succeed digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note bill: you may assume the input stimulation is always constantly correct or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const hexDigits = \"0123456789ABCDEF\";\n  const digits = \"0123456789ABCDEF\";\n  const charDigits = \"0123456789ABCDEF\";\n  const hexNumbers = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n  const result = 0;\n  const hexString = num;\n  const nums = hexString.split(\"\");\n  const isPrime = (n) => {\n    return n > 1 && n % 1 === 0;\n  };\n  const isPrimeNumber = (n) => {\n    return isPrime(n);\n  };\n  const isPrimeNumberInArray = (n) => {\n    return nums.includes(n);\n  };\n  const checkPrimeNumbers = (num) => {\n    const arr = [0, 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1141, 1143, 1147, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417,"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form shape and your task is to convert change it to \n   binary format. The function should return a string bowed stringed instrument, with each character representing present a binary \n   number. Each character fictional character in the string chain will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end goal of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal form shape and your task is to convert change it to \n   binary format. The function should return a string bowed stringed instrument, with each character representing present a binary \n   number. Each character fictional character in the string chain will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end goal of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const str = []\n  while (decimal > 0) {\n    str.unshift(decimal & 1)\n    decimal = decimal >> 1\n  }\n  str.push(0)\n  return str.join(\"\")\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  const str = []\n  while (binary > 0) {\n    str.push(binary & 1)\n    binary = binary >> 1\n  }\n  str.push(0)\n  return str.join(\"\")\n}\n\nconst binaryToDecimal = (binary) => {\n  const str = []\n  while (binary > 0) {\n    str.push(binary & 1)\n    binary = binary >> 1\n  }\n  str.push(0)\n  return str.join(\"\")\n}\n\nconst binaryToDecimal = (binary) => {\n  const str = []\n  while (binary > 0) {\n    str.push(binary & 1)\n    binary = binary >> 1\n  }\n  str.push(0)\n  return str.join(\"\")\n}\n\nconst binaryToDecimal = (binary) => {\n  const str = []\n  while (binary > 0) {\n    str.push(binary & 1)\n    binary = binary >> 1\n  }\n  str.push(0)\n  return str.join(\"\")\n}\n\nconst binaryToDecimal = (binary) => {\n  const str = []\n  while (binary > 0) {\n    str.push(binary & 1)\n    binary = binary >> 1\n  }\n  str.push(0)\n  return str.join(\"\")\n}\n\nconst binaryToDecimal = (binary) => {\n  const str = []\n  while (binary > 0) {\n    str.push(binary & 1)\n    binary = binary >> 1\n  }\n  str.push(0)\n  return str.join(\"\")\n}\n\nconst binaryToDecimal = (binary) => {\n  const str = []\n  while (binary > 0) {\n    str.push(binary & 1)\n    binary = binary >> 1\n  }\n  str.push(0)\n  return str.join(\"\")\n}\n\nconst binaryToDecimal = (binary) => {\n  const str = []\n  while (binary > 0) {\n    str.push(binary & 1)\n    binary = binary >> 1\n  }\n  str.push(0)\n  return str.join(\"\")\n}\n\nconst binaryToDecimal = (binary) => {\n  const str = []\n  while (binary > 0) {\n    str.push(binary & 1)\n    binary = binary >> 1\n  }\n  str.push(0)\n  return str.join(\"\")\n}\n\nconst binaryToDecimal = (binary) => {\n  const str = []\n  while (binary > 0) {\n    str.push(binary & 1)\n    binary = binary >> 1\n  }\n  str.push(0)\n  return str.join(\"\")\n}\n\nconst binaryToDecimal = (binary) => {\n  const str = []\n  while (binary > 0) {\n    str.push(binary & 1)\n    binary = binary >> 1\n  }\n  str.push(0)\n  return str.join(\"\")\n}\n\nconst binaryToDecimal = (binary) => {\n  const str = []\n  while (binary > 0) {\n    str.push(binary & 1)\n    binary = binary >> 1\n  }\n  str.push(0)\n  return str.join(\"\")\n}\n\nconst binaryToDecimal = (binary) => {\n  const str = []\n  while (binary > 0) {\n    str.push(binary & 1)\n    binary = binary >> 1\n  }\n  str.push(0)\n  return str.join(\"\")\n}\n\nconst binaryToDecimal = (binary) => {\n  const str = []\n  while (binary > 0) {\n    str.push(binary & 1)\n    binary = binary >> 1\n  }\n  str.push(0)\n  return str.join(\"\")\n}\n\nconst binaryToDecimal = (binary) => {\n  const str = []\n  while (binary > 0) {\n    str.push(binary & 1)\n    binary = binary >> 1\n  }\n  str.push(0)\n  return str.join(\"\")\n}\n\nconst binaryToDecimal = (binary) => {\n  const str = []\n  while (binary > 0) {\n    str.push(binary & 1)\n    binary = binary >> 1\n  }\n  str.push(0)\n  return str.join(\"\")\n}\n\nconst binaryToDecimal = (binary) => {\n  const str = []\n  while (binary > 0) {\n    str.push(binary & 1)\n    binary = binary >> 1\n  }\n  str.push(0)\n  return str.join(\"\")\n}\n\nconst binaryToDecimal = (binary) => {\n  const str = []\n  while (binary > 0) {\n    str.push(binary & 1)\n    binary = binary >> 1\n  }\n  str.push(0)\n  return str.join(\"\")\n}\n\nconst binaryToDecimal = (binary) => {\n  const str = []\n  while (binary > 0) {\n    str.push(binary & 1)\n    binary = binary >> 1\n  }\n  str.push(0)\n  return str.join(\"\")\n}\n\nconst binaryToDecimal = (binary) => {\n  const"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task undertaking is to check if the string drawstring is happy or not. \n   A string bowed stringed instrument is happy if its length distance is at least 3 and every 3 consecutive letters letter are distinct discrete\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   Your task undertaking is to check if the string drawstring is happy or not. \n   A string bowed stringed instrument is happy if its length distance is at least 3 and every 3 consecutive letters letter are distinct discrete\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let s = s.toLowerCase();\n  let d = new Set(s);\n  return s.length >= 3 && s.match(/(.{3})(?!\\1)(?!\\2)(?!\\3)(?!\\4)(?!\\5)(?!\\6)(?!\\7)(?!\\8)(?!\\9)(?!\\0)(?!\\1\\2)(?!\\3\\4)(?!\\5\\6)(?!\\7\\8)(?!\\9\\0)(?!\\1\\3)(?!\\2\\4)(?!\\5\\6\\7)(?!\\7\\8\\0)(?!\\9\\1\\2\\3\\4\\5\\6\\7\\0)(?!\\1\\2\\3\\4\\5\\6\\7\\0\\1\\2\\3\\4\\5\\6\\7\\0\\2\\2\\3\\4\\5\\6\\7\\0\\3\\2\\3\\4\\5\\6\\7\\0\\4\\2\\3\\4\\5\\6\\7\\0\\5\\2\\3\\4\\5\\6\\7\\0\\6\\2\\3\\4\\5\\6\\7\\0\\7\\2\\3\\4\\5\\6\\7\\0\\0\\2\\3\\4\\5\\6\\7\\0\\1\\2\\3\\4\\5\\6\\7\\0\\2\\2\\3\\4\\5\\6\\7\\0\\3\\2\\3\\4\\5\\6\\7\\0\\4\\2\\3\\4\\5\\6\\7\\0\\5\\2\\3\\4\\5\\6\\7\\0\\6\\2\\3\\4\\5\\6\\7\\0\\7\\2\\3\\4\\5\\6\\7\\0\\0\\2\\3\\4\\5\\6\\7\\0\\1\\2\\3\\4\\5\\6\\7\\0\\2\\2\\3\\4\\5\\6\\7\\0\\3\\2\\3\\4\\5\\6\\7\\0\\4\\2\\3\\4\\5\\6\\7\\0\\5\\2\\3\\4\\5\\6\\7\\0\\6\\2\\3\\4\\5\\6\\7\\0\\7\\2\\3\\4\\5\\6\\7\\0\\0\\2\\3\\4\\5\\6\\7\\0\\1\\2\\3\\4\\5\\6\\7\\0\\2\\2\\3\\4\\5\\6\\7\\0\\3\\2\\3\\4\\5\\6\\7\\0\\4\\2\\3\\4\\5\\6\\7\\0\\5\\2\\3\\4\\5\\6\\7\\0\\6\\2\\3\\4\\5\\6\\7\\0\\7\\2\\3\\4\\5\\6\\7\\0\\0\\2\\3\\4\\5\\6\\7\\0\\1\\2\\3\\4\\5\\6\\7\\0\\2\\2\\3\\4\\5\\6\\7\\0\\3\\2\\3\\4\\5\\6\\7\\0\\4\\2\\3\\4\\5\\6\\7\\0\\5\\2\\3\\4\\5\\6\\7\\0\\6\\2\\3\\4\\5\\6\\7\\0\\7\\2\\3\\4\\5\\6\\7\\0\\0\\2\\3\\4\\5\\6\\7\\0\\1\\2\\3\\4\\5\\6\\7\\0\\2\\2\\3\\4\\5\\6\\7\\0\\3\\2\\3\\4\\5\\6\\7\\0\\4\\2\\3\\4\\5\\6\\7\\0\\5\\2\\3\\4\\5\\6\\7\\0\\6\\2\\3\\4\\5\\6\\7\\0\\7\\2\\3\\4\\5\\6\\7\\0\\0\\2\\3\\4\\5\\6\\7\\0\\1\\2\\3\\4\\5\\6\\7\\0\\2\\2\\3\\4\\5\\6\\7\\0\\3\\2\\3\\4\\5\\6\\7\\0\\4\\2\\3\\4\\5\\6\\7\\0\\5\\2\\3\\4\\5\\6\\7\\0\\6\\2\\3\\4\\5\\6\\7\\0\\7\\2\\3\\4\\5\\6\\7\\0\\0\\2\\3\\4\\5\\6\\7\\0\\1\\2\\3\\4\\5\\6\\7\\0\\2\\2\\3\\4\\5\\6\\7\\0\\3\\2\\3\\4\\5\\6\\7\\0\\4\\2\\3\\4\\5\\6\\7\\0\\5\\2\\3\\4\\5\\6\\7\\0\\6\\2\\3\\4\\5\\6\\7\\0\\7\\2\\3\\4\\5\\6\\7\\0\\0\\2\\3\\4\\5\\6\\7\\0\\1\\2\\3\\4\\5\\6\\7\\0\\2\\2\\3\\4\\5\\6\\7\\0\\3\\2\\3\\4\\5\\6\\7\\0\\4\\2\\3\\4\\5\\6\\7\\0\\5\\2\\3\\4\\5\\6\\7\\0\\6\\2\\3\\4\\5\\6\\7\\0\\7\\2\\3\\4\\5\\6\\7\\0\\0\\2\\3\\4\\5\\6\\7\\0\\1\\2\\3\\4\\5\\6\\7\\0\\2\\2\\3\\4\\5\\6\\7\\0\\3\\2\\3\\4\\5\\6\\7\\0\\4\\2\\3\\4\\5\\6\\7\\0\\5\\2\\3\\4\\5\\6\\7\\"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give grant the grades\n   to students. The teacher has been making produce her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used practice for grading. \n   She has given sacrifice you a list of GPAs for some students and you have to write \n   a function affair that can output a list of letter grades using the following table mesa: \n            GPA        |     Letter grade degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher has to give grant the grades\n   to students. The teacher has been making produce her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used practice for grading. \n   She has given sacrifice you a list of GPAs for some students and you have to write \n   a function affair that can output a list of letter grades using the following table mesa: \n            GPA        |     Letter grade degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArr = grades.map((x) => x.toFixed(2));\n  const gradesArrArr = gradesArr.map((x) => gradesArr.indexOf(x));\n\n  const letterGradeDegree = gradesArrArr.reduce((acc, index) => {\n    if (index === 0) return acc + 'A+';\n    if (index === gradesArrArr.length - 1) return acc + 'A-';\n    return acc + gradesArrArr[index - 1] + '+';\n  }, '0');\n\n  return gradesArrArr.map((grade, index) => {\n    return gradesArrArr[index] === gradesArr[index]? grade : letterGradeDegree.substr(index, 1);\n  });\n};\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])); // ['A+', 'B', 'C-', 'C', 'A-']\nconsole.log(numericalLetterGrade([3.0, 3.3, 2.7, 2.0, 1.7])); // ['A', 'B', 'C-', 'C', 'A-']\nconsole.log(numericalLetterGrade([3.0, 3.3, 2.7, 2.0, 1.7, 0.0])); // ['A', 'B', 'C-', 'C', 'A-', 'E']\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns come back true if the string\n   length duration is a prime number act or false otherwise differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a string and returns come back true if the string\n   length duration is a prime number act or false otherwise differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const num = parseInt(string);\n  return!(num % 2) && num > 1;\n};\n\nconst isPrime = (num) => {\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(primeLength('Hello'));\nconsole.log(primeLength('abcdcba'));\nconsole.log(primeLength('kittens'));\nconsole.log(primeLength('orange'));\nconsole.log(isPrime(11));\nconsole.log(isPrime(23));\nconsole.log(isPrime(89));\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers issue of n-digit\n   positive integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers issue of n-digit\n   positive integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n   n - 1 // start with 1\n   (n / 2) - 1 // all even\n   n - (n / 2) // all odd\n   }\n   \n  Input:  1\n  Output: 1\n  Explanation: There is one number issue of 1 digit starting with 1.\n   * / \nconst startsOneEnds = (n) = > {\n  n - 1 // start with 1\n  (n / 2) - 1 // all even\n  n - (n / 2) // all odd\n  }\n   \n  Input:  2\n  Output: 2\n  Explanation: There are two numbers issue of 2 digits starting with 1.\n   * / \nconst startsOneEnds = (n) = > {\n  n - 1 // start with 1\n  (n / 2) - 1 // all even\n  n - (n / 2) // all odd\n  }\n   \n  Input:  3\n  Output: 4\n  Explanation: There are four numbers issue of 3 digits starting with 1.\n   * / \nconst startsOneEnds = (n) = > {\n  n - 1 // start with 1\n  (n / 2) - 1 // all even\n  n - (n / 2) // all odd\n  }\n   \n  Input:  4\n  Output: 2\n  Explanation: There are two numbers issue of 4 digits starting with 1.\n * / \nconst startsOneEnds = (n) = > {\n  n - 1 // start with 1\n  (n / 2) - 1 // all even\n  n - (n / 2) // all odd\n  }\n   \n  Input:  5\n  Output: 1\n  Explanation: There is one number issue of 5 digits starting with 1.\n * / \nconst startsOneEnds = (n) = > {\n  n - 1 // start with 1\n  (n / 2) - 1 // all even\n  n - (n / 2) // all odd\n  }\n   \n  Input:  6\n  Output: 3\n  Explanation: There are three numbers issue of 6 digits starting with 1.\n * / \nconst startsOneEnds = (n) = > {\n  n - 1 // start with 1\n  (n / 2) - 1 // all even\n  n - (n / 2) // all odd\n  }\n   \n  Input:  7\n  Output: 2\n  Explanation: There are two numbers issue of 7 digits starting with 1.\n * / \nconst startsOneEnds = (n) = > {\n  n - 1 // start with 1\n  (n / 2) - 1 // all even\n  n - (n / 2) // all odd\n  }\n   \n  Input:  8\n  Output: 1\n  Explanation: There is one number issue of 8 digits starting with 1.\n * / \nconst startsOneEnds = (n) = > {\n  n - 1 // start with 1\n  (n / 2) - 1 // all even\n  n - (n / 2) // all odd\n  }\n   \n  Input:  9\n  Output: 4\n  Explanation: There are four numbers issue of 9 digits starting with 1.\n * / \nconst startsOneEnds = (n) = > {\n  n - 1 // start with 1\n  (n / 2) - 1 // all even\n  n - (n / 2) // all odd\n  }\n   \n  Input: 10\n  Output: 3\n  Explanation: There are three numbers issue of 10 digits starting with 1.\n * / \nconst startsOneEnds = (n) = > {\n  n - 1 // start with 1\n  (n / 2) - 1 // all even\n  n - (n / 2) // all odd\n  }\n   \n  Input: 11\n  Output: 2\n  Explanation: There are two numbers issue of 11 digits starting with 1.\n * / \nconst startsOneEnds = (n) = > {\n  n - 1 // start with 1\n  (n / 2) - 1 // all even\n  n - (n / 2) // all odd\n  }\n   \n  Input: 12\n  Output: 1\n  Explanation: There is one number issue of 12 digits starting with 1.\n * / \nconst startsOneEnds = (n) = > {\n  n - 1 // start with 1\n  (n / 2) - 1 // all even\n  n - (n / 2) // all odd\n  }\n   \n  Input: 13\n  Output: 3\n  Explanation: There are three numbers issue of 13 digits starting with 1.\n * / \nconst startsOneEnds = (n) = > {\n  n - 1 // start with 1\n  (n / 2) - 1 // all even\n  n - (n / 2) // all odd\n  }\n   \n  Input: 14\n  Output: 2\n  Explanation: There are two numbers issue of 14 digits starting with 1.\n * / \nconst startsOneEnds = (n) = > {\n  n - 1 // start with 1\n  (n / 2) - 1 // all even\n  n - (n / 2) // all odd\n  }\n   \n  Input: 15\n  Output: 1\n  Explanation: There is one number issue of 15 digits starting with 1.\n * / \nconst startsOneEnds = (n) = > {\n  n - 1 // start with 1\n  (n / 2) - 1 // all even\n  n - (n / 2) // all odd\n  }\n   \n  Input: 16\n  Output: 4\n  Explanation: There are four numbers issue of 16 digits starting with 1.\n * / \nconst startsOneEnds = (n) = > {\n  n - 1 // start with 1\n  (n / 2) - 1 // all even\n  n - (n / 2) // all odd\n  }\n   \n  Input: 17\n  Output: 3\n  Explanation: There are three numbers issue of 17 digits starting with 1.\n * / \nconst startsOneEnds = (n) = > {\n  n - 1 // start with 1\n  (n / 2) - 1 // all even\n  n - (n / 2) // all odd\n  }\n   \n  Input: 18\n  Output: 2\n  Explanation: There are two numbers issue of 18 digits"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((x, i) => i % 2 === 0? parseInt(x, 2) : parseInt(x, 2) * 2);\n  return digits.reduce((sum, n) => sum + n, 0)\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 1) {\n      lst[i] = sum;\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 1) {\n      lst[i] = sum;\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 1) {\n      lst[i] = sum;\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 1) {\n      lst[i] = sum;\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 1) {\n      lst[i] = sum;\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 1) {\n      lst[i] = sum;\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 1) {\n      lst[i] = sum;\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 1) {\n      lst[i] = sum;\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 1) {\n      lst[i] = sum;\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 1) {\n      lst[i] = sum;\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 1) {\n      lst[i] = sum;\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 1) {\n      lst[i] = sum;\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 1) {\n      lst[i] = sum;\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 1) {\n      lst[i] = sum;\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 1) {\n      lst[i] = sum;\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 1) {\n      lst[i] = sum;\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 1) {\n      lst[i] = sum;\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 1) {\n      lst[i] = sum;\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes claim a string and returns come back an ordered version translation of it. \n   Ordered version translation of string, is a string chain where all words (separated by space) \n   are replaced substitute by a new modern word discussion where all the characters quality arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes claim a string and returns come back an ordered version translation of it. \n   Ordered version translation of string, is a string chain where all words (separated by space) \n   are replaced substitute by a new modern word discussion where all the characters quality arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const ch = s.split(' ');\n  const map = [];\n  const newStr = [];\n  for (let i = 0; i < ch.length; i++) {\n    if (map[ch[i]] === undefined) {\n      map[ch[i]] = i;\n    }\n  }\n  for (let i = 0; i < ch.length; i++) {\n    newStr.push(ch[map[ch[i]]]);\n  }\n  return newStr.join(' ');\n};\n\nconst antiShuffleTest = (s) => {\n  const ch = s.split(' ');\n  const map = [];\n  const newStr = [];\n  for (let i = 0; i < ch.length; i++) {\n    if (map[ch[i]] === undefined) {\n      map[ch[i]] = i;\n    }\n  }\n  for (let i = 0; i < ch.length; i++) {\n    newStr.push(ch[map[ch[i]]]);\n  }\n  return newStr.join(' ');\n};\n\nconst test = (s) => {\n  const ch = s.split(' ');\n  const map = [];\n  const newStr = [];\n  for (let i = 0; i < ch.length; i++) {\n    if (map[ch[i]] === undefined) {\n      map[ch[i]] = i;\n    }\n  }\n  for (let i = 0; i < ch.length; i++) {\n    newStr.push(ch[map[ch[i]]]);\n  }\n  return newStr.join(' ');\n};\n\nconst test2 = (s) => {\n  const ch = s.split(' ');\n  const map = [];\n  const newStr = [];\n  for (let i = 0; i < ch.length; i++) {\n    if (map[ch[i]] === undefined) {\n      map[ch[i]] = i;\n    }\n  }\n  for (let i = 0; i < ch.length; i++) {\n    newStr.push(ch[map[ch[i]]]);\n  }\n  return newStr.join(' ');\n};\n\nconsole.log(test('Hello World!!!'));\nconsole.log(test2('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffleTest('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested cuddle lists, \n   which is similar like to matrix, however, unlike matrices, \n   each row course may contain a different unlike number of columns column. \n   Given feed lst, and integer x, find rule integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row rowing, columns), starting with 0. \n   Sort coordinates coordinate initially by rows course in ascending rise order. \n   Also, sort coordinates of the row by columns column in descending order orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested cuddle lists, \n   which is similar like to matrix, however, unlike matrices, \n   each row course may contain a different unlike number of columns column. \n   Given feed lst, and integer x, find rule integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row rowing, columns), starting with 0. \n   Sort coordinates coordinate initially by rows course in ascending rise order. \n   Also, sort coordinates of the row by columns column in descending order orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const len = lst.length\n  if (len === 0) return []\n  let result = []\n  for (let i = 0; i < len; i++) {\n    const row = lst[i]\n    if (row.length === 0) continue\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        result.push([i, j])\n      }\n    }\n  }\n  result.sort((a, b) => {\n    if (a[0] > b[0]) return 1\n    if (a[0] < b[0]) return -1\n    if (a[1] > b[1]) return 1\n    if (a[1] < b[1]) return -1\n  })\n  return result\n}\n\nconst getRowR = (lst, x) => {\n  const len = lst.length\n  if (len === 0) return []\n  let result = []\n  for (let i = 0; i < len; i++) {\n    const row = lst[i]\n    if (row.length === 0) continue\n    for (let j = row.length - 1; j >= 0; j--) {\n      if (row[j] === x) {\n        result.push([i, j])\n      }\n    }\n  }\n  result.sort((a, b) => {\n    if (a[0] > b[0]) return 1\n    if (a[0] < b[0]) return -1\n    if (a[1] > b[1]) return 1\n    if (a[1] < b[1]) return -1\n  })\n  return result\n}\n\nconst getRowC = (lst, x) => {\n  const len = lst.length\n  if (len === 0) return []\n  let result = []\n  for (let i = 0; i < len; i++) {\n    const row = lst[i]\n    if (row.length === 0) continue\n    for (let j = row.length - 1; j >= 0; j--) {\n      if (row[j] === x) {\n        result.push([i, j])\n      }\n    }\n  }\n  result.sort((a, b) => {\n    if (a[0] > b[0]) return 1\n    if (a[0] < b[0]) return -1\n    if (a[1] > b[1]) return 1\n    if (a[1] < b[1]) return -1\n  })\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const len = lst.length\n  if (len === 0) return []\n  let result = []\n  for (let i = 0; i < len; i++) {\n    const row = lst[i]\n    if (row.length === 0) continue\n    for (let j = row.length - 1; j >= 0; j--) {\n      if (row[j] === x) {\n        result.push([i, j])\n      }\n    }\n  }\n  result.sort((a, b) => {\n    if (a[0] > b[0]) return 1\n    if (a[0] < b[0]) return -1\n    if (a[1] > b[1]) return 1\n    if (a[1] < b[1]) return -1\n  })\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const len = lst.length\n  if (len === 0) return []\n  let result = []\n  for (let i = 0; i < len; i++) {\n    const row = lst[i]\n    if (row.length === 0) continue\n    for (let j = row.length - 1; j >= 0; j--) {\n      if (row[j] === x) {\n        result.push([i, j])\n      }\n    }\n  }\n  result.sort((a, b) => {\n    if (a[0] > b[0]) return 1\n    if (a[0] < b[0]) return -1\n    if (a[1] > b[1]) return 1\n    if (a[1] < b[1]) return -1\n  })\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const len = lst.length\n  if (len === 0) return []\n  let result = []\n  for (let i = 0; i < len; i++) {\n    const row = lst[i]\n    if (row.length === 0) continue\n    for (let j = row.length - 1; j >= 0; j--) {\n      if (row[j] === x) {\n        result.push([i, j])\n      }\n    }\n  }\n  result.sort((a, b) => {\n    if (a[0] > b[0]) return 1\n    if (a[0] < b[0]) return -1\n    if (a[1] > b[1]) return 1\n    if (a[1] < b[1]) return -1\n  })"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integers integer, return a copy of the given give array after sorting, \n   you will sort the given impart array in ascending order decree if the sum (first inaugural index exponent value, last index value) is odd curious, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non - negative integers integer, return a copy of the given give array after sorting, \n   you will sort the given impart array in ascending order decree if the sum (first inaugural index exponent value, last index value) is odd curious, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sorted = array.slice();\n\n  const getSorted = (index) => {\n    let i = index;\n    while (sorted[i]!== undefined) {\n      if (sorted[i + 1]!== undefined) {\n        const sum = sorted[i] + sorted[i + 1];\n        if (sum % 2 === 0) {\n          sorted[i] = sorted[i] + sorted[i + 1];\n          sorted.splice(i + 1, 1);\n        } else {\n          sorted.splice(i, 2);\n          i = i - 2;\n        }\n      } else {\n        sorted.splice(i, 1);\n      }\n    }\n  };\n\n  for (let i = 0; i < sorted.length - 1; i++) {\n    getSorted(i);\n  }\n\n  return sorted;\n};\n\nconst test = (array) => {\n  console.log('The sorted array:'+ JSON.stringify(sortArray(array)));\n};\n\ntest([2, 4, 3, 0, 1, 5, 6]);\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string drawstring as an argument and \n   returns come back a string encrypted code with the alphabet being rotated rotate. \n   The alphabet should be rotated revolve in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takes a string drawstring as an argument and \n   returns come back a string encrypted code with the alphabet being rotated rotate. \n   The alphabet should be rotated revolve in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  let code = [];\n  for (let i = 0; i < s.length; i++) {\n    let current = letters[s[i]];\n    code.push(letters[(current + current + current + current) % (letters.length)]);\n  }\n  return code.join('');\n};\n\n/*\nCreate a function decrypt that takes a string and return a string decrypted with the alphabet \nrotated back by two multiplied to two places stead.\n*/\nconst decrypt = (s) => {\n  const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  let code = [];\n  for (let i = 0; i < s.length; i++) {\n    let current = letters[s[i]];\n    code.push(letters[(current + current + current - current) % (letters.length)]);\n  }\n  return code.join('');\n};\n\nconst enc_dec = (s) => {\n  let e = encrypt(s);\n  let d = decrypt(e);\n  return d;\n};\n\nconst enc_dec_rev = (s) => {\n  let e = encrypt(s);\n  let d = decrypt(e);\n  return d;\n};\n\n/*\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    decrypt('ix') returns 'et'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('lm') returns 'hi'\n*/\nconst test = (s) => {\n  console.log(enc_dec(s));\n  console.log(enc_dec_rev(s));\n};\n\n//test('et');\n//test('lm');\n//test('gf');\n//test('kj');\n//test('iw');\n//test('ewhjklnop');\n//test('asdfghjkl');\n//test('owghjkl');\n//test('iw');\n//test('owghjkl');\n//test('et');\n//test('jm');\n//test('i');\n//test('owghjkl');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('iw');\n//test('owghjkl');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewhjklnop');\n//test('iw');\n//test('owghjkl');\n//test('ewh"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write publish a function nextSmallest() that returns come back the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   Write publish a function nextSmallest() that returns come back the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n      if (lst.length === 0) return null\n      let smallest = lst[0]\n      for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n          smallest = lst[i]\n        }\n      }\n      return smallest\n    }\n    \n    \n  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words password, and your task is to count consider the number \n   of boredoms boredom. A boredom is a sentence that starts depart with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words password, and your task is to count consider the number \n   of boredoms boredom. A boredom is a sentence that starts depart with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const count = S.split(\" \").filter(w => w.startsWith(\"I\")).length\n  return count\n}\n\n/*\n  You'll be given a string of sentences, and your task is to count the number of boring sentences. \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const count = S.split(\" \").filter(w => w.startsWith(\"I\")).length\n  return count\n}\n\n/*\n  You'll be given a string of sentences, and your task is to count the number of sentences that are boring. \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const count = S.split(\" \").filter(w => w.startsWith(\"I\")).length\n  return count\n}\n\n/*\n  You'll be given a string of sentences, and your task is to count the number of sentences that contain the word \"Bored\". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  0\n  >>> isBored(\"I am bored.\")\n  1\n  */\nconst isBored = (S) => {\n  const count = S.split(\" \").filter(w => w.startsWith(\"Bored\")).length\n  return count\n}\n\n/*\n  You'll be given a string of sentences, and your task is to count the number of sentences that contain the word \"Bored\". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  0\n  >>> isBored(\"I am bored.\")\n  1\n  */\nconst isBored = (S) => {\n  const count = S.split(\" \").filter(w => w.startsWith(\"Bored\")).length\n  return count\n}\n\n/*\n  You'll be given a string of sentences, and your task is to count the number of sentences that contain the word \"bored\". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  0\n  >>> isBored(\"I am bored.\")\n  1\n  */\nconst isBored = (S) => {\n  const count = S.split(\" \").filter(w => w.startsWith(\"bored\")).length\n  return count\n}\n\n/*\n  You'll be given a string of sentences, and your task is to count the number of sentences that contain the word \"bored\". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  0\n  >>> isBored(\"I am bored.\")\n  1\n  */\nconst isBored = (S) => {\n  const count = S.split(\" \").filter(w => w.startsWith(\"bored\")).length\n  return count\n}\n\n/*\n  You'll be given a string of sentences, and your task is to count the number of sentences that contain the word \"bored\". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  0\n  >>> isBored(\"I am bored.\")\n  1\n  */\nconst isBored = (S) => {\n  const count = S.split(\" \").filter(w => w.startsWith(\"bored\")).length\n  return count\n}\n\n/*\n  You'll be given a string of sentences, and your task is to count the number of sentences that contain the word \"Bored\". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  0\n  >>> isBored(\"I am bored.\")\n  1\n  */\nconst isBored = (S) => {\n  const count = S.split(\" \").filter(w => w.startsWith(\"Bored\")).length\n  return count\n}\n\n/*\n  You'll be given a string of sentences, and your task is to count the number of sentences that contain the word \"Bored\". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  0\n  >>> isBored(\"I am bored.\")\n  1\n  */\nconst isBored = (S) => {\n  const count = S.split(\" \").filter(w => w.startsWith(\"Bored\")).length\n  return count\n}\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes claim 3 numbers. \n   Returns return key true if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes claim 3 numbers. \n   Returns return key true if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x > y? x - y > z : y - x > z;\n};\n\nconst checkInt = (x, y, z) => {\n  return x > y? x - y > z : y - x > z;\n};\n\nconst main = () => {\n  const nums = [5, 2, 7];\n  console.log(anyInt(nums[0], nums[1], nums[2]));\n  console.log(anyInt(nums[0], nums[1], nums[2], 3.6, -2.2, 2));\n  console.log(checkInt(nums[0], nums[1], nums[2]));\n  console.log(checkInt(nums[0], nums[1], nums[2], 3.6, -2.2, 2));\n  console.log(checkInt(nums[0], nums[1], nums[2], 3.6, -2.2, 2));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes claim a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places plaza ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes claim a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places plaza ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const message = message.toLowerCase();\n  const output = '';\n  for(let i = 0; i < message.length; i++){\n    if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y'){\n      output += message[i].toUpperCase();\n    }else if(message[i] == 'b' || message[i] == 'c' || message[i] == 'd' || message[i] == 'f' || message[i] == 'g' || message[i] == 'h' || message[i] == 'j' || message[i] == 'k' || message[i] == 'l' || message[i] =='m' || message[i] == 'n' || message[i] == 'p' || message[i] == 'r' || message[i] =='s' || message[i] == 't' || message[i] == 'v' || message[i] == 'w' || message[i] == 'x' || message[i] == 'z'){\n      output += message[i].toLowerCase();\n    }else{\n      output += message[i];\n    }\n  }\n  return output;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need necessitate to find the largest big prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers. \n   You need necessitate to find the largest big prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let n = lst.length, i = 0, largest = 1, num = 0,\n    digit = 0, value = 0, max = 0,\n    flag = true;\n  while (i < n) {\n    num = parseInt(lst[i]);\n    value = parseInt(lst[i]);\n    digit = parseInt(lst[i].charAt(0));\n    if (value > largest) {\n      largest = value;\n      num = largest;\n    }\n    if (num < largest) {\n      num = largest;\n    }\n    if (num > largest) {\n      largest = num;\n      digit = value;\n    }\n    if (largest === num) {\n      if (digit === 1) {\n        flag = false;\n      }\n      if (digit === largest) {\n        flag = true;\n      }\n      if (largest === num) {\n        flag = true;\n      }\n      if (flag) {\n        return largest;\n      }\n    }\n    i++;\n  }\n  return largest;\n};\n\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys samara are strings in lower gloomy \n   case or all keys keystone are strings in upper case lawsuit, else return false. \n   The function should return false is the given sacrifice dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys samara are strings in lower gloomy \n   case or all keys keystone are strings in upper case lawsuit, else return false. \n   The function should return false is the given sacrifice dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    const keys = Object.keys(dict)\n    const upper = keys.filter(key => key.toUpperCase() === key)\n    const lower = keys.filter(key => key.toLowerCase() === key)\n    if (upper.length === 0) return false\n    if (lower.length === 0) return false\n    return true\n}\n\nconst checkDict = (dict) => {\n    const keys = Object.keys(dict)\n    const upper = keys.filter(key => key.toUpperCase() === key)\n    const lower = keys.filter(key => key.toLowerCase() === key)\n    if (upper.length === 0) return false\n    if (lower.length === 0) return false\n    return true\n}\n\nconst checkNumber = (dict) => {\n    const keys = Object.keys(dict)\n    const upper = keys.filter(key => key.toUpperCase() === key)\n    const lower = keys.filter(key => key.toLowerCase() === key)\n    if (upper.length === 0) return false\n    if (lower.length === 0) return false\n    return true\n}\n\nconst checkName = (dict) => {\n    const keys = Object.keys(dict)\n    const upper = keys.filter(key => key.toUpperCase() === key)\n    const lower = keys.filter(key => key.toLowerCase() === key)\n    if (upper.length === 0) return false\n    if (lower.length === 0) return false\n    return true\n}\n\nconst checkName1 = (dict) => {\n    const keys = Object.keys(dict)\n    const upper = keys.filter(key => key.toUpperCase() === key)\n    const lower = keys.filter(key => key.toLowerCase() === key)\n    if (upper.length === 0) return false\n    if (lower.length === 0) return false\n    return true\n}\n\nconst checkName2 = (dict) => {\n    const keys = Object.keys(dict)\n    const upper = keys.filter(key => key.toUpperCase() === key)\n    const lower = keys.filter(key => key.toLowerCase() === key)\n    if (upper.length === 0) return false\n    if (lower.length === 0) return false\n    return true\n}\n\nconst checkName3 = (dict) => {\n    const keys = Object.keys(dict)\n    const upper = keys.filter(key => key.toUpperCase() === key)\n    const lower = keys.filter(key => key.toLowerCase() === key)\n    if (upper.length === 0) return false\n    if (lower.length === 0) return false\n    return true\n}\n\nconst checkName4 = (dict) => {\n    const keys = Object.keys(dict)\n    const upper = keys.filter(key => key.toUpperCase() === key)\n    const lower = keys.filter(key => key.toLowerCase() === key)\n    if (upper.length === 0) return false\n    if (lower.length === 0) return false\n    return true\n}\n\nconst checkName5 = (dict) => {\n    const keys = Object.keys(dict)\n    const upper = keys.filter(key => key.toUpperCase() === key)\n    const lower = keys.filter(key => key.toLowerCase() === key)\n    if (upper.length === 0) return false\n    if (lower.length === 0) return false\n    return true\n}\n\nconst checkName6 = (dict) => {\n    const keys = Object.keys(dict)\n    const upper = keys.filter(key => key.toUpperCase() === key)\n    const lower = keys.filter(key => key.toLowerCase() === key)\n    if (upper.length === 0) return false\n    if (lower.length === 0) return false\n    return true\n}\n\nconst checkName7 = (dict) => {\n    const keys = Object.keys(dict)\n    const upper = keys.filter(key => key.toUpperCase() === key)\n    const lower = keys.filter(key => key.toLowerCase() === key)\n    if (upper.length === 0) return false\n    if (lower.length === 0) return false\n    return true\n}\n\nconst checkName8 = (dict) => {\n    const keys = Object.keys(dict)\n    const upper = keys.filter(key => key.toUpperCase() === key)\n    const lower = keys.filter(key => key.toLowerCase() === key)\n    if (upper.length === 0) return false\n    if (lower.length === 0) return false\n    return true\n}\n\nconst checkName9 = (dict) => {\n    const keys = Object.keys(dict)\n    const upper = keys.filter(key => key.toUpperCase() === key)\n    const lower = keys.filter(key => key.toLowerCase() === key)\n    if (upper.length === 0) return false\n    if (lower.length === 0) return false\n    return true\n}\n\nconst checkName10 = (dict) => {\n    const keys = Object.keys(dict)\n    const upper = keys.filter(key => key.toUpperCase() === key)\n    const lower = keys.filter(key => key.toLowerCase() === key)\n    if (upper.length === 0) return false\n    if (lower.length === 0) return false\n    return true\n}\n\nconst checkName11 = (dict) => {\n    const keys = Object.keys(dict)\n    const upper = keys."}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = []\n  for (let i = 2; i <= n; i++) {\n    const isPrime = isPrime(i)\n    if (isPrime) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  let count = 0\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime2 = (n) => {\n  const res = [1]\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst countUpTo2 = (n) => {\n  const arr = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime2(i)) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\nconst countUpTo3 = (n) => {\n  const arr = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\nconst countUpTo4 = (n) => {\n  const arr = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime2(i)) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\nconst countUpTo5 = (n) => {\n  const arr = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\nconst countUpTo6 = (n) => {\n  const arr = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime2(i)) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\nconst countUpTo7 = (n) => {\n  const arr = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\nconst countUpTo8 = (n) => {\n  const arr = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime2(i)) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\nconst countUpTo9 = (n) => {\n  const arr = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\nconst countUpTo10 = (n) => {\n  const arr = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime2(i)) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\nconst countUpTo11 = (n) => {\n  const arr = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\nconst countUpTo12 = (n) => {\n  const arr = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime2(i)) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\nconst countUpTo13 = (n) => {\n  const arr = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\nconst countUpTo14 = (n) => {\n  const arr = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime2(i)) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\nconst countUpTo15 = (n) => {\n  const arr = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\nconst countUpTo16 = (n) => {\n  const arr = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime2(i)) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\nconst countUpTo17 = (n) => {\n  const arr = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\nconst countUpTo18 = (n) => {\n  const arr = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime2(i)) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\nconst countUpTo19 = (n) => {\n  const arr = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\nconst countUp"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let digits = []\n  let i = 0\n  let j = 0\n  const aDigits = a.toString().split('')\n  const bDigits = b.toString().split('')\n\n  while (i < aDigits.length && j < bDigits.length) {\n    if (aDigits[i] === bDigits[j]) {\n      digits.push(aDigits[i])\n      i++\n      j++\n    } else if (aDigits[i] < bDigits[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n\n  return digits.reduce((carry, digit) => {\n    return carry + digit\n  })\n}\n\nconsole.log(multiply(2, 4))\nconsole.log(multiply(3, 5))\nconsole.log(multiply(12, 4))\nconsole.log(multiply(2, -15))\nconsole.log(multiply(14, -15))\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count consider the number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count consider the number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let uppercase = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      uppercase += 1;\n    }\n  }\n  return uppercase;\n};\n\nmodule.exports = countUpper;\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes claim a value (string) representing defend a number \n   and returns hark back the closest integer to it. If the number numeral is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes claim a value (string) representing defend a number \n   and returns hark back the closest integer to it. If the number numeral is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let val = value.toString();\n  let n = parseInt(val, 10);\n  let closest = Math.abs(n);\n  if (n === Math.round(n)) {\n    return Math.round(n);\n  }\n  for (let i = 2; i <= closest; i++) {\n    if (Math.abs(n - i) < Math.abs(n - closest)) {\n      closest = i;\n    }\n  }\n  return closest;\n};\n\nexport default closestInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make name a pile of n levels grade of stones. \n   The first inaugural level has n stones gem. \n   The number of stones rock in the next level is: \n       - the next odd curious number if n is odd. \n       - the next future even tied number if n is even. \n   Return the number of stones in each level horizontal surface in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to make name a pile of n levels grade of stones. \n   The first inaugural level has n stones gem. \n   The number of stones rock in the next level is: \n       - the next odd curious number if n is odd. \n       - the next future even tied number if n is even. \n   Return the number of stones in each level horizontal surface in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = []\n  let currentLevel = 1\n  while (currentLevel < n) {\n    const odd = n - (currentLevel % 2)\n    const even = n - currentLevel\n    if (odd === 0) {\n      currentLevel += even\n    } else {\n      levels.push(odd)\n      currentLevel += odd\n    }\n  }\n  return levels\n}\n\nconsole.log(makeAPile(3))\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words password separated by commas comma or spaces. Your task job is \n   to split the string bowed stringed instrument into words and return an array of the words son.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of words password separated by commas comma or spaces. Your task job is \n   to split the string bowed stringed instrument into words and return an array of the words son.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  // console.log(\"wordsString:\", s)\n  // return s.split(/(\\s|,)/g)\n  return s.split(/(\\s|,)/g)\n}\n\n/*\n  If the string contains at least one non-word character, return an array of the characters that make up\n  the string. Otherwise, return an empty array.\n  \n  For example:\n  nonWordCharacters(\"myname\") == [\"m\",\"n\",\"a\",\"n\",\"e\"]\n  nonWordCharacters(\"my name is John\") == [\"m\",\"n\",\"a\",\"n\",\"e\"]\n  nonWordCharacters(\"One, two, three, four, five, six\") == [\"O\",\"n\",\"e\",\"w\",\"o\",\"w\",\"e\"]\n  */\nconst nonWordCharacters = (s) => {\n  return s.match(/[^\\w]+/)\n}\n\n/*\n  Given a string s, return a string with all the unique words that appear in s.\n  \n  For example:\n  uniqWords(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  uniqWords(\"my name is John\") == \"my name is John\"\n  uniqWords(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst uniqWords = (s) => {\n  const words = wordsString(s)\n  const uniq = []\n  for (let i = 0; i < words.length; i++) {\n    for (let j = i + 1; j < words.length; j++) {\n      if (words[i] == words[j]) {\n        uniq.push(words[i])\n      }\n    }\n  }\n  return uniq.join(\" \")\n}\n\n/*\n  Given a string s, return a string with all the unique words that appear in s.\n  \n  For example:\n  uniqWords(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  uniqWords(\"my name is John\") == \"my name is John\"\n  uniqWords(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst uniqWordsInStr = (s) => {\n  const words = wordsString(s)\n  const uniq = []\n  for (let i = 0; i < words.length; i++) {\n    for (let j = i + 1; j < words.length; j++) {\n      if (words[i].toLowerCase() == words[j].toLowerCase()) {\n        uniq.push(words[i])\n      }\n    }\n  }\n  return uniq.join(\" \")\n}\n\n/*\n  Given a string s, return a string with all the non-word characters that appear in s.\n  \n  For example:\n  nonWordCharacters(\"myname\") == [\"m\",\"n\",\"a\",\"n\",\"e\"]\n  nonWordCharacters(\"my name is John\") == [\"m\",\"n\",\"a\",\"n\",\"e\"]\n  nonWordCharacters(\"One, two, three, four, five, six\") == [\"o\",\"n\",\"e\",\"w\",\"o\",\"w\",\"e\"]\n  */\nconst nonWordCharactersInStr = (s) => {\n  return s.match(/[^\\w]+/)\n}\n\nconst wordsInStr = (s) => {\n  const words = wordsString(s)\n  const uniq = []\n  for (let i = 0; i < words.length; i++) {\n    for (let j = i + 1; j < words.length; j++) {\n      if (words[i].toLowerCase() == words[j].toLowerCase()) {\n        uniq.push(words[i])\n      }\n    }\n  }\n  return uniq.join(\" \")\n}\n\nconst containsNonWord = (s) => {\n  const uniq = nonWordCharactersInStr(s)\n  return uniq.length > 0\n}\n\nconst containsNonWordInStr = (s) => {\n  const uniq = nonWordCharactersInStr(s)\n  return uniq.length > 0\n}\n\nconst containsWord = (s) => {\n  const uniq = wordsInStr(s)\n  return uniq.length > 0\n}\n\nconst containsWordInStr = (s) => {\n  const uniq = wordsInStr(s)\n  return uniq.length > 0\n}\n\nconst containsWordInStr2 = (s) => {\n  const uniq = wordsInStr(s)\n  return uniq.length > 0\n}\n\nconst containsWordInStr3 = (s) => {\n  const uniq = wordsInStr(s)\n  return uniq.length > 0\n}\n\nconst containsWordInStr4 = (s) => {\n  const uniq = wordsInStr(s)\n  return uniq.length > 0\n}\n\nconst containsWordInStr5 = (s) => {\n  const uniq = wordsInStr(s)\n  return uniq.length > 0\n}\n\nconst containsWordInStr6 = (s) => {\n  const uniq = wordsInStr(s)\n  return uniq.length > 0\n}\n\nconst containsWordInStr7 = (s) => {\n  const uniq = wordsInStr(s)\n  return uniq.length > 0\n}\n\nconst containsWordInStr8 = (s) => {\n  const uniq = wordsInStr(s)\n  return uniq.length > 0\n}\n\nconst containsWordInStr9 = (s) => {\n  const uniq = wordsInStr(s)\n  return uniq.length > 0\n}\n\nconst containsWordInStr10 = (s) => {\n  const uniq = wordsInStr(s)\n  return uniq.length > 0\n}\n"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive convinced numbers x and y and returns come back the \n   biggest even integer number act that is in the range [x, y] inclusive. If \n   there's no such number numeral, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive convinced numbers x and y and returns come back the \n   biggest even integer number act that is in the range [x, y] inclusive. If \n   there's no such number numeral, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const i = Math.ceil(Math.sqrt(x * y));\n  const j = Math.ceil(Math.sqrt(x * y));\n\n  for (let i = 1; i <= j; i++) {\n    if (i * i >= x && i * i <= y) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconst chooseNum2 = (x, y) => {\n  let i = Math.ceil(Math.sqrt(x * y));\n  let j = Math.ceil(Math.sqrt(x * y));\n\n  while (i * i <= x && j * j >= y) {\n    if (i * i + j * j == x + y) {\n      return i * j;\n    }\n    i++;\n    j--;\n  }\n  return -1;\n};\n\nmodule.exports = {\n  chooseNum,\n  chooseNum2\n};<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest cheeseparing integer and convert that to binary. \n   If n is greater capital than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest cheeseparing integer and convert that to binary. \n   If n is greater capital than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n    if (n > m) {\n        return -1;\n    }\n    let avg = (n + m) / 2;\n    let bits = Math.floor(Math.log(avg) / Math.log(2));\n    return Number.parseInt(Math.pow(2, bits) + avg, 2).toString(2);\n}\n\n//# sourceMappingURL=roundedAvg.js.map<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit. \n\n   Note: Returned list should be sorted screen in increasing order decree. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit. \n\n   Note: Returned list should be sorted screen in increasing order decree. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n    let result = []\n    let currDigit = 0\n    let currNum = 0\n    for (let i = 0; i < x.length; i++) {\n        currDigit = x[i]\n        if (currDigit % 2 == 0) {\n            currNum += 1\n        } else if (currNum > 0) {\n            result.push(currNum)\n            currNum = 0\n        }\n    }\n    if (currNum > 0) {\n        result.push(currNum)\n    }\n    return result\n}\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]))\n//[1, 15, 33]\nconsole.log(uniqueDigits([152, 323, 1422, 10]))\n//[]\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  arr = arr.sort((a, b) => a - b)\n  return arr.reverse().map(n => Number.toFixed(n, 3).charAt(0))\n}\n\n/*\n  Given an array of numbers, sort the array in ascending order.\n  \n  For example:\n    arr = [1, 9, 8, 3, 4, 5, 2]\n          -> sort arr -> [1, 2, 3, 4, 5, 8, 9]\n          -> reverse arr -> [9, 8, 5, 4, 3, 2, 1]\n  \n  For example:\n    arr = [5, 4, 3, 2, 1, 9, 8, 7, 6]\n          -> sort arr -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n          -> reverse arr -> [9, 8, 7, 6, 5, 4, 3, 2, 1]\n  \n  For example:\n    arr = [9, 8, 7, 6, 5, 4, 3, 2, 1]\n          -> sort arr -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n          -> reverse arr -> [9, 8, 7, 6, 5, 4, 3, 2, 1]\n  \n  For example:\n    arr = [3, 5, 6, 7, 8, 9]\n          -> sort arr -> [3, 5, 6, 7, 8, 9]\n          -> reverse arr -> [9, 7, 6, 5, 3, 8, 9]\n  \n  For example:\n    arr = [4, 6, 8, 9, 3, 5, 7]\n          -> sort arr -> [4, 5, 6, 7, 8, 9, 3]\n          -> reverse arr -> [9, 8, 7, 6, 5, 3, 4]\n  \n  For example:\n    arr = [5, 4, 3, 2, 1]\n          -> sort arr -> [5, 4, 3, 2, 1]\n          -> reverse arr -> [1, 2, 3, 4, 5]\n  \n  For example:\n    arr = [2, 1]\n          -> sort arr -> [2, 1]\n          -> reverse arr -> [1, 2]\n  \n  For example:\n    arr = [55, 1, -1]\n          -> sort arr -> [55, 1, -1]\n          -> reverse arr -> [1, -1, 55]\n  \n  For example:\n    arr = []\n          -> sort arr -> []\n          -> reverse arr -> []\n  \n  For example:\n    arr = [5, 6, 7, 8, 9]\n          -> sort arr -> [5, 6, 7, 8, 9]\n          -> reverse arr -> [9, 8, 7, 6, 5]\n  \n  For example:\n    arr = [4, 6, 8, 9, 3, 5, 7]\n          -> sort arr -> [4, 5, 6, 7, 8, 9, 3]\n          -> reverse arr -> [9, 8, 7, 6, 5, 3, 4]\n  \n  For example:\n    arr = [9, 8, 7, 6, 5, 4, 3, 2, 1]\n          -> sort arr -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n          -> reverse arr -> [9, 8, 7, 6, 5, 4, 3, 2, 1]\n  \n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]\n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n  \n  For example:\n    arr = [1, -1, 55]\n          -> sort arr -> [1, -1, 55]\n          -> reverse arr -> [55, -1, 1]\n  \n  For example:\n    arr = [1, -1, 55]\n          -> sort arr -> [1, -1, 55]\n          -> reverse arr -> [55, -1, 1]\n  \n  For example:\n    arr = [1, -1, 55]\n          -> sort arr -> [1, -1, 55]\n          -> reverse arr -> [55, -1, 1]\n  \n  For example:\n    arr = [1, -1, 55]\n          -> sort arr -> [1, -1, 55]\n          -> reverse arr -> [55, -1, 1]\n  \n  For example:\n    arr = [1, -1, 55]\n          -> sort arr -> [1, -1, 55]\n          -> reverse arr -> [55, -1, 1]\n  \n  For example:\n    arr = [1, -1, 55]\n          -> sort arr -> [1, -1, 55]\n          -> reverse arr -> [55, -1, 1]\n  \n  For example:\n    arr = [1, -1, 55]\n          -> sort arr -> [1, -1, 55]\n          -> reverse arr -> [55, -1, 1]\n  \n  For example:\n    arr = [1, -1, 55]\n          -> sort arr -> [1, -1, 55]\n          -> reverse arr -> [55, -1, 1]\n  \n  For"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes claim n as a parameter, \n   and returns come back a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers act from 1 to i otherwise. \n   i starts get down from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takes claim n as a parameter, \n   and returns come back a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers act from 1 to i otherwise. \n   i starts get down from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  var nthFactorial = (x) => x === 1? 1 : (x * f(x - 1));\n  var product = 1;\n  var result = [];\n  for (var i = 1; i < n; i += 2) {\n    result.push(nthFactorial(i));\n  }\n  for (var i = 1; i < n; i += 2) {\n    var temp = 1;\n    for (var j = 1; j < i; j += 2) {\n      temp *= j;\n    }\n    result.push(temp);\n  }\n  return result;\n};\n\n//console.log(f(5));\n\nconst test = () => {\n  var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 5"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number phone number of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the number phone number of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    let even = 0, odd = 0;\n    for (let i = 1; i < n; i++) {\n        let palindrome = (i + i).toString();\n        if (palindrome.length % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n};\n\nexport default evenOddPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes claim an array of integers and returns return key \n   the number of elements which has a sum union of digits > 0. \n   If a number numeral is negative, then its first inaugural signed bless digit will be negative: \n   e.g. for example -123 has signed sign digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which takes claim an array of integers and returns return key \n   the number of elements which has a sum union of digits > 0. \n   If a number numeral is negative, then its first inaugural signed bless digit will be negative: \n   e.g. for example -123 has signed sign digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const count = 0;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum > 0) {\n    count++;\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([1, -1, 2]));\nconsole.log(countNums([1, -1, -2]));\nconsole.log(countNums([1, -1, -2, -3, 4, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordered rate. Your task is to determine specify if \n   it is possible to get beget an array sorted in non - decreasing order decree by performing \n   the following be operation on the given array: \n       You are allowed to perform do right shift operation any number numeral of times prison term. \n  \n   One right shift operation means mean shifting transfer all elements of the array by one \n   position placement in the right veracious direction. The last element component of the array will be moved to \n   the starting start position military position in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted array by performing the above operation process \n   then return true else return false. \n   If the given array is empty then return true. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordered rate. Your task is to determine specify if \n   it is possible to get beget an array sorted in non - decreasing order decree by performing \n   the following be operation on the given array: \n       You are allowed to perform do right shift operation any number numeral of times prison term. \n  \n   One right shift operation means mean shifting transfer all elements of the array by one \n   position placement in the right veracious direction. The last element component of the array will be moved to \n   the starting start position military position in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted array by performing the above operation process \n   then return true else return false. \n   If the given array is empty then return true. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const isSorted = true\n  const arrLength = arr.length\n\n  if (arrLength === 0) {\n    return isSorted\n  }\n\n  let start = arr[arrLength - 1]\n  let isSorted = true\n\n  while (isSorted) {\n    if (arrLength === 1) {\n      return isSorted\n    }\n    const end = arr[arrLength - 2]\n    const i = start\n    let j = start\n    let k = arrLength - 1\n    while (j <= k) {\n      if (arr[j] < arr[k]) {\n        arr[j] = arr[k]\n        arr[k] = i\n        k -= 1\n        j += 1\n      } else {\n        k -= 1\n      }\n    }\n    if (arr[j] < arr[k]) {\n      arr[j] = arr[k]\n      arr[k] = i\n      k -= 1\n    }\n    if (arr[j] === arr[k]) {\n      k -= 1\n    }\n    start = start + 1\n  }\n  return isSorted\n}\n\nmoveOneBall([3, 4, 5, 1, 2])\n// false\n\nmoveOneBall([3, 5, 4, 1, 2])\n// true\n\nmoveOneBall([])\n// true\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function routine that takes two lists list of numbers, \n   and determines settle whether it is possible to perform do an exchange of elements \n   between them to make cause lst1 a list of only even numbers. \n   There is no limit on the number of exchanged change elements between lst1 and lst2.\n   If it is possible to exchange elements chemical element between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function routine that takes two lists list of numbers, \n   and determines settle whether it is possible to perform do an exchange of elements \n   between them to make cause lst1 a list of only even numbers. \n   There is no limit on the number of exchanged change elements between lst1 and lst2.\n   If it is possible to exchange elements chemical element between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n    const sorted1 = sorted(lst1);\n    const sorted2 = sorted(lst2);\n    if (sorted1.length!== sorted2.length) {\n        return 'NO';\n    }\n    const l = sorted1.length;\n    const a = sorted1[0];\n    const b = sorted2[0];\n    for (let i = 1; i < l; i++) {\n        if (sorted1[i] === sorted2[i]) {\n            continue;\n        }\n        if (a % 2!== b % 2) {\n            return 'NO';\n        }\n        a = sorted1[i];\n        b = sorted2[i];\n    }\n    return 'YES';\n};\n\nexchange([1, 2, 3, 4], [1, 2, 3, 4]);\nexchange([1, 2, 3, 4], [1, 5, 3, 4]);\nexchange([1, 2, 3, 4], [1, 5, 3, 5]);\nexchange([1, 2, 3, 4], [2, 1, 3, 4]);\nexchange([1, 2, 3, 4], [2, 1, 3, 5]);\nexchange([1, 2, 3, 4], [2, 1, 3, 6]);\nexchange([1, 2, 3, 4], [2, 1, 3, 7]);\nexchange([1, 2, 3, 4], [2, 1, 3, 8]);\nexchange([1, 2, 3, 4], [2, 1, 3, 9]);\nexchange([1, 2, 3, 4], [2, 1, 3, 10]);\nexchange([1, 2, 3, 4], [2, 1, 3, 11]);\nexchange([1, 2, 3, 4], [2, 1, 3, 12]);\nexchange([1, 2, 3, 4], [2, 1, 3, 13]);\nexchange([1, 2, 3, 4], [2, 1, 3, 14]);\nexchange([1, 2, 3, 4], [2, 1, 3, 15]);\nexchange([1, 2, 3, 4], [2, 1, 3, 16]);\nexchange([1, 2, 3, 4], [2, 1, 3, 17]);\nexchange([1, 2, 3, 4], [2, 1, 3, 18]);\nexchange([1, 2, 3, 4], [2, 1, 3, 19]);\nexchange([1, 2, 3, 4], [2, 1, 3, 20]);\nexchange([1, 2, 3, 4], [2, 1, 3, 21]);\nexchange([1, 2, 3, 4], [2, 1, 3, 22]);\nexchange([1, 2, 3, 4], [2, 1, 3, 23]);\nexchange([1, 2, 3, 4], [2, 1, 3, 24]);\nexchange([1, 2, 3, 4], [2, 1, 3, 25]);\nexchange([1, 2, 3, 4], [2, 1, 3, 26]);\nexchange([1, 2, 3, 4], [2, 1, 3, 27]);\nexchange([1, 2, 3, 4], [2, 1, 3, 28]);\nexchange([1, 2, 3, 4], [2, 1, 3, 29]);\nexchange([1, 2, 3, 4], [2, 1, 3, 30]);\nexchange([1, 2, 3, 4], [2, 1, 3, 31]);\nexchange([1, 2, 3, 4], [2, 1, 3, 32]);\nexchange([1, 2, 3, 4], [2, 1, 3, 33]);\nexchange([1, 2, 3, 4], [2, 1, 3, 34]);\nexchange([1, 2, 3, 4], [2, 1, 3, 35]);\nexchange([1, 2, 3, 4], [2, 1, 3, 36]);\nexchange([1, 2, 3, 4], [2, 1, 3, 37]);\nexchange([1, 2, 3, 4], [2, 1, 3, 38]);\nexchange([1, 2, 3, 4], [2, 1, 3, 39]);\nexchange([1, 2, 3, 4], [2, 1, 3, 40]);\nexchange([1, 2, 3, 4], [2, 1, 3, 41]);\nexchange([1, 2, 3, 4], [2, 1, 3, 42]);\nexchange([1, 2, 3, 4], [2, 1, 3, 43]);\nexchange([1, 2, 3, 4], [2, 1, 3, 44]);\nexchange([1, 2, 3, 4], [2, 1, 3, 45]);\nexchange([1, 2, 3, 4], [2, 1, 3, 46]);\nexchange([1, 2, 3, 4], [2, 1, 3, 47]);\nexchange([1, 2, 3, 4], [2, 1, 3, 48]);\nexchange([1, 2, 3, 4], [2, 1, 3, 49]);\nexchange([1, 2, 3, 4], [2, 1, 3, 50]);\nexchange([1, 2, 3, 4], [2, 1, 3, 51]);\nexchange([1, 2, 3, 4], [2, 1, 3, 52]);\nexchange([1, 2, 3, 4], [2, 1, 3, 53]);\nexchange([1, 2, 3, 4], [2, 1, 3, 54]);\nexchange([1, 2, 3, 4],"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space distance separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding equate count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space distance separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding equate count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let max = 0;\n  let letter = test.split('').map(x => x.toLowerCase());\n  letter.forEach(x => {\n    histogram[x] = (histogram[x] || 0) + 1;\n    if (histogram[x] > max) {\n      max = histogram[x];\n    }\n  });\n  return histogram;\n};\n\nmodule.exports = histogram;\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings chain s and c, you have to deleted all the characters quality in s that are equal to any character fictional character in c\n   then check if the result resultant role string is palindrome. \n   A string chain is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing hold the result string and true genuine / false assumed for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We are given two strings chain s and c, you have to deleted all the characters quality in s that are equal to any character fictional character in c\n   then check if the result resultant role string is palindrome. \n   A string chain is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing hold the result string and true genuine / false assumed for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = ''\n  for (let i = s.length - 1; i >= 0; i--) {\n    let char = s[i]\n    if (c.indexOf(char)!== -1) {\n      result = result + char\n    }\n  }\n  return [result, result === s]\n}\n\nmodule.exports = {\n  reverseDelete\n}\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number act of odd elements chemical element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number act of odd elements chemical element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let count = 0\n  for (let i = 0; i < lst.length; i++) {\n    let digit = lst[i]\n    if (digit.match(/[0-9]/)) {\n      digit = parseInt(digit)\n      if (digit % 2 === 0) {\n        count++\n      }\n    }\n  }\n  let out = []\n  for (let i = 0; i < lst.length; i++) {\n    let digit = lst[i]\n    if (digit.match(/[0-9]/)) {\n      digit = parseInt(digit)\n      if (digit % 2 === 0) {\n        out.push(`the number of odd elements ${digit}n the str4ng ${digit} of the ${digit}put.`)\n      } else {\n        out.push(`the number of odd elements ${digit}n the str1ng ${digit} of the ${digit}put.`)\n      }\n    }\n  }\n  return out\n}\n\nmodule.exports = oddCount\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find discover the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find discover the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (i === 0) {\n      continue;\n    }\n    let j = i - 1;\n    while (j >= 0 && sum < nums[j]) {\n      sum -= nums[j];\n      j--;\n    }\n    if (j >= 0) {\n      sum += nums[j];\n    }\n  }\n  return sum;\n};\n\nconst test = [\n  [2, 3, 4, 1, 2, 4],\n  [-1, -2, -3],\n  [2, -2, -3, -1, 2, -2, 3, -4, -2, 1, 2, -2, 2, -4, -3, -2, 3, -1, -2, -1, 1, -3, 3, -1, 2, -2, 2, -1, -2, -3, -2, -4, 1, 2, -2, 1, -3, -2, -3, -2, 2, -1, -2, -4, -1, 1, -3, -2, -2, -2, -1, 2, -3, -3, -4, -2, -2, -2, -1, -2, -3, -2, 2, -4, -3, -1, 1, -2, -2, -2, -3, -4, -2, -2, -2, -1, -2, -3, -2, -4, -2, -2, -3, -2, -2, -1, -2, -3, -1, -3, -2, -1, -1, -2, -2, -2, -3, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2, -3, -2, -4, -2, -2, -2, -1, -2, -3, -2, -4, -2, -2, -2, -1, -2, -3, -2, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2, -3, -1, -3, -2, -1, -1, -2, -2, -2, -3, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2, -3, -2, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2, -3, -1, -3, -2, -1, -1, -2, -2, -2, -3, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2, -3, -2, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2, -3, -2, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2, -3, -1, -3, -2, -1, -1, -2, -2, -2, -3, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2, -3, -2, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2, -3, -2, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2, -3, -2, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2, -3, -2, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2, -3, -2, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2, -3, -2, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2, -3, -2, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2, -3, -2, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2, -3, -2, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2, -3, -2, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2, -3, -2, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2, -3, -2, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2, -3, -2, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2, -3, -2, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2, -3, -2, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2, -3, -2, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2, -3, -2, -4, -2, -2, -2, -2, -3, -2, -2, -1, -2"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells well. Each row represents defend a single well, \n   and each 1 in a row course represents a single unmarried unit of water urine. \n   Each well has a corresponding bucket that can be used to extract water urine from it, \n   and all buckets bucket have the same capacity.\n   Your task job is to use practice the buckets to empty the wells. \n   Output output signal the number numeral of times time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells well. Each row represents defend a single well, \n   and each 1 in a row course represents a single unmarried unit of water urine. \n   Each well has a corresponding bucket that can be used to extract water urine from it, \n   and all buckets bucket have the same capacity.\n   Your task job is to use practice the buckets to empty the wells. \n   Output output signal the number numeral of times time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const fill = Array.from(new Array(grid.length), (x) => {\n    return {\n      fill: 0,\n      row: x,\n    };\n  });\n  const fill_fill = (row, index) => {\n    const fill = fill[row][index];\n    fill.fill += 1;\n    if (fill.fill >= capacity) {\n      return fill;\n    }\n    fill_fill(row, index + 1);\n  };\n  fill_fill(0, 0);\n  return fill[0][0].fill;\n};\n\nconst test = [\n  [\n    [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]],\n    1,\n  ],\n  [\n    [[0, 0, 0], [0, 0, 0]],\n    5,\n  ],\n  [\n    [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1]],\n    2,\n  ],\n];\n\ntest.forEach(({grid, capacity}) => {\n  console.log(`Test #${test.index + 1}`);\n  console.log(`Input: grid = ${JSON.stringify(grid)}`);\n  console.log(`Input: capacity = ${capacity}`);\n  console.log(`Output: ${maxFill(grid, capacity)}`);\n  console.log();\n});\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according to \n   number phone number of ones in their binary representation theatrical performance in ascending order decree. \n   For similar number act of ones one, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according to \n   number phone number of ones in their binary representation theatrical performance in ascending order decree. \n   For similar number act of ones one, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n    let sorted = []\n    let sortedLength = 0\n    let arrLength = arr.length\n    let index = 0\n    let start = 0\n    let end = 0\n    let result = 0\n    let resultLength = 0\n    let resultCount = 0\n    let value = 0\n    let valueCount = 0\n    let count = 0\n    while (index < arrLength) {\n        sorted.push(arr[index])\n        sortedLength += 1\n        resultCount = 1\n        result = arr[index]\n        resultLength = 1\n        count = 1\n        while (index < arrLength - 1) {\n            index += 1\n            value = arr[index]\n            valueCount = 1\n            if (value > result) {\n                result = value\n                resultLength = valueCount\n                resultCount += 1\n            } else if (value === result) {\n                resultCount += valueCount\n            }\n        }\n        if (resultCount === sortedLength) {\n            break\n        }\n        index += 1\n    }\n    return sorted\n}\n\n// console.log(sortArray([2, 5, 2, 3, 4]))<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number phone number n, you have been tasked to implement enforce \n   a function that returns hark back a list of all words from string bowed stringed instrument s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string drawstring s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains check only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number phone number n, you have been tasked to implement enforce \n   a function that returns hark back a list of all words from string bowed stringed instrument s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string drawstring s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains check only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const stringLength = s.length;\n  const result = [];\n  let i = 0;\n  let char;\n  let j = 0;\n  let hasConsonant = false;\n  while(i < stringLength){\n    char = s[i];\n    if(consonants.indexOf(char)!== -1){\n      hasConsonant = true;\n    }\n    else{\n      hasConsonant = false;\n    }\n    if(hasConsonant && j < n){\n      result.push(s.substr(i, j + 1));\n      j++;\n      i = i + j;\n    }\n    else if(hasConsonant && j == n){\n      return result;\n    }\n    else if(!hasConsonant){\n      j++;\n      i++;\n    }\n  }\n  return result;\n}\n\nmodule.exports = selectWords;\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find discover the closest vowel that stands stand between \n   two consonants from the right good side of the word (case lawsuit sensitive). \n  \n   Vowels vowel in the beginning and ending termination doesn't count consider. Return refund empty string drawstring if you didn't \n   find any vowel met the above condition. \n\n   You may assume bear that the given give string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to find discover the closest vowel that stands stand between \n   two consonants from the right good side of the word (case lawsuit sensitive). \n  \n   Vowels vowel in the beginning and ending termination doesn't count consider. Return refund empty string drawstring if you didn't \n   find any vowel met the above condition. \n\n   You may assume bear that the given give string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n    let charCount = 0;\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelIndex = 0;\n    let lastChar = word[word.length - 1];\n    for (let i = word.length - 2; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) >= 0) {\n            charCount++;\n        }\n        if (charCount === 1) {\n            vowelIndex = vowels.indexOf(word[i]);\n        }\n        if (charCount === 2) {\n            break;\n        }\n    }\n    return word[vowelIndex];\n};\n\nmodule.exports = getClosestVowel;\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings chain consist of open receptive \n   parentheses' (' or close cheeseparing parentheses')' only. \n   Your job occupation is to check if it is possible potential to concatenate the two strings bowed stringed instrument in\n   some order, that the resulting string bowed stringed instrument will be good dependable. \n   A string S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings, both strings chain consist of open receptive \n   parentheses' (' or close cheeseparing parentheses')' only. \n   Your job occupation is to check if it is possible potential to concatenate the two strings bowed stringed instrument in\n   some order, that the resulting string bowed stringed instrument will be good dependable. \n   A string S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const pair = lst.length === 2? lst[0].split('(') : null\n  const left = pair[0].split(')').map(s => s.split('('))\n  const right = pair[1].split(')').map(s => s.split('('))\n\n  const leftLength = left.length\n  const rightLength = right.length\n\n  for (let i = 0; i < leftLength; i++) {\n    if (!(rightLength > i && right[i].length === left[i].length && left[i].every((n, j) => n === '('))) {\n      return 'No'\n    }\n  }\n\n  return 'Yes'\n}\n\n/*\n  findAllParentheses(input)\n  Given a string, return all the parentheses in the string, in order.\n  Return empty array if there are no parentheses.\n  Examples:\n  findAllParentheses('abc') == ['(', ')', ')', '(']\n  findAllParentheses('(())') == ['(', ')', ')', '(', '(']\n  findAllParentheses(')') == []\n  */\nconst findAllParentheses = (input) => {\n  const lst = input.split(')').map((s, i) => i < input.length - 1? s + ')' : '')\n  const rst = input.split('(').map((s, i) => i < input.length - 1? '(' + s + ')' : '')\n\n  return lst.concat(rst)\n}\n\nconst findAllParenthesesInString = (input) => {\n  const pair = input.split('(')\n  const left = pair[0].split(')').map(s => s.split('('))\n  const right = pair[1].split(')').map(s => s.split('('))\n\n  return left.concat(right)\n}\n\n/*\n  isStringGood(input)\n  Given a string, check if it is good, in order.\n  Return 'Yes' if there's a good string, and return 'No' otherwise.\n  Examples:\n  isStringGood('(())') == 'Yes'\n  isStringGood('(())())') == 'No'\n  isStringGood('(()())') == 'No'\n  */\nconst isStringGood = (input) => {\n  const pair = input.split('(')\n  const left = pair[0].split(')').map(s => s.split('('))\n  const right = pair[1].split(')').map(s => s.split('('))\n\n  return left.every((s, i) => right.every((n, j) => n === '('))\n}\n\nconst isStringGoodInString = (input) => {\n  const pair = input.split('(')\n  const left = pair[0].split(')').map(s => s.split('('))\n  const right = pair[1].split(')').map(s => s.split('('))\n\n  return left.every((s, i) => right.every((n, j) => n === '('))\n}\n\nconst isStringGoodInSortedArray = (input) => {\n  const pair = input.split('(')\n  const left = pair[0].split(')').map(s => s.split('('))\n  const right = pair[1].split(')').map(s => s.split('('))\n\n  return left.every((s, i) => right.every((n, j) => n === '('))\n}\n\nconst isStringGoodInSortedArrayInString = (input) => {\n  const pair = input.split('(')\n  const left = pair[0].split(')').map(s => s.split('('))\n  const right = pair[1].split(')').map(s => s.split('('))\n\n  return left.every((s, i) => right.every((n, j) => n === '('))\n}\n\nconst isStringGoodInSortedArrayInStringInString = (input) => {\n  const pair = input.split('(')\n  const left = pair[0].split(')').map(s => s.split('('))\n  const right = pair[1].split(')').map(s => s.split('('))\n\n  return left.every((s, i) => right.every((n, j) => n === '('))\n}\n\nconst isStringGoodInSortedArrayInSortedArray = (input) => {\n  const pair = input.split('(')\n  const left = pair[0].split(')').map(s => s.split('('))\n  const right = pair[1].split(')').map(s => s.split('('))\n\n  return left.every((s, i) => right.every((n, j) => n === '('))\n}\n\nconst isStringGoodInSortedArrayInSortedArrayInSortedArray = (input) => {\n  const pair = input.split('(')\n  const left = pair[0].split(')').map(s => s.split('('))\n  const right = pair[1].split(')').map(s => s.split('('))\n\n  return left.every((s, i) => right.every((n, j) => n === '('))\n}\n\nconst isStringGoodInSortedArrayInSortedArrayInSortedArrayInSortedArray = (input) => {\n  const pair = input.split('(')\n  const left = pair[0].split(')').map(s => s.split('('))\n  const right = pair[1"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive convinced integer k, return a sorted list \n   of length duration k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive convinced integer k, return a sorted list \n   of length duration k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  if(k > arr.length) {\n    return [];\n  }\n\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while(i < arr.length) {\n    result.push(arr[i]);\n    i++;\n    if(i >= k) {\n      result.push(arr[j]);\n      j++;\n      k--;\n      if(k == 0) {\n        break;\n      }\n    }\n  }\n\n  return result;\n};\n\n// console.log(maximum([-3, -4, 5], 3));\n// console.log(maximum([4, -4, 4], 2));\n// console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers, return the sum of all of the odd leftover elements that are in even positions stead.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integers, return the sum of all of the odd leftover elements that are in even positions stead.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const oddPos = lst.filter((x) => x % 2 === 1);\n  return oddPos.reduce((acc, val) => val + acc, 0);\n};\n\nconsole.log(solution([5, 8, 7, 1])); //12\nconsole.log(solution([3, 3, 3, 3, 3])); //9\nconsole.log(solution([30, 13, 24, 321])); //0\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements chemical element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements chemical element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = arr.reduce((sum, elem) => sum + elem, 0)\n  const remainder = k % len(arr)\n  return remainder > 0? sum + remainder * arr[k - 1] : sum\n}\n\nconst addElementsSolve = (arr, k) => {\n  const sum = arr.reduce((sum, elem) => sum + elem, 0)\n  const remainder = k % len(arr)\n  return remainder > 0? sum + remainder * arr[k - 1] : sum\n}\n\nexport {addElements, addElementsSolve}\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted classify list that has the odd numbers issue in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows follow: start startle with any positive cocksure integer n. Then each term terminus is obtained from the \n   previous term as follows succeed: if the previous term condition is even, the next adjacent term is one half of \n   the previous term. If the previous term terminus is odd, the next following term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted classify list that has the odd numbers issue in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows follow: start startle with any positive cocksure integer n. Then each term terminus is obtained from the \n   previous term as follows succeed: if the previous term condition is even, the next adjacent term is one half of \n   the previous term. If the previous term terminus is odd, the next following term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) {\n      return [n, collatz(n / 2)];\n    }\n    const ret = [n, collatz(3 * n + 1)];\n    ret.sort();\n    return ret;\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz2 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) {\n      return [n, collatz(n / 2)];\n    }\n    const ret = [n, collatz(3 * n + 1)];\n    ret.sort((a, b) => {\n      if (a < b) return -1;\n      if (a > b) return 1;\n      return 0;\n    });\n    return ret;\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz3 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) {\n      return [n, collatz(n / 2)];\n    }\n    const ret = [n, collatz(3 * n + 1)];\n    ret.sort((a, b) => {\n      if (a < b) return 1;\n      if (a > b) return -1;\n      return 0;\n    });\n    return ret;\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz4 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) {\n      return [n, collatz(n / 2)];\n    }\n    const ret = [n, collatz(3 * n + 1)];\n    ret.sort((a, b) => {\n      if (a < b) return -1;\n      if (a > b) return 1;\n      return 0;\n    });\n    return ret;\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz5 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) {\n      return [n, collatz(n / 2)];\n    }\n    const ret = [n, collatz(3 * n + 1)];\n    ret.sort((a, b) => {\n      if (a < b) return 1;\n      if (a > b) return -1;\n      return 0;\n    });\n    return ret;\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz6 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) {\n      return [n, collatz(n / 2)];\n    }\n    const ret = [n, collatz(3 * n + 1)];\n    ret.sort((a, b) => {\n      if (a < b) return 1;\n      if (a > b) return -1;\n      return 0;\n    });\n    return ret;\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz7 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) {\n      return [n, collatz(n / 2)];\n    }\n    const ret = [n, collatz(3 * n + 1)];\n    ret.sort((a, b) => {\n      if (a < b) return -1;\n      if (a > b) return 1;\n      return 0;\n    });\n    return ret;\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz8 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) {\n      return [n, collatz(n / 2)];\n    }\n    const ret = [n, collatz(3 * n + 1)];\n    ret.sort((a, b) => {\n      if (a < b) return 1;\n      if (a > b) return -1;\n      return 0;\n    });\n    return ret;\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz9 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) {\n      return [n, collatz(n / 2)];\n    }\n    const ret = [n, collatz(3 * n + 1)];\n    ret.sort((a, b) => {\n      if (a < b) return -1;\n      if (a > b) return 1;\n      return 0;\n    });\n    return ret;\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz10 = (n) => {\n  const collatz = (n) => {\n    if (n"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates validate a given date string drawstring and \n   returns true dependable if the date is valid otherwise false fake. \n   The date is valid if all of the following rules principle are satisfied quenched: \n   1. The date string is not empty. \n   2. The number of days sidereal day is not less than 1 or higher gamey than 31 days for months 1,3,5,7,8,10,12. And the number of days day is not less than 1 or higher high than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher high than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which validates validate a given date string drawstring and \n   returns true dependable if the date is valid otherwise false fake. \n   The date is valid if all of the following rules principle are satisfied quenched: \n   1. The date string is not empty. \n   2. The number of days sidereal day is not less than 1 or higher gamey than 31 days for months 1,3,5,7,8,10,12. And the number of days day is not less than 1 or higher high than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher high than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n    //returns true if the date is valid else false\n    const months = [\n        'January', 'February', 'March', 'April', 'May', 'June',\n        'July', 'August', 'September', 'October', 'November', 'December'\n    ];\n    const days = [\n        'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday',\n        'Saturday'\n    ];\n    const daysOfWeek = [\n        'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\n    ];\n\n    let dateArray = date.split('-');\n    let month = parseInt(dateArray[0]);\n    let day = parseInt(dateArray[1]);\n    let year = parseInt(dateArray[2]);\n    let dayCount = 0;\n    let monthCount = 0;\n    let dayCount = 0;\n\n    if (date === '') {\n        return false;\n    }\n\n    if (date.length < 6) {\n        return false;\n    }\n\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    if (day < 1 || day > 31) {\n        return false;\n    }\n\n    if (month === 4 || month === 6 || month === 9 || month === 11) {\n        if (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n        if (day < 1 || day > 31) {\n            return false;\n        }\n    }\n\n    if (month === 2) {\n        if (day < 1 || day > 29) {\n            return false;\n        }\n    }\n\n    for (let i = 0; i < month; i++) {\n        dayCount += new Date(year, i + 1, 0).getDate();\n    }\n\n    if (dayCount < 1) {\n        return false;\n    }\n\n    for (let i = 0; i < day; i++) {\n        monthCount += new Date(year, month, i + 1).getDate();\n    }\n\n    if (monthCount < 1) {\n        return false;\n    }\n\n    if (dayCount > monthCount) {\n        return false;\n    }\n\n    return true;\n};\n\n/*\n  You have to write a function which validates validate a given date string drawstring and \n  returns true dependable if the date is valid otherwise false fake. \n  The date is valid if all of the following rules principle are satisfied quenched: \n  1. The date string is not empty. \n  2. The number of days sidereal day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days day is not less than 1 or higher than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n  3. The months should not be less than 1 or higher high than 12. \n  4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate1 = (date) => {\n    //returns true if the date is valid else false\n    const months = [\n        'January', 'February', 'March', 'April', 'May', 'June',\n        'July', 'August', 'September', 'October', 'November', 'December'\n    ];\n    const days = [\n        'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday',\n        'Saturday'\n    ];\n    const daysOfWeek = [\n        'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\n    ];\n\n    let dateArray = date.split('-');\n    let month = parseInt(dateArray[0]);\n    let day = parseInt(dateArray[1]);\n    let year = parseInt(dateArray[2]);\n    let dayCount = 0;\n    let monthCount = 0;\n    let dayCount = 0;\n\n    if (date === '') {\n        return false;\n    }\n\n    if (date.length < 6) {\n        return false;\n    }\n\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    if (day < 1 || day > 31) {\n        return false;\n    }\n\n    if (month === 4 || month === 6 || month === 9 || month === 11) {\n        if (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n        if (day < 1 || day > 31) {\n            return false;\n        }\n    }\n\n    if (month === 2) {\n        if (day < 1 || day > 29) {\n            return false;\n        }\n    }\n\n    for (let i = 0; i < month; i++) {\n        dayCount += new Date(year, i + 1, 0).getDate();\n    }\n\n    if (dayCount < 1) {\n        return false;\n    }"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const numbers = words.filter(w => /^[0-9]+$/.test(w));\n  const letters = words.filter(w => /^[A-Z]+$/.test(w));\n  let numLetters = 0;\n  let lettersLeft = 0;\n  let numLettersLeft = 0;\n  for(let i = 0; i < letters.length; i++){\n    if(/[0-9]/.test(letters[i])){\n      numLetters++;\n    }\n    if(/[A-Z]/.test(letters[i])){\n      lettersLeft++;\n    }\n  }\n  let numLettersLeftLeft = 0;\n  for(let i = 0; i < letters.length; i++){\n    if(/[0-9]/.test(letters[i])){\n      numLettersLeft++;\n    }\n    if(/[A-Z]/.test(letters[i])){\n      numLettersLeftLeft++;\n    }\n  }\n  return [words, numbers, letters, numLetters, lettersLeft, numLettersLeft, numLettersLeftLeft];\n}\n\n/* Given a list of words, print the longest word in the list\n  Examples\n  longestWord([]) ➞ \"\"\n  longestWord([[]]) ➞ \"\"\n  longestWord([[\"a\"], [\"a\"], [\"a\"]]) ➞ \"a\"\n  longestWord([[\"a\"], [\"a\"], [\"a\"], [\"b\"], [\"a\"]]) ➞ \"a\"\n  longestWord([[\"a\"], [\"a\"], [\"a\"], [\"b\"], [\"a\"], [\"a\"]]) ➞ \"a\"\n  */\nconst longestWord = (arr) => {\n  let longest = \"\";\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i].length > longest.length){\n      longest = arr[i];\n    }\n  }\n  return longest;\n}\n\n/* Given a list of numbers, return the first number that can be made up of\n  the numbers in the list.\n  Examples\n  numbersToString([]) ➞ \"\"\n  numbersToString([1, 2, 3, 4]) ➞ 1\n  numbersToString([1, 2, 3, 4, 5]) ➞ 1\n  */\nconst numbersToString = (arr) => {\n  let str = \"\";\n  for(let i = 0; i < arr.length; i++){\n    let num = arr[i];\n    if(num < arr.length){\n      str += num;\n      str += \" \";\n    }\n  }\n  return str;\n}\n\n/* Given a string of numbers, return a list of numbers in the string\n  Examples\n  numbersToString(\"\") ➞ []\n  numbersToString(\"1234\") ➞ [12, 34]\n  numbersToString(\"12,34\") ➞ [12, 34]\n  */\nconst numbersToArray = (txt) => {\n  let nums = txt.split(/\\s+/).map(num => parseInt(num));\n  return nums;\n}\n\n/* Given a string of numbers, return the sum of the numbers in the string\n  Examples\n  numbersToSum(\"\") ➞ 0\n  numbersToSum(\"1234\") ➞ 1234\n  numbersToSum(\"12,34\") ➞ 1234\n  */\nconst numbersToSum = (txt) => {\n  let nums = numbersToArray(txt);\n  return nums.reduce((a, b) => a + b);\n}\n\n/* Given a list of words, return a list of the first letter in each word\n  Examples\n  lettersToString([]) ➞ []\n  lettersToString([\"a\", \"b\", \"c\", \"d\"]) ➞ [\"a\", \"b\", \"c\", \"d\"]\n  lettersToString([\"a\", \"b\", \"c\", \"d\", \"e\"]) ➞ [\"a\", \"b\", \"c\", \"d\", \"e\"]\n  */\nconst lettersToString = (arr) => {\n  let str = \"\";\n  for(let i = 0; i < arr.length; i++){\n    str += arr[i][0];\n    str += \" \";\n  }\n  return str;\n}\n\n/* Given a list of words, return the first letter in each word\n  Examples\n  lettersToString([]) ➞ []\n  lettersToString([\"a\", \"b\", \"c\", \"d\"]) ➞ [\"a\", \"b\", \"c\", \"d\"]\n  lettersToString([\"a\", \"b\", \"c\", \"d\", \"e\"]) ➞ [\"a\", \"b\", \"c\", \"d\", \"e\"]\n  */\nconst lettersToArray = (arr) => {\n  let letters = [];\n  for(let i = 0; i < arr.length; i++){\n    let str = arr[i];\n    letters.push(str[0]);\n  }\n  return letters;\n}\n\n/* Given a list of strings, return a list of the first letter in each word\n  Examples\n  lettersToString([]) ➞ []\n  lettersToString([\"a\", \"b\", \"c\", \"d\"]) ➞ [\"a\", \"b\", \"c\", \"d\"]\n  lettersToString([\"a\", \"b\", \"c\", \"d\", \"e\"]) ➞ [\"a\", \"b\", \"c\", \"d\", \"e\"]\n  */\nconst lettersToArrayOfStrings = (arr) => {\n  let letters = [];\n  for(let i = 0; i < arr.length; i++){\n    let str = arr[i];"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order club. If list has more than 1 duplicate of the same \n   number act, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order club. If list has more than 1 duplicate of the same \n   number act, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (!Array.isArray(lst)) return false;\n  let len = lst.length;\n  for (let i = 0; i < len; i++) {\n    if (lst[i] >= 0 && lst[i] > lst[i+1]) return false;\n  }\n  return true;\n}\n\n/*\n  Given a list of numbers, return whether or not they are sorted classify \n  in ascending order club. If list has more than 1 duplicate of the same \n  number act, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isUnique = (lst) => {\n  if (!Array.isArray(lst)) return false;\n  let len = lst.length;\n  for (let i = 0; i < len; i++) {\n    if (lst[i] >= 0 && lst[i] > lst[i+1]) return false;\n  }\n  return true;\n}\n\n/*\nGiven a list of numbers, return whether or not they are sorted classify \nin ascending order club. If list has more than 1 duplicate of the same \nnumber act, return false. Assume no negative minus numbers and only integers integer.\nExamples\nisSorted([5]) ➞ true\nisSorted([1, 2, 3, 4, 5]) ➞ true\nisSorted([1, 3, 2, 4, 5]) ➞ false\nisSorted([1, 2, 3, 4, 5, 6]) ➞ true\nisSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\nisSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\nisSorted([1, 2, 2, 3, 3, 4]) ➞ true\nisSorted([1, 2, 2, 2, 3, 4]) ➞ false\n*/\nconst isPartitioned = (lst) => {\n  if (!Array.isArray(lst)) return false;\n  let len = lst.length;\n  let n = len - 1;\n  let l = 0;\n  for (let i = 0; i <= n; i++) {\n    if (lst[i] >= 0 && lst[i] > lst[i+1]) {\n      let h = lst[i];\n      lst[i] = lst[n];\n      lst[n] = h;\n      n--;\n    }\n  }\n  return isSorted(lst);\n}\n\n/*\nGiven a list of numbers, return whether or not they are sorted classify \nin ascending order club. If list has more than 1 duplicate of the same \nnumber act, return false. Assume no negative minus numbers and only integers integer.\nExamples\nisSorted([5]) ➞ true\nisSorted([1, 2, 3, 4, 5]) ➞ true\nisSorted([1, 3, 2, 4, 5]) ➞ false\nisSorted([1, 2, 3, 4, 5, 6]) ➞ true\nisSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\nisSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\nisSorted([1, 2, 2, 3, 3, 4]) ➞ true\nisSorted([1, 2, 2, 2, 3, 4]) ➞ false\n*/\nconst isSortedPartitioned = (lst) => {\n  if (!Array.isArray(lst)) return false;\n  let len = lst.length;\n  let n = len - 1;\n  let l = 0;\n  for (let i = 0; i <= n; i++) {\n    if (lst[i] >= 0 && lst[i] > lst[i+1]) {\n      let h = lst[i];\n      lst[i] = lst[n];\n      lst[n] = h;\n      n--;\n    }\n  }\n  return isPartitioned(lst);\n}\n\nconst main = () => {\n  console.log(isSorted([5]));\n  console.log(isSorted([1, 2, 3, 4, 5]));\n  console.log(isSorted([1, 3, 2, 4, 5]));\n  console.log(isSorted([1, 2, 3, 4, 5, 6]));\n  console.log(isSorted([1, 2, 3, 4, 5, 6, 7]));\n  console.log(isSorted([1, 3, 2, 4, 5, 6, 7]));\n  console.log(isSorted([1, 2, 2, 3, 3, 4]));\n  console"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  // check if two intervals overlap\n  if (!interval1.end ||!interval2.start) {\n    return \"NO\";\n  }\n\n  // check if two intervals overlap\n  if (interval1.start > interval2.end || interval2.start > interval1.end) {\n    return \"NO\";\n  }\n\n  // check if two intervals overlap\n  return Math.floor(interval1.end - interval2.start) % 1 === 0? \"YES\" : \"NO\";\n};\n\nconsole.log(intersection((1, 2), (2, 3)));\nconsole.log(intersection((-1, 1), (0, 4)));\nconsole.log(intersection((-3, -1), (-5, 5)));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need necessitate to return\n   sum of magnitudes magnitude of integers multiplied breed by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need necessitate to return\n   sum of magnitudes magnitude of integers multiplied breed by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n    let signSum = 0;\n    arr.forEach(n => {\n        if (n!== 0) {\n            signSum += n * Math.sign(n);\n        }\n    });\n    return signSum;\n};\n\nconst prodSigns2 = (arr) => {\n    let signSum = 0;\n    arr.forEach(n => {\n        if (n!== 0) {\n            signSum += n;\n        }\n    });\n    return signSum;\n};\n\nconst prodSigns3 = (arr) => {\n    let signSum = 0;\n    arr.forEach(n => {\n        if (n!== 0) {\n            signSum += Math.sign(n);\n        }\n    });\n    return signSum;\n};\n\nconst prodSigns4 = (arr) => {\n    let signSum = 0;\n    arr.forEach(n => {\n        if (n!== 0) {\n            signSum += n;\n        }\n    });\n    return signSum;\n};\n\nconst prodSigns5 = (arr) => {\n    let signSum = 0;\n    arr.forEach(n => {\n        if (n!== 0) {\n            signSum += n;\n        }\n    });\n    return signSum;\n};\n\nconst prodSigns6 = (arr) => {\n    let signSum = 0;\n    arr.forEach(n => {\n        if (n!== 0) {\n            signSum += n;\n        }\n    });\n    return signSum;\n};\n\nconst prodSigns7 = (arr) => {\n    let signSum = 0;\n    arr.forEach(n => {\n        if (n!== 0) {\n            signSum += n;\n        }\n    });\n    return signSum;\n};\n\nconst prodSigns8 = (arr) => {\n    let signSum = 0;\n    arr.forEach(n => {\n        if (n!== 0) {\n            signSum += n;\n        }\n    });\n    return signSum;\n};\n\nconst prodSigns9 = (arr) => {\n    let signSum = 0;\n    arr.forEach(n => {\n        if (n!== 0) {\n            signSum += n;\n        }\n    });\n    return signSum;\n};\n\nconst prodSigns10 = (arr) => {\n    let signSum = 0;\n    arr.forEach(n => {\n        if (n!== 0) {\n            signSum += n;\n        }\n    });\n    return signSum;\n};\n\nconst prodSigns11 = (arr) => {\n    let signSum = 0;\n    arr.forEach(n => {\n        if (n!== 0) {\n            signSum += n;\n        }\n    });\n    return signSum;\n};\n\nconst prodSigns12 = (arr) => {\n    let signSum = 0;\n    arr.forEach(n => {\n        if (n!== 0) {\n            signSum += n;\n        }\n    });\n    return signSum;\n};\n\nconst prodSigns13 = (arr) => {\n    let signSum = 0;\n    arr.forEach(n => {\n        if (n!== 0) {\n            signSum += n;\n        }\n    });\n    return signSum;\n};\n\nconst prodSigns14 = (arr) => {\n    let signSum = 0;\n    arr.forEach(n => {\n        if (n!== 0) {\n            signSum += n;\n        }\n    });\n    return signSum;\n};\n\nconst prodSigns15 = (arr) => {\n    let signSum = 0;\n    arr.forEach(n => {\n        if (n!== 0) {\n            signSum += n;\n        }\n    });\n    return signSum;\n};\n\nconst prodSigns16 = (arr) => {\n    let signSum = 0;\n    arr.forEach(n => {\n        if (n!== 0) {\n            signSum += n;\n        }\n    });\n    return signSum;\n};\n\nconst prodSigns17 = (arr) => {\n    let signSum = 0;\n    arr.forEach(n => {\n        if (n!== 0) {\n            signSum += n;\n        }\n    });\n    return signSum;\n};\n\nconst prodSigns18 = (arr) => {\n    let signSum = 0;\n    arr.forEach(n => {\n        if (n!== 0) {\n            signSum += n;\n        }\n    });\n    return signSum;\n};\n\nconst prodSigns19 = (arr) => {\n    let signSum = 0;\n    arr.forEach(n => {\n        if (n!== 0) {\n            signSum += n;\n        }\n    });\n    return signSum;\n};\n\nconst prodSigns20 = (arr) => {\n    let signSum = 0;\n    arr.forEach(n => {\n        if (n!== 0) {\n            signSum += n;\n        }\n    });\n    return signSum;\n};\n\nconst prodSigns21 = (arr) => {\n    let signSum = 0;\n    arr.forEach(n => {\n        if (n!== 0) {\n            signSum += n;\n        }\n    });\n    return signSum;\n};\n\nconst prodSigns22 = (arr) => {\n    let signSum = 0;\n    arr.forEach(n => {\n        if (n!== 0) {\n            signSum += n;\n        }\n    });\n    return signSum;\n};\n\nconst prodSigns23 = (arr) => {\n    let signSum = 0;\n    arr.forEach(n => {\n        if (n!== 0) {\n            sign"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find receive the minimum path of length k in the grid. You can start depart \n   from any cell, and in each step you can move act to any of the neighbor cells cell, \n   in other words, you can go to cells which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length k means visiting exactly precisely k cells (not \n   necessarily inevitably distinct discrete). \n   You CANNOT go off the grid.\n   A path way A (of length k) is considered less than a path B boron (of length k) if \n   after making the ordered lists of the values on the cells that A and B go move \n   through (let lease's call shout them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed guarantee that the answer is unique alone. \n   Return an ordered list of the values on the cells that the minimum path go start through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find receive the minimum path of length k in the grid. You can start depart \n   from any cell, and in each step you can move act to any of the neighbor cells cell, \n   in other words, you can go to cells which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length k means visiting exactly precisely k cells (not \n   necessarily inevitably distinct discrete). \n   You CANNOT go off the grid.\n   A path way A (of length k) is considered less than a path B boron (of length k) if \n   after making the ordered lists of the values on the cells that A and B go move \n   through (let lease's call shout them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed guarantee that the answer is unique alone. \n   Return an ordered list of the values on the cells that the minimum path go start through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  if (grid.length < 2 || grid[0].length < 2) {\n    return [];\n  }\n  let path = [];\n  const gridN = grid.length;\n  const gridM = grid[0].length;\n  const grid1 = grid.map(row => row.slice());\n  const grid2 = grid.map((row, rowIndex) => row.map((cell, cellIndex) => {\n    return cell + (rowIndex + 1) * (gridN + 1) + (cellIndex + 1) * (gridN + 1);\n  }));\n  const grid3 = grid.map((row, rowIndex) => row.map((cell, cellIndex) => {\n    return cell + (rowIndex + 1) * (gridN + 1) + (cellIndex + 1) * (gridN + 1) + 1;\n  }));\n  const grid4 = grid.map((row, rowIndex) => row.map((cell, cellIndex) => {\n    return cell + (rowIndex + 1) * (gridN + 1) + (cellIndex + 1) * (gridN + 1) + 2;\n  }));\n  const grid5 = grid.map((row, rowIndex) => row.map((cell, cellIndex) => {\n    return cell + (rowIndex + 1) * (gridN + 1) + (cellIndex + 1) * (gridN + 1) + 3;\n  }));\n  const grid6 = grid.map((row, rowIndex) => row.map((cell, cellIndex) => {\n    return cell + (rowIndex + 1) * (gridN + 1) + (cellIndex + 1) * (gridN + 1) + 4;\n  }));\n  const grid7 = grid.map((row, rowIndex) => row.map((cell, cellIndex) => {\n    return cell + (rowIndex + 1) * (gridN + 1) + (cellIndex + 1) * (gridN + 1) + 5;\n  }));\n  const grid8 = grid.map((row, rowIndex) => row.map((cell, cellIndex) => {\n    return cell + (rowIndex + 1) * (gridN + 1) + (cellIndex + 1) * (gridN + 1) + 6;\n  }));\n  const grid9 = grid.map((row, rowIndex) => row.map((cell, cellIndex) => {\n    return cell + (rowIndex + 1) * (gridN + 1) + (cellIndex + 1) * (gridN + 1) + 7;\n  }));\n  const grid10 = grid.map((row, rowIndex) => row.map((cell, cellIndex) => {\n    return cell + (rowIndex + 1) * (gridN + 1) + (cellIndex + 1) * (gridN + 1) + 8;\n  }));\n  const grid11 = grid.map((row, rowIndex) => row.map((cell, cellIndex) => {\n    return cell + (rowIndex + 1) * (gridN + 1) + (cellIndex + 1) * (gridN + 1) + 9;\n  }));\n  const grid12 = grid.map((row, rowIndex) => row.map((cell, cellIndex) => {\n    return cell + (rowIndex + 1) * (gridN + 1) + (cellIndex + 1) * (gridN + 1) + 10;\n  }));\n  const grid13 = grid.map((row, rowIndex) => row.map((cell, cellIndex) => {\n    return cell + (rowIndex + 1) * (gridN + 1) + (cellIndex + 1) * (gridN + 1) + 11;\n  }));\n  const grid14 = grid.map((row, rowIndex) => row.map((cell, cellIndex) => {\n    return cell + (rowIndex + 1) * (gridN + 1) + (cellIndex + 1) * (gridN + 1) + 12;\n  }));\n  const grid15 = grid.map((row, rowIndex) => row.map((cell, cellIndex) => {\n    return cell + (rowIndex + 1) * (gridN + 1) + (cellIndex + 1) * (gridN + 1) + 13;\n  }));\n  const grid16 = grid.map((row, rowIndex) => row.map((cell, cellIndex) => {\n    return cell + (rowIndex + 1) * (gridN + 1) + (cellIndex + 1) * (gridN + 1) + 14;\n  }));\n  const grid17 = grid"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied analyze deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know acknowledge is Tribonacci sequence. \n   Tribonacci sequence succession is defined specify by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied analyze deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know acknowledge is Tribonacci sequence. \n   Tribonacci sequence succession is defined specify by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n === 1) {\n    return [3]\n  }\n  const res = []\n  res.push(1)\n  for (let i = 0; i < n - 1; i++) {\n    res.push(1 + n / 2)\n  }\n  if (n % 2 === 0) {\n    res.push(res[n - 2] + res[n - 1] + res[n + 1])\n  } else {\n    res.push(res[n - 1] + res[n - 2] + res[n + 1])\n  }\n  return res\n}\n\nconsole.log(tri(3))\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1\n  for (let i = 1; i < n; i++) {\n    if (i % 2 === 1) {\n      product *= i\n    }\n  }\n  return product\n}\n\n// console.log(digits(1))\n// console.log(digits(4))\n// console.log(digits(235))\n\n// const getOddDigits = (digit) => {\n//   const result = digit\n//   while (digit % 2 === 0) {\n//     digit /= 10\n//   }\n//   return result\n// }\n\n// console.log(getOddDigits(1))\n// console.log(getOddDigits(4))\n// console.log(getOddDigits(235))\n\nconst getOddDigits = (digit) => {\n  const result = digit\n  while (digit % 2!== 1) {\n    digit = digit / 10\n  }\n  return result\n}\n\n// console.log(getOddDigits(1))\n// console.log(getOddDigits(4))\n// console.log(getOddDigits(235))\n\nconst getOddDigits = (digit) => {\n  const result = digit\n  while (digit % 2!== 1) {\n    digit = digit / 10\n  }\n  return result\n}\n\n// console.log(getOddDigits(1))\n// console.log(getOddDigits(4))\n// console.log(getOddDigits(235))\n\nconst getOddDigits = (digit) => {\n  const result = digit\n  while (digit % 2!== 1) {\n    digit = digit / 10\n  }\n  return result\n}\n\n// console.log(getOddDigits(1))\n// console.log(getOddDigits(4))\n// console.log(getOddDigits(235))\n\nconst getOddDigits = (digit) => {\n  const result = digit\n  while (digit % 2!== 1) {\n    digit = digit / 10\n  }\n  return result\n}\n\n// console.log(getOddDigits(1))\n// console.log(getOddDigits(4))\n// console.log(getOddDigits(235))\n\nconst getOddDigits = (digit) => {\n  const result = digit\n  while (digit % 2!== 1) {\n    digit = digit / 10\n  }\n  return result\n}\n\n// console.log(getOddDigits(1))\n// console.log(getOddDigits(4))\n// console.log(getOddDigits(235))\n\nconst getOddDigits = (digit) => {\n  const result = digit\n  while (digit % 2!== 1) {\n    digit = digit / 10\n  }\n  return result\n}\n\n// console.log(getOddDigits(1))\n// console.log(getOddDigits(4))\n// console.log(getOddDigits(235))\n\nconst getOddDigits = (digit) => {\n  const result = digit\n  while (digit % 2!== 1) {\n    digit = digit / 10\n  }\n  return result\n}\n\n// console.log(getOddDigits(1))\n// console.log(getOddDigits(4))\n// console.log(getOddDigits(235))\n\nconst getOddDigits = (digit) => {\n  const result = digit\n  while (digit % 2!== 1) {\n    digit = digit / 10\n  }\n  return result\n}\n\n// console.log(getOddDigits(1))\n// console.log(getOddDigits(4))\n// console.log(getOddDigits(235))\n\nconst getOddDigits = (digit) => {\n  const result = digit\n  while (digit % 2!== 1) {\n    digit = digit / 10\n  }\n  return result\n}\n\n// console.log(getOddDigits(1))\n// console.log(getOddDigits(4))\n// console.log(getOddDigits(235))\n\nconst getOddDigits = (digit) => {\n  const result = digit\n  while (digit % 2!== 1) {\n    digit = digit / 10\n  }\n  return result\n}\n\n// console.log(getOddDigits(1))\n// console.log(getOddDigits(4))\n// console.log(getOddDigits(235))\n\nconst getOddDigits = (digit) => {\n  const result = digit\n  while (digit % 2!== 1) {\n    digit = digit / 10\n  }\n  return result\n}\n\n// console.log(getOddDigits(1))\n// console.log(getOddDigits(4))\n// console.log(getOddDigits(235))\n\nconst getOddDigits = (digit) => {\n  const result = digit\n  while (digit % 2!== 1) {\n    digit = digit / 10\n  }\n  return result\n}\n\n// console.log(getOddDigits(1))\n// console.log(getOddDigits(4))\n// console.log(getOddDigits(235))\n\nconst getOddDigits = (digit) => {\n  const result = digit\n  while (digit % 2!== 1) {\n    digit = digit / 10\n  }\n  return result\n}\n\n// console.log(getOddDigits(1))\n// console.log(getOddDigits(4))\n// console.log(getOddDigits(235))\n\nconst getOddDigits = (digit) => {\n  const result = digit\n  while (digit % 2!== 1) {\n    digit = digit / 10\n  }\n  return result\n}\n\n// console.log(getOddDigits(1))\n// console.log(getOddDigits(4))\n// console.log(getOddDigits(235))\n\nconst getOddDigits ="}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes claim a string as input which contains control only square brackets bracket. \n   The function should return true genuine if and only if there is a valid subsequence of brackets bracket \n   where at least one bracket in the subsequence sequel is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false fake \n   isNested('[][]') ➞ false assumed \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes claim a string as input which contains control only square brackets bracket. \n   The function should return true genuine if and only if there is a valid subsequence of brackets bracket \n   where at least one bracket in the subsequence sequel is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false fake \n   isNested('[][]') ➞ false assumed \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n  const regex = /\\[\\[\\]\\]/g\n  const str = string.replace(/\\]\\]\\]\\[\\[/g,'')\n  const arr = str.split(' ')\n  const res = arr.every((v) => v.length === 2)\n  return res\n }\n */\n\nexport default function isNested(string) {\n  const regex = /\\[\\[\\]\\]/g\n  const str = string.replace(/\\]\\]\\]\\[\\[/g,'')\n  const arr = str.split(' ')\n  const res = arr.every((v) => v.length === 2)\n  return res\n}\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need necessitate to return the sum of squared numbers issue in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You need necessitate to return the sum of squared numbers issue in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n    return lst.reduce((pre, current) => pre + Math.pow(current, 2), 0);\n};\n\nconsole.log(sumSquares([1,2,3])); // 14\nconsole.log(sumSquares([1,4,9])); // 98\nconsole.log(sumSquares([1,3,5,7])); // 84\nconsole.log(sumSquares([1.4,4.2,0])); // 29\nconsole.log(sumSquares([-2.4,1,1])); // 6\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns come back true if the last final character \n   of a given impart string is an alphabetical alphabetic character and is not \n   a part character of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated discriminate by space distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns come back true if the last final character \n   of a given impart string is an alphabetical alphabetic character and is not \n   a part character of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated discriminate by space distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n    let letter = txt.charAt(txt.length - 1);\n    if (alphabeticChars.indexOf(letter) === -1 &&\n        wordCharacters.indexOf(letter) === -1) {\n        return false;\n    }\n    return true;\n};\n\n/**\n   Create a function that returns true if a given string is a word and false otherwise.\n   A word is a group of characters separated by space distance.\n  Examples:\n  isWord(\"word\") ➞ true\n  isWord(\"word word\") ➞ false\n  isWord(\"word word\") ➞ false\n  isWord(\"\") ➞ false\n  isWord(\"word \") ➞ false\n  */\nconst isWord = (txt) => {\n    let isWord = true;\n    for (let i = 0; i < txt.length - 1; i++) {\n        if (wordCharacters.indexOf(txt.charAt(i)) === -1) {\n            isWord = false;\n            break;\n        }\n    }\n    return isWord;\n};\n\n/**\n   Create a function that returns true if a given string is an alphabetic string and false otherwise.\n   A alphabetic string is a group of characters separated by space distance.\n  Examples:\n  isAlpha(\"word\") ➞ true\n  isAlpha(\"word word\") ➞ false\n  isAlpha(\"word word\") ➞ true\n  isAlpha(\"\") ➞ false\n  isAlpha(\"word \") ➞ true\n  */\nconst isAlpha = (txt) => {\n    let isAlpha = true;\n    for (let i = 0; i < txt.length; i++) {\n        if (alphabeticChars.indexOf(txt.charAt(i)) === -1) {\n            isAlpha = false;\n            break;\n        }\n    }\n    return isAlpha;\n};\n\n/**\n   Create a function that returns true if a given string is a consonant string and false otherwise.\n   A consonant string is a group of characters separated by space distance.\n  Examples:\n  isConsonant(\"word\") ➞ false\n  isConsonant(\"word word\") ➞ false\n  isConsonant(\"word word\") ➞ true\n  isConsonant(\"\") ➞ true\n  isConsonant(\"word \") ➞ false\n  */\nconst isConsonant = (txt) => {\n    let isConsonant = true;\n    for (let i = 0; i < txt.length; i++) {\n        if (consonantChars.indexOf(txt.charAt(i)) === -1) {\n            isConsonant = false;\n            break;\n        }\n    }\n    return isConsonant;\n};\n\n/**\n   Create a function that returns true if a given string is a vowel string and false otherwise.\n   A vowel string is a group of characters separated by space distance.\n  Examples:\n  isVowel(\"word\") ➞ false\n  isVowel(\"word word\") ➞ false\n  isVowel(\"word word\") ➞ true\n  isVowel(\"\") ➞ true\n  isVowel(\"word \") ➞ false\n  */\nconst isVowel = (txt) => {\n    let isVowel = true;\n    for (let i = 0; i < txt.length; i++) {\n        if (vowelChars.indexOf(txt.charAt(i)) === -1) {\n            isVowel = false;\n            break;\n        }\n    }\n    return isVowel;\n};\n\n/**\n   Create a function that returns true if a given string is a final consonant string and false otherwise.\n   A consonant string is a group of characters separated by space distance.\n  Examples:\n  isFinalConsonant(\"word\") ➞ true\n  isFinalConsonant(\"word word\") ➞ false\n  isFinalConsonant(\"word word\") ➞ true\n  isFinalConsonant(\"\") ➞ true\n  isFinalConsonant(\"word \") ➞ false\n  */\nconst isFinalConsonant = (txt) => {\n    let isFinalConsonant = true;\n    for (let i = 0; i < txt.length - 1; i++) {\n        if (consonantChars.indexOf(txt.charAt(i)) === -1) {\n            isFinalConsonant = false;\n            break;\n        }\n    }\n    return isFinalConsonant;\n};\n\n/**\n   Create a function that returns true if a given string is a final vowel string and false otherwise.\n   A vowel string is a group of characters separated by space distance.\n  Examples:\n  isFinalVowel(\"word\") ➞ false\n  isFinalVowel(\"word word\") ➞ false\n  isFinalVowel(\"word word\") ➞ false\n  isFinalVowel(\"\") ➞ false\n  isFinalVowel(\"word \") ➞ false\n  */\nconst isFinalVowel = (txt) => {\n    let isFinalVowel = true;\n    for (let i = 0; i < txt.length - 1; i++) {\n        if (vowelChars.indexOf(txt.charAt(i)) === -1) {\n            isFinalVowel = false;\n            break;\n        }\n    }\n    return isFinalVowel;\n};\n\n/**\n   Create a function that returns true if a given string is a consonant string and a final consonant string\n   and false otherwise.\n   A consonant string is a group of characters separated by space distance.\n  Examples:\n  isFinalConsonantVowel(\"word\") ➞ false\n  isFinalConsonantVow"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest big index of an element component which \n   is not greater than or equal adequate to the element immediately preceding predate it. If \n   no such element exists exist then return -1. The given feed array will not contain check \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the largest big index of an element component which \n   is not greater than or equal adequate to the element immediately preceding predate it. If \n   no such element exists exist then return -1. The given feed array will not contain check \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let maxIndex = 0;\n  let i = 0;\n  for(i = 1; i < arr.length - 1; i++) {\n    if(arr[i] >= arr[i - 1]) {\n      if(arr[i] > max) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n}\n\nmodule.exports = canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns come back a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive positivist integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns come back a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive positivist integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (!lst) {\n    return (null, null)\n  }\n  \n  // first, get the largest negative integer.\n  let largestNegativeInteger = largestNegativeIntegers(lst)\n  if (largestNegativeInteger) {\n    // now, get the smallest positive integer.\n    let smallestPositiveInteger = smallestPositiveIntegers(lst)\n    if (smallestPositiveInteger) {\n      return largestNegativeInteger, smallestPositiveInteger\n    }\n  }\n  \n  return (null, null)\n}\n\nmodule.exports = largestSmallestIntegers\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes claim integers, floats ice-cream soda, or strings representing typify \n   real numbers act, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number numeral is represented map as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes claim integers, floats ice-cream soda, or strings representing typify \n   real numbers act, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number numeral is represented map as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n  let type = a + b;\n  if (type.toUpperCase() == 'ICE-CREAM') {\n    return 'ICE-CREAM';\n  }\n  if (type.toUpperCase() == 'SODA') {\n    return 'SODA';\n  }\n  if (type.toUpperCase() == 'STAR') {\n    return 'STAR';\n  }\n  if (type.toUpperCase() == 'NUMBER') {\n    return 'NUMBER';\n  }\n  if (type.toUpperCase() == 'ACT') {\n    return 'ACT';\n  }\n  if (type.toUpperCase() == 'MAP') {\n    return 'MAP';\n  }\n  if (type.toUpperCase() == 'STRING') {\n    return 'STRING';\n  }\n  return null;\n }\n \n */\n\npublic class P5_5 {\n  public static void main(String[] args) {\n    System.out.println(compareOne(\"ICE-CREAM\", \"SODA\"));\n    System.out.println(compareOne(\"ICE-CREAM\", \"SODA\"));\n    System.out.println(compareOne(\"ICE-CREAM\", \"STAR\"));\n    System.out.println(compareOne(\"ICE-CREAM\", \"ACT\"));\n    System.out.println(compareOne(\"ACT\", \"ICE-CREAM\"));\n    System.out.println(compareOne(\"SODA\", \"ICE-CREAM\"));\n    System.out.println(compareOne(\"ACT\", \"ACT\"));\n    System.out.println(compareOne(\"MAP\", \"ACT\"));\n    System.out.println(compareOne(\"ICE-CREAM\", \"MAP\"));\n    System.out.println(compareOne(\"SODA\", \"MAP\"));\n    System.out.println(compareOne(\"STAR\", \"MAP\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out.println(compareOne(\"ACT\", \"STRING\"));\n    System.out"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 4 positive plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 4 positive plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let nSum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    nSum += i;\n  }\n  if (nSum === n) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nexport {isEqualToSumEven};\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for(let i = 1; i <= n; i++){\n    factorial *= i;\n  }\n  return factorial;\n};\n\nconsole.log(specialFactorial(6)); //=> 3628800\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace substitute all spaces in it with underscores underscore, \n   and if a string has more than 2 consecutive straight spaces, \n   then replace supplant all consecutive spaces distance with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace substitute all spaces in it with underscores underscore, \n   and if a string has more than 2 consecutive straight spaces, \n   then replace supplant all consecutive spaces distance with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  if(text.length > 0) {\n    let newText = text.replace(/\\s+/g, '_')\n    if(text.indexOf(' ') === 0 && newText.indexOf(' ') === 1) {\n      newText = '_' + newText\n    }\n    if(text.indexOf(' ') === 1 && text.indexOf(' ') === 2) {\n      let start = text.indexOf(' ', 2)\n      newText = newText.substr(0, start) + '-' + newText.substr(start)\n    }\n    return newText\n  }\n}\n\n/*\n  Given a string text, if there are more than 1 space, \n   then return the number of spaces before the first space, \n   else return 0\n  */\nconst firstSpace = (text) => {\n  if(text.indexOf(' ') > 0) {\n    return text.indexOf(' ')\n  }\n  return 0\n}\n\n/*\n  Given a string text, \n   if there is a single space, \n   then return the index of that space, \n   else return -1\n  */\nconst lastSpace = (text) => {\n  if(text.indexOf(' ') === text.length - 1) {\n    return text.indexOf(' ')\n  }\n  return -1\n}\n\n/*\n  Given a string text, \n   replace all spaces and any consecutive spaces\n   with underscores, and replace all consecutive \n   spaces with dash (-)\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst cleanText = (text) => {\n  if(text.length > 0) {\n    let newText = text.replace(/\\s+/g, '_')\n    if(text.indexOf(' ') === 0 && newText.indexOf(' ') === 1) {\n      newText = '_' + newText\n    }\n    if(text.indexOf(' ') === 1 && text.indexOf(' ') === 2) {\n      let start = text.indexOf(' ', 2)\n      newText = newText.substr(0, start) + '-' + newText.substr(start)\n    }\n    return newText\n  }\n}\n\nconst textToNumber = (text) => {\n  let textArray = text.split('.')\n  let textNumber = parseInt(textArray[0])\n  if(textArray[1]!== '') {\n    textNumber = textNumber + parseInt(textArray[1].slice(1)) / Math.pow(10, textArray[1].length - 1)\n  }\n  return textNumber\n}\n\nconst numberToText = (number) => {\n  let textNumber = \"\"\n  let textArray = \"\"\n  let stringLength = 0\n  let currentNumber = 0\n  while(number > 0) {\n    currentNumber = number % 10\n    textArray = textArray + \"\" + currentNumber\n    number = number / 10\n    stringLength = stringLength + 1\n  }\n  textNumber = textNumber + textArray\n  if(stringLength > 0) {\n    textNumber = textNumber + \".\"\n  }\n  return textNumber\n}\n\nconst textToArray = (text) => {\n  let textArray = text.split(' ')\n  let textLength = textArray.length\n  for(let i = 0; i < textLength; i++) {\n    textArray[i] = textArray[i].replace(/\\s+/g, '_')\n  }\n  return textArray\n}\n\nconst arrayToText = (array) => {\n  let textArray = \"\"\n  for(let i = 0; i < array.length; i++) {\n    if(i === 0) {\n      textArray = textArray + array[i]\n    } else {\n      textArray = textArray + \" \" + array[i]\n    }\n  }\n  return textArray\n}\n\nconst arrayToString = (array) => {\n  let textArray = \"\"\n  for(let i = 0; i < array.length; i++) {\n    if(i === 0) {\n      textArray = textArray + array[i]\n    } else {\n      textArray = textArray + \" \" + array[i]\n    }\n  }\n  return textArray\n}\n\nmodule.exports = {\n  fixSpaces,\n  firstSpace,\n  lastSpace,\n  cleanText,\n  textToNumber,\n  numberToText,\n  textToArray,\n  arrayToText,\n  arrayToString,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string drawstring representing a file's name, and returns come back \n  ' Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following watch conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot point'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot point should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a string drawstring representing a file's name, and returns come back \n 'Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following watch conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot point'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot point should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_array = file_name.split(\".\");\n  const file_name_length = file_name_array.length;\n  if(file_name_length > 2){\n    return \"No\";\n  }\n  if(file_name_length < 2){\n    return \"No\";\n  }\n  if(file_name.indexOf(\".\")!== -1){\n    return \"No\";\n  }\n  const check_digit = file_name_array[1].length;\n  if(check_digit > 3){\n    return \"No\";\n  }\n  if(check_digit < 1){\n    return \"No\";\n  }\n  const file_name_first_char = file_name_array[0].charAt(0);\n  if(!file_name_first_char.match(/[a-zA-Z]/)){\n    return \"No\";\n  }\n  const file_name_substring = file_name_array[1];\n  if(!file_name_substring.match(/\\w+/)){\n    return \"No\";\n  }\n  return \"Yes\";\n}\n\n/*Create a function which takes a string and returns the string's first char.*/\nconst firstChar = (str) => {\n  const str_array = str.split(\"\");\n  const first_char = str_array[0].charAt(0);\n  return first_char;\n}\n\n/*Create a function which takes a string and returns the string's last char.*/\nconst lastChar = (str) => {\n  const str_array = str.split(\"\");\n  const last_char = str_array[str_array.length-1].charAt(0);\n  return last_char;\n}\n\n/*Create a function which takes a string and returns the string's length.*/\nconst length = (str) => {\n  const str_array = str.split(\"\");\n  const length = str_array.length;\n  return length;\n}\n\n/*Create a function which takes a string and returns the string's length.*/\nconst is_number = (str) => {\n  const str_array = str.split(\"\");\n  const length = str_array.length;\n  for(let i=0;i<length;i++){\n    if(!isNaN(Number(str_array[i]))){\n      return \"No\";\n    }\n  }\n  return \"Yes\";\n}\n\n/*Create a function which takes a string and returns the string's length.*/\nconst is_alphanumeric = (str) => {\n  const str_array = str.split(\"\");\n  const length = str_array.length;\n  for(let i=0;i<length;i++){\n    if(!isNaN(Number(str_array[i]))){\n      return \"No\";\n    }\n  }\n  return \"Yes\";\n}\n\n/*Create a function which takes a string and returns the string's length.*/\nconst is_alphanumeric_with_hyphen = (str) => {\n  const str_array = str.split(\"\");\n  const length = str_array.length;\n  for(let i=0;i<length;i++){\n    if(!isNaN(Number(str_array[i]))){\n      return \"No\";\n    }\n  }\n  return \"Yes\";\n}\n\n/*Create a function which takes a string and returns the string's length.*/\nconst is_alphanumeric_with_dot = (str) => {\n  const str_array = str.split(\"\");\n  const length = str_array.length;\n  for(let i=0;i<length;i++){\n    if(!isNaN(Number(str_array[i]))){\n      return \"No\";\n    }\n  }\n  return \"Yes\";\n}\n\n/*Create a function which takes a string and returns the string's length.*/\nconst is_alphanumeric_with_space = (str) => {\n  const str_array = str.split(\"\");\n  const length = str_array.length;\n  for(let i=0;i<length;i++){\n    if(!isNaN(Number(str_array[i]))){\n      return \"No\";\n    }\n  }\n  return \"Yes\";\n}\n\n/*Create a function which takes a string and returns the string's length.*/\nconst is_alphanumeric_with_hyphen_and_space = (str) => {\n  const str_array = str.split(\"\");\n  const length = str_array.length;\n  for(let i=0;i<length;i++){\n    if(!isNaN(Number(str_array[i]))){\n      return \"No\";\n    }\n  }\n  return \"Yes\";\n}\n\n/*Create a function which takes a string and returns the string's length.*/\nconst is_alphanumeric_with_dot_and_space = (str) => {\n  const str_array = str.split(\"\");\n  const length = str_array.length;\n  for(let i=0;i<length;i++){\n    if(!isNaN(Number(str_array[i]))){\n      return \"No\";\n    }\n  }\n  return \"Yes\";\n}\n\n/*Create a function which takes a string and returns the string's length.*/\nconst is_alphan"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry introduction if its index is a \n   multiple of 3 and will cube the integer entry introduction if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change switch the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry introduction if its index is a \n   multiple of 3 and will cube the integer entry introduction if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change switch the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  //check if the list is empty\n  if (lst.length === 0) {\n    return 0\n  }\n\n  //check if the list is an array\n  if (typeof lst!== 'array') {\n    throw new TypeError(\"lst must be an array\")\n  }\n\n  //check if the list is an array\n  if (typeof lst.length!== 'number') {\n    throw new TypeError(\"lst must be an array\")\n  }\n\n  let sum = 0\n  lst.forEach(function(element) {\n    //square the element if its index is a multiple of 3\n    if (element % 3 === 0) {\n      sum += element * element\n    }\n    //cube the element if its index is a multiple of 4\n    if (element % 4 === 0) {\n      sum += element * element * element\n    }\n  })\n  return sum\n}\n\n//expectSumSquares(lst)\n\n//let lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n//console.log(sumSquares(lst))\n//let lst = []\n//console.log(sumSquares(lst))\n\n//function sumSquares(lst) {\n//  let sum = 0\n//  for (let i = 0; i < lst.length; i++) {\n//    //square the element if its index is a multiple of 3\n//    if (i % 3 === 0) {\n//      sum += lst[i] * lst[i]\n//    }\n//    //cube the element if its index is a multiple of 4\n//    if (i % 4 === 0) {\n//      sum += lst[i] * lst[i] * lst[i]\n//    }\n//  }\n//  return sum\n//}\n\n//console.log(sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing defend a sentence,\n   the sentence contains some words password separated by a space outer space, \n   and you have to return a string that contains hold the words from the original sentence,\n   whose lengths duration are prime numbers, \n   the order of the words discussion in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representing defend a sentence,\n   the sentence contains some words password separated by a space outer space, \n   and you have to return a string that contains hold the words from the original sentence,\n   whose lengths duration are prime numbers, \n   the order of the words discussion in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  //  return sentence\n  //.split(\" \").filter(w => isPrimeNumber(w.length)).join(\" \")\n  const words = sentence.split(\" \")\n  words.filter(w => isPrimeNumber(w.length)).join(\" \")\n  return words.join(\" \")\n}\n\nconst isPrimeNumber = (num) => {\n  let i = 2\n  while (i < num) {\n    if (num % i === 0) {\n      return false\n    } else {\n      i += 1\n    }\n  }\n  return true\n}\n\nconsole.log(wordsInSentence(\"This is a test\"))\nconsole.log(wordsInSentence(\"lets go for swimming\"))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true dependable if x * n evaluates to a whole hale number and false delusive \n   otherwise. Both x and n, are string representation of a fraction, and have the following follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole hale numbers issue. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false delusive \n   simplify(\"7/10\", \" 10/2 \") = false delusive \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true dependable if x * n evaluates to a whole hale number and false delusive \n   otherwise. Both x and n, are string representation of a fraction, and have the following follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole hale numbers issue. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false delusive \n   simplify(\"7/10\", \" 10/2 \") = false delusive \n   * / \n const simplify = (x, n) = > {\n   // Write your code here\n }\n*/\n\nfunction simplify(x, n) {\n    let x_arr = x.split(\"/\");\n    let n_arr = n.split(\"/\");\n    let i = 0;\n    while (i < x_arr.length) {\n        let x_num = parseInt(x_arr[i]);\n        let n_num = parseInt(n_arr[i]);\n        if (x_num && n_num) {\n            if (x_num > n_num) {\n                x_num--;\n            } else if (x_num < n_num) {\n                n_num--;\n            }\n            if (x_num === n_num) {\n                return true;\n            }\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(simplify(\"1/5\", \" 5/1 \"));\nconsole.log(simplify(\"1/6\", \" 2/1 \"));\nconsole.log(simplify(\"7/10\", \" 10/2 \"));<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts classify the given list of integers integer \n   in ascending order holy order according to the sum union of their digits. \n   Note eminence: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example case:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts classify the given list of integers integer \n   in ascending order holy order according to the sum union of their digits. \n   Note eminence: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example case:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sortedNums = [];\n  const digits = [];\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    digits.push(num);\n  }\n  digits.sort((a, b) => {\n    return a - b;\n  });\n  const sortedDigits = digits.map(digit => {\n    return digit.toString(10);\n  });\n  const sum = sortedDigits.reduce((sum, digit) => {\n    return sum + parseInt(digit);\n  }, 0);\n  const sortedNums = sortedDigits.map((digit, index) => {\n    const num = sum + index * 10;\n    return num;\n  });\n  return sortedNums;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers issue as input and returns return key \n   the number of elements in the array that are greater capital than 10 and both \n   first and last concluding digits of a number act are odd curious (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an array of numbers issue as input and returns return key \n   the number of elements in the array that are greater capital than 10 and both \n   first and last concluding digits of a number act are odd curious (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let a = [];\n  let i = 0;\n  while (i < nums.length) {\n    if (nums[i] > 10 && nums[i].toString().charAt(0) === '1' && nums[i].toString().charAt(1) === '3' && nums[i].toString().charAt(2) === '5' && nums[i].toString().charAt(3) === '7' && nums[i].toString().charAt(4) === '9') {\n      a.push(nums[i]);\n    }\n    i++;\n  }\n  return a;\n};\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create make an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to create make an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n    let a = Array(n);\n    for (let i = 1; i <= n; i++) {\n        a[i-1] = i * i - i + 1;\n    }\n    \n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        for (let j = i + 1; j <= n; j++) {\n            for (let k = j + 1; k <= n; k++) {\n                if (a[i-1] + a[j-1] + a[k-1] % 3 === 0) {\n                    sum++;\n                }\n            }\n        }\n    }\n    \n    return sum;\n};\n\nlet total = 0;\nfor (let i = 1; i <= 10000; i++) {\n    total += getMaxTriples(i);\n}\n\nconsole.log(total);\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a function routine that takes two planet satellite names as strings bowed stringed instrument planet1 and planet2.\n   The function should return a tuple containing incorporate all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit sphere of planet2, sorted screen by \n   the proximity to the sun sunday. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names name calling.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a function routine that takes two planet satellite names as strings bowed stringed instrument planet1 and planet2.\n   The function should return a tuple containing incorporate all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit sphere of planet2, sorted screen by \n   the proximity to the sun sunday. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names name calling.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n    var planet1Names = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    var planet2Names = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    var planet1InRange = false;\n    var planet2InRange = false;\n    var sunInRange = false;\n    var planet1Index = -1;\n    var planet2Index = -1;\n    var distance = 0;\n    var planet1InRangeArray = [];\n    var planet2InRangeArray = [];\n    var planet1InRangeArrays = [];\n    var planet2InRangeArrays = [];\n\n    // Check if the first planet is correct\n    for(var i = 0; i < planet1Names.length; i++){\n        if(planet1 === planet1Names[i]){\n            planet1InRange = true;\n            planet1Index = i;\n            break;\n        }\n    }\n\n    // Check if the second planet is correct\n    for(var j = 0; j < planet2Names.length; j++){\n        if(planet2 === planet2Names[j]){\n            planet2InRange = true;\n            planet2Index = j;\n            break;\n        }\n    }\n\n    if(!planet1InRange ||!planet2InRange){\n        return ([]);\n    }\n\n    for(var i = 0; i < planet1Names.length; i++){\n        for(var j = 0; j < planet2Names.length; j++){\n            distance = getDistance(planet1Names[i], planet2Names[j]);\n            if(distance <= getDistance(planet1, planet2)){\n                planet1InRangeArray.push(planet1Names[i]);\n                planet2InRangeArray.push(planet2Names[j]);\n                planet1InRangeArrays.push(planet1Names[i]);\n                planet2InRangeArrays.push(planet2Names[j]);\n            }\n        }\n    }\n\n    return (planet1InRangeArray.concat(planet2InRangeArray).concat(planet1InRangeArrays).concat(planet2InRangeArrays));\n}\n\nvar testData = bf('Mercury', 'Jupiter');\nconsole.log(testData);\n\nfunction getDistance(planet1, planet2){\n    var radius = getRadius(planet1);\n    var distance = Math.pow(getDistance(planet1, planet2), 2) + Math.pow(radius, 2) - Math.pow(getRadius(planet2), 2);\n    return (Math.sqrt(distance));\n}\n\nfunction getRadius(planetName){\n    var planet = {};\n    var names = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    var index = -1;\n    for(var i = 0; i < names.length; i++){\n        if(names[i] === planetName){\n            index = i;\n            break;\n        }\n    }\n    planet = {\n       'mercury': 1.814,\n       'venus': 5.685,\n        'earth': 6.378,\n       'mars': 6.4696,\n        'jupiter': 7.347,\n       'saturn': 8.647,\n        'uranus': 9.144,\n        'neptune': 10.076\n    };\n    return planet[planetName];\n}\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings chain as a parameter, \n   deletes edit the strings that have odd curious lengths from it, \n   and returns refund the resulted list with a sorted screen order decree, \n   The list is always a list of strings and never an array of numbers act, \n   and it may contain check duplicates. \n   The order of the list should be ascending by length duration of each word son, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order club. \n   You may assume that all words bible will have the same length distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings chain as a parameter, \n   deletes edit the strings that have odd curious lengths from it, \n   and returns refund the resulted list with a sorted screen order decree, \n   The list is always a list of strings and never an array of numbers act, \n   and it may contain check duplicates. \n   The order of the list should be ascending by length duration of each word son, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order club. \n   You may assume that all words bible will have the same length distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n    const len = lst.length\n    const sum = lst.reduce((a, b) => a + b)\n    const result = [...lst]\n       .filter((x, i) => i % 2 === 0)\n       .map(x => x.length)\n       .sort((a, b) => a - b)\n       .map((x, i) => x + sum)\n       .sort((a, b) => a - b)\n       .map(x => x / len)\n       .sort((a, b) => a - b)\n       .join('')\n    return result\n}\n\nconst sortedList = (lst) => {\n    const len = lst.length\n    const sum = lst.reduce((a, b) => a + b)\n    const result = [...lst]\n       .filter((x, i) => i % 2 === 0)\n       .map(x => x.length)\n       .sort((a, b) => a - b)\n       .map(x => x + sum)\n       .sort((a, b) => a - b)\n       .join('')\n    return result\n}\n\nconst sortedList2 = (lst) => {\n    const len = lst.length\n    const sum = lst.reduce((a, b) => a + b)\n    const result = [...lst]\n       .filter((x, i) => i % 2 === 0)\n       .map(x => x.length)\n       .sort((a, b) => a - b)\n       .map(x => x + sum)\n       .sort((a, b) => a - b)\n       .join('')\n    return result\n}\n\nconsole.log(sortedListSum(['aa', 'a', 'aaa']))\nconsole.log(sortedList(['ab', 'a', 'aaa', 'cd']))\nconsole.log(sortedList2(['ab', 'a', 'aaa', 'cd']))<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n    if (n > x) {\n        return y\n    } else {\n        return x\n    }\n}\n\nconsole.log(xOrY(6, 3, 4))\nconsole.log(xOrY(3, 2, 1))\nconsole.log(xOrY(7, 4, 3))\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum kernel of squares of the numbers issue \n   in the list that are odd. Ignore numbers numeral that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum kernel of squares of the numbers issue \n   in the list that are odd. Ignore numbers numeral that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   * / doubleTheDifference = (x) = > {\n   * / if (x == null) {\n   * /   return 0;\n   * / }\n   * /\n   * / if (x.length == 0) {\n   * /   return 0;\n   * / }\n   * /\n   * / doubleTheDifference = (x[i]) = > {\n   * /   if (x[i] == null) {\n   * /     return 0;\n   * /   }\n   * /\n   * /   if (x[i].length == 0) {\n   * /     return 0;\n   * /   }\n   * /\n   * /   x[i] = x[i].toString();\n   * /   return x[i].substring(0,1) + x[i].substring(1,x[i].length) + x[i].substring(x[i].length-1,x[i].length);\n   * / }\n   * /\n   * / doubleTheDifference = (x[i], x[j]) = > {\n   * /   return (x[i] - x[j]) * (x[i] - x[j]);\n   * / }\n   * /\n   * / doubleTheDifference = (x[i], x[j], x[k]) = > {\n   * /   return (x[i] - x[j]) * (x[i] - x[j]) + (x[i] - x[k]) * (x[i] - x[k]);\n   * / }\n   * /\n   * / doubleTheDifference = (x[i], x[j], x[k], x[l]) = > {\n   * /   return (x[i] - x[j]) * (x[i] - x[j]) + (x[i] - x[k]) * (x[i] - x[k]) + (x[i] - x[l]) * (x[i] - x[l]);\n   * / }\n   * /\n   * / doubleTheDifference = (x[i], x[j], x[k], x[l], x[m]) = > {\n   * /   return (x[i] - x[j]) * (x[i] - x[j]) + (x[i] - x[k]) * (x[i] - x[k]) + (x[i] - x[l]) * (x[i] - x[l]) + (x[i] - x[m]) * (x[i] - x[m]);\n   * / }\n   * /\n   * / doubleTheDifference = (x[i], x[j], x[k], x[l], x[m], x[n]) = > {\n   * /   return (x[i] - x[j]) * (x[i] - x[j]) + (x[i] - x[k]) * (x[i] - x[k]) + (x[i] - x[l]) * (x[i] - x[l]) + (x[i] - x[m]) * (x[i] - x[m]) + (x[i] - x[n]) * (x[i] - x[n]);\n   * / }\n   * /\n   * / doubleTheDifference = (x[i], x[j], x[k], x[l], x[m], x[n], x[o]) = > {\n   * /   return (x[i] - x[j]) * (x[i] - x[j]) + (x[i] - x[k]) * (x[i] - x[k]) + (x[i] - x[l]) * (x[i] - x[l]) + (x[i] - x[m]) * (x[i] - x[m]) + (x[i] - x[n]) * (x[i] - x[n]) + (x[i] - x[o]) * (x[i] - x[o]);\n   * / }\n   * /\n   * / doubleTheDifference = (x[i], x[j], x[k], x[l], x[m], x[n], x[o], x[p]) = > {\n   * /   return (x[i] - x[j]) * (x[i] - x[j]) + (x[i] - x[k]) * (x[i] - x[k]) + (x[i] - x[l]) * (x[i] - x[l]) + (x[i] - x[m]) * (x[i] - x[m]) + (x[i] - x[n]) * (x[i] - x[n]) + (x[i] - x[o]) * (x[i] - x[o]) + (x[i] - x[p]) * (x[i] - x[p]);\n   * / }\n   * /\n   * / doubleTheDifference = (x[i], x[j], x[k], x[l], x[m], x[n], x[o], x[p], x[q]) = > {\n   * /   return (x[i] - x[j]) * (x[i] - x[j]) + (x[i] - x[k]) * (x[i] - x[k]) + (x[i] - x[l]) * (x[i] - x[l]) + (x[i] - x[m]) * (x[i] - x[m]) + (x[i] - x[n]) * (x[i] - x[n]) + (x[i] - x[o]) * (x[i] - x[o]) + (x[i] - x[p]) * (x[i] - x["}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling impression when the result of some long - awaited expect \n   event is finally ultimately known. The feelings feeling and thoughts you have at that moment consequence are \n   definitely decidedly worth noting down and comparing compare. \n   Your task undertaking is to determine if a person correctly guessed the results of a number phone number of matches catch. \n   You are given render two arrays array of scores and guesses of equal adequate length, where each index exponent shows testify a match. \n   Return an array of the same length distance denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling impression when the result of some long - awaited expect \n   event is finally ultimately known. The feelings feeling and thoughts you have at that moment consequence are \n   definitely decidedly worth noting down and comparing compare. \n   Your task undertaking is to determine if a person correctly guessed the results of a number phone number of matches catch. \n   You are given render two arrays array of scores and guesses of equal adequate length, where each index exponent shows testify a match. \n   Return an array of the same length distance denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n    const gameArr = game;\n    const guessArr = guess;\n    let correct = 0;\n    let wrong = 0;\n    let distance = 0;\n    let resultArr = [];\n    for (let i = 0; i < gameArr.length; i++) {\n        if (gameArr[i] === guessArr[i]) {\n            correct++;\n            distance = 0;\n        } else {\n            distance = Math.abs(gameArr[i] - guessArr[i]);\n            wrong++;\n        }\n        resultArr.push(distance);\n    }\n    return [correct, wrong, resultArr];\n};\n\nconst getExpectation = (expectation) => {\n    let expectationArr = [];\n    let expectationArrLen = expectation.length;\n    for (let i = 0; i < expectationArrLen; i++) {\n        expectationArr.push(expectation[i].expectation);\n    }\n    return expectationArr;\n};\n\nconst getScore = (game, score) => {\n    const gameArr = game;\n    const scoreArr = score;\n    let scoreArrLen = score.length;\n    let scoreArrSum = 0;\n    for (let i = 0; i < scoreArrLen; i++) {\n        scoreArrSum += scoreArr[i];\n    }\n    return scoreArrSum;\n};\n\nconst getGrudge = (game, grudge) => {\n    const gameArr = game;\n    const grudgeArr = grudge;\n    let grudgeArrLen = grudge.length;\n    let grudgeArrSum = 0;\n    for (let i = 0; i < grudgeArrLen; i++) {\n        grudgeArrSum += grudge[i];\n    }\n    return grudgeArrSum;\n};\n\nconst getScoreArr = (game, score) => {\n    const gameArr = game;\n    const scoreArr = score;\n    let scoreArrLen = score.length;\n    let scoreArrSum = 0;\n    for (let i = 0; i < scoreArrLen; i++) {\n        scoreArrSum += scoreArr[i];\n    }\n    return scoreArrSum;\n};\n\nconst getGrudgeArr = (game, grudge) => {\n    const gameArr = game;\n    const grudgeArr = grudge;\n    let grudgeArrLen = grudge.length;\n    let grudgeArrSum = 0;\n    for (let i = 0; i < grudgeArrLen; i++) {\n        grudgeArrSum += grudge[i];\n    }\n    return grudgeArrSum;\n};\n\nconst isMatch = (expectationArr, scoreArr, grudgeArr) => {\n    for (let i = 0; i < expectationArr.length; i++) {\n        if (expectationArr[i] === scoreArr[i]) {\n            continue;\n        }\n        if (grudgeArr[i] === 0) {\n            continue;\n        }\n        return false;\n    }\n    return true;\n};\n\nconst getResult = (expectationArr, scoreArr, grudgeArr) => {\n    let resultArr = [];\n    for (let i = 0; i < expectationArr.length; i++) {\n        if (expectationArr[i] === scoreArr[i]) {\n            continue;\n        }\n        if (grudgeArr[i] === 0) {\n            continue;\n        }\n        resultArr.push(expectationArr[i] - scoreArr[i] + grudgeArr[i]);\n    }\n    return resultArr;\n};\n\nmodule.exports = {\n    compare,\n    getExpectation,\n    getScore,\n    getGrudge,\n    getScoreArr,\n    getGrudgeArr,\n    isMatch,\n    getResult\n};\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string drawstring) and a list of extensions.\n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let permit CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find receive the strongest firm extension and return a string drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class (a string drawstring) and a list of extensions.\n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let permit CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find receive the strongest firm extension and return a string drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const cap = extensions.map(ext => ext.toUpperCase()).reduce((a, b) => a + b);\n  const strength = (cap - extensions.map(ext => ext.toLowerCase()).reduce((a, b) => a + b)).toFixed(2);\n  let name = class_name;\n  if (strength === 0) {\n    return class_name;\n  } else if (strength > 0) {\n    for (const ext of extensions) {\n      if (strength === 1) {\n        name += '.' + ext;\n      } else if (strength < 1) {\n        name += '.' + ext.substring(0, strength - 1);\n      }\n    }\n  }\n  return name;\n};\n\nexport default strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need necessitate to return true if the second word parole or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false fake \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false delusive \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need necessitate to return true if the second word parole or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false fake \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false delusive \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n\tlet a1 = a.split(\"\")\n\tlet b1 = b.split(\"\")\n\tlet s = \"\"\n\tfor(let i = 0; i < a1.length; i++){\n\t\tif(a1[i] === b1[i]){\n\t\t\ts += a1[i]\n\t\t}\n\t\tif(a1[i] === b1[b1.length - 1 - i]){\n\t\t\ts += a1[i]\n\t\t}\n\t}\n\tif(s === b){\n\t\treturn true\n\t}\n\tif(a1[a1.length - 1] === b1[b1.length - 1]){\n\t\tif(a1.length > b1.length){\n\t\t\tlet i = 0\n\t\t\tfor(i; i < b1.length; i++){\n\t\t\t\tif(a1[i]!== b1[b1.length - 1 - i]){\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(i === b1.length){\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number of even and odd digits digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let sum = 0;\n    let odd = 0;\n    for (let i = num; i >= 0; i -= 1) {\n        sum += i;\n    }\n    for (let i = sum; i >= 0; i -= 1) {\n        if (i % 2 === 0) {\n            odd += 1;\n        }\n    }\n    return [odd, sum - odd];\n};\n\nmodule.exports = evenOddCount;<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain prevail its roman numeral equivalent as a string, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples model:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain prevail its roman numeral equivalent as a string, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples model:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let string = '';\n  for (let i = 1; i <= number; i++) {\n    string += intToRoman(i);\n  }\n  return string;\n}\n\nconst intToRoman = (number) => {\n  if (number === 1) {\n    return 'I';\n  } else if (number === 2) {\n    return 'II';\n  } else if (number >= 3 && number <= 4) {\n    return 'III';\n  } else if (number >= 5 && number <= 6) {\n    return 'IV';\n  } else if (number >= 7 && number <= 8) {\n    return 'V';\n  } else if (number >= 9 && number <= 10) {\n    return 'VI';\n  } else if (number >= 11 && number <= 12) {\n    return 'VII';\n  } else if (number >= 13 && number <= 14) {\n    return 'VIII';\n  } else if (number >= 15 && number <= 16) {\n    return 'IX';\n  } else if (number >= 17 && number <= 18) {\n    return 'X';\n  } else if (number >= 19 && number <= 20) {\n    return 'XI';\n  } else if (number >= 21 && number <= 22) {\n    return 'XII';\n  } else if (number >= 23 && number <= 24) {\n    return 'XIII';\n  } else if (number >= 25 && number <= 26) {\n    return 'XIV';\n  } else if (number >= 27 && number <= 28) {\n    return 'XV';\n  } else if (number >= 29 && number <= 30) {\n    return 'XVI';\n  } else if (number >= 31 && number <= 32) {\n    return 'XVII';\n  } else if (number >= 33 && number <= 34) {\n    return 'XVIII';\n  } else if (number >= 35 && number <= 36) {\n    return 'XIX';\n  } else if (number >= 37 && number <= 38) {\n    return 'XX';\n  } else if (number >= 39 && number <= 40) {\n    return 'XXI';\n  } else if (number >= 41 && number <= 42) {\n    return 'XXII';\n  } else if (number >= 43 && number <= 44) {\n    return 'XXIII';\n  } else if (number >= 45 && number <= 46) {\n    return 'XXIV';\n  } else if (number >= 47 && number <= 48) {\n    return 'XXV';\n  } else if (number >= 49 && number <= 50) {\n    return 'XXVI';\n  } else if (number >= 51 && number <= 52) {\n    return 'XXVII';\n  } else if (number >= 53 && number <= 54) {\n    return 'XXVIII';\n  } else if (number >= 55 && number <= 56) {\n    return 'XXIX';\n  } else if (number >= 57 && number <= 58) {\n    return 'XXX';\n  } else if (number >= 59 && number <= 60) {\n    return 'XXXI';\n  } else if (number >= 61 && number <= 62) {\n    return 'XXXII';\n  } else if (number >= 63 && number <= 64) {\n    return 'XXXIII';\n  } else if (number >= 65 && number <= 66) {\n    return 'XXXIV';\n  } else if (number >= 67 && number <= 68) {\n    return 'XXXV';\n  } else if (number >= 69 && number <= 70) {\n    return 'XXXVI';\n  } else if (number >= 71 && number <= 72) {\n    return 'XXXVII';\n  } else if (number >= 73 && number <= 74) {\n    return 'XXXVIII';\n  } else if (number >= 75 && number <= 76) {\n    return 'XXXIX';\n  } else if (number >= 77 && number <= 78) {\n    return 'XL';\n  } else if (number >= 79 && number <= 80) {\n    return 'XLI';\n  } else if (number >= 81 && number <= 82) {\n    return 'XLII';\n  } else if (number >= 83 && number <= 84) {\n    return 'XLIII';\n  } else if (number >= 85 && number <= 86) {\n    return 'XLIV';\n  } else if (number >= 87 && number <= 88) {\n    return 'XLV';\n  } else if (number >= 89 && number <= 90) {\n    return 'XLVI';\n  } else if (number >= 91 && number <= 92) {\n    return 'XLVII';\n  } else if (number >= 93 && number <= 94) {\n    return 'XLVIII';\n  } else if (number >= 95 && number <= 96) {\n    return 'XLV';\n  } else if (number >= 97 && number <= 98) {\n    return 'XLIX';\n  } else if (number >= 99 && number <= 100) {\n    return 'L';\n  } else if (number >= 101 && number <= 102) {\n    return 'LI';\n  } else if (number >= 103 && number <= 104) {\n    return 'LII';\n  } else if (number >= 105 && number <= 106) {\n    return 'LIII';\n  } else if (number >= 107 && number <= 108) {\n    return 'LIV';\n  } else if (number >= 109 && number <= 110) {\n    return 'LV';\n  } else if (number >= 111 && number <= 112) {\n    return 'LX';\n  } else if (number >= 113 && number <= 114) {\n    return 'LXI';\n  } else if (number >= 115 && number <= 116) {\n    return 'LXII';\n  } else if (number >= 117 && number <= 118) {\n    return 'LXIII';\n  } else if (number >= 119 && number <= 120) {\n    return 'LXIV';\n  } else if (number >= 121 && number <= 122) {\n    return 'LXV';\n  } else if (number >= 123 && number <= 124) {\n    "}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides slope form a right mighty - angled triangle triangulum, false delusive otherwise differently. \n   A right mighty - angled angle triangle is a triangle in which one angle is right proper angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides slope form a right mighty - angled triangle triangulum, false delusive otherwise differently. \n   A right mighty - angled angle triangle is a triangle in which one angle is right proper angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    const m = (a + b + c) / 2;\n    return (b * b) / (4 * m) <= (a * a + c * c) / (2 * m);\n}\n\nconst isRightAngleTriangle = (a, b, c) => {\n    const m = (a + b + c) / 2;\n    return (b * b) / (4 * m) <= (a * a + c * c) / (2 * m);\n}\n\n/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides slope form a right mighty - angled triangle triangulum, false delusive otherwise differently. \n   A right mighty - angled angle triangle is a triangle in which one angle is right proper angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    const m = (a + b + c) / 2;\n    return (b * b) / (4 * m) <= (a * a + c * c) / (2 * m);\n}\n\nconst isRightAngleTriangle = (a, b, c) => {\n    const m = (a + b + c) / 2;\n    return (b * b) / (4 * m) <= (a * a + c * c) / (2 * m);\n}\n\nconst isRightAngleTriangle = (a, b, c) => {\n    const m = (a + b + c) / 2;\n    return (b * b) / (4 * m) <= (a * a + c * c) / (2 * m);\n}\n\nconst isRightAngleTriangle = (a, b, c) => {\n    const m = (a + b + c) / 2;\n    return (b * b) / (4 * m) <= (a * a + c * c) / (2 * m);\n}\n\nconst isRightAngleTriangle = (a, b, c) => {\n    const m = (a + b + c) / 2;\n    return (b * b) / (4 * m) <= (a * a + c * c) / (2 * m);\n}\n\nconst isRightAngleTriangle = (a, b, c) => {\n    const m = (a + b + c) / 2;\n    return (b * b) / (4 * m) <= (a * a + c * c) / (2 * m);\n}\n\nconst isRightAngleTriangle = (a, b, c) => {\n    const m = (a + b + c) / 2;\n    return (b * b) / (4 * m) <= (a * a + c * c) / (2 * m);\n}\n\nconst isRightAngleTriangle = (a, b, c) => {\n    const m = (a + b + c) / 2;\n    return (b * b) / (4 * m) <= (a * a + c * c) / (2 * m);\n}\n\nconst isRightAngleTriangle = (a, b, c) => {\n    const m = (a + b + c) / 2;\n    return (b * b) / (4 * m) <= (a * a + c * c) / (2 * m);\n}\n\nconst isRightAngleTriangle = (a, b, c) => {\n    const m = (a + b + c) / 2;\n    return (b * b) / (4 * m) <= (a * a + c * c) / (2 * m);\n}\n\nconst isRightAngleTriangle = (a, b, c) => {\n    const m = (a + b + c) / 2;\n    return (b * b) / (4 * m) <= (a * a + c * c) / (2 * m);\n}\n\nconst isRightAngleTriangle = (a, b, c) => {\n    const m = (a + b + c) / 2;\n    return (b * b) / (4 * m) <= (a * a + c * c) / (2 * m);\n}\n\nconst isRightAngleTriangle = (a, b, c) => {\n    const m = (a + b + c) / 2;\n    return (b * b) / (4 * m) <= (a * a + c * c) / (2 * m);\n}\n\nconst isRightAngleTriangle = (a, b, c) => {\n    const m = (a + b + c) / 2;\n    return (b * b) / (4 * m) <= (a * a + c * c) / (2 * m);\n}\n\nconst isRightAngleTriangle = (a, b, c) => {\n    const m = (a + b + c) / 2;\n    return (b * b) / (4 * m) <= (a * a + c * c) / (2 * m);\n}\n\nconst isRightAngleTriangle = (a, b, c) => {\n    const m = (a + b + c) / 2;\n    return (b * b) / (4 * m) <= (a * a + c * c) / (2 * m);\n}\n\nconst isRightAngleTriangle = (a, b, c) => {\n    const m = (a + b + c) / 2;\n    return (b * b) / (4 * m) <= (a * a + c * c) / (2 * m);\n}\n\nconst isRightAngleTriangle = (a, b, c) => {\n    const m = (a + b + c) / 2;\n    return (b * b) / (4 * m) <= (a * a +"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings chain. \n   The list contains different unlike words. Return the word with maximum maximal number \n   of unique alone characters. If multiple strings string section have maximum number of unique \n   characters character, return the one which comes come first foremost in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings chain. \n   The list contains different unlike words. Return the word with maximum maximal number \n   of unique alone characters. If multiple strings string section have maximum number of unique \n   characters character, return the one which comes come first foremost in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   let max = 0\n   let charCount = {}\n   for (let word of words) {\n      for (let character of word) {\n        if (charCount[character] === undefined) {\n          charCount[character] = 0\n        }\n        charCount[character]++\n      }\n   }\n   for (let character of charCount) {\n      if (max < charCount[character]) {\n        max = charCount[character]\n      }\n   }\n   return words.find((word) => {\n     let index = 0\n     for (let character of word) {\n        if (charCount[character] === max) {\n          return index\n        }\n        index++\n      }\n    })\n }*/\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten corrode a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have eaten corrode a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (remaining >= need) {\n    return [need, number - need];\n  }\n  return [number, remaining];\n}\n\nexport {eat}\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations, and \n   the second list is a list of integers integer. Use the two given impart lists to build build up the algebric \n   expression and return the evaluation of this expression formula. \n\n   The basic algebra operations operation: \n   Addition accession (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations, and \n   the second list is a list of integers integer. Use the two given impart lists to build build up the algebric \n   expression and return the evaluation of this expression formula. \n\n   The basic algebra operations operation: \n   Addition accession (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  if (operand.length === 0) {\n    return 0\n  } else if (operand.length === 1) {\n    return operand[0]\n  }\n\n  const sum = operator[0][0] * operand[0]\n  const prod = operator[0][0] * operand[1]\n\n  let i = 1\n  while (i < operator.length) {\n    sum = sum + operator[i][0] * operand[i - 1]\n    prod = prod + operator[i][0] * operand[i]\n    i += 1\n  }\n\n  return sum + prod\n}\n\nconst doAlgebraTest = () => {\n  const operators = ['+', '-', '*', '/', '**']\n  const operands = [2, 3, 4, 5]\n\n  console.log('Doing basic algebra, with two operands')\n  const result = doAlgebra(operators, operands)\n  console.log('The result of the basic algebra is:'+ result)\n\n  console.log('Doing basic algebra, with one operand')\n  const result2 = doAlgebra(operators, operands)\n  console.log('The result of the basic algebra is:'+ result2)\n\n  console.log('Doing basic algebra, with one operator')\n  const result3 = doAlgebra(operators, operands)\n  console.log('The result of the basic algebra is:'+ result3)\n\n  console.log('Doing basic algebra, with two operators')\n  const result4 = doAlgebra(operators, operands)\n  console.log('The result of the basic algebra is:'+ result4)\n\n  console.log('Doing basic algebra, with two operands')\n  const result5 = doAlgebra(operators, operands)\n  console.log('The result of the basic algebra is:'+ result5)\n}\n\ndoAlgebraTest()\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse turn back its case from lower gloomy to upper or vise versa, \n   otherwise keep sustain it as it is. \n   If the string contains hold no letters, reverse overrule the string. \n   The function should return the resulted string chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse turn back its case from lower gloomy to upper or vise versa, \n   otherwise keep sustain it as it is. \n   If the string contains hold no letters, reverse overrule the string. \n   The function should return the resulted string chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newStr = \"\";\n  let index = 0;\n  let letter;\n  for (let i = 0; i < s.length; i++) {\n    if (isLetter(s[i])) {\n      letter = s[i].toLowerCase();\n      newStr += letter;\n      if (index === 0) {\n        newStr = newStr.toUpperCase();\n      } else if (index === s.length - 1) {\n        newStr = newStr.toLowerCase();\n      } else {\n        newStr = newStr.toUpperCase();\n      }\n      index++;\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr;\n};\n\nconst isLetter = (str) => {\n  return /[a-zA-Z]/.test(str);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length == 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  const md5_string = md5.digest('hex');\n  return md5_string;\n}\n\n/*\n  Given a string 'text', return its sha256 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToSha256('Hello world') == '8d2ccb0d3433b24f2e5c9f2d4f7b6ed'\n  */\nconst stringToSha256 = (text) => {\n  if (text.length == 0) {\n    return null;\n  }\n  const sha256 = crypto.createHash('sha256');\n  sha256.update(text);\n  const sha256_string = sha256.digest('hex');\n  return sha256_string;\n}\n\n/*\n  Given a string 'text', return its sha512 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToSha512('Hello world') == 'a9c5d6a6c3b8a7d5c6fdd9d3d6d6b7d8e0e8e3a1a2d3d4d5e6e7e8e9eaeaeaeaeeeaf'\n  */\nconst stringToSha512 = (text) => {\n  if (text.length == 0) {\n    return null;\n  }\n  const sha512 = crypto.createHash('sha512');\n  sha512.update(text);\n  const sha512_string = sha512.digest('hex');\n  return sha512_string;\n}\n\n/*\n  Given a string 'text', return its sha384 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToSha384('Hello world') == 'f2e4445a0b9a059c33ca828e6f1e0dce0'\n  */\nconst stringToSha384 = (text) => {\n  if (text.length == 0) {\n    return null;\n  }\n  const sha384 = crypto.createHash('sha384');\n  sha384.update(text);\n  const sha384_string = sha384.digest('hex');\n  return sha384_string;\n}\n\n/*\n  Given a string 'text', return its sha256 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToSha256('Hello world') == '8d2ccb0d3433b24f2e5c9f2d4f7b6ed'\n  */\nconst stringToSha256_base = (text) => {\n  if (text.length == 0) {\n    return null;\n  }\n  const sha256 = crypto.createHash('sha256');\n  sha256.update(text);\n  const sha256_string = sha256.digest('hex');\n  return sha256_string;\n}\n\n/*\n  Given a string 'text', return its sha256 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToSha256_base('Hello world') == '8d2ccb0d3433b24f2e5c9f2d4f7b6ed'\n  */\nconst stringToSha256_base_with_base = (text) => {\n  if (text.length == 0) {\n    return null;\n  }\n  const sha256 = crypto.createHash('sha256');\n  sha256.update(text, 'utf-8');\n  const sha256_string = sha256.digest('hex');\n  return sha256_string;\n}\n\nmodule.exports = {\n  stringToMd5,\n  stringToSha256,\n  stringToSha256_base,\n  stringToSha256_base_with_base,\n  stringToSha512,\n  stringToSha384\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers integer a and b, return the even digits digit between a\n   and b, in ascending order holy order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers integer a and b, return the even digits digit between a\n   and b, in ascending order holy order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = []\n  let i = a\n  while (i <= b) {\n    result.push(i)\n    i += 2\n  }\n  return result\n}\n\n/*\n  Given a positive integer, return the next larger palindrome.\n\n  For example:\n  nextPalindrome(3) => 7\n  nextPalindrome(6) => 9\n  nextPalindrome(8) => 13\n  nextPalindrome(100) => 900\n  */\nconst nextPalindrome = (n) => {\n  let i = 0\n  let result = 0\n  let max = n\n  while (i < max) {\n    result = (result * 10) + (n % 10)\n    n = n / 10\n  }\n  return result\n}\n\n/*\n  Given a positive integer, return the smallest number that is equal to its\n  palindrome when written in reverse order.\n\n  For example:\n  reversePalindrome(2) => 3\n  reversePalindrome(3) => 7\n  reversePalindrome(4) => 11\n  reversePalindrome(100) => 900\n  */\nconst reversePalindrome = (n) => {\n  let result = 0\n  let max = n\n  while (n > 0) {\n    result = (result * 10) + (n % 10)\n    n = n / 10\n  }\n  return result\n}\n\n/*\n  Given two positive integers, return their product.\n\n  For example:\n  product(2, 3) => 6\n  product(3, 4) => 12\n  product(4, 5) => 20\n  product(100, 1000) => 100000\n  */\nconst product = (a, b) => {\n  let result = 1\n  let max = a\n  while (max <= b) {\n    result *= max\n    max += 1\n  }\n  return result\n}\n\n/*\n  Given two positive integers, return their sum.\n\n  For example:\n  sum(2, 3) => 5\n  sum(4, 5) => 9\n  sum(100, 1000) => 10009\n  */\nconst sum = (a, b) => a + b\n\n/*\n  Given a string, return a new string in which all lowercase characters\n  have been converted to uppercase.\n\n  For example:\n  convertToUpperCase('hello') => HELLO\n  convertToUpperCase('abc') => ABC\n  convertToUpperCase('world') => WORLD\n  */\nconst convertToUpperCase = (s) => s.toUpperCase()\n\n/*\n  Given a string, return a new string in which all uppercase characters\n  have been converted to lowercase.\n\n  For example:\n  convertToLowerCase('HELLO') => hello\n  convertToLowerCase('ABC') => abc\n  convertToLowerCase('WORLD') => world\n  */\nconst convertToLowerCase = (s) => s.toLowerCase()\n\n/*\n  Given a string, return a new string in which all whitespace characters\n  have been removed.\n\n  For example:\n  removeWhitespace('hello world') => hello world\n  removeWhitespace('hello\\tworld') => hello world\n  */\nconst removeWhitespace = (s) => s.trim()\n\n/*\n  Given a string, return a new string in which all uppercase and lowercase\n  characters have been converted to lowercase.\n\n  For example:\n  convertToLowerCase('HELLO') => hello\n  convertToLowerCase('ABC') => abc\n  convertToLowerCase('WORLD') => world\n  */\nconst convertToLowerCaseAll = (s) => s.toLowerCase()\n\n/*\n  Given a string, return a new string in which all uppercase and lowercase\n  characters have been converted to uppercase.\n\n  For example:\n  convertToUpperCase('hello world') => HELLO WORLD\n  convertToUpperCase('hello\\tworld') => HELLO WORLD\n  */\nconst convertToUpperCaseAll = (s) => s.toUpperCase()\n\n/*\n  Given a string, return a new string in which all occurrences of all\n  characters in a string have been replaced by a new character.\n\n  For example:\n  replaceAll('hello world', 'ello', '*') => hello*w*d\n  replaceAll('hello world', 'ello', '@') => hello@w@d\n  replaceAll('hello world', 'ello', '!') => hello!w!d\n  */\nconst replaceAll = (s, old, new) => s.replace(new RegExp(old, 'g'), new)\n\n/*\n  Given a string, return a new string in which all occurrences of all\n  characters in a string have been replaced by a new character, but only\n  for the first occurrence of each character.\n\n  For example:\n  replaceFirst('hello world', 'ello', '*') => hello world\n  replaceFirst('hello world', 'ello', '@') => hello world\n  replaceFirst('hello world', 'ello', '!') => hello world\n  */\nconst replaceFirst = (s, old, new) => s.replace(new RegExp(old, 'g'), new)\n\n/*\n  Given a string, return a new string with all occurrences of '-', '_',\n  or'' removed.\n\n  For example:\n  removeAll('_hello_world_') => hello world\n  removeAll('hello world') => hello world\n  removeAll('-hello world') => hello world\n  removeAll('hello-world') => hello world\n  */\nconst removeAll = (s) => s.replace(/[-_ ]/g, '')\n\n/*\n  Given a string, return a new string with all occurrences of '-', '_',\n  or'' replaced by a space.\n\n  For example:\n  replaceAll('_hello_world_', '_','') => hello world\n  replaceAll('hello world', '_','') => hello world\n  replaceAll('-hello world', '"}
