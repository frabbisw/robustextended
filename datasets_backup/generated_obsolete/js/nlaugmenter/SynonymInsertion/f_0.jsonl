{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/* \n  Given an array of numbers, find the highest and lowest number in the array.\n  >>> findExtreme( [1, 2, 3, 4, 5, 6, 7] )\n  {low:7,high:6}\n  >>> findExtreme( [1, 2, 3, 4, 5, 6] )\n  {low:1,high:6}\n  */\nconst findExtreme = (numbers) => {\n  const len = numbers.length\n  let low = numbers[0]\n  let high = numbers[0]\n  for (let i = 1; i < len; i++) {\n    if (numbers[i] < low) {\n      low = numbers[i]\n    }\n    if (numbers[i] > high) {\n      high = numbers[i]\n    }\n  }\n  return {low, high}\n}\n\n/*\n  Given an array of numbers, find the two highest and two lowest numbers.\n  >>> findExtreme2( [1, 2, 3, 4, 5, 6, 7] )\n  [{low:7,high:6},{low:1,high:6}]\n  >>> findExtreme2( [1, 2, 3, 4, 5, 6] )\n  [{low:1,high:6},{low:2,high:5}]\n  */\nconst findExtreme2 = (numbers) => {\n  const len = numbers.length\n  let low = numbers[0]\n  let high = numbers[0]\n  for (let i = 1; i < len; i++) {\n    if (numbers[i] < low) {\n      low = numbers[i]\n    }\n    if (numbers[i] > high) {\n      high = numbers[i]\n    }\n  }\n  for (let i = len - 1; i >= 0; i--) {\n    if (numbers[i] < low) {\n      low = numbers[i]\n    }\n    if (numbers[i] > high) {\n      high = numbers[i]\n    }\n  }\n  return [{low, high}, {low, high}]\n}\n\nmodule.exports = {\n  findExtreme,\n  findExtreme2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   separate freestanding those group into separate strings string section and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   separate freestanding those group into separate strings string section and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n    const group = [];\n    const stack = [];\n    let last = '';\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] === '(') {\n            stack.push(paren_string[i]);\n        } else if (paren_string[i] === ')') {\n            if (stack.length === 0) {\n                return group;\n            } else if (stack.length === 1) {\n                last = stack.pop();\n            } else {\n                stack.pop();\n                group.push(last);\n                last = stack.pop();\n            }\n        } else if (stack.length === 0) {\n            group.push(paren_string[i]);\n        }\n    }\n    return group;\n};\n\nconsole.log(separateParenGroups('()'));\nconsole.log(separateParenGroups('((()))'));\nconsole.log(separateParenGroups('()(()(()))'));\nconsole.log(separateParenGroups('((())'));\nconsole.log(separateParenGroups('()(()()))'));\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating float point number, it can be decomposed disintegrate into \n   and integer part (largest bombastic integer smaller than given give number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating float point number, it can be decomposed disintegrate into \n   and integer part (largest bombastic integer smaller than given give number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  if (number < 1) return 0\n  let integer = Math.floor(number)\n  let decimal = number - integer\n  return decimal\n}\n\nconst getFractionalPart = (number) => {\n  if (number < 1) return 0\n  let integer = Math.floor(number)\n  let decimal = number - integer\n  return decimal\n}\n\nconst getDecimalPart = (number) => {\n  if (number < 1) return 0\n  let integer = Math.floor(number)\n  let decimal = number - integer\n  return decimal\n}\n\n/* Given a positive integer, it can be decomposed into and integer part (largest bombastic integer smaller than given give number) and \n   decimal part (leftover part always smaller than 1). \n\n   Return the integer part region of the number.\n  >>> truncateNumber(10)\n  5\n  >>> truncateNumber(10.5)\n  5\n  >>> truncateNumber(11.5)\n  6\n  >>> truncateNumber(12.5)\n  6\n  >>> truncateNumber(13.5)\n  7\n  >>> truncateNumber(14.5)\n  7\n  >>> truncateNumber(15.5)\n  8\n  >>> truncateNumber(16.5)\n  8\n  >>> truncateNumber(17.5)\n  9\n  >>> truncateNumber(18.5)\n  9\n  >>> truncateNumber(19.5)\n  10\n  >>> truncateNumber(20.5)\n  10\n  >>> truncateNumber(21.5)\n  10\n  >>> truncateNumber(22.5)\n  11\n  >>> truncateNumber(23.5)\n  11\n  >>> truncateNumber(24.5)\n  11\n  >>> truncateNumber(25.5)\n  12\n  >>> truncateNumber(26.5)\n  12\n  >>> truncateNumber(27.5)\n  12\n  >>> truncateNumber(28.5)\n  12\n  >>> truncateNumber(29.5)\n  13\n  >>> truncateNumber(30.5)\n  13\n  >>> truncateNumber(31.5)\n  13\n  >>> truncateNumber(32.5)\n  13\n  >>> truncateNumber(33.5)\n  14\n  >>> truncateNumber(34.5)\n  14\n  >>> truncateNumber(35.5)\n  14\n  >>> truncateNumber(36.5)\n  14\n  >>> truncateNumber(37.5)\n  14\n  >>> truncateNumber(38.5)\n  14\n  >>> truncateNumber(39.5)\n  15\n  >>> truncateNumber(40.5)\n  15\n  >>> truncateNumber(41.5)\n  15\n  >>> truncateNumber(42.5)\n  15\n  >>> truncateNumber(43.5)\n  15\n  >>> truncateNumber(44.5)\n  15\n  >>> truncateNumber(45.5)\n  16\n  >>> truncateNumber(46.5)\n  16\n  >>> truncateNumber(47.5)\n  16\n  >>> truncateNumber(48.5)\n  16\n  >>> truncateNumber(49.5)\n  16\n  >>> truncateNumber(50.5)\n  16\n  >>> truncateNumber(51.5)\n  17\n  >>> truncateNumber(52.5)\n  17\n  >>> truncateNumber(53.5)\n  17\n  >>> truncateNumber(54.5)\n  17\n  >>> truncateNumber(55.5)\n  17\n  >>> truncateNumber(56.5)\n  17\n  >>> truncateNumber(57.5)\n  17\n  >>> truncateNumber(58.5)\n  17\n  >>> truncateNumber(59.5)\n  17\n  >>> truncateNumber(60.5)\n  17\n  >>> truncateNumber(61.5)\n  17\n  >>> truncateNumber(62.5)\n  17\n  >>> truncateNumber(63.5)\n  17\n  >>> truncateNumber(64.5)\n  17\n  >>> truncateNumber(65.5)\n  17\n  >>> truncateNumber(66.5)\n  17\n  >>> truncateNumber(67.5)\n  17\n  >>> truncateNumber(68.5)\n  17\n  >>> truncateNumber(69.5)\n  17\n  >>> truncateNumber(70.5)\n  17\n  >>> truncateNumber(71.5)\n  17\n  >>> truncateNumber(72.5)\n  17\n  >>> truncateNumber(73.5)\n  17\n  >>> truncateNumber(74.5)\n  17\n  >>> truncateNumber(75.5)\n  17\n  >>> truncateNumber(76.5)\n  17\n  >>> truncateNumber(77.5)\n  17\n  >>> truncateNumber(78.5)\n  17\n  >>> truncateNumber(79.5)\n  17\n  >>> truncateNumber(80.5)\n  17\n  >>> truncateNumber(81.5)\n  17\n  >>> truncateNumber(82.5)\n  17\n  >>> truncateNumber(83.5)\n  17\n  >>> truncateNumber(84.5)\n  17\n  >>> truncateNumber(85.5)\n  17\n  >>> truncateNumber(86.5)\n  17\n  >>> truncateNumber(87.5)\n  17\n  >>> truncateNumber(88.5)\n  17\n  >>> truncateNumber(89.5)\n  17\n  >>> truncateNumber(90.5)\n  17\n  >>> truncateNumber(91.5)\n  17\n  >>> truncateNumber(92.5)\n  17\n  >>> truncateNumber(93.5)\n  17\n  >>> truncateNumber(94.5)\n  17\n  >>> truncateNumber(95.5)\n  17\n  >>> truncateNumber(96.5)\n  17\n  >>> truncateNumber(97.5)\n  17\n  >>> truncateNumber(98.5"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account that starts startle with \n   zero balance. Your task is to detect if at any point degree the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account that starts startle with \n   zero balance. Your task is to detect if at any point degree the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n    let i = 0\n    let index = 0\n    const total = operations.reduce((acc, op, index) => {\n        if(op <= 0) {\n            acc = acc + 1\n            index += 1\n        }\n        return acc\n    }, 0)\n\n    if(total === 0) {\n        return false\n    }\n\n    let prev = 0\n    let curr = 0\n    let sum = 0\n    for(i = 0; i < operations.length; i++) {\n        prev = curr\n        curr = operations[i]\n        sum = sum + curr\n        if(curr < 0 && prev > 0) {\n            return true\n        }\n    }\n\n    return false\n}\n\n/*\n   Given a list of deposit and withdrawal operations on a bank depository financial institution account that starts startle with \n   zero balance, return the sum of all the operations.\n\n  >>> sumOfOperations([1, 2, 3])\n  6\n  >>> sumOfOperations([-1, 2, 3, -4, 5])\n  7\n  */\nconst sumOfOperations = (operations) => {\n    return operations.reduce((acc, op, index) => acc + op, 0)\n}\n\nconst test = require('ava')\nconst belowZero = require('./belowZero')\nconst sumOfOperations = require('./sumOfOperations')\n\ntest('belowZero', t => {\n    const operations = [1, 2, 3]\n    t.is(belowZero(operations), false)\n\n    const operations2 = [-1, 2, 3, -4, 5]\n    t.is(belowZero(operations2), true)\n\n    const operations3 = [1, 2, -4, 5]\n    t.is(belowZero(operations3), true)\n\n    const operations4 = [-1, 2, 3]\n    t.is(belowZero(operations4), false)\n})\n\ntest('sumOfOperations', t => {\n    const operations = [1, 2, 3]\n    t.is(sumOfOperations(operations), 6)\n\n    const operations2 = [-1, 2, 3, -4, 5]\n    t.is(sumOfOperations(operations2), 7)\n\n    const operations3 = [1, 2, -4, 5]\n    t.is(sumOfOperations(operations3), 7)\n\n    const operations4 = [-1, 2, 3]\n    t.is(sumOfOperations(operations4), 6)\n})\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const median = median(numbers);\n  const m = numbers.map((n) => {\n    return Math.abs(n - mean);\n  });\n  const MAD = median(m);\n  return MAD;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n  3.0\n  */\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n  4.0\n  */\nconst meanAbsoluteDeviation2 = (numbers) => {\n  const mean = mean(numbers);\n  const median = median(numbers);\n  const m = numbers.map((n) => {\n    return Math.abs(n - mean);\n  });\n  const MAD = median(m);\n  return MAD;\n};\n\nmodule.exports = {\n  meanAbsoluteDeviation,\n  meanAbsoluteDeviation2,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements element of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number 'delimeter' between every two consecutive elements element of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let output = [];\n\n  while (numbers.length > 1) {\n    let start = numbers.shift();\n    output.push(start);\n\n    if (numbers.length) {\n      let next = numbers.shift();\n      output.push(delimeter);\n      output.push(next);\n    }\n  }\n\n  return output.concat(numbers);\n};\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string drawstring represented multiple groups group for nested parentheses separated classify by spaces. \n   For each of the group, output the deepest thick level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string drawstring represented multiple groups group for nested parentheses separated classify by spaces. \n   For each of the group, output the deepest thick level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n    const levels = []\n    const stack = [paren_string]\n    let level = 0\n    const i = 0\n    while (i < stack.length) {\n        const parenthesis = stack[i]\n        if (parenthesis === '(') {\n            level += 1\n        } else if (parenthesis === ')') {\n            level -= 1\n        }\n        if (level === 0) {\n            levels.push(i)\n            stack.pop()\n        }\n        i += 1\n    }\n    return levels\n}\n\nconst isValidNestedParens = (string) => {\n    const stack = []\n    const parseStack = []\n    const start = 0\n    const end = string.length\n    const paren_string = string\n    let level = 0\n    for (let i = start; i < end; i++) {\n        const character = paren_string[i]\n        if (character === '(') {\n            level += 1\n            stack.push(character)\n            parseStack.push(i)\n        } else if (character === ')') {\n            level -= 1\n            if (level === 0) {\n                parseStack.pop()\n                parseStack.push(i)\n            }\n            stack.pop()\n        }\n    }\n    if (level!== 0) {\n        return false\n    }\n    const levels = parseNestedParens(paren_string)\n    if (parseStack.length!== levels.length) {\n        return false\n    }\n    for (let i = parseStack.length - 1; i >= 0; i--) {\n        if (parseStack[i]!== levels[i]) {\n            return false\n        }\n    }\n    return true\n}\n\nconst parseParentheses = (string) => {\n    const levels = []\n    const stack = []\n    const parseStack = []\n    const start = 0\n    const end = string.length\n    let level = 0\n    for (let i = start; i < end; i++) {\n        const character = string[i]\n        if (character === '(') {\n            level += 1\n            stack.push(character)\n            parseStack.push(i)\n        } else if (character === ')') {\n            level -= 1\n            if (level === 0) {\n                parseStack.pop()\n                parseStack.push(i)\n            }\n            stack.pop()\n        }\n    }\n    if (level!== 0) {\n        return false\n    }\n    const levels = parseNestedParens(paren_string)\n    if (parseStack.length!== levels.length) {\n        return false\n    }\n    for (let i = parseStack.length - 1; i >= 0; i--) {\n        if (parseStack[i]!== levels[i]) {\n            return false\n        }\n    }\n    return true\n}\n\nconst parseParenthesesNoNestedParens = (string) => {\n    const levels = []\n    const stack = []\n    const parseStack = []\n    const start = 0\n    const end = string.length\n    let level = 0\n    for (let i = start; i < end; i++) {\n        const character = string[i]\n        if (character === '(') {\n            level += 1\n            stack.push(character)\n            parseStack.push(i)\n        } else if (character === ')') {\n            level -= 1\n            if (level === 0) {\n                parseStack.pop()\n                parseStack.push(i)\n            }\n            stack.pop()\n        }\n    }\n    if (level!== 0) {\n        return false\n    }\n    const levels = parseNestedParens(paren_string)\n    if (parseStack.length!== levels.length) {\n        return false\n    }\n    for (let i = parseStack.length - 1; i >= 0; i--) {\n        if (parseStack[i]!== levels[i]) {\n            return false\n        }\n    }\n    return true\n}\n\nconst testNestedParens = (string) => {\n    const isValid = isValidNestedParens(string)\n    if (!isValid) {\n        console.log('invalid')\n    }\n    const isValidParentheses = parseParentheses(string)\n    if (!isValidParentheses) {\n        console.log('invalid')\n    }\n    const isValidParenthesesNoNestedParens = parseParenthesesNoNestedParens(string)\n    if (!isValidParenthesesNoNestedParens) {\n        console.log('invalid')\n    }\n}\n\nconst test = () => {\n    const string}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain check given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contain check given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n    let filtered = strings.filter(s => s.indexOf(substring)!== -1);\n    return filtered;\n};\n\n/*\n  * Filter an input list of objects based on a property and value\n  */\nconst filterByProperty = (objects, property, value) => {\n    let filtered = objects.filter(o => o[property] === value);\n    return filtered;\n};\n\n/*\n  * Filter an input list of objects by a property with the given values\n  */\nconst filterByPropertyValue = (objects, property, values) => {\n    let filtered = objects.filter(o => o[property] === values[0]);\n    return filtered;\n};\n\n/*\n  * Return an array of the names of the given objects\n  */\nconst getObjectNames = (objects) => {\n    let objectNames = [];\n    objects.forEach(o => {\n        objectNames.push(o.name);\n    });\n    return objectNames;\n};\n\n/*\n  * Return a list of all the objects that have the given name\n  */\nconst getObjectsByName = (objects, name) => {\n    let filtered = objects.filter(o => o.name === name);\n    return filtered;\n};\n\n/*\n  * Return a list of all the objects that contain the given substring\n  */\nconst getObjectsBySubstring = (objects, substr) => {\n    let filtered = filterBySubstring(objects, substr);\n    return filtered;\n};\n\n/*\n  * Return a list of all the objects that have the given property and value\n  */\nconst getObjectsByPropertyValue = (objects, property, value) => {\n    let filtered = filterByPropertyValue(objects, property, value);\n    return filtered;\n};\n\n/*\n  * Return a list of all the objects that contain the given substring in the given property\n  */\nconst getObjectsBySubstringProperty = (objects, property, substr) => {\n    let filtered = filterBySubstring(objects, substr);\n    return filtered;\n};\n\n/*\n  * Return a list of all the objects that have the given property and one of the given values\n  */\nconst getObjectsByPropertyValue = (objects, property, values) => {\n    let filtered = filterByPropertyValue(objects, property, values[0]);\n    return filtered;\n};\n\n/*\n  * Return a list of all the objects that have the given property and any of the given values\n  */\nconst getObjectsByPropertyValues = (objects, property, values) => {\n    let filtered = filterByPropertyValue(objects, property, values);\n    return filtered;\n};\n\n/*\n  * Return a list of all the objects that contain the given substring in the given property and any of the given values\n  */\nconst getObjectsBySubstringPropertyValues = (objects, property, substr, values) => {\n    let filtered = filterBySubstringPropertyValue(objects, property, substr, values);\n    return filtered;\n};\n\n/*\n  * Return a list of all the objects that contain the given substring in the given property and the given value\n  */\nconst getObjectsBySubstringPropertyValue = (objects, property, substr, value) => {\n    let filtered = filterBySubstringPropertyValue(objects, property, substr, value);\n    return filtered;\n};\n\n/*\n  * Return a list of all the objects that contain the given substring in the given property and the given values\n  */\nconst getObjectsBySubstringPropertyValues = (objects, property, substr, values) => {\n    let filtered = filterBySubstringPropertyValue(objects, property, substr, values);\n    return filtered;\n};\n\n/*\n  * Return a list of all the objects that have the given property and the given value\n  */\nconst getObjectsByPropertyValue = (objects, property, value) => {\n    let filtered = filterByPropertyValue(objects, property, value);\n    return filtered;\n};\n\n/*\n  * Return a list of all the objects that have the given property and any of the given values\n  */\nconst getObjectsByPropertyValues = (objects, property, values) => {\n    let filtered = filterByPropertyValue(objects, property, values);\n    return filtered;\n};\n\n/*\n  * Return a list of all the objects that have the given property and all of the given values\n  */\nconst getObjectsByPropertyValues = (objects, property, values) => {\n    let filtered = filterByPropertyValue(objects, property, values);\n    return filtered;\n};\n\n/*\n  * Return a list of all the objects that have the given property and all of the given values\n  */\nconst getObjectsByPropertyValues = (objects, property, values) => {\n    let filtered = filterByPropertyValue(objects, property, values);\n    return filtered;\n};\n\n/*\n  * Return a list of all the objects that contain the given substring in the given property and all of the given values\n  */\nconst getObjectsBySubstringPropertyValues = (objects, property, substr, values) => {\n    let filtered = filterBySubstringPropertyValue(objects, property, substr, values);\n    return filtered;\n};\n\n/*\n  * Return a list of all the objects that contain the given substring in the given property and the given value\n  */\nconst getObjectsBySubstringPropertyValue = (objects, property, substr, value) => {\n    let filtered = filterBySubstringPropertyValue(objects, property, substr, value);\n    return filtered;\n};\n\n/*\n  * Return a list of all the objects that contain the given substring in the given property and the given values\n  */\nconst getObjectsBySubstringPropertyValues = (objects, property, substr, values) => {\n    let filtered = filterBySubstringPropertyValue(objects, property, substr, values);\n    return filtered;\n};\n\n/*\n  * Return a list of all the objects that contain the given substring in the given property and the given values\n  */\nconst getObjectsBySubstringPropertyValue = (objects, property, substr, value) => {\n    let filtered = filterBySubstringPropertyValue(objects, property, substr, value);\n    return filtered;\n};\n\n/*\n  * Return"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting consist of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting consist of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return {sum, product};\n};\n\nexport default sumProduct;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate render a list of rolling maximum maximal element found line up until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, generate render a list of rolling maximum maximal element found line up until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let lastMax = 0;\n  let max = 0;\n  const maxSoFar = [];\n  const maxList = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let currentMax = numbers[i];\n    if (currentMax > lastMax) {\n      lastMax = currentMax;\n      max = currentMax;\n    }\n    if (lastMax === currentMax) {\n      maxList.push(lastMax);\n    }\n    if (i === (numbers.length - 1)) {\n      maxList.push(lastMax);\n    }\n  }\n  return maxList;\n};\n\n// Test\n\nconst test = () => {\n  const numbers = [1, 2, 3, 2, 3, 4, 2];\n  console.log(rollingMax(numbers));\n};\n\n// Export\n\nexport default rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest light palindrome that begins with a supplied issue string.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n   - Append to the end conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest light palindrome that begins with a supplied issue string.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n   - Append to the end conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  return string.split('').reverse().join('');\n}\n\n/* Test if the provided string is a light palindrome */\nconst isLightPalindrome = (string) => {\n  return makePalindrome(string) === string;\n}\n\n/* Test if the provided string is a light palindrome */\nconst isPalindrome = (string) => {\n  return makePalindrome(string) === string;\n}\n\n/* Find the longest light palindrome that begins with a supplied issue string.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n   - Append to the end conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  ''\n  >>> findLongestPalindrome('cat')\n  'catac'\n  >>> findLongestPalindrome('cata')\n  'catac'\n  */\nconst findLongestPalindrome = (string) => {\n  let result = '',\n    temp = string;\n  while (temp!== '') {\n    if (isPalindrome(temp)) {\n      result = temp;\n      temp = temp.slice(0, -1);\n    } else {\n      temp = temp.slice(0, -1);\n    }\n  }\n  return result;\n}\n\n/* Find the longest light palindrome that begins with a supplied issue string.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n   - Append to the end conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('cat')\n  'catac'\n  >>> findLongestPalindrome('cata')\n  'catac'\n  */\nconst findLongestPalindrome = (string) => {\n  let result = '',\n    temp = string;\n  while (temp!== '') {\n    if (isPalindrome(temp)) {\n      result = temp;\n      temp = temp.slice(0, -1);\n    } else {\n      temp = temp.slice(0, -1);\n    }\n  }\n  return result;\n}\n\n/* Test if the provided string is a light palindrome */\nconst isLightPalindrome = (string) => {\n  return findLongestPalindrome(string) === string;\n}\n\n/* Test if the provided string is a light palindrome */\nconst isPalindrome = (string) => {\n  return findLongestPalindrome(string) === string;\n}\n\n/* Test if the provided string is a light palindrome */\nconst isLightPalindrome = (string) => {\n  return findLongestPalindrome(string) === string;\n}\n\n/* Test if the provided string is a light palindrome */\nconst isPalindrome = (string) => {\n  return findLongestPalindrome(string) === string;\n}\n\n/* Test if the provided string is a light palindrome */\nconst isLightPalindrome = (string) => {\n  return findLongestPalindrome(string) === string;\n}\n\n/* Test if the provided string is a light palindrome */\nconst isPalindrome = (string) => {\n  return findLongestPalindrome(string) === string;\n}\n\n/* Test if the provided string is a light palindrome */\nconst isLightPalindrome = (string) => {\n  return findLongestPalindrome(string) === string;\n}\n\n/* Test if the provided string is a light palindrome */\nconst isPalindrome = (string) => {\n  return findLongestPalindrome(string) === string;\n}\n\n/* Test if the provided string is a light palindrome */\nconst isLightPalindrome = (string) => {\n  return findLongestPalindrome(string) === string;\n}\n\n/* Test if the provided string is a light palindrome */\nconst isPalindrome = (string) => {\n  return findLongestPalindrome(string) === string;\n}\n\n/* Test if the provided string is a light palindrome */\nconst isLightPalindrome = (string) => {\n  return findLongestPalindrome(string) === string;\n}\n\n/* Test if the provided string is a light palindrome */\nconst isPalindrome = (string) => {\n  return findLongestPalindrome(string) === string;\n}\n\n/* Test if the provided string is a light palindrome */\nconst isLightPalindrome = (string) => {\n  return findLongestPalindrome(string) === string;\n}\n\n/* Test if the provided string is a light palindrome */\nconst isPalindrome = (string) => {\n  return findLongestPalindrome(string) === string;\n}\n\n/* Test if the provided string is a light palindrome */\nconst isLightPalindrome = (string) => {\n  return findLongestPalindrome(string) === string;\n}\n\n/* Test if the provided string is a light palindrome */\nconst isPalindrome = (string) => {\n  return findLongestPalindrome(string) === string;\n}\n\n/* Test if the provided string is a light palindrome */\nconst isLightPalindrome = (string) => {\n  return findLongestPalindrome(string) === string;\n}\n\n/* Test if the provided string is a light palindrome */\nconst isPalindrome = (string) => {\n  return findLongestPalindrome(string) === string;\n"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string bowed stringed instrument.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string bowed stringed instrument.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n    a = a.toString();\n    b = b.toString();\n    let c = '';\n    let n = a.length;\n    if(n!== b.length) throw 'Strings must be of same length';\n    for(let i = 0; i < n; i++) {\n        if(a[i] === '1' && b[i] === '1') c += '1';\n        if(a[i] === '1' && b[i] === '0') c += '0';\n        if(a[i] === '0' && b[i] === '1') c += '1';\n        if(a[i] === '0' && b[i] === '0') c += '0';\n    }\n    return c;\n};\n\n/* \n   Given two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary AND on these inputs and return result resultant role also as a string bowled stringed instrument.\n  >>> stringAnd('010', '110')\n  '110'\n  */\nconst stringAnd = (a, b) => {\n    a = a.toString();\n    b = b.toString();\n    let c = '';\n    let n = a.length;\n    if(n!== b.length) throw 'Strings must be of same length';\n    for(let i = 0; i < n; i++) {\n        if(a[i] === '1' && b[i] === '1') c += '1';\n        if(a[i] === '1' && b[i] === '0') c += '0';\n        if(a[i] === '0' && b[i] === '1') c += '0';\n        if(a[i] === '0' && b[i] === '0') c += '0';\n    }\n    return c;\n};\n\n/* \n   Given two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary OR on these inputs and return result resultant role also as a string bowled stringed instrument.\n  >>> stringOr('010', '110')\n  '110'\n  */\nconst stringOr = (a, b) => {\n    a = a.toString();\n    b = b.toString();\n    let c = '';\n    let n = a.length;\n    if(n!== b.length) throw 'Strings must be of same length';\n    for(let i = 0; i < n; i++) {\n        if(a[i] === '1' && b[i] === '1') c += '1';\n        if(a[i] === '1' && b[i] === '0') c += '1';\n        if(a[i] === '0' && b[i] === '1') c += '1';\n        if(a[i] === '0' && b[i] === '0') c += '0';\n    }\n    return c;\n};\n\nmodule.exports = {\n    stringXor,\n    stringAnd,\n    stringOr\n};\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case sheath of multiple \n   strings of the same length. Return null nothing in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case sheath of multiple \n   strings of the same length. Return null nothing in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  const max = strings.length - 1\n  let result = strings[0]\n  for (let i = 1; i < max; i++) {\n    if (strings[i].length > result.length) {\n      result = strings[i]\n    }\n  }\n  return result\n}\n\nexport default longest\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common coarse divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common coarse divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n    let i = 0\n    let j = 0\n    let c = 0\n    let d = 0\n    while (i < b) {\n        if (a % b === 0) {\n            c = a\n            d = b\n            break\n        }\n        i++\n    }\n    while (j < a) {\n        if (b % a === 0) {\n            c = b\n            d = a\n            break\n        }\n        j++\n    }\n    return d\n}\n\n/**\n  * @param {number} a\n  * @param {number} b\n  * @return {number}\n  */\nconst powerOf2 = (a, b) => {\n    let p = b\n    while (p > 1) {\n        if (a % p === 0) {\n            return p\n        }\n        p = p / 2\n    }\n    return 0\n}\n\n/**\n  * @param {number} n\n  * @param {number} k\n  * @return {number}\n  */\nconst modPow = (n, k) => {\n    let x = n\n    while (k > 0) {\n        if (k & 1) {\n            x = x * x % n\n        }\n        k = k >> 1\n        x = x * x % n\n    }\n    return x\n}\n\nconst getPrimeFactors = (n) => {\n    let primeFactors = []\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            primeFactors.push(i)\n            while (n % i === 0) {\n                n = n / i\n            }\n        }\n    }\n    if (n > 1) {\n        primeFactors.push(n)\n    }\n    return primeFactors\n}\n\nconst factorization = (n) => {\n    let primeFactors = getPrimeFactors(n)\n    let k = 0\n    let sum = 0\n    for (let i = 0; i < primeFactors.length; i++) {\n        let t = modPow(primeFactors[i], powerOf2(n, i))\n        sum += t\n        if (t!== 1) {\n            k += 1\n        }\n    }\n    return {\n        primeFactors: primeFactors,\n        k: k,\n        sum: sum\n    }\n}\n\nmodule.exports = {\n    factorial: factorial,\n    factorial2: factorial2,\n    getPrimeFactors: getPrimeFactors,\n    greatestCommonDivisor: greatestCommonDivisor,\n    powerOf2: powerOf2,\n    modPow: modPow,\n    factorization: factorization\n}\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest long of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shortest to longest long of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = []\n  let start = 0\n  let length = string.length\n  while (start <= length) {\n    let prefix = string.substring(start, start + 1)\n    prefixes.push(prefix)\n    start += 1\n  }\n  return prefixes\n}\n\n/**\n  * @param {string} string\n  * @return {string[]}\n  * @example\n  * Returns list of all suffixes from shortest to longest long of the input string\n  * @example\n  * Returns list of all suffixes from shortest to longest long of the input string\n  * >>> allSuffixes('abc')\n  * ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = []\n  let start = 0\n  let length = string.length\n  while (start <= length) {\n    let suffix = string.substring(length - start, length)\n    suffixes.push(suffix)\n    start += 1\n  }\n  return suffixes\n}\n\n/**\n  * @param {string} string\n  * @return {string[]}\n  * @example\n  * Returns list of all suffixes from shortest to longest long of the input string\n  * @example\n  * Returns list of all suffixes from shortest to longest long of the input string\n  * >>> allSuffixes('abc')\n  * ['c', 'bc', 'abc']\n  */\nconst allSuffixesNoDup = (string) => {\n  let suffixes = []\n  let start = 0\n  let length = string.length\n  while (start <= length) {\n    let suffix = string.substring(length - start, length)\n    if (suffix!== '') {\n      suffixes.push(suffix)\n    }\n    start += 1\n  }\n  return suffixes\n}\n\n/**\n  * @param {string} string\n  * @return {string[]}\n  * @example\n  * Returns list of all suffixes from shortest to longest long of the input string\n  * @example\n  * Returns list of all suffixes from shortest to longest long of the input string\n  * >>> allSuffixes('abc')\n  * ['c', 'bc', 'abc']\n  */\nconst allSuffixesNoDupNoEmpty = (string) => {\n  let suffixes = []\n  let start = 0\n  let length = string.length\n  while (start <= length) {\n    let suffix = string.substring(length - start, length)\n    if (suffix!== '') {\n      suffixes.push(suffix)\n    }\n    start += 1\n  }\n  return suffixes\n}\n\n/**\n  * @param {string} string\n  * @return {number}\n  * @example\n  * Returns length of the input string\n  * @example\n  * Returns length of the input string\n  * >>> length('abc')\n  * 3\n  */\nconst length = (string) => {\n  return string.length\n}\n\n/**\n  * @param {string} string\n  * @return {string}\n  * @example\n  * Returns a lowercase copy of the input string\n  * @example\n  * Returns a lowercase copy of the input string\n  * >>> toLowerCase('ABC')\n  * 'abc'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase()\n}\n\n/**\n  * @param {string} string\n  * @return {string}\n  * @example\n  * Returns a uppercase copy of the input string\n  * @example\n  * Returns a uppercase copy of the input string\n  * >>> toUpperCase('abc')\n  * 'ABC'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase()\n}\n\n/**\n  * @param {string} string\n  * @return {string}\n  * @example\n  * Returns a string with all the spaces removed\n  * @example\n  * Returns a string with all the spaces removed\n  * >>> trim('   \\t\\n\\r ')\n  * '\\t\\n\\r'\n  */\nconst trim = (string) => {\n  return string.trim()\n}\n\nmodule.exports = {\n  allPrefixes,\n  allSuffixes,\n  allSuffixesNoDup,\n  allSuffixesNoDupNoEmpty,\n  allSuffixesNoDupNoEmpty,\n  length,\n  toLowerCase,\n  toUpperCase,\n  trim\n}\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s +='' + i\n  }\n  return s\n}\n\n/* Return the total length of a string in bytes.\n  >>> stringLength('abc')\n  3\n  >>> stringLength(' ')\n  1\n  >>> stringLength('\\\\t')\n  9\n  */\nconst stringLength = (s) => {\n  return s.length\n}\n\n/* Return a string where all occurrences of 'from' are replaced with 'to'.\n  >>> stringReplace('abc', 'a', 'd')\n  'dc'\n  >>> stringReplace('abc', 'a','')\n 'b '\n  >>> stringReplace('abc', 'b','')\n  'a bc'\n  */\nconst stringReplace = (s, from, to) => {\n  let result = ''\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === from) {\n      result += to\n    } else {\n      result += s[i]\n    }\n  }\n  return result\n}\n\n/* Return the number of occurrences of 'element' in's'.\n  >>> stringCount('a', 'a')\n  1\n  >>> stringCount('a', 'b')\n  0\n  >>> stringCount('ab', 'a')\n  2\n  */\nconst stringCount = (s, element) => {\n  return s.split(element).length - 1\n}\n\n/* Return a string where all whitespace characters are replaced by ''.\n  >>> stringTrim('abc')\n  'abc'\n  >>> stringTrim('   ')\n  ''\n  >>> stringTrim('\\t\\t\\t\\t\\t\\t')\n  ''\n  */\nconst stringTrim = (s) => {\n  return s.trim()\n}\n\n/* Return a string where all occurrences of 'from' are replaced with 'to'.\n  >>> stringTrim('abca', 'a')\n  'bc'\n  >>> stringTrim('abca', 'ab')\n  'c'\n  */\nconst stringTrim = (s, from) => {\n  return s.replace(new RegExp(from, 'g'), '')\n}\n\n/* Return a string with all occurences of 'chars' replaced with'replacement'.\n  >>> stringTrim('abca', 'ab', 'c')\n  'ac'\n  >>> stringTrim('abca', 'ab', 'abc')\n  'c'\n  */\nconst stringTrim = (s, chars, replacement) => {\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    if (chars.indexOf(s[i]) > -1) {\n      newString += replacement\n    } else {\n      newString += s[i]\n    }\n  }\n  return newString\n}\n\n/* Return a string with all occurences of 'chars' replaced with'replacement'.\n  >>> stringTrim('abca', 'ab', 'c')\n  'ac'\n  >>> stringTrim('abca', 'ab', 'abc')\n  'c'\n  */\nconst stringTrim = (s, chars, replacement) => {\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    if (chars.indexOf(s[i]) > -1) {\n      newString += replacement\n    } else {\n      newString += s[i]\n    }\n  }\n  return newString\n}\n\n/* Return a string with all occurences of 'chars' replaced with'replacement'.\n  >>> stringTrim('abca', 'ab', 'c')\n  'ac'\n  >>> stringTrim('abca', 'ab', 'abc')\n  'c'\n  */\nconst stringTrim = (s, chars, replacement) => {\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    if (chars.indexOf(s[i]) > -1) {\n      newString += replacement\n    } else {\n      newString += s[i]\n    }\n  }\n  return newString\n}\n\n/* Return the substring from'start' upto 'end' (exclusive) or to the end of's' if 'end' is not specified.\n  >>> stringSubstring('abcdefghijklmnopqrstuvwxyz', 2)\n  'cde'\n  >>> stringSubstring('abcdefghijklmnopqrstuvwxyz', 2, 3)\n  'cd'\n  >>> stringSubstring('abcdefghijklmnopqrstuvwxyz', 2, 7)\n  'cdefgh'\n  >>> stringSubstring('abcdefghijklmnopqrstuvwxyz', 2, -1)\n  'cdefghijklmnopqrstuvwxyz'\n  >>> stringSubstring('abcdefghijklmnopqrstuvwxyz', 2, -2)\n  'cdefghij'\n  >>> stringSubstring('abcdefghijklmnopqrstuvwxyz', 0, 1)\n  ''\n  >>> stringSubstring('abcdefghijklmnopqrstuvwxyz', 2, 5)\n  'cdef'\n  >>> stringSubstring('abcdefghijklmnopqrstuvwxyz', 2, 2)\n  ''\n  */\nconst stringSubstring = (s, start, end) => {\n  if (typeof end === 'undefined') {\n    end = stringLength(s)\n  }\n  return s.substring(start, end)\n}\n\nmodule.exports = {\n  stringLength,\n  stringReplace,\n  stringCount,\n  stringTrim,\n  stringTrim,\n  stringSubstring\n}\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct clear-cut characters (regardless of case sheath) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many distinct clear-cut characters (regardless of case sheath) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return string.toLowerCase().split('').reduce((x, y) => x + (x === y), 0);\n};\n\n// https://en.wikipedia.org/wiki/Levenshtein_distance\n// http://stackoverflow.com/questions/233380/levenshtein-distance-algorithm-implementation\nconst levenshteinDistance = (s1, s2) => {\n  const len1 = s1.length;\n  const len2 = s2.length;\n\n  const matrix = [];\n  for (let i = 0; i <= len1; i++) {\n    matrix[i] = [];\n    for (let j = 0; j <= len2; j++) {\n      matrix[i][j] = i === 0? j : Math.min(matrix[i - 1][j] + 1, // base case\n        matrix[i][j - 1] + 1, // check s2\n        matrix[i - 1][j - 1] + (s1[i - 1]!== s2[j - 1]? 1 : 0) // edit operation\n      );\n    }\n  }\n\n  return matrix[len1][len2];\n};\n\n// https://en.wikipedia.org/wiki/Dynamic_programming\n// http://stackoverflow.com/questions/14006866/dynamic-programming-dynamic-programming-java\nconst dp = (s1, s2) => {\n  const len1 = s1.length;\n  const len2 = s2.length;\n  const max = Math.max(len1, len2);\n  const table = new Array(max + 1).fill(0);\n\n  for (let i = 0; i <= len1; i++) {\n    for (let j = 0; j <= len2; j++) {\n      table[i + j] = i === 0? j : Math.min(table[i + j - 1], // check s2\n        Math.min(dp(s1, s2.substring(0, i)) + 1, // check s1\n        dp(s1.substring(i), s2) + 1 // check s1 and s2\n      ));\n    }\n  }\n\n  return table[max];\n};\n\n// https://en.wikipedia.org/wiki/Hamming_distance\n// http://stackoverflow.com/questions/11551070/finding-the-hamming-distance-between-two-strings\nconst hammingDistance = (s1, s2) => {\n  const len1 = s1.length;\n  const len2 = s2.length;\n  const sum = 0;\n\n  for (let i = 0; i < len1; i++) {\n    sum += s1[i]!== s2[i]? 1 : 0;\n  }\n\n  return sum;\n};\n\nconst findClearCut = (string) => {\n  const len = string.length;\n  const sum = countDistinctCharacters(string);\n\n  let i = 0;\n  while (sum > len / 2) {\n    i++;\n    sum -= levenshteinDistance(string, string.substring(0, i));\n  }\n\n  return i;\n};\n\nmodule.exports = findClearCut;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string drawstring representing musical melodious notes in a special extra ASCII format. \n   Your task job is to parse this string and return list of integers integer corresponding equate to how many beats does each \n   not last. \n\n   Here is a legend caption: \n  ' o' - whole solid note, lasts four beats \n  ' o|' - half one-half note eminence, lasts survive two beats \n  ' .|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string drawstring representing musical melodious notes in a special extra ASCII format. \n   Your task job is to parse this string and return list of integers integer corresponding equate to how many beats does each \n   not last. \n\n   Here is a legend caption: \n 'o' - whole solid note, lasts four beats \n 'o|' - half one-half note eminence, lasts survive two beats \n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_list = [];\n\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i] === 'o' && i < music_string.length - 1) {\n      if (music_string[i + 1] === '|') {\n        music_list.push(4);\n        i += 1;\n      } else {\n        music_list.push(2);\n      }\n    } else if (music_string[i] === '.' && i < music_string.length - 1) {\n      music_list.push(1);\n      i += 1;\n    }\n  }\n\n  return music_list;\n}\n\nmodule.exports = parseMusic;<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found find oneself in the original string. Count overlaping cases font.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substring can be found find oneself in the original string. Count overlaping cases font.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let i = 0;\n  let times = 0;\n  while (i < string.length) {\n    if (string[i] === substring[0]) {\n      times += 1;\n      i += 1;\n      while (i < string.length && string[i] === substring[0]) {\n        times += 1;\n        i += 1;\n      }\n    }\n    else {\n      i += 1;\n    }\n  }\n  return times;\n};\n\n/*\n  * Find the longest substring in a given string.\n  * Find the longest substring in a given string.\n  *\n  *  >>> longestSubstring('abc')\n  *  'abc'\n  *  >>> longestSubstring('aaaa')\n  *  'aaaa'\n  *  >>> longestSubstring('aaab')\n  *  'aaab'\n  *  >>> longestSubstring('aaabc')\n  *  'aaab'\n  *  >>> longestSubstring('aaac')\n  *  'aaab'\n  *  >>> longestSubstring('aaaaa')\n  *  'aaaaa'\n  *  >>> longestSubstring('aaaab')\n  *  'aaab'\n  *  >>> longestSubstring('aaaaa')\n  *  'aaaaa'\n  *  >>> longestSubstring('a')\n  *  'a'\n  *  >>> longestSubstring('aaa')\n  *  'aaa'\n  *  >>> longestSubstring('aaa')\n  *  'aaa'\n  *  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string bowed stringed instrument with numbers sorted from smallest belittled to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space - delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string bowed stringed instrument with numbers sorted from smallest belittled to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n    const allNumbers = numbers.split(\" \")\n    const numbersArray = []\n    const numberLength = allNumbers.length\n    for (let i = 0; i < numberLength; i += 1) {\n        numbersArray.push(allNumbers[i])\n    }\n    const sortedNumbers = sorted(numbersArray)\n    const sortedNumbersString = \"\"\n    for (let i = 0; i < sortedNumbers.length; i += 1) {\n        sortedNumbersString += sortedNumbers[i]\n    }\n    return sortedNumbersString\n}\n\n/* Input is a space delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string bowed stringed instrument with numbers sorted from largest belittled to smallest\n  >>> sortNumbers('nine one two three')\n  'one two three nine'\n  */\nconst sortNumbers2 = (numbers) => {\n    const allNumbers = numbers.split(\" \")\n    const numbersArray = []\n    const numberLength = allNumbers.length\n    for (let i = 0; i < numberLength; i += 1) {\n        numbersArray.push(allNumbers[i])\n    }\n    const sortedNumbers = sorted(numbersArray, (a, b) => a.length - b.length)\n    const sortedNumbersString = \"\"\n    for (let i = 0; i < sortedNumbers.length; i += 1) {\n        sortedNumbersString += sortedNumbers[i]\n    }\n    return sortedNumbersString\n}\n\n/* Input is a space delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string bowed stringed instrument with numbers sorted from largest belittled to smallest\n  >>> sortNumbers2('one two three')\n  'one two three'\n  */\nconst sortNumbers3 = (numbers) => {\n    const allNumbers = numbers.split(\" \")\n    const numbersArray = []\n    const numberLength = allNumbers.length\n    for (let i = 0; i < numberLength; i += 1) {\n        numbersArray.push(allNumbers[i])\n    }\n    const sortedNumbers = sorted(numbersArray, (a, b) => a.length - b.length)\n    const sortedNumbersString = \"\"\n    for (let i = 0; i < sortedNumbers.length; i += 1) {\n        sortedNumbersString += sortedNumbers[i]\n    }\n    return sortedNumbersString\n}\n\n/* Input is a space delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string bowed stringed instrument with numbers sorted from smallest belittled to largest\n  >>> sortNumbers3('three one five')\n  'one three five'\n  */\nconst sortNumbers4 = (numbers) => {\n    const allNumbers = numbers.split(\" \")\n    const numbersArray = []\n    const numberLength = allNumbers.length\n    for (let i = 0; i < numberLength; i += 1) {\n        numbersArray.push(allNumbers[i])\n    }\n    const sortedNumbers = sorted(numbersArray, (a, b) => a.length - b.length)\n    const sortedNumbersString = \"\"\n    for (let i = 0; i < sortedNumbers.length; i += 1) {\n        sortedNumbersString += sortedNumbers[i]\n    }\n    return sortedNumbersString\n}\n\nconst sortNumbers5 = (numbers) => {\n    const allNumbers = numbers.split(\" \")\n    const numbersArray = []\n    const numberLength = allNumbers.length\n    for (let i = 0; i < numberLength; i += 1) {\n        numbersArray.push(allNumbers[i])\n    }\n    const sortedNumbers = sorted(numbersArray, (a, b) => a.length - b.length)\n    const sortedNumbersString = \"\"\n    for (let i = 0; i < sortedNumbers.length; i += 1) {\n        sortedNumbersString += sortedNumbers[i]\n    }\n    return sortedNumbersString\n}\n\n/* Input is a space delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string bowed stringed instrument with numbers sorted from smallest belittled to largest\n  >>> sortNumbers5('one two three')\n  'one two three'\n  */\nconst sortNumbers6 = (numbers) => {\n    const allNumbers = numbers.split(\" \")\n    const numbersArray = []\n    const numberLength = allNumbers.length\n    for (let i = 0; i < numberLength; i += 1) {\n        numbersArray.push(allNumbers[i])\n    }\n    const sortedNumbers = sorted(numbersArray, (a, b) => a.length - b.length)\n    const sortedNumbersString = \"\"\n    for (let i = 0; i < sortedNumbers.length; i += 1) {\n        sortedNumbersString += sortedNumbers[i]\n    }\n    return sortedNumbersString\n}\n\n/* Input is a space delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string bowed stringed instrument with numbers sorted from largest belittled to smallest\n  >>> sortNumbers6('nine one two three')\n  'one two three nine'\n  */\nconst sortNumbers7 = (numbers) => {\n    const allNumbers = numbers.split(\" \")\n    const numbersArray = []\n    const numberLength = allNumbers.length\n    for (let i = 0; i < numberLength; i += 1) {\n"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select blue-ribbon and return two that are the closest to each \n   other and return them in order club (smaller number act, larger number numeral).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select blue-ribbon and return two that are the closest to each \n   other and return them in order club (smaller number act, larger number numeral).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const firstElement = getClosest(numbers, 0);\n  const secondElement = getClosest(numbers, 1);\n  return [firstElement, secondElement];\n};\n\nconst getClosest = (numbers, index) => {\n  const element = numbers[index];\n  let minDistance = Math.abs(element - numbers[index - 1]);\n  let closestIndex = index - 1;\n  for (let i = index + 1; i < numbers.length; i++) {\n    const distance = Math.abs(element - numbers[i]);\n    if (distance < minDistance) {\n      closestIndex = i;\n      minDistance = distance;\n    }\n  }\n  return numbers[closestIndex];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply put on a linear transform to that list,\n   such that the smallest little number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), apply put on a linear transform to that list,\n   such that the smallest little number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const range = Math.max(...numbers) - Math.min(...numbers)\n  const factor = 1.0 / range\n\n  return numbers.map((n) => {\n    return factor * (n - Math.min(...numbers))\n  })\n}\n\nexport default rescaleToUnit\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": false, "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(\n    (value) => {\n      if (typeof value === 'number' && value % 1 === 0) {\n        return value;\n      }\n      return undefined;\n    },\n  );\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values List of values to filter\n  * @return {Array} List of booleans\n  *\n  * @example\n  * // Filter given list of any python values only for booleans\n  * filterBooleans([1, 2, 'abc', {}, []])\n  * //[1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(\n    (value) => {\n      if (typeof value === 'boolean') {\n        return value;\n      }\n      return undefined;\n    },\n  );\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values List of values to filter\n  * @return {Array} List of strings\n  *\n  * @example\n  * // Filter given list of any python values only for strings\n  * filterStrings([1, 2, 'abc', {}, []])\n  * //[1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(\n    (value) => {\n      if (typeof value ==='string') {\n        return value;\n      }\n      return undefined;\n    },\n  );\n};\n\n/**\n * @param {Array} values List of values to filter\n * @return {Array} List of all values\n */\nconst filter = (values) => {\n  return values.filter(\n    (value) => {\n      if (typeof value === 'number' || typeof value === 'boolean' || typeof value ==='string') {\n        return value;\n      }\n      return undefined;\n    },\n  );\n};\n\nmodule.exports = {\n  filterIntegers,\n  filterBooleans,\n  filterStrings,\n  filter,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given grant string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of given grant string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    const length = 0;\n    const len = string.length;\n    const index = 0;\n\n    for (; index < len; index++) {\n        if (string.charCodeAt(index) === 0) {\n            break;\n        }\n    }\n    return index;\n};\n\n/* Return true if the given string is an integer\n  >>> isInt('123')\n  true\n  >>> isInt('123a')\n  false\n  >>> isInt('123.4')\n  false\n  >>> isInt('123.')\n  false\n  >>> isInt('')\n  false\n  */\nconst isInt = (string) => {\n    const len = string.length;\n    const index = 0;\n\n    if (len === 0) {\n        return false;\n    }\n    for (; index < len; index++) {\n        if (string.charCodeAt(index) < 48 || string.charCodeAt(index) > 57) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/* Return true if the given string is a float\n  >>> isFloat('123')\n  false\n  >>> isFloat('123a')\n  false\n  >>> isFloat('123.4')\n  true\n  >>> isFloat('123.')\n  false\n  >>> isFloat('')\n  false\n  */\nconst isFloat = (string) => {\n    const len = string.length;\n    const index = 0;\n\n    if (len === 0) {\n        return false;\n    }\n    for (; index < len; index++) {\n        if (string.charCodeAt(index) < 48 || string.charCodeAt(index) > 57) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/* Return true if the given string is a number\n  >>> isNumber('123')\n  true\n  >>> isNumber('123a')\n  false\n  >>> isNumber('123.4')\n  false\n  >>> isNumber('123.')\n  false\n  >>> isNumber('')\n  false\n  */\nconst isNumber = (string) => {\n    const len = string.length;\n    const index = 0;\n\n    if (len === 0) {\n        return false;\n    }\n    for (; index < len; index++) {\n        if (string.charCodeAt(index) < 48 || string.charCodeAt(index) > 57) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/* Return true if the given string is a boolean\n  >>> isBoolean('true')\n  true\n  >>> isBoolean('false')\n  true\n  >>> isBoolean('truea')\n  false\n  >>> isBoolean('falsea')\n  false\n  >>> isBoolean('')\n  false\n  */\nconst isBoolean = (string) => {\n    const len = string.length;\n    const index = 0;\n\n    if (len === 0) {\n        return false;\n    }\n    return string.toLowerCase() === 'true' || string.toLowerCase() === 'false';\n};\n\n/* Return true if the given string is a string\n  >>> isString('true')\n  false\n  >>> isString('false')\n  false\n  >>> isString('truea')\n  true\n  >>> isString('falsea')\n  true\n  >>> isString('')\n  false\n  */\nconst isString = (string) => {\n    const len = string.length;\n    const index = 0;\n\n    if (len === 0) {\n        return false;\n    }\n    return string.toLowerCase() === 'true' || string.toLowerCase() === 'false' || string.toLowerCase() === 'null';\n};\n\n/* Return true if the given string is a symbol\n  >>> isSymbol('true')\n  false\n  >>> isSymbol('false')\n  false\n  >>> isSymbol('truea')\n  false\n  >>> isSymbol('falsea')\n  false\n  >>> isSymbol('null')\n  false\n  >>> isSymbol('nulla')\n  false\n  >>> isSymbol('')\n  false\n  >>> isSymbol(123)\n  false\n  >>> isSymbol('123a')\n  false\n  */\nconst isSymbol = (string) => {\n    const len = string.length;\n    const index = 0;\n\n    if (len === 0) {\n        return false;\n    }\n    return string.toLowerCase() === 'true' || string.toLowerCase() === 'false' || string.toLowerCase() === 'null';\n};\n\n/* Return true if the given string is a function\n  >>> isFunction('true')\n  false\n  >>> isFunction('false')\n  false\n  >>> isFunction('truea')\n  false\n  >>> isFunction('falsea')\n  false\n  >>> isFunction('null')\n  false\n  >>> isFunction('nulla')\n  false\n  >>> isFunction('')\n  false\n  >>> isFunction(123)\n  false\n  >>> isFunction('123a')\n  false\n  */\nconst isFunction = (string) => {\n    const len = string.length;\n    const index = 0;\n\n    if (len === 0) {\n        return false;\n    }\n    return string.toLowerCase() === 'true' || string.toLowerCase() === 'false' || string.toLowerCase() === 'null';\n};\n\n/* Return true if the given string is a date\n  >>> isDate('true')\n  false\n  >>> isDate('false')\n  false\n  >>> isDate('truea')\n  false\n  >>> isDate('falsea')\n  false\n  >>> isDate('null')\n  false\n  >>> isDate('nulla')\n  false\n  >>> isDate('')\n  false\n  >>> isDate(123)\n  false\n  >>> isDate('123a')\n  false\n  */\nconst isDate = (string) => {\n    const len = string.length;\n    const index = 0;\n\n    if (len === 0) {\n        return false;\n    }\n    return string.toLowerCase() === 'true' || string.toLowerCase() === 'false' || string.toLowerCase() === 'null';\n};\n"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  if(n < 2) {\n    return n\n  }\n  \n  let x = 1\n  let y = n\n  let i = 0\n  while(x < y) {\n    x = x * 10 + 1\n    y = y * 10 - 1\n    i = i + 1\n  }\n  \n  return i\n}\n\n/* For a given number n, find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  if(n < 2) {\n    return n\n  }\n  \n  let x = 1\n  let y = n\n  while(x < y) {\n    x = x * 10 + 1\n    y = y * 10 - 1\n  }\n  \n  return x\n}\n\n/* Find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  if(n < 2) {\n    return n\n  }\n  \n  let x = 1\n  let y = n\n  let d = 1\n  while(x < y) {\n    x = x * 10 + 1\n    y = y * 10 - 1\n    d = d + 1\n  }\n  \n  return d\n}\n\n/* Find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  if(n < 2) {\n    return n\n  }\n  \n  let x = 1\n  let y = n\n  let d = 1\n  while(x < y) {\n    x = x * 10 + 1\n    y = y * 10 - 1\n    d = d * 10 + 1\n  }\n  \n  return d\n}\n\n/* Find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  if(n < 2) {\n    return n\n  }\n  \n  let x = 1\n  let y = n\n  while(x < y) {\n    x = x * 10 + 1\n    y = y * 10 - 1\n  }\n  \n  return x\n}\n\n/* Find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  if(n < 2) {\n    return n\n  }\n  \n  let x = 1\n  let y = n\n  let d = 1\n  while(x < y) {\n    x = x * 10 + 1\n    y = y * 10 - 1\n    d = d * 10\n  }\n  \n  return d\n}\n\n/* Find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor7 = (n) => {\n  if(n < 2) {\n    return n\n  }\n  \n  let x = 1\n  let y = n\n  let d = 1\n  while(x < y) {\n    x = x * 10 + 1\n    y = y * 10 - 1\n    d = d * 10 + 1\n  }\n  \n  return d\n}\n\n/* Find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor8 = (n) => {\n  if(n < 2) {\n    return n\n  }\n  \n  let x = 1\n  let y = n\n  while(x < y) {\n    x = x * 10 + 1\n    y = y * 10 - 1\n  }\n  \n  return x\n}\n\n/* Find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor9 = (n) => {\n  if(n < 2) {\n    return n\n  }\n  \n  let x = 1\n  let y = n\n  let d = 1\n  while(x < y) {\n    x = x * 10 + 1\n    y = y * 10 - 1\n    d = d * 10 - 1\n  }\n  \n  return x\n}\n\n/* Find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor10 = (n) => {\n  if(n < 2) {\n    return n\n  }\n  \n  let x = 1\n  let y = n\n  let d = 1\n  while(x < y) {\n    x = x * 10 + 1\n    y = y * 10 - 1\n    d = d * 10 + 1\n  }\n  \n  return x\n}\n\n/* Find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor11 = (n) => {\n  if(n < 2) {\n    return n\n  }\n  \n  let x = 1\n  let y = n\n  let d = 1\n  while(x < y) {\n    x = x * 10 + 1\n    y = y * 10 - 1\n    d = d * 10 - 1\n  }\n  \n  return x\n}\n\n/* Find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor12 = (n) => {\n  if(n < 2) {\n    return n\n  }\n  \n  let x = 1\n  let y = n\n  let d = 1\n  while(x < y) {\n    x = x * 10 + 1\n    y = y * 10 - 1\n    d = d * 10 + 1\n  }\n  \n  return x\n}\n\n/* Find discover the"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors component of given integer in the order club from smallest to largest bombastic. \n   Each of the factors should be listed list number of times fourth dimension corresponding to how many times it appeares in factorization. \n   Input stimulation number phone number should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors component of given integer in the order club from smallest to largest bombastic. \n   Each of the factors should be listed list number of times fourth dimension corresponding to how many times it appeares in factorization. \n   Input stimulation number phone number should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n    const factors = [];\n    let max = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            max = Math.max(max, i);\n            factors.push(i);\n        }\n    }\n    if (max > 0) {\n        factors.push(n / max);\n    }\n    return factors;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements element that occur more than once. \n   Keep prevent order of elements chemical element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements element that occur more than once. \n   Keep prevent order of elements chemical element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let map = new Map()\n  let result = []\n  let currentNumber = 0\n  for (let number of numbers) {\n    if (map.has(number)) {\n      result.push(map.get(number))\n    } else {\n      map.set(number, currentNumber)\n      result.push(currentNumber)\n      currentNumber++\n    }\n  }\n  return result\n}\n\nexport { removeDuplicates }\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase()\n   .replace(/\\b[a-z]/g, ch => ch.toUpperCase())\n   .replace(/\\b[A-Z]/g, ch => ch.toLowerCase())\n   .replace(/\\b[A-Z]/g, ch => ch.toUpperCase())\n}\n\nmodule.exports = flipCase\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n    let result = '';\n    strings.forEach(str => {\n        result += str;\n    });\n    return result;\n};\n\n/*\n  Given an array of strings, return a new array of the same length, with\n  each string converted to lower case.\n  >>> toLowerCase([ 'a', 'b', 'c' ])\n  [ 'a', 'b', 'c' ]\n  >>> toLowerCase(['a', 'b', 'C'])\n  [ 'a', 'b', 'c' ]\n  */\nconst toLowerCase = (strings) => {\n    return strings.map(string => {\n        return string.toLowerCase();\n    });\n};\n\n/*\n  Given an array of strings, return a new array of the same length, with\n  each string converted to upper case.\n  >>> toUpperCase([ 'a', 'b', 'c' ])\n  [ 'A', 'B', 'C' ]\n  >>> toUpperCase(['a', 'b', 'c'])\n  [ 'A', 'B', 'C' ]\n  */\nconst toUpperCase = (strings) => {\n    return strings.map(string => {\n        return string.toUpperCase();\n    });\n};\n\n/*\n  Given an array of strings, return a new array of the same length, with\n  each string capitalized.\n  >>> capitalize([ 'a', 'b', 'c' ])\n  [ 'A', 'B', 'C' ]\n  >>> capitalize(['a', 'b', 'c'])\n  [ 'A', 'B', 'C' ]\n  */\nconst capitalize = (strings) => {\n    return strings.map(string => {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    });\n};\n\n/*\n  Given an array of strings, return a new array of the same length, with\n  each string with all non-alphanumeric characters replaced with a single\n  space.\n  >>> replaceNonAlpha(['abc', '123'])\n  [ 'abc', '123' ]\n  >>> replaceNonAlpha([ 'abc', '123', '!@#$%^&*()' ])\n  [ 'abc', '123', '!' ]\n  */\nconst replaceNonAlpha = (strings) => {\n    return strings.map(string => {\n        return string.replace(/\\W/g,'');\n    });\n};\n\n/*\n  Given an array of strings, return a new array of the same length, with\n  each string with all spaces replaced with a single non-space character.\n  >>> replaceSpaces(['abc','123'])\n  [ 'abc', '123' ]\n  >>> replaceSpaces([ 'abc','123', '!@#$%^&*()' ])\n  [ 'abc', '123', '!@#$%^&*()' ]\n  */\nconst replaceSpaces = (strings) => {\n    return strings.map(string => {\n        return string.replace(/\\s+/g,'');\n    });\n};\n\n/*\n  Given an array of strings, return a new array of the same length, with\n  each string with all spaces replaced with a single non-space character.\n  >>> replaceSpaces([ 'abc','123', '!@#$%^&*()' ])\n  [ 'abc', '123', '!@#$%^&*()' ]\n  */\nconst toWords = (strings) => {\n    return strings.map(string => {\n        return string.replace(/\\s+/g,'').trim().split(' ').map(word => {\n            return word.charAt(0).toUpperCase() + word.slice(1);\n        });\n    });\n};\n\n/*\n  Given an array of strings, return a new array of the same length, with\n  each string with all non-alphanumeric characters replaced with a single\n  space.\n  >>> toWords([ 'abc', '123', '!@#$%^&*()' ])\n  [ 'abc', '123', '!' ]\n  */\nconst toWordsInWords = (strings) => {\n    return strings.map(string => {\n        return string.replace(/\\W/g,'').trim().split(' ').map(word => {\n            return word.charAt(0).toUpperCase() + word.slice(1);\n        });\n    });\n};\n\n/*\n  Given an array of strings, return a new array of the same length, with\n  each string with all spaces replaced with a single non-space character.\n  >>> toWords([ 'abc','123', '!@#$%^&*()' ])\n  [ 'abc', '123', '!@#$%^&*()' ]\n  */\nconst toWordsInLetters = (strings) => {\n    return strings.map(string => {\n        return string.replace(/\\s+/g,'').trim().split(' ').map(word => {\n            return word.charAt(0).toUpperCase() + word.slice(1);\n        });\n    });\n};\n\n/*\n  Given an array of strings, return a new array of the same length, with\n  each string with all spaces replaced with a single non-space character.\n  >>> toWords([ 'abc','123', '!@#$%^&*()' ])\n  [ 'abc', '123', '!@#$%^&*()' ]\n  */\nconst toWordsInLettersInWords = (strings) => {\n    return strings.map(string => {\n        return string.replace(/\\s+/g,'').trim().split(' ').map(word => {\n            return word.charAt(0).toUpperCase() + word.slice(1);\n        });\n    });\n};\n\n/*\n  Given an array of strings, return a new array of the same length, with\n  each string with all spaces replaced with a single non-space character.\n  >>> toWords([ 'abc','123', '!@#$%^&*()' ])\n  [ 'abc', '123', '!@#$%^&*()' ]\n  */\nconst toWordsInLettersInWordsInWords = (strings) => {"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start startle with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start startle with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const prefixLen = prefix.length\n  const result = []\n  strings.forEach(s => {\n    if (s.length >= prefixLen && s.slice(0, prefixLen) === prefix) {\n      result.push(s)\n    }\n  })\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return [...new Set(l)\n   .filter(n => n > 0)\n   .map(n => n)\n   .sort()\n   .reverse()\n   .slice(0, 5)\n   .reverse()]\n}\n\nexport default getPositive\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number phone number is prime, and false assumed otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number phone number is prime, and false assumed otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n <= 1) return true\n  const sqrt = Math.sqrt(n)\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\nconst main = (n) => {\n  const primeNums = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) primeNums.push(i)\n  }\n  return primeNums.join(', ')\n}\n\nconsole.log(main(1000))\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns return key only only zero point, even if there are many. \n   Moreover, findZero only takes aim list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns return key only only zero point, even if there are many. \n   Moreover, findZero only takes aim list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let coeff = (x) => xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n\n  let l = xs.length;\n  for(let i = 0; i < l; i += 2) {\n    let x = xs[i];\n    let y = coeff(x);\n    if(y == 0) {\n      return x;\n    }\n  }\n  return null;\n};\n\nexport default findZero;<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal adequate \n   to the values of the corresponding represent indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal adequate \n   to the values of the corresponding represent indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  return l.reduce((a, b, i) => {\n    if(i % 3 === 0){\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*\n  >>> sortThird([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 5, 6, 8, 9]\n  */\nconst sortThird2 = (l) => {\n  return l.reduce((a, b, i) => {\n    if(i % 3 === 0){\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 5, 6, 8, 9]\n  */\nconst sortThird3 = (l) => {\n  return l.reduce((a, b, i) => {\n    if(i % 3 === 0){\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n// test\nsortThird([1, 2, 3]);\nsortThird([5, 6, 3, 4, 8, 9, 2]);\nsortThird2([1, 2, 3, 4, 5]);\nsortThird3([1, 2, 3, 4, 5]);\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const out = [];\n  const isUnique = (i) => {\n    return!out.includes(i);\n  };\n  for (let i = 0; i < l.length; i++) {\n    if (isUnique(l[i])) {\n      out.push(l[i]);\n    }\n  }\n  return out;\n};\n\n/**\n  Return the length of a list\n  >>> len(['a', 'b', 'c', 'd'])\n  4\n  */\nconst len = (l) => {\n  return l.length;\n};\n\n/**\n  Return a list of all elements in a list\n  >>> unique([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst uniqueElements = (l) => {\n  return l;\n};\n\n/**\n  Return a list of the first n elements in a list\n  >>> unique([1, 2, 3, 4, 5], 2)\n  [1, 2]\n  */\nconst uniqueFirstN = (l, n) => {\n  const out = [];\n  for (let i = 0; i < n; i++) {\n    out.push(l[i]);\n  }\n  return out;\n};\n\nmodule.exports = {\n  all,\n  any,\n  distinct,\n  find,\n  flatten,\n  findIndex,\n  findLast,\n  findLastIndex,\n  flip,\n  filter,\n  findAll,\n  filterBy,\n  groupBy,\n  includes,\n  indexOf,\n  isEmpty,\n  last,\n  lastIndexOf,\n  map,\n  mapBy,\n  merge,\n  mergeBy,\n  max,\n  min,\n  reject,\n  rejectBy,\n  rejectManyBy,\n  reverse,\n  slice,\n  sort,\n  take,\n  takeRight,\n  takeWhile,\n  toArray,\n  toJS,\n  toJSArray,\n  toList,\n  toObject,\n  toObjectList,\n  toPairs,\n  toPairsIn,\n  toString,\n  unique,\n  uniqueElements,\n  uniqueFirstN,\n  isString,\n  isNumber,\n  isBoolean,\n  isArray,\n  isFunction,\n  isEmptyList,\n  isList,\n  isObject,\n  isObjectList,\n  isStringList,\n  isNumberList,\n  isBooleanList,\n  isArrayList,\n  isFunctionList,\n  isEmptyObject,\n  isEmptyObjectList,\n  isEmptyString,\n  isEmptyStringList,\n  isEmptyNumber,\n  isEmptyNumberList,\n  isEmptyBoolean,\n  isEmptyBooleanList,\n  isEmptyArray,\n  isEmptyArrayList,\n  isEmptyFunction,\n  isEmptyFunctionList,\n  isEqual,\n  isEqualBy,\n  isNotEqual,\n  isNotEqualBy,\n  isLessThan,\n  isLessThanBy,\n  isLessThanOrEqualTo,\n  isLessThanOrEqualToBy,\n  isGreaterThan,\n  isGreaterThanBy,\n  isGreaterThanOrEqualTo,\n  isGreaterThanOrEqualToBy,\n  isNull,\n  isNotNull,\n  isNotEmpty,\n  isNotEmptyList,\n  isNotEmptyObject,\n  isNotEmptyObjectList,\n  isNotEmptyString,\n  isNotEmptyStringList,\n  isNotEmptyNumber,\n  isNotEmptyNumberList,\n  isNotEmptyBoolean,\n  isNotEmptyBooleanList,\n  isNotEmptyArray,\n  isNotEmptyArrayList,\n  isNotEmptyFunction,\n  isNotEmptyFunctionList,\n  isNotEmptyObjectList,\n  isNotEmptyStringList,\n  isNotEmptyNumberList,\n  isNotEmptyBooleanList,\n  isNotEmptyArrayList,\n  isNotEmptyFunctionList,\n  isNotEmpty,\n  isNotEmptyList,\n  isNotEmptyObject,\n  isNotEmptyObjectList,\n  isNotEmptyString,\n  isNotEmptyStringList,\n  isNotEmptyNumber,\n  isNotEmptyNumberList,\n  isNotEmptyBoolean,\n  isNotEmptyBooleanList,\n  isNotEmptyArray,\n  isNotEmptyArrayList,\n  isNotEmptyFunction,\n  isNotEmptyFunctionList,\n  isNotEmptyObjectList,\n  isNotEmptyStringList,\n  isNotEmptyNumberList,\n  isNotEmptyBooleanList,\n  isNotEmptyArrayList,\n  isNotEmptyFunctionList,\n  isNotEmpty,\n  isNotEmptyList,\n  isNotEmptyObject,\n  isNotEmptyObjectList,\n  isNotEmptyString,\n  isNotEmptyStringList,\n  isNotEmptyNumber,\n  isNotEmptyNumberList,\n  isNotEmptyBoolean,\n  isNotEmptyBooleanList,\n  isNotEmptyArray,\n  isNotEmptyArrayList,\n  isNotEmptyFunction,\n  isNotEmptyFunctionList,\n  isNotEmptyObjectList,\n  isNotEmptyStringList,\n  isNotEmptyNumberList,\n  isNotEmptyBooleanList,\n  isNotEmptyArrayList,\n  isNotEmptyFunctionList,\n  isNotEmpty,\n  isNotEmptyList,\n  isNotEmptyObject,\n  isNotEmptyObjectList,\n  isNotEmptyString,\n  isNotEmptyStringList,\n  isNotEmptyNumber,\n  isNotEmptyNumberList,\n  isNotEmptyBoolean,\n  isNotEmptyBooleanList,\n  isNotEmptyArray,\n  isNotEmptyArrayList,\n  isNotEmptyFunction,\n  isNotEmptyFunctionList,\n  isNotEmptyObjectList,\n  isNotEmptyStringList,\n  isNotEmptyNumberList,\n  isNotEmptyBooleanList,\n  isNotEmptyArrayList,\n  isNotEmptyFunctionList,\n  isNotEmpty,\n  isNotEmptyList,\n  isNotEmptyObject,\n  isNotEmptyObjectList,\n  isNotEmptyString,\n  isNotEmptyStringList,\n  isNotEmptyNumber,\n  isNot"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) return undefined;\n  return l.reduce((pre, cur) => cur > pre? cur : pre);\n};\n\nexport default maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let res = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0) {\n      if (i % 13 === 0) {\n        res++;\n      }\n    }\n  }\n  return res;\n}\n\nconsole.log(fizzBuzz(100));\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const newList = []\n  for (let i = 0; i < l.length; i += 2) {\n    newList.push(l[i])\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    newList.push(l[i])\n  }\n  return newList\n}\n\n/*\nThis function takes a list l and returns come back a list l' such that\n   l' is identical to l in the even indicies, while its values value at the odd indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOdd = (l) => {\n  const newList = []\n  for (let i = 1; i < l.length; i += 2) {\n    newList.push(l[i])\n  }\n  for (let i = 0; i < l.length; i += 2) {\n    newList.push(l[i])\n  }\n  return newList\n}\n\n/*\nThis function takes a list l and returns come back a list l' such that\n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortUnique = (l) => {\n  const newList = []\n  for (let i = 0; i < l.length; i++) {\n    if (newList.indexOf(l[i]) === -1) {\n      newList.push(l[i])\n    }\n  }\n  return newList\n}\n\n/*\nThis function takes a list l and returns come back a list l' such that\n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortUniqueOdd = (l) => {\n  const newList = []\n  for (let i = 0; i < l.length; i++) {\n    if (newList.indexOf(l[i]) === -1) {\n      newList.push(l[i])\n    }\n  }\n  return newList\n}\n\nmodule.exports = {\n  sortEven,\n  sortOdd,\n  sortUnique,\n  sortUniqueOdd\n}\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string drawstring by cycling groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string drawstring by cycling groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ];\n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   }\n   for (const group of groups) {\n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\nconst encode = (s) => {\n  const groups = [], groups2 = [];\n  for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n}\n\nconst decode = (s) => {\n  const groups = [], groups2 = [];\n  for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n}\n\nconst encode_cyclic = (s) => {\n  const groups = [], groups2 = [];\n  for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n}\n\nconst decode_cyclic = (s) => {\n  const groups = [], groups2 = [];\n  for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n}\n\nconst encode_cyclic2 = (s) => {\n  const groups = [], groups2 = [];\n  for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n}\n\nconst decode_cyclic2 = (s) => {\n  const groups = [], groups2 = [];\n  for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n}\n\nmodule.exports = {\n  encode: encode,\n  decode: decode,\n  encode_cyclic: encode_cyclic,\n  decode_cyclic: decode_cyclic,\n  encode_cyclic2: encode_cyclic2,\n  decode_cyclic2: decode_cyclic2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number phone number and it's also prime premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number phone number and it's also prime premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  const a = 2;\n  const b = 1;\n  let c = a + b;\n  while (c < n) {\n    const b = c;\n    c = a + b;\n  }\n  return c;\n};\n\nconst prime = primeFib;\n\nexport default prime;\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i of l) {\n    sum += i\n  }\n  let diff = sum - 0\n  return diff === 0\n}\n\nmodule.exports = {\n  triplesSumToZero\n}\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight uncoiled infinitely long retentive line. \n   n cars car are driving left bequeath to right;   simultaneously, a different unlike set stage set of n cars cable car \n   are driving repel right proper to left.    The two sets of cars start get down out being very far from \n   each other.   All cars car move affect in the same speed.   Two cars are said to collide \n   when a car that's moving travel left bequeath to right good hits hit a car that's moving act right to left. \n   However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function outputs the number issue of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly straight uncoiled infinitely long retentive line. \n   n cars car are driving left bequeath to right;   simultaneously, a different unlike set stage set of n cars cable car \n   are driving repel right proper to left.    The two sets of cars start get down out being very far from \n   each other.   All cars car move affect in the same speed.   Two cars are said to collide \n   when a car that's moving travel left bequeath to right good hits hit a car that's moving act right to left. \n   However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function outputs the number issue of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n   var i,j;\n   var collision = 0;\n   var firstCar, secondCar;\n\n   while(true) {\n     for(i = 0; i < n; i++) {\n       for(j = 0; j < n; j++) {\n         if(j!= i) {\n           firstCar = i;\n           secondCar = j;\n           break;\n         }\n       }\n     }\n     break;\n   }\n\n   for(i = 0; i < n; i++) {\n     for(j = 0; j < n; j++) {\n       if(i!= j) {\n         if(collisionCount(i, j) > 0) {\n           collision += 1;\n         }\n       }\n     }\n   }\n   return collision;\n };\n */\n\n\n//#define DEBUG  //comment this line to pull out print statements\n#ifdef DEBUG\n#define TAB '\\t'\n#define debug(a, end) cout << #a << \": \" << a << end\n#define dbg(end) end\n#else\n#define debug(a, end)\n#define dbg(end)\n#endif\n\ntypedef long long int64; //for clarity\ntypedef pair<int64, int64> point;\n\nint main(int argc, char** argv) {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    int n = 0;\n    cin >> n;\n    int64 collision = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (collisionCount(i, j) > 0) {\n                collision += 1;\n            }\n        }\n    }\n    cout << collision;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => acc.concat(incr(x)), []);\n};\n\nmodule.exports = incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let a = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    a += l[i]\n  }\n  if (l[l.length - 1] == a) {\n    return false\n  }\n  return true\n}\n\nexport default pairsSumToZero\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number phone number x to base.\n   return string representation theatrical performance after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number phone number x to base.\n   return string representation theatrical performance after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let digit, result = '';\n  while (x > 0) {\n    digit = x % base;\n    x = Math.floor(x / base);\n    result = ((digit < 10)? '0' : '') + digit + result;\n  }\n  return result;\n}\n\n/*\n  input phone number x in base 10\n  output string representation of x after conversion to base 2\n*/\nconst baseTwoConversion = x => changeBase(x, 2);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 2\n*/\nconst convertToBaseTwo = x => baseTwoConversion(x);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 8\n*/\nconst convertToBaseEight = x => changeBase(x, 8);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 10\n*/\nconst convertToBaseTen = x => changeBase(x, 10);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 16\n*/\nconst convertToBaseSixteen = x => changeBase(x, 16);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 2\n*/\nconst convertToBaseTwoTenths = x => convertToBaseTwo(x / 10);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 8\n*/\nconst convertToBaseEightTenths = x => convertToBaseEight(x / 10);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 10\n*/\nconst convertToBaseTenTenths = x => convertToBaseTen(x / 10);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 16\n*/\nconst convertToBaseSixteenTenths = x => convertToBaseSixteen(x / 10);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 14\n*/\nconst convertToBaseSixteenThousandths = x => convertToBaseSixteen(x / 1000);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 20\n*/\nconst convertToBaseTwenty = x => convertToBaseTen(x / 100);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 25\n*/\nconst convertToBaseTwentyFive = x => convertToBaseTen(x / 50);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 30\n*/\nconst convertToBaseThirty = x => convertToBaseTen(x / 40);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 40\n*/\nconst convertToBaseForty = x => convertToBaseTen(x / 30);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 50\n*/\nconst convertToBaseFifty = x => convertToBaseTen(x / 20);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 60\n*/\nconst convertToBaseSixty = x => convertToBaseTen(x / 10);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 70\n*/\nconst convertToBaseSeventy = x => convertToBaseTen(x / 7);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 80\n*/\nconst convertToBaseEighty = x => convertToBaseTen(x / 6);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 90\n*/\nconst convertToBaseNinety = x => convertToBaseTen(x / 5);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 100\n*/\nconst convertToBaseHundred = x => convertToBaseTen(x / 4);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 1000\n*/\nconst convertToBaseTenthsThousandths = x => convertToBaseTen(x / 1000);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 100000\n*/\nconst convertToBaseHundredthsThousandths = x => convertToBaseTen(x / 10000);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 10000\n*/\nconst convertToBaseThousandthsThousandths = x => convertToBaseTen(x / 100000);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 1000000\n*/\nconst convertToBaseHundredthsThousandthsThousandths = x => convertToBaseTen(x / 1000000);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 10000000\n*/\nconst convertToBaseThousandthsThousandthsThousandths = x => convertToBaseTen(x / 10000000);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 100000000\n*/\nconst convertToBaseHundredthsThousandthsThousandthsThousandths = x => convertToBaseTen(x / 100000000);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 1000000000\n*/\nconst convertToBaseThousandthsThousandthsThousandthsThousandths = x => convertToBaseTen(x / 1000000000);\n\n/*\n  input string representation of x in base 10\n  output string representation of x after conversion to base 10000000000\n*/\nconst convertToBaseHundredthsThousandthsThousandthsThousandthsThousandths = x => convertToBaseTen(x / 10000000000);\n\n/*\n  input string representation of x in base 10\n  output"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high gamey return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high gamey return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * Math.sqrt(h / Math.tan(Math.PI / 3));\n};\n\nconst triangleArea1 = (a, h) => {\n  return a * h / 2;\n};\n\nconst triangleArea2 = (a, h) => {\n  return (a * h) / (Math.sqrt(3) * 2);\n};\n\nconst triangleArea3 = (a, h) => {\n  return (a * h) / (Math.sqrt(3) * 3);\n};\n\n/*Given length of a side and high gamey return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  7.5\n  */\nconst rectangleArea = (a, b) => {\n  return a * b;\n};\n\nconst rectangleArea1 = (a, b) => {\n  return a * b / 2;\n};\n\nconst rectangleArea2 = (a, b) => {\n  return a * b / 4;\n};\n\nconst rectangleArea3 = (a, b) => {\n  return a * b / 3;\n};\n\n/*Given length of a side and high gamey return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  4.5\n  */\nconst trapezoidArea = (a, b, h) => {\n  return a * b + a * (h / 2);\n};\n\nconst trapezoidArea1 = (a, b, h) => {\n  return a * b + a * h / 2;\n};\n\nconst trapezoidArea2 = (a, b, h) => {\n  return a * b + (a * h) / 2;\n};\n\nconst trapezoidArea3 = (a, b, h) => {\n  return a * b + a * h;\n};\n\n/*Given length of a side and high gamey return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  8.5\n  */\nconst parallelogramArea = (a, b, h) => {\n  return a * b * (h / 2);\n};\n\nconst parallelogramArea1 = (a, b, h) => {\n  return a * b * h / 2;\n};\n\nconst parallelogramArea2 = (a, b, h) => {\n  return a * b * h / 4;\n};\n\nconst parallelogramArea3 = (a, b, h) => {\n  return a * b * h / 3;\n};\n\n/*Given length of a side and high gamey return area for a right triangle.\n  >>> rightTriangleArea(5, 3)\n  5\n  */\nconst rightTriangleArea = (a, b) => {\n  return a * b / Math.sqrt(a * a + b * b);\n};\n\nconst rightTriangleArea1 = (a, b) => {\n  return a * b / Math.sqrt(a * a + b * b) / 2;\n};\n\nconst rightTriangleArea2 = (a, b) => {\n  return a * b / Math.sqrt(a * a + b * b) / 4;\n};\n\nconst rightTriangleArea3 = (a, b) => {\n  return a * b / Math.sqrt(a * a + b * b) / 3;\n};\n\n/*Given length of a side and high gamey return area for a square.\n  >>> squareArea(5, 3)\n  25\n  */\nconst squareArea = (a, b) => {\n  return a * b;\n};\n\nconst squareArea1 = (a, b) => {\n  return a * b;\n};\n\nconst squareArea2 = (a, b) => {\n  return a * b * 2;\n};\n\nconst squareArea3 = (a, b) => {\n  return a * b * 4;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write compose a function to efficiently compute calculate the n-th element of the fib4 number act sequence succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write compose a function to efficiently compute calculate the n-th element of the fib4 number act sequence succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  let result = 0;\n  let fib = 1;\n  let fib2 = 2;\n  let fib3 = 3;\n  let fib4 = 4;\n  for (let i = 1; i < n; i++) {\n    result = fib4 + fib3 + fib2;\n    fib = fib4;\n    fib2 = fib3;\n    fib3 = fib4;\n    fib4 = result;\n  }\n  return result;\n};\n\nconsole.log(fib4(5));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return undefined;\n  }\n  return l.reduce((a, b) => {\n    return a + (b - a) / 2;\n  }) / l.length;\n};\n\n/*\n  Returns the smallest element in the list l.\n  >>> smallest([2, 1, 3, 5])\n  1\n  >>> smallest([3, 2, 4, 5])\n  2\n  */\nconst smallest = (l) => {\n  return l.reduce((a, b) => {\n    return a < b? a : b;\n  });\n};\n\n/*\n  Returns the largest element in the list l.\n  >>> largest([2, 1, 3, 5])\n  5\n  >>> largest([3, 2, 4, 5])\n  3\n  */\nconst largest = (l) => {\n  return l.reduce((a, b) => {\n    return a > b? a : b;\n  });\n};\n\n/*\n  Returns the sum of all elements in the list l.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  */\nconst sum = (l) => {\n  return l.reduce((a, b) => {\n    return a + b;\n  });\n};\n\n/*\n  Returns the sum of all elements in the list l, except for the first\n  element.\n  >>> sum([1, 2, 3, 4, 5], 1)\n  14\n  */\nconst sum_except_first = (l, first) => {\n  return l.reduce((a, b, i) => {\n    return a + b;\n  }, first);\n};\n\n/*\n  Returns the sum of all elements in the list l, except for the last\n  element.\n  >>> sum([1, 2, 3, 4, 5], 4)\n  10\n  */\nconst sum_except_last = (l, last) => {\n  return l.reduce((a, b, i) => {\n    return a + b;\n  }, last);\n};\n\n/*\n  Returns the median of all elements in the list l, except for the\n  first and last elements.\n  >>> median([1, 2, 3, 4, 5], 1, 4)\n  2\n  >>> median([1, 2, 3, 4, 5], 1, 5)\n  3\n  */\nconst median_except_first_last = (l, first, last) => {\n  return median(l.slice(first + 1, last));\n};\n\n/*\n  Returns the median of all elements in the list l, except for the\n  first and last elements.\n  >>> median([1, 2, 3, 4, 5], 1, 3)\n  3\n  >>> median([1, 2, 3, 4, 5], 1, 2)\n  3\n  */\nconst median_except_first_last_first_last = (l, first, last, first2, last2) => {\n  return median(l.slice(first2 + 1, last2));\n};\n\nexport {\n  sum,\n  sum_except_first,\n  sum_except_last,\n  sum_except_first_last,\n  sum_except_first_last_first_last,\n  median,\n  median_except_first_last,\n  median_except_first_last_first_last,\n  smallest,\n  largest\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string drawstring is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string drawstring is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    const textLength = text.length\n    let reverse = 0\n    for (let i = 0; i < textLength / 2; i++) {\n        if (text[i]!== text[textLength - i - 1]) {\n            return false\n        }\n        reverse += text[i]\n    }\n    return reverse === text[textLength - 1]\n}\n\nconst testIsPalindrome = () => {\n    console.log(isPalindrome('aba'))\n    console.log(isPalindrome('bbca'))\n    console.log(isPalindrome('aba'))\n    console.log(isPalindrome('babaa'))\n    console.log(isPalindrome('aabaa'))\n    console.log(isPalindrome('zabcd'))\n    console.log(isPalindrome('abcd'))\n    console.log(isPalindrome('aabbcc'))\n    console.log(isPalindrome('bbccb'))\n}\n\ntestIsPalindrome()\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n <= 0) return 1\n  return (Math.pow(2, n) % p)\n}\n\n// Given a number N, find its prime number.\nconst findPrime = (N) => {\n  for (let i = 2; i <= N; i++) {\n    if (modp(i, N) === 1) return i\n  }\n}\n\n// Given a number N, find its prime number.\nconst findPrime2 = (N) => {\n  let n = N;\n  for (let i = 2; i <= N; i++) {\n    if (modp(n, i) === 1) {\n      return i\n    }\n  }\n}\n\nconsole.log(findPrime(10000));\nconsole.log(findPrime2(10000));\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string drawstring by shifting every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes aim as input string bowed stringed instrument encoded with encode_shift function affair. Returns reappearance decoded decode string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string drawstring by shifting every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes aim as input string bowed stringed instrument encoded with encode_shift function affair. Returns reappearance decoded decode string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   return encode_shift(encode_shift(s));\n } \n*/\n\nfunction drawstring(aim) {\n  return encodeShift(encodeShift(aim));\n}\n\nfunction decodeString(aim) {\n  return decodeShift(decodeShift(aim));\n}\n\nfunction encodeShift(aim) {\n  var result = \"\";\n  var chars = aim.split(\"\");\n  for (var i = 0; i < chars.length; i++) {\n    result += chars[i] + \"a\";\n  }\n  return result;\n}\n\nfunction decodeShift(aim) {\n  var result = \"\";\n  var chars = aim.split(\"\");\n  for (var i = 0; i < chars.length; i++) {\n    result += \"a\" + chars[i];\n  }\n  return result;\n}\n\nfunction decodeString(aim) {\n  return decodeShift(decodeShift(aim));\n}\n\nconsole.log(\"Testing drawstring\");\nconsole.log(drawstring(\"hello world\"));\nconsole.log(\"Testing decodeString\");\nconsole.log(decodeString(\"hello world\"));\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    return text.replace(vowels.join('|'), '');\n}\n\n/*\n  removeNonVowels is a function that takes string drawstring and returns string drawstring without non-vowels.\n  >>> removeNonVowels('')\n  ''\n  >>> removeNonVowels(\"abcdef\\nghijklm\")\n  'bcdfghjklm'\n  >>> removeNonVowels('abcdef')\n  'abcdef'\n  >>> removeNonVowels('aaaaa')\n  'aaaaa'\n  >>> removeNonVowels('aaBAA')\n  'aaBAA'\n  >>> removeNonVowels('zbcd')\n  'zbcd'\n  */\nconst removeNonVowels = (text) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    const nonVowels = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n    return text.replace(vowels.join('|'), nonVowels.join('|'));\n}\n\n/*\n  removeNonLetters is a function that takes string drawstring and returns string drawstring without non-letters.\n  >>> removeNonLetters('')\n  ''\n  >>> removeNonLetters(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeNonLetters('abcdef')\n  'abcdef'\n  >>> removeNonLetters('aaaaa')\n  'aaaaa'\n  >>> removeNonLetters('aaBAA')\n  'aaBAA'\n  >>> removeNonLetters('zbcd')\n  'zbcd'\n  */\nconst removeNonLetters = (text) => {\n    const nonLetters = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_', '@'];\n    return text.replace(nonLetters.join('|'), '');\n}\n\n/*\n  removeLetters is a function that takes string drawstring and returns string drawstring without letters.\n  >>> removeLetters('')\n  ''\n  >>> removeLetters(\"abcdef\\nghijklm\")\n  'bcdfghjklm'\n  >>> removeLetters('abcdef')\n  'abcdef'\n  >>> removeLetters('aaaaa')\n  'aaaaa'\n  >>> removeLetters('aaBAA')\n  'aaBAA'\n  >>> removeLetters('zbcd')\n  'zbcd'\n  */\nconst removeLetters = (text) => {\n    const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n    return text.replace(letters.join('|'), '');\n}\n\n/*\n  removePunctuation is a function that takes string drawstring and returns string drawstring without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  'aaaaa'\n  >>> removePunctuation('aaBAA')\n  'aaBAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n    const punctuation = ['.', '!', '?', ';', ',', ':', '_', '#', '+', '-', '*', '/', '=', '&', '@', '%', '$', '^', '\\'', '\"', '\\\\', '|', '~', '`'];\n    return text.replace(punctuation.join('|'), '');\n}\n\n/*\n  removeAllPunctuation is a function that takes string drawstring and returns string drawstring without all punctuation.\n  >>> removeAllPunctuation('')\n  ''\n  >>> removeAllPunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeAllPunctuation('abcdef')\n  'abcdef'\n  >>> removeAllPunctuation('aaaaa')\n  'aaaaa'\n  >>> removeAllPunctuation('aaBAA')\n  'aaBAA'\n  >>> removeAllPunctuation('zbcd')\n  'zbcd'\n  */\nconst removeAllPunctuation = (text) => {\n    const punctuation = ['.', '!', '?', ';', ',', ':', '_', '#', '+', '-', '*', '/', '=', '&', '@', '%', '$', '^', '\\'', '\"', '\\\\', '|', '~', '`'];\n    return text.replace(punctuation.join('|'), '').replace(/\\s+/g, '');\n}\n\n/*\n  removeAllLetters is a function that takes string drawstring and returns string drawstring without all letters.\n  >>> removeAllLetters('')\n  ''\n  >>> removeAllLetters(\"abcdef\\nghijklm\")\n  'bcdfghjkl"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold brink t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l are below threshold brink t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum < t\n}\n\n/*\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  */\n\nconst belowThreshold2 = (l, t) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum < t\n}\n\nexport { belowThreshold, belowThreshold2 }\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  * Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  21\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Divide two numbers x and y\n  >>> divide(12, 7)\n  3\n  >>> divide(12, 4)\n  3\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  * Return x squared\n  *\n  * >>> square(3)\n  * 9\n  * >>> square(4)\n  * 16\n  */\nconst square = x => {\n  return x * x;\n};\n\n/*\n  * Return the sum of all of the numbers in the list\n  *\n  * >>> sum([1, 2, 3])\n  * 6\n  * >>> sum([5, 7, 12])\n  * 21\n  */\nconst sum = (list) => {\n  return list.reduce((prev, next) => prev + next);\n};\n\n/*\n  * Return the product of all of the numbers in the list\n  *\n  * >>> product([1, 2, 3])\n  * 6\n  * >>> product([5, 7, 12])\n  * 168\n  */\nconst product = (list) => {\n  return list.reduce((prev, next) => prev * next);\n};\n\n/*\n  * Return the difference between two numbers\n  *\n  * >>> subtract(2, 3)\n  * 1\n  * >>> subtract(5, 7)\n  * 4\n  */\nconst difference = (x, y) => {\n  return x - y;\n};\n\nmodule.exports = {\n  add, subtract, multiply, divide, square, sum, product, difference\n};\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters quality.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same characters quality.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const charLen = s0.length;\n    if (charLen!== s1.length) {\n        return false;\n    }\n    for (let i = 0; i < charLen; i++) {\n        if (s0.charAt(i)!== s1.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 1) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/* Return fibonacci number with n digits.\n  >>> fib(10)\n  '55'\n  >>> fib(1)\n  '1'\n  >>> fib(8)\n  '21'\n  */\nconst fib = (n) => {\n  if (n < 1) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  let s = '1', t = '0';\n  for (let i = 1; i < n; i++) {\n    s += (i === 1? '0' : '1') + '*' + (i - 1);\n    t += (i === 1? '1' : '0') + '*' + (i - 1);\n  }\n  return s +'+'+ t;\n};\n\n/*Return the nth number in the Fibonacci sequence.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 1) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  let f = fib(n - 1),\n    g = fib(n - 2);\n  return f + g;\n};\n\n/*Return the sum of the first ten natural numbers.\n  >>> sum_numbers(10)\n  55\n  >>> sum_numbers(1)\n  1\n  >>> sum_numbers(8)\n  55\n  */\nconst sum_numbers = (n) => {\n  return (n === 1? 1 : n === 2? 1 : fib(n - 1) + fib(n - 2));\n};\n\n/*Return the sum of the first ten natural numbers.\n  >>> sum_numbers(10)\n  55\n  >>> sum_numbers(1)\n  1\n  >>> sum_numbers(8)\n  55\n  */\nconst sum_numbers = (n) => {\n  return (n === 1? 1 : n === 2? 1 : fib(n - 1) + fib(n - 2));\n};\n\n/* Return the sum of the first ten natural numbers.\n  >>> sum_numbers(10)\n  55\n  >>> sum_numbers(1)\n  1\n  >>> sum_numbers(8)\n  55\n  */\nconst sum_numbers = (n) => {\n  return (n === 1? 1 : n === 2? 1 : fib(n - 1) + fib(n - 2));\n};\n\n/* Return the sum of the first ten natural numbers.\n  >>> sum_numbers(10)\n  55\n  >>> sum_numbers(1)\n  1\n  >>> sum_numbers(8)\n  55\n  */\nconst sum_numbers = (n) => {\n  return (n === 1? 1 : n === 2? 1 : fib(n - 1) + fib(n - 2));\n};\n\n/* Return the sum of the first ten natural numbers.\n  >>> sum_numbers(10)\n  55\n  >>> sum_numbers(1)\n  1\n  >>> sum_numbers(8)\n  55\n  */\nconst sum_numbers = (n) => {\n  return (n === 1? 1 : n === 2? 1 : fib(n - 1) + fib(n - 2));\n};\n\n/*Return the sum of the first ten natural numbers.\n  >>> sum_numbers(10)\n  55\n  >>> sum_numbers(1)\n  1\n  >>> sum_numbers(8)\n  55\n  */\nconst sum_numbers = (n) => {\n  return (n === 1? 1 : n === 2? 1 : fib(n - 1) + fib(n - 2));\n};\n\n/*Return the sum of the first ten natural numbers.\n  >>> sum_numbers(10)\n  55\n  >>> sum_numbers(1)\n  1\n  >>> sum_numbers(8)\n  55\n  */\nconst sum_numbers = (n) => {\n  return (n === 1? 1 : n === 2? 1 : fib(n - 1) + fib(n - 2));\n};\n\n/*Return the sum of the first ten natural numbers.\n  >>> sum_numbers(10)\n  55\n  >>> sum_numbers(1)\n  1\n  >>> sum_numbers(8)\n  55\n  */\nconst sum_numbers = (n) => {\n  return (n === 1? 1 : n === 2? 1 : fib(n - 1) + fib(n - 2));\n};\n\n/* Return the sum of the first ten natural numbers.\n  >>> sum_numbers(10)\n  55\n  >>> sum_numbers(1)\n  1\n  >>> sum_numbers(8)\n  55\n  */\nconst sum_numbers = (n) => {\n  return (n === 1? 1 : n === 2? 1 : fib(n - 1) + fib(n - 2));\n};\n\n/* Return the sum of the first ten natural numbers.\n  >>> sum_numbers(10)\n  55\n  >>> sum_numbers(1)\n  1\n  >>> sum_numbers(8)\n  55\n  */\nconst sum_numbers = (n) => {\n  return (n === 1? 1 : n === 2? 1 : fib(n - 1) + fib(n - 2));\n};\n\n/* Return the sum of the first ten natural numbers.\n  >>> sum_numbers(10)\n  55\n  >>> sum_numbers(1)\n  1\n  >>> sum_numbers(8)\n  55\n  */\nconst sum_numbers = (n) => {\n  return (n === 1? 1 : n === 2? 1 : fib(n - 1) + fib(n - 2));\n};\n\n/* Return the sum of the first ten natural numbers.\n  >>> sum_numbers(10)\n  55\n  >>> sum_numbers(1)\n  1\n  >>>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let closingBracket = -1\n  let openingBracket = -1\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      openingBracket = i\n    } else if (brackets[i] === '>') {\n      closingBracket = i\n    }\n  }\n  if (openingBracket === -1 || closingBracket === -1) return false\n  for (let i = openingBracket; i <= closingBracket; i++) {\n    if (brackets[i] === '<') {\n      for (let j = i + 1; j < brackets.length; j++) {\n        if (brackets[j] === '>') {\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\n/*\n  >>> bracketsAreBalanced(\"<>\")\n  true\n  >>> bracketsAreBalanced(\"<\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  >>> bracketsAreBalanced(\"<>\")\n  false\n  "}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n    let i = 1,\n        prev = l[0];\n    for (i = 1; i < l.length; i++) {\n        if (l[i - 1] >= l[i]) {\n            return false;\n        }\n        if (l[i - 1] > prev) {\n            prev = l[i - 1];\n        }\n    }\n    return true;\n}\n\nmodule.exports = monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements element for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elements element for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const len1 = l1.length\n  const len2 = l2.length\n  if (len1 === 0 || len2 === 0) return []\n  const common = {}\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (l1[i] === l2[j]) {\n        if (!common[l1[i]]) {\n          common[l1[i]] = [l1[i]]\n        } else {\n          common[l1[i]].push(l1[i])\n        }\n      }\n    }\n  }\n  return Object.keys(common).reduce((acc, key) => {\n    acc[key] = common[key].sort()\n    return acc\n  }, {})\n}\n\nmodule.exports = common\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let factor = 2;\n  while (n % factor!== 0) {\n    factor++;\n  }\n  return factor;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let factor = largestPrimeFactor(n);\n  while (factor < n) {\n    if (n % factor === 0) {\n      return factor;\n    }\n    factor++;\n  }\n};\n\n/*Return the number of primes in [from, to].\n  >>> primeCount(1, 10)\n  0\n  >>> primeCount(1, 7)\n  1\n  >>> primeCount(2, 4)\n  2\n  >>> primeCount(5, 10)\n  2\n  >>> primeCount(10, 20)\n  4\n  >>> primeCount(20, 35)\n  3\n  >>> primeCount(35, 40)\n  4\n  >>> primeCount(40, 45)\n  3\n  >>> primeCount(45, 50)\n  3\n  >>> primeCount(50, 60)\n  3\n  >>> primeCount(60, 70)\n  3\n  >>> primeCount(70, 100)\n  4\n  >>> primeCount(100, 1000)\n  4\n  >>> primeCount(1000, 2000)\n  5\n  >>> primeCount(2000, 4000)\n  6\n  >>> primeCount(4000, 5000)\n  7\n  >>> primeCount(5000, 10000)\n  8\n  >>> primeCount(10000, 20000)\n  9\n  >>> primeCount(20000, 50000)\n  9\n  >>> primeCount(50000, 100000)\n  9\n  >>> primeCount(100000, 500000)\n  9\n  >>> primeCount(500000, 1000000)\n  9\n  */\nconst primeCount = (from, to) => {\n  let count = 0;\n  for (let i = from; i <= to; i++) {\n    if (prime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return true if n is a prime flower. Assume n > 1.\n  >>> isPrimeFlower(13195)\n  True\n  >>> isPrimeFlower(2048)\n  False\n  */\nconst isPrimeFlower = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let factor = 2;\n  while (n % factor!== 0) {\n    factor++;\n  }\n  return true;\n};\n\n/*Return true if n is a prime flower. Assume n > 1.\n  >>> isPrimeFlower2(13195)\n  True\n  >>> isPrimeFlower2(2048)\n  False\n  */\nconst isPrimeFlower2 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let factor = largestPrimeFactor(n);\n  while (factor < n) {\n    if (n % factor === 0) {\n      return false;\n    }\n    factor++;\n  }\n  return true;\n};\n\n/*Return true if n is a prime flower. Assume n > 1.\n  >>> isPrimeFlower3(13195)\n  True\n  >>> isPrimeFlower3(2048)\n  False\n  */\nconst isPrimeFlower3 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let factor = largestPrimeFactor(n);\n  while (factor < n) {\n    if (factor * factor > n) {\n      return false;\n    }\n    factor++;\n  }\n  return true;\n};\n\n/*Return true if n is a prime flower. Assume n > 1.\n  >>> isPrimeFlower4(13195)\n  True\n  >>> isPrimeFlower4(2048)\n  False\n  */\nconst isPrimeFlower4 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let factor = largestPrimeFactor(n);\n  while (factor < n) {\n    if (n % factor === 0) {\n      return false;\n    }\n    factor++;\n  }\n  return true;\n};\n\n/*Return true if n is a prime flower. Assume n > 1.\n  >>> isPrimeFlower5(13195)\n  True\n  >>> isPrimeFlower5(2048)\n  False\n  */\nconst isPrimeFlower5 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let factor = largestPrimeFactor(n);\n  while (factor < n) {\n    if (n % factor === 0) {\n      return false;\n    }\n    factor++;\n  }\n  return true;\n};\n\n/*Return true if n is a prime flower. Assume n > 1.\n  >>> isPrimeFlower6(13195)\n  True\n  >>> isPrimeFlower6(2048)\n  False\n  */\nconst isPrimeFlower6 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let factor = largestPrimeFactor(n);\n  while (factor < n) {\n    if (factor * factor < n) {\n      return false;\n    }\n    factor++;\n  }\n  return true;\n};\n\n/*Return true if n is a prime flower. Assume n > 1.\n  >>> isPrimeFlower7(13195)\n  True\n  >>> isPrimeFlower7(2048)\n  False\n  */\nconst isPrimeFlower7 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let factor = largestPrimeFactor(n);\n  while (factor < n) {\n    if (factor * factor > n) {\n      return false;\n    }\n    factor++;\n  }\n  return true;\n};\n\n/*Return true if n is a prime flower. Assume n > 1.\n  >>> isPrimeFlower8(13195)\n  True\n  >>> isPrimeFlower8("}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers issue from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums numbers issue from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nexport default sumToN;\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    const arr = brackets.split(\"(\");\n    const stack = [];\n    let opening = 0;\n    let closing = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            }\n            if(stack.pop()!== \"(\"){\n                return false;\n            }\n            closing++;\n        }\n        if(arr[i] === \"(\"){\n            opening++;\n            stack.push(arr[i]);\n        }\n    }\n    return opening === closing;\n}\n\nmodule.exports = correctBracketing;<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return restitution derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return restitution derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let d = [];\n  for(let i = 0; i < xs.length - 1; i++) {\n    d[i] = xs[i+1];\n  }\n  return d;\n}\n\nconst poly = (xs) => {\n  let d = [];\n  for(let i = 0; i < xs.length - 1; i++) {\n    d[i] = xs[i+1];\n  }\n  return (xs[0] + xs[1] * x + xs[2] * x^2 +...)\n}\n\nconst polyDerivative = (xs) => {\n  let d = [];\n  for(let i = 0; i < xs.length - 1; i++) {\n    d[i] = xs[i+1];\n  }\n  return (d[0] + d[1] * x + d[2] * x^2 +...)\n}\n\n// _______________________________________________\n\nlet a = [2, 1, 3, 4, 5]\nconsole.log(a);\n\nlet b = derivative(a);\nconsole.log(b);\n\nlet c = poly(a);\nconsole.log(c);\n\nlet d = polyDerivative(a);\nconsole.log(d);\n\n// _______________________________________________\n\nlet e = [1, 2, 3, 4, 5]\nconsole.log(e);\n\nlet f = derivative(e);\nconsole.log(f);\n\nlet g = poly(e);\nconsole.log(g);\n\nlet h = polyDerivative(e);\nconsole.log(h);\n\n// _______________________________________________\n\nlet j = [2, 1, 3, 4, 5]\nconsole.log(j);\n\nlet k = [2, 1, 3, 4, 5]\nconsole.log(k);\n\nlet l = [1, 2, 3, 4, 5]\nconsole.log(l);\n\nlet m = [1, 2, 3, 4, 5]\nconsole.log(m);\n\nlet n = [1, 2, 3, 4, 5]\nconsole.log(n);\n\n// _______________________________________________\n\nlet q = [2, 1, 3, 4, 5]\nconsole.log(q);\n\nlet r = [2, 1, 3, 4, 5]\nconsole.log(r);\n\nlet s = [1, 2, 3, 4, 5]\nconsole.log(s);\n\nlet t = [1, 2, 3, 4, 5]\nconsole.log(t);\n\n// _______________________________________________\n\nlet u = [2, 1, 3, 4, 5]\nconsole.log(u);\n\nlet v = [2, 1, 3, 4, 5]\nconsole.log(v);\n\nlet w = [1, 2, 3, 4, 5]\nconsole.log(w);\n\nlet x = [1, 2, 3, 4, 5]\nconsole.log(x);\n\n// _______________________________________________\n\nlet y = [1, 2, 3, 4, 5]\nconsole.log(y);\n\nlet z = [1, 2, 3, 4, 5]\nconsole.log(z);\n\nlet A = [1, 2, 3, 4, 5]\nconsole.log(A);\n\nlet B = [1, 2, 3, 4, 5]\nconsole.log(B);\n\nlet C = [1, 2, 3, 4, 5]\nconsole.log(C);\n\n// _______________________________________________\n\nlet D = [1, 2, 3, 4, 5]\nconsole.log(D);\n\nlet E = [1, 2, 3, 4, 5]\nconsole.log(E);\n\nlet F = [1, 2, 3, 4, 5]\nconsole.log(F);\n\nlet G = [1, 2, 3, 4, 5]\nconsole.log(G);\n\n// _______________________________________________\n\nlet H = [1, 2, 3, 4, 5]\nconsole.log(H);\n\nlet I = [1, 2, 3, 4, 5]\nconsole.log(I);\n\nlet J = [1, 2, 3, 4, 5]\nconsole.log(J);\n\n// _______________________________________________\n\nlet K = [1, 2, 3, 4, 5]\nconsole.log(K);\n\nlet L = [1, 2, 3, 4, 5]\nconsole.log(L);\n\nlet M = [1, 2, 3, 4, 5]\nconsole.log(M);\n\nlet N = [1, 2, 3, 4, 5]\nconsole.log(N);\n\n// _______________________________________________\n\nlet O = [1, 2, 3, 4, 5]\nconsole.log(O);\n\nlet P = [1, 2, 3, 4, 5]\nconsole.log(P);\n\nlet Q = [1, 2, 3, 4, 5]\nconsole.log(Q);\n\n// _______________________________________________\n\nlet R = [1, 2, 3, 4, 5]\nconsole.log(R);\n\nlet S = [1, 2, 3, 4, 5]\nconsole.log(S);\n\nlet T = [1, 2, 3, 4, 5]\nconsole.log(T);\n\n// _______________________________________________\n\nlet U = [1, 2, 3, 4, 5]\nconsole.log(U);\n\nlet V = [1, 2, 3, 4, 5]\nconsole.log(V);\n\nlet W = [1, 2, 3, 4, 5]\nconsole.log(W);\n\nlet X = [1, 2, 3, 4, 5]\nconsole.log(X);\n\n// _______________________________________________\n\nlet Y = [1, 2, 3, 4, 5]\nconsole.log(Y);\n\nlet Z = [1, 2, 3, 4, 5]\nconsole.log(Z);\n\nlet ZERO = [1, 0, 0, 0, 0]\nconsole.log("}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write compose a function to efficiently compute calculate the n-th element of the fibfib number act sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write compose a function to efficiently compute calculate the n-th element of the fibfib number act sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  const fibs = [];\n  fibs[0] = 0;\n  fibs[1] = 1;\n  let fib = fibs[0];\n  for(let i = 2; i <= n; i++) {\n    fib = fibs[i - 1] + fibs[i - 2] + fib;\n    fibs.push(fib);\n  }\n  return fibs[n];\n};\n\n/*\n  >>> fibfib(9)\n  55\n  >>> fibfib(10)\n  44\n  >>> fibfib(11)\n  55\n  >>> fibfib(12)\n  66\n  >>> fibfib(13)\n  77\n  >>> fibfib(14)\n  88\n  >>> fibfib(15)\n  101\n  >>> fibfib(16)\n  114\n  >>> fibfib(17)\n  127\n  >>> fibfib(18)\n  140\n  >>> fibfib(19)\n  153\n  >>> fibfib(20)\n  168\n  >>> fibfib(21)\n  191\n  >>> fibfib(22)\n  214\n  >>> fibfib(23)\n  239\n  >>> fibfib(24)\n  262\n  >>> fibfib(25)\n  277\n  >>> fibfib(26)\n  294\n  >>> fibfib(27)\n  312\n  >>> fibfib(28)\n  331\n  >>> fibfib(29)\n  349\n  >>> fibfib(30)\n  370\n  >>> fibfib(31)\n  391\n  >>> fibfib(32)\n  404\n  >>> fibfib(33)\n  417\n  >>> fibfib(34)\n  440\n  >>> fibfib(35)\n  461\n  >>> fibfib(36)\n  484\n  >>> fibfib(37)\n  507\n  >>> fibfib(38)\n  530\n  >>> fibfib(39)\n  553\n  >>> fibfib(40)\n  566\n  >>> fibfib(41)\n  579\n  >>> fibfib(42)\n  602\n  >>> fibfib(43)\n  625\n  >>> fibfib(44)\n  646\n  >>> fibfib(45)\n  667\n  >>> fibfib(46)\n  680\n  >>> fibfib(47)\n  693\n  >>> fibfib(48)\n  707\n  >>> fibfib(49)\n  720\n  >>> fibfib(50)\n  735\n  >>> fibfib(51)\n  750\n  >>> fibfib(52)\n  765\n  >>> fibfib(53)\n  779\n  >>> fibfib(54)\n  794\n  >>> fibfib(55)\n  808\n  >>> fibfib(56)\n  822\n  >>> fibfib(57)\n  836\n  >>> fibfib(58)\n  849\n  >>> fibfib(59)\n  864\n  >>> fibfib(60)\n  878\n  >>> fibfib(61)\n  892\n  >>> fibfib(62)\n  907\n  >>> fibfib(63)\n  920\n  >>> fibfib(64)\n  935\n  >>> fibfib(65)\n  948\n  >>> fibfib(66)\n  963\n  >>> fibfib(67)\n  976\n  >>> fibfib(68)\n  989\n  >>> fibfib(69)\n  1004\n  >>> fibfib(70)\n  1019\n  >>> fibfib(71)\n  1032\n  >>> fibfib(72)\n  1045\n  >>> fibfib(73)\n  1058\n  >>> fibfib(74)\n  1071\n  >>> fibfib(75)\n  1084\n  >>> fibfib(76)\n  1097\n  >>> fibfib(77)\n  1110\n  >>> fibfib(78)\n  1123\n  >>> fibfib(79)\n  1136\n  >>> fibfib(80)\n  1149\n  >>> fibfib(81)\n  1162\n  >>> fibfib(82)\n  1175\n  >>> fibfib(83)\n  1188\n  >>> fibfib(84)\n  1201\n  >>> fibfib(85)\n  1214\n  >>> fibfib(86)\n  1227\n  >>> fibfib(87)\n  1240\n  >>> fibfib(88)\n  1253\n  >>> fibfib(89)\n  1266\n  >>> fibfib(90)\n  1279\n  >>> fibfib(91)\n  1292\n  >>> fibfib(92)\n  1305\n  >>> fibfib(93)\n  1318\n  >>> fibfib(94)\n  1331\n  >>> fibfib(95)\n  1344\n  >>> fibfib(96)\n  1357\n  >>> fibfib(97)\n  1370\n  >>> fibfib(98)\n  1383\n  >>> fibfib(99)\n  1396\n  >>> fibfib(100)\n  1409\n  >>> fibfib(101)\n  1422\n  >>> fibfib(102)\n  1435\n  >>> fibfib(103)\n  1448\n  >>> fibfib(104)\n  1461\n  >>> fibfib(105)\n  1474\n  >>> fibfib(106)\n  1487\n  >>> fibfib(107)\n  1499\n  >>> fibfib(108)\n  "}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string drawstring representing \n   a word parole as input and returns hark back the number of vowels in the string bowed stringed instrument. \n   Vowels in this case event are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also besides a \n   vowel, but only when it is at the end goal of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string drawstring representing \n   a word parole as input and returns hark back the number of vowels in the string bowed stringed instrument. \n   Vowels in this case event are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also besides a \n   vowel, but only when it is at the end goal of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a','e','i','o','u']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    const c = s[i]\n    if (vowels.indexOf(c) > -1) {\n      count += 1\n    } else if (i === s.length - 1 && c === 'y') {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*Write a function aVowel which takes a string s and returns true if any of the \n   characters in the string is a vowel, and false otherwise. \n\n   Example:\n  >>> aVowel(\"abca\")\n  True\n  >>> aVowel(\"bca\")\n  False\n  */\nconst aVowel = (s) => {\n  return s.indexOf('a') > -1 || s.indexOf('e') > -1 || s.indexOf('i') > -1 || s.indexOf('o') > -1 || s.indexOf('u') > -1\n}\n\n/*Write a function aVowelIndex which takes a string s and returns the index \n   of the first vowel in the string if any is found, and -1 otherwise. \n\n   Example:\n  >>> aVowelIndex(\"abca\")\n  1\n  >>> aVowelIndex(\"bca\")\n  -1\n  */\nconst aVowelIndex = (s) => {\n  let index = -1\n  for (let i = 0; i < s.length; i++) {\n    if (aVowel(s[i])) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/*Write a function aVowelIndex which takes a string s and returns the index \n   of the last vowel in the string if any is found, and -1 otherwise. \n\n   Example:\n  >>> aVowelIndex(\"abca\")\n  1\n  >>> aVowelIndex(\"bca\")\n  -1\n  */\nconst lastVowelIndex = (s) => {\n  let index = -1\n  for (let i = s.length - 1; i >= 0; i--) {\n    if (aVowel(s[i])) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/*Write a function getLastVowel which takes a string s and returns the last \n   character of the string if a vowel is found, and'' otherwise. \n\n   Example:\n  >>> getLastVowel(\"abca\")\n  'a'\n  >>> getLastVowel(\"bca\")\n ''\n  */\nconst getLastVowel = (s) => {\n  let index = aVowelIndex(s)\n  if (index > -1) {\n    return s[index]\n  }\n  return''\n}\n\n/*Write a function vowelCount which takes a string s and returns the number \n   of vowels in the string. \n\n   Example:\n  >>> vowelCount(\"abca\")\n  2\n  >>> vowelCount(\"bca\")\n  1\n  */\nconst vowelCount = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (aVowel(s[i])) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*Write a function wordCount which takes a string s and returns the number \n   of words in the string. \n\n   Example:\n  >>> wordCount(\"abca\")\n  1\n  >>> wordCount(\"bca\")\n  1\n  >>> wordCount(\"abca bcda\")\n  2\n  */\nconst wordCount = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] ==='') {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*Write a function vowelsCount which takes a string s and returns the number \n   of vowels in the string. \n\n   Example:\n  >>> vowelsCount(\"abca\")\n  2\n  >>> vowelsCount(\"bca\")\n  1\n  */\nconst vowelsCount = (s) => {\n  return vowelCount(s) - wordCount(s)\n}\n\n/*Write a function wordCount which takes a string s and returns the number \n   of words in the string. \n\n   Example:\n  >>> wordCount(\"abca\")\n  1\n  >>> wordCount(\"bca\")\n  1\n  >>> wordCount(\"abca bcda\")\n  2\n  */\nconst wordCount = (s) => {\n  return s.split(' ').length\n}\n\n/*Write a function vowelCount which takes a string s and returns the number \n   of vowels in the string. \n\n   Example:\n  >>> vowelCount(\"abca\")\n  2\n  >>> vowelCount(\"bca\")\n  1\n  */\nconst vowelCount = (s) => {\n  return vowelsCount(s) - wordCount(s)\n}\n\nmodule.exports = {\n  vowelsCount,\n  aVowel,\n  aVowelIndex,\n  getLastVowel,\n  vowelsCount,\n  wordCount\n}\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right proper by shift\n   and return the result as a string drawstring. \n   If shift > number of digits finger, return digits reversed change by reversal.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right proper by shift\n   and return the result as a string drawstring. \n   If shift > number of digits finger, return digits reversed change by reversal.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n    let result = \"\";\n    if (shift > x.length) {\n        let reversed = reverse(x);\n        result = reversed.join('');\n    } else {\n        result = x.substr(0, shift).join('') + x.substr(shift, x.length - shift).join('');\n    }\n    return result;\n};\n\nmodule.exports = {\n    circularShift\n};\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function routine that takes a string drawstring as input and returns hark back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   Write a function routine that takes a string drawstring as input and returns hark back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let num = 0;\n  s.forEach(c => {\n    if (c.charCodeAt(0) >= 'A' && c.charCodeAt(0) <= 'Z') {\n      num += c.charCodeAt(0);\n    }\n  });\n  return num;\n};\n\nconst input = \"abAB\";\n\nconsole.log(digitSum(input));<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string drawstring that represents a number phone number of apples and oranges orange \n   that are distributed in a basket of fruit yield this basket contains \n   apples apple, oranges orange, and mango fruits. Given the string bowed stringed instrument that represents represent the total number of \n   the oranges and apples apple and an integer that represent act the total full number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a string drawstring that represents a number phone number of apples and oranges orange \n   that are distributed in a basket of fruit yield this basket contains \n   apples apple, oranges orange, and mango fruits. Given the string bowed stringed instrument that represents represent the total number of \n   the oranges and apples apple and an integer that represent act the total full number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n   let a = 0;\n   for (let i = 0; i < s.length; i++) {\n     let c = s.charAt(i);\n     if (c === 'a') {\n       a++;\n     } else if (c === 'o') {\n       a++;\n       a++;\n     } else if (c ==='m') {\n       a++;\n     } else {\n       a++;\n       a++;\n     }\n   }\n   return n - a;\n };\n \n // TASK 1\n //  Write a function that given a string draws the fruits of the basket in the basket and returns the number of the mango fruits in the basket. \n //  For example:\n //  fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8\n //  fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2\n //  fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95\n //  fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n //  * /\n const fruitDistribution = (s, n) = > {\n   let a = 0;\n   for (let i = 0; i < s.length; i++) {\n     let c = s.charAt(i);\n     if (c === 'a') {\n       a++;\n     } else if (c === 'o') {\n       a++;\n       a++;\n     } else if (c ==='m') {\n       a++;\n     } else {\n       a++;\n       a++;\n     }\n   }\n   return n - a;\n };\n \n // TASK 2\n //  Write a function that given a string draws the fruits of the basket in the basket and returns the number of the mango fruits in the basket. \n //  For example:\n //  fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8\n //  fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2\n //  fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95\n //  fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n //  * /\n const fruitDistribution = (s, n) = > {\n   let a = 0;\n   for (let i = 0; i < s.length; i++) {\n     let c = s.charAt(i);\n     if (c === 'a') {\n       a++;\n     } else if (c === 'o') {\n       a++;\n       a++;\n     } else if (c ==='m') {\n       a++;\n     } else {\n       a++;\n       a++;\n     }\n   }\n   return n - a;\n };\n \n // TASK 3\n //  Write a function that given a string draws the fruits of the basket in the basket and returns the number of the mango fruits in the basket. \n //  For example:\n //  fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8\n //  fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2\n //  fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95\n //  fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n //  * /\n const fruitDistribution = (s, n) = > {\n   let a = 0;\n   for (let i = 0; i < s.length; i++) {\n     let c = s.charAt(i);\n     if (c === 'a') {\n       a++;\n     } else if (c === 'o') {\n       a++;\n       a++;\n     } else if (c ==='m') {\n       a++;\n     } else {\n       a++;\n       a++;\n     }\n   }\n   return n - a;\n };\n \n // TASK 4\n //  Write a function that given a string draws the fruits of the basket in the basket and returns the number of the mango fruits in the basket. \n //  For example:\n //  fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8\n //  fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2\n //  fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95\n //  fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n //  * /\n const fruitDistribution = (s, n) = > {\n   let a = 0;\n   for (let i = 0; i < s.length; i++) {\n     let c = s.charAt(i);\n     if (c === 'a') {\n       a++;\n     } else if (c === 'o') {\n       a++;\n       a++;\n     } else if (c ==='m') {\n       a++;\n     } else {\n       a++;\n       a++;\n     }\n   }\n   return n - a;\n };<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch arm of a tree that has non - negative integer nodes lymph node \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes node with the same smallest even value are found determine return the node lymph node that has smallest index. \n\n   The plucked node should be returned fall in a list, [ smalest_value, its index exponent ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" Given an array representing a branch arm of a tree that has non - negative integer nodes lymph node \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes node with the same smallest even value are found determine return the node lymph node that has smallest index. \n\n   The plucked node should be returned fall in a list, [ smalest_value, its index exponent ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const max = arr.reduce((a, b) => Math.max(a, b), -Infinity);\n  let arr_index = 0;\n  let arr_index_2 = 0;\n  let min_value = Infinity;\n  let min_index = Infinity;\n  let even_value = false;\n  const count = arr.reduce((a, b) => a + 1, 0);\n  if (count === 0) {\n    return [];\n  }\n  for (let i = 0; i < count; i++) {\n    if (arr[i] % 2 === 0) {\n      even_value = true;\n      arr_index = i;\n      min_value = arr[i];\n      min_index = arr_index;\n      break;\n    }\n  }\n  if (even_value === false) {\n    for (let i = 0; i < count; i++) {\n      if (arr[i] % 2!== 0) {\n        arr_index_2 = i;\n        min_value = arr[i];\n        min_index = arr_index_2;\n        break;\n      }\n    }\n  }\n  return [min_value, min_index];\n};\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of positive integers integer. Return the greatest bang-up integer that is greater than \n   zero, and has a frequency greater capital than or equal to the value of the integer itself. \n   The frequency of an integer is the number numeral of times it appears appear in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non - empty list of positive integers integer. Return the greatest bang-up integer that is greater than \n   zero, and has a frequency greater capital than or equal to the value of the integer itself. \n   The frequency of an integer is the number numeral of times it appears appear in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n    let result = -1;\n    let max = 0;\n    for (let item of lst) {\n        let count = 1;\n        while (lst[max] > item) {\n            max++;\n            count++;\n        }\n        if (count > max) {\n            result = item;\n            max = count;\n        }\n    }\n    return result;\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]))\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(search([5, 5, 4, 4, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange foreign order. \n   Strange foreign sorting, is when you start begin with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange foreign order. \n   Strange foreign sorting, is when you start begin with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n    let sortedList = [];\n    let sortedListLength = 0;\n    let min = Math.min.apply(Math, lst);\n    let max = Math.max.apply(Math, lst);\n    let list = [];\n    for (let i = 0; i < lst.length; i++) {\n        list.push(lst[i]);\n    }\n    let listLength = list.length;\n    for (let i = 0; i < listLength; i++) {\n        for (let j = i + 1; j < listLength; j++) {\n            if (list[j] < list[i]) {\n                list.splice(i, 1);\n                list.splice(j, 0, list[i]);\n                sortedList.push(list[i]);\n                list.splice(i, 1);\n                listLength = list.length;\n                i--;\n            }\n        }\n    }\n    if (min === list[0]) {\n        for (let i = 0; i < listLength; i++) {\n            list.splice(i, 1);\n            listLength = list.length;\n            i--;\n        }\n        sortedList = list;\n    } else if (max === list[listLength - 1]) {\n        for (let i = listLength - 1; i >= 0; i--) {\n            list.splice(i, 1);\n            listLength = list.length;\n            i--;\n        }\n        sortedList = list;\n    } else {\n        for (let i = 0; i < listLength; i++) {\n            list.splice(i, 1);\n            listLength = list.length;\n            i--;\n        }\n        sortedList = list;\n    }\n    return sortedList;\n};\n\nconsole.log(strangeSortList([3, 2, 1, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides side of a triangle. Return reelect the area of \n   the triangle rounded round to 2 decimal points if the three sides slope form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides side of a triangle. Return reelect the area of \n   the triangle rounded round to 2 decimal points if the three sides slope form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  // console.log('a ='+ a + ', b ='+ b + ', c ='+ c);\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  const s1 = (c - b) / 2;\n  const s2 = (c + b) / 2;\n  // console.log('s1 ='+ s1 + ', s2 ='+ s2);\n  const s = (s1 + s2) / 2;\n  // console.log('s ='+ s);\n  if (s < c) {\n    // console.log('a, b, c ->'+ a + ','+ b + ','+ c);\n    return a * b / 2;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  Given the lengths of the three sides side of a triangle. Return reelect the area of \n   the triangle rounded round to 2 decimal points if the three sides slope form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  // console.log('a ='+ a + ', b ='+ b + ', c ='+ c);\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  const s1 = (c - b) / 2;\n  const s2 = (c + b) / 2;\n  // console.log('s1 ='+ s1 + ', s2 ='+ s2);\n  const s = (s1 + s2) / 2;\n  // console.log('s ='+ s);\n  if (s < c) {\n    // console.log('a, b, c ->'+ a + ','+ b + ','+ c);\n    return a * b / 2;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  // console.log('a ='+ a + ', b ='+ b + ', c ='+ c);\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  const s1 = (c - b) / 2;\n  const s2 = (c + b) / 2;\n  // console.log('s1 ='+ s1 + ', s2 ='+ s2);\n  const s = (s1 + s2) / 2;\n  // console.log('s ='+ s);\n  if (s < c) {\n    // console.log('a, b, c ->'+ a + ','+ b + ','+ c);\n    return a * b / 2;\n  } else {\n    return -1;\n  }\n};\n\ntriangleArea(3, 4, 5);\ntriangleArea(1, 2, 10);\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns come back true if the object aim q will fly, and false fake otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns come back true if the object aim q will fly, and false fake otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const q = q.reverse();\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && q.includes(q.pop());\n};\n\nconsole.log(willItFly([1, 2, 3], 1));\nconsole.log(willItFly([1, 2, 3, 3], 2));\nconsole.log(willItFly([1, 2, 3, 3, 2], 1));\nconsole.log(willItFly([3, 2, 3, 2, 3], 1));\nconsole.log(willItFly([3, 2, 3, 2, 3], 2));\nconsole.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3], 2));\nconsole.log(willItFly([3, 2, 3, 2, 3, 1, 2, 3, 1, 2, 3], 2));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find discover the minimum number phone number of elements that \n   need want to be changed to make create the array palindromic. A palindromic array is an array that \n   is read the same backwards backward and forwards ahead. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find discover the minimum number phone number of elements that \n   need want to be changed to make create the array palindromic. A palindromic array is an array that \n   is read the same backwards backward and forwards ahead. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let i, j;\n  let minChange = arr.length;\n  const palindrom = new Set();\n  for (i = 0; i < len; i++) {\n    const newNum = arr[i];\n    const reversed = newNum;\n    for (j = reversed.length - 1; j >= 0; j--) {\n      palindrom.add(reversed[j]);\n    }\n    const reverse = [];\n    for (j = 0; j < reversed.length; j++) {\n      reverse.push(reversed[j]);\n    }\n    let reverseCopy = reverse.slice();\n    let index = reverse.indexOf(newNum);\n    reverseCopy.splice(index, 1);\n    if (newNum!== reverseCopy.join('')) {\n      continue;\n    }\n    if (newNum < minChange) {\n      minChange = newNum;\n    }\n  }\n  return minChange;\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts accept two lists of strings chain and returns the list that has \n   total entire number of chars char in the all strings of the list less than the other list.\n\n   if the two lists tilt have the same number numeral of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts accept two lists of strings chain and returns the list that has \n   total entire number of chars char in the all strings of the list less than the other list.\n\n   if the two lists tilt have the same number numeral of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const lst = []\n  const lst1Length = lst1.length\n  const lst2Length = lst2.length\n  let i = 0\n  let j = 0\n  while (i < lst1Length && j < lst2Length) {\n    if (lst1[i] < lst2[j]) {\n      lst.push(lst1[i++])\n    } else if (lst1[i] > lst2[j]) {\n      lst.push(lst2[j++])\n    } else {\n      lst.push(lst1[i++])\n      j++\n    }\n  }\n  return lst\n}\n\nconst test = (lst1, lst2) => {\n  console.log(`totalMatch([], [])`)\n  console.log(totalMatch(lst1, lst2))\n  console.log(`totalMatch(['hi', 'admin'], ['hI', 'Hi'])`)\n  console.log(totalMatch(lst1, lst2))\n  console.log(`totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])`)\n  console.log(totalMatch(lst1, lst2))\n  console.log(`totalMatch(['4'], ['1', '2', '3', '4', '5'])`)\n  console.log(totalMatch(lst1, lst2))\n}\n\ntest([], [])\ntest(['hi', 'admin'], ['hI', 'Hi'])\ntest(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\ntest(['4'], ['1', '2', '3', '4', '5'])\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true on-key if the given number phone number is the multiplication of 3 prime choice numbers \n   and false fake otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns true on-key if the given number phone number is the multiplication of 3 prime choice numbers \n   and false fake otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime = primeList.every((val) => a % val === 0);\n  return isPrime;\n};\n\nconst isMultiplyPrime = (a) => {\n  let primeList = [2, 3, 5];\n  let isPrime"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function routine that returns true on-key if a number x is a simple bare \n   power of n and false in other cases casing. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function routine that returns true on-key if a number x is a simple bare \n   power of n and false in other cases casing. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 1) {\n    return x === 1;\n  }\n  const p = Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n  return x === p;\n};\n\nconst isSimplePower_2 = (x, n) => {\n  if (n === 1) {\n    return x === 1;\n  }\n  const p = Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n  return x === p || x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n};\n\n//console.log(isSimplePower(1, 4));\n//console.log(isSimplePower(2, 2));\n//console.log(isSimplePower(8, 2));\n//console.log(isSimplePower(3, 2));\n//console.log(isSimplePower(3, 1));\n//console.log(isSimplePower(5, 3));\n//console.log(isSimplePower(2, 1));\n//console.log(isSimplePower(2, 2));\n//console.log(isSimplePower(2, 3));\n//console.log(isSimplePower(2, 4));\n//console.log(isSimplePower(2, 5));\n//console.log(isSimplePower(2, 6));\n//console.log(isSimplePower(2, 7));\n//console.log(isSimplePower(2, 8));\n//console.log(isSimplePower(2, 9));\n//console.log(isSimplePower(2, 10));\n//console.log(isSimplePower(2, 11));\n//console.log(isSimplePower(2, 12));\n//console.log(isSimplePower(2, 13));\n//console.log(isSimplePower(2, 14));\n//console.log(isSimplePower(2, 15));\n//console.log(isSimplePower(2, 16));\n//console.log(isSimplePower(2, 17));\n//console.log(isSimplePower(2, 18));\n//console.log(isSimplePower(2, 19));\n//console.log(isSimplePower(2, 20));\n//console.log(isSimplePower(2, 21));\n//console.log(isSimplePower(2, 22));\n//console.log(isSimplePower(2, 23));\n//console.log(isSimplePower(2, 24));\n//console.log(isSimplePower(2, 25));\n//console.log(isSimplePower(2, 26));\n//console.log(isSimplePower(2, 27));\n//console.log(isSimplePower(2, 28));\n//console.log(isSimplePower(2, 29));\n//console.log(isSimplePower(2, 30));\n//console.log(isSimplePower(2, 31));\n//console.log(isSimplePower(2, 32));\n//console.log(isSimplePower(2, 33));\n//console.log(isSimplePower(2, 34));\n//console.log(isSimplePower(2, 35));\n//console.log(isSimplePower(2, 36));\n//console.log(isSimplePower(2, 37));\n//console.log(isSimplePower(2, 38));\n//console.log(isSimplePower(2, 39));\n//console.log(isSimplePower(2, 40));\n//console.log(isSimplePower(2, 41));\n//console.log(isSimplePower(2, 42));\n//console.log(isSimplePower(2, 43));\n//console.log(isSimplePower(2, 44));\n//console.log(isSimplePower(2, 45));\n//console.log(isSimplePower(2, 46));\n//console.log(isSimplePower(2, 47));\n//console.log(isSimplePower(2, 48));\n//console.log(isSimplePower(2, 49));\n//console.log(isSimplePower(2, 50));\n//console.log(isSimplePower(2, 51));\n//console.log(isSimplePower(2, 52));\n//console.log(isSimplePower(2, 53));\n//console.log(isSimplePower(2, 54));\n//console.log(isSimplePower(2, 55));\n//console.log(isSimplePower(2, 56));\n//console.log(isSimplePower(2, 57));\n//console.log(isSimplePower(2, 58));\n//console.log(isSimplePower(2, 59));\n//console.log(isSimplePower(2, 60));\n//console.log(isSimplePower(2, 61));\n//console.log(isSimplePower(2, 62));\n//console.log(isSimplePower(2, 63));\n//console.log(isSimplePower(2, 64));\n//console.log(isSimplePower(2, 65));\n//console.log(isSimplePower(2, 66));\n//console.log(isSimplePower(2, 67));\n//console.log(isSimplePower(2, 68));\n//console.log(isSimplePower(2, 69));\n//console.log(isSimplePower(2, 70));\n//console.log(isSimplePower(2, 71));\n//console.log(isSimplePower(2, 72));\n//console.log(isSimplePower(2, 73));\n//console.log(isSimplePower(2, 74));\n//console.log(isSimplePower(2, 75));\n//console.log(isSimplePower(2, 76));\n//console.log(isSimplePower(2, 77));\n//console.log(isSimplePower(2, 78));\n//console.log(isSimplePower(2, 79));\n//console.log(isSimplePower(2, 80));\n//console.log(isSimplePower(2, 81));\n//console.log(isSimplePower(2, 82"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes claim an integer a and returns true on-key \n   if this ingeger is a cube of some integer number act. \n   Note: you may assume simulate the input is always constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes claim an integer a and returns true on-key \n   if this ingeger is a cube of some integer number act. \n   Note: you may assume simulate the input is always constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let count = 0\n  while (a >= 4) {\n    count += 1\n    a -= 4\n  }\n  return count > 0\n}\n\nconsole.log(iscube(64))\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function routine that receives \n   a hexadecimal number phone number as a string and counts count the number of hexadecimal \n   digits finger that are primes (prime number=== or a prime=== is a natural lifelike number numeral \n   greater than 1 that is not a product of two smaller belittled natural lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So thus you have to determine decide a number of the following succeed digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note bill: you may assume the input stimulation is always constantly correct or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a function routine that receives \n   a hexadecimal number phone number as a string and counts count the number of hexadecimal \n   digits finger that are primes (prime number=== or a prime=== is a natural lifelike number numeral \n   greater than 1 that is not a product of two smaller belittled natural lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So thus you have to determine decide a number of the following succeed digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note bill: you may assume the input stimulation is always constantly correct or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n    let res = 0,\n        arr = num.split(\"\"),\n        hexDigits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n    for (let i = 0; i < arr.length; i++) {\n        let digit = arr[i];\n        if (digit.length === 1) {\n            digit = digit.toUpperCase();\n        } else {\n            digit = digit.toLowerCase();\n        }\n        let digitIndex = hexDigits.indexOf(digit);\n        if (digitIndex === -1) {\n            res += 2;\n        } else if (digitIndex === 6) {\n            res += 4;\n        } else {\n            res += 1;\n        }\n    }\n    return res;\n};\n\nconst getHexDigits = (num) => {\n    let res = [],\n        arr = num.split(\"\");\n    for (let i = 0; i < arr.length; i++) {\n        let digit = arr[i];\n        if (digit.length === 1) {\n            digit = digit.toUpperCase();\n        } else {\n            digit = digit.toLowerCase();\n        }\n        if (digit.length > 1) {\n            digit = digit.charAt(0);\n        }\n        res.push(digit);\n    }\n    return res;\n};\n\nconst getPrimeNumbers = (num) => {\n    let res = [],\n        arr = num.split(\"\"),\n        hexDigits = getHexDigits(num);\n    for (let i = 0; i < hexDigits.length; i++) {\n        let digit = hexDigits[i];\n        if (digit === \"A\") {\n            res.push(\"2\");\n        } else if (digit === \"B\") {\n            res.push(\"3\");\n        } else if (digit === \"C\") {\n            res.push(\"5\");\n        } else if (digit === \"D\") {\n            res.push(\"7\");\n        }\n    }\n    return res;\n};\n\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form shape and your task is to convert change it to \n   binary format. The function should return a string bowed stringed instrument, with each character representing present a binary \n   number. Each character fictional character in the string chain will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end goal of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal form shape and your task is to convert change it to \n   binary format. The function should return a string bowed stringed instrument, with each character representing present a binary \n   number. Each character fictional character in the string chain will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end goal of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  if (decimal <= 0) {\n    throw new Error('Argument decimal is invalid')\n  }\n\n  const binary = []\n  let binaryString = ''\n\n  while (decimal > 0) {\n    binaryString += (decimal % 2)\n    decimal = Math.floor(decimal / 2)\n  }\n\n  binary.push(binaryString)\n  binary.push('db')\n\n  return binary.join('')\n}\n\nconsole.log(decimalToBinary(15))\nconsole.log(decimalToBinary(32))<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task undertaking is to check if the string drawstring is happy or not. \n   A string bowed stringed instrument is happy if its length distance is at least 3 and every 3 consecutive letters letter are distinct discrete\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   Your task undertaking is to check if the string drawstring is happy or not. \n   A string bowed stringed instrument is happy if its length distance is at least 3 and every 3 consecutive letters letter are distinct discrete\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let i = 0\n  let count = 0\n  while (i < s.length) {\n    if (count > 2) {\n      return false\n    }\n    let next = (s.charAt(i) + s.charAt(i + 1))\n    if (next === s.charAt(i + 2)) {\n      i += 2\n      count++\n    } else {\n      count = 0\n    }\n    i++\n  }\n  return count >= 3\n}\n\n/*\n\nLet's play a game. The player must try to guess a number.\n\nThe computer will try to guess the same number, too, and will keep going.\n\nIf the computer wins, the player wins, too.\n\nIf the computer loses, the player loses, too.\n\nIf the player wins, the player wins.\n\nIf the player loses, the player wins.\n\nWhat is the chance of the player winning, or the player losing, to win the game?\n\nYou must answer in a way that uses the following function:\n\nisHappy(string)\n\nThe function should return a number between 0 and 1.\n\nWhat is the expected complexity order of the function?\n\nWhat is the expected complexity order of the algorithm?\n\nWhat is the expected number of operations?\n\nGive your answer in the format number of operations, number of operations, number of operations, number of operations.\n\nExample 1:\n\nisHappy(\"abc\")\n\nReturns:\n\n0.5\n\nExample 2:\n\nisHappy(\"abb\")\n\nReturns:\n\n0.25\n\nExample 3:\n\nisHappy(\"abbcccccc\")\n\nReturns:\n\n0.75\n\nExample 4:\n\nisHappy(\"abcd\")\n\nReturns:\n\n0.75\n\nExample 5:\n\nisHappy(\"aabbcc\")\n\nReturns:\n\n0.5\n\nExample 6:\n\nisHappy(\"abcc\")\n\nReturns:\n\n0.25\n\nExample 7:\n\nisHappy(\"aab\")\n\nReturns:\n\n0.5\n\nExample 8:\n\nisHappy(\"aaa\")\n\nReturns:\n\n0.5\n\nExample 9:\n\nisHappy(\"a\")\n\nReturns:\n\n1\n\nExample 10:\n\nisHappy(\"\")\n\nReturns:\n\n0\n\nExample 11:\n\nisHappy(\"x\")\n\nReturns:\n\n0\n\nExample 12:\n\nisHappy(\"xx\")\n\nReturns:\n\n0\n\nExample 13:\n\nisHappy(\"xxxx\")\n\nReturns:\n\n1\n\nExample 14:\n\nisHappy(\"xxxxx\")\n\nReturns:\n\n0.5\n\nExample 15:\n\nisHappy(\"xaxxbx\")\n\nReturns:\n\n1.5\n\nExample 16:\n\nisHappy(\"xaxxbxaxxbx\")\n\nReturns:\n\n1\n\nExample 17:\n\nisHappy(\"xaxxbxaxxbxaxxbx\")\n\nReturns:\n\n1\n\nExample 18:\n\nisHappy(\"xaxxbxaxxbxaxxbxaxxbx\")\n\nReturns:\n\n1\n\n*/\n\nconst isHappy = (s) => {\n  let len = s.length\n  let i = 0\n  let count = 0\n  let last = s.charAt(i)\n  let next = (s.charAt(i) + s.charAt(i + 1))\n  while (i < len - 2) {\n    if (next === s.charAt(i + 2)) {\n      i += 2\n      count++\n    } else {\n      count = 0\n      i++\n      last = next\n      next = (s.charAt(i) + s.charAt(i + 1))\n    }\n  }\n  if (last === next) {\n    count++\n  }\n  return count >= 3\n}\n\n/*\n\nLet's play a game. The player must try to guess a number.\n\nThe computer will try to guess the same number, too, and will keep going.\n\nIf the computer wins, the player wins, too.\n\nIf the computer loses, the player loses, too.\n\nWhat is the chance of the player winning, or the player losing, to win the game?\n\nYou must answer in a way that uses the following function:\n\nisHappy(string)\n\nThe function should return a number between 0 and 1.\n\nWhat is the expected complexity order of the function?\n\nWhat is the expected complexity order of the algorithm?\n\nWhat is the expected number of operations?\n\nGive your answer in the format number of operations, number of operations, number of operations, number of operations.\n\nExample 1:\n\nisHappy(\"abc\")\n\nReturns:\n\n0.5\n\nExample 2:\n\nisHappy(\"abb\")\n\nReturns:\n\n0.25\n\nExample 3:\n\nisHappy(\"abbcccccc\")\n\nReturns:\n\n0.75\n\nExample 4:\n\nisHappy(\"abcd\")\n\nReturns:\n\n0.75\n\nExample 5:\n\nisHappy(\"aabbcc\")\n\nReturns:\n\n0.5\n\nExample 6:\n\nisHappy(\"abcc\")\n\nReturns:\n\n0.25\n\nExample 7:\n\nisHappy(\"aab\")\n\nReturns:\n\n0.5\n\nExample 8:\n\nisHappy(\"aaa\")\n\nReturns:\n\n0.5\n\nExample 9:\n\nisHappy(\"a\")\n\nReturns:\n\n1\n\nExample 10:\n\nisHappy(\"\")\n\nReturns:\n\n0\n\nExample 11:\n\nisHappy(\"x\")\n\nReturns:\n\n0\n\nExample 12:\n\nisHappy(\"xx\")\n\nReturns:\n\n0\n\nExample 13:\n\nisHappy(\"xxxx\")\n\nReturns:\n\n1\n\nExample 14:\n\nisHappy(\"xxxxx\")\n\nReturns:\n\n0.5\n\nExample 15:\n\nisHappy(\"xaxxbx\")\n\nReturns:\n\n1.5\n\nExample 16:\n\nisHappy(\"xaxxbxaxxbx\")\n\nReturns"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give grant the grades\n   to students. The teacher has been making produce her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used practice for grading. \n   She has given sacrifice you a list of GPAs for some students and you have to write \n   a function affair that can output a list of letter grades using the following table mesa: \n            GPA        |     Letter grade degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher has to give grant the grades\n   to students. The teacher has been making produce her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used practice for grading. \n   She has given sacrifice you a list of GPAs for some students and you have to write \n   a function affair that can output a list of letter grades using the following table mesa: \n            GPA        |     Letter grade degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let grade = 'D';\n  if (grades.length === 0) return [];\n  if (grades.length === 1) {\n    if (grades[0] >= 4.0) {\n      grade = 'A+';\n    } else if (grades[0] > 3.7) {\n      grade = 'A';\n    } else if (grades[0] > 3.3) {\n      grade = 'A-';\n    } else if (grades[0] > 2.7) {\n      grade = 'B+';\n    } else if (grades[0] > 2.3) {\n      grade = 'B';\n    } else if (grades[0] > 1.7) {\n      grade = 'B-';\n    } else if (grades[0] > 1.3) {\n      grade = 'C+';\n    } else if (grades[0] > 1.0) {\n      grade = 'C';\n    } else if (grades[0] > 0.7) {\n      grade = 'C-';\n    } else if (grades[0] > 0.0) {\n      grade = 'D+';\n    } else {\n      grade = 'D';\n    }\n  } else {\n    if (grades[0] >= 4.0) {\n      grade = 'A+';\n    } else if (grades[0] > 3.7) {\n      grade = 'A';\n    } else if (grades[0] > 3.3) {\n      grade = 'A-';\n    } else if (grades[0] > 2.7) {\n      grade = 'B+';\n    } else if (grades[0] > 2.3) {\n      grade = 'B';\n    } else if (grades[0] > 1.7) {\n      grade = 'B-';\n    } else if (grades[0] > 1.3) {\n      grade = 'C+';\n    } else if (grades[0] > 1.0) {\n      grade = 'C';\n    } else if (grades[0] > 0.7) {\n      grade = 'C-';\n    } else if (grades[0] > 0.0) {\n      grade = 'D+';\n    } else {\n      grade = 'D';\n    }\n    for (let i = 1; i < grades.length; i++) {\n      if (grades[i] >= 4.0) {\n        grade = 'A+';\n      } else if (grades[i] > 3.7) {\n        grade = 'A';\n      } else if (grades[i] > 3.3) {\n        grade = 'A-';\n      } else if (grades[i] > 2.7) {\n        grade = 'B+';\n      } else if (grades[i] > 2.3) {\n        grade = 'B';\n      } else if (grades[i] > 1.7) {\n        grade = 'B-';\n      } else if (grades[i] > 1.3) {\n        grade = 'C+';\n      } else if (grades[i] > 1.0) {\n        grade = 'C';\n      } else if (grades[i] > 0.7) {\n        grade = 'C-';\n      } else if (grades[i] > 0.0) {\n        grade = 'D+';\n      } else {\n        grade = 'D';\n      }\n    }\n  }\n  return grade;\n};\n\nconst letterGrade = (grades) => {\n  let grade = 'D';\n  if (grades.length === 0) return [];\n  if (grades.length === 1) {\n    if (grades[0] >= 4.0) {\n      grade = 'A+';\n    } else if (grades[0] > 3.7) {\n      grade = 'A';\n    } else if (grades[0] > 3.3) {\n      grade = 'A-';\n    } else if (grades[0] > 2.7) {\n      grade = 'B+';\n    } else if (grades[0] > 2.3) {\n      grade = 'B';\n    } else if (grades[0] > 1.7) {\n      grade = 'B-';\n    } else if (grades[0] > 1.3) {\n      grade = 'C+';\n    } else if (grades[0] > 1.0) {\n      grade = 'C';\n    } else if (grades[0] > 0.7) {\n      grade = 'C-';\n    } else if (grades[0] > 0.0) {\n      grade = 'D+';\n    } else {\n      grade = 'D';\n    }\n  } else {\n    if (grades[0] >= 4.0) {\n      grade = 'A+';\n    } else if (grades[0] > 3.7) {\n      grade = 'A';\n    } else if (grades[0] > 3.3) {\n      grade = 'A-';\n    } else if (grades[0] > 2.7) {\n      grade = 'B+';\n    } else if (grades[0] > 2.3) {\n      grade = 'B';\n    } else if (grades[0] > 1"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns come back true if the string\n   length duration is a prime number act or false otherwise differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a string and returns come back true if the string\n   length duration is a prime number act or false otherwise differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let number = 0,\n    prime = 2,\n    i = 3;\n\n  while (i < string.length) {\n    if (string.charAt(i) === string.charAt(i - 2)) {\n      number += 1;\n    }\n\n    if (number === 2) {\n      if (string.charAt(i) === string.charAt(i - 3)) {\n        number += 1;\n      }\n    }\n\n    if (number === 3) {\n      if (string.charAt(i) === string.charAt(i - 4)) {\n        number += 1;\n      }\n    }\n\n    if (number > 4) {\n      prime = false;\n    }\n\n    i += 1;\n  }\n\n  return prime;\n};\n\nconsole.log(primeLength('abcdcba'));\nconsole.log(primeLength('kittens'));\nconsole.log(primeLength('orange'));\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers issue of n-digit\n   positive integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers issue of n-digit\n   positive integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n   const result = {\n      0: 0,\n      1: 1,\n      2: 2,\n      3: 2,\n      4: 3,\n      5: 3,\n      6: 3,\n      7: 3,\n      8: 4,\n      9: 4,\n      10: 4,\n      11: 4,\n      12: 4,\n      13: 4,\n      14: 4,\n      15: 4,\n      16: 4,\n      17: 4,\n      18: 4,\n      19: 4,\n      20: 4,\n      21: 4,\n      22: 4,\n      23: 4,\n      24: 4,\n      25: 4,\n      26: 4,\n      27: 4,\n      28: 4,\n      29: 4,\n      30: 4,\n      31: 4,\n      32: 4,\n      33: 4,\n      34: 4,\n      35: 4,\n      36: 4,\n      37: 4,\n      38: 4,\n      39: 4,\n      40: 4,\n      41: 4,\n      42: 4,\n      43: 4,\n      44: 4,\n      45: 4,\n      46: 4,\n      47: 4,\n      48: 4,\n      49: 4,\n      50: 4,\n      51: 4,\n      52: 4,\n      53: 4,\n      54: 4,\n      55: 4,\n      56: 4,\n      57: 4,\n      58: 4,\n      59: 4,\n      60: 4,\n      61: 4,\n      62: 4,\n      63: 4,\n      64: 4,\n      65: 4,\n      66: 4,\n      67: 4,\n      68: 4,\n      69: 4,\n      70: 4,\n      71: 4,\n      72: 4,\n      73: 4,\n      74: 4,\n      75: 4,\n      76: 4,\n      77: 4,\n      78: 4,\n      79: 4,\n      80: 4,\n      81: 4,\n      82: 4,\n      83: 4,\n      84: 4,\n      85: 4,\n      86: 4,\n      87: 4,\n      88: 4,\n      89: 4,\n      90: 4,\n      91: 4,\n      92: 4,\n      93: 4,\n      94: 4,\n      95: 4,\n      96: 4,\n      97: 4,\n      98: 4,\n      99: 4,\n      100: 4,\n      101: 4,\n      102: 4,\n      103: 4,\n      104: 4,\n      105: 4,\n      106: 4,\n      107: 4,\n      108: 4,\n      109: 4,\n      110: 4,\n      111: 4,\n      112: 4,\n      113: 4,\n      114: 4,\n      115: 4,\n      116: 4,\n      117: 4,\n      118: 4,\n      119: 4,\n      120: 4,\n      121: 4,\n      122: 4,\n      123: 4,\n      124: 4,\n      125: 4,\n      126: 4,\n      127: 4,\n      128: 4,\n      129: 4,\n      130: 4,\n      131: 4,\n      132: 4,\n      133: 4,\n      134: 4,\n      135: 4,\n      136: 4,\n      137: 4,\n      138: 4,\n      139: 4,\n      140: 4,\n      141: 4,\n      142: 4,\n      143: 4,\n      144: 4,\n      145: 4,\n      146: 4,\n      147: 4,\n      148: 4,\n      149: 4,\n      150: 4,\n      151: 4,\n      152: 4,\n      153: 4,\n      154: 4,\n      155: 4,\n      156: 4,\n      157: 4,\n      158: 4,\n      159: 4,\n      160: 4,\n      161: 4,\n      162: 4,\n      163: 4,\n      164: 4,\n      165: 4,\n      166: 4,\n      167: 4,\n      168: 4,\n      169: 4,\n      170: 4,\n      171: 4,\n      172: 4,\n      173: 4,\n      174: 4,\n      175: 4,\n      176: 4,\n      177: 4,\n      178: 4,\n      179: 4,\n      180: 4,\n      181: 4,\n      182: 4,\n      183: 4,\n      184: 4,\n      185: 4,\n      186: 4,\n      187: 4,\n      188: 4,\n      189: 4,\n      190: 4,\n      191: 4,\n      192: 4,\n      193: 4,\n      194: 4,\n      195: 4,\n      196: 4,\n      197: 4,\n      198: 4,\n      199: 4,\n      200: 4,\n      201: 4,\n      202: 4,\n      203: 4,\n      204: 4,\n      205: 4,\n      206: 4,\n      207: 4,\n      208: 4,\n      209: 4,\n      210: 4,\n      211: 4,\n      212: 4,\n      213: 4,\n      214: 4,\n      215: 4,\n      216: 4,\n      217: 4,\n      218: 4,\n      219: 4,\n      220: 4,\n      221: 4,\n      222: 4,\n      223: 4,\n      224: 4,\n      225: 4,\n      226: 4,\n      227: 4,\n      228: 4,\n      229: 4,\n      230: 4,\n      231: 4,\n      232: 4,\n      233: 4,\n      234: 4,\n      235: 4,\n      236: 4,\n      237: 4,\n      238: 4,\n      239: 4,\n      240: 4,\n      241: 4,\n      242: 4,\n      243: 4,\n      244: 4,\n      245: 4,\n      246"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let binary = N.toString(2).split('');\n  let binarySum = 0;\n  binary.forEach((digit, index) => {\n    binarySum += parseInt(digit);\n    binary.splice(index, 1);\n  });\n  return binarySum;\n};\n\nconsole.log(solve(147)); // 1100\nconsole.log(solve(1000)); // 1\nconsole.log(solve(2000)); // 11\nconsole.log(solve(3000)); // 1110\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const arr = []\n  const index = 1\n  const sum = 0\n  const i = 0\n  while (i < lst.length) {\n    sum = sum + lst[i]\n    if (i % 2 === 1) {\n      arr.push(sum)\n      sum = 0\n    }\n    i = i + 1\n  }\n  return arr\n}\n\n/*\n  Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const arr = []\n  const index = 1\n  const sum = 0\n  const i = 0\n  while (i < lst.length) {\n    sum = sum + lst[i]\n    if (i % 2 === 1) {\n      arr.push(sum)\n      sum = 0\n    }\n    i = i + 1\n  }\n  return arr\n}\n\n/*\n  Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const arr = []\n  const index = 1\n  const sum = 0\n  const i = 0\n  while (i < lst.length) {\n    sum = sum + lst[i]\n    if (i % 2 === 1) {\n      arr.push(sum)\n      sum = 0\n    }\n    i = i + 1\n  }\n  return arr\n}\n\n/*\n  Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const arr = []\n  const index = 1\n  const sum = 0\n  const i = 0\n  while (i < lst.length) {\n    sum = sum + lst[i]\n    if (i % 2 === 1) {\n      arr.push(sum)\n      sum = 0\n    }\n    i = i + 1\n  }\n  return arr\n}\n\n/*\n  Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const arr = []\n  const index = 1\n  const sum = 0\n  const i = 0\n  while (i < lst.length) {\n    sum = sum + lst[i]\n    if (i % 2 === 1) {\n      arr.push(sum)\n      sum = 0\n    }\n    i = i + 1\n  }\n  return arr\n}\n\n/*\n  Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const arr = []\n  const index = 1\n  const sum = 0\n  const i = 0\n  while (i < lst.length) {\n    sum = sum + lst[i]\n    if (i % 2 === 1) {\n      arr.push(sum)\n      sum = 0\n    }\n    i = i + 1\n  }\n  return arr\n}\n\n/*\n  Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const arr = []\n  const index = 1\n  const sum = 0\n  const i = 0\n  while (i < lst.length) {\n    sum = sum + lst[i]\n    if (i % 2 === 1) {\n      arr.push(sum)\n      sum = 0\n    }\n    i = i + 1\n  }\n  return arr\n}\n\n/*\n  Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const arr = []\n  const index = 1\n  const sum = 0\n  const i = 0\n  while (i < lst.length) {\n    sum = sum + lst[i]\n    if (i % 2 === 1) {\n      arr.push(sum)\n      sum = 0\n    }\n    i = i + 1\n  }\n  return arr\n}\n\n/*\n  Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const arr = []\n  const index = 1\n  const sum = 0\n  const i = 0\n  while (i < lst.length) {\n    sum = sum + lst[i]\n    if (i % 2 === 1) {\n      arr.push(sum)\n      sum = 0\n    }\n    i = i + 1\n  }\n  return arr\n}\n\n/*\n  Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const arr = []\n  const index = 1\n  const sum = 0\n  const i = 0\n  while (i < lst.length) {\n    sum = sum + lst[i]\n    if (i % 2 === 1) {\n      arr.push(sum)\n      sum = 0\n    }\n    i = i + 1\n  }\n  return arr\n}\n\n/*\n  Given a non - empty list of integers lst. add the even elements"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes claim a string and returns come back an ordered version translation of it. \n   Ordered version translation of string, is a string chain where all words (separated by space) \n   are replaced substitute by a new modern word discussion where all the characters quality arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes claim a string and returns come back an ordered version translation of it. \n   Ordered version translation of string, is a string chain where all words (separated by space) \n   are replaced substitute by a new modern word discussion where all the characters quality arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let temp = s.split('');\n  let res = [];\n  let counter = 0;\n  while (counter < temp.length) {\n    let current = temp[counter];\n    let count = temp[counter + 1];\n    let replace = current + count.charCodeAt(0);\n    res.push(replace);\n    counter = counter + 2;\n  }\n  return res.join('');\n};\n\nconsole.log(antiShuffle('Hi'));\nconsole.log(antiShuffle('hello'));\nconsole.log(antiShuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested cuddle lists, \n   which is similar like to matrix, however, unlike matrices, \n   each row course may contain a different unlike number of columns column. \n   Given feed lst, and integer x, find rule integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row rowing, columns), starting with 0. \n   Sort coordinates coordinate initially by rows course in ascending rise order. \n   Also, sort coordinates of the row by columns column in descending order orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested cuddle lists, \n   which is similar like to matrix, however, unlike matrices, \n   each row course may contain a different unlike number of columns column. \n   Given feed lst, and integer x, find rule integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row rowing, columns), starting with 0. \n   Sort coordinates coordinate initially by rows course in ascending rise order. \n   Also, sort coordinates of the row by columns column in descending order orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  if (!lst ||!lst.length) return []\n  return lst.map(row => row.map(row => (x === row.length? x : row.length)))\n   .filter(row => row.filter(row => row.length > 1).length > 0)\n   .sort((row1, row2) => row1.length - row2.length)\n   .sort((row1, row2) => row1[row1.length - 1] - row2[row2.length - 1])\n   .map(row => row.map(row => row.length))\n}\n\nconsole.log(getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1))\n\nconst getRow = (lst, x) => {\n  if (!lst ||!lst.length) return []\n  return lst.map(row => row.map(row => (x === row.length? x : row.length)))\n   .filter(row => row.filter(row => row.length > 1).length > 0)\n   .sort((row1, row2) => row1.length - row2.length)\n   .sort((row1, row2) => row1[row1.length - 1] - row2[row2.length - 1])\n   .map(row => row.map(row => row.length))\n}\n\nconsole.log(getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1))\n\nconst getRow = (lst, x) => {\n  if (!lst ||!lst.length) return []\n  return lst.map(row => row.map(row => (x === row.length? x : row.length)))\n   .filter(row => row.filter(row => row.length > 1).length > 0)\n   .sort((row1, row2) => row1.length - row2.length)\n   .sort((row1, row2) => row1[row1.length - 1] - row2[row2.length - 1])\n   .map(row => row.map(row => row.length))\n}\n\nconsole.log(getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1))\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integers integer, return a copy of the given give array after sorting, \n   you will sort the given impart array in ascending order decree if the sum (first inaugural index exponent value, last index value) is odd curious, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non - negative integers integer, return a copy of the given give array after sorting, \n   you will sort the given impart array in ascending order decree if the sum (first inaugural index exponent value, last index value) is odd curious, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n    let temp = array.slice();\n    array.sort((a, b) => {\n        if (a > b) {\n            return 1;\n        } else if (a < b) {\n            return -1;\n        } else {\n            return 0;\n        }\n    });\n    if (array.reduce((x, y) => x + y, 0) % 2 == 1) {\n        array.reverse();\n    }\n    return array;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string drawstring as an argument and \n   returns come back a string encrypted code with the alphabet being rotated rotate. \n   The alphabet should be rotated revolve in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takes a string drawstring as an argument and \n   returns come back a string encrypted code with the alphabet being rotated rotate. \n   The alphabet should be rotated revolve in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  return s.split('').map(\n    (char, index) =>\n      (char === 'a'? 'e' :\n        char === 'b'? 'f' :\n        char === 'c'? 'g' :\n        char === 'd'? 'h' :\n        char === 'e'? 'i' :\n        char === 'f'? 'j' :\n        char === 'g'? 'k' :\n        char === 'h'? 'l' :\n        char === 'i'?'m' :\n        char === 'j'? 'n' :\n        char === 'k'? 'o' :\n        char === 'l'? 'p' :\n        char ==='m'? 'q' :\n        char === 'n'? 'r' :\n        char === 'o'?'s' :\n        char === 'p'? 't' :\n        char === 'q'? 'u' :\n        char === 'r'? 'v' :\n        char ==='s'? 'w' :\n        char === 't'? 'x' :\n        char === 'u'? 'y' :\n        char === 'v'? 'z' :\n        char === 'w'? '0' :\n        char === 'x'? '1' :\n        char === 'y'? '2' :\n        char === 'z'? '3' : ''\n      )\n  ).join('')\n}\n\nconst decrypt = (s) => {\n  return s.split('').reverse().map(\n    (char, index) =>\n      (char === 'e'? 'a' :\n        char === 'f'? 'b' :\n        char === 'g'? 'c' :\n        char === 'h'? 'd' :\n        char === 'i'? 'e' :\n        char === 'j'? 'f' :\n        char === 'k'? 'g' :\n        char === 'l'? 'h' :\n        char ==='m'? 'i' :\n        char === 'n'? 'j' :\n        char === 'o'? 'k' :\n        char === 'p'? 'l' :\n        char === 'q'?'m' :\n        char === 'r'? 'n' :\n        char ==='s'? 'o' :\n        char === 't'? 'p' :\n        char === 'u'? 'q' :\n        char === 'v'? 'r' :\n        char === 'w'?'s' :\n        char === 'x'? 't' :\n        char === 'y'? 'u' :\n        char === 'z'? 'v' :\n        char === '0'? 'w' :\n        char === '1'? 'x' :\n        char === '2'? 'y' :\n        char === '3'? 'z' : ''\n      )\n  ).join('')\n}\n\n/*\n  * Main\n  *\n  * This function is called by the Node program\n  */\n\nconst main = (args) => {\n  if (args.length === 0) {\n    console.log('Please specify an input string')\n  } else {\n    const input = args[0]\n    const encrypted = encrypt(input)\n    console.log(encrypted)\n    const decrypted = decrypt(encrypted)\n    console.log(decrypted)\n  }\n}\n\nmain(process.argv.slice(2))\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write publish a function nextSmallest() that returns come back the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   Write publish a function nextSmallest() that returns come back the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n  let nextSmallest = (lst) = > {\n  if (lst.length <= 1) return null;\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words password, and your task is to count consider the number \n   of boredoms boredom. A boredom is a sentence that starts depart with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words password, and your task is to count consider the number \n   of boredoms boredom. A boredom is a sentence that starts depart with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n    let len = S.length\n    let cnt = 0\n    for (let i = 0; i < len; i++) {\n        if (S[i] === 'I') {\n            cnt++\n        }\n    }\n    return cnt\n}\n\nconsole.log(isBored(\"Hello world\"))\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather\"))\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather\"))\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes claim 3 numbers. \n   Returns return key true if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes claim 3 numbers. \n   Returns return key true if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false\n  }\n  return x + y === z && (isFinite(x) && isFinite(y) && isFinite(z))\n}\n\nexport default anyInt\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes claim a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places plaza ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes claim a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places plaza ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    let enc = '';\n    for (let i = 0; i < message.length; i++) {\n        let current = message.charAt(i);\n        if (current == 'a' || current == 'A' || current == 'e' || current == 'E' || current == 'i' || current == 'I' || current == 'o' || current == 'O' || current == 'u' || current == 'U') {\n            enc += current.toUpperCase();\n        } else {\n            enc += current;\n        }\n    }\n    return enc;\n}\n\nconsole.log(encode('test'));\nconsole.log(encode('This is a message'));\n\n//Write your code here<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need necessitate to find the largest big prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers. \n   You need necessitate to find the largest big prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let prime = 0;\n    for (let i = 1; i <= lst.length; i++) {\n        if (lst[i - 1]!== 0) {\n            prime = i;\n            break;\n        }\n    }\n    let digits = 0;\n    let sum = 0;\n    while (prime) {\n        digits = lst.slice(0, prime);\n        sum += parseInt(digits.join(''));\n        lst.splice(0, prime);\n        prime = 0;\n        for (let i = 1; i <= lst.length; i++) {\n            if (lst[i - 1]!== 0) {\n                prime = i;\n                break;\n            }\n        }\n    }\n    return sum;\n};\n\nmodule.exports = skjkasdkd;\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys samara are strings in lower gloomy \n   case or all keys keystone are strings in upper case lawsuit, else return false. \n   The function should return false is the given sacrifice dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys samara are strings in lower gloomy \n   case or all keys keystone are strings in upper case lawsuit, else return false. \n   The function should return false is the given sacrifice dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const hasLowercase = Object.keys(dict).every((key) => (\n    key.toLowerCase() === key.toUpperCase()\n  ));\n  const hasUppercase = Object.keys(dict).every((key) => (\n    key.toLowerCase() === key.toUpperCase()\n  ));\n  return hasLowercase && hasUppercase;\n};\n\n/*\n  Given a string, return a boolean indicating whether the string contains an\n   uppercase letter.\n  Examples:\n  checkUpperCase(\"Apple\") should return false.\n  checkUpperCase(\"APPLE\") should return true.\n  checkUpperCase(\"123\") should return false.\n  checkUpperCase(\"abC\") should return true.\n  */\nconst checkUpperCase = (string) => {\n  return string.includes(string.toUpperCase());\n};\n\n/*\n  Given a string, return a boolean indicating whether the string contains an\n   lowercase letter.\n  Examples:\n  checkLowerCase(\"apple\") should return true.\n  checkLowerCase(\"apple\") should return false.\n  checkLowerCase(\"123\") should return true.\n  checkLowerCase(\"abC\") should return false.\n  */\nconst checkLowerCase = (string) => {\n  return string.includes(string.toLowerCase());\n};\n\n/*\n  Given a string, return a boolean indicating whether the string contains any\n   uppercase letters.\n  Examples:\n  checkHasUppercase(\"Apple\") should return false.\n  checkHasUppercase(\"APPLE\") should return true.\n  checkHasUppercase(\"123\") should return false.\n  checkHasUppercase(\"abC\") should return true.\n  */\nconst checkHasUppercase = (string) => {\n  return string.includes(string.toUpperCase());\n};\n\n/*\n  Given a string, return a boolean indicating whether the string contains any\n   lowercase letters.\n  Examples:\n  checkHasLowercase(\"apple\") should return true.\n  checkHasLowercase(\"Apple\") should return false.\n  checkHasLowercase(\"123\") should return true.\n  checkHasLowercase(\"abC\") should return false.\n  */\nconst checkHasLowercase = (string) => {\n  return string.includes(string.toLowerCase());\n};\n\n/*\n  Given a string, return a boolean indicating whether the string contains any\n   upper case letter followed by a lower case letter.\n  Examples:\n  checkHasUpperCaseAndLowerCase(\"Apple\") should return true.\n  checkHasUpperCaseAndLowerCase(\"APPLE\") should return false.\n  checkHasUpperCaseAndLowerCase(\"123\") should return false.\n  checkHasUpperCaseAndLowerCase(\"abC\") should return true.\n  */\nconst checkHasUpperCaseAndLowerCase = (string) => {\n  const hasUpperCase = checkHasUppercase(string);\n  const hasLowerCase = checkHasLowercase(string);\n  return hasUpperCase && hasLowerCase;\n};\n\n/*\n  Given a string, return a boolean indicating whether the string contains any\n   lower case letter followed by a upper case letter.\n  Examples:\n  checkHasLowerCaseAndUpperCase(\"Apple\") should return true.\n  checkHasLowerCaseAndUpperCase(\"Apple\") should return false.\n  checkHasLowerCaseAndUpperCase(\"123\") should return false.\n  checkHasLowerCaseAndUpperCase(\"abC\") should return true.\n  */\nconst checkHasLowerCaseAndUpperCase = (string) => {\n  const hasLowerCase = checkHasLowercase(string);\n  const hasUpperCase = checkHasUppercase(string);\n  return hasLowerCase && hasUpperCase;\n};\n\n/*\n  Given a string, return a boolean indicating whether the string contains any\n   upper case letter followed by a lower case letter.\n  Examples:\n  checkHasUpperCaseAndLowerCase(\"Apple\") should return true.\n  checkHasUpperCaseAndLowerCase(\"Apple\") should return false.\n  checkHasUpperCaseAndLowerCase(\"123\") should return false.\n  checkHasUpperCaseAndLowerCase(\"abC\") should return true.\n  */\nconst checkHasUpperCaseAndLowerCase = (string) => {\n  const hasUpperCase = checkHasUppercase(string);\n  const hasLowerCase = checkHasLowercase(string);\n  return hasUpperCase && hasLowerCase;\n};\n\n/*\n  Given a string, return a boolean indicating whether the string contains any\n   lower case letter followed by a upper case letter.\n  Examples:\n  checkHasLowerCaseAndUpperCase(\"Apple\") should return true.\n  checkHasLowerCaseAndUpperCase(\"Apple\") should return false.\n  checkHasLowerCaseAndUpperCase(\"123\") should return false.\n  checkHasLowerCaseAndUpperCase(\"abC\") should return true.\n  */\nconst checkHasLowerCaseAndUpperCase = (string) => {\n  const hasLowerCase = checkHasLowercase(string);\n  const hasUpperCase = checkHasUppercase(string);\n  return hasLowerCase && hasUpperCase;\n};\n\n/*\n  Given a string, return a boolean indicating whether the string contains any\n   upper case letter followed by a lower case letter.\n  Examples:\n  checkHasLowerCaseAndUpperCase(\"Apple\") should return true.\n  checkHasLowerCaseAndUpperCase(\"Apple\") should return false.\n  checkHasLowerCaseAndUpperCase(\"123\") should return false.\n  checkHasLowerCaseAndUpperCase(\"abC\") should return true.\n  */\nconst checkHasUpperCaseAndLowerCase = (string) => {\n  const has"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const isPrime = (x) => {\n    const divisor = 2;\n    while (divisor <= x) {\n      if (x % divisor === 0) {\n        return false;\n      }\n      divisor += 1;\n    }\n    return true;\n  };\n\n  const isPrimes = (n) => {\n    let i = 2;\n    while (i < n) {\n      if (isPrime(i)) {\n        return true;\n      }\n      i += 1;\n    }\n    return false;\n  };\n\n  const result = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  const digits = [...a,...b];\n  const result = {\n    digit: 0,\n    sign: false\n  };\n  const zeroIndex = digits.indexOf(0);\n\n  if (zeroIndex!== -1) {\n    return 0;\n  }\n\n  for (let i = 0; i < digits.length; i++) {\n    const digit = digits[i];\n    const sign = (digit > 0)? true : false;\n    const n = Math.abs(digit);\n    const count = (digit === 0)? 1 : (digit === 1)? 1 : 0;\n\n    const value = n * count;\n    const isNegative = (digit < 0)? true : false;\n\n    result.digit = value;\n    result.sign = isNegative;\n  }\n\n  return result;\n};\n\nexport default multiply;\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count consider the number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count consider the number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const len = s.length\n  if (len % 2 === 1) return 0\n  const isUpper = s.match(/[A-Z]/)\n  return isUpper.length\n}\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes claim a value (string) representing defend a number \n   and returns hark back the closest integer to it. If the number numeral is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes claim a value (string) representing defend a number \n   and returns hark back the closest integer to it. If the number numeral is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const numeral = parseInt(value, 10);\n  const min = Math.min(numeral, Math.ceil(numeral));\n  const max = Math.max(numeral, Math.floor(numeral));\n  const dist = Math.abs(min - numeral);\n  if (dist < max - min) {\n    return min;\n  } else if (dist > max - min) {\n    return max;\n  } else {\n    return Math.round(numeral);\n  }\n};\n\n// Note:\n// This is one of the first two questions in this quiz.\n// It is important to understand how to round numbers.\n// Think about rounding a number up to the next multiple of ten.\n// What happens if you round up to a number that is greater than ten?\n// You have to use round(number, n) to round up to n.\n// In other words, if you round up to a number greater than ten,\n// you have to round up to ten.\n// If you round up to a number that is less than ten, you have to round up to ten.\n// So, if you want to round up to a number less than ten, you need to round up to ten.\n// But, if you round up to a number that is greater than ten, you have to round up to ten.\n// So, if you want to round up to a number greater than ten, you need to round up to ten.\n// You can use the round() function to round up to ten, if you want to round up to a number less than ten.\n// What about rounding up to ten?\n// Again, you have to use round(number, n) to round up to n.\n// In other words, if you round up to a number greater than ten, you have to round up to ten.\n// But, if you round up to a number less than ten, you have to round up to ten.\n// So, if you want to round up to a number greater than ten, you need to round up to ten.\n// But, if you round up to a number less than ten, you have to round up to ten.\n// You can use the round() function to round up to ten, if you want to round up to a number less than ten.\n// What about rounding up to zero?\n// Again, you have to use round(number, n) to round up to n.\n// In other words, if you round up to a number greater than ten, you have to round up to ten.\n// But, if you round up to a number less than ten, you have to round up to ten.\n// So, if you want to round up to a number greater than ten, you need to round up to ten.\n// But, if you round up to a number less than ten, you have to round up to ten.\n// You can use the round() function to round up to ten, if you want to round up to zero.\n// The answer for this question is 5.\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make name a pile of n levels grade of stones. \n   The first inaugural level has n stones gem. \n   The number of stones rock in the next level is: \n       - the next odd curious number if n is odd. \n       - the next future even tied number if n is even. \n   Return the number of stones in each level horizontal surface in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to make name a pile of n levels grade of stones. \n   The first inaugural level has n stones gem. \n   The number of stones rock in the next level is: \n       - the next odd curious number if n is odd. \n       - the next future even tied number if n is even. \n   Return the number of stones in each level horizontal surface in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const odd = (n) => n % 2 === 1? n : n + 1;\n  const even = (n) => n % 2 === 0? n : n + 2;\n  const oddFuture = (n) => n + 2;\n  const evenFuture = (n) => n + 1;\n  return [\n    n,\n    odd(n),\n    oddFuture(n),\n    even(n),\n    evenFuture(n)\n  ].map((x) => x);\n};\n\nconst makeAPile2 = (n) => {\n  const odd = (n) => n % 2 === 1? n : n + 1;\n  const even = (n) => n % 2 === 0? n : n + 2;\n  const oddFuture = (n) => n + 2;\n  const evenFuture = (n) => n + 1;\n  return [\n    n,\n    odd(n),\n    oddFuture(n),\n    even(n),\n    evenFuture(n)\n  ].map((x) => x);\n};\n\nconst makeAPile3 = (n) => {\n  const odd = (n) => n % 2 === 1? n : n + 1;\n  const even = (n) => n % 2 === 0? n : n + 2;\n  const oddFuture = (n) => n + 2;\n  const evenFuture = (n) => n + 1;\n  return [\n    n,\n    odd(n),\n    oddFuture(n),\n    even(n),\n    evenFuture(n)\n  ].map((x) => x);\n};\n\nconst makeAPile4 = (n) => {\n  const odd = (n) => n % 2 === 1? n : n + 1;\n  const even = (n) => n % 2 === 0? n : n + 2;\n  const oddFuture = (n) => n + 2;\n  const evenFuture = (n) => n + 1;\n  return [\n    n,\n    odd(n),\n    oddFuture(n),\n    even(n),\n    evenFuture(n)\n  ].map((x) => x);\n};\n\nconst makeAPile5 = (n) => {\n  const odd = (n) => n % 2 === 1? n : n + 1;\n  const even = (n) => n % 2 === 0? n : n + 2;\n  const oddFuture = (n) => n + 2;\n  const evenFuture = (n) => n + 1;\n  return [\n    n,\n    odd(n),\n    oddFuture(n),\n    even(n),\n    evenFuture(n)\n  ].map((x) => x);\n};\n\nconst makeAPile6 = (n) => {\n  const odd = (n) => n % 2 === 1? n : n + 1;\n  const even = (n) => n % 2 === 0? n : n + 2;\n  const oddFuture = (n) => n + 2;\n  const evenFuture = (n) => n + 1;\n  return [\n    n,\n    odd(n),\n    oddFuture(n),\n    even(n),\n    evenFuture(n)\n  ].map((x) => x);\n};\n\nconst makeAPile7 = (n) => {\n  const odd = (n) => n % 2 === 1? n : n + 1;\n  const even = (n) => n % 2 === 0? n : n + 2;\n  const oddFuture = (n) => n + 2;\n  const evenFuture = (n) => n + 1;\n  return [\n    n,\n    odd(n),\n    oddFuture(n),\n    even(n),\n    evenFuture(n)\n  ].map((x) => x);\n};\n\nconst makeAPile8 = (n) => {\n  const odd = (n) => n % 2 === 1? n : n + 1;\n  const even = (n) => n % 2 === 0? n : n + 2;\n  const oddFuture = (n) => n + 2;\n  const evenFuture = (n) => n + 1;\n  return [\n    n,\n    odd(n),\n    oddFuture(n),\n    even(n),\n    evenFuture(n)\n  ].map((x) => x);\n};\n\nconst makeAPile9 = (n) => {\n  const odd = (n) => n % 2 === 1? n : n + 1;\n  const even = (n) => n % 2 === 0? n : n + 2;\n  const oddFuture = (n) => n + 2;\n  const evenFuture = (n) => n + 1;\n  return [\n    n,\n    odd(n),\n    oddFuture(n),\n    even(n),\n    evenFuture(n)\n  ].map((x) => x);\n};\n\nconst makeAPile10 = (n) => {\n  const odd = (n) => n % 2 === 1? n : n + 1;\n  const even = (n) => n % 2 === 0? n : n + 2;\n  const oddFuture = (n) => n + 2;\n  const evenFuture = (n) => n + 1;\n  return [\n    n,\n    odd(n),\n    oddFuture(n),\n    even(n),\n    evenFuture(n)\n  ].map((x) => x);\n};\n\nconst makeAPile11 = (n) => {\n  const odd = (n) => n % 2 === 1? n : n + 1;\n  const even = (n) => n % 2 === 0? n : n + 2;\n  const oddFuture = (n) => n + 2;\n  const evenFuture = (n) => n + 1;\n  return [\n    n,\n    odd(n),\n    oddFuture(n),"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words password separated by commas comma or spaces. Your task job is \n   to split the string bowed stringed instrument into words and return an array of the words son.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of words password separated by commas comma or spaces. Your task job is \n   to split the string bowed stringed instrument into words and return an array of the words son.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/(\\s+|,|;)/)\n}\n\n/*\n  You will be given an array of words, and your job is to return an array of the words that are capitalised.\n  For example:\n  wordsArray = [\"One\", \"Two\", \"Three\", \"Four\"]\n  wordsCapitalisedArray = [\"One\", \"Two\", \"Three\", \"Four\"]\n  */\nconst wordsCapitalisedArray = (words) => {\n  return words.map(word => word.toUpperCase())\n}\n\n/*\n  You will be given a string that is a combination of capitalised words separated by commas comma or spaces. \n  Your task job is to split the string into words and return an array of the words that are capitalised.\n  \n  For example:\n  wordsString(\"Hello, my name is John\") == [\"Hello\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsCapitalisedString = (s) => {\n  return s.split(/(\\s+|,|;)/)\n}\n\n/*\n  You will be given an array of words and your job is to return an array of the words that are in upper case.\n  \n  For example:\n  wordsArray = [\"One\", \"two\", \"three\", \"Four\"]\n  wordsInUpperCaseArray = [\"ONE\", \"TWO\", \"THREE\", \"FOUR\"]\n  */\nconst wordsInUpperCaseArray = (words) => {\n  return words.map(word => word.toUpperCase())\n}\n\n/*\n  Given a string, return the number of upper case letters in it.\n  For example:\n  upperCaseLetters(\"One two three\") == 3\n  upperCaseLetters(\"One, two, three\") == 3\n  upperCaseLetters(\"One two three Four\") == 4\n  */\nconst upperCaseLetters = (s) => {\n  return s.split(/[A-Z]/).length\n}\n\n/*\n  Given a string, return the number of lower case letters in it.\n  For example:\n  lowerCaseLetters(\"One two three\") == 2\n  lowerCaseLetters(\"one two three\") == 2\n  lowerCaseLetters(\"One, two, three\") == 2\n  */\nconst lowerCaseLetters = (s) => {\n  return s.split(/[a-z]/).length\n}\n\n/*\n  Given a string, return the number of letters in it.\n  For example:\n  letters(\"One two three\") == 3\n  letters(\"one two three\") == 3\n  letters(\"One, two, three\") == 3\n  */\nconst letters = (s) => {\n  return s.split(/[a-zA-Z]/).length\n}\n\n/*\n  Given a string, return the number of vowels in it.\n  For example:\n  vowels(\"One two three\") == 1\n  vowels(\"one two three\") == 1\n  vowels(\"one one\") == 1\n  vowels(\"One, two, three\") == 1\n  */\nconst vowels = (s) => {\n  return s.split(/[aeiou]/).length\n}\n\n/*\n  Given a string, return the number of consonants in it.\n  For example:\n  consonants(\"One two three\") == 2\n  consonants(\"one two three\") == 2\n  consonants(\"one one\") == 2\n  consonants(\"One, two, three\") == 2\n  */\nconst consonants = (s) => {\n  return s.split(/[aeiouA-Za-z]/).length\n}\n\n/*\n  Given a string, return the number of consonants and vowels in it.\n  For example:\n  consonantsVowels(\"One two three\") == 2\n  consonantsVowels(\"one two three\") == 2\n  consonantsVowels(\"one one\") == 2\n  consonantsVowels(\"One, two, three\") == 2\n  */\nconst consonantsVowels = (s) => {\n  return consonants(s) + vowels(s)\n}\n\n/*\n  Given a string, return the number of consonants, vowels and capitalised letters in it.\n  For example:\n  consonantsVowelsCapitalised(\"One two three\") == 3\n  consonantsVowelsCapitalised(\"one two three\") == 3\n  consonantsVowelsCapitalised(\"one one\") == 2\n  consonantsVowelsCapitalised(\"One, two, three\") == 3\n  */\nconst consonantsVowelsCapitalised = (s) => {\n  return consonants(s) + vowels(s) + upperCaseLetters(s)\n}\n\n/*\n  Given a string, return the number of consonants, vowels, capitalised letters and numbers in it.\n  For example:\n  consonantsVowelsCapitalisedNumbers(\"One two three\") == 4\n  consonantsVowelsCapitalisedNumbers(\"one two three\") == 4\n  consonantsVowelsCapitalisedNumbers(\"one one\") == 3\n  consonantsVowelsCapitalisedNumbers(\"One, two, three\") == 4\n  consonantsVowelsCapitalisedNumbers(\"1 2 3\") == 3\n  consonantsVowelsCapitalisedNumbers(\"1 two 3\") == 3\n  */\nconst consonantsVowelsCapitalisedNumbers = (s) => {\n  return consonantsVowelsCapitalised(s) + numbers(s)\n}\n\nmodule.exports = {\n  wordsString,\n  wordsCapitalisedString,\n  wordsArray,\n  wordsCapitalisedArray,\n  wordsInUpperCaseArray,\n  upperCaseLetters,\n  lowerCaseLetters,\n  letters,\n  vowels,\n  consonants,\n  consonantsV"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive convinced numbers x and y and returns come back the \n   biggest even integer number act that is in the range [x, y] inclusive. If \n   there's no such number numeral, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive convinced numbers x and y and returns come back the \n   biggest even integer number act that is in the range [x, y] inclusive. If \n   there's no such number numeral, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) return x;\n  if (x === 0) return 0;\n  if (y === 0) return 0;\n\n  if (x === 1) return y;\n  if (y === 1) return x;\n\n  if (x % 2 === 1) return chooseNum(x - 1, y);\n  if (y % 2 === 1) return chooseNum(x, y - 1);\n  return chooseNum(x / 2, y / 2);\n}\n\nmodule.exports = {\n  chooseNum\n}<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest cheeseparing integer and convert that to binary. \n   If n is greater capital than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest cheeseparing integer and convert that to binary. \n   If n is greater capital than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const result = (Math.floor(n/2) + Math.floor(m/2))/2;\n  if (n > m) {\n    return -1;\n  }\n  return (Math.floor(result) + \"\").replace(/\\d/g, (d) => (d + \"\").charAt(0));\n};\n\nconsole.log(roundedAvg(1, 5)); // \"0b11\"\nconsole.log(roundedAvg(7, 5)); // -1\nconsole.log(roundedAvg(10, 20)); // \"0b1111\"\nconsole.log(roundedAvg(20, 33)); // \"0b11010\"\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit. \n\n   Note: Returned list should be sorted screen in increasing order decree. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit. \n\n   Note: Returned list should be sorted screen in increasing order decree. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  return x.filter((n) => n % 2 === 0).sort((a, b) => a - b).filter((n) => n > 0).map((n) => n);\n}\n\n//console.log(uniqueDigits([15, 33, 1422, 1]));\n//console.log(uniqueDigits([152, 323, 1422, 10]));\n//console.log(uniqueDigits([100, 1, 100, 1]));<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let result = []\n  let len = arr.length\n  let i = 0\n  let j = len - 1\n  let arr1 = arr.slice(0)\n  while (i <= j) {\n    let cur = arr[i]\n    while (arr1[j] < cur) {\n      j--\n    }\n    if (arr1[j] > cur) {\n      j--\n    }\n    result.push(arr1[j])\n    i++\n    j--\n  }\n  return result\n}\n\nconst isOdd = (arr) => arr.length % 2 === 1\n\nconst sortOdd = (arr) => {\n  let result = []\n  let len = arr.length\n  let i = 0\n  let j = len - 1\n  while (i <= j) {\n    let cur = arr[i]\n    let next = arr[j]\n    if (isOdd(cur)) {\n      if (isOdd(next)) {\n        result.push(cur)\n        result.push(next)\n        i++\n        j--\n      } else {\n        result.push(cur)\n        j--\n      }\n    } else {\n      if (isOdd(next)) {\n        i++\n      } else {\n        j--\n      }\n    }\n  }\n  return result\n}\n\nconst reverse = (arr) => {\n  let result = []\n  let len = arr.length\n  let i = 0\n  let j = len - 1\n  while (i <= j) {\n    let cur = arr[i]\n    let next = arr[j]\n    result.push(next)\n    result.push(cur)\n    i++\n    j--\n  }\n  return result\n}\n\nconst getResult = (arr) => {\n  let result = sortOdd(arr)\n  if (isOdd(arr)) {\n    result = reverse(result)\n  }\n  return result\n}\n\n/*\n  Given a non-empty array, return the array without duplicate elements.\n  Note:\n    Your algorithm should use only constant extra space.\n    You may assume that it is possible to swap two elements.\n  Follow up:\n    Can you do it without recursion?\n*/\nconst withoutDuplicate = (arr) => {\n  let len = arr.length\n  let result = []\n  let i = 0\n  let j = len - 1\n  while (i <= j) {\n    let cur = arr[i]\n    let next = arr[j]\n    while (next!== cur) {\n      j--\n    }\n    if (i < j) {\n      result.push(cur)\n      i++\n      j--\n    }\n  }\n  return result\n}\n\nconst main = () => {\n  const arr = [1, 1, 1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 9, 10]\n  const result = getResult(arr)\n  console.log(result)\n  const result1 = withoutDuplicate(arr)\n  console.log(result1)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes claim n as a parameter, \n   and returns come back a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers act from 1 to i otherwise. \n   i starts get down from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takes claim n as a parameter, \n   and returns come back a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers act from 1 to i otherwise. \n   i starts get down from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    let count = 1;\n    while (i % 2 === 0) {\n      list.push(count);\n      count++;\n      i--;\n    }\n    list.push(i);\n  }\n  return list;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number phone number of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the number phone number of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const palindrome = []\n  let i = 2\n  while (i <= n) {\n    const newPalindrome = (n - i + 1) % 2 === 0? i : i + 1\n    palindrome.push(newPalindrome)\n    i += 2\n  }\n  return palindrome\n}\n\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = []\n  const oddPalindrome = []\n  let i = 2\n  while (i <= n) {\n    const newPalindrome = (n - i + 1) % 2 === 0? i : i + 1\n    if (newPalindrome % 2 === 0) {\n      evenPalindrome.push(newPalindrome)\n    } else {\n      oddPalindrome.push(newPalindrome)\n    }\n    i += 2\n  }\n  return [...evenPalindrome,...oddPalindrome]\n}\n\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = []\n  const oddPalindrome = []\n  let i = 2\n  while (i <= n) {\n    const newPalindrome = (n - i + 1) % 2 === 0? i : i + 1\n    if (newPalindrome % 2 === 0) {\n      evenPalindrome.push(newPalindrome)\n    } else {\n      oddPalindrome.push(newPalindrome)\n    }\n    i += 2\n  }\n  return [...evenPalindrome,...oddPalindrome]\n}\n\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = []\n  const oddPalindrome = []\n  let i = 2\n  while (i <= n) {\n    const newPalindrome = (n - i + 1) % 2 === 0? i : i + 1\n    if (newPalindrome % 2 === 0) {\n      evenPalindrome.push(newPalindrome)\n    } else {\n      oddPalindrome.push(newPalindrome)\n    }\n    i += 2\n  }\n  return [...evenPalindrome,...oddPalindrome]\n}\n\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = []\n  const oddPalindrome = []\n  let i = 2\n  while (i <= n) {\n    const newPalindrome = (n - i + 1) % 2 === 0? i : i + 1\n    if (newPalindrome % 2 === 0) {\n      evenPalindrome.push(newPalindrome)\n    } else {\n      oddPalindrome.push(newPalindrome)\n    }\n    i += 2\n  }\n  return [...evenPalindrome,...oddPalindrome]\n}\n\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = []\n  const oddPalindrome = []\n  let i = 2\n  while (i <= n) {\n    const newPalindrome = (n - i + 1) % 2 === 0? i : i + 1\n    if (newPalindrome % 2 === 0) {\n      evenPalindrome.push(newPalindrome)\n    } else {\n      oddPalindrome.push(newPalindrome)\n    }\n    i += 2\n  }\n  return [...evenPalindrome,...oddPalindrome]\n}\n\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = []\n  const oddPalindrome = []\n  let i = 2\n  while (i <= n) {\n    const newPalindrome = (n - i + 1) % 2 === 0? i : i + 1\n    if (newPalindrome % 2 === 0) {\n      evenPalindrome.push(newPalindrome)\n    } else {\n      oddPalindrome.push(newPalindrome)\n    }\n    i += 2\n  }\n  return [...evenPalindrome,...oddPalindrome]\n}\n\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = []\n  const oddPalindrome = []\n  let i = 2\n  while (i <= n) {\n    const newPalindrome = (n - i + 1) % 2 === 0? i : i + 1\n    if (newPalindrome % 2 === 0) {\n      evenPalindrome.push(newPalindrome)\n    } else {\n      oddPalindrome.push(newPalindrome)\n    }\n    i += 2\n  }\n  return [...evenPalindrome,...oddPalindrome]\n}\n\nconst evenOddPalindrome = (n) => {\n  const evenPalindrome = []\n  const oddPalindrome = []\n  let i = 2\n  while (i <= n) {\n    const newPalindrome = (n - i + 1) % 2 === 0? i : i + 1\n    if (newPalindrome % 2 === 0) {\n      evenPalindrome.push(newPalindrome)\n    } else {\n      oddPalindrome.push(newPalindrome)\n    }\n    i += 2\n  }\n  return [...evenPalindrome,...oddPalindrome]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes claim an array of integers and returns return key \n   the number of elements which has a sum union of digits > 0. \n   If a number numeral is negative, then its first inaugural signed bless digit will be negative: \n   e.g. for example -123 has signed sign digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which takes claim an array of integers and returns return key \n   the number of elements which has a sum union of digits > 0. \n   If a number numeral is negative, then its first inaugural signed bless digit will be negative: \n   e.g. for example -123 has signed sign digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const count = arr.reduce((acc, num) => {\n    if (num === 0) {\n      return acc;\n    }\n\n    let sign = Math.sign(num);\n    let i = 0;\n    while (num!== 0) {\n      if (num % 10 > 0) {\n        acc++;\n      }\n      num = num / 10;\n      i++;\n    }\n    return acc;\n  }, 0);\n  return count;\n};\n\nmodule.exports = countNums;\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordered rate. Your task is to determine specify if \n   it is possible to get beget an array sorted in non - decreasing order decree by performing \n   the following be operation on the given array: \n       You are allowed to perform do right shift operation any number numeral of times prison term. \n  \n   One right shift operation means mean shifting transfer all elements of the array by one \n   position placement in the right veracious direction. The last element component of the array will be moved to \n   the starting start position military position in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted array by performing the above operation process \n   then return true else return false. \n   If the given array is empty then return true. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordered rate. Your task is to determine specify if \n   it is possible to get beget an array sorted in non - decreasing order decree by performing \n   the following be operation on the given array: \n       You are allowed to perform do right shift operation any number numeral of times prison term. \n  \n   One right shift operation means mean shifting transfer all elements of the array by one \n   position placement in the right veracious direction. The last element component of the array will be moved to \n   the starting start position military position in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted array by performing the above operation process \n   then return true else return false. \n   If the given array is empty then return true. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (!arr) return true\n  if (arr.length === 0) return true\n  return moveOneBall(arr.slice(1))\n    && moveOneBall(arr.slice(1).concat(arr[0]))\n}\n\nmodule.exports = moveOneBall\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function routine that takes two lists list of numbers, \n   and determines settle whether it is possible to perform do an exchange of elements \n   between them to make cause lst1 a list of only even numbers. \n   There is no limit on the number of exchanged change elements between lst1 and lst2.\n   If it is possible to exchange elements chemical element between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function routine that takes two lists list of numbers, \n   and determines settle whether it is possible to perform do an exchange of elements \n   between them to make cause lst1 a list of only even numbers. \n   There is no limit on the number of exchanged change elements between lst1 and lst2.\n   If it is possible to exchange elements chemical element between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if(lst1.length === 0 || lst2.length === 0) {\n    return 'NO';\n  }\n  const lst1Copy = [];\n  const lst2Copy = [];\n  const i = 0;\n  const j = 0;\n  while(i < lst1.length && j < lst2.length) {\n    if(lst1[i] % 2 === 0) {\n      lst1Copy.push(lst1[i]);\n    }\n    if(lst2[j] % 2 === 0) {\n      lst2Copy.push(lst2[j]);\n    }\n    i += 1;\n    j += 1;\n  }\n  while(i < lst1.length) {\n    lst1Copy.push(lst1[i]);\n    i += 1;\n  }\n  while(j < lst2.length) {\n    lst2Copy.push(lst2[j]);\n    j += 1;\n  }\n  return 'YES';\n};\nexchange([1, 2, 3, 4], [1, 2, 3, 4]); // => \"YES\"\nexchange([1, 2, 3, 4], [1, 5, 3, 4]); // => \"NO\"\nexchange([1, 2, 3, 4], [1, 3, 5, 4]); // => \"NO\"\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space distance separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding equate count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space distance separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding equate count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let count = {},\n    testArr = test.split(' ').map((letter) => letter.toLowerCase());\n\n  for (let i = 0; i < testArr.length; i++) {\n    if (count[testArr[i]] === undefined) {\n      count[testArr[i]] = 1;\n    } else {\n      count[testArr[i]]++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of strings, return the longest string that is a substring of the \n  other strings in the array.\n  \n  Example:\n  substring(['a', 'b', 'c', 'd']) == 'bcd'\n  substring(['a', 'b', 'c']) == 'bc'\n  substring(['a', 'b']) == 'b'\n  substring([]) == ''\n  substring([null, null, null]) == null\n  substring([null, null, null, null]) == null\n  \n  */\nconst substring = (test) => {\n  let max = '',\n    temp;\n\n  for (let i = 0; i < test.length; i++) {\n    for (let j = 0; j < test[i].length; j++) {\n      temp = test[i].slice(j, test[i].length);\n      if (temp.length > max.length) {\n        max = temp;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of strings, return the longest string that is a substring of the \n  other strings in the array, but ignore case.\n  \n  Example:\n  substringCase(['a', 'b', 'c', 'd']) == 'bcd'\n  substringCase(['a', 'b', 'c']) == 'bc'\n  substringCase(['a', 'b']) == 'b'\n  substringCase([]) == ''\n  substringCase([null, null, null]) == null\n  substringCase([null, null, null, null]) == null\n  \n  */\nconst substringCase = (test) => {\n  let max = '',\n    temp;\n\n  for (let i = 0; i < test.length; i++) {\n    for (let j = 0; j < test[i].length; j++) {\n      temp = test[i].slice(j, test[i].length);\n      if (temp.toLowerCase() > max.toLowerCase()) {\n        max = temp;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of strings, return the longest string that contains all the other \n  strings in the array.\n  \n  Example:\n  contains(['a', 'b', 'c', 'd']) == 'abcd'\n  contains(['a', 'b', 'c']) == 'abc'\n  contains(['a', 'b']) == 'ab'\n  contains([]) == ''\n  contains([null, null, null]) == null\n  contains([null, null, null, null]) == null\n  \n  */\nconst contains = (test) => {\n  let max = '',\n    temp;\n\n  for (let i = 0; i < test.length; i++) {\n    for (let j = 0; j < test.length; j++) {\n      temp = test[i].concat(test[j]);\n      if (temp.length > max.length) {\n        max = temp;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given a string, return the number of characters that appear more than once.\n  \n  Example:\n  duplicate('') == 0\n  duplicate('a') == 1\n  duplicate('ab') == 1\n  duplicate('abcd') == 2\n  duplicate('abbc') == 1\n  duplicate('abcde') == 2\n  \n  */\nconst duplicate = (test) => {\n  let count = 0;\n\n  for (let i = 0; i < test.length; i++) {\n    if (count[test[i]] === undefined) {\n      count[test[i]] = 1;\n    } else {\n      count[test[i]]++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of characters that appear more than once in \n  the first N characters of the string.\n  \n  Example:\n  duplicate('') == 0\n  duplicate('ab') == 1\n  duplicate('abcd') == 2\n  duplicate('abbc') == 1\n  duplicate('abcde') == 2\n  \n  */\nconst duplicateN = (test, n) => {\n  let count = 0;\n\n  for (let i = 0; i < n; i++) {\n    if (count[test[i]] === undefined) {\n      count[test[i]] = 1;\n    } else {\n      count[test[i]]++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = {\n  histogram,\n  substring,\n  substringCase,\n  contains,\n  duplicate,\n  duplicateN\n};<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings chain s and c, you have to deleted all the characters quality in s that are equal to any character fictional character in c\n   then check if the result resultant role string is palindrome. \n   A string chain is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing hold the result string and true genuine / false assumed for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We are given two strings chain s and c, you have to deleted all the characters quality in s that are equal to any character fictional character in c\n   then check if the result resultant role string is palindrome. \n   A string chain is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing hold the result string and true genuine / false assumed for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const chars = {};\n  c.split('').forEach((char) => {\n    chars[char] = true;\n  });\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < s.length) {\n    const char = s[i];\n    if (chars[char]) {\n      j = k;\n      k += 1;\n    } else {\n      if (k === 0) {\n        j = k;\n      }\n      i += 1;\n      k -= 1;\n    }\n    s = s.substr(0, i) + s.substr(i + 1);\n  }\n  return [s, k === 0];\n};\n\nconst test = function (input) {\n  const [s, isPalindrome] = input;\n  const [result, isTrue] = reverseDelete(s, isPalindrome? 'a' : 'b');\n  return `${result}${isTrue?'is true' :'is false'}`;\n};\n\nmodule.exports = {\n  test,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number act of odd elements chemical element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number act of odd elements chemical element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const lstArr = Array.from(lst);\n  const count = lstArr.map((str) => {\n    return lstArr.map((el, i) => {\n      return `${el}n the str4ng ${i+1} of the ${i+1}put.`;\n    }).join('');\n  });\n  return lstArr.map((str, i) => {\n    return count[i];\n  });\n};\n\nmodule.exports = oddCount;<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find discover the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find discover the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  const totalSum = nums.reduce((sum, x) => sum + x, 0);\n  const currentSum = totalSum;\n  let currentIndex = 0;\n  const minSum = currentSum;\n  let minIndex = currentIndex;\n  let previousSum = currentSum;\n  let previousIndex = currentIndex;\n  while (currentIndex < nums.length) {\n    const currentSum = previousSum - nums[previousIndex];\n    const currentIndex = previousIndex;\n    previousIndex = currentIndex;\n    previousSum = currentSum;\n    const currentSum = totalSum - currentSum;\n    if (currentSum < minSum) {\n      minSum = currentSum;\n      minIndex = currentIndex;\n    }\n    currentIndex++;\n  }\n  return minSum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells well. Each row represents defend a single well, \n   and each 1 in a row course represents a single unmarried unit of water urine. \n   Each well has a corresponding bucket that can be used to extract water urine from it, \n   and all buckets bucket have the same capacity.\n   Your task job is to use practice the buckets to empty the wells. \n   Output output signal the number numeral of times time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells well. Each row represents defend a single well, \n   and each 1 in a row course represents a single unmarried unit of water urine. \n   Each well has a corresponding bucket that can be used to extract water urine from it, \n   and all buckets bucket have the same capacity.\n   Your task job is to use practice the buckets to empty the wells. \n   Output output signal the number numeral of times time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const rows = grid.length;\n    const cols = grid[0].length;\n    const count = new Array(rows).fill(0);\n    const [row, col] = [rows - 1, cols - 1];\n\n    for (let i = 0; i < rows; i++) {\n        const row = grid[i];\n        for (let j = 0; j < cols; j++) {\n            if (row[j] === 1) {\n                count[i]++;\n            }\n        }\n    }\n\n    const buckets = new Array(rows).fill(0);\n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            if (grid[i][j] === 1) {\n                buckets[i]++;\n            }\n        }\n    }\n\n    let ans = 0;\n    while (buckets.length > 0) {\n        let [row, col] = [rows - 1, cols - 1];\n        while (count[row] > 0) {\n            count[row]--;\n            col--;\n            if (col < 0) {\n                row--;\n                col = cols - 1;\n            }\n        }\n        ans++;\n        let fill = 0;\n        for (let i = 0; i < rows; i++) {\n            fill += buckets[i];\n            if (fill >= capacity) {\n                break;\n            }\n        }\n        if (fill >= capacity) {\n            break;\n        }\n        buckets[row]++;\n    }\n\n    return ans;\n};\n\nconst [rows, cols] = [10, 10];\nconst [grid, capacity] = [\n    [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]],\n    [\n        [0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]\n    ],\n    [\n        [0, 0, 0], [0, 0, 0]\n    ],\n    [\n        [0, 0, 1], [0, 0, 1]\n    ],\n    [\n        [0, 0, 1], [0, 0, 1]\n    ]\n];\n\nconsole.log(maxFill(grid, capacity));\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according to \n   number phone number of ones in their binary representation theatrical performance in ascending order decree. \n   For similar number act of ones one, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according to \n   number phone number of ones in their binary representation theatrical performance in ascending order decree. \n   For similar number act of ones one, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortedArr = []\n  let sortedArray = arr.slice().sort((a, b) => {\n    let aStr = a.toString(2)\n    let bStr = b.toString(2)\n    let index = 0\n    while (aStr[index] === bStr[index]) {\n      index++\n    }\n    return index - 1\n  })\n  return sortedArray\n}\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number phone number n, you have been tasked to implement enforce \n   a function that returns hark back a list of all words from string bowed stringed instrument s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string drawstring s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains check only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number phone number n, you have been tasked to implement enforce \n   a function that returns hark back a list of all words from string bowed stringed instrument s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string drawstring s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains check only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const consonant = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const consonantCount = consonant.reduce((acc, val) => (acc + (s.indexOf(val) > -1? 1 : 0)), 0);\n  const count = consonantCount >= n? 1 : 0;\n  if (count === 0) return [];\n  const sWords = s.split(\" \");\n  const words = [];\n  sWords.forEach(word => {\n    const wordWords = word.split(\"\");\n    wordWords.forEach(wordWord => {\n      if (consonantCount >= n) {\n        words.push(wordWord);\n      }\n    });\n  });\n  return words;\n};\n\nexport { selectWords };\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find discover the closest vowel that stands stand between \n   two consonants from the right good side of the word (case lawsuit sensitive). \n  \n   Vowels vowel in the beginning and ending termination doesn't count consider. Return refund empty string drawstring if you didn't \n   find any vowel met the above condition. \n\n   You may assume bear that the given give string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to find discover the closest vowel that stands stand between \n   two consonants from the right good side of the word (case lawsuit sensitive). \n  \n   Vowels vowel in the beginning and ending termination doesn't count consider. Return refund empty string drawstring if you didn't \n   find any vowel met the above condition. \n\n   You may assume bear that the given give string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n    const vowelRegex = /[aeiouAEIOU]/;\n    const vowelIndex = -1;\n    const consonantRegex = /[bcdfghjklmnpqrstvwxzBCDFGHJKLMNPQRSTVWXZ]/;\n    const consonantIndex = -1;\n    const wordLength = word.length;\n    const vowelStart = consonantRegex.indexOf(word.charAt(0));\n    const vowelEnd = consonantRegex.indexOf(word.charAt(wordLength - 1));\n    const vowelDistance = vowelEnd - vowelStart;\n    const consonantStart = vowelIndex;\n    const consonantEnd = consonantIndex;\n    const distance = vowelDistance;\n\n    if (vowelIndex!== -1) {\n        const closestVowel = word.slice(vowelIndex, vowelIndex + 1);\n        return closestVowel;\n    }\n\n    if (consonantIndex!== -1) {\n        const closestVowel = word.slice(consonantIndex, consonantIndex + 1);\n        return closestVowel;\n    }\n\n    if (vowelStart!== -1 && vowelEnd!== -1) {\n        const closestVowel = word.slice(vowelStart, vowelEnd + 1);\n        return closestVowel;\n    }\n\n    if (consonantStart!== -1 && consonantEnd!== -1) {\n        const closestVowel = word.slice(consonantEnd, consonantStart + 1);\n        return closestVowel;\n    }\n\n    return \"\";\n};\n\nmodule.exports = getClosestVowel;<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings chain consist of open receptive \n   parentheses' (' or close cheeseparing parentheses')' only. \n   Your job occupation is to check if it is possible potential to concatenate the two strings bowed stringed instrument in\n   some order, that the resulting string bowed stringed instrument will be good dependable. \n   A string S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings, both strings chain consist of open receptive \n   parentheses' (' or close cheeseparing parentheses')' only. \n   Your job occupation is to check if it is possible potential to concatenate the two strings bowed stringed instrument in\n   some order, that the resulting string bowed stringed instrument will be good dependable. \n   A string S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n    return (\n        lst.filter(\n            (item) => {\n                const str = item.toString();\n                return str.length === 1 && str[0] === '(';\n            },\n        )\n           .map((item) => {\n                const str = item.toString();\n                return str.substring(str.length - 1, str.length);\n            })\n           .reduce((a, b) => a + b, '')\n           .length === 0\n        );\n};\n\nexport default matchParens;\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive convinced integer k, return a sorted list \n   of length duration k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive convinced integer k, return a sorted list \n   of length duration k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  if (!arr) {\n    return []\n  }\n\n  const len = arr.length\n  const half = Math.floor(len / 2)\n\n  let result = arr.slice(0, k)\n  let left = arr.slice(0, half)\n  let right = arr.slice(half, len)\n\n  return result.concat(maximum(left, k))\n   .concat(maximum(right, k - half))\n}\n\nconst test = [\n  [-3, -4, 5],\n  [4, -4, 4],\n  [-3, 2, 1, 2, -1, -2, 1],\n]\n\nfor (let [arr, k] of test) {\n  const result = maximum(arr, k)\n  console.log(`Result for arr = ${arr}, k = ${k} is: ${result}`)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers, return the sum of all of the odd leftover elements that are in even positions stead.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integers, return the sum of all of the odd leftover elements that are in even positions stead.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const len = lst.length\n  let result = 0\n  let odd = 0\n  for(let i = 0; i < len; i++) {\n    if(lst[i] % 2) {\n      result += lst[i]\n    } else {\n      odd++\n    }\n  }\n  return result + odd\n}\n\nconst solution2 = (lst) => {\n  const len = lst.length\n  let result = 0\n  let odd = 0\n  for(let i = 0; i < len; i++) {\n    if(lst[i] % 2) {\n      result += lst[i]\n    } else {\n      odd++\n    }\n  }\n  return odd + result\n}\n\nconst test = [5, 8, 7, 1, 3, 3, 3, 3, 3]\nconsole.log(solution(test))\nconsole.log(solution2(test))\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements chemical element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements chemical element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n    let result = 0;\n    for (let i = 0; i < k; i++) {\n        result += arr[i];\n    }\n    return result;\n};\n\n// TESTS\n[\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        4,\n        24,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        1,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        3,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        2,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        4,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        5,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        6,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        7,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        8,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        9,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        10,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        11,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        12,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        13,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        14,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        15,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        16,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        17,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        18,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        19,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        20,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        21,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        22,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        23,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        24,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        25,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        26,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        27,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        28,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        29,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        30,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        31,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        32,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        33,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        34,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        35,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        36,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        37,\n        21,\n    ],\n    [\n        [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n        "}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted classify list that has the odd numbers issue in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows follow: start startle with any positive cocksure integer n. Then each term terminus is obtained from the \n   previous term as follows succeed: if the previous term condition is even, the next adjacent term is one half of \n   the previous term. If the previous term terminus is odd, the next following term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted classify list that has the odd numbers issue in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows follow: start startle with any positive cocksure integer n. Then each term terminus is obtained from the \n   previous term as follows succeed: if the previous term condition is even, the next adjacent term is one half of \n   the previous term. If the previous term terminus is odd, the next following term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const list = []\n  while(n) {\n    list.push(n)\n    n = Math.floor(n / 2)\n    if (n % 2 === 1) {\n      n = (n + 1) * 3 - 1\n    }\n  }\n  return list\n}\n\nconst getOddCollatzTest = (n) => {\n  return getOddCollatz(n)\n}\n\nconsole.log(getOddCollatzTest(10))\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates validate a given date string drawstring and \n   returns true dependable if the date is valid otherwise false fake. \n   The date is valid if all of the following rules principle are satisfied quenched: \n   1. The date string is not empty. \n   2. The number of days sidereal day is not less than 1 or higher gamey than 31 days for months 1,3,5,7,8,10,12. And the number of days day is not less than 1 or higher high than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher high than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which validates validate a given date string drawstring and \n   returns true dependable if the date is valid otherwise false fake. \n   The date is valid if all of the following rules principle are satisfied quenched: \n   1. The date string is not empty. \n   2. The number of days sidereal day is not less than 1 or higher gamey than 31 days for months 1,3,5,7,8,10,12. And the number of days day is not less than 1 or higher high than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher high than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n    return!date.length ||!date.match(/^\\d{2}-\\d{2}-\\d{4}$/) ||!date.match(/^\\d{4}-\\d{2}-\\d{2}$/) ||!date.match(/^\\d{2}/g) ||!date.match(/^\\d{4}/g) ||!date.match(/^\\d{4}-\\d{2}$/) ||!date.match(/^\\d{2}-\\d{2}$/) ||!date.match(/^\\d{4}-\\d{2}-\\d{2}$/) ||!date.match(/^\\d{2}-\\d{2}$/) ||!date.match(/^\\d{4}/g) ||!date.match(/^\\d{4}/g) ||!date.match(/^\\d{4}-\\d{2}$/) ||!date.match(/^\\d{2}/g) ||!date.match(/^\\d{4}/g) ||!date.match(/^\\d{4}-\\d{2}$/) ||!date.match(/^\\d{2}-\\d{2}$/) ||!date.match(/^\\d{4}/g) ||!date.match(/^\\d{4}/g) ||!date.match(/^\\d{4}-\\d{2}$/) ||!date.match(/^\\d{2}/g) ||!date.match(/^\\d{4}/g) ||!date.match(/^\\d{4}-\\d{2}$/) ||!date.match(/^\\d{2}/g) ||!date.match(/^\\d{4}/g) ||!date.match(/^\\d{4}-\\d{2}$/) ||!date.match(/^\\d{2}/g) ||!date.match(/^\\d{4}/g) ||!date.match(/^\\d{4}-\\d{2}$/) ||!date.match(/^\\d{2}/g) ||!date.match(/^\\d{4}/g) ||!date.match(/^\\d{4}-\\d{2}$/) ||!date.match(/^\\d{2}/g) ||!date.match(/^\\d{4}/g) ||!date.match(/^\\d{4}-\\d{2}$/) ||!date.match(/^\\d{2}/g) ||!date.match(/^\\d{4}/g) ||!date.match(/^\\d{4}-\\d{2}$/) ||!date.match(/^\\d{2}/g) ||!date.match(/^\\d{4}/g) ||!date.match(/^\\d{4}-\\d{2}$/) ||!date.match(/^\\d{2}/g) ||!date.match(/^\\d{4}/g) ||!date.match(/^\\d{4}-\\d{2}$/) ||!date.match(/^\\d{2}/g) ||!date.match(/^\\d{4}/g) ||!date.match(/^\\d{4}-\\d{2}$/) ||!date.match(/^\\d{2}/g) ||!date.match(/^\\d{4}/g) ||!date.match(/^\\d{4}-\\d{2}$/) ||!date.match(/^\\d{2}/g) ||!date.match(/^\\d{4}/g) ||!date.match(/^\\d{4}-\\d{2}$/) ||!date.match(/^\\d{2}/g) ||!date.match(/^\\d{4}/g) ||!date.match(/^\\d{4}-\\d{2}$/) ||!date.match(/^\\d{2}/g) ||!date.match(/^\\d{4}/g) ||!date.match(/^\\d{4}-\\d{2}$/) ||!date.match(/^\\d{2}/g) ||!date.match(/^\\d{4}/g) ||!date.match(/^\\d{4}-\\d{2}$/) ||!date.match(/^\\d{2}/g) ||!date.match(/^\\d{4}/g) ||!date.match(/^\\d{4}-\\d{2}$/) ||!date.match(/^\\d{2}/g) ||!date.match(/^\\d{4}/g) ||!date.match(/^\\d{4}-\\d{2}$/) ||!date.match(/^\\d{2}/g) ||!date.match(/^\\d{4}/g) ||!date.match(/^\\d"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  txt = txt.toLowerCase()\n  let words = txt.split(' ')\n  let result = []\n  let numLetters = 0\n  let count = 0\n  let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  let lenLetters = alphabet.length\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    count = 0\n    let wordLetters = word.split('')\n    let wordLettersLen = wordLetters.length\n    let wordLettersLenLetters = lenLetters\n    for (let j = 0; j < wordLettersLenLetters; j++) {\n      if (alphabet.indexOf(wordLetters[j]) > -1) {\n        count += 1\n      }\n    }\n    if (count % 2 == 0) {\n      numLetters += count\n    }\n    else {\n      numLetters += count + 1\n    }\n  }\n  return [words, numLetters]\n}\n\n/*\n  Given a list of words, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n  should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords([ \"Hello world!\", \"Hello, world!\", \"abcdef\" ]) ➞ [ [\"Hello\", \"world!\"], [\"Hello\", \"world!\"], [\"abcdef\"] ]\n  */\nconst splitWordsArray = (words) => {\n  let result = []\n  let numLetters = 0\n  let count = 0\n  let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  let lenLetters = alphabet.length\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    count = 0\n    let wordLetters = word.split('')\n    let wordLettersLen = wordLetters.length\n    let wordLettersLenLetters = lenLetters\n    for (let j = 0; j < wordLettersLenLetters; j++) {\n      if (alphabet.indexOf(wordLetters[j]) > -1) {\n        count += 1\n      }\n    }\n    if (count % 2 == 0) {\n      numLetters += count\n    }\n    else {\n      numLetters += count + 1\n    }\n  }\n  return [words, numLetters]\n}\n\n// ################\n// ## EXPECTED RESULT ##\n// ################\nconst expectedResult = [\n  [\"Hello\", \"world!\"],\n  [\"Hello\", \"world!\"],\n  [\"abcdef\"]\n]\n\n/*\n  Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n  should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [[\"Hello\", \"world!\"]]\n  splitWords(\"Hello,world!\") ➞ [[\"Hello\", \"world!\"]]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsFromArray = (words) => {\n  let result = []\n  let numLetters = 0\n  let count = 0\n  let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  let lenLetters = alphabet.length\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    count = 0\n    let wordLetters = word.split('')\n    let wordLettersLen = wordLetters.length\n    let wordLettersLenLetters = lenLetters\n    for (let j = 0; j < wordLettersLenLetters; j++) {\n      if (alphabet.indexOf(wordLetters[j]) > -1) {\n        count += 1\n      }\n    }\n    if (count % 2 == 0) {\n      numLetters += count\n    }\n    else {\n      numLetters += count + 1\n    }\n  }\n  return [words, numLetters]\n}\n\n/*\n  Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n  should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [[\"Hello\", \"world!\"]]\n  splitWords(\"Hello,world!\") ➞ [[\"Hello\", \"world!\"]]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsArrayFromArray = (words) => {\n  let result = []\n  let numLetters = 0\n  let count = 0\n  let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  let lenLetters = alphabet.length\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    count = 0\n    let wordLetters = word.split('')\n    let wordLettersLen = wordLetters.length\n    let wordLettersLenLetters = lenLetters\n    for (let j = 0; j < wordLettersLenLetters;"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order club. If list has more than 1 duplicate of the same \n   number act, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order club. If list has more than 1 duplicate of the same \n   number act, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n    const n = lst.length\n    if (n <= 1) return true\n    let prev = lst[0]\n    for (let i = 1; i < n; i++) {\n        if (lst[i] < prev) return false\n        prev = lst[i]\n    }\n    return true\n}\n\nconst isSorted2 = (lst) => {\n    const n = lst.length\n    if (n <= 1) return true\n    let prev = lst[0]\n    for (let i = 1; i < n; i++) {\n        if (lst[i] < prev) return false\n        prev = lst[i]\n    }\n    return true\n}\n\n//console.log(isSorted([5]))\n//console.log(isSorted([1, 2, 3, 4, 5]))\n//console.log(isSorted([1, 3, 2, 4, 5]))\n//console.log(isSorted([1, 2, 3, 4, 5, 6]))\n//console.log(isSorted([1, 2, 3, 4, 5, 6, 7]))\n//console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8]))\n//console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n//console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n//console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n//console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n//console.log(isSorted([1, 2, 2, 3, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4]))\n//console.log(isSorted([1, 2, 2, 2, 3, 4"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start = interval1.start\n  let end = interval1.end\n\n  if (interval2.start > interval2.end) {\n    [start, end] = [interval2.start, interval2.end]\n  }\n\n  if (interval1.start > interval1.end) {\n    [start, end] = [interval1.start, interval1.end]\n  }\n\n  if (start >= end) {\n    return 'NO'\n  }\n\n  let len = Math.max(end, start) - Math.min(end, start)\n  let divisor = 3\n\n  while (len >= divisor * divisor) {\n    if (len % divisor === 0) {\n      return 'YES'\n    }\n\n    divisor += 2\n  }\n\n  return 'NO'\n}\n\nconsole.log(intersection((1, 2), (2, 3))) // \"NO\"\nconsole.log(intersection((-1, 1), (0, 4))) // \"NO\"\nconsole.log(intersection((-3, -1), (-5, 5))) // \"YES\"\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need necessitate to return\n   sum of magnitudes magnitude of integers multiplied breed by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need necessitate to return\n   sum of magnitudes magnitude of integers multiplied breed by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  return arr.reduce((acc, elem) => {\n    if(elem > 0) {\n      acc += elem;\n    } else if (elem < 0) {\n      acc -= elem;\n    }\n    return acc;\n  }, 0);\n};\n\nconsole.log(prodSigns([1, 2, 2, -4]));\nconsole.log(prodSigns([0, 1]));\nconsole.log(prodSigns([]));<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find receive the minimum path of length k in the grid. You can start depart \n   from any cell, and in each step you can move act to any of the neighbor cells cell, \n   in other words, you can go to cells which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length k means visiting exactly precisely k cells (not \n   necessarily inevitably distinct discrete). \n   You CANNOT go off the grid.\n   A path way A (of length k) is considered less than a path B boron (of length k) if \n   after making the ordered lists of the values on the cells that A and B go move \n   through (let lease's call shout them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed guarantee that the answer is unique alone. \n   Return an ordered list of the values on the cells that the minimum path go start through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find receive the minimum path of length k in the grid. You can start depart \n   from any cell, and in each step you can move act to any of the neighbor cells cell, \n   in other words, you can go to cells which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length k means visiting exactly precisely k cells (not \n   necessarily inevitably distinct discrete). \n   You CANNOT go off the grid.\n   A path way A (of length k) is considered less than a path B boron (of length k) if \n   after making the ordered lists of the values on the cells that A and B go move \n   through (let lease's call shout them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed guarantee that the answer is unique alone. \n   Return an ordered list of the values on the cells that the minimum path go start through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n    let lst = [];\n    let curr = [1,2,3];\n    let len = grid.length;\n    let [row,col] = curr;\n    let i = row;\n    let j = col;\n    let res = [];\n    while(curr.length < k) {\n        if(i > 0 && j > 0) {\n            if(grid[i][j] > grid[i-1][j] && grid[i][j] > grid[i][j-1]) {\n                lst.push(grid[i][j]);\n                i--;\n                j--;\n            } else {\n                curr.push(grid[i][j]);\n                i--;\n            }\n        } else if(i > 0) {\n            lst.push(grid[i][j]);\n            i--;\n        } else if(j > 0) {\n            lst.push(grid[i][j]);\n            j--;\n        }\n    }\n    if(curr.length == k) {\n        return lst;\n    }\n    res = [1,2,1];\n    while(curr.length > 0) {\n        if(curr[curr.length-1] < res[curr.length-1]) {\n            res = curr.slice(0,curr.length-1);\n        }\n        curr.pop();\n    }\n    return res;\n}\n\nconst lst = [];\nlet curr = [1,2,3];\nlet len = grid.length;\nlet [row,col] = curr;\nlet i = row;\nlet j = col;\nwhile(curr.length < k) {\n    if(i > 0 && j > 0) {\n        if(grid[i][j] > grid[i-1][j] && grid[i][j] > grid[i][j-1]) {\n            lst.push(grid[i][j]);\n            i--;\n            j--;\n        } else {\n            curr.push(grid[i][j]);\n            i--;\n        }\n    } else if(i > 0) {\n        lst.push(grid[i][j]);\n        i--;\n    } else if(j > 0) {\n        lst.push(grid[i][j]);\n        j--;\n    }\n}\n\nif(curr.length == k) {\n    return lst;\n}\n\nlet res = [1,2,1];\nwhile(curr.length > 0) {\n    if(curr[curr.length-1] < res[curr.length-1]) {\n        res = curr.slice(0,curr.length-1);\n    }\n    curr.pop();\n}\n\nconsole.log(res);\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied analyze deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know acknowledge is Tribonacci sequence. \n   Tribonacci sequence succession is defined specify by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied analyze deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know acknowledge is Tribonacci sequence. \n   Tribonacci sequence succession is defined specify by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n    var fib = [1, 3];\n    var tr = [];\n    var i = 0;\n    var result = [];\n\n    while (i <= n) {\n        result.push(fib[i]);\n        i++;\n        fib[i] = fib[i - 1] + fib[i - 2];\n    }\n    return result;\n}\n\nconsole.log(tri(5));\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let digits = n;\n  let result = 1;\n  while (digits % 2 === 0) {\n    digits = digits / 2;\n    result = result * 2;\n  }\n  return result;\n}\n\n// https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=DS1_1_13\n\nconst isPrime = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i = i + 1;\n  }\n  return true;\n}\n\nconst main = (n) => {\n  let product = 0;\n  let max = n;\n  while (n > 0) {\n    let i = n % 10;\n    n = n / 10;\n    if (isPrime(i + 1)) {\n      product = product * i;\n    }\n    if (product > max) {\n      return product;\n    }\n  }\n  return product;\n}\n\n// console.log(main(10));\n// console.log(main(5));\n// console.log(main(15));\n\n// console.log(main(5));\n// console.log(main(15));\n// console.log(main(1000));\n// console.log(main(100));\n// console.log(main(999));\n\n// console.log(main(1));\n// console.log(main(2));\n// console.log(main(3));\n// console.log(main(4));\n// console.log(main(5));\n// console.log(main(6));\n// console.log(main(7));\n// console.log(main(8));\n// console.log(main(9));\n// console.log(main(10));\n// console.log(main(11));\n// console.log(main(12));\n// console.log(main(13));\n// console.log(main(14));\n// console.log(main(15));\n// console.log(main(16));\n// console.log(main(17));\n// console.log(main(18));\n// console.log(main(19));\n// console.log(main(20));\n// console.log(main(21));\n// console.log(main(22));\n// console.log(main(23));\n// console.log(main(24));\n// console.log(main(25));\n// console.log(main(26));\n// console.log(main(27));\n// console.log(main(28));\n// console.log(main(29));\n// console.log(main(30));\n// console.log(main(31));\n// console.log(main(32));\n// console.log(main(33));\n// console.log(main(34));\n// console.log(main(35));\n// console.log(main(36));\n// console.log(main(37));\n// console.log(main(38));\n// console.log(main(39));\n// console.log(main(40));\n// console.log(main(41));\n// console.log(main(42));\n// console.log(main(43));\n// console.log(main(44));\n// console.log(main(45));\n// console.log(main(46));\n// console.log(main(47));\n// console.log(main(48));\n// console.log(main(49));\n// console.log(main(50));\n// console.log(main(51));\n// console.log(main(52));\n// console.log(main(53));\n// console.log(main(54));\n// console.log(main(55));\n// console.log(main(56));\n// console.log(main(57));\n// console.log(main(58));\n// console.log(main(59));\n// console.log(main(60));\n// console.log(main(61));\n// console.log(main(62));\n// console.log(main(63));\n// console.log(main(64));\n// console.log(main(65));\n// console.log(main(66));\n// console.log(main(67));\n// console.log(main(68));\n// console.log(main(69));\n// console.log(main(70));\n// console.log(main(71));\n// console.log(main(72));\n// console.log(main(73));\n// console.log(main(74));\n// console.log(main(75));\n// console.log(main(76));\n// console.log(main(77));\n// console.log(main(78));\n// console.log(main(79));\n// console.log(main(80));\n// console.log(main(81));\n// console.log(main(82));\n// console.log(main(83));\n// console.log(main(84));\n// console.log(main(85));\n// console.log(main(86));\n// console.log(main(87));\n// console.log(main(88));\n// console.log(main(89));\n// console.log(main(90));\n// console.log(main(91));\n// console.log(main(92));\n// console.log(main(93));\n// console.log(main(94));\n// console.log(main(95));\n// console.log(main(96));\n// console.log(main(97));\n// console.log(main(98));\n// console.log(main(99));\n// console.log(main(100));\n// console.log(main(101));\n// console.log(main(102));\n// console.log(main(103));\n// console.log(main(104));\n// console.log(main(105));\n// console.log(main(106));\n// console.log(main(107));\n// console.log(main(108));\n// console.log(main(109));\n// console.log(main(110));\n// console.log(main(111));\n//"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes claim a string as input which contains control only square brackets bracket. \n   The function should return true genuine if and only if there is a valid subsequence of brackets bracket \n   where at least one bracket in the subsequence sequel is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false fake \n   isNested('[][]') ➞ false assumed \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes claim a string as input which contains control only square brackets bracket. \n   The function should return true genuine if and only if there is a valid subsequence of brackets bracket \n   where at least one bracket in the subsequence sequel is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false fake \n   isNested('[][]') ➞ false assumed \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n  const stack = []\n  const bracket = '['\n  const bracket2 = ']'\n  const nestedBracket = '[['\n  const isNested = (string) => {\n    stack.push(bracket)\n    const len = string.length\n    let index = 0\n    let openCount = 0\n    while (index < len) {\n      const char = string[index++]\n      if (char === bracket) {\n        openCount++\n      } else if (char === bracket2) {\n        openCount--\n      } else if (char === nestedBracket && openCount > 0) {\n        stack.push(nestedBracket)\n      }\n    }\n    return stack.length === 0\n  }\n  return isNested(string)\n}\n\nisNested('[[]]')\nisNested('[]]]]]]][[[[[]')\nisNested('[[]')\nisNested('[]')\nisNested('[[][]]')\nisNested('[][]')\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need necessitate to return the sum of squared numbers issue in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You need necessitate to return the sum of squared numbers issue in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let result = 0;\n  lst.map((x) => Math.round(x));\n  for(let i = 0; i < lst.length; i++) {\n    result += lst[i] * lst[i];\n  }\n  return result;\n}\n\nexport { sumSquares }<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns come back true if the last final character \n   of a given impart string is an alphabetical alphabetic character and is not \n   a part character of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated discriminate by space distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns come back true if the last final character \n   of a given impart string is an alphabetical alphabetic character and is not \n   a part character of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated discriminate by space distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const letter = (txt).charAt(txt.length - 1);\n  const letterIsALetter = alphabet.indexOf(letter) > -1;\n  const notLastCharOfWord = letterIsALetter && (txt.indexOf(letter) == txt.length - 1) &&!isWordChar(txt, txt.length - 1);\n  return letterIsALetter && notLastCharOfWord;\n};\n\nconst isWordChar = (txt, index) => {\n  return /\\w/.test(txt.charAt(index));\n};\n\n/*\n   Create a function that returns true if the last character of a given \n   string is an alphabetical alphabetic character and is not a part \n   character of a word, and false otherwise.\n  Examples:\n  isLastCharALetter(\"apple pie\") ➞ false\n  isLastCharALetter(\"apple pi e\") ➞ true\n  isLastCharALetter(\"apple pi e \") ➞ false\n  isLastCharALetter(\"\") ➞ false\n  */\nconst isLastCharALetter = (txt) => {\n  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const letter = (txt).charAt(txt.length - 1);\n  const letterIsALetter = alphabet.indexOf(letter) > -1;\n  const notLastCharOfWord = letterIsALetter && (txt.indexOf(letter) == txt.length - 1) &&!isWordChar(txt, txt.length - 1);\n  return letterIsALetter && notLastCharOfWord;\n};\n\nconst isValidWord = (txt) => {\n  const word = txt.toLowerCase().replace(/\\s+/g,'');\n  const wordLen = word.length;\n  if (word.length <= 0) {\n    return false;\n  }\n  const letterIsALetter = isLastCharALetter(word);\n  const notLastCharOfWord = isLastCharALetter(word) && (txt.indexOf(word.charAt(wordLen - 1)) == txt.length - 1) &&!isWordChar(word, wordLen - 1);\n  return letterIsALetter && notLastCharOfWord;\n};\n\nconst removePunctuations = (txt) => {\n  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const remove ='';\n  const word = txt.toLowerCase().replace(/\\s+/g, remove);\n  const wordLen = word.length;\n  const letterIsALetter = isLastCharALetter(word);\n  const notLastCharOfWord = isLastCharALetter(word) && (txt.indexOf(word.charAt(wordLen - 1)) == txt.length - 1) &&!isWordChar(word, wordLen - 1);\n  return letterIsALetter && notLastCharOfWord;\n};\n\nconst isValidWord = (txt) => {\n  const word = txt.toLowerCase().replace(/\\s+/g,'');\n  const wordLen = word.length;\n  const letterIsALetter = isLastCharALetter(word);\n  const notLastCharOfWord = isLastCharALetter(word) && (txt.indexOf(word.charAt(wordLen - 1)) == txt.length - 1) &&!isWordChar(word, wordLen - 1);\n  return letterIsALetter && notLastCharOfWord;\n};\n\nconst isLastCharALetter = (txt) => {\n  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const letter = (txt).charAt(txt.length - 1);\n  const letterIsALetter = alphabet.indexOf(letter) > -1;\n  const notLastCharOfWord = letterIsALetter && (txt.indexOf(letter) == txt.length - 1) &&!isWordChar(txt, txt.length - 1);\n  return letterIsALetter && notLastCharOfWord;\n};\n\nconst isWordChar = (txt, index) => {\n  return /\\w/.test(txt.charAt(index));\n};\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest big index of an element component which \n   is not greater than or equal adequate to the element immediately preceding predate it. If \n   no such element exists exist then return -1. The given feed array will not contain check \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the largest big index of an element component which \n   is not greater than or equal adequate to the element immediately preceding predate it. If \n   no such element exists exist then return -1. The given feed array will not contain check \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let len = arr.length\n  let predate = -1\n\n  for (let i = 1; i < len; i++) {\n    if (arr[i] < arr[i - 1]) {\n      predate = i - 1\n      break\n    }\n  }\n  if (predate === -1) return -1\n  let cur = 0\n\n  for (let i = predate + 1; i < len; i++) {\n    if (arr[i] > arr[cur]) cur = i\n  }\n  return cur\n}\n\nexport default canArrange\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns come back a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive positivist integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns come back a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive positivist integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) return (null, null);\n  let max = 0, min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (lst[i] > max) max = lst[i];\n    } else {\n      if (lst[i] < min) min = lst[i];\n    }\n  }\n  return ([min, max], null);\n}\n\n/*\n   Create a function that returns a tuple (a, b), where 'a' is the largest of\n   negative numbers in a list, and 'b' is the smallest positive number in a\n   list.\n   If there is no negative or positive numbers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers2 = (lst) => {\n  if (lst.length === 0) return (null, null);\n  let max = Number.MIN_VALUE, min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) max = lst[i];\n    if (lst[i] < min) min = lst[i];\n  }\n  return ([max, min], null);\n}\n\n/*\n   Create a function that returns a tuple (a, b), where 'a' is the largest of\n   negative numbers in a list, and 'b' is the smallest positive number in a\n   list.\n   If there is no negative or positive numbers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers3 = (lst) => {\n  if (lst.length === 0) return (null, null);\n  let max = Number.MIN_VALUE, min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) max = lst[i];\n    if (lst[i] < min) min = lst[i];\n  }\n  return ([max, min], null);\n}\n\n/*\n   Create a function that returns a tuple (a, b), where 'a' is the largest of\n   negative numbers in a list, and 'b' is the smallest positive number in a\n   list.\n   If there is no negative or positive numbers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers4 = (lst) => {\n  if (lst.length === 0) return (null, null);\n  let max = Number.MIN_VALUE, min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) max = lst[i];\n    if (lst[i] < min) min = lst[i];\n  }\n  return ([max, min], null);\n}\n\n/*\n   Create a function that returns a tuple (a, b), where 'a' is the largest of\n   negative numbers in a list, and 'b' is the smallest positive number in a\n   list.\n   If there is no negative or positive numbers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers5 = (lst) => {\n  if (lst.length === 0) return (null, null);\n  let max = Number.MIN_VALUE, min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) max = lst[i];\n    if (lst[i] < min) min = lst[i];\n  }\n  return ([max, min], null);\n}\n\n/*\n   Create a function that returns a tuple (a, b), where 'a' is the largest of\n   negative numbers in a list, and 'b' is the smallest positive number in a\n   list.\n   If there is no negative or positive numbers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers6 = (lst) => {\n  if (lst.length === 0) return (null, null);\n  let max = Number.MIN_VALUE, min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) max = lst[i];\n    if (lst[i] < min) min = l"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes claim integers, floats ice-cream soda, or strings representing typify \n   real numbers act, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number numeral is represented map as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes claim integers, floats ice-cream soda, or strings representing typify \n   real numbers act, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number numeral is represented map as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n   if (typeof a ==='string') {\n     if (typeof b ==='string') {\n       if (a === b) {\n         return null\n       }\n       else {\n         return a\n       }\n     }\n     else {\n       if (a === b) {\n         return null\n       }\n       else {\n         return b\n       }\n     }\n   }\n   else {\n     if (typeof b ==='string') {\n       if (a === b) {\n         return null\n       }\n       else {\n         return a\n       }\n     }\n     else {\n       if (a === b) {\n         return null\n       }\n       else {\n         return a\n       }\n     }\n   }\n }\n   /\n   /\n const getType = (a) = > {\n   if (typeof a ==='string') {\n     return'string'\n   }\n   else {\n     return 'number'\n   }\n }\n   /\n   /\n const getString = (a) = > {\n   if (typeof a ==='string') {\n     return a\n   }\n   else {\n     return a.toString()\n   }\n }\n   /\n   /\n const getNumber = (a) = > {\n   if (typeof a ==='string') {\n     return a.replace(/\\D/g, '')\n   }\n   else {\n     return a\n   }\n }\n   /\n   /\n const compare = (a, b) = > {\n   if (getType(a) === getType(b)) {\n     if (getString(a) === getString(b)) {\n       if (getNumber(a) < getNumber(b)) {\n         return'star'\n       }\n       else {\n         return 'bomb'\n       }\n     }\n     else {\n       return getString(a)\n     }\n   }\n   else {\n     if (getType(a) ==='string') {\n       return getString(a)\n     }\n     else {\n       return getString(b)\n     }\n   }\n }\n   /\n   /\n const isEqual = (a, b) = > {\n   if (compare(a, b) ==='star') {\n     return true\n   }\n   else {\n     return false\n   }\n }\n   /\n   /\n const isGreaterThan = (a, b) = > {\n   if (compare(a, b) ==='star') {\n     return true\n   }\n   else {\n     return false\n   }\n }\n   /\n   /\n const isSmallerThan = (a, b) = > {\n   if (compare(a, b) ==='star') {\n     return true\n   }\n   else {\n     return false\n   }\n }\n   /\n   /\n const isLessThan = (a, b) = > {\n   if (compare(a, b) ==='star') {\n     return true\n   }\n   else {\n     return false\n   }\n }\n   /\n   /\n const isSame = (a, b) = > {\n   if (compare(a, b) ==='star') {\n     return true\n   }\n   else {\n     return false\n   }\n }\n   /\n   /\n const bomb = (a, b) = > {\n   if (isGreaterThan(a, b)) {\n     return 'bomb'\n   }\n   else {\n     return'star'\n   }\n }\n   /\n   /\n const ice = (a, b) = > {\n   if (isSmallerThan(a, b)) {\n     return'soda'\n   }\n   else {\n     return'star'\n   }\n }\n   /\n   /\n const act = (a, b) = > {\n   if (isEqual(a, b)) {\n     return 'act'\n   }\n   else {\n     return 'ice'\n   }\n }\n   /\n   /\n const typify = (a, b) = > {\n   if (isSame(a, b)) {\n     return 'act'\n   }\n   else {\n     return 'typify'\n   }\n }\n   /\n   /\n const compareTwo = (a, b) = > {\n   if (isEqual(a, b)) {\n     return 'act'\n   }\n   else {\n     return 'compareTwo'\n   }\n }\n   /\n   /\n const main = () = > {\n   const a = 5\n   const b = 2.5\n   const c = \"1\"\n   const d = '2'\n   const e = \"2,5\"\n   const f = \"1,2,3\"\n   const g = \"1.5\"\n   const h = \"3,1,2,5\"\n   const i = \"2.5,3.1,1.5\"\n   const j = \"2.5,3.1,1.5\"\n   const k = \"1,2.5,3.1,1.5\"\n   const l = \"1.5,2.5,3.1,1.5\"\n   const m = \"1.5,2.5,3.1,1.5\"\n   const n = \"1.5,2.5,3.1,1.5\"\n   const o = \"1.5,2.5,3.1,1.5\"\n   const p = \"1.5,2.5,3.1,1.5\"\n   const q = \"1.5,2.5,3.1,1.5\"\n   const r = \"1.5"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 4 positive plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 4 positive plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if(n < 2) return false;\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) count += i;\n  }\n  return count === n;\n}\n\n/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 4 positive plus odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  if(n < 2) return false;\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) count += i;\n  }\n  return count === n;\n}\n\nconst isEqualToSum = (n) => {\n  return isEqualToSumEven(n) || isEqualToSumOdd(n);\n}\n\nmodule.exports = isEqualToSum;\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 0) {\n    return 1\n  } else {\n    return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3)\n  }\n}\n\nconst factorial = (n) => {\n  if (n <= 0) {\n    return 1\n  } else {\n    return n * factorial(n - 1)\n  }\n}\n\nconst generateSpecialFactorials = (n) => {\n  let specialFactorials = []\n  let i = 0\n  let j = n - 1\n  while (i <= j) {\n    specialFactorials.push(specialFactorial(i))\n    i++\n  }\n  return specialFactorials\n}\n\nconst generateFactorials = (n) => {\n  let factorials = []\n  let i = 1\n  while (i <= n) {\n    factorials.push(factorial(i))\n    i++\n  }\n  return factorials\n}\n\n/* \n  Tests\n  */\nconst test = (n) => {\n  const nfactorials = generateFactorials(n)\n  const nspecialFactorials = generateSpecialFactorials(n)\n\n  console.log(nfactorials)\n  console.log(nspecialFactorials)\n  \n  console.log(factorial(n))\n  console.log(specialFactorial(n))\n}\n\ntest(10)\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace substitute all spaces in it with underscores underscore, \n   and if a string has more than 2 consecutive straight spaces, \n   then replace supplant all consecutive spaces distance with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace substitute all spaces in it with underscores underscore, \n   and if a string has more than 2 consecutive straight spaces, \n   then replace supplant all consecutive spaces distance with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/ /g, '_');\n};\n\n/*\n  Given a string text, if a string has more than 2 consecutive straight spaces, \n   then replace supplant all consecutive spaces distance with - \n  \n   fixDoubleSpaces(\"Example 1\") == \"Example 1\"\n  fixDoubleSpaces(\"Example 2\") == \"Example 2\"\n  fixDoubleSpaces(\"Example   3\") == \"Example 3\"\n  */\nconst fixDoubleSpaces = (text) => {\n  let spaces = text.match(/ +/g);\n  if(spaces && spaces.length > 1) {\n    let start = spaces[0].length - 1;\n    let end = spaces.length - 1;\n    spaces.forEach(s => {\n      let spaces = s.match(/ +/g);\n      let spaces2 = s.match(/ +/g);\n      if(spaces && spaces.length > 1) {\n        for(let i = 0; i < spaces.length; i++) {\n          if(spaces[i].length > 1) {\n            let distance = Math.abs(start - spaces[i].length);\n            text = text.replace(spaces[i], `${text.substr(0, start)}-${text.substr(start + 1, distance)}`);\n            text = text.replace(spaces2[i], `${text.substr(0, start)}-${text.substr(start + 1, distance)}`);\n          }\n        }\n      }\n    });\n  }\n  return text;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores underscore, \n   and if a string has more than 2 consecutive straight spaces, \n   then replace supplant all consecutive spaces distance with - \n  \n   fixDoubleSpaces(\"Example 1\") == \"Example 1\"\n  fixDoubleSpaces(\"Example 2\") == \"Example 2\"\n  fixDoubleSpaces(\"Example   3\") == \"Example 3\"\n  */\nconst fixDoubleSpaces2 = (text) => {\n  let spaces = text.match(/ +/g);\n  if(spaces && spaces.length > 1) {\n    let start = spaces[0].length - 1;\n    let end = spaces.length - 1;\n    spaces.forEach(s => {\n      let spaces = s.match(/ +/g);\n      let spaces2 = s.match(/ +/g);\n      if(spaces && spaces.length > 1) {\n        for(let i = 0; i < spaces.length; i++) {\n          if(spaces[i].length > 1) {\n            let distance = Math.abs(start - spaces[i].length);\n            text = text.replace(spaces[i], `${text.substr(0, start)}-${text.substr(start + 1, distance)}`);\n            text = text.replace(spaces2[i], `${text.substr(0, start)}-${text.substr(start + 1, distance)}`);\n          }\n        }\n      }\n    });\n  }\n  return text;\n};\n\nmodule.exports = {\n  fixSpaces,\n  fixDoubleSpaces,\n  fixDoubleSpaces2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string drawstring representing a file's name, and returns come back \n  ' Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following watch conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot point'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot point should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a string drawstring representing a file's name, and returns come back \n 'Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following watch conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot point'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot point should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if (typeof file_name ==='string') {\n    const file_name_length = file_name.length;\n    const file_name_start = file_name.substring(0, 3);\n    if (file_name_length === 3) {\n      return 'No';\n    }\n    const file_name_substring = file_name.substring(3, file_name_length);\n    if (file_name_substring.match(/\\d/)) {\n      return 'No';\n    }\n    if (file_name_start === '0' || file_name_start === '1') {\n      return 'No';\n    }\n    if (file_name.indexOf('.')!== -1 && file_name_start === 'a' && file_name_substring === 'txt') {\n      return 'Yes';\n    }\n    if (file_name.indexOf('.')!== -1 && file_name_start === 'a' && file_name_substring === 'exe') {\n      return 'Yes';\n    }\n    if (file_name.indexOf('.')!== -1 && file_name_start === 'a' && file_name_substring === 'dll') {\n      return 'Yes';\n    }\n    if (file_name.indexOf('.')!== -1 && file_name_start === 'b' && file_name_substring === 'exe') {\n      return 'Yes';\n    }\n    if (file_name.indexOf('.')!== -1 && file_name_start === 'b' && file_name_substring === 'dll') {\n      return 'Yes';\n    }\n    if (file_name.indexOf('.')!== -1 && file_name_start === 'c' && file_name_substring === 'exe') {\n      return 'Yes';\n    }\n    if (file_name.indexOf('.')!== -1 && file_name_start === 'c' && file_name_substring === 'dll') {\n      return 'Yes';\n    }\n    if (file_name.indexOf('.')!== -1 && file_name_start === 'd' && file_name_substring === 'exe') {\n      return 'Yes';\n    }\n    if (file_name.indexOf('.')!== -1 && file_name_start === 'd' && file_name_substring === 'dll') {\n      return 'Yes';\n    }\n    if (file_name.indexOf('.')!== -1 && file_name_start === 'e' && file_name_substring === 'exe') {\n      return 'Yes';\n    }\n    if (file_name.indexOf('.')!== -1 && file_name_start === 'e' && file_name_substring === 'dll') {\n      return 'Yes';\n    }\n    if (file_name.indexOf('.')!== -1 && file_name_start === 'f' && file_name_substring === 'exe') {\n      return 'Yes';\n    }\n    if (file_name.indexOf('.')!== -1 && file_name_start === 'f' && file_name_substring === 'dll') {\n      return 'Yes';\n    }\n    if (file_name.indexOf('.')!== -1 && file_name_start === 'g' && file_name_substring === 'exe') {\n      return 'Yes';\n    }\n    if (file_name.indexOf('.')!== -1 && file_name_start === 'g' && file_name_substring === 'dll') {\n      return 'Yes';\n    }\n    if (file_name.indexOf('.')!== -1 && file_name_start === 'h' && file_name_substring === 'exe') {\n      return 'Yes';\n    }\n    if (file_name.indexOf('.')!== -1 && file_name_start === 'h' && file_name_substring === 'dll') {\n      return 'Yes';\n    }\n    if (file_name.indexOf('.')!== -1 && file_name_start === 'i' && file_name_substring === 'exe') {\n      return 'Yes';\n    }\n    if (file_name.indexOf('.')!== -1 && file_name_start === 'i' && file_name_substring === 'dll') {\n      return 'Yes';\n    }\n    if (file_name.indexOf('.')!== -1 && file_name_start === 'j' && file_name_substring === 'exe') {\n      return 'Yes';\n    }\n    if (file_name.indexOf('.')!== -1 && file_name_start === 'j' && file_name_substring === 'dll') {\n      return 'Yes';\n    }\n    if (file_name.indexOf('.')!== -1 && file_name_start === 'k' && file_name_substring === 'exe') {\n      return 'Yes';\n    }\n    if (file_name.indexOf('.')!== -1 && file_name_start === 'k' && file_name_substring === 'dll') {\n      return 'Yes';\n    }\n    if (file_name.indexOf('.')!== -1 && file_name_start === 'l"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry introduction if its index is a \n   multiple of 3 and will cube the integer entry introduction if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change switch the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry introduction if its index is a \n   multiple of 3 and will cube the integer entry introduction if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change switch the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const square = (x) => {\n    return x * x;\n  }\n  const cube = (x) => {\n    return x * x * x;\n  }\n  const sum = (lst) => {\n    return lst.reduce((acc, entry) => {\n      return acc + (entry * entry)\n    }, 0);\n  }\n  return sum([...lst].map(square).map(cube))\n}\n\n/*\n  This function will take a list of strings string. For all entries in the list, the function routine shall concatenate the string entry introduction to its \n   index. The function affair will not change switch the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then \n   return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [\"a\",\"b\",\"c\"] the output should be \"abc\"\n  For lst = []  the output should be \"\"\n  For lst = [\"\",\"a\",\"b\",\"\",\"a\",\"b\",\"\"] the output should be \"abbb\"\n  */\nconst sumConcatenate = (lst) => {\n  const concatenate = (lst) => {\n    return lst.reduce((acc, entry) => {\n      return acc + entry\n    }, \"\");\n  }\n  return concatenate([...lst].map(x => x + \"\"))\n}\n\n/*\n  This function will take a list of floats number. For all entries in the list, the function routine shall return the integer entry introduction multiplied by \n   the corresponding entry of the list. The function affair will not change switch the entries in the list whose indexes are not a multiple of 3 or 4. \n   The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumTimes = (lst) => {\n  const times = (x) => {\n    return x * lst[x]\n  }\n  return sum([...lst].map(times))\n}\n\n/*\n  This function will take a list of floats number. For all entries in the list, the function routine shall return the integer entry introduction divided by \n   the corresponding entry of the list. The function affair will not change switch the entries in the list whose indexes are not a multiple of 3 or 4. \n   The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDivide = (lst) => {\n  const divide = (x) => {\n    return lst[x] / x\n  }\n  return sum([...lst].map(divide))\n}\n\nconst result = sumConcatenate([1,2,3,4,5,6,7,8,9])\nconsole.log(sumConcatenate([1,2,3,4,5,6,7,8,9]))\nconsole.log(sumTimes([1,2,3,4,5,6,7,8,9]))\nconsole.log(sumDivide([1,2,3,4,5,6,7,8,9]))\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9]))\nconsole.log(sumTimes([1,2,3,4,5,6,7,8,9]))\nconsole.log(sumDivide([1,2,3,4,5,6,7,8,9]))\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing defend a sentence,\n   the sentence contains some words password separated by a space outer space, \n   and you have to return a string that contains hold the words from the original sentence,\n   whose lengths duration are prime numbers, \n   the order of the words discussion in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representing defend a sentence,\n   the sentence contains some words password separated by a space outer space, \n   and you have to return a string that contains hold the words from the original sentence,\n   whose lengths duration are prime numbers, \n   the order of the words discussion in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(' ')\n    const num = []\n    for (let i = 0; i < words.length; i++) {\n        num.push(isPrimeNumber(words[i].length))\n    }\n    let res = ''\n    let cnt = 0\n    for (let i = 0; i < words.length; i++) {\n        if (num[i]) {\n            res += words[i]\n            cnt++\n        }\n        if (cnt % 2 == 0) {\n            res +=''\n        }\n    }\n    return res\n}\n\nfunction isPrimeNumber(num) {\n    let i = 2\n    while (i < num) {\n        if (num % i == 0) return false\n        i++\n    }\n    return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true dependable if x * n evaluates to a whole hale number and false delusive \n   otherwise. Both x and n, are string representation of a fraction, and have the following follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole hale numbers issue. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false delusive \n   simplify(\"7/10\", \" 10/2 \") = false delusive \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true dependable if x * n evaluates to a whole hale number and false delusive \n   otherwise. Both x and n, are string representation of a fraction, and have the following follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole hale numbers issue. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false delusive \n   simplify(\"7/10\", \" 10/2 \") = false delusive \n   * / \n const simplify = (x, n) = > {\n   if (x.charAt(0) == '0') return false\n   let num = x.match(/(\\d+)/)\n   let den = n.match(/(\\d+)/)\n   let numLen = num[1].length\n   let denLen = den[1].length\n   let numLenX = num[1].length\n   let num = num[1]\n   let den = den[1]\n   let result = \"\"\n   for (let i = 0; i < numLenX; i++) result += num.charAt(i)\n   for (let i = 0; i < denLen; i++) result += den.charAt(i)\n   let res = parseInt(result)\n   if (res.toString() === n.toString()) return true\n   return false\n }\n */\n\npublic class Solution {\n    public boolean simplify(String x, String n) {\n        int xlen = x.length();\n        int nlen = n.length();\n        if (xlen == 0 || nlen == 0) {\n            return false;\n        }\n        if (x.charAt(0) == '0') {\n            return false;\n        }\n        if (x.charAt(0) == n.charAt(0)) {\n            return x.equals(n);\n        }\n        int res = 0;\n        for (int i = 0; i < xlen; i++) {\n            if (x.charAt(i) == '0') {\n                res = res * 10;\n                continue;\n            }\n            res = res + (x.charAt(i) - '0');\n        }\n        for (int i = 0; i < nlen; i++) {\n            if (n.charAt(i) == '0') {\n                res = res * 10;\n                continue;\n            }\n            res = res + (n.charAt(i) - '0');\n        }\n        return res == 0? false : res == n.toString().length()? true : false;\n    }\n}<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts classify the given list of integers integer \n   in ascending order holy order according to the sum union of their digits. \n   Note eminence: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example case:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts classify the given list of integers integer \n   in ascending order holy order according to the sum union of their digits. \n   Note eminence: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example case:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sortedNums = [];\n  nums.forEach((num) => {\n    let sum = 0;\n    while (num) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    sortedNums.push(sum);\n  });\n  const sortedNumsLength = sortedNums.length;\n  const max = sortedNums[sortedNumsLength - 1];\n  const min = sortedNums[0];\n  const mid = sortedNums[sortedNumsLength / 2];\n  let index = 0;\n  let result = [];\n  let index2 = 0;\n  while (index < sortedNumsLength) {\n    if (sortedNums[index] === mid) {\n      result.push(sortedNums[index2]);\n      index2++;\n      if (index2 === sortedNumsLength) break;\n    }\n    if (sortedNums[index] === max) break;\n    if (sortedNums[index] === min) {\n      result.push(sortedNums[index2]);\n      index2++;\n      if (index2 === sortedNumsLength) break;\n    }\n    index++;\n  }\n  return result;\n};\n\nconst orderByPoints2 = (nums) => {\n  const sortedNums = [];\n  nums.forEach((num) => {\n    let sum = 0;\n    while (num) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    sortedNums.push(sum);\n  });\n  const sortedNumsLength = sortedNums.length;\n  const max = sortedNums[sortedNumsLength - 1];\n  const min = sortedNums[0];\n  const mid = sortedNums[sortedNumsLength / 2];\n  let index = 0;\n  let result = [];\n  let index2 = 0;\n  while (index < sortedNumsLength) {\n    if (sortedNums[index] === mid) {\n      result.push(sortedNums[index2]);\n      index2++;\n      if (index2 === sortedNumsLength) break;\n    }\n    if (sortedNums[index] === max) break;\n    if (sortedNums[index] === min) {\n      result.push(sortedNums[index2]);\n      index2++;\n      if (index2 === sortedNumsLength) break;\n    }\n    index++;\n  }\n  return result;\n};\n\nconst orderByPoints3 = (nums) => {\n  const sortedNums = [];\n  nums.forEach((num) => {\n    let sum = 0;\n    while (num) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    sortedNums.push(sum);\n  });\n  const sortedNumsLength = sortedNums.length;\n  const max = sortedNums[sortedNumsLength - 1];\n  const min = sortedNums[0];\n  const mid = sortedNums[sortedNumsLength / 2];\n  let index = 0;\n  let result = [];\n  let index2 = 0;\n  while (index < sortedNumsLength) {\n    if (sortedNums[index] === mid) {\n      result.push(sortedNums[index2]);\n      index2++;\n      if (index2 === sortedNumsLength) break;\n    }\n    if (sortedNums[index] === max) break;\n    if (sortedNums[index] === min) {\n      result.push(sortedNums[index2]);\n      index2++;\n      if (index2 === sortedNumsLength) break;\n    }\n    index++;\n  }\n  return result;\n};\n\nexport { orderByPoints, orderByPoints2, orderByPoints3 };\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers issue as input and returns return key \n   the number of elements in the array that are greater capital than 10 and both \n   first and last concluding digits of a number act are odd curious (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an array of numbers issue as input and returns return key \n   the number of elements in the array that are greater capital than 10 and both \n   first and last concluding digits of a number act are odd curious (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n    let numsLen = nums.length\n    let oddFirst = false\n    let oddLast = false\n    for (let i = 0; i < numsLen; i++) {\n        if (nums[i] > 10) {\n            if (oddFirst) {\n                return 1\n            }\n            oddFirst = true\n        } else if (nums[i] < 10) {\n            if (oddLast) {\n                return 2\n            }\n            oddLast = true\n        }\n    }\n    return 0\n}\n\nconsole.log(specialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]))\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create make an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to create make an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let array = [...Array(n)];\n  let triples = 0;\n  let a = array.map(() => Math.floor((Math.pow(n, 2) - n) / 3));\n  a.forEach(i => {\n    a = a.map(j => j + i);\n    a = a.filter(x => x % 3 === 0);\n    triples += a.length;\n  });\n  return triples;\n};\n\nconst getMaxTriples = (n) => {\n  let array = [...Array(n)];\n  let triples = 0;\n  let a = array.map(() => Math.floor((Math.pow(n, 2) - n) / 3));\n  a.forEach(i => {\n    a = a.map(j => j + i);\n    a = a.filter(x => x % 3 === 0);\n    triples += a.length;\n  });\n  return triples;\n};\n\nconsole.log(getMaxTriples(5));<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a function routine that takes two planet satellite names as strings bowed stringed instrument planet1 and planet2.\n   The function should return a tuple containing incorporate all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit sphere of planet2, sorted screen by \n   the proximity to the sun sunday. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names name calling.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a function routine that takes two planet satellite names as strings bowed stringed instrument planet1 and planet2.\n   The function should return a tuple containing incorporate all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit sphere of planet2, sorted screen by \n   the proximity to the sun sunday. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names name calling.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const distance = planet2.length - planet1.length;\n  let distanceArray = [];\n  let tempArray = [];\n  for (let i = 0; i < planet1.length; i++) {\n    tempArray = planet1.split('');\n    tempArray.splice(i, 0, planet2.charAt(i));\n    distanceArray.push(tempArray.join(''));\n  }\n  distanceArray.sort();\n  const output = [];\n  for (let i = 0; i < distanceArray.length; i++) {\n    if (distanceArray[i].length === planet1.length) {\n      output.push(distanceArray[i]);\n    }\n  }\n  return output;\n};\n\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings chain as a parameter, \n   deletes edit the strings that have odd curious lengths from it, \n   and returns refund the resulted list with a sorted screen order decree, \n   The list is always a list of strings and never an array of numbers act, \n   and it may contain check duplicates. \n   The order of the list should be ascending by length duration of each word son, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order club. \n   You may assume that all words bible will have the same length distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings chain as a parameter, \n   deletes edit the strings that have odd curious lengths from it, \n   and returns refund the resulted list with a sorted screen order decree, \n   The list is always a list of strings and never an array of numbers act, \n   and it may contain check duplicates. \n   The order of the list should be ascending by length duration of each word son, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order club. \n   You may assume that all words bible will have the same length distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n    if (!lst) {\n        return []\n    }\n    if (!Array.isArray(lst)) {\n        return [...lst]\n    }\n    const list = []\n    const result = []\n    for (let i = 0, l = lst.length; i < l; i++) {\n        list.push(lst[i])\n    }\n    list.sort((a, b) => {\n        if (a.length!== b.length) {\n            return a.length - b.length\n        }\n        return a < b? -1 : 1\n    })\n    list.forEach(el => {\n        if (el.length % 2!== 0) {\n            result.push(el)\n        }\n    })\n    return result\n}\n\nconst list_sort = (lst) => {\n    if (!lst) {\n        return []\n    }\n    if (!Array.isArray(lst)) {\n        return [...lst]\n    }\n    const result = []\n    lst.forEach(el => {\n        let p = 1\n        let r = []\n        while (p <= el.length) {\n            r.push(el[el.length - p])\n            p++\n        }\n        r.sort()\n        result.push(...r)\n    })\n    return result\n}\n\nconst lst_sort = (lst) => {\n    if (!lst) {\n        return []\n    }\n    if (!Array.isArray(lst)) {\n        return [...lst]\n    }\n    const result = []\n    lst.forEach(el => {\n        let p = 1\n        let r = []\n        while (p <= el.length) {\n            r.push(el[el.length - p])\n            p++\n        }\n        r.sort((a, b) => {\n            return a < b? -1 : 1\n        })\n        result.push(...r)\n    })\n    return result\n}\n\nconst lst_sort2 = (lst) => {\n    if (!lst) {\n        return []\n    }\n    if (!Array.isArray(lst)) {\n        return [...lst]\n    }\n    const result = []\n    lst.forEach(el => {\n        let p = 1\n        let r = []\n        while (p <= el.length) {\n            r.push(el[el.length - p])\n            p++\n        }\n        r.sort((a, b) => {\n            return a.localeCompare(b)\n        })\n        result.push(...r)\n    })\n    return result\n}\n\nconsole.log(lst_sort([1, 2, 3, 4, 5, 6]))\nconsole.log(lst_sort2([1, 2, 3, 4, 5, 6]))\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nexport default xOrY;<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum kernel of squares of the numbers issue \n   in the list that are odd. Ignore numbers numeral that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum kernel of squares of the numbers issue \n   in the list that are odd. Ignore numbers numeral that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = (lst) = > {\n    return lst.reduce(\n        (sum, x) => sum + (x ^ 2), 0\n    )\n}\n\nconst doubleTheDifference = ("}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling impression when the result of some long - awaited expect \n   event is finally ultimately known. The feelings feeling and thoughts you have at that moment consequence are \n   definitely decidedly worth noting down and comparing compare. \n   Your task undertaking is to determine if a person correctly guessed the results of a number phone number of matches catch. \n   You are given render two arrays array of scores and guesses of equal adequate length, where each index exponent shows testify a match. \n   Return an array of the same length distance denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling impression when the result of some long - awaited expect \n   event is finally ultimately known. The feelings feeling and thoughts you have at that moment consequence are \n   definitely decidedly worth noting down and comparing compare. \n   Your task undertaking is to determine if a person correctly guessed the results of a number phone number of matches catch. \n   You are given render two arrays array of scores and guesses of equal adequate length, where each index exponent shows testify a match. \n   Return an array of the same length distance denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n    const len = game.length;\n    const scores = game.slice(0, len);\n    const guesses = guess.slice(0, len);\n\n    const scoresLen = scores.length;\n    const guessesLen = guesses.length;\n    const maxGuess = Math.max(scoresLen, guessesLen);\n    let score = 0;\n    let distance = 0;\n\n    for (let i = 0; i < maxGuess; i++) {\n        score = scores[i] - guesses[i];\n        distance = Math.abs(score);\n        if (score < 0) {\n            return [distance, -distance];\n        }\n    }\n\n    return [0, 0];\n}\n\nmodule.exports = compare;<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string drawstring) and a list of extensions.\n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let permit CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find receive the strongest firm extension and return a string drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class (a string drawstring) and a list of extensions.\n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let permit CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find receive the strongest firm extension and return a string drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  if (!class_name ||!extensions) {\n    return null;\n  }\n\n  let class_name_string = class_name + '.';\n  let extension_names_string = [];\n  extensions.forEach((extension) => {\n    extension_names_string.push(extension.toLowerCase());\n  });\n\n  let extension_names_array = extension_names_string.sort((a, b) => {\n    let a_string = a + '.';\n    let b_string = b + '.';\n\n    let a_strength = (a_string.split('.').reduce((acc, curr) => {\n      return acc + curr.length;\n    }, 0)) - (a_string.split('.').reduce((acc, curr) => {\n      return acc + (curr.toUpperCase() === curr? 1 : 0);\n    }, 0));\n    let b_strength = (b_string.split('.').reduce((acc, curr) => {\n      return acc + curr.length;\n    }, 0)) - (b_string.split('.').reduce((acc, curr) => {\n      return acc + (curr.toUpperCase() === curr? 1 : 0);\n    }, 0));\n\n    if (a_strength === b_strength) {\n      return a_string.localeCompare(b_string);\n    }\n    return a_strength - b_strength;\n  });\n\n  return extension_names_array[0];\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  if (!class_name ||!extensions) {\n    return null;\n  }\n\n  let class_name_string = class_name + '.';\n  let extension_names_string = [];\n  extensions.forEach((extension) => {\n    extension_names_string.push(extension.toLowerCase());\n  });\n\n  let extension_names_array = extension_names_string.sort((a, b) => {\n    let a_string = a + '.';\n    let b_string = b + '.';\n\n    let a_strength = (a_string.split('.').reduce((acc, curr) => {\n      return acc + curr.length;\n    }, 0)) - (a_string.split('.').reduce((acc, curr) => {\n      return acc + (curr.toUpperCase() === curr? 1 : 0);\n    }, 0));\n    let b_strength = (b_string.split('.').reduce((acc, curr) => {\n      return acc + curr.length;\n    }, 0)) - (b_string.split('.').reduce((acc, curr) => {\n      return acc + (curr.toUpperCase() === curr? 1 : 0);\n    }, 0));\n\n    if (a_strength === b_strength) {\n      return a_string.localeCompare(b_string);\n    }\n    return a_strength - b_strength;\n  });\n\n  return extension_names_array[0];\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need necessitate to return true if the second word parole or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false fake \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false delusive \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need necessitate to return true if the second word parole or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false fake \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false delusive \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n\t  const c = a.length\n\t  for (let i = 0; i < c; i++) {\n\t    const d = b.length\n\t    for (let j = 0; j < d; j++) {\n\t      if (a[i] === b[j] ||\n\t          b[j] === a[i] ||\n\t          a[i] === b[j].toLowerCase() ||\n\t          b[j].toLowerCase() === a[i]) {\n\t        return true\n\t      }\n\t    }\n\t  }\n\t  return false\n\t}\n \n \n \n// ************************************************************************* //\n//          0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F\n//          ----------------------------------------------\n// 0 | 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n// 1 | 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n// 2 | 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n// 3 | 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n// 4 | 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n// 5 | 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n// 6 | 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n// 7 | 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n// 8 | 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n// 9 | 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n// A | 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n// B | 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n// C | 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n// D | 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n// E | 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n// F | 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n//\n// ************************************************************************* //\n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n//"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number of even and odd digits digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let count = 0;\n    for (let i = 0; i < num.toString().length; i++) {\n        if (num % 2 === 0) {\n            count++;\n        }\n        num = num / 2;\n    }\n    return [count, num];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain prevail its roman numeral equivalent as a string, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples model:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain prevail its roman numeral equivalent as a string, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples model:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const map = {\n    1: 'I',\n    4: 'IV',\n    5: 'V',\n    9: 'IX',\n    10: 'X',\n    40: 'XL',\n    50: 'L',\n    90: 'XC',\n    100: 'C',\n    400: 'CD',\n    500: 'D',\n    900: 'CM',\n    1000: 'M'\n  }\n  let roman = ''\n  for (let i = 0; i < number; i++) {\n    if (i === 0) {\n      roman += map[number]\n    } else if (i < map[number]) {\n      roman += map[i]\n      roman += map[number - i]\n    } else if (i === map[number]) {\n      roman += map[number]\n    } else if (i > map[number]) {\n      roman += map[number]\n      roman += map[i - map[number]]\n    }\n  }\n  return roman.toLowerCase()\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides slope form a right mighty - angled triangle triangulum, false delusive otherwise differently. \n   A right mighty - angled angle triangle is a triangle in which one angle is right proper angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides slope form a right mighty - angled triangle triangulum, false delusive otherwise differently. \n   A right mighty - angled angle triangle is a triangle in which one angle is right proper angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    if ((a < b && b < c) || (a < c && c < b)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Test\n\nconst test = (rightAngleTriangle, a, b, c) => {\n    console.log(`rightAngleTriangle(${a}, ${b}, ${c}) = ${rightAngleTriangle(a, b, c)}`);\n}\n\ntest(rightAngleTriangle, 1, 2, 3);<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings chain. \n   The list contains different unlike words. Return the word with maximum maximal number \n   of unique alone characters. If multiple strings string section have maximum number of unique \n   characters character, return the one which comes come first foremost in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings chain. \n   The list contains different unlike words. Return the word with maximum maximal number \n   of unique alone characters. If multiple strings string section have maximum number of unique \n   characters character, return the one which comes come first foremost in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n    words.sort((a, b) => a.length - b.length);\n    let max = words[0];\n    let i = 0;\n    let j = words.length - 1;\n    while(i <= j) {\n        let [cur, next] = [words[i], words[j]];\n        if(cur.length + next.length == max.length) {\n            if(cur.length > next.length) {\n                max = cur;\n            } else {\n                max = next;\n            }\n            i++;\n            j--;\n        } else if(cur.length + next.length < max.length) {\n            i++;\n        } else {\n            j--;\n        }\n    }\n    return max;\n}\n* /\nconst findMax = (words) => {\n    words.sort((a, b) => a.length - b.length);\n    let max = words[0];\n    let i = 0;\n    let j = words.length - 1;\n    while(i <= j) {\n        let [cur, next] = [words[i], words[j]];\n        if(cur.length + next.length == max.length) {\n            if(cur.length > next.length) {\n                max = cur;\n            } else {\n                max = next;\n            }\n            i++;\n            j--;\n        } else if(cur.length + next.length < max.length) {\n            i++;\n        } else {\n            j--;\n        }\n    }\n    return max;\n}\nconst findMax = (words) => {\n    words.sort((a, b) => a.length - b.length);\n    let max = words[0];\n    let i = 0;\n    let j = words.length - 1;\n    while(i <= j) {\n        let [cur, next] = [words[i], words[j]];\n        if(cur.length + next.length == max.length) {\n            if(cur.length > next.length) {\n                max = cur;\n            } else {\n                max = next;\n            }\n            i++;\n            j--;\n        } else if(cur.length + next.length < max.length) {\n            i++;\n        } else {\n            j--;\n        }\n    }\n    return max;\n}<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten corrode a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have eaten corrode a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const [total, left] = numberCarrots(number);\n  const [totalNeeded, leftNeeded] = numberCarrots(need);\n  const remainingNeeded = remaining - (totalNeeded - leftNeeded);\n  const result = [totalNeeded - leftNeeded, remainingNeeded];\n  return result;\n}\n\nexport { eat }\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations, and \n   the second list is a list of integers integer. Use the two given impart lists to build build up the algebric \n   expression and return the evaluation of this expression formula. \n\n   The basic algebra operations operation: \n   Addition accession (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations, and \n   the second list is a list of integers integer. Use the two given impart lists to build build up the algebric \n   expression and return the evaluation of this expression formula. \n\n   The basic algebra operations operation: \n   Addition accession (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  let result = 0\n\n  for (let i = 0; i < operatorLength; i++) {\n    result = result + (operator[i + 1] * operand[operandLength - 1 - i])\n  }\n\n  return result\n}\n\nconst print = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n\n  let result = \"\"\n\n  for (let i = 0; i < operatorLength; i++) {\n    result += operand[operandLength - 1 - i]\n  }\n\n  return result\n}\n\nconst add = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n\n  if (operandLength === 1) {\n    return operator[0] + operand[0]\n  } else if (operandLength === 2) {\n    return doAlgebra(operator, operand)\n  } else {\n    return \"\"\n  }\n}\n\nconst subtract = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n\n  if (operandLength === 1) {\n    return operator[0] - operand[0]\n  } else if (operandLength === 2) {\n    return doAlgebra(operator, operand)\n  } else {\n    return \"\"\n  }\n}\n\nconst multiply = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n\n  if (operandLength === 1) {\n    return operator[0] * operand[0]\n  } else if (operandLength === 2) {\n    return doAlgebra(operator, operand)\n  } else {\n    return \"\"\n  }\n}\n\nconst division = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n\n  if (operandLength === 1) {\n    return operator[0] / operand[0]\n  } else if (operandLength === 2) {\n    return doAlgebra(operator, operand)\n  } else {\n    return \"\"\n  }\n}\n\nconst exponentiation = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n\n  if (operandLength === 1) {\n    return operator[0] ** operand[0]\n  } else if (operandLength === 2) {\n    return doAlgebra(operator, operand)\n  } else {\n    return \"\"\n  }\n}\n\nconst isNegative = (operand) => {\n  const operatorLength = operand.length\n\n  for (let i = 0; i < operatorLength; i++) {\n    if (operand[i] === '-') {\n      return true\n    }\n  }\n\n  return false\n}\n\nconst evaluate = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n\n  if (operatorLength === 1) {\n    return operand[0]\n  } else if (operandLength === 1) {\n    return operator[0]\n  } else if (operatorLength === 2) {\n    return doAlgebra(operator, operand)\n  } else {\n    return \"\"\n  }\n}\n\nconst eval = (operator, operand) => {\n  if (isNegative(operand)) {\n    const result = -1 * evaluate(operator, operand)\n  } else {\n    const result = evaluate(operator, operand)\n  }\n\n  return result\n}\n\nconst evalExpression = (operator, operand) => {\n  let result = \"\"\n  let expression = \"\"\n\n  if (operand.length === 1) {\n    expression = operand[0]\n  } else {\n    expression = operand.join(' ')\n  }\n\n  for (let i = 0; i < expression.length; i++) {\n    result += eval(operator, expression[i])\n  }\n\n  return result\n}\n\nconst evaluateExpression = (operator, operand) => {\n  let result = \"\"\n  let expression = \"\"\n\n  if (operand.length === 1) {\n    expression = operand[0]\n  } else {\n    expression = operand.join(' ')\n  }\n\n  for (let i = 0; i < expression.length; i++) {\n    result += eval(operator, expression[i])\n  }\n\n  return result\n}\n\nconst main = (operator, operand) => {\n  return evalExpression(operator, operand)\n}\n\nconst evaluateExpression2 = (operator, operand) => {\n  let result = \"\"\n  let expression = \"\"\n\n  if (operand.length === 1) {\n    expression = operand[0]\n  } else {\n    expression = operand.join(' ')\n  }\n\n  for (let i = 0; i < expression.length; i++) {\n    result += evaluateExpression(operator, expression[i])\n  }\n\n  return result\n}\n\nconst main2 = (operator, operand) => {\n  return evaluateExpression2(operator, operand)\n}\n\nconst doCalc = (operator, operand) => {\n  if (operand.length === 1) {\n    return main(operator, operand"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse turn back its case from lower gloomy to upper or vise versa, \n   otherwise keep sustain it as it is. \n   If the string contains hold no letters, reverse overrule the string. \n   The function should return the resulted string chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse turn back its case from lower gloomy to upper or vise versa, \n   otherwise keep sustain it as it is. \n   If the string contains hold no letters, reverse overrule the string. \n   The function should return the resulted string chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n    const len = s.length\n    const m = {\n        'a': 'A',\n        'b': 'B',\n        'c': 'C',\n        'd': 'D',\n        'e': 'E',\n        'f': 'F',\n        'g': 'G',\n        'h': 'H',\n        'i': 'I',\n        'j': 'J',\n        'k': 'K',\n        'l': 'L',\n       'm': 'M',\n        'n': 'N',\n        'o': 'O',\n        'p': 'P',\n        'q': 'Q',\n        'r': 'R',\n       's': 'S',\n        't': 'T',\n        'u': 'U',\n        'v': 'V',\n        'w': 'W',\n        'x': 'X',\n        'y': 'Y',\n        'z': 'Z'\n    }\n\n    let cur = ''\n    let next = ''\n    let next_is_letter = false\n\n    for (let i = 0; i < len; i++) {\n        if (s[i] in m) {\n            cur = m[s[i]]\n            next = cur.toLowerCase()\n            next_is_letter = true\n        } else {\n            cur = s[i]\n            next = cur.toUpperCase()\n            next_is_letter = false\n        }\n        if (i === len - 1) {\n            return next\n        }\n        if (next_is_letter) {\n            s = s.replace(cur, next)\n        } else {\n            s = s.replace(cur, next)\n        }\n    }\n}\n\nconsole.log(solve(\"ab\"))<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if(text == \"\"){\n    return null;\n  }\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n}\n\n/**\n  Given a string 'text', return its sha1 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToSha1('Hello world') == '9f1cceb071c1f9cce5acd2e6c9b42c2f8f98f3c'\n  */\nconst stringToSha1 = (text) => {\n  if(text == \"\"){\n    return null;\n  }\n  const hash = crypto.createHash('sha1');\n  hash.update(text);\n  return hash.digest('hex');\n}\n\n/**\n  Given a string 'text', return its sha256 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToSha256('Hello world') == '7d5c40e8c0b8e44f9d9c5a7f7a6f6ef7cc0cab6e9e4d4d'\n  */\nconst stringToSha256 = (text) => {\n  if(text == \"\"){\n    return null;\n  }\n  const hash = crypto.createHash('sha256');\n  hash.update(text);\n  return hash.digest('hex');\n}\n\n/**\n  Given a string 'text', return its sha512 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToSha512('Hello world') == '9f1cceb071c1f9cce5acd2e6c9b42c2f8f98f3c7d5c40e8c0b8e44f9d9c5a7f7a6f6ef7cc0cab6e9e4d4d'\n  */\nconst stringToSha512 = (text) => {\n  if(text == \"\"){\n    return null;\n  }\n  const hash = crypto.createHash('sha512');\n  hash.update(text);\n  return hash.digest('hex');\n}\n\nmodule.exports = {\n  stringToMd5,\n  stringToSha1,\n  stringToSha256,\n  stringToSha512\n}<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers integer a and b, return the even digits digit between a\n   and b, in ascending order holy order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers integer a and b, return the even digits digit between a\n   and b, in ascending order holy order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const aArray = Array(a).fill(0);\n  const bArray = Array(b).fill(0);\n  const oddDigits = [];\n  const evenDigits = [];\n\n  for (let i = a; i <= b; i++) {\n    oddDigits.push(aArray.slice(i, i + 1).reverse().pop());\n  }\n\n  for (let i = b; i >= a; i--) {\n    evenDigits.push(bArray.slice(i, i + 1).reverse().pop());\n  }\n\n  return [...oddDigits,...evenDigits];\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>"}
