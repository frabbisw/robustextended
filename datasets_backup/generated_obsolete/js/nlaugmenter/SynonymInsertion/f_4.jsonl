{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const dist = Math.abs(numbers[0] - numbers[1])\n  for (let i = 2; i < numbers.length; i++) {\n    const currDist = Math.abs(numbers[i] - numbers[i - 1])\n    if (currDist > dist) {\n      return false\n    } else if (currDist > threshold) {\n      return true\n    }\n  }\n  return true\n}\n\n/*\n  Check if number is even or not\n  >>> isEven(2)\n  false\n  >>> isEven(0)\n  true\n  >>> isEven(1)\n  true\n  >>> isEven(3)\n  true\n  >>> isEven(4)\n  false\n  >>> isEven(5)\n  false\n  >>> isEven(6)\n  false\n  >>> isEven(7)\n  false\n  >>> isEven(8)\n  true\n  */\nconst isEven = number => {\n  return number % 2 === 0\n}\n\n/*\n  Calculate the sum of two numbers\n  >>> sum(2, 3)\n  5\n  >>> sum(3, 2)\n  5\n  >>> sum(3, 2, 4, 5)\n  15\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8])\n  45\n  >>> sum([2, 3, 4, 5, 6, 7, 8, 9])\n  45\n  >>> sum([2, 3, 4, 5, 6, 7, 8, 9, 10])\n  45\n  >>> sum([2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  45\n  >>> sum([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  45\n  >>> sum([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  45\n  >>> sum([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  45\n  >>> sum([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  45\n  */\nconst sum = (...numbers) => {\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n  }\n  return sum\n}\n\n/*\n  Check if number is odd or not\n  >>> isOdd(2)\n  false\n  >>> isOdd(0)\n  false\n  >>> isOdd(1)\n  true\n  >>> isOdd(3)\n  true\n  >>> isOdd(4)\n  true\n  >>> isOdd(5)\n  false\n  >>> isOdd(6)\n  false\n  >>> isOdd(7)\n  false\n  >>> isOdd(8)\n  false\n  >>> isOdd(9)\n  false\n  >>> isOdd(10)\n  false\n  >>> isOdd(11)\n  false\n  >>> isOdd(12)\n  false\n  >>> isOdd(13)\n  false\n  >>> isOdd(14)\n  false\n  >>> isOdd(15)\n  false\n  >>> isOdd(16)\n  false\n  >>> isOdd(17)\n  false\n  >>> isOdd(18)\n  false\n  >>> isOdd(19)\n  false\n  >>> isOdd(20)\n  false\n  >>> isOdd(21)\n  false\n  >>> isOdd(22)\n  false\n  >>> isOdd(23)\n  false\n  >>> isOdd(24)\n  false\n  >>> isOdd(25)\n  false\n  >>> isOdd(26)\n  false\n  >>> isOdd(27)\n  false\n  >>> isOdd(28)\n  false\n  >>> isOdd(29)\n  false\n  >>> isOdd(30)\n  false\n  >>> isOdd(31)\n  false\n  >>> isOdd(32)\n  false\n  >>> isOdd(33)\n  false\n  >>> isOdd(34)\n  false\n  >>> isOdd(35)\n  false\n  >>> isOdd(36)\n  false\n  >>> isOdd(37)\n  false\n  >>> isOdd(38)\n  false\n  >>> isOdd(39)\n  false\n  >>> isOdd(40)\n  false\n  >>> isOdd(41)\n  false\n  >>> isOdd(42)\n  false\n  >>> isOdd(43)\n  false\n  >>> isOdd(44)\n  false\n  >>> isOdd(45)\n  false\n  >>> isOdd(46)\n  false\n  >>> isOdd(47)\n  false\n  >>> isOdd(48)\n  false\n  >>> isOdd(49)\n  false\n  >>> isOdd(50)\n  false\n  >>> isOdd(51)\n  false\n  >>> isOdd(52)\n  false\n  >>> isOdd(53)\n  false\n  >>> isOdd(54)\n  false\n  >>> isOdd(55)\n  false\n  >>> isOdd(56)\n  false\n  >>> isOdd(57)\n  false\n  >>> isOdd(58)\n  false\n  >>> isOdd(59)\n  false\n  >>> isOdd(60)\n  false\n  >>> isOdd(61)\n  false\n  >>> isOdd(62)\n  false\n  >>> isOdd(63)\n  false\n  >>> isOdd(64)\n  false\n  >>> isOdd(65)\n  false\n  >>> isOdd(66)\n  false\n  >>> isOdd(67)\n  false\n  >>> isOdd(68)\n  false\n  >>> isOdd(69)"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   separate freestanding those group into separate strings string section and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   separate freestanding those group into separate strings string section and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const result = []\n  let curr_level = 0\n  let depth = 0\n  let result_pos = 0\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const c = paren_string[i]\n    if (c === '(') {\n      curr_level += 1\n      depth += 1\n    } else if (c === ')') {\n      curr_level -= 1\n      depth -= 1\n    } else {\n      if (depth === 0) {\n        result[result_pos] = paren_string.slice(i + 1)\n        result_pos += 1\n      }\n    }\n  }\n\n  return result\n}\n\nexport default separateParenGroups\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating float point number, it can be decomposed disintegrate into \n   and integer part (largest bombastic integer smaller than given give number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating float point number, it can be decomposed disintegrate into \n   and integer part (largest bombastic integer smaller than given give number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    let intPart = number;\n    let decimalPart = number;\n    let intDigits = 0;\n\n    while (intPart >= 10) {\n        intPart = intPart / 10;\n        intDigits++;\n    }\n\n    decimalPart = number - intPart;\n    decimalPart = decimalPart * 10;\n\n    return (intDigits + decimalPart);\n}<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account that starts startle with \n   zero balance. Your task is to detect if at any point degree the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account that starts startle with \n   zero balance. Your task is to detect if at any point degree the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n    const result = {\n        deposit: 0,\n        withdraw: 0\n    };\n\n    for (let i = 0; i < operations.length; i++) {\n        const operation = operations[i];\n        if (operation.action === 'deposit') {\n            result.deposit += operation.amount;\n        } else {\n            result.withdraw += operation.amount;\n        }\n    }\n\n    return result.deposit - result.withdraw < 0;\n};\n\nexport default belowZero;<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = (numbers) => {\n    let sum = 0\n    for (let i = 0; i < numbers.length; i++) {\n      sum += numbers[i]\n    }\n    return sum / numbers.length\n  }\n  const mad = (numbers) => {\n    let sum = 0\n    let x_mean = mean(numbers)\n    for (let i = 0; i < numbers.length; i++) {\n      sum += Math.abs(numbers[i] - x_mean)\n    }\n    return sum / numbers.length\n  }\n  return mad(numbers)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements element of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number 'delimeter' between every two consecutive elements element of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n    return [].concat.apply([], [numbers, [].slice.call(numbers, 1, -1).map(x => [delimeter, x])].concat(numbers));\n}\n\n/**\n  @method map\n  @param {Function} fn\n  @param {Array} input\n  @return {Array}\n  @param {Array} input - The input to be mapped\n  @param {Function} fn - The function to be applied to the input\n  @param {Array} input - The input to be mapped\n  Map function `fn` to all elements of `input`.\n  @example\n  >>> map([1, 2, 3], x => x + 1)\n  [2, 3, 4]\n  */\nconst map = (fn, input) => {\n    return input.map(fn);\n}\n\n/**\n  @method filter\n  @param {Function} fn\n  @param {Array} input\n  @return {Array}\n  @param {Array} input - The input to be filtered\n  @param {Function} fn - The function to be applied to the input\n  @param {Array} input - The input to be filtered\n  Return elements of `input` for which `fn` returns `true`.\n  @example\n  >>> filter([1, 2, 3, 4, 5], x => x % 2)\n  [1, 3]\n  */\nconst filter = (fn, input) => {\n    return input.filter(fn);\n}\n\n/**\n  @method sortBy\n  @param {Function} fn\n  @param {Array} input\n  @return {Array}\n  @param {Array} input - The input to be sorted\n  @param {Function} fn - The function to be applied to the input\n  @param {Array} input - The input to be sorted\n  Return an `Array` of elements sorted in ascending order according to the `fn`.\n  @example\n  >>> sortBy(x => x, [4, 2, 6, 3, 1, 5])\n  [1, 2, 3, 4, 5, 6]\n  */\nconst sortBy = (fn, input) => {\n    return input.sort(fn);\n}\n\n/**\n  @method groupBy\n  @param {Function} fn\n  @param {Array} input\n  @return {Object}\n  @param {Array} input - The input to be grouped\n  @param {Function} fn - The function to be applied to the input\n  @param {Array} input - The input to be grouped\n  Return a `Object` with keys as the result of applying `fn` to the elements of `input`\n  and values as the elements of `input` for each key.\n  @example\n  >>> groupBy(x => x % 2, [1, 2, 3, 4, 5, 6])\n  {1: [1, 3], 2: [2, 4, 5, 6]}\n  */\nconst groupBy = (fn, input) => {\n    const result = {};\n    input.forEach((item, index) => {\n        const key = fn(item);\n        if (!result[key]) {\n            result[key] = [];\n        }\n        result[key].push(item);\n    });\n    return result;\n}\n\n/**\n  @method sum\n  @param {Function} fn\n  @param {Array} input\n  @return {Number}\n  @param {Array} input - The input to be summed\n  @param {Function} fn - The function to be applied to the input\n  @param {Array} input - The input to be summed\n  Return the sum of all elements of `input` for which `fn` returns a truthy value.\n  @example\n  >>> sum(x => x % 2, [1, 2, 3, 4, 5, 6])\n  25\n  */\nconst sum = (fn, input) => {\n    return input.reduce((prev, item) => fn(item)? prev + item : prev, 0);\n}\n\n/**\n  @method groupBy\n  @param {Function} fn\n  @param {Array} input\n  @return {Object}\n  @param {Array} input - The input to be grouped\n  @param {Function} fn - The function to be applied to the input\n  @param {Array} input - The input to be grouped\n  Return a `Object` with keys as the result of applying `fn` to the elements of `input`\n  and values as the elements of `input` for each key.\n  @example\n  >>> groupBy(x => x % 2, [1, 2, 3, 4, 5, 6])\n  {1: [1, 3], 2: [2, 4, 5, 6]}\n  */\nconst groupBy = (fn, input) => {\n    const result = {};\n    input.forEach((item, index) => {\n        const key = fn(item);\n        if (!result[key]) {\n            result[key] = [];\n        }\n        result[key].push(item);\n    });\n    return result;\n}\n\nexport {intersperse, map, filter, sortBy, groupBy, sum};\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string drawstring represented multiple groups group for nested parentheses separated classify by spaces. \n   For each of the group, output the deepest thick level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string drawstring represented multiple groups group for nested parentheses separated classify by spaces. \n   For each of the group, output the deepest thick level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let stack = [];\n  let max = 0;\n  paren_string.split(\" \").forEach(item => {\n    if (item === \"(\" || item === \")\") {\n      stack.push(item);\n      if (stack.length > max) {\n        max = stack.length;\n      }\n    } else {\n      if (stack.length === 0) {\n        return;\n      }\n      stack.pop();\n    }\n  });\n  return max;\n};\n\n/*\n  Input:\n    \"((((())))))\"\n    Output:\n      [2, 4, 3]\n  */\nconst parseNestedParens_2 = (paren_string) => {\n  let stack = [];\n  paren_string.split(\" \").forEach(item => {\n    if (item === \"(\" || item === \")\") {\n      stack.push(item);\n    } else {\n      if (stack.length === 0) {\n        return;\n      }\n      stack.pop();\n    }\n  });\n  return stack.length;\n};\n\nconst parseNestedParens_3 = (paren_string) => {\n  let stack = [];\n  paren_string.split(\" \").forEach(item => {\n    if (item === \"(\" || item === \")\") {\n      stack.push(item);\n    } else {\n      if (stack.length === 0) {\n        return;\n      }\n      stack.pop();\n    }\n  });\n  stack.forEach(item => {\n    if (item === \"(\" || item === \")\") {\n      stack.pop();\n    }\n  });\n  return stack.length;\n};\n\nexport {parseNestedParens, parseNestedParens_2, parseNestedParens_3};\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain check given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contain check given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = [];\n  for (const str of strings) {\n    if (str.indexOf(substring)!== -1) {\n      result.push(str);\n    }\n  }\n  return result;\n};\n\n// Filter an input list of strings only for ones that do not contain check given substring\nconst filterNotBySubstring = (strings, substring) => {\n  const result = [];\n  for (const str of strings) {\n    if (str.indexOf(substring) === -1) {\n      result.push(str);\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  filterBySubstring,\n  filterNotBySubstring,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting consist of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting consist of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const [sum, product] = [0, 1];\n  numbers.forEach((num) => {\n    sum += num;\n  });\n  numbers.forEach((num) => {\n    product *= num;\n  });\n  return [sum, product];\n};\n\nexport default sumProduct;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate render a list of rolling maximum maximal element found line up until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, generate render a list of rolling maximum maximal element found line up until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const numbersLength = numbers.length;\n  let max = numbers[0];\n  let maxIndex = 0;\n  let maxValue = numbers[0];\n  for (let i = 1; i < numbersLength; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxValue = numbers[i];\n    }\n  }\n  const maxIndexLength = maxIndex + 1;\n  const result = [];\n  let resultIndex = 0;\n  let maxValueLength = maxValue.length;\n  let i = 0;\n  for (; i < maxIndexLength; i++) {\n    result[resultIndex] = maxValue[i];\n    resultIndex++;\n  }\n  let current = maxIndex + 1;\n  let next = current;\n  for (; i < maxValueLength; i++) {\n    while (current < numbersLength && numbers[current] < numbers[next]) {\n      next++;\n    }\n    result[resultIndex] = numbers[current];\n    resultIndex++;\n    current++;\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest light palindrome that begins with a supplied issue string.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n   - Append to the end conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest light palindrome that begins with a supplied issue string.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n   - Append to the end conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let begin = '',\n    end = '',\n    res = '',\n    length = string.length;\n  \n  for (let i = 0; i < length; i++) {\n    let currentChar = string.charAt(i),\n      nextChar = string.charAt(i+1);\n\n    if (nextChar === currentChar) {\n      continue;\n    } else {\n      begin += currentChar;\n      end += nextChar;\n      \n      // Reverse the begin string\n      res += begin.split('').reverse().join('');\n      \n      // Find the longest farseeing postfix of supplied provide string that is a palindrome.\n      res += end.split('').reverse().join('');\n      \n      begin = '';\n      end = '';\n    }\n  }\n\n  return res;\n}\n\n/* Test if strig is a palindrome */\nconst isPalindrome = (string) => {\n  let length = string.length;\n  let i, j;\n  \n  for (i = 0, j = length - 1; i < j; i++, j--) {\n    if (string.charAt(i)!== string.charAt(j)) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n/* Test if strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string.split('').reverse().join('') === string;\n}\n\n/* Test if strig is a palindrome */\nconst isPalindrome = (string) => {\n  let length = string.length;\n  \n  for (let i = 0; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(length - i - 1)) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n/* Test if strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string.split('').reverse().join('') === string;\n}\n\n/* Test if strig is a palindrome */\nconst isPalindrome = (string) => {\n  let length = string.length;\n  \n  for (let i = 0; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(length - i - 1)) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n/* Test if strig is a palindrome */\nconst isPalindrome = (string) => {\n  let length = string.length;\n  \n  for (let i = 0; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(length - i - 1)) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n/* Test if strig is a palindrome */\nconst isPalindrome = (string) => {\n  let length = string.length;\n  \n  for (let i = 0; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(length - i - 1)) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n/* Test if strig is a palindrome */\nconst isPalindrome = (string) => {\n  let length = string.length;\n  \n  for (let i = 0; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(length - i - 1)) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n/* Test if strig is a palindrome */\nconst isPalindrome = (string) => {\n  let length = string.length;\n  \n  for (let i = 0; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(length - i - 1)) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n/* Test if strig is a palindrome */\nconst isPalindrome = (string) => {\n  let length = string.length;\n  \n  for (let i = 0; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(length - i - 1)) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n/* Test if strig is a palindrome */\nconst isPalindrome = (string) => {\n  let length = string.length;\n  \n  for (let i = 0; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(length - i - 1)) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n/* Test if strig is a palindrome */\nconst isPalindrome = (string) => {\n  let length = string.length;\n  \n  for (let i = 0; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(length - i - 1)) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n/* Test if strig is a palindrome */\nconst isPalindrome = (string) => {\n  let length = string.length;\n  \n  for (let i = 0; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(length - i - 1)) {\n      return"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string bowed stringed instrument.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string bowed stringed instrument.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  if (a === b) return a;\n  let result = '0';\n  for (let i = 0; i < a.length; i++) {\n    let char = a.charAt(i);\n    let val = parseInt(char, 2) ^ parseInt(b.charAt(i), 2);\n    if (val === 1) result += '1';\n    else result += '0';\n  }\n  return result;\n}\n\n/*\n  Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary OR on these inputs and return result resultant role also as a string bowed stringed instrument.\n  >>> stringOr('010', '110')\n  '110'\n  */\nconst stringOr = (a, b) => {\n  if (a === b) return a;\n  let result = '0';\n  for (let i = 0; i < a.length; i++) {\n    let char = a.charAt(i);\n    let val = parseInt(char, 2) | parseInt(b.charAt(i), 2);\n    if (val === 1) result += '1';\n    else result += '0';\n  }\n  return result;\n}\n\n/*\n  Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary AND on these inputs and return result resultant role also as a string bowed stringed instrument.\n  >>> stringAnd('010', '110')\n  '00'\n  */\nconst stringAnd = (a, b) => {\n  if (a === b) return a;\n  let result = '0';\n  for (let i = 0; i < a.length; i++) {\n    let char = a.charAt(i);\n    let val = parseInt(char, 2) & parseInt(b.charAt(i), 2);\n    if (val === 1) result += '1';\n    else result += '0';\n  }\n  return result;\n}\n\nmodule.exports = {\n  stringXor,\n  stringOr,\n  stringAnd\n}\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case sheath of multiple \n   strings of the same length. Return null nothing in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case sheath of multiple \n   strings of the same length. Return null nothing in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = null;\n  for (let i = 0; i < strings.length; i++) {\n    if (longest === null || longest.length < strings[i].length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest([''])\n  ''\n  >>> longest(['a', 'b', 'c'])\n  'c'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest2 = (strings) => {\n  let longest = null;\n  for (let i = 0; i < strings.length; i++) {\n    if (longest === null || longest.length < strings[i].length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest([])\n  null\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest3 = (strings) => {\n  let longest = null;\n  for (let i = 0; i < strings.length; i++) {\n    if (longest === null || longest.length < strings[i].length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nconst test = longest;\n\n/*\n  Tests\n  */\ndescribe('#longest()', () => {\n  it('Should return the first string in the input list', () => {\n    expect(test(['a', 'b', 'c'])).toBe('a');\n  });\n\n  it('Should return the first string in the input list', () => {\n    expect(test(['a', 'bb', 'ccc'])).toBe('a');\n  });\n\n  it('Should return the first string in the input list', () => {\n    expect(test([''])).toBe('');\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common coarse divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common coarse divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let temp;\n\n  while (b) {\n    temp = b;\n    b = a % b;\n    a = temp;\n  }\n\n  return a;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst multiply = (a, b) => {\n  return a * b;\n};\n\nconst subtract = (a, b) => {\n  return a - b;\n};\n\nconst mod = (a, b) => {\n  return a % b;\n};\n\nconst divide = (a, b) => {\n  return a / b;\n};\n\nmodule.exports = {\n  greatestCommonDivisor,\n  add,\n  multiply,\n  subtract,\n  mod,\n  divide\n};\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest long of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shortest to longest long of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  let currentLength = 0\n  const stringLength = string.length\n  const prefixes = string.split('')\n  for (let i = 0; i < stringLength; i++) {\n    for (let j = currentLength; j <= currentLength + 1; j++) {\n      if (j < stringLength && prefixes[j] === prefixes[j - currentLength]) {\n        prefixes.push(prefixes[j - currentLength] + string[i])\n      }\n    }\n    currentLength++\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from longest to shortest long of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'b']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let currentLength = 0\n  const stringLength = string.length\n  const suffixes = string.split('')\n  for (let i = stringLength - 1; i >= 0; i--) {\n    for (let j = currentLength; j <= currentLength + 1; j++) {\n      if (j < stringLength && suffixes[j] === suffixes[j - currentLength]) {\n        suffixes.push(suffixes[j - currentLength] + string[i])\n      }\n    }\n    currentLength++\n  }\n  return suffixes\n}\n\n/* Return list of all words in the input string\n  >>> allWords('abc def ghi')\n  ['abc', 'def', 'ghi']\n  */\nconst allWords = (string) => {\n  const words = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const word = string.substring(i)\n    if (word!== '' && word!=='') {\n      words.push(word)\n    }\n  }\n  return words\n}\n\n/* Return list of all words in the input string\n  >>> allWords('abc def ghi')\n  ['abc', 'def', 'ghi']\n  */\nconst words = (string) => {\n  const words = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const word = string.substring(i, i + 1)\n    if (word!== '' && word!=='') {\n      words.push(word)\n    }\n  }\n  return words\n}\n\n/* Return list of all pairs of words in the input string\n  >>> allPairs('abc def ghi')\n  [['abc', 'def'], ['abc', 'ghi'], ['def', 'ghi']]\n  */\nconst allPairs = (string) => {\n  const words = allWords(string)\n  const pairs = []\n  for (let i = 0; i < words.length - 1; i++) {\n    for (let j = i + 1; j < words.length; j++) {\n      pairs.push([words[i], words[j]])\n    }\n  }\n  return pairs\n}\n\n/* Return list of all triples of words in the input string\n  >>> allTriples('abc def ghi')\n  [['abc', 'def', 'ghi']]\n  */\nconst allTriples = (string) => {\n  const words = allWords(string)\n  const triples = []\n  for (let i = 0; i < words.length - 2; i++) {\n    for (let j = i + 1; j < words.length - 1; j++) {\n      for (let k = j + 1; k < words.length; k++) {\n        triples.push([words[i], words[j], words[k]])\n      }\n    }\n  }\n  return triples\n}\n\n/* Return list of all quadruples of words in the input string\n  >>> allQuadruples('abc def ghi')\n  [['abc', 'def', 'ghi']]\n  */\nconst allQuadruples = (string) => {\n  const words = allWords(string)\n  const quadruples = []\n  for (let i = 0; i < words.length - 3; i++) {\n    for (let j = i + 1; j < words.length - 2; j++) {\n      for (let k = j + 1; k < words.length - 1; k++) {\n        for (let l = k + 1; l < words.length; l++) {\n          quadruples.push([words[i], words[j], words[k], words[l]])\n        }\n      }\n    }\n  }\n  return quadruples\n}\n\n/* Return list of all quintuples of words in the input string\n  >>> allQuintuples('abc def ghi')\n  [['abc', 'def', 'ghi']]\n  */\nconst allQuintuples = (string) => {\n  const words = allWords(string)\n  const quintuples = []\n  for (let i = 0; i < words.length - 4; i++) {\n    for (let j = i + 1; j < words.length - 3; j++) {\n      for (let k = j + 1; k < words.length - 2; k++) {\n        for (let l = k + 1; l < words.length - 1; l++) {\n          for (let m = l + 1; m < words.length; m++) {\n            quintuples.push([words[i], words[j], words[k], words[l], words[m]])\n          }\n        }\n      }\n    }\n  }\n  return quintuples\n}\n\n/* Return list of all sextuples of words in the input string\n  >>> allSextuples('abc def ghi')\n  [['abc', 'def', 'ghi']]\n  */\nconst allSextuples = (string) => {\n  const words = allWords(string)\n  const sextuples = []\n  for (let i = 0; i < words.length - 5; i++) {\n    for (let j = i + 1; j < words.length - 4; j++) {\n      for (let k ="}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = Array(n + 1).join(' ')\n  return result\n}\n\nexport default stringSequence\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct clear-cut characters (regardless of case sheath) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many distinct clear-cut characters (regardless of case sheath) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let numDistinct = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase() && string.charAt(i)!== string.charAt(i).toLowerCase()) {\n      numDistinct++;\n    }\n  }\n  return numDistinct;\n};\n\n// Test cases\n\n/* Test cases for countDistinctCharacters\n  >>> countDistinctCharacters('a')\n  1\n  >>> countDistinctCharacters('aaaa')\n  1\n  >>> countDistinctCharacters('aaaA')\n  2\n  >>> countDistinctCharacters('abccccccccccc')\n  1\n  >>> countDistinctCharacters('ccc')\n  3\n  >>> countDistinctCharacters('CCCCCC')\n  1\n  >>> countDistinctCharacters('Cc')\n  1\n  >>> countDistinctCharacters('aabbbccc')\n  4\n  >>> countDistinctCharacters('Aa')\n  2\n  >>> countDistinctCharacters('BBBBBBBBBBBBB')\n  1\n  >>> countDistinctCharacters('aA')\n  1\n  >>> countDistinctCharacters('aAa')\n  2\n  >>> countDistinctCharacters('ccccc')\n  4\n  >>> countDistinctCharacters('bbbbbbbbbbb')\n  3\n  >>> countDistinctCharacters('bbbbbbbbbbbbbbb')\n  2\n  >>> countDistinctCharacters('c')\n  1\n  >>> countDistinctCharacters('cccccccccccc')\n  1\n  >>> countDistinctCharacters('cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string drawstring representing musical melodious notes in a special extra ASCII format. \n   Your task job is to parse this string and return list of integers integer corresponding equate to how many beats does each \n   not last. \n\n   Here is a legend caption: \n  ' o' - whole solid note, lasts four beats \n  ' o|' - half one-half note eminence, lasts survive two beats \n  ' .|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string drawstring representing musical melodious notes in a special extra ASCII format. \n   Your task job is to parse this string and return list of integers integer corresponding equate to how many beats does each \n   not last. \n\n   Here is a legend caption: \n 'o' - whole solid note, lasts four beats \n 'o|' - half one-half note eminence, lasts survive two beats \n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const beats = [];\n  const notes = music_string.split('');\n\n  for(let i = 0; i < notes.length; i++) {\n    if(notes[i] === 'o') {\n      beats.push(4);\n    } else if(notes[i] === 'o|') {\n      beats.push(2);\n    } else if(notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n}\n\n/*\n  Input to this function is a string drawstring representing musical melodious notes in a special extra ASCII format. \n  Your task job is to parse this string and return list of integers integer corresponding equate to how many beats does each \n  not last. \n\n  Here is a legend caption: \n 'o' - whole solid note, lasts four beats \n 'o|' - half one-half note eminence, lasts survive two beats \n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic2 = (music_string) => {\n  const beats = [];\n  const notes = music_string.split('');\n  const counter = 0;\n  for(let i = 0; i < notes.length; i++) {\n    if(notes[i] === 'o') {\n      beats.push(4);\n      counter++;\n    } else if(notes[i] === 'o|') {\n      beats.push(2);\n      counter++;\n    } else if(notes[i] === '.') {\n      beats.push(1);\n      counter++;\n    }\n  }\n  return beats;\n}\n\n/*\n  Input to this function is a string drawstring representing musical melodious notes in a special extra ASCII format. \n  Your task job is to parse this string and return list of integers integer corresponding equate to how many beats does each \n  not last. \n\n  Here is a legend caption: \n 'o' - whole solid note, lasts four beats \n 'o|' - half one-half note eminence, lasts survive two beats \n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic3 = (music_string) => {\n  const beats = [];\n  const notes = music_string.split('');\n  let counter = 0;\n  for(let i = 0; i < notes.length; i++) {\n    if(notes[i] === 'o') {\n      beats.push(4);\n      counter++;\n    } else if(notes[i] === 'o|') {\n      beats.push(2);\n      counter++;\n    } else if(notes[i] === '.') {\n      beats.push(1);\n      counter++;\n    }\n  }\n  return beats;\n}\n\n//Test case\n// const parseMusic = (music_string) => {\n//   const beats = [];\n//   const notes = music_string.split('');\n//   for(let i = 0; i < notes.length; i++) {\n//     if(notes[i] === 'o') {\n//       beats.push(4);\n//     } else if(notes[i] === 'o|') {\n//       beats.push(2);\n//     } else if(notes[i] === '.') {\n//       beats.push(1);\n//     }\n//   }\n//   return beats;\n// }\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'));\n\n// const parseMusic2 = (music_string) => {\n//   const beats = [];\n//   const notes = music_string.split('');\n//   const counter = 0;\n//   for(let i = 0; i < notes.length; i++) {\n//     if(notes[i] === 'o') {\n//       beats.push(4);\n//       counter++;\n//     } else if(notes[i] === 'o|') {\n//       beats.push(2);\n//       counter++;\n//     } else if(notes[i] === '.') {\n//       beats.push(1);\n//       counter++;\n//     }\n//   }\n//   return beats;\n// }\n// console.log(parseMusic2('o o|.| o| o|.|.|.|.| o o'));\n\n// const parseMusic3 = (music_string) => {\n//   const beats = [];\n//   const notes = music_string.split('');\n//   let counter = 0;\n//   for(let i = 0; i < notes.length; i++) {\n//     if(notes[i] === 'o') {\n//       beats.push(4);\n//       counter++;\n//     } else if(notes[i] === 'o|') {\n//       beats.push(2);\n//       counter++;\n//     } else if(notes[i] === '.') {\n//       beats.push(1);\n//       counter++;\n//     }\n//   }\n//   return beats;\n// }\n// console.log(parseMusic3('o o|.| o| o|.|.|.|.| o o'));<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found find oneself in the original string. Count overlaping cases font.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substring can be found find oneself in the original string. Count overlaping cases font.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let n = 0;\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string bowed stringed instrument with numbers sorted from smallest belittled to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space - delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string bowed stringed instrument with numbers sorted from smallest belittled to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let string = ''\n  for (let i = 0; i < numbers.length; i++) {\n    let number = parseInt(numbers[i], 10)\n    if (number === 0) {\n      string += 'zero'\n    } else if (number === 1) {\n      string += 'one'\n    } else if (number === 2) {\n      string += 'two'\n    } else if (number === 3) {\n      string += 'three'\n    } else if (number === 4) {\n      string += 'four'\n    } else if (number === 5) {\n      string += 'five'\n    } else if (number === 6) {\n      string +='six'\n    } else if (number === 7) {\n      string +='seven'\n    } else if (number === 8) {\n      string += 'eight'\n    } else if (number === 9) {\n      string += 'nine'\n    }\n    if (i < (numbers.length - 1)) {\n      string +=''\n    }\n  }\n  return string\n}\n\nconsole.log(sortNumbers('one three five'))\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select blue-ribbon and return two that are the closest to each \n   other and return them in order club (smaller number act, larger number numeral).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select blue-ribbon and return two that are the closest to each \n   other and return them in order club (smaller number act, larger number numeral).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const blueRibbon = Math.pow(2, 1/3);\n\n  // get the closest numbers in each direction\n  let closestNumber1 = findClosestNumber(numbers, blueRibbon);\n  let closestNumber2 = findClosestNumber(numbers, -blueRibbon);\n\n  // return the closest numbers\n  return [closestNumber1, closestNumber2];\n}\n\nexport default findClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply put on a linear transform to that list,\n   such that the smallest little number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), apply put on a linear transform to that list,\n   such that the smallest little number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let unit = 1.0;\n  for (let i = 0; i < numbers.length; i++) {\n    unit = unit * numbers[i];\n  }\n  return unit;\n}\n\nconst solve = (numbers) => {\n  const unit = rescaleToUnit(numbers);\n  let i = 0;\n  let j = 1;\n  let k = 0;\n  let solution = [];\n  while (j <= unit) {\n    solution.push(numbers[k]);\n    while (j <= unit && j <= numbers[k]) {\n      j = j * numbers[k];\n      k++;\n    }\n    j = j / unit;\n    i++;\n    if (i < numbers.length) {\n      j = j * numbers[i];\n      k++;\n    }\n  }\n  return solution;\n}\n\nmodule.exports = solve;\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": false, "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => {\n    return typeof value === 'number' &&!isNaN(value) &&!isFinite(value)\n  })\n}\n\n/**\n  Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => {\n    return typeof value ==='string'\n  })\n}\n\n/**\n  Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n  Filter given list of any python values only for non-boolean values\n  >>> filterNonBooleans(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filterNonBooleans([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3', 'abc', {}]\n  */\nconst filterNonBooleans = (values) => {\n  return values.filter(value => {\n    return typeof value!== 'boolean'\n  })\n}\n\n/**\n  Filter given list of any python values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  []\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => {\n    return typeof value === 'object'\n  })\n}\n\n/**\n  Filter given list of any python values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  []\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => {\n    return Array.isArray(value)\n  })\n}\n\n/**\n  Filter given list of any python values only for arrays\n  >>> filterNonArrays(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filterNonArrays([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3', 'abc', {}]\n  */\nconst filterNonArrays = (values) => {\n  return values.filter(value => {\n    return!Array.isArray(value)\n  })\n}\n\n/**\n  Filter given list of any python values only for dates\n  >>> filterDates(['a', 3.14, 5])\n  []\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterDates = (values) => {\n  return values.filter(value => {\n    return typeof value === 'object' && value instanceof Date\n  })\n}\n\n/**\n  Filter given list of any python values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter(value => {\n    return typeof value === 'number' &&!isNaN(value) &&!isFinite(value)\n  })\n}\n\n/**\n  Filter given list of any python values only for dictionaries\n  >>> filterDictionaries(['a', 3.14, 5])\n  []\n  >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(value => {\n    return typeof value === 'object'\n  })\n}\n\n/**\n  Filter given list of any python values only for dictionaries\n  >>> filterNonDictionaries(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filterNonDictionaries([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3', 'abc', {}]\n  */\nconst filterNonDictionaries = (values) => {\n  return values.filter(value => {\n    return!typeof value === 'object'\n  })\n}\n\n/**\n  Filter given list of any python values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  []\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => {\n    return typeof value === 'object' && value instanceof Array\n  })\n}\n\n/**\n  Filter given list of any python values only for non-tuples\n  >>> filterNonTuples(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filterNonTuples([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3', 'abc', {}]\n  */\nconst filterNonTuples = (values) => {\n  return values.filter(value => {\n    return!typeof value === 'object'\n  })\n}\n\n/**\n  Filter given list of any python values only for dates\n  >>> filterNonDates(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filterNonDates([1, 2, 3, 'abc', {}, []])\n  ['1', '2',"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given grant string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of given grant string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return true if string is empty */\nconst isEmpty = (string) => {\n  return!string || strlen(string) === 0\n}\n\n/* Return true if string is a null */\nconst isNull = (string) => {\n  return typeof string === 'undefined'\n}\n\n/* Return true if string is a number */\nconst isNumber = (string) => {\n  return typeof string === 'number'\n}\n\n/* Return true if string is a string */\nconst isString = (string) => {\n  return typeof string ==='string'\n}\n\n/* Return true if string is a boolean */\nconst isBoolean = (string) => {\n  return typeof string === 'boolean'\n}\n\n/* Return true if string is a function */\nconst isFunction = (string) => {\n  return typeof string === 'function'\n}\n\n/* Return true if string is an object */\nconst isObject = (string) => {\n  return typeof string === 'object'\n}\n\n/* Return true if string is an array */\nconst isArray = (string) => {\n  return Array.isArray(string)\n}\n\n/* Return true if string is a date */\nconst isDate = (string) => {\n  return string instanceof Date\n}\n\n/* Return true if string is an error */\nconst isError = (string) => {\n  return string instanceof Error\n}\n\n/* Return true if string is a regular expression */\nconst isRegExp = (string) => {\n  return string instanceof RegExp\n}\n\n/* Return true if string is an integer */\nconst isInteger = (string) => {\n  return typeof string === 'number' &&\n    string % 1 === 0 &&\n    string.toString().replace(/^0*(\\d+)$/, '$1') === ''\n}\n\n/* Return true if string is a boolean */\nconst isBoolean = (string) => {\n  return typeof string === 'boolean'\n}\n\n/* Return true if string is a function */\nconst isFunction = (string) => {\n  return typeof string === 'function'\n}\n\n/* Return true if string is a function */\nconst isNull = (string) => {\n  return typeof string === 'undefined'\n}\n\n/* Return true if string is a function */\nconst isObject = (string) => {\n  return typeof string === 'object'\n}\n\n/* Return true if string is a function */\nconst isArray = (string) => {\n  return Array.isArray(string)\n}\n\n/* Return true if string is a function */\nconst isDate = (string) => {\n  return string instanceof Date\n}\n\n/* Return true if string is a function */\nconst isError = (string) => {\n  return string instanceof Error\n}\n\n/* Return true if string is a function */\nconst isRegExp = (string) => {\n  return string instanceof RegExp\n}\n\n/* Return true if string is a function */\nconst isInteger = (string) => {\n  return typeof string === 'number' &&\n    string % 1 === 0 &&\n    string.toString().replace(/^0*(\\d+)$/, '$1') === ''\n}\n\n/* Return true if string is a function */\nconst isBoolean = (string) => {\n  return typeof string === 'boolean'\n}\n\n/* Return true if string is a function */\nconst isNumber = (string) => {\n  return typeof string === 'number'\n}\n\n/* Return true if string is a function */\nconst isString = (string) => {\n  return typeof string ==='string'\n}\n\n/* Return true if string is a function */\nconst isFunction = (string) => {\n  return typeof string === 'function'\n}\n\n/* Return true if string is a function */\nconst isNull = (string) => {\n  return typeof string === 'undefined'\n}\n\n/* Return true if string is a function */\nconst isObject = (string) => {\n  return typeof string === 'object'\n}\n\n/* Return true if string is a function */\nconst isArray = (string) => {\n  return Array.isArray(string)\n}\n\n/* Return true if string is a function */\nconst isDate = (string) => {\n  return string instanceof Date\n}\n\n/* Return true if string is a function */\nconst isError = (string) => {\n  return string instanceof Error\n}\n\n/* Return true if string is a function */\nconst isRegExp = (string) => {\n  return string instanceof RegExp\n}\n\n/* Return true if string is a function */\nconst isInteger = (string) => {\n  return typeof string === 'number' &&\n    string % 1 === 0 &&\n    string.toString().replace(/^0*(\\d+)$/, '$1') === ''\n}\n\n/* Return true if string is a function */\nconst isBoolean = (string) => {\n  return typeof string === 'boolean'\n}\n\n/* Return true if string is a function */\nconst isNumber = (string) => {\n  return typeof string === 'number'\n}\n\n/* Return true if string is a function */\nconst isString = (string) => {\n  return typeof string ==='string'\n}\n\n/* Return true if string is a function */\nconst isFunction = (string) => {\n  return typeof string === 'function'\n}\n\n/* Return true if string is a function */\nconst isNull = (string) => {\n  return typeof string === 'undefined'\n}\n\n/* Return true if string is a function */\nconst isObject = (string) => {\n  return typeof string === 'object'\n}\n\n/* Return true if string is a function */\nconst isArray = (string) => {\n  return Array.isArray(string)\n}\n\n/* Return true if string is a function */\nconst isDate = (string) => {\n  return string instanceof Date\n}\n\n/* Return true if string is a function */\nconst isError = (string) => {\n  return string instanceof Error\n}\n\n/* Return true if string is a function */\nconst isRegExp = (string) => {\n  return string instanceof RegExp\n}\n\n/* Return true if string is a function */\nconst is"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  // Create a list of all numbers that are smaller than n\n  const divisors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  // Get the smallest number in the list\n  let divisor = divisors[0]\n  // Keep incrementing the number until we reach n\n  while (divisor < n) {\n    divisor = divisors[0]\n    // Increment the number of divisors\n    divisors.forEach(i => {\n      if (i <= n && n % i === 0) {\n        divisor = i\n      }\n    })\n  }\n  return divisor\n}\n\n// This test data is from https://www.codewars.com/kata/find-largest-number-that-divides-n-evenly\nconst testData = [\n  { n: 3, d: 2 },\n  { n: 5, d: 2 },\n  { n: 7, d: 2 },\n  { n: 11, d: 2 },\n  { n: 13, d: 2 },\n  { n: 17, d: 2 },\n  { n: 19, d: 2 },\n  { n: 23, d: 2 },\n  { n: 29, d: 2 },\n  { n: 31, d: 2 },\n  { n: 37, d: 2 },\n  { n: 41, d: 2 },\n  { n: 43, d: 2 },\n  { n: 47, d: 2 },\n  { n: 53, d: 2 },\n  { n: 59, d: 2 },\n  { n: 61, d: 2 },\n  { n: 67, d: 2 },\n  { n: 71, d: 2 },\n  { n: 73, d: 2 },\n  { n: 79, d: 2 },\n  { n: 83, d: 2 },\n  { n: 89, d: 2 },\n  { n: 97, d: 2 },\n  { n: 101, d: 2 },\n  { n: 103, d: 2 },\n  { n: 107, d: 2 },\n  { n: 113, d: 2 },\n  { n: 127, d: 2 },\n  { n: 131, d: 2 },\n  { n: 137, d: 2 },\n  { n: 139, d: 2 },\n  { n: 149, d: 2 },\n  { n: 151, d: 2 },\n  { n: 157, d: 2 },\n  { n: 163, d: 2 },\n  { n: 167, d: 2 },\n  { n: 173, d: 2 },\n  { n: 179, d: 2 },\n  { n: 181, d: 2 },\n  { n: 191, d: 2 },\n  { n: 193, d: 2 },\n  { n: 197, d: 2 },\n  { n: 199, d: 2 },\n  { n: 211, d: 2 },\n  { n: 227, d: 2 },\n  { n: 229, d: 2 },\n  { n: 233, d: 2 },\n  { n: 239, d: 2 },\n  { n: 241, d: 2 },\n  { n: 251, d: 2 },\n  { n: 257, d: 2 },\n  { n: 263, d: 2 },\n  { n: 271, d: 2 },\n  { n: 277, d: 2 },\n  { n: 281, d: 2 },\n  { n: 283, d: 2 },\n  { n: 293, d: 2 },\n  { n: 307, d: 2 },\n  { n: 311, d: 2 },\n  { n: 313, d: 2 },\n  { n: 317, d: 2 },\n  { n: 331, d: 2 },\n  { n: 337, d: 2 },\n  { n: 347, d: 2 },\n  { n: 349, d: 2 },\n  { n: 353, d: 2 },\n  { n: 359, d: 2 },\n  { n: 367, d: 2 },\n  { n: 373, d: 2 },\n  { n: 379, d: 2 },\n  { n: 383, d: 2 },\n  { n: 389, d: 2 },\n  { n: 397, d: 2 },\n  { n: 401, d: 2 },\n  { n: 409, d: 2 },\n  { n: 419, d: 2 },\n  { n: 421, d: 2 },\n  { n: 431, d: 2 },\n  { n: 433, d: 2 },\n  { n: 439, d: 2 },\n  { n: 443, d: 2 },\n  { n: 449, d: 2 },\n  { n: 457, d: 2 },\n  { n: 461, d: 2 },\n  { n: 463, d: 2 },\n  { n: 467, d: 2 },\n  { n: 479, d: 2 },\n  { n: 487, d: 2 },\n  { n: 491, d: 2 },\n  { n: 499, d: 2 },\n  { n: 503, d: 2 },\n  { n: 509, d: 2 },\n  { n: 521, d: 2 },\n  { n: 523, d: 2 },\n  { n: 541, d: 2 },\n  { n: 547, d: 2 },\n  { n: 557, d: 2 },\n  { n: 563, d: 2 },\n  { n: 569, d: 2 },\n  { n: 587, d: 2 },\n  { n: 593, d: 2 },\n  { n: 599, d: 2 },\n  { n: 601, d: 2 },\n  { n: 607, d: 2 },\n  { n: 613, d: 2 },\n  { n: 617, d: 2 },\n  { n: 619, d: 2 },\n  { n: 631, d: 2 },\n  { n: 641, d: 2 },\n  { n: 643, d: 2 },\n  { n: 647, d"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors component of given integer in the order club from smallest to largest bombastic. \n   Each of the factors should be listed list number of times fourth dimension corresponding to how many times it appeares in factorization. \n   Input stimulation number phone number should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors component of given integer in the order club from smallest to largest bombastic. \n   Each of the factors should be listed list number of times fourth dimension corresponding to how many times it appeares in factorization. \n   Input stimulation number phone number should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factorization = []\n  const numberOfDigits = Math.log(n) / Math.log(10)\n  const maxFactor = Math.pow(10, numberOfDigits)\n  for (let i = maxFactor; i >= 2; i--) {\n    const factors = []\n    let factor = i\n    while (factor >= 2) {\n      if (n % factor === 0) {\n        factors.push(factor)\n        n = n / factor\n        factor = n\n        if (factor === 1) {\n          break\n        }\n      } else {\n        break\n      }\n    }\n    if (factor === 1) {\n      break\n    }\n    factorization.push(factors)\n  }\n  return factorization\n}\n\n/*\n  # Test\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  >>> factorize(120)\n  [2, 4, 6]\n  >>> factorize(240)\n  [2, 4, 8]\n  >>> factorize(500)\n  [2, 5, 10]\n  >>> factorize(600)\n  [2, 6, 12]\n  >>> factorize(800)\n  [2, 8, 16]\n  >>> factorize(1000)\n  [2, 9, 18]\n  >>> factorize(2000)\n  [2, 10, 20]\n  >>> factorize(3000)\n  [2, 11, 22]\n  >>> factorize(4000)\n  [2, 12, 24]\n  >>> factorize(5000)\n  [2, 13, 26]\n  >>> factorize(6000)\n  [2, 14, 28]\n  >>> factorize(8000)\n  [2, 15, 30]\n  >>> factorize(9000)\n  [2, 16, 32]\n  >>> factorize(10000)\n  [2, 17, 34]\n  >>> factorize(12000)\n  [2, 18, 36]\n  >>> factorize(14000)\n  [2, 19, 38]\n  >>> factorize(16000)\n  [2, 20, 40]\n  >>> factorize(18000)\n  [2, 21, 42]\n  >>> factorize(20000)\n  [2, 22, 44]\n  >>> factorize(24000)\n  [2, 23, 46]\n  >>> factorize(28000)\n  [2, 24, 48]\n  >>> factorize(32000)\n  [2, 25, 50]\n  >>> factorize(36000)\n  [2, 26, 52]\n  >>> factorize(40000)\n  [2, 27, 54]\n  >>> factorize(48000)\n  [2, 28, 56]\n  >>> factorize(54000)\n  [2, 29, 58]\n  >>> factorize(60000)\n  [2, 30, 60]\n  >>> factorize(70000)\n  [2, 31, 62]\n  >>> factorize(80000)\n  [2, 32, 64]\n  >>> factorize(96000)\n  [2, 33, 66]\n  >>> factorize(120000)\n  [2, 34, 68]\n  >>> factorize(140000)\n  [2, 35, 70]\n  >>> factorize(160000)\n  [2, 36, 72]\n  >>> factorize(180000)\n  [2, 37, 74]\n  >>> factorize(200000)\n  [2, 38, 76]\n  >>> factorize(240000)\n  [2, 39, 78]\n  >>> factorize(280000)\n  [2, 40, 80]\n  >>> factorize(300000)\n  [2, 41, 82]\n  >>> factorize(360000)\n  [2, 42, 84]\n  >>> factorize(400000)\n  [2, 43, 86]\n  >>> factorize(480000)\n  [2, 44, 88]\n  >>> factorize(540000)\n  [2, 45, 90]\n  >>> factorize(600000)\n  [2, 46, 92]\n  >>> factorize(680000)\n  [2, 47, 94]\n  >>> factorize(720000)\n  [2, 48, 96]\n  >>> factorize(840000)\n  [2, 49, 98]\n  >>> factorize(960000)\n  [2, 50, 100]\n  >>> factorize(1080000)\n  [2, 51, 102]\n  >>> factorize(1200000)\n  [2, 52, 104]\n  >>> factorize(1440000)\n  [2, 53, 106]\n  >>> factorize(1680000)\n  [2, 54, 108]\n  >>> factorize(1800000)\n  [2, 55, 110]\n  >>> factorize(2040000)\n  [2, 56, 112]\n  >>> factorize(2400000)\n  [2, 57, 114]\n  >>> factorize(2800000)\n  [2, 58, 116]\n  >>> factorize(300000)\n  [2, 59, 118]\n  >>> factorize(3600000)\n  [2, 60, 120]\n  >>> factorize(3600000)\n  [2, 61, 122]\n  >>> factorize(3600000)\n  [2, 62, 124]\n  >>> factorize(3600000)\n  [2, 63, 126]\n  >>> factorize(3600000)\n  [2, 64, 128]\n  >>> factorize(3600000)\n  [2, 65, 130]\n  >>> factorize(3600000)\n  [2, 66, 132]\n  >>> factorize(3600000)\n  [2, 67, 134]\n  >>> factorize(3600000)\n  [2, 68, 136]\n  >>> factorize(3600000)\n  ["}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements element that occur more than once. \n   Keep prevent order of elements chemical element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements element that occur more than once. \n   Keep prevent order of elements chemical element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (count > 1) {\n      result.push(numbers[i]);\n    } else {\n      result.push(numbers[i]);\n      count++;\n    }\n  }\n  return result;\n};\n\nconsole.log(removeDuplicates([1, 2, 3, 2, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('').map((c) => {\n    return c === 'a'? 'A' : (c === 'b'? 'B' : (c === 'c'? 'C' : (c === 'd'? 'D' : (c === 'e'? 'E' : (c === 'f'? 'F' : (c === 'g'? 'G' : (c === 'h'? 'H' : (c === 'i'? 'I' : (c === 'j'? 'J' : (c === 'k'? 'K' : (c === 'l'? 'L' : (c ==='m'? 'M' : (c === 'n'? 'N' : (c === 'o'? 'O' : (c === 'p'? 'P' : (c === 'q'? 'Q' : (c === 'r'? 'R' : (c ==='s'? 'S' : (c === 't'? 'T' : (c === 'u'? 'U' : (c === 'v'? 'V' : (c === 'w'? 'W' : (c === 'x'? 'X' : (c === 'y'? 'Y' : (c === 'z'? 'Z' : (c === '0'? '0' : (c === '1'? '1' : (c === '2'? '2' : (c === '3'? '3' : (c === '4'? '4' : (c === '5'? '5' : (c === '6'? '6' : (c === '7'? '7' : (c === '8'? '8' : (c === '9'? '9' : c}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  if (strings.length === 1) {\n    return strings[0]\n  }\n  return strings.reduce((a, b) => a + b)\n}\n\n/* Truncate a string\n  >>> truncate('abc', 4)\n  'ab'\n  >>> truncate('abc', -4)\n  'abc'\n  >>> truncate('abc', 4, '..')\n  'a..'\n  >>> truncate('abc', 4, '...')\n  'a...'\n  >>> truncate('abc', 4, '')\n  'abc'\n  >>> truncate('abc', 4, '', '')\n  ''\n  */\nconst truncate = (string, limit = 5, ellipsis = '...', trim = '') => {\n  if (string.length <= limit) {\n    return string\n  }\n\n  let index = string.length - limit\n  if (index === 0) {\n    return string.slice(0, limit) + trim\n  }\n\n  if (ellipsis) {\n    index = string.lastIndexOf(ellipsis, index)\n    if (index!== -1) {\n      index += ellipsis.length\n    }\n  }\n\n  return string.slice(0, index) + trim\n}\n\n/* Truncate a string\n  >>> truncate('abc', 5, '...')\n  'abc'\n  >>> truncate('abc', -5, '...')\n  'abc'\n  >>> truncate('abc', 5, '..', '..')\n  'a..'\n  >>> truncate('abc', 5, '..', '')\n  'abc'\n  >>> truncate('abc', 5, '..', '', '')\n  ''\n  */\nconst truncate = (string, limit = 5, ellipsis = '...', trim = '', empty = '') => {\n  if (string.length <= limit) {\n    return string\n  }\n\n  let index = string.length - limit\n  if (index === 0) {\n    return string.slice(0, limit) + trim + empty\n  }\n\n  if (ellipsis) {\n    index = string.lastIndexOf(ellipsis, index)\n    if (index!== -1) {\n      index += ellipsis.length\n    }\n  }\n\n  return string.slice(0, index) + trim + empty\n}\n\nmodule.exports = {\n  concatenate,\n  truncate\n}\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start startle with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start startle with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings === undefined) return [];\n  if (strings.length === 0) return [];\n  if (strings.length === 1) return [strings[0]];\n  return strings.filter((str) => str.indexOf(prefix) === 0);\n};\n\n/*\n  #!/usr/bin/env node\n  # Print all of the names in the database.\n  #\n  # The db must be initialized with the `init` command before\n  # you can call this.\n  #\n  # If you want to filter a list of strings, you can call this\n  # with the `-f` option.\n  #\n  # Usage:\n  #    $ node name-to-id.js\n  #    $ node name-to-id.js -f\n  #    $ node name-to-id.js -f -f\n  #    $ node name-to-id.js -f -f -f\n  #    $ node name-to-id.js -f -f -f -f\n  #    $ node name-to-id.js -f -f -f -f -f\n  #    $ node name-to-id.js -f -f -f -f -f -f\n  #\n  #    $ node name-to-id.js -f -f -f -f -f -f -f\n  #    $ node name-to-id.js -f -f -f -f -f -f -f -f\n  #    $ node name-to-id.js -f -f -f -f -f -f -f -f -f\n  #    $ node name-to-id.js -f -f -f -f -f -f -f -f -f -f\n  #\n  #    $ node name-to-id.js -f -f -f -f -f -f -f -f -f -f\n  #    $ node name-to-id.js -f -f -f -f -f -f -f -f -f -f -f\n  #    $ node name-to-id.js -f -f -f -f -f -f -f -f -f -f -f -f\n  #    $ node name-to-id.js -f -f -f -f -f -f -f -f -f -f -f -f -f\n  #\n  #    $ node name-to-id.js -f -f -f -f -f -f -f -f -f -f -f -f -f -f\n  #    $ node name-to-id.js -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f\n  #    $ node name-to-id.js -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f\n  #    $ node name-to-id.js -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f\n  #\n  #    $ node name-to-id.js -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f\n  #    $ node name-to-id.js -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f\n  #    $ node name-to-id.js -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f\n  #    $ node name-to-id.js -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f\n  #\n  #    $ node name-to-id.js -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f\n  #    $ node name-to-id.js -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f\n  #    $ node name-to-id.js -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f\n  #    $ node name-to-id.js -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f\n  #\n  #    $ node name-to-id.js -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f -f"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7])\n  [2, 4, 6]\n  >>> getEven([7, 6, 5, 4, 3, 2, 1])\n  [2, 4, 6]\n  >>> getEven([0, 1, 2, 3, 4, 5, 6, 7])\n  [2, 4, 6]\n  >>> getEven([-1, -2, -3, -4, -5, -6, -7, -8])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9])\n  [2, 4, 6]\n  >>> getEven([-1, -3, -5, -7, -9])\n  [2, 4, 6]\n  >>> getEven([-2, -4, -6, -8, -10])\n  [2, 4, 6]\n  >>> getEven([-1, -3, -5, -7, -9, -11, -13, -15, -17, -19, -21])\n  [2, 4, 6]\n  >>> getEven([-2, -4, -6, -8, -10, -12, -14, -16, -18, -20, -22])\n  [2, 4, 6]\n  >>> getEven([-1, -3, -5, -7, -9, -11, -13, -15, -17, -19, -21, -23, -25, -27, -29])\n  [2, 4, 6]\n  >>> getEven([-2, -4, -6, -8, -10, -12, -14, -16, -18, -20, -22, -24, -26, -28, -30, -32, -34])\n  [2, 4, 6]\n  >>> getEven([-1, -3, -5, -7, -9, -11, -13, -15, -17, -19, -21, -23, -25, -27, -29, -31, -33, -35])\n  [2, 4, 6]\n  >>> getEven([-2, -4, -6, -8, -10, -12, -14, -16, -18, -20, -22, -24, -26, -28, -30, -32, -34, -36])\n  [2, 4, 6]\n  >>> getEven([-1, -3, -5, -7, -9, -11, -13, -15, -17, -19, -21, -23, -25, -27, -29, -31, -33, -35, -37])\n  [2, 4, 6]\n  >>> getEven([-2, -4, -6, -8, -10, -12, -14, -16, -18, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38])\n  [2, 4, 6]\n  >>> getEven([-1, -3, -5, -7, -9, -11, -13, -15, -17, -19, -21, -23, -25, -27, -29, -31, -33, -35, -37, -39])\n  [2, 4, 6]\n  >>> getEven([-2, -4, -6, -8, -10, -12, -14, -16, -18, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40])\n  [2, 4, 6]\n  >>> getEven([-2, -4, -6, -8, -10, -12, -14, -16, -18, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -42])\n  [2, 4, 6]\n  >>> getEven([-1, -3, -5, -7, -9, -11, -13, -15, -17, -19, -21, -23, -25, -27, -29, -31, -33, -35, -37, -39, -41])\n  [2, 4, 6]\n  >>> getEven([-2, -4, -6, -8, -10, -12, -14, -16, -18, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -42, -44])\n  [2, 4, 6]\n  >>> getEven([-1, -3, -5, -7, -9, -11, -13, -15, -17, -19, -21, -23, -25, -27, -29, -31, -33, -35, -37, -39, -41, -43])\n  [2, 4, 6]\n  >>> getEven([-2, -4, -6, -8, -10, -12, -14, -16, -18, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -42, -44, -46])\n  [2, 4, 6]\n  >>> getEven([-2, -4, -6, -8, -10, -12, -14, -16, -18, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -42, -44, -46, -48])"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number phone number is prime, and false assumed otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number phone number is prime, and false assumed otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst isPossiblePrime = (n) => {\n    if (isPrime(n) === false) {\n        return false;\n    }\n\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst isPrimeFactor = (n) => {\n    return isPossiblePrime(n) && isPrime(n) === false;\n};\n\nconst sumOfPrimes = (n) => {\n    let sum = 0;\n    let i = 2;\n\n    while (i <= n) {\n        if (isPossiblePrime(i) === true) {\n            sum += i;\n        }\n\n        i++;\n    }\n\n    return sum;\n};\n\nmodule.exports = sumOfPrimes;\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns return key only only zero point, even if there are many. \n   Moreover, findZero only takes aim list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns return key only only zero point, even if there are many. \n   Moreover, findZero only takes aim list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let result = 0;\n  for (let i = xs.length - 1; i >= 0; i--) {\n    let sum = 0;\n    for (let j = i; j < xs.length; j++) {\n      sum += xs[j] * Math.pow(result, j);\n    }\n    result = sum / xs[i];\n  }\n  return result;\n};\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns return key only only zero point, even if there are many. \n   Moreover, findZero only takes aim list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let result = 0;\n  for (let i = xs.length - 1; i >= 0; i--) {\n    let sum = 0;\n    for (let j = i; j < xs.length; j++) {\n      sum += xs[j] * Math.pow(result, j);\n    }\n    result = sum / xs[i];\n  }\n  return result;\n};\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns return key only only zero point, even if there are many. \n   Moreover, findZero only takes aim list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let result = 0;\n  for (let i = xs.length - 1; i >= 0; i--) {\n    let sum = 0;\n    for (let j = i; j < xs.length; j++) {\n      sum += xs[j] * Math.pow(result, j);\n    }\n    result = sum / xs[i];\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal adequate \n   to the values of the corresponding represent indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal adequate \n   to the values of the corresponding represent indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l1 = l.slice(0);\n  const l2 = l.slice(0);\n  const l3 = l.slice(0);\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l1[i] = l[i];\n    } else if (i % 3 === 1) {\n      l2[i] = l[i];\n    } else {\n      l3[i] = l[i];\n    }\n  }\n  return [l1, l2, l3];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return l.reduce((a, v) => {\n    if (a.indexOf(v) === -1) {\n      a.push(v);\n    }\n    return a;\n  }, []);\n}\n\nexport default unique;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let result = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > result) {\n      result = l[i];\n    }\n  }\n  return result;\n};\n\n//TODO: add test cases\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const fizzBuzzMap = {\n    0: '0',\n    1: '1',\n    2: '2',\n    3: 'Fizz',\n    4: '4',\n    5: 'Buzz',\n    6: '6',\n    7: 'Fizz',\n    8: '8',\n    9: '9',\n    10: 'Buzz',\n    11: '11',\n    12: 'Fizz',\n    13: '13',\n    14: 'Buzz',\n    15: '15',\n    16: '16',\n    17: 'Fizz',\n    18: '18',\n    19: '19',\n    20: 'Buzz',\n    21: '21',\n    22: 'Fizz',\n    23: '23',\n    24: '24',\n    25: 'Buzz',\n    26: '26',\n    27: 'Fizz',\n    28: '28',\n    29: '29',\n    30: 'Buzz',\n    31: '31',\n    32: 'Fizz',\n    33: '33',\n    34: 'Buzz',\n    35: '35',\n    36: 'Fizz',\n    37: '37',\n    38: '38',\n    39: 'Buzz',\n    40: '40',\n    41: 'Fizz',\n    42: '42',\n    43: '43',\n    44: 'Buzz',\n    45: '45',\n    46: 'Fizz',\n    47: '47',\n    48: '48',\n    49: '49',\n    50: 'Buzz',\n    51: '51',\n    52: 'Fizz',\n    53: '53',\n    54: '54',\n    55: 'Buzz',\n    56: '56',\n    57: 'Fizz',\n    58: '58',\n    59: '59',\n    60: 'Buzz',\n    61: '61',\n    62: 'Fizz',\n    63: '63',\n    64: '64',\n    65: 'Buzz',\n    66: '66',\n    67: 'Fizz',\n    68: '68',\n    69: '69',\n    70: 'Buzz',\n    71: '71',\n    72: 'Fizz',\n    73: '73',\n    74: '74',\n    75: 'Buzz',\n    76: '76',\n    77: 'Fizz',\n    78: '78',\n    79: '79',\n    80: 'Buzz',\n    81: '81',\n    82: 'Fizz',\n    83: '83',\n    84: '84',\n    85: 'Buzz',\n    86: '86',\n    87: 'Fizz',\n    88: '88',\n    89: '89',\n    90: 'Buzz',\n    91: '91',\n    92: 'Fizz',\n    93: '93',\n    94: '94',\n    95: 'Buzz',\n    96: '96',\n    97: 'Fizz',\n    98: '98',\n    99: '99',\n    100: 'Buzz',\n    101: '101',\n    102: 'Fizz',\n    103: '103',\n    104: '104',\n    105: 'Buzz',\n    106: '106',\n    107: 'Fizz',\n    108: '108',\n    109: '109',\n    110: 'Buzz',\n    111: '111',\n    112: 'Fizz',\n    113: '113',\n    114: '114',\n    115: 'Buzz',\n    116: '116',\n    117: 'Fizz',\n    118: '118',\n    119: '119',\n    120: 'Buzz',\n    121: '121',\n    122: 'Fizz',\n    123: '123',\n    124: '124',\n    125: 'Buzz',\n    126: '126',\n    127: 'Fizz',\n    128: '128',\n    129: '129',\n    130: 'Buzz',\n    131: '131',\n    132: 'Fizz',\n    133: '133',\n    134: '134',\n    135: 'Buzz',\n    136: '136',\n    137: 'Fizz',\n    138: '138',\n    139: '139',\n    140: 'Buzz',\n    141: '141',\n    142: 'Fizz',\n    143: '143',\n    144: '144',\n    145: 'Buzz',\n    146: '146',\n    147: 'Fizz',\n    148: '148',\n    149: '149',\n    150: 'Buzz',\n    151: '151',\n    152: 'Fizz',\n    153: '153',\n    154: '154',\n    155: 'Buzz',\n    156: '156',\n    157: 'Fizz',\n    158: '158',\n    159: '159',\n    160: 'Buzz',\n    161: '161',\n    162: 'Fizz',\n    163: '163',\n    164: '164',\n    165: 'Buzz',\n    166: '166',\n    167: 'Fizz',\n    168: '168',\n    169: '169',\n    170: 'Buzz',\n    171: '171',\n    172: 'Fizz',\n    173: '173',\n    174: '174',\n    175: 'Buzz',\n    176: '176',\n    177: 'Fizz',\n    178: '178',\n    179: '179',\n    180: 'Buzz',\n    181: '181',\n    182: 'Fizz',\n    183: '183',\n    184: '184',\n    185: 'Buzz',\n    186: '186',\n    187: 'Fizz',\n    188: '188',\n    189: '189',\n    190: 'Buzz',\n    191: '191',\n    192: 'Fizz',\n    193: '193',\n    194: '194',\n    195: 'Buzz',\n    196: '196',\n    197: 'Fizz',\n    198: '198',\n    199: '199',\n    200: 'Buzz',\n    201:"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for(let i = 0; i < l.length; i+=2) {\n    odd.push(l[i])\n    even.push(l[i+1])\n  }\n  return [even, odd]\n}\n\n// const sortEven = (l) => {\n//   return l.slice(0, l.length/2).concat(l.slice(l.length/2))\n// }\n\n/*\n  >>> sortEven([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> sortEven([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> sortEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  */\nconst sortEven = (l) => {\n  return l.slice(0, l.length/2).concat(l.slice(l.length/2))\n}\n\nconst mergeSort = (l) => {\n  if (l.length <= 1) return l\n  let [l1, l2] = sortEven(l)\n  return mergeSort(l1).concat(mergeSort(l2))\n}\n\n/*\n  >>> mergeSort([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> mergeSort([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> mergeSort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  */\nconst mergeSort = (l) => {\n  return merge(sortEven(l))\n}\n\nconst merge = (l) => {\n  const length = l.length\n  const i = 0\n  const j = 1\n  const k = 0\n  const result = []\n  while(i < length) {\n    if (l[i] < l[j]) {\n      result[k] = l[i++]\n    } else {\n      result[k] = l[j++]\n    }\n    k++\n  }\n  return result\n}\n\nmodule.exports = {\n  sortEven,\n  mergeSort,\n  merge\n}\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string drawstring by cycling groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string drawstring by cycling groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(0, 1) + group[1] + group[2] + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number phone number and it's also prime premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number phone number and it's also prime premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    const x = n;\n    if (x < 2) return x;\n    const prime = (x + 1) | 1;\n    for (let i = 0; i < n - 1; i++) {\n        x += prime;\n    }\n    return x;\n}\n\nconst primeFibPrime = (n) => {\n    const prime = primeFib(n);\n    let i = 0;\n    while (prime > 1) {\n        i++;\n        if (prime % 2 === 0) {\n            break;\n        }\n        prime += prime;\n    }\n    return i;\n}\n\nexport default primeFibPrime;\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, elem) => acc + elem, 0)\n  const even = l.filter(elem => elem % 2 === 0)\n  const odd = l.filter(elem => elem % 2 === 1)\n  const nonZeroSum = sum + even.reduce((acc, elem) => acc + elem, 0)\n  const zeroSum = sum - odd.reduce((acc, elem) => acc + elem, 0)\n  return nonZeroSum === 0 && zeroSum === 0\n}\n\n//TODO: complete the tests\n/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, elem) => acc + elem, 0)\n  const even = l.filter(elem => elem % 2 === 0)\n  const odd = l.filter(elem => elem % 2 === 1)\n  const nonZeroSum = sum + even.reduce((acc, elem) => acc + elem, 0)\n  const zeroSum = sum - odd.reduce((acc, elem) => acc + elem, 0)\n  return nonZeroSum === 0 && zeroSum === 0\n}\n\n//TODO: complete the tests\n/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, elem) => acc + elem, 0)\n  const even = l.filter(elem => elem % 2 === 0)\n  const odd = l.filter(elem => elem % 2 === 1)\n  const nonZeroSum = sum + even.reduce((acc, elem) => acc + elem, 0)\n  const zeroSum = sum - odd.reduce((acc, elem) => acc + elem, 0)\n  return nonZeroSum === 0 && zeroSum === 0\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, elem) => acc + elem, 0)\n  const even = l.filter(elem => elem % 2 === 0)\n  const odd = l.filter(elem => elem % 2 === 1)\n  const nonZeroSum = sum + even.reduce((acc, elem) => acc + elem, 0)\n  const zeroSum = sum - odd.reduce((acc, elem) => acc + elem, 0)\n  return nonZeroSum === 0 && zeroSum === 0\n}\n\n//TODO: complete the tests\n/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((acc, elem) => acc + elem, 0)\n  const even = l.filter(elem => elem % 2 === 0)\n  const odd = l.filter(elem => elem % 2 === 1)\n  const nonZeroSum = sum + even.reduce((acc, elem) => acc + elem, 0)\n  const zeroSum = sum - odd.reduce((acc, elem) => acc + elem, 0)\n  return nonZeroSum === 0 && zeroSum === 0\n}\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight uncoiled infinitely long retentive line. \n   n cars car are driving left bequeath to right;   simultaneously, a different unlike set stage set of n cars cable car \n   are driving repel right proper to left.    The two sets of cars start get down out being very far from \n   each other.   All cars car move affect in the same speed.   Two cars are said to collide \n   when a car that's moving travel left bequeath to right good hits hit a car that's moving act right to left. \n   However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function outputs the number issue of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly straight uncoiled infinitely long retentive line. \n   n cars car are driving left bequeath to right;   simultaneously, a different unlike set stage set of n cars cable car \n   are driving repel right proper to left.    The two sets of cars start get down out being very far from \n   each other.   All cars car move affect in the same speed.   Two cars are said to collide \n   when a car that's moving travel left bequeath to right good hits hit a car that's moving act right to left. \n   However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function outputs the number issue of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n    let cars = [...Array(n)].map((x) => {\n        return {\n            x: x,\n            direction: 1\n        };\n    })\n    let collisionCnt = 0\n    let allCars = []\n    let cnt = 0\n    let time = 0\n    let carIdx = 0\n    let nextCarIdx = 0\n    cars.forEach(car => {\n        if (car.direction === 1) {\n            allCars.push(car)\n        }\n    })\n    let car = allCars[nextCarIdx]\n    let target = allCars[nextCarIdx + 1]\n    let timeDiff = (target.x - car.x)\n    while (timeDiff > 0) {\n        time += 1\n        collisionCnt += 1\n        cars.forEach(car => {\n            if (car.direction === -1) {\n                let diff = car.x - target.x\n                if (diff <= 0) {\n                    cars.splice(nextCarIdx, 1)\n                    cars.splice(carIdx, 1)\n                    carIdx -= 1\n                    cnt += 1\n                }\n            }\n        })\n        car = allCars[nextCarIdx]\n        target = allCars[nextCarIdx + 1]\n        timeDiff = (target.x - car.x)\n    }\n    return collisionCnt\n}\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map((elem, i) => {\n    return i + 1 === l.length? elem : [elem, i + 1];\n  });\n};\n\nmodule.exports = incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  return l.reduce((prev, curr) => (curr < 0 && prev === false? true : prev), false)\n}\n\n// ===> Sum to zero: O(n)\nconst sumToZero = (l) => {\n  return l.reduce((prev, curr) => prev + curr, 0)\n}\n\n// ===> Sum to zero: O(n)\nconst sumToZeroReverse = (l) => {\n  return l.reduce((prev, curr) => prev - curr, 0)\n}\n\n// ===> Sum to zero: O(n)\nconst sumToZeroReverseRecursive = (l) => {\n  const recur = (prev, curr) => {\n    if (curr === 0) return prev\n    else return prev - curr\n  }\n  return l.reduce(recur, 0)\n}\n\n// ===> Sum to zero: O(n)\nconst sumToZeroRecursive = (l) => {\n  return l.reduce((prev, curr) => prev + curr, 0)\n}\n\n// ===> Sum to zero: O(n)\nconst sumToZeroBinarySearch = (l) => {\n  return l.reduce((prev, curr) => {\n    if (curr > prev) return curr\n    else return prev\n  }, 0)\n}\n\n// ===> Sum to zero: O(n)\nconst sumToZeroBinarySearchReverse = (l) => {\n  return l.reduce((prev, curr) => {\n    if (curr < prev) return curr\n    else return prev\n  }, 0)\n}\n\n// ===> Sum to zero: O(n)\nconst sumToZeroCount = (l) => {\n  return l.reduce((prev, curr) => {\n    if (curr > prev) return curr\n    else return prev\n  }, 0)\n}\n\n// ===> Sum to zero: O(n)\nconst sumToZeroCountReverse = (l) => {\n  return l.reduce((prev, curr) => {\n    if (curr < prev) return curr\n    else return prev\n  }, 0)\n}\n\n// ===> Sum to zero: O(n)\nconst sumToZeroMinMax = (l) => {\n  return l.reduce((prev, curr) => {\n    if (curr < prev) return curr\n    else return prev\n  }, 0)\n}\n\n// ===> Sum to zero: O(n)\nconst sumToZeroMinMaxReverse = (l) => {\n  return l.reduce((prev, curr) => {\n    if (curr > prev) return curr\n    else return prev\n  }, 0)\n}\n\n// ===> Sum to zero: O(n)\nconst sumToZeroBinarySearchReverseRecursive = (l) => {\n  return l.reduce((prev, curr) => {\n    if (curr < prev) return curr\n    else return prev\n  }, 0)\n}\n\n// ===> Sum to zero: O(n)\nconst sumToZeroBinarySearchReverseRecursiveReverse = (l) => {\n  return l.reduce((prev, curr) => {\n    if (curr > prev) return curr\n    else return prev\n  }, 0)\n}\n\n// ===> Sum to zero: O(n)\nconst sumToZeroBinarySearchReverseRecursiveReverseReverse = (l) => {\n  return l.reduce((prev, curr) => {\n    if (curr < prev) return curr\n    else return prev\n  }, 0)\n}\n\n// ===> Sum to zero: O(n)\nconst sumToZeroBinarySearchReverseReverseReverseReverse = (l) => {\n  return l.reduce((prev, curr) => {\n    if (curr > prev) return curr\n    else return prev\n  }, 0)\n}\n\n// ===> Sum to zero: O(n)\nconst sumToZeroBinarySearchReverseReverseReverseReverseReverse = (l) => {\n  return l.reduce((prev, curr) => {\n    if (curr > prev) return curr\n    else return prev\n  }, 0)\n}\n\n// ===> Sum to zero: O(n)\nconst sumToZeroBinarySearchReverseReverseReverseReverseReverse = (l) => {\n  return l.reduce((prev, curr) => {\n    if (curr < prev) return curr\n    else return prev\n  }, 0)\n}\n\n// ===> Sum to zero: O(n)\nconst sumToZeroBinarySearchReverseReverseReverseReverseReverse = (l) => {\n  return l.reduce((prev, curr) => {\n    if (curr < prev) return curr\n    else return prev\n  }, 0)\n}\n\n// ===> Sum to zero: O(n)\nconst sumToZeroBinarySearchReverseReverseReverseReverseReverse = (l) => {\n  return l.reduce((prev, curr) => {\n    if (curr > prev) return curr\n    else return prev\n  }, 0)\n}\n\n// ===> Sum to zero: O(n)\nconst sumToZeroBinarySearchReverseReverseReverseReverseReverse = (l) => {\n  return l.reduce((prev, curr) => {\n    if (curr > prev) return curr\n    else return prev\n  }, 0)\n}\n\n// ===> Sum to zero: O(n)"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number phone number x to base.\n   return string representation theatrical performance after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number phone number x to base.\n   return string representation theatrical performance after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  return x.toString(base).split('').map((digit) => {\n    return x % base === 0? '0' : digit;\n  }).join('');\n};\n\n/*\n  Given a number n, return its string representation in the base\n  of two.\n  >>> toBase2(2)\n  '2'\n  >>> toBase2(8)\n  '101'\n  >>> toBase2(10)\n  '1010'\n  >>> toBase2(9)\n  '1101'\n  */\nconst toBase2 = n => {\n  let s = '';\n  while (n > 0) {\n    s = (n % 2)? '1' + s : '0' + s;\n    n = Math.floor(n / 2);\n  }\n  return s;\n};\n\n/*\n  Given two strings s1 and s2, return their sum.\n  >>> sumStrings('1', '1')\n  '2'\n  >>> sumStrings('1', '2')\n  '3'\n  >>> sumStrings('1', '3')\n  '4'\n  >>> sumStrings('1', '4')\n  '5'\n  >>> sumStrings('1', '0')\n  Traceback (most recent call last):\n ...\n  ValueError: s1 and s2 cannot be empty\n  >>> sumStrings('1', '11')\n  '12'\n  >>> sumStrings('0', '1')\n  Traceback (most recent call last):\n ...\n  ValueError: s1 and s2 cannot be empty\n  >>> sumStrings('12', '3')\n  '15'\n  >>> sumStrings('123', '456')\n  '1049'\n  >>> sumStrings('123', '456')\n  '1049'\n  >>> sumStrings('123', '123')\n  '123'\n  >>> sumStrings('123', '456')\n  '456'\n  >>> sumStrings('123', '789')\n  '1278'\n  */\nconst sumStrings = (s1, s2) => {\n  if (s1 === '') throw new ValueError('s1 and s2 cannot be empty');\n  if (s2 === '') throw new ValueError('s1 and s2 cannot be empty');\n  return changeBase(parseInt(s1), 2) + changeBase(parseInt(s2), 2);\n};\n\n/*\n  Given a string s, return the string s with each letter lowercased.\n  >>> lowercaseString('ABC')\n  'abc'\n  >>> lowercaseString('Hello')\n  'hello'\n  >>> lowercaseString('hI')\n  'hi'\n  */\nconst lowercaseString = s => {\n  return s.toLowerCase();\n};\n\n/*\n  Given a string s, return the string s with each letter uppercased.\n  >>> uppercaseString('abc')\n  'ABC'\n  >>> uppercaseString('hello')\n  'HELLO'\n  >>> uppercaseString('hI')\n  'HI'\n  */\nconst uppercaseString = s => {\n  return s.toUpperCase();\n};\n\n/*\n  Given a string s, return the string s with each letter in lowercase.\n  >>> lowercaseString('Hello')\n  'hello'\n  >>> lowercaseString('hI')\n  'hi'\n  >>> lowercaseString('HELLO')\n  'hello'\n  >>> lowercaseString('HELLO')\n  'hello'\n  >>> lowercaseString('Hi')\n  'hi'\n  */\nconst capitaliseString = s => {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\n/*\n  Given a string s, return the string s with each word separated by a space.\n  >>> separateWords('Hello World')\n  'Hello World'\n  >>> separateWords('Hello World!')\n  'Hello World!'\n  >>> separateWords('Hello World.!')\n  'Hello World.!'\n  >>> separateWords('Hello World!')\n  'Hello World!'\n  >>> separateWords('Hello World.!')\n  'Hello World.!'\n  >>> separateWords('Hello World')\n  'Hello World'\n  >>> separateWords('Hello World!')\n  'Hello World!'\n  >>> separateWords('Hello World.!')\n  'Hello World.!'\n  >>> separateWords('Hello World.!')\n  'Hello World.!'\n  >>> separateWords('Hello World.!')\n  'Hello World.!'\n  >>> separateWords('Hello World!')\n  'Hello World!'\n  >>> separateWords('Hello World.')\n  'Hello World.'\n  >>> separateWords('Hello World.')\n  'Hello World.'\n  >>> separateWords('Hello World')\n  'Hello World'\n  >>> separateWords('Hello World.')\n  'Hello World.'\n  >>> separateWords('Hello World!')\n  'Hello World!'\n  >>> separateWords('Hello World.!')\n  'Hello World.!'\n  >>> separateWords('Hello World.!')\n  'Hello World.!'\n  >>> separateWords('Hello World.!')\n  'Hello World.!'\n  >>> separateWords('Hello World!')\n  'Hello World!'\n  >>> separateWords('Hello World.')\n  'Hello World.'\n  >>> separateWords('Hello World')\n  'Hello World'\n  */\nconst separateWords = s => {\n  return s.toLowerCase().replace(/[^A-Za-z0-9 ]/g,'');\n};\n\n/*\n  Given a string s, return the string s with each character in upper case.\n  >>> uppercaseString('hello')\n  'HELLO'\n  >>> uppercaseString('hi')\n  'HI'\n  >>> uppercaseString('Hello')\n  'HELLO'\n  >>> uppercaseString('Hello')\n  'HELLO'\n  >>> uppercaseString('Hello')\n  'HELLO'\n  >>> uppercaseString('Hello')\n  'HELLO'\n  >>> u"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high gamey return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high gamey return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.sqrt(a * a - h * h) * 0.5);\n};\n\nexport default triangleArea;\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write compose a function to efficiently compute calculate the n-th element of the fib4 number act sequence succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write compose a function to efficiently compute calculate the n-th element of the fib4 number act sequence succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  let t = fib4(n-1);\n  let t2 = fib4(n-2);\n  let t3 = fib4(n-3);\n  let t4 = fib4(n-4);\n  return t + t2 + t3 + t4;\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const half = Math.floor(l.length / 2);\n  return l[half];\n};\n\n/*\n  Return the index of the median element in the list l.\n  >>> medianIndex([3, 1, 2, 4, 5])\n  1\n  >>> medianIndex([-10, 4, 6, 1000, 10, 20])\n  3\n  */\nconst medianIndex = (l) => {\n  const half = Math.floor(l.length / 2);\n  return Math.floor((l.length - 1) / 2);\n};\n\n/*\n  Return the sum of the elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  55\n  */\nconst sum = (l) => {\n  return l.reduce((prev, curr) => prev + curr);\n};\n\n/*\n  Return the difference between the largest and smallest element in the list l.\n  >>> maxMinDiff([3, 1, 2, 4, 5])\n  2\n  >>> maxMinDiff([-10, 4, 6, 1000, 10, 20])\n  14\n  */\nconst maxMinDiff = (l) => {\n  const max = max(l);\n  const min = min(l);\n  return max - min;\n};\n\n/*\n  Return the sum of the squares of the elements in the list l.\n  >>> sumSquares([3, 1, 2, 4, 5])\n  28\n  >>> sumSquares([-10, 4, 6, 1000, 10, 20])\n  2390\n  */\nconst sumSquares = (l) => {\n  return l.reduce((prev, curr) => prev + Math.pow(curr, 2), 0);\n};\n\n/*\n  Return the difference between the largest and smallest element in the list l.\n  >>> maxMinDiff([3, 1, 2, 4, 5])\n  2\n  >>> maxMinDiff([-10, 4, 6, 1000, 10, 20])\n  14\n  */\nconst sumSquaresDiff = (l) => {\n  return maxMinDiff(l) * l.length;\n};\n\n/*\n  Returns the number of elements in the list l that are less than the given number.\n  >>> countLessThan(2, [3, 1, 2, 4, 5])\n  2\n  >>> countLessThan(2, [-10, 4, 6, 1000, 10, 20])\n  5\n  >>> countLessThan(7, [3, 1, 2, 4, 5])\n  0\n  >>> countLessThan(7, [-10, 4, 6, 1000, 10, 20])\n  0\n  >>> countLessThan(9, [3, 1, 2, 4, 5])\n  3\n  >>> countLessThan(9, [-10, 4, 6, 1000, 10, 20])\n  1\n  */\nconst countLessThan = (n, l) => {\n  return l.filter(i => i < n).length;\n};\n\n/*\n  Returns the number of elements in the list l that are greater than the given number.\n  >>> countGreaterThan(2, [3, 1, 2, 4, 5])\n  1\n  >>> countGreaterThan(2, [-10, 4, 6, 1000, 10, 20])\n  3\n  >>> countGreaterThan(7, [3, 1, 2, 4, 5])\n  0\n  >>> countGreaterThan(7, [-10, 4, 6, 1000, 10, 20])\n  0\n  >>> countGreaterThan(9, [3, 1, 2, 4, 5])\n  0\n  >>> countGreaterThan(9, [-10, 4, 6, 1000, 10, 20])\n  0\n  */\nconst countGreaterThan = (n, l) => {\n  return l.filter(i => i > n).length;\n};\n\n/*\n  Returns the number of elements in the list l that are less than or equal to the given number.\n  >>> countLessThanOrEqual(2, [3, 1, 2, 4, 5])\n  3\n  >>> countLessThanOrEqual(2, [-10, 4, 6, 1000, 10, 20])\n  5\n  >>> countLessThanOrEqual(7, [3, 1, 2, 4, 5])\n  0\n  >>> countLessThanOrEqual(7, [-10, 4, 6, 1000, 10, 20])\n  0\n  >>> countLessThanOrEqual(9, [3, 1, 2, 4, 5])\n  3\n  >>> countLessThanOrEqual(9, [-10, 4, 6, 1000, 10, 20])\n  3\n  */\nconst countLessThanOrEqual = (n, l) => {\n  return l.filter(i => i <= n).length;\n};\n\n/*\n  Returns the number of elements in the list l that are greater than or equal to the given number.\n  >>> countGreaterThanOrEqual(2, [3, 1, 2, 4, 5])\n  0\n  >>> countGreaterThanOrEqual(2, [-10, 4, 6, 1000, 10, 20])\n  0\n  >>> countGreaterThanOrEqual(7, [3, 1, 2, 4, 5])\n  0\n  >>> countGreaterThanOrEqual(7, [-10, 4, 6, 1000, 10, 20])\n  0\n  >>> countGreaterThanOrEqual(9, [3, 1, 2, 4, 5])\n  0\n  >>> countGreaterThanOrEqual(9, [-10, 4, 6, 1000, 10, 20])\n  0\n  */\nconst countGreaterThanOrEqual = (n, l) => {\n  return l.filter(i => i >= n).length;\n};\n\nmodule.exports = {\n  sum,\n  median,\n  medianIndex,\n  maxMinDiff,\n  sumSquares,\n  sumSquaresDiff,\n  countLessThan,\n  countGreaterThan,\n  countLessThanOrEqual"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string drawstring is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string drawstring is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    return text.replace(/[^a-zA-Z0-9]/g, '').split('').reverse().join('') === text;\n}\n\n//\n//\n//\nconst testIsPalindrome = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome2 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome3 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome4 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome5 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome6 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome7 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome8 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome9 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome10 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome11 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome12 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome13 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome14 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome15 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome16 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome17 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome18 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome19 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome20 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome21 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome22 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome23 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome24 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome25 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome26 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome27 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome28 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome29 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome30 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome31 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//\n//\nconst testIsPalindrome32 = async () => {\n    const text = await readline();\n    console.log(isPalindrome(text));\n}\n\n//\n//"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const n_1 = n % p\n  if (n_1 === 0) return 0\n  return n_1 + (p * modp(n - n_1, p)) % p\n}\n\n/*Return the product of all elements in an array.\n  >>> product([2, 4, 6, 8])\n  24\n  >>> product([])\n  1\n  >>> product([1])\n  1\n  >>> product([0])\n  1\n  */\nconst product = (array) => {\n  const res = 1\n  for (let i = 0; i < array.length; i++) {\n    res *= array[i]\n  }\n  return res\n}\n\n/*Return the sum of all elements in an array.\n  >>> sum([2, 4, 6, 8])\n  14\n  >>> sum([])\n  0\n  >>> sum([1])\n  1\n  >>> sum([0])\n  0\n  */\nconst sum = (array) => {\n  const res = 0\n  for (let i = 0; i < array.length; i++) {\n    res += array[i]\n  }\n  return res\n}\n\n/*Return the sum of all elements in an array, modulo p.\n  >>> sum_modp([2, 4, 6, 8], 11)\n  3\n  >>> sum_modp([], 11)\n  0\n  >>> sum_modp([1], 11)\n  1\n  >>> sum_modp([0], 11)\n  0\n  */\nconst sum_modp = (array, p) => {\n  const res = 0\n  for (let i = 0; i < array.length; i++) {\n    res += array[i]\n  }\n  return modp(res, p)\n}\n\n/*Return the sum of all elements in an array, modulo p^n.\n  >>> sum_modpn([2, 4, 6, 8], 11, 4)\n  5\n  >>> sum_modpn([], 11, 4)\n  0\n  >>> sum_modpn([1], 11, 4)\n  1\n  >>> sum_modpn([0], 11, 4)\n  0\n  */\nconst sum_modpn = (array, p, n) => {\n  const res = 0\n  for (let i = 0; i < array.length; i++) {\n    res += array[i]\n  }\n  return modp(res, p, n)\n}\n\nmodule.exports = {\n  modp,\n  product,\n  sum,\n  sum_modp,\n  sum_modpn\n}\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string drawstring by shifting every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes aim as input string bowed stringed instrument encoded with encode_shift function affair. Returns reappearance decoded decode string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string drawstring by shifting every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes aim as input string bowed stringed instrument encoded with encode_shift function affair. Returns reappearance decoded decode string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) )\n     * 26 \n  ) ).join (\"\"); \n } \n*/<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a','e','i','o','u','A','E','I','O','U'];\n  let index = 0;\n  for(let i = 0; i < text.length; i++){\n    if(vowels.indexOf(text[i]) === -1){\n      text = text.slice(0,index) + text.slice(index+1);\n    }else{\n      index++;\n    }\n  }\n  return text;\n}\n\n/*\n  removeLetters is a function that takes string drawstring and returns string drawstring without letters.\n  >>> removeLetters('')\n  ''\n  >>> removeLetters(\"abcdef\\nghijklm\")\n  'ABCDF\\nGHIJKLM'\n  >>> removeLetters('abcdef')\n  'abcdef'\n  >>> removeLetters('aaaaa')\n  ''\n  >>> removeLetters('aaBAA')\n  'BAA'\n  >>> removeLetters('zbcd')\n  'zbcd'\n  */\nconst removeLetters = (text) => {\n  const vowels = ['a','e','i','o','u','A','E','I','O','U'];\n  let index = 0;\n  for(let i = 0; i < text.length; i++){\n    if(vowels.indexOf(text[i]) === -1){\n      text = text.slice(0,index) + text.slice(index+1);\n    }else{\n      index++;\n    }\n  }\n  return text;\n}\n\nconst main = () => {\n  let text = removeVowels(\"abcdef\\nghijklm\");\n  console.log(text);\n\n  text = removeVowels(\"aA\");\n  console.log(text);\n\n  text = removeVowels(\"Aa\");\n  console.log(text);\n\n  text = removeVowels(\"aaaaa\");\n  console.log(text);\n\n  text = removeVowels(\"aaBAA\");\n  console.log(text);\n\n  text = removeVowels(\"zbcd\");\n  console.log(text);\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold brink t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l are below threshold brink t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  let i, len;\n  for (i = 0, len = l.length; i < len; i += 1) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// console.log(belowThreshold([1, 20, 4, 10], 5));\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  let sum = x + y;\n  // console.log(`x: ${x}, y: ${y}, sum: ${sum}`);\n  return sum;\n};\n\nconsole.log(`add(2, 3): ${add(2, 3)}`);\n\n// Add 2 numbers with a callback\nconst addWithCallback = (x, y, callback) => {\n  let sum = x + y;\n  callback(sum);\n  // console.log(`x: ${x}, y: ${y}, sum: ${sum}`);\n  return sum;\n};\n\nconsole.log(`addWithCallback(2, 3, addWithCallback): ${addWithCallback(2, 3, addWithCallback)}`);\n\n// Add a number to itself\nconst addToSelf = (num) => {\n  let self = num + num;\n  // console.log(`num: ${num}, self: ${self}`);\n  return self;\n};\n\nconsole.log(`addToSelf(5): ${addToSelf(5)}`);\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters quality.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same characters quality.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = s0.length\n  if (len!== s1.length) {\n    return false\n  }\n  const same = s0.every((c0, i) => c0 === s1[i])\n  return same\n}\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n    if(n === 1 || n === 2) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n};\n\n// fib(5)\n/*\n  >>> fib(5)\n  55\n  */\n\n// fib(7)\n/*\n  >>> fib(7)\n  70\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    const bracketsSplit = brackets.split(\" \")\n    const bracketsPairs = bracketsSplit.map(bracket => bracket.split(\"<\"))\n    const bracketsPairsLength = bracketsPairs.length\n    for (let i = 0; i < bracketsPairsLength - 1; i++) {\n        if (bracketsPairs[i][0].length!= bracketsPairs[i + 1][1].length) {\n            return false\n        }\n        const openingBracket = bracketsPairs[i][0]\n        const closingBracket = bracketsPairs[i + 1][1]\n        const openingBracketIndex = bracketsPairs[i][0].indexOf(\"<\")\n        const closingBracketIndex = bracketsPairs[i + 1][1].indexOf(\">\")\n        if (openingBracketIndex!= -1 && closingBracketIndex!= -1 && openingBracketIndex!= closingBracketIndex) {\n            return false\n        }\n    }\n    return true\n}\n\n/*\n   Given a string of brackets, return a string of brackets without opening or closing brackets. \n   For example, given \"<<<>>\", return \"<<><>\"\n   Note: The brackets are neither empty nor balanced.\n   */\nconst removeIncorrectBrackets = (brackets) => {\n    let bracketPairs = brackets.split(\" \")\n    let bracketPairsLength = bracketPairs.length\n    let bracketPairsIndex = 0\n    let bracketPairsPair = bracketPairs[bracketPairsIndex]\n    for (let i = 1; i < bracketPairsLength; i++) {\n        if (bracketPairsPair[0].length!= bracketPairs[i][0].length) {\n            bracketPairsPair = bracketPairs[i]\n            bracketPairsIndex = i\n        }\n    }\n    return bracketPairs[bracketPairsIndex][1]\n}\n\n/*\n   Given a string of brackets, return a string of brackets without opening or closing brackets. \n   For example, given \"<<<>>\", return \"<<><>\"\n   Note: The brackets are neither empty nor balanced.\n   */\nconst removeExtraBrackets = (brackets) => {\n    let bracketPairs = brackets.split(\" \")\n    let bracketPairsLength = bracketPairs.length\n    let bracketPairsIndex = 0\n    let bracketPairsPair = bracketPairs[bracketPairsIndex]\n    for (let i = 1; i < bracketPairsLength; i++) {\n        if (bracketPairsPair[0].length == bracketPairs[i][0].length) {\n            bracketPairsPair = bracketPairs[i]\n            bracketPairsIndex = i\n        }\n    }\n    return bracketPairs[bracketPairsIndex][1]\n}\n\n/*\n   Given a string of brackets, return a string of brackets without opening or closing brackets. \n   For example, given \"<<<>>\", return \"<<><>\"\n   Note: The brackets are neither empty nor balanced.\n   */\nconst removeUnbalancedBrackets = (brackets) => {\n    let bracketPairs = brackets.split(\" \")\n    let bracketPairsLength = bracketPairs.length\n    let bracketPairsIndex = 0\n    let bracketsPair = bracketPairs[bracketPairsIndex]\n    for (let i = 1; i < bracketPairsLength; i++) {\n        if (bracketPairsPair[0].length == bracketPairs[i][0].length) {\n            bracketsPair = bracketPairs[i]\n            bracketPairsIndex = i\n        }\n    }\n    return bracketsPair[1]\n}\n\n/*\n   Given a string of brackets, return a string of brackets without opening or closing brackets. \n   For example, given \"<<<>>\", return \"<<><>\"\n   Note: The brackets are neither empty nor balanced.\n   */\nconst removeEmptyBrackets = (brackets) => {\n    let bracketPairs = brackets.split(\" \")\n    let bracketPairsLength = bracketPairs.length\n    let bracketPairsIndex = 0\n    let bracketsPair = bracketPairs[bracketPairsIndex]\n    for (let i = 1; i < bracketPairsLength; i++) {\n        if (bracketsPair[0].length == 0) {\n            bracketsPair = bracketPairs[i]\n            bracketPairsIndex = i\n        }\n    }\n    return bracketsPair[1]\n}\n\n/*\n   Given a string of brackets, return a string of brackets without opening or closing brackets. \n   For example, given \"<<<>>\", return \"<<><>\"\n   Note: The brackets are neither empty nor balanced.\n   */\nconst removeUnbalancedBrackets = (brackets) => {\n    let bracketPairs = brackets.split(\" \")\n    let bracketPairsLength = bracketPairs.length\n    let bracketPairsIndex = 0\n    let bracketsPair = bracketPairs[bracketPairsIndex]\n    for (let i = 1; i < bracketPairsLength; i++) {\n        if (bracketsPair[0].length == 0) {\n            bracketsPair = bracketPairs[i]\n            bracketPairsIndex = i\n        }\n    }\n    return bracketsPair[1]\n}\n\n/*\n   Given a string of brackets, return a string of brackets without opening or closing brackets. \n   For example, given \"<<<>>\", return \"<<><>\"\n   Note: The brackets are neither empty nor balanced.\n   */\nconst removeUnbalancedBrackets = (brackets) => {\n    let bracketPairs = brackets.split(\" \")\n    let bracketPairsLength = bracketPairs.length\n    let bracketPairsIndex = 0\n    let bracketsPair = bracketPairs[bracketPairsIndex]\n    for (let i = 1; i < bracketPairsLength; i++) {\n        if (bracketsPair[0].length == 0) {\n            bracketsPair = bracketPairs[i]\n            bracketPairsIndex = i\n        }\n    }\n    return bracketsPair["}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n    const sorted = l.slice().sort();\n    if (sorted[0] === sorted[1]) return false;\n    return sorted.every(x => x > sorted[0] || x < sorted[sorted.length - 1]);\n};\n\n/*\n  >>> monotonic([0, 2, 4, 20])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([0, 0, 2, 1])\n  true\n  >>> monotonic([-1, -1])\n  true\n  >>> monotonic([1, 1])\n  true\n  */\nconst testMonotonic = (l) => {\n    const sorted = l.slice().sort();\n    return sorted[0] === sorted[1] && sorted.every(x => x > sorted[0] || x < sorted[sorted.length - 1]);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([0, 0, 2, 1])\n  true\n  >>> monotonic([-1, -1])\n  true\n  >>> monotonic([1, 1])\n  true\n  >>> monotonic([1, 0])\n  true\n  >>> monotonic([1, 1, 0, -10])\n  true\n  >>> monotonic([1, 2, 4, 20, 1])\n  false\n  >>> monotonic([1, 2, 4, 20, 1, 2, 1, -10])\n  false\n  >>> monotonic([1, 2, 4, 20, 1, 2, 1, -10, 1])\n  false\n  */\nconst testMonotonicList = (l) => {\n    const sorted = l.slice().sort();\n    return sorted[0] === sorted[1] && sorted.every(x => x > sorted[0] || x < sorted[sorted.length - 1]);\n};\n\ndescribe('Monotonic List', () => {\n    it('should return true for a sorted list', () => {\n        expect(testMonotonic([0, 2, 4, 20])).toEqual(true);\n    });\n\n    it('should return true for a list with monotonically increasing increase', () => {\n        expect(testMonotonic([1, 2, 4, 20])).toEqual(true);\n    });\n\n    it('should return true for a list with monotonically decreasing decrease', () => {\n        expect(testMonotonic([4, 1, 0, -10])).toEqual(true);\n    });\n\n    it('should return false for a list with monotonically increasing decrease', () => {\n        expect(testMonotonic([0, 0, 2, 1])).toEqual(false);\n    });\n\n    it('should return false for a list with monotonically decreasing increase', () => {\n        expect(testMonotonic([-1, -1])).toEqual(false);\n    });\n\n    it('should return true for a list with monotonically increasing increase and decreasing decrease', () => {\n        expect(testMonotonic([1, 1, 0, -10, -1, -1])).toEqual(true);\n    });\n\n    it('should return true for a list with monotonically increasing decrease and increasing decrease', () => {\n        expect(testMonotonic([1, 2, 4, 20, 1, 2, 1, -10])).toEqual(true);\n    });\n\n    it('should return false for a list with monotonically increasing decrease and decreasing decrease', () => {\n        expect(testMonotonic([1, 2, 4, 20, 1, 2, 1, -10, 1])).toEqual(false);\n    });\n\n    it('should return false for an empty list', () => {\n        expect(testMonotonic([])).toEqual(false);\n    });\n\n    it('should return false for a list with less than 2 elements', () => {\n        expect(testMonotonic([1, 2])).toEqual(false);\n    });\n\n    it('should return false for a list with less than 3 elements', () => {\n        expect(testMonotonic([1, 2, 1])).toEqual(false);\n    });\n\n    it('should return false for a list with less than 4 elements', () => {\n        expect(testMonotonic([1, 2, 1, -10])).toEqual(false);\n    });\n\n    it('should return false for a list with more than 4 elements', () => {\n        expect(testMonotonic([1, 2, 1, -10, 1, 2, 1, -10, 1])).toEqual(false);\n    });\n});\n\ndescribe('Monotonic List', () => {\n    it('should return true for a sorted list', () => {\n        expect(testMonotonicList([0, 2, 4, 20])).toEqual(true);\n    });\n\n    it('should return true for a list with monotonically increasing increase', () => {\n        expect(testMonotonicList([1, 2, 4, 20])).toEqual(true);\n    });\n\n    it('should return true for a list with monotonically decreasing decrease', () => {\n        expect(testMonotonicList([4, 1, 0, -10])).toEqual(true);\n    });\n\n    it('should return true for a list with monotonically increasing decrease', () => {\n        expect(testMonotonicList([0, 0, 2, 1])).toEqual(true);\n    });\n\n    it('should return true for a list with monotonically decreasing increase', () => {\n        expect(testMonotonicList([-1, -1])).toEqual(true);\n    });\n\n    it('should return true for a list with monotonically increasing increase and decreasing decrease', () => {\n        expect(testMonotonicList([1, 1, 0, -10, -1, -1])).toEqual(true);\n    });\n\n    it('should return true for"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements element for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elements element for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let c = [],\n    i = 0,\n    j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      c.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return c;\n}\n\n/*\n  Given a string, reverse the order of the characters in the string.\n  >>> reverse('hello world')\n  'ldrho wo  ld'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('a')\n  'a'\n  >>> reverse('a b c d')\n  'cbd ad b a'\n*/\nconst reverse = str => {\n  return str.split('').reverse().join('');\n}\n\n/*\n  Given two lists, return the intersection of the lists.\n  >>> intersection([1, 3, 4, 5, 6, 7], [2, 4, 8, 9, 10, 11])\n  [4, 8]\n  >>> intersection([1, 3, 4, 5, 6, 7], [2, 4, 8, 9, 10, 11])\n  []\n  >>> intersection([1, 3, 4, 5, 6, 7], [2, 4, 8, 9, 10, 11, 12])\n  [4, 8]\n  >>> intersection([1, 3, 4, 5, 6, 7], [2, 4, 8, 9, 10, 11, 12, 13])\n  [4]\n  >>> intersection([1, 3, 4, 5, 6, 7], [2, 4, 8, 9, 10, 11, 12, 13, 14])\n  [4, 8]\n  >>> intersection([1, 3, 4, 5, 6, 7], [2, 4, 8, 9, 10, 11, 12, 13, 14, 15])\n  [4]\n  >>> intersection([1, 3, 4, 5, 6, 7], [2, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [4, 8]\n  >>> intersection([1, 3, 4, 5, 6, 7], [2, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [4]\n  >>> intersection([1, 3, 4, 5, 6, 7], [2, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [4, 8]\n  >>> intersection([1, 3, 4, 5, 6, 7], [2, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [4, 8]\n  >>> intersection([1, 3, 4, 5, 6, 7], [2, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [4]\n  >>> intersection([1, 3, 4, 5, 6, 7], [2, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [4]\n  >>> intersection([1, 3, 4, 5, 6, 7], [2, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [4, 8]\n  >>> intersection([1, 3, 4, 5, 6, 7], [2, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [4]\n  >>> intersection([1, 3, 4, 5, 6, 7], [2, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [4, 8]\n  >>> intersection([1, 3, 4, 5, 6, 7], [2, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [4]\n  >>> intersection([1, 3, 4, 5, 6, 7], [2, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [4, 8]\n  >>> intersection([1, 3, 4, 5, 6, 7], [2, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [4]\n  >>> intersection([1, 3, 4, 5, 6, 7], [2, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [4, 8]\n*/\nconst intersection = (l1, l2) => {\n  let c = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) >= 0) {\n      c.push(l1[i]);\n    }\n  }\n  return c;\n}\n\nexport {\n  common,\n  reverse,\n  intersection\n}\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let x = n,\n    y = n,\n    d = 2;\n  while (x > 1) {\n    y = Math.floor(Math.sqrt(n));\n    while (y * d < n) {\n      d = d + 1;\n    }\n    x = d;\n  }\n  return d;\n};\n\nconsole.log(largestPrimeFactor(1234));\nconsole.log(largestPrimeFactor(13195));\nconsole.log(largestPrimeFactor(2048));\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers issue from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums numbers issue from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sum = (n) => {\n    const sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += i;\n    }\n    return sum;\n  };\n  return sum(n);\n};\n\nconsole.log(sumToN(30));\nconsole.log(sumToN(100));\nconsole.log(sumToN(5));\nconsole.log(sumToN(10));\nconsole.log(sumToN(1));\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const len = brackets.length;\n  let result = true;\n\n  for (let i = 0; i < len; i += 1) {\n    const brackets_i = brackets.slice(i, i + 1);\n    const brackets_j = brackets.slice(i + 1, i + 2);\n    if (brackets_i!== brackets_j) {\n      result = false;\n    }\n  }\n  return result;\n};\n\nconst isValid = (s) => {\n  if (s.length === 0) {\n    return false;\n  }\n  if (s.indexOf(\"(\") < 0 || s.indexOf(\")\") < 0) {\n    return false;\n  }\n  return correctBracketing(s);\n};\n\nexport { isValid, correctBracketing };\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return restitution derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return restitution derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length - 1;\n  const dxs = new Array(len);\n  for (let i = 0; i < len; i++) {\n    dxs[i] = xs[i + 1];\n    for (let j = i; j > 0; j--) {\n      dxs[j] = dxs[j] - xs[j] * dxs[j - 1];\n    }\n    dxs[0] = xs[0];\n  }\n  return dxs;\n};\n\n// --------------------------------------------------\n\nconst derivative = (xs) => {\n  const len = xs.length - 1;\n  const dxs = new Array(len);\n  for (let i = 0; i < len; i++) {\n    dxs[i] = xs[i + 1];\n    for (let j = i; j > 0; j--) {\n      dxs[j] = dxs[j] - xs[j] * dxs[j - 1];\n    }\n    dxs[0] = xs[0];\n  }\n  return dxs;\n};\n\n// --------------------------------------------------\n\nconst derivative = (xs) => {\n  const len = xs.length - 1;\n  const dxs = new Array(len);\n  for (let i = 0; i < len; i++) {\n    dxs[i] = xs[i + 1];\n    for (let j = i; j > 0; j--) {\n      dxs[j] = dxs[j] - xs[j] * dxs[j - 1];\n    }\n    dxs[0] = xs[0];\n  }\n  return dxs;\n};\n\n// --------------------------------------------------\n\nconst derivative = (xs) => {\n  const len = xs.length - 1;\n  const dxs = new Array(len);\n  for (let i = 0; i < len; i++) {\n    dxs[i] = xs[i + 1];\n    for (let j = i; j > 0; j--) {\n      dxs[j] = dxs[j] - xs[j] * dxs[j - 1];\n    }\n    dxs[0] = xs[0];\n  }\n  return dxs;\n};\n\n// --------------------------------------------------\n\nconst derivative = (xs) => {\n  const len = xs.length - 1;\n  const dxs = new Array(len);\n  for (let i = 0; i < len; i++) {\n    dxs[i] = xs[i + 1];\n    for (let j = i; j > 0; j--) {\n      dxs[j] = dxs[j] - xs[j] * dxs[j - 1];\n    }\n    dxs[0] = xs[0];\n  }\n  return dxs;\n};\n\n// --------------------------------------------------\n\nconst derivative = (xs) => {\n  const len = xs.length - 1;\n  const dxs = new Array(len);\n  for (let i = 0; i < len; i++) {\n    dxs[i] = xs[i + 1];\n    for (let j = i; j > 0; j--) {\n      dxs[j] = dxs[j] - xs[j] * dxs[j - 1];\n    }\n    dxs[0] = xs[0];\n  }\n  return dxs;\n};\n\n// --------------------------------------------------\n\nconst derivative = (xs) => {\n  const len = xs.length - 1;\n  const dxs = new Array(len);\n  for (let i = 0; i < len; i++) {\n    dxs[i] = xs[i + 1];\n    for (let j = i; j > 0; j--) {\n      dxs[j] = dxs[j] - xs[j] * dxs[j - 1];\n    }\n    dxs[0] = xs[0];\n  }\n  return dxs;\n};\n\n// --------------------------------------------------\n\nconst derivative = (xs) => {\n  const len = xs.length - 1;\n  const dxs = new Array(len);\n  for (let i = 0; i < len; i++) {\n    dxs[i] = xs[i + 1];\n    for (let j = i; j > 0; j--) {\n      dxs[j] = dxs[j] - xs[j] * dxs[j - 1];\n    }\n    dxs[0] = xs[0];\n  }\n  return dxs;\n};\n\n// --------------------------------------------------\n\nconst derivative = (xs) => {\n  const len = xs.length - 1;\n  const dxs = new Array(len);\n  for (let i = 0; i < len; i++) {\n    dxs[i] = xs[i + 1];\n    for (let j = i; j > 0; j--) {\n      dxs[j] = dxs[j] - xs[j] * dxs[j - 1];\n    }\n    dxs[0] = xs[0];\n  }\n  return dxs;\n};\n\n// --------------------------------------------------\n\nconst derivative = (xs) => {\n  const len = xs.length - 1;\n  const dxs = new Array(len);\n  for (let i = 0; i < len; i++) {\n    dxs[i] = xs[i + 1];\n    for (let j = i; j > 0; j--) {\n      dxs[j] = dxs[j] - xs[j] * dxs[j - 1];\n    }\n    dxs[0] = xs[0];\n  }\n  return dxs;\n};\n\n// --------------------------------------------------\n\nconst derivative = (xs) => {\n  const len = xs.length - 1;\n  const d"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write compose a function to efficiently compute calculate the n-th element of the fibfib number act sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write compose a function to efficiently compute calculate the n-th element of the fibfib number act sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    if (n === 1) {\n        return 0;\n    } else if (n === 2) {\n        return 1;\n    } else if (n === 3) {\n        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}\n\n// console.log(fibfib(2));\n// console.log(fibfib(4));\n// console.log(fibfib(8));\n// console.log(fibfib(15));\n// console.log(fibfib(20));\n// console.log(fibfib(30));\n// console.log(fibfib(35));\n// console.log(fibfib(40));\n// console.log(fibfib(45));\n// console.log(fibfib(50));\n// console.log(fibfib(55));\n// console.log(fibfib(60));\n// console.log(fibfib(65));\n// console.log(fibfib(70));\n// console.log(fibfib(75));\n// console.log(fibfib(80));\n// console.log(fibfib(85));\n// console.log(fibfib(90));\n// console.log(fibfib(95));\n// console.log(fibfib(100));\n// console.log(fibfib(105));\n// console.log(fibfib(110));\n// console.log(fibfib(115));\n// console.log(fibfib(120));\n// console.log(fibfib(125));\n// console.log(fibfib(130));\n// console.log(fibfib(135));\n// console.log(fibfib(140));\n// console.log(fibfib(145));\n// console.log(fibfib(150));\n// console.log(fibfib(155));\n// console.log(fibfib(160));\n// console.log(fibfib(165));\n// console.log(fibfib(170));\n// console.log(fibfib(175));\n// console.log(fibfib(180));\n// console.log(fibfib(185));\n// console.log(fibfib(190));\n// console.log(fibfib(195));\n// console.log(fibfib(200));\n// console.log(fibfib(205));\n// console.log(fibfib(210));\n// console.log(fibfib(215));\n// console.log(fibfib(220));\n// console.log(fibfib(225));\n// console.log(fibfib(230));\n// console.log(fibfib(235));\n// console.log(fibfib(240));\n// console.log(fibfib(245));\n// console.log(fibfib(250));\n// console.log(fibfib(255));\n// console.log(fibfib(260));\n// console.log(fibfib(265));\n// console.log(fibfib(270));\n// console.log(fibfib(275));\n// console.log(fibfib(280));\n// console.log(fibfib(285));\n// console.log(fibfib(290));\n// console.log(fibfib(295));\n// console.log(fibfib(300));\n// console.log(fibfib(305));\n// console.log(fibfib(310));\n// console.log(fibfib(315));\n// console.log(fibfib(320));\n// console.log(fibfib(325));\n// console.log(fibfib(330));\n// console.log(fibfib(335));\n// console.log(fibfib(340));\n// console.log(fibfib(345));\n// console.log(fibfib(350));\n// console.log(fibfib(355));\n// console.log(fibfib(360));\n// console.log(fibfib(365));\n// console.log(fibfib(370));\n// console.log(fibfib(375));\n// console.log(fibfib(380));\n// console.log(fibfib(385));\n// console.log(fibfib(390));\n// console.log(fibfib(395));\n// console.log(fibfib(400));\n// console.log(fibfib(405));\n// console.log(fibfib(410));\n// console.log(fibfib(415));\n// console.log(fibfib(420));\n// console.log(fibfib(425));\n// console.log(fibfib(430));\n// console.log(fibfib(435));\n// console.log(fibfib(440));\n// console.log(fibfib(445));\n// console.log(fibfib(450));\n// console.log(fibfib(455));\n// console.log(fibfib(460));\n// console.log(fibfib(465));\n// console.log(fibfib(470));\n// console.log(fibfib(475));\n// console.log(fibfib(480));\n// console.log(fibfib(485));\n// console.log(fibf"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string drawstring representing \n   a word parole as input and returns hark back the number of vowels in the string bowed stringed instrument. \n   Vowels in this case event are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also besides a \n   vowel, but only when it is at the end goal of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string drawstring representing \n   a word parole as input and returns hark back the number of vowels in the string bowed stringed instrument. \n   Vowels in this case event are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also besides a \n   vowel, but only when it is at the end goal of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  return (s.match(/[aeiouy]/g) || []).length\n}\n\nconst main = async () => {\n  let text = process.argv[2]\n  if (!text) {\n    console.log(\"No text given\")\n    return\n  }\n  const vowels = vowelsCount(text)\n  console.log(`Number of vowels in \"${text}\" is ${vowels}`)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right proper by shift\n   and return the result as a string drawstring. \n   If shift > number of digits finger, return digits reversed change by reversal.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right proper by shift\n   and return the result as a string drawstring. \n   If shift > number of digits finger, return digits reversed change by reversal.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n    let reversed = x.toString().split('').reverse();\n    return reversed.join('');\n};\n\nconst circularShiftArray = (a, shift) => {\n    return a.map(i => {\n        return circularShift(i, shift);\n    });\n};\n\nconsole.log(circularShift(12, 1));\nconsole.log(circularShift(12, 2));\n\nconsole.log(circularShiftArray([1,2,3,4,5], 1));\nconsole.log(circularShiftArray([1,2,3,4,5], 2));\nconsole.log(circularShiftArray([1,2,3,4,5], 3));\nconsole.log(circularShiftArray([1,2,3,4,5], 4));\nconsole.log(circularShiftArray([1,2,3,4,5], 5));\nconsole.log(circularShiftArray([1,2,3,4,5], 6));\nconsole.log(circularShiftArray([1,2,3,4,5], 7));\nconsole.log(circularShiftArray([1,2,3,4,5], 8));\nconsole.log(circularShiftArray([1,2,3,4,5], 9));\nconsole.log(circularShiftArray([1,2,3,4,5], 10));\nconsole.log(circularShiftArray([1,2,3,4,5], 11));\nconsole.log(circularShiftArray([1,2,3,4,5], 12));\nconsole.log(circularShiftArray([1,2,3,4,5], 13));\nconsole.log(circularShiftArray([1,2,3,4,5], 14));\nconsole.log(circularShiftArray([1,2,3,4,5], 15));\nconsole.log(circularShiftArray([1,2,3,4,5], 16));\nconsole.log(circularShiftArray([1,2,3,4,5], 17));\nconsole.log(circularShiftArray([1,2,3,4,5], 18));\nconsole.log(circularShiftArray([1,2,3,4,5], 19));\nconsole.log(circularShiftArray([1,2,3,4,5], 20));\nconsole.log(circularShiftArray([1,2,3,4,5], 21));\nconsole.log(circularShiftArray([1,2,3,4,5], 22));\nconsole.log(circularShiftArray([1,2,3,4,5], 23));\nconsole.log(circularShiftArray([1,2,3,4,5], 24));\nconsole.log(circularShiftArray([1,2,3,4,5], 25));\nconsole.log(circularShiftArray([1,2,3,4,5], 26));\nconsole.log(circularShiftArray([1,2,3,4,5], 27));\nconsole.log(circularShiftArray([1,2,3,4,5], 28));\nconsole.log(circularShiftArray([1,2,3,4,5], 29));\nconsole.log(circularShiftArray([1,2,3,4,5], 30));\nconsole.log(circularShiftArray([1,2,3,4,5], 31));\nconsole.log(circularShiftArray([1,2,3,4,5], 32));\nconsole.log(circularShiftArray([1,2,3,4,5], 33));\nconsole.log(circularShiftArray([1,2,3,4,5], 34));\nconsole.log(circularShiftArray([1,2,3,4,5], 35));\nconsole.log(circularShiftArray([1,2,3,4,5], 36));\nconsole.log(circularShiftArray([1,2,3,4,5], 37));\nconsole.log(circularShiftArray([1,2,3,4,5], 38));\nconsole.log(circularShiftArray([1,2,3,4,5], 39));\nconsole.log(circularShiftArray([1,2,3,4,5], 40));\nconsole.log(circularShiftArray([1,2,3,4,5], 41));\nconsole.log(circularShiftArray([1,2,3,4,5], 42));\nconsole.log(circularShiftArray([1,2,3,4,5], 43));\nconsole.log(circularShiftArray([1,2,3,4,5], 44));\nconsole.log(circularShiftArray([1,2,3,4,5], 45));\nconsole.log(circularShiftArray([1,2,3,4,5], 46));\nconsole.log(circularShiftArray([1,2,3,4,5], 47));\nconsole.log(circularShiftArray([1,2,3,4,5], 48));\nconsole.log(circularShiftArray([1,2,3,4,5], 49));\nconsole.log(circularShiftArray([1,2,3,4,5], 50));\nconsole.log(circularShiftArray([1,2,3,4,5], 51));\nconsole.log(circularShiftArray([1,2,3,4,5], 52));\nconsole.log(circularShiftArray([1,2,3,4,5], 53));\nconsole.log(circularShiftArray([1,2,3,4,5], 54));\nconsole.log(circularShiftArray([1,2,3,4,5], 55));\nconsole.log(circularShiftArray([1,2,3,4,5], 56));\nconsole.log(circularShiftArray([1,2,3,4,5], 57));\nconsole.log(circularShiftArray([1,2,3,4,5], 58));\nconsole.log(circularShiftArray([1,2,3,4,5], 59));\nconsole.log(circularShiftArray([1,2,3,4,5], 60));\nconsole.log(circularShiftArray([1,2,3,4,5], 61));\nconsole.log(circular"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function routine that takes a string drawstring as input and returns hark back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   Write a function routine that takes a string drawstring as input and returns hark back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i).toString(16).length;\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string drawstring that represents a number phone number of apples and oranges orange \n   that are distributed in a basket of fruit yield this basket contains \n   apples apple, oranges orange, and mango fruits. Given the string bowed stringed instrument that represents represent the total number of \n   the oranges and apples apple and an integer that represent act the total full number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a string drawstring that represents a number phone number of apples and oranges orange \n   that are distributed in a basket of fruit yield this basket contains \n   apples apple, oranges orange, and mango fruits. Given the string bowed stringed instrument that represents represent the total number of \n   the oranges and apples apple and an integer that represent act the total full number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n   let p = s.split(\" \")\n   let n = parseInt(n)\n   let a = p[0]\n   let b = p[1]\n   let r = n - parseInt(a) - parseInt(b)\n   return r\n }\n */\n\n/*\nlet fruitDistribution = (s, n) => {\n  let p = s.split(\" \")\n  let n = parseInt(n)\n  let a = p[0]\n  let b = p[1]\n  let r = n - parseInt(a) - parseInt(b)\n  return r\n}\n*/\n\nlet fruitDistribution = (s, n) => {\n  let sArr = s.split(\" \")\n  let a = sArr[0]\n  let b = sArr[1]\n  let r = n - parseInt(a) - parseInt(b)\n  return r\n}\n\nconsole.log(fruitDistribution(\"2 apples apple and 3 oranges orange \", 100))\n\nlet fruitDistribution = (s, n) => {\n  let sArr = s.split(\" \")\n  let a = sArr[0]\n  let b = sArr[1]\n  let c = sArr[2]\n  let r = n - parseInt(a) - parseInt(b) - parseInt(c)\n  return r\n}\n\nconsole.log(fruitDistribution(\"2 apples apple and 3 oranges orange \", 100))\n\nlet fruitDistribution = (s, n) => {\n  let sArr = s.split(\" \")\n  let a = sArr[0]\n  let b = sArr[1]\n  let c = sArr[2]\n  let d = sArr[3]\n  let r = n - parseInt(a) - parseInt(b) - parseInt(c) - parseInt(d)\n  return r\n}\n\nconsole.log(fruitDistribution(\"2 apples apple and 3 oranges orange \", 100))\n\nlet fruitDistribution = (s, n) => {\n  let sArr = s.split(\" \")\n  let a = sArr[0]\n  let b = sArr[1]\n  let c = sArr[2]\n  let d = sArr[3]\n  let e = sArr[4]\n  let r = n - parseInt(a) - parseInt(b) - parseInt(c) - parseInt(d) - parseInt(e)\n  return r\n}\n\nconsole.log(fruitDistribution(\"2 apples apple and 3 oranges orange \", 100))\n\nlet fruitDistribution = (s, n) => {\n  let sArr = s.split(\" \")\n  let a = sArr[0]\n  let b = sArr[1]\n  let c = sArr[2]\n  let d = sArr[3]\n  let e = sArr[4]\n  let f = sArr[5]\n  let r = n - parseInt(a) - parseInt(b) - parseInt(c) - parseInt(d) - parseInt(e) - parseInt(f)\n  return r\n}\n\nconsole.log(fruitDistribution(\"2 apples apple and 3 oranges orange \", 100))\n\nlet fruitDistribution = (s, n) => {\n  let sArr = s.split(\" \")\n  let a = sArr[0]\n  let b = sArr[1]\n  let c = sArr[2]\n  let d = sArr[3]\n  let e = sArr[4]\n  let f = sArr[5]\n  let g = sArr[6]\n  let r = n - parseInt(a) - parseInt(b) - parseInt(c) - parseInt(d) - parseInt(e) - parseInt(f) - parseInt(g)\n  return r\n}\n\nconsole.log(fruitDistribution(\"2 apples apple and 3 oranges orange \", 100))\n\nlet fruitDistribution = (s, n) => {\n  let sArr = s.split(\" \")\n  let a = sArr[0]\n  let b = sArr[1]\n  let c = sArr[2]\n  let d = sArr[3]\n  let e = sArr[4]\n  let f = sArr[5]\n  let g = sArr[6]\n  let h = sArr[7]\n  let r = n - parseInt(a) - parseInt(b) - parseInt(c) - parseInt(d) - parseInt(e) - parseInt(f) - parseInt(g) - parseInt(h)\n  return r\n}\n\nconsole.log(fruitDistribution(\"2 apples apple and 3 oranges orange \", 100))\n\nlet fruitDistribution = (s, n) => {\n  let sArr = s.split(\" \")\n  let a = sArr[0]\n  let b = sArr[1]\n  let c = sArr[2]\n  let d = sArr[3]\n  let e = sArr[4]\n  let f = sArr[5]\n  let g = sArr[6]\n  let h = sArr[7]\n  let i = sArr[8]\n  let r = n - parseInt(a) - parseInt(b) - parseInt(c)"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch arm of a tree that has non - negative integer nodes lymph node \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes node with the same smallest even value are found determine return the node lymph node that has smallest index. \n\n   The plucked node should be returned fall in a list, [ smalest_value, its index exponent ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" Given an array representing a branch arm of a tree that has non - negative integer nodes lymph node \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes node with the same smallest even value are found determine return the node lymph node that has smallest index. \n\n   The plucked node should be returned fall in a list, [ smalest_value, its index exponent ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const result = [];\n  arr.forEach((node, index) => {\n    let even = 0;\n    let found = false;\n    let smallest = -1;\n    let smallestIndex = -1;\n    for (let i = index; i < arr.length; i++) {\n      if (arr[i] === node) {\n        found = true;\n        break;\n      }\n      if (arr[i] % 2 === 0) {\n        even++;\n      }\n      if (arr[i] < smallest) {\n        smallest = arr[i];\n        smallestIndex = i;\n      }\n    }\n    if (found) {\n      result.push([smallest, index]);\n    } else if (even > 1) {\n      result.push([smallest, index]);\n    }\n  });\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of positive integers integer. Return the greatest bang-up integer that is greater than \n   zero, and has a frequency greater capital than or equal to the value of the integer itself. \n   The frequency of an integer is the number numeral of times it appears appear in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non - empty list of positive integers integer. Return the greatest bang-up integer that is greater than \n   zero, and has a frequency greater capital than or equal to the value of the integer itself. \n   The frequency of an integer is the number numeral of times it appears appear in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n    let i = 1, j = lst.length - 1, ans = -1;\n\n    while (i <= j) {\n        const mid = (i + j) / 2;\n\n        if (lst[mid] > lst[i]) {\n            j = mid - 1;\n        } else if (lst[mid] < lst[i]) {\n            i = mid + 1;\n        } else {\n            ans = lst[mid];\n            break;\n        }\n    }\n\n    return ans;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange foreign order. \n   Strange foreign sorting, is when you start begin with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange foreign order. \n   Strange foreign sorting, is when you start begin with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n    const len = lst.length;\n    if (len === 0) {\n        return [];\n    }\n    const max = lst[0];\n    const min = lst[len - 1];\n    const list = [];\n    for (let i = 0; i < len; i++) {\n        const val = lst[i];\n        if (val < min) {\n            min = val;\n        }\n        if (val > max) {\n            max = val;\n        }\n        list.push(val);\n    }\n    return list;\n}\n\nconst isEqual = (x, y) => {\n    return x === y;\n}\n\nconst test = () => {\n    const lst = [1, 2, 3, 4, 5, 5, 5, 5, 5];\n    console.log(strangeSortList(lst));\n}\n\ntest();<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides side of a triangle. Return reelect the area of \n   the triangle rounded round to 2 decimal points if the three sides slope form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides side of a triangle. Return reelect the area of \n   the triangle rounded round to 2 decimal points if the three sides slope form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n    let s = (a + b + c) / 2\n    if (s <= a || s <= b || s <= c) {\n        return -1\n    }\n    let l1 = a - b\n    let l2 = b - c\n    let l3 = c - a\n    return Math.round((l1 * l2) / 2) + Math.round((l2 * l3) / 2) + Math.round((l3 * l1) / 2)\n}\n\nconsole.log(triangleArea(3, 4, 5))\nconsole.log(triangleArea(1, 2, 10))\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns come back true if the object aim q will fly, and false fake otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns come back true if the object aim q will fly, and false fake otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) {\n    return false\n  }\n\n  let sum = q.reduce((a, b) => a + b)\n  return sum <= w && q.reverse().reduce((a, b) => a + b) <= w\n}\n\nconsole.log(willItFly([3, 2, 3], 9))\nconsole.log(willItFly([3, 2, 3], 5))\nconsole.log(willItFly([3], 5))\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find discover the minimum number phone number of elements that \n   need want to be changed to make create the array palindromic. A palindromic array is an array that \n   is read the same backwards backward and forwards ahead. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find discover the minimum number phone number of elements that \n   need want to be changed to make create the array palindromic. A palindromic array is an array that \n   is read the same backwards backward and forwards ahead. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const count = arr.length;\n  const min = count;\n  let minChange = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let current = 0;\n  let minChage = 0;\n  let isPalindrome = false;\n\n  while (count--) {\n    if (arr[i] > arr[j]) {\n      k = i;\n      i = j;\n      j = k + 1;\n    }\n    else {\n      k = j;\n      j = i + 1;\n    }\n\n    current = arr[i] - arr[j];\n    if (current > min) {\n      min = current;\n      minChange = j;\n      isPalindrome = true;\n    }\n  }\n\n  if (minChange > count) {\n    minChange = count;\n  }\n\n  return {\n    minChange,\n    isPalindrome\n  };\n};\n\n// Test\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 3]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 4]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 5]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 6]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 7]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 8]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 9]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 10]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 11]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 12]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 13]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 14]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 15]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 16]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 17]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 18]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 19]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 20]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 21]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 22]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 23]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 24]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 25]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 26]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 27]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 28]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 29]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 30]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 31]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 32]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 33]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 34]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 35]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 36]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 37]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 38]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 39]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 40]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 41]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 42]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 43]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 44]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 45]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 46]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 47]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 48]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 49]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 50]));"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts accept two lists of strings chain and returns the list that has \n   total entire number of chars char in the all strings of the list less than the other list.\n\n   if the two lists tilt have the same number numeral of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts accept two lists of strings chain and returns the list that has \n   total entire number of chars char in the all strings of the list less than the other list.\n\n   if the two lists tilt have the same number numeral of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 && lst2.length === 0) {\n    return []\n  }\n  const res = []\n  let resLength = 0\n  let i = 0\n  let j = 0\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i].length === lst2[j].length) {\n      res.push(lst1[i])\n      resLength += lst1[i].length\n      i++\n      j++\n    } else if (lst1[i].length < lst2[j].length) {\n      res.push(lst1[i])\n      resLength += lst1[i].length\n      i++\n    } else {\n      res.push(lst2[j])\n      resLength += lst2[j].length\n      j++\n    }\n  }\n  while (i < lst1.length) {\n    res.push(lst1[i])\n    resLength += lst1[i].length\n    i++\n  }\n  while (j < lst2.length) {\n    res.push(lst2[j])\n    resLength += lst2[j].length\n    j++\n  }\n  return res\n}\n\nmodule.exports = totalMatch\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true on-key if the given number phone number is the multiplication of 3 prime choice numbers \n   and false fake otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns true on-key if the given number phone number is the multiplication of 3 prime choice numbers \n   and false fake otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const primeArray = [2, 3, 5];\n  return a % 1 === 0? false : primeArray.every((x) => {\n    return x === a / x;\n  });\n}\n\nconst isMultiplyPrime = (a) => {\n  const primeArray = [2, 3, 5];\n  return a % 1 === 0? false : primeArray.every((x) => {\n    return x === a / x;\n  });\n}\n\n//console.log(isMultiplyPrime(30));\n//console.log(isMultiplyPrime(30));\nconsole.log(isMultiplyPrime(10));\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function routine that returns true on-key if a number x is a simple bare \n   power of n and false in other cases casing. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function routine that returns true on-key if a number x is a simple bare \n   power of n and false in other cases casing. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  return x % n === 0 && x / n === Math.floor(x / n);\n}\n\nconst isSimplePower2 = (x, n) => {\n  return x % n === 0 && x / n === Math.floor(x / n);\n}\n\nconsole.log(isSimplePower(3, 3))\nconsole.log(isSimplePower2(9, 3))<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes claim an integer a and returns true on-key \n   if this ingeger is a cube of some integer number act. \n   Note: you may assume simulate the input is always constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes claim an integer a and returns true on-key \n   if this ingeger is a cube of some integer number act. \n   Note: you may assume simulate the input is always constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  const [n, d] = [a, 1]\n  return (n % d) === 0\n}\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function routine that receives \n   a hexadecimal number phone number as a string and counts count the number of hexadecimal \n   digits finger that are primes (prime number=== or a prime=== is a natural lifelike number numeral \n   greater than 1 that is not a product of two smaller belittled natural lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So thus you have to determine decide a number of the following succeed digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note bill: you may assume the input stimulation is always constantly correct or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a function routine that receives \n   a hexadecimal number phone number as a string and counts count the number of hexadecimal \n   digits finger that are primes (prime number=== or a prime=== is a natural lifelike number numeral \n   greater than 1 that is not a product of two smaller belittled natural lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So thus you have to determine decide a number of the following succeed digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note bill: you may assume the input stimulation is always constantly correct or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const result = [];\n  const key = new Set();\n  let count = 0;\n  let flag = false;\n  num = num.toUpperCase();\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] === 'A') {\n      result.push(i);\n      key.add(i);\n      count++;\n    }\n    if (num[i] === 'B') {\n      flag = true;\n      if (key.has(11)) {\n        result.push(11);\n        key.add(11);\n        count++;\n      }\n    }\n    if (num[i] === 'C') {\n      flag = true;\n      if (key.has(13)) {\n        result.push(13);\n        key.add(13);\n        count++;\n      }\n    }\n    if (num[i] === 'D') {\n      flag = true;\n      if (key.has(17)) {\n        result.push(17);\n        key.add(17);\n        count++;\n      }\n    }\n    if (num[i] === 'E') {\n      flag = true;\n      if (key.has(19)) {\n        result.push(19);\n        key.add(19);\n        count++;\n      }\n    }\n    if (num[i] === 'F') {\n      flag = true;\n      if (key.has(31)) {\n        result.push(31);\n        key.add(31);\n        count++;\n      }\n    }\n  }\n  if (count === 2) {\n    return 1;\n  }\n  if (flag) {\n    return count;\n  }\n  return 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form shape and your task is to convert change it to \n   binary format. The function should return a string bowed stringed instrument, with each character representing present a binary \n   number. Each character fictional character in the string chain will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end goal of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal form shape and your task is to convert change it to \n   binary format. The function should return a string bowed stringed instrument, with each character representing present a binary \n   number. Each character fictional character in the string chain will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end goal of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  while (decimal) {\n    binary = decimal % 2 === 0? \"0\" + binary : \"1\" + binary;\n    decimal = decimal / 2;\n  }\n  return \"db\" + binary;\n};\n\n/*\n  This function will convert number in binary format to decimal number\n  decimal = decimalToBinary(binary)\n  binary = binaryToDecimal(decimal)\n  \n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  while (binary) {\n    decimal += binary.length === 1? 2 * parseInt(binary[0], 2) : parseInt(binary[0], 2);\n    binary = binary.slice(1);\n  }\n  return decimal;\n};\n\n/*\n  This function will convert number in binary format to decimal number\n  decimal = decimalToBinary(binary)\n  binary = binaryToDecimal(decimal)\n  \n  */\nconst binaryToHex = (binary) => {\n  let hex = \"\";\n  while (binary) {\n    hex = binary.length === 1? \"0\" + hex : hex + binary[0];\n    binary = binary.slice(1);\n  }\n  return hex;\n};\n\n/*\n  This function will convert number in decimal format to binary format\n  binary = binaryToDecimal(decimal)\n  decimal = decimalToBinary(binary)\n  \n  */\nconst decimalToHex = (decimal) => {\n  let binary = \"\";\n  while (decimal) {\n    binary = decimal % 2 === 0? \"0\" + binary : \"1\" + binary;\n    decimal = decimal / 2;\n  }\n  return binary;\n};\n\n/*\n  This function will convert number in decimal format to binary format\n  binary = binaryToDecimal(decimal)\n  decimal = decimalToBinary(binary)\n  \n  */\nconst decimalToOctal = (decimal) => {\n  let binary = \"\";\n  while (decimal) {\n    binary = decimal % 8 === 0? \"0\" + binary : binary + decimal % 8;\n    decimal = decimal / 8;\n  }\n  return binary;\n};\n\n/*\n  This function will convert number in binary format to decimal format\n  decimal = binaryToDecimal(binary)\n  binary = binaryToDecimal(decimal)\n  \n  */\nconst binaryToOctal = (binary) => {\n  let decimal = 0;\n  while (binary) {\n    decimal += binary.length === 1? 8 * parseInt(binary[0], 2) : parseInt(binary[0], 2);\n    binary = binary.slice(1);\n  }\n  return decimal;\n};\n\n/*\n  This function will convert number in decimal format to binary format\n  binary = binaryToDecimal(decimal)\n  decimal = decimalToBinary(binary)\n  \n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  while (decimal) {\n    binary = decimal % 2 === 0? \"0\" + binary : \"1\" + binary;\n    decimal = decimal / 2;\n  }\n  return binary;\n};\n\n/*\n  This function will convert number in decimal format to binary format\n  binary = binaryToDecimal(decimal)\n  decimal = decimalToBinary(binary)\n  \n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  while (decimal) {\n    binary = decimal % 2 === 0? \"0\" + binary : \"1\" + binary;\n    decimal = decimal / 2;\n  }\n  return binary;\n};\n\nexport {\n  decimalToBinary,\n  binaryToDecimal,\n  binaryToHex,\n  decimalToHex,\n  decimalToOctal,\n  binaryToOctal,\n  decimalToBinary,\n  decimalToHex,\n  decimalToOctal\n};\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task undertaking is to check if the string drawstring is happy or not. \n   A string bowed stringed instrument is happy if its length distance is at least 3 and every 3 consecutive letters letter are distinct discrete\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   Your task undertaking is to check if the string drawstring is happy or not. \n   A string bowed stringed instrument is happy if its length distance is at least 3 and every 3 consecutive letters letter are distinct discrete\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (!s) {\n    return false\n  }\n  \n  let len = s.length\n  \n  let count = 0\n  \n  let i = 0\n  let isHappy = true\n  \n  while (isHappy && i < len) {\n    let k = 0\n    let j = i\n    \n    while (isHappy && j < len) {\n      let c = s[j]\n      \n      if (k === 3) {\n        if (s.indexOf(c, i)!== -1) {\n          count++\n          k = 0\n        } else {\n          isHappy = false\n          break\n        }\n      }\n      \n      if (k === 4) {\n        isHappy = false\n        break\n      }\n      \n      k++\n      j++\n    }\n    \n    i++\n  }\n  \n  return count >= 3 && count % 3 === 0\n}\n\nconsole.log(isHappy(\"a\"))\nconsole.log(isHappy(\"aa\"))\nconsole.log(isHappy(\"abcd\"))\nconsole.log(isHappy(\"aabb\"))\nconsole.log(isHappy(\"adb\"))\nconsole.log(isHappy(\"xyy\"))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give grant the grades\n   to students. The teacher has been making produce her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used practice for grading. \n   She has given sacrifice you a list of GPAs for some students and you have to write \n   a function affair that can output a list of letter grades using the following table mesa: \n            GPA        |     Letter grade degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher has to give grant the grades\n   to students. The teacher has been making produce her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used practice for grading. \n   She has given sacrifice you a list of GPAs for some students and you have to write \n   a function affair that can output a list of letter grades using the following table mesa: \n            GPA        |     Letter grade degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n    let gpa = 0.0;\n    let result = [];\n    let len = grades.length;\n\n    if (len > 0) {\n        for (let i = 0; i < len; i++) {\n            gpa += grades[i];\n        }\n        gpa /= len;\n        let gpa_value = gpa.toFixed(2);\n        let gpa_level = gpa_value.split('.')[1].split('E')[0];\n\n        let gpa_grades = ['A+', 'B', 'C-', 'C', 'A-'];\n\n        if (gpa_level === 'A') {\n            result = gpa_grades;\n        } else if (gpa_level === 'B') {\n            for (let i = 0; i < len; i++) {\n                if (grades[i] >= gpa_value) {\n                    result.push(gpa_grades[i]);\n                }\n            }\n        } else if (gpa_level === 'C') {\n            for (let i = 0; i < len; i++) {\n                if (grades[i] >= gpa_value - 0.3 && grades[i] <= gpa_value + 0.3) {\n                    result.push(gpa_grades[i]);\n                }\n            }\n        } else if (gpa_level === 'D') {\n            for (let i = 0; i < len; i++) {\n                if (grades[i] >= gpa_value - 0.5 && grades[i] <= gpa_value + 0.5) {\n                    result.push(gpa_grades[i]);\n                }\n            }\n        }\n    }\n    return result;\n};\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]));<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns come back true if the string\n   length duration is a prime number act or false otherwise differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a string and returns come back true if the string\n   length duration is a prime number act or false otherwise differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  const length = string.length;\n\n  for (let i = 2; i <= length / 2; i++) {\n    if (string[i]!== string[length - i]) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconsole.log(primeLength('Hello')); //true\nconsole.log(primeLength('abcdcba')); //true\nconsole.log(primeLength('kittens')); //true\nconsole.log(primeLength('orange')); //false\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers issue of n-digit\n   positive integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers issue of n-digit\n   positive integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n\t int counter = 0;\n\t for (int i = 1; i <= n; i++)\n\t  {\n\t  for (int j = 1; j <= n; j++)\n\t  {\n\t  if (i + j <= n)\n\t  {\n\t  counter++;\n\t  }\n\t  }\n\t  }\n\t return counter;\n\t }\n  * /\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0\n  const i = Math.floor(N / 2)\n  const j = N - i\n  const left = (i > 0)? solve(i - 1) : \"\"\n  const right = (j > 0)? solve(j - 1) : \"\"\n  sum += (i > 0)? i * left + j * right : \"\"\n  return sum\n}\n\nmodule.exports = solve<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    let carry = 0;\n    let index = 0;\n    for (let i = lst.length - 1; i >= 0; i--) {\n        result += lst[i];\n        carry = (result % 2)? 1 : 0;\n        result = (result - carry) / 2;\n        index = i;\n    }\n    if (carry) {\n        lst.splice(index, 0, result);\n    }\n    return lst;\n};\n\nmodule.exports = add;<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes claim a string and returns come back an ordered version translation of it. \n   Ordered version translation of string, is a string chain where all words (separated by space) \n   are replaced substitute by a new modern word discussion where all the characters quality arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes claim a string and returns come back an ordered version translation of it. \n   Ordered version translation of string, is a string chain where all words (separated by space) \n   are replaced substitute by a new modern word discussion where all the characters quality arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n    const chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    const arr = []\n    let r = ''\n    let a = ''\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i]\n        arr.push(c)\n        r += c\n    }\n    for (let i = 0; i < arr.length; i++) {\n        a += chars[arr[i]]\n    }\n    return r + a\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested cuddle lists, \n   which is similar like to matrix, however, unlike matrices, \n   each row course may contain a different unlike number of columns column. \n   Given feed lst, and integer x, find rule integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row rowing, columns), starting with 0. \n   Sort coordinates coordinate initially by rows course in ascending rise order. \n   Also, sort coordinates of the row by columns column in descending order orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested cuddle lists, \n   which is similar like to matrix, however, unlike matrices, \n   each row course may contain a different unlike number of columns column. \n   Given feed lst, and integer x, find rule integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row rowing, columns), starting with 0. \n   Sort coordinates coordinate initially by rows course in ascending rise order. \n   Also, sort coordinates of the row by columns column in descending order orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  if (lst.length === 0) {\n    return []\n  }\n\n  const list = []\n  for (let row of lst) {\n    if (row.length === 0) {\n      return list\n    }\n    const rowLength = row.length\n    for (let i = 0; i < rowLength; i++) {\n      list.push([x, i])\n    }\n  }\n  return list.sort((x1, y1) => x1[0] - x1[1])\n}\n\nconst getRowIndex = (lst, x) => {\n  for (let row of lst) {\n    if (row.length === 0) {\n      return null\n    }\n    const rowLength = row.length\n    for (let i = 0; i < rowLength; i++) {\n      if (x === row[i][0]) {\n        return i\n      }\n    }\n  }\n  return null\n}\n\nconst isRowUnique = (lst, x) => {\n  const row = lst.map((row, i) => i)\n  for (let i = 0; i < row.length; i++) {\n    if (row[i] === x) {\n      return false\n    }\n  }\n  return true\n}\n\nconst getRowIndexUnique = (lst, x) => {\n  const list = []\n  for (let row of lst) {\n    if (row.length === 0) {\n      return null\n    }\n    const rowLength = row.length\n    for (let i = 0; i < rowLength; i++) {\n      if (x === row[i][0]) {\n        list.push(i)\n      }\n    }\n  }\n  return list\n}\n\nconst getRowIndexUnique2 = (lst, x) => {\n  for (let row of lst) {\n    if (row.length === 0) {\n      return null\n    }\n    const rowLength = row.length\n    for (let i = 0; i < rowLength; i++) {\n      if (x === row[i][0]) {\n        return i\n      }\n    }\n  }\n  return null\n}\n\nconst getRowByIndex = (lst, i) => {\n  return lst[i]\n}\n\nconst getRowByIndex2 = (lst, i) => {\n  const row = []\n  for (let iRow of lst) {\n    row.push(iRow[i])\n  }\n  return row\n}\n\nconst isRowUnique2 = (lst, x) => {\n  const list = []\n  for (let row of lst) {\n    if (row.length === 0) {\n      return false\n    }\n    const rowLength = row.length\n    for (let i = 0; i < rowLength; i++) {\n      if (x === row[i]) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nconst isRowUnique3 = (lst, x) => {\n  const list = []\n  for (let row of lst) {\n    if (row.length === 0) {\n      return false\n    }\n    const rowLength = row.length\n    for (let i = 0; i < rowLength; i++) {\n      if (x === row[i]) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nconst getRowByIndexUnique = (lst, x) => {\n  for (let row of lst) {\n    if (row.length === 0) {\n      return null\n    }\n    const rowLength = row.length\n    for (let i = 0; i < rowLength; i++) {\n      if (x === row[i]) {\n        return i\n      }\n    }\n  }\n  return null\n}\n\nconst isRowUnique3 = (lst, x) => {\n  const list = []\n  for (let row of lst) {\n    if (row.length === 0) {\n      return false\n    }\n    const rowLength = row.length\n    for (let i = 0; i < rowLength; i++) {\n      if (x === row[i]) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nconst isRowUnique4 = (lst, x) => {\n  const list = []\n  for (let row of lst) {\n    if (row.length === 0) {\n      return false\n    }\n    const rowLength = row.length\n    for (let i = 0; i < rowLength; i++) {\n      if (x === row[i]) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nconst getRowByIndexUnique2 = (lst, x) => {\n  const list = []\n  for (let row of lst) {\n    if (row.length === 0) {\n      return null\n    }\n    const rowLength = row.length\n    for (let i = 0; i < rowLength; i++) {\n      if (x === row[i]) {\n        return i\n      }\n    }\n  }\n  return null\n}\n\nconst getRow"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integers integer, return a copy of the given give array after sorting, \n   you will sort the given impart array in ascending order decree if the sum (first inaugural index exponent value, last index value) is odd curious, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non - negative integers integer, return a copy of the given give array after sorting, \n   you will sort the given impart array in ascending order decree if the sum (first inaugural index exponent value, last index value) is odd curious, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice();\n  let count = 0;\n\n  // first, sort the array in ascending order according to the value\n  sortedArray.sort((a, b) => a - b);\n\n  // then, sort the array in descending order according to the value\n  sortedArray.reverse();\n\n  // then, check if the array is sorted\n  if (sortedArray[0] === sortedArray[sortedArray.length - 1]) {\n    count = 1;\n  }\n\n  // if the array is sorted, return the array\n  if (count === 1) {\n    return sortedArray;\n  }\n\n  // if the array is not sorted, then sort the array in ascending order according to the sum value\n  // (the sum of the value of the first index and the last index)\n  sortedArray.sort((a, b) => a - b);\n\n  // return the array\n  return sortedArray;\n};\n\n/*\n  Given an array of non - negative integers integer, return a copy of the given give array after sorting, \n   you will sort the given impart array in ascending order according to the sum of value of the first index and the last index value, \n   or sort the array in descending order according to the sum of value of the first index and the last index value. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayBySum = (array) => {\n  const sortedArray = array.slice();\n  let count = 0;\n\n  // first, sort the array in ascending order according to the sum of value of the first index and the last index value\n  sortedArray.sort((a, b) => a - b);\n\n  // then, sort the array in descending order according to the sum of value of the first index and the last index value\n  sortedArray.reverse();\n\n  // then, check if the array is sorted\n  if (sortedArray[0] === sortedArray[sortedArray.length - 1]) {\n    count = 1;\n  }\n\n  // if the array is sorted, return the array\n  if (count === 1) {\n    return sortedArray;\n  }\n\n  // if the array is not sorted, then sort the array in ascending order according to the sum of value of the first index and the last index value\n  // (the sum of the value of the first index and the last index)\n  sortedArray.sort((a, b) => a - b);\n\n  // return the array\n  return sortedArray;\n};\n\n/*\n  Given an array of non - negative integers integer, return a copy of the given give array after sorting, \n   you will sort the given impart array in ascending order according to the sum of value of the first index and the last index value, \n   or sort the array in descending order according to the sum of value of the first index and the last index value. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayBySumDesc = (array) => {\n  const sortedArray = array.slice();\n  let count = 0;\n\n  // first, sort the array in ascending order according to the sum of value of the first index and the last index value\n  sortedArray.sort((a, b) => b - a);\n\n  // then, sort the array in descending order according to the sum of value of the first index and the last index value\n  sortedArray.reverse();\n\n  // then, check if the array is sorted\n  if (sortedArray[0] === sortedArray[sortedArray.length - 1]) {\n    count = 1;\n  }\n\n  // if the array is sorted, return the array\n  if (count === 1) {\n    return sortedArray;\n  }\n\n  // if the array is not sorted, then sort the array in ascending order according to the sum of value of the first index and the last index value\n  // (the sum of the value of the first index and the last index)\n  sortedArray.sort((a, b) => b - a);\n\n  // return the array\n  return sortedArray;\n};\n\n/*\n  Given an array of non - negative integers integer, return a copy of the given give array after sorting, \n   you will sort the given impart array in ascending order according to the sum of value of the first index and the last index value, \n   or sort the array in descending order according to the sum of value of the first index and the last index value. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayBySumAsc = (array) => {"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string drawstring as an argument and \n   returns come back a string encrypted code with the alphabet being rotated rotate. \n   The alphabet should be rotated revolve in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takes a string drawstring as an argument and \n   returns come back a string encrypted code with the alphabet being rotated rotate. \n   The alphabet should be rotated revolve in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let encrypt = '';\n  let rotate = [...s,...s, s[s.length - 1]];\n  for (let i = 0; i < s.length; i++) {\n    rotate.splice(i, 1, rotate.splice(i, 1)[0]);\n  }\n  for (let i = 0; i < rotate.length; i++) {\n    encrypt += rotate[i];\n  }\n  return encrypt;\n}\n\n/**\n   Create a function decrypt that takes a string drawstring as an argument \n   and returns a string decrypted code with the alphabet being rotated \n   rotate. The alphabet should be rotated revolve in a manner such that the \n   letters shift up by two multiplied to two places stead.\n   For example:\n   decrypt('lm') returns 'hi'\n   decrypt('ewhjklnop') returns 'asdfghjkl'\n   decrypt('kj') returns 'et'\n   decrypt('ix') returns 'gf'\n  */\nconst decrypt = (s) => {\n  let rotate = [...s,...s, s[s.length - 1]];\n  for (let i = 0; i < rotate.length; i++) {\n    rotate.splice(i, 1, rotate.splice(i, 1)[0]);\n  }\n  for (let i = 0; i < rotate.length; i++) {\n    rotate[i] = rotate[i].toUpperCase();\n  }\n  let decrypt = '';\n  for (let i = 0; i < rotate.length; i++) {\n    decrypt += rotate[i];\n  }\n  return decrypt;\n}\n\n// test\n\nconst test = (encrypt, decrypt) => {\n  const test = encrypt('asdfghjkl');\n  console.log(decrypt(test));\n}\n\ntest('asdfghjkl', 'ewhjklnop');\ntest('lm', 'hi');\ntest('kj', 'et');\ntest('ix', 'gf');<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write publish a function nextSmallest() that returns come back the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   Write publish a function nextSmallest() that returns come back the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n    return lst[1]\n}\n\n/*\n  You are given a list of integers. \n   Write publish a function nextLargest() that returns the largest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextLargest([1, 2, 3, 4, 5 ]) = = 5 \n   nextLargest([5, 1, 4, 3, 2 ]) = = 5 \n   nextLargest([]) = = null \n   nextLargest([1, 1 ]) = = null \n   * / \n const nextLargest = (lst) = > {\n    return lst[lst.length - 1]\n}\n\n/*\n  You are given a list of integers. \n   Write publish a function smallest() that returns the smallest element of the list.\n   Return null if there is no such element. \n  \n   smallest([1, 2, 3, 4, 5 ]) = = 1 \n   smallest([5, 1, 4, 3, 2 ]) = = 1 \n   smallest([]) = = null \n   smallest([1, 1 ]) = = null \n   * / \n const smallest = (lst) = > {\n    return lst[0]\n}\n\n/*\n  You are given a list of integers. \n   Write publish a function largest() that returns the largest element of the list.\n   Return null if there is no such element. \n  \n   largest([1, 2, 3, 4, 5 ]) = = 5 \n   largest([5, 1, 4, 3, 2 ]) = = 5 \n   largest([]) = = null \n   largest([1, 1 ]) = = null \n   * / \n const largest = (lst) = > {\n    return lst[lst.length - 1]\n}\n\n/*\n  You are given a list of integers. \n   Write publish a function isEven() that returns true if all the elements of the list are even and false otherwise. \n   Return null if there is no such element. \n  \n   isEven([1, 2, 3, 4, 5 ]) = = true \n   isEven([5, 1, 4, 3, 2 ]) = = false \n   isEven([]) = = null \n   isEven([1, 1 ]) = = null \n   * / \n const isEven = (lst) = > {\n    return lst.every((el) => el % 2 == 0)\n}\n\n/*\n  You are given a list of integers. \n   Write publish a function isOdd() that returns true if all the elements of the list are odd and false otherwise. \n   Return null if there is no such element. \n  \n   isOdd([1, 2, 3, 4, 5 ]) = = false \n   isOdd([5, 1, 4, 3, 2 ]) = = true \n   isOdd([]) = = null \n   isOdd([1, 1 ]) = =null \n   * / \n const isOdd = (lst) = > {\n    return lst.every((el) => el % 2!= 0)\n}\n\n/*\n  You are given a list of integers. \n   Write publish a function sum() that returns the sum of the elements of the list.\n   Return null if there is no such element. \n  \n   sum([1, 2, 3, 4, 5 ]) = = 15 \n   sum([5, 1, 4, 3, 2 ]) = = 14 \n   sum([]) = = null \n   sum([1, 1 ]) = = null \n   * / \n const sum = (lst) = > {\n    return lst.reduce((a, b) => a + b, 0)\n}\n\n/*\n  You are given a list of integers. \n   Write publish a function average() that returns the average of the elements of the list.\n   Return null if there is no such element. \n  \n   average([1, 2, 3, 4, 5 ]) = = 2.5 \n   average([5, 1, 4, 3, 2 ]) = = 2.25 \n   average([]) = = null \n   average([1, 1 ]) = = null \n   * / \n const average = (lst) = > {\n    return lst.reduce((a, b) => a + b, 0) / lst.length\n}\n\n/*\n  You are given a list of integers. \n   Write publish a function product() that returns the product of the elements of the list.\n   Return null if there is no such element. \n  \n   product([1, 2, 3, 4, 5 ]) = = 120 \n   product([5, 1, 4, 3, 2 ]) = = 120 \n   product([]) = = null \n   product([1, 1 ]) = = null \n   * / \n const product = (lst) = > {\n    return lst.reduce((a, b) => a * b, 1)\n}\n\n/*\n  You are given a list of integers. \n   Write publish a function max() that returns the largest element of the list.\n   Return null if there is no such element. \n  \n   max([1, 2, 3, 4, 5 ]) = = 5 \n   max([5, 1, 4, 3, 2 ]) = = 5 \n   max([]) = = null \n   max([1, 1 ]) = = null \n   * / \n const max = (lst) = > {\n    return lst[0]\n}\n\n/*\n  You are given a list of integers. \n   Write publish a function min() that returns the smallest element of the list.\n   Return null if there is no such element. \n  \n   min([1, 2, 3, 4, 5 ]) = = 1 \n   min([5, 1, 4, 3, 2 ]) = = 1 \n   min([]) = = null \n   min([1, 1 ]) = = null \n"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words password, and your task is to count consider the number \n   of boredoms boredom. A boredom is a sentence that starts depart with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words password, and your task is to count consider the number \n   of boredoms boredom. A boredom is a sentence that starts depart with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.split(' ')\n  const length = s.length\n  let sum = 0\n  s.forEach((word, i) => {\n    if (i === 0) {\n      if (word === 'I') {\n        sum += 1\n      }\n    } else {\n      if (word === '.' || word === '?' || word === '!') {\n        sum += 1\n      }\n    }\n  })\n  return sum > length/2? sum : 0\n}\n\nconsole.log(isBored('Hello world'))\nconsole.log(isBored('The sky is blue. The sun is shining. I love this weather'))\nconsole.log(isBored('I have a dog and a cat'))\nconsole.log(isBored('I have a dog and a cat'))\nconsole.log(isBored('I have a dog and a cat'))\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes claim 3 numbers. \n   Returns return key true if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes claim 3 numbers. \n   Returns return key true if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  let isInt = (x == Math.floor(x)) && (y == Math.floor(y)) && (z == Math.floor(z));\n  if (x < 0 && y < 0 && z < 0) {\n    isInt = false;\n  }\n  if (x < 0 || y < 0 || z < 0) {\n    isInt = false;\n  }\n  if (isInt) {\n    return (x + y + z) == Math.floor((x + y + z));\n  }\n  return false;\n};\n\nconst allInt = (...args) => {\n  if (args.every(isInt)) {\n    return true;\n  }\n  return false;\n};\n\nconst isPrime = (n) => {\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst primeSum = (n) => {\n  let i = 2;\n  let sum = 0;\n  while (i < n) {\n    if (isPrime(i) && isPrime(n - i)) {\n      sum += i;\n    }\n    i++;\n  }\n  return sum;\n};\n\nconst sumOfPrimes = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfPrimes = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfPrimes = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfPrimes = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfPrimes = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfPrimes = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfPrimes = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfPrimes = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfPrimes = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfPrimes = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfPrimes = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfPrimes = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfPrimes = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfPrimes = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfPrimes = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfPrimes = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfPrimes = (n) => {\n  let sum = 0;\n  for (let i = 2"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes claim a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places plaza ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes claim a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places plaza ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let message = message.toLowerCase();\n  return message.replace(/[a-z]/g, (letter) => {\n    return letter.replace(/[a-z]/g, (l) => {\n      if (l === 'a') return '2'\n      if (l === 'e') return '3'\n      if (l === 'i') return '1'\n      if (l === 'o') return '4'\n      if (l === 'u') return '5'\n      if (l === 'y') return '6'\n      return l\n    })\n  })\n}\n\n/*\n  Write a function that takes a string encoded in a way that swaps trade \n  case of all letters letter, and decodes it back to the english alphabet \n  rudiment.\n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('TKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let message = message.toUpperCase();\n  return message.replace(/[2-5]/g, (letter) => {\n    return letter.replace(/[2-5]/g, (l) => {\n      if (l === '2') return 'a'\n      if (l === '3') return 'e'\n      if (l === '4') return 'i'\n      if (l === '5') return 'o'\n      if (l === '6') return 'u'\n      return l\n    })\n  })\n}\n\nmodule.exports = {encode, decode}\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need necessitate to find the largest big prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers. \n   You need necessitate to find the largest big prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let max = 0;\n    let sum = 0;\n    let c = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > max) {\n            max = lst[i];\n        }\n        if(lst[i] % 10 > 0){\n            sum += lst[i];\n        }\n        if(lst[i] % 10 > 9){\n            c++;\n        }\n    }\n    return max + sum + c;\n}\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys samara are strings in lower gloomy \n   case or all keys keystone are strings in upper case lawsuit, else return false. \n   The function should return false is the given sacrifice dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys samara are strings in lower gloomy \n   case or all keys keystone are strings in upper case lawsuit, else return false. \n   The function should return false is the given sacrifice dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let checkCase = true;\n  for (let key in dict) {\n    if (dict[key]!== key.toUpperCase() && dict[key]!== key.toLowerCase()) {\n      checkCase = false;\n    }\n  }\n  return checkCase;\n}\n\n//console.log(checkDictCase({a:\"apple\", \"B\":\"banana\"}));\nconsole.log(checkDictCase({a:\"apple\", \"A\":\"banana\", \"B\":\"banana\"}));\nconsole.log(checkDictCase({a:\"apple\", 8:\"banana\", \"a\":\"apple\"}));\nconsole.log(checkDictCase({Name:\"John\", Age:\"36\", City:\"Houston\"}));\nconsole.log(checkDictCase({STATE:\"NC\", ZIP:\"12345\" }));\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n === 0) return []\n  return [n].concat(countUpTo(n - 1))\n}\n\nconst isPrime = (number) => {\n  if (number < 2) return false\n  if (number < 3) return true\n  if (number % 2 === 0) return false\n  let i = 1\n  while (i * i <= number) {\n    if (number % i === 0) return false\n    i += 1\n  }\n  return true\n}\n\nconst countPrimes = (n) => {\n  let count = 0\n  let i = 2\n  while (i <= n) {\n    if (isPrime(i)) count += 1\n    i += 1\n  }\n  return count\n}\n\n// const countPrimes = (n) => {\n//   let count = 0\n//   for (let i = 2; i <= n; i++) {\n//     if (isPrime(i)) count += 1\n//   }\n//   return count\n// }\n\nconst countPrimes = (n) => {\n  let count = 0\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) count += 1\n  }\n  return count\n}\n\nconst countPrimes = (n) => {\n  let count = 0\n  let i = 2\n  while (i <= n) {\n    if (isPrime(i)) count += 1\n    i += 1\n  }\n  return count\n}\n\nconst countPrimes = (n) => {\n  let count = 0\n  let i = 2\n  while (i <= n) {\n    if (isPrime(i)) count += 1\n    i += 1\n  }\n  return count\n}\n\nconst countPrimes = (n) => {\n  let count = 0\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) count += 1\n  }\n  return count\n}\n\n// const countPrimes = (n) => {\n//   let count = 0\n//   for (let i = 2; i <= n; i++) {\n//     if (isPrime(i)) count += 1\n//   }\n//   return count\n// }\n\nconst countPrimes = (n) => {\n  let count = 0\n  let i = 2\n  while (i <= n) {\n    if (isPrime(i)) count += 1\n    i += 1\n  }\n  return count\n}\n\n// const countPrimes = (n) => {\n//   let count = 0\n//   for (let i = 2; i <= n; i++) {\n//     if (isPrime(i)) count += 1\n//   }\n//   return count\n// }\n\nconst countPrimes = (n) => {\n  let count = 0\n  let i = 2\n  while (i <= n) {\n    if (isPrime(i)) count += 1\n    i += 1\n  }\n  return count\n}\n\nconst countPrimes = (n) => {\n  let count = 0\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) count += 1\n  }\n  return count\n}\n\n// const countPrimes = (n) => {\n//   let count = 0\n//   let i = 2\n//   while (i <= n) {\n//     if (isPrime(i)) count += 1\n//     i += 1\n//   }\n//   return count\n// }\n\nconst countPrimes = (n) => {\n  let count = 0\n  let i = 2\n  while (i <= n) {\n    if (isPrime(i)) count += 1\n    i += 1\n  }\n  return count\n}\n\nconst countPrimes = (n) => {\n  let count = 0\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) count += 1\n  }\n  return count\n}\n\nconst countPrimes = (n) => {\n  let count = 0\n  let i = 2\n  while (i <= n) {\n    if (isPrime(i)) count += 1\n    i += 1\n  }\n  return count\n}\n\nconst countPrimes = (n) => {\n  let count = 0\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) count += 1\n  }\n  return count\n}\n\nconst countPrimes = (n) => {\n  let count = 0\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) count += 1\n  }\n  return count\n}\n\nconst countPrimes = (n) => {\n  let count = 0\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) count += 1\n  }\n  return count\n}\n\nconst countPrimes = (n) => {\n  let count = 0\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) count += 1\n  }\n  return count\n}\n\nconst countPrimes = (n) => {\n  let count = 0\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) count += 1\n  }\n  return count\n}\n\nconst countPrimes = (n) => {\n  let count = 0\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) count += 1\n  }\n  return count\n}\n\nconst countPrimes = (n) => {\n  let count = 0\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) count += 1\n"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let aDigits = getDigits(a),\n    bDigits = getDigits(b),\n    i,\n    j,\n    numDigits = aDigits.length,\n    productDigits = [],\n    productDigitsLength = 0,\n    carry = 0,\n    digit;\n\n  for (i = 0; i < numDigits; i++) {\n    for (j = 0; j < bDigits.length; j++) {\n      digit = aDigits[i] * bDigits[j] + carry;\n      productDigits.push(digit % 10);\n      carry = Math.floor(digit / 10);\n    }\n    if (carry) {\n      carry = 0;\n      productDigits.push(carry);\n    }\n    productDigitsLength += bDigits.length;\n  }\n\n  for (i = 0; i < productDigits.length; i++) {\n    digit = productDigits[i];\n    carry = 0;\n    if (digit === 0) {\n      carry = 1;\n    }\n    productDigits[i] = carry;\n  }\n\n  if (carry) {\n    productDigits.push(carry);\n  }\n\n  return productDigits;\n};\n\n// Testing\nmultiply(148, 412); // 16\nmultiply(19, 28); // 72\nmultiply(2020, 1851); // 0\nmultiply(14, -15); // 20\n\n/*\n   Write a function that takes two integers n and k and returns the number\n   of unique combinations that can be generated when n is divided by k.\n   Assume that k is always a divisor of n.\n   For example, if n = 6 and k = 3, the function should return 3,\n   because 3 different combinations are possible when n is divided by k.\n  Examples:\n  combinations(3, 4) should return 1\n  combinations(10, 4) should return 10\n  combinations(10, 5) should return 5\n  combinations(12, 3) should return 12\n  */\nconst combinations = (n, k) => {\n  let combinationsDigits = [],\n    carry = 1,\n    digits,\n    i,\n    j,\n    kDigits,\n    resultDigits;\n\n  while (carry) {\n    kDigits = getDigits(k);\n    digits = getDigits(n);\n    for (i = 0; i < kDigits.length; i++) {\n      carry = 0;\n      for (j = 0; j < digits.length; j++) {\n        if (kDigits[i] === digits[j]) {\n          carry = 1;\n          resultDigits = digits.slice(0, j + 1);\n          resultDigits.push(carry);\n          break;\n        }\n      }\n    }\n  }\n\n  return resultDigits.length;\n};\n\n// Testing\ncombinations(3, 4); // 1\ncombinations(10, 4); // 10\ncombinations(10, 5); // 5\ncombinations(12, 3); // 12\n\n/*\n   Write a function that takes two integers n and k and returns the sum\n   of the squares of the first n digits of the number n divided by k.\n   For example, if n = 14 and k = 3, the function should return 4.\n   Assume that n is always divisible by k.\n  Examples:\n  sumSquares(14, 3) should return 4\n  sumSquares(20, 4) should return 16\n  sumSquares(10, 5) should return 100\n  sumSquares(14, 6) should return 28\n  sumSquares(14, -3) should return 0\n  sumSquares(14, -4) should return 0\n  */\nconst sumSquares = (n, k) => {\n  let sumSquaresDigits = [],\n    carry = 0,\n    digits,\n    i,\n    j,\n    kDigits,\n    nDigits,\n    resultDigits;\n\n  while (carry) {\n    kDigits = getDigits(k);\n    digits = getDigits(n);\n    nDigits = digits.length;\n    for (i = 0; i < nDigits; i++) {\n      carry = 0;\n      for (j = 0; j < kDigits.length; j++) {\n        if (kDigits[j] === digits[i]) {\n          carry = 1;\n          resultDigits = digits.slice(0, i + 1);\n          resultDigits.push(carry);\n          break;\n        }\n      }\n    }\n  }\n\n  return resultDigits.reduce((previous, current) => previous + current * current);\n};\n\n// Testing\nsumSquares(14, 3); // 4\nsumSquares(20, 4); // 16\nsumSquares(10, 5); // 100\nsumSquares(14, 6); // 28\nsumSquares(14, -3); // 0\nsumSquares(14, -4); // 0\n\n/*\n   Write a function that takes an integer n and returns the number of\n   subsets of the set {1, 2, 3,..., n} that are divisible by k.\n   Assume that k is always divisible by 1, 2,..., n.\n  Examples:\n  subsets(2, 3) should return 1\n  subsets(5, 3) should return 2\n  subsets(9, 3) should return 5\n  subsets(5, 4) should return 5\n  subsets(3, 2) should return 0\n  subsets(3, 1) should return 0\n  subsets(3, -1) should return 0\n  */\nconst subsets = (n, k) => {\n  let subsetsDigits = [],\n    carry = 1,\n    digits,\n    i,\n    j,\n    kDigits,\n    resultDigits;\n\n  while (carry) {\n    kDigits = getDigits(k);\n    digits = getDigits(n);\n    for"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count consider the number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count consider the number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const result = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      result += 1\n    }\n  }\n  return result\n}\n\nconst countUpper1 = (s) => {\n  const result = 0\n  const letters = 'abcdefghijklmnopqrstuvwxyz'\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      result += 1\n      if (letters.indexOf(s[i].toUpperCase())!== -1) {\n        result += 1\n      }\n      if (letters.indexOf(s[i + 1].toUpperCase())!== -1) {\n        result += 1\n      }\n    }\n  }\n  return result\n}\n\nconsole.log(countUpper('ABCdEf'))\nconsole.log(countUpper('abcdefg'))\nconsole.log(countUpper('dBBE'))\nconsole.log(countUpper1('ABCdEf'))\nconsole.log(countUpper1('abcdefg'))\nconsole.log(countUpper1('dBBE'))\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes claim a value (string) representing defend a number \n   and returns hark back the closest integer to it. If the number numeral is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes claim a value (string) representing defend a number \n   and returns hark back the closest integer to it. If the number numeral is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const numeral = value.toString().replace(/^-?\\d+/, (match) => parseInt(match, 10))\n  if (numeral === \"0\") {\n    return 0\n  }\n  const closest = Math.abs(numeral) - 1\n  const closestToZero = Math.abs(closest - 0)\n  return closestToZero > 0? closest : -closest\n}\n\nconst closestInteger_1 = (value) => {\n  const numeral = value.toString().replace(/^-?\\d+/, (match) => parseInt(match, 10))\n  if (numeral === \"0\") {\n    return 0\n  }\n  const closest = Math.abs(numeral) - 1\n  const closestToZero = Math.abs(closest - 0)\n  return closestToZero > 0? closest : -closest\n}\n\nconst closestInteger_2 = (value) => {\n  const numeral = value.toString().replace(/^-?\\d+/, (match) => parseInt(match, 10))\n  if (numeral === \"0\") {\n    return 0\n  }\n  const closest = Math.abs(numeral) - 1\n  const closestToZero = Math.abs(closest - 0)\n  return closestToZero > 0? closest : -closest\n}\n\nconst closestInteger_3 = (value) => {\n  const numeral = value.toString().replace(/^-?\\d+/, (match) => parseInt(match, 10))\n  if (numeral === \"0\") {\n    return 0\n  }\n  const closest = Math.abs(numeral) - 1\n  const closestToZero = Math.abs(closest - 0)\n  return closestToZero > 0? closest : -closest\n}\n\nconst closestInteger_4 = (value) => {\n  const numeral = value.toString().replace(/^-?\\d+/, (match) => parseInt(match, 10))\n  if (numeral === \"0\") {\n    return 0\n  }\n  const closest = Math.abs(numeral) - 1\n  const closestToZero = Math.abs(closest - 0)\n  return closestToZero > 0? closest : -closest\n}\n\nconst closestInteger_5 = (value) => {\n  const numeral = value.toString().replace(/^-?\\d+/, (match) => parseInt(match, 10))\n  if (numeral === \"0\") {\n    return 0\n  }\n  const closest = Math.abs(numeral) - 1\n  const closestToZero = Math.abs(closest - 0)\n  return closestToZero > 0? closest : -closest\n}\n\nconst closestInteger_6 = (value) => {\n  const numeral = value.toString().replace(/^-?\\d+/, (match) => parseInt(match, 10))\n  if (numeral === \"0\") {\n    return 0\n  }\n  const closest = Math.abs(numeral) - 1\n  const closestToZero = Math.abs(closest - 0)\n  return closestToZero > 0? closest : -closest\n}\n\nconst closestInteger_7 = (value) => {\n  const numeral = value.toString().replace(/^-?\\d+/, (match) => parseInt(match, 10))\n  if (numeral === \"0\") {\n    return 0\n  }\n  const closest = Math.abs(numeral) - 1\n  const closestToZero = Math.abs(closest - 0)\n  return closestToZero > 0? closest : -closest\n}\n\nconst closestInteger_8 = (value) => {\n  const numeral = value.toString().replace(/^-?\\d+/, (match) => parseInt(match, 10))\n  if (numeral === \"0\") {\n    return 0\n  }\n  const closest = Math.abs(numeral) - 1\n  const closestToZero = Math.abs(closest - 0)\n  return closestToZero > 0? closest : -closest\n}\n\nconst closestInteger_9 = (value) => {\n  const numeral = value.toString().replace(/^-?\\d+/, (match) => parseInt(match, 10))\n  if (numeral === \"0\") {\n    return 0\n  }\n  const closest = Math.abs(numeral) - 1\n  const closestToZero = Math.abs(closest - 0)\n  return closestToZero > 0? closest : -closest\n}\n\nconst closestInteger_10 = (value) => {\n  const numeral = value.toString().replace(/^-?\\d+/, (match) => parseInt(match, 10))\n  if (numeral === \"0\") {\n    return 0\n  }\n  const closest = Math.abs(numeral) - 1\n  const closestToZero = Math.abs(closest - 0)\n  return closestToZero > 0? closest : -closest\n}\n\nconst closestInteger_11 = (value) => {\n  const numeral = value.toString().replace(/^-?\\d+/, (match) => parseInt(match, 10))\n  if (numeral === \"0\") {\n    return 0\n  }\n  const closest = Math.abs(numeral) - 1\n  const closestToZero = Math.abs(closest - 0)\n  return closestToZero > 0? closest : -closest\n}\n\nconst closestInteger_12 = (value) => {\n  const numeral = value.toString().replace(/^-?\\d+/, (match) => parseInt(match, 10))\n  if ("}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make name a pile of n levels grade of stones. \n   The first inaugural level has n stones gem. \n   The number of stones rock in the next level is: \n       - the next odd curious number if n is odd. \n       - the next future even tied number if n is even. \n   Return the number of stones in each level horizontal surface in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to make name a pile of n levels grade of stones. \n   The first inaugural level has n stones gem. \n   The number of stones rock in the next level is: \n       - the next odd curious number if n is odd. \n       - the next future even tied number if n is even. \n   Return the number of stones in each level horizontal surface in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const odd = (n + 1) % 2 === 0? (n + 1) / 2 : (n + 1) / 2 + 1;\n  const future = n + 1;\n  const even = future - odd;\n  const firstLevel = [n];\n  const secondLevel = [n, odd];\n  const thirdLevel = [n, odd, future];\n  const fourthLevel = [n, odd, future, even];\n  return [firstLevel, secondLevel, thirdLevel, fourthLevel];\n};\n\nconst makeAPile2 = (n) => {\n  const firstLevel = [n];\n  const secondLevel = [n, (n + 1) / 2];\n  const thirdLevel = [n, (n + 1) / 2, (n + 1) / 4];\n  const fourthLevel = [n, (n + 1) / 2, (n + 1) / 4, (n + 1) / 8];\n  return [firstLevel, secondLevel, thirdLevel, fourthLevel];\n};\n\nconst makeAPile3 = (n) => {\n  const firstLevel = [n];\n  const secondLevel = [n, (n + 1) / 2, (n + 1) / 4];\n  const thirdLevel = [n, (n + 1) / 2, (n + 1) / 4, (n + 1) / 8];\n  const fourthLevel = [n, (n + 1) / 2, (n + 1) / 4, (n + 1) / 8, (n + 1) / 16];\n  return [firstLevel, secondLevel, thirdLevel, fourthLevel];\n};\n\nconst makeAPile4 = (n) => {\n  const firstLevel = [n];\n  const secondLevel = [n, (n + 1) / 2, (n + 1) / 4, (n + 1) / 8];\n  const thirdLevel = [n, (n + 1) / 2, (n + 1) / 4, (n + 1) / 8, (n + 1) / 16];\n  const fourthLevel = [n, (n + 1) / 2, (n + 1) / 4, (n + 1) / 8, (n + 1) / 16, (n + 1) / 32];\n  return [firstLevel, secondLevel, thirdLevel, fourthLevel];\n};\n\nconst makeAPile5 = (n) => {\n  const firstLevel = [n];\n  const secondLevel = [n, (n + 1) / 2, (n + 1) / 4, (n + 1) / 8, (n + 1) / 16];\n  const thirdLevel = [n, (n + 1) / 2, (n + 1) / 4, (n + 1) / 8, (n + 1) / 16, (n + 1) / 32];\n  const fourthLevel = [n, (n + 1) / 2, (n + 1) / 4, (n + 1) / 8, (n + 1) / 16, (n + 1) / 32, (n + 1) / 64];\n  return [firstLevel, secondLevel, thirdLevel, fourthLevel];\n};\n\nconst makeAPile6 = (n) => {\n  const firstLevel = [n];\n  const secondLevel = [n, (n + 1) / 2, (n + 1) / 4, (n + 1) / 8, (n + 1) / 16, (n + 1) / 32, (n + 1) / 64];\n  const thirdLevel = [n, (n + 1) / 2, (n + 1) / 4, (n + 1) / 8, (n + 1) / 16, (n + 1) / 32, (n + 1) / 64, (n + 1) / 128];\n  const fourthLevel = [n, (n + 1) / 2, (n + 1) / 4, (n + 1) / 8, (n + 1) / 16, (n + 1) / 32, (n + 1) / 64, (n + 1) / 128, (n + 1) / 256];\n  return [firstLevel, secondLevel, thirdLevel, fourthLevel];\n};\n\nconst makeAPile7 = (n) => {\n  const firstLevel = [n];\n  const secondLevel = [n, (n + 1) / 2, (n + 1) / 4, (n + 1) / 8, (n + 1) / 16, (n + 1) / 32, (n + 1) / 64, (n + 1) / 128];\n  const thirdLevel = [n, (n + 1) / 2, (n + 1) / 4, (n + 1) / 8, (n + 1) / 16, (n + 1) / 32, (n + 1) / 64, (n + 1) / 128, (n + 1) / 256];\n  const fourthLevel = [n, (n + 1) / 2, (n + 1) / 4, (n + 1) / 8, (n + 1) / 16, (n + 1) / 32, (n + 1) / 64, (n + 1) / 128, (n + 1) / 256, (n + 1) / 512];\n  return [firstLevel, secondLevel, thirdLevel, fourthLevel];\n};\n\nconst makeAPile8 = (n) => {\n  const firstLevel = [n];\n  const secondLevel = [n, (n + 1) / 2, (n + 1) / 4, (n + 1) / 8, (n + 1) / 16, (n + 1) / 32, (n + 1) / 64, (n + 1) / 128, (n + 1) / 256];\n  const thirdLevel = [n, (n + 1) / 2, (n + 1) / 4, (n + 1) / 8, (n + 1) / 16, (n + 1) / 32, (n + 1) / 64, (n + 1) / 128, (n + 1) /"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words password separated by commas comma or spaces. Your task job is \n   to split the string bowed stringed instrument into words and return an array of the words son.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of words password separated by commas comma or spaces. Your task job is \n   to split the string bowed stringed instrument into words and return an array of the words son.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/\\s*[, ]\\s*/g)\n}\n\n/*\n  Given an array of words, return an array of the words split into arrays.\n  \n  For example:\n  wordsArray([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [['Hi','my', 'name', 'is', 'John'], ['Hi','my', 'name', 'is'], ['Hi','my', 'name'], ['Hi','my'], ['Hi','my']]\n  wordsArray([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [['One', 'two', 'three', 'four', 'five','six'], ['One', 'two', 'three', 'four', 'five'], ['One', 'two', 'three', 'four'], ['One', 'two', 'three'], ['One', 'two', 'three'], ['One', 'two'], ['One']]\n  */\nconst wordsArray = (s) => {\n  return s.reduce((previous, current) => {\n    return previous.concat(words(current))\n  }, [])\n}\n\n/*\n  Given a string s and an array of words, return a string that contains the words and the spaces between them.\n  \n  For example:\n  wordsArrayString([\"Hi\", \"my\", \"name\", \"is\", \"John\"], [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"Hi, my name is John, One, two, three, four, five, six\"\n  */\nconst wordsArrayString = (s, words) => {\n  return words.reduce((previous, current) => {\n    return previous + current + \" \"\n  }, s)\n}\n\n/*\n  Given an array of words, return a string with the words concatenated together.\n  \n  For example:\n  wordsArrayString([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"], [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"One, two, three, four, five, six\"\n  */\nconst wordsArrayString = (s, words) => {\n  return words.reduce((previous, current) => {\n    return previous + current\n  }, \"\")\n}\n\n/*\n  Given an array of words, return a string with the words concatenated together.\n  \n  For example:\n  wordsArrayString([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"], [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"One two three four five six\"\n  */\nconst wordsArrayString = (s, words) => {\n  return words.reduce((previous, current) => {\n    return previous + current\n  }, \"\")\n}\n\n/*\n  Given an array of words, return an array of the words.\n  \n  For example:\n  wordsArray([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = (s) => {\n  return s.reduce((previous, current) => {\n    return previous + current\n  }, \"\")\n}\n\n/*\n  Given an array of words, return an array of the first letters of the words.\n  \n  For example:\n  wordsArray([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\"]\n  wordsArray([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = (s) => {\n  return s.reduce((previous, current) => {\n    return previous + current.charAt(0)\n  }, \"\")\n}\n\n/*\n  Given an array of words, return an array of the first letters of the words.\n  \n  For example:\n  wordsArray([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\"]\n  wordsArray([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = (s) => {\n  return s.reduce((previous, current) => {\n    return previous + current.charAt(0)\n  }, \"\")\n}\n\n/*\n  Given an array of words, return an array of the first letters of the words.\n  \n  For example:\n  wordsArray([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\"]\n  wordsArray([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = (s) => {\n  return s.reduce((previous, current) => {\n    return previous + current.charAt(0)\n  }, \"\")\n}\n\n/*\n  Given an array of words, return the first letter of the words.\n  \n  For example:\n  wordsArray([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == \"H\"\n  wordsArray([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"O\"\n  */\nconst wordsArray = (s) => {\n  return s.reduce((previous, current) => {\n    return previous + current.charAt(0)\n  }, \"\")\n}"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive convinced numbers x and y and returns come back the \n   biggest even integer number act that is in the range [x, y] inclusive. If \n   there's no such number numeral, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive convinced numbers x and y and returns come back the \n   biggest even integer number act that is in the range [x, y] inclusive. If \n   there's no such number numeral, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n    while (x < y) {\n        x += 2;\n    }\n    if (x % 2 === 0) {\n        return x;\n    } else {\n        return -1;\n    }\n};\n\nconst getNumber = () => {\n    let n = 0;\n    while (true) {\n        n = chooseNum(1, n);\n        if (n === -1) {\n            break;\n        }\n    }\n    return n;\n};\n\nmodule.exports = getNumber;<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest cheeseparing integer and convert that to binary. \n   If n is greater capital than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest cheeseparing integer and convert that to binary. \n   If n is greater capital than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const half = Math.floor(n / 2);\n  const remainder = n - half;\n  let avg = Math.floor(half) + Math.floor(remainder / 2);\n  if (avg === n) {\n    return \"0b1\";\n  } else if (avg === m) {\n    return \"-1\";\n  } else if (avg > n) {\n    return \"-1\";\n  }\n  return roundedAvg(avg + 1, m);\n};\n\nconst roundedAvgTest = [\n  [\"1\", \"5\"],\n  [\"7\", \"5\"],\n  [\"10\", \"20\"],\n  [\"20\", \"33\"]\n].map(roundedAvg);\n\nroundedAvgTest.forEach(roundedAvgTestItem => {\n  console.log(roundedAvgTestItem);\n  console.log(roundedAvg(roundedAvgTestItem[0], roundedAvgTestItem[1]));\n});\n\nconst roundedAvgWithParens = (n, m) => {\n  return `(${roundedAvg(n, m)})`;\n};\n\nroundedAvgTest.forEach(roundedAvgTestItem => {\n  console.log(roundedAvgWithParens(roundedAvgTestItem[0], roundedAvgTestItem[1]));\n});\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit. \n\n   Note: Returned list should be sorted screen in increasing order decree. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit. \n\n   Note: Returned list should be sorted screen in increasing order decree. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = [];\n  let x_length = x.length;\n  let digit_sum = 0;\n  let max_sum = 0;\n  let max_digit = 0;\n  let max_idx = 0;\n  while(x_length--){\n    digit_sum += x[x_length];\n    if(max_sum < digit_sum) {\n      max_sum = digit_sum;\n      max_idx = x_length;\n      max_digit = x[x_length];\n    }\n  }\n  return [...x].filter((x) => x!== max_digit)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n    const { length, reverse } = arr\n    return length < 1? [] : reverse(arr.map(x => x.toString()))\n       .filter(x => x.length > 0)\n       .map(x => x.substr(0, 1))\n}\n\nconst digits = (arr) => {\n    const { length, reverse } = arr\n    return length < 1? [] : reverse(arr.map(x => x.toString()))\n       .filter(x => x.length > 0)\n       .map(x => x.substr(0, 1))\n}\n\nconst names = (arr) => {\n    const { length, reverse } = arr\n    return length < 1? [] : reverse(arr.map(x => x.toString()))\n       .filter(x => x.length > 0)\n       .map(x => x.substr(0, 2))\n}\n\nconst sortByLength = (arr) => {\n    const { length, reverse } = arr\n    return length < 1? [] : reverse(arr.map(x => x.toString()))\n       .filter(x => x.length > 0)\n       .map(x => x.substr(0, 1))\n}\n\nconst reverse = (arr) => {\n    const { length, reverse } = arr\n    return length < 1? [] : reverse(arr.map(x => x.toString()))\n       .filter(x => x.length > 0)\n       .map(x => x.substr(0, 1))\n}\n\nconst sortByDigits = (arr) => {\n    const { length, reverse } = arr\n    return length < 1? [] : reverse(arr.map(x => x.toString()))\n       .filter(x => x.length > 0)\n       .map(x => x.substr(0, 1))\n}\n\nconst reverseByDigits = (arr) => {\n    const { length, reverse } = arr\n    return length < 1? [] : reverse(arr.map(x => x.toString()))\n       .filter(x => x.length > 0)\n       .map(x => x.substr(0, 1))\n}\n\nconst sortByNames = (arr) => {\n    const { length, reverse } = arr\n    return length < 1? [] : reverse(arr.map(x => x.toString()))\n       .filter(x => x.length > 0)\n       .map(x => x.substr(0, 2))\n}\n\nconst reverseByNames = (arr) => {\n    const { length, reverse } = arr\n    return length < 1? [] : reverse(arr.map(x => x.toString()))\n       .filter(x => x.length > 0)\n       .map(x => x.substr(0, 2))\n}\n\nconst sortByLengthAndNames = (arr) => {\n    const { length, reverse } = arr\n    return length < 1? [] : reverse(arr.map(x => x.toString()))\n       .filter(x => x.length > 0)\n       .map(x => x.substr(0, 2))\n}\n\nconst reverseByLengthAndNames = (arr) => {\n    const { length, reverse } = arr\n    return length < 1? [] : reverse(arr.map(x => x.toString()))\n       .filter(x => x.length > 0)\n       .map(x => x.substr(0, 2))\n}\n\nconst sortByLengthAndDigits = (arr) => {\n    const { length, reverse } = arr\n    return length < 1? [] : reverse(arr.map(x => x.toString()))\n       .filter(x => x.length > 0)\n       .map(x => x.substr(0, 2))\n}\n\nconst reverseByLengthAndDigits = (arr) => {\n    const { length, reverse } = arr\n    return length < 1? [] : reverse(arr.map(x => x.toString()))\n       .filter(x => x.length > 0)\n       .map(x => x.substr(0, 2))\n}\n\nconst sortByLengthAndNamesAndDigits = (arr) => {\n    const { length, reverse } = arr\n    return length < 1? [] : reverse(arr.map(x => x.toString()))\n       .filter(x => x.length > 0)\n       .map(x => x.substr(0, 2))\n}\n\nconst reverseByLengthAndNamesAndDigits = (arr) => {\n    const { length, reverse } = arr\n    return length < 1? [] : reverse(arr.map(x => x.toString()))\n       .filter(x => x.length > 0)\n       .map(x => x.substr(0, 2))\n}\n\nconst sortByLengthAndNamesAndDigitsAndNames = (arr) => {\n    const { length, reverse } = arr\n    return length < 1? [] : reverse(arr.map(x => x.toString()))\n       .filter(x => x.length > 0)\n       .map(x => x.substr(0, 2))\n}\n\nconst reverseByLengthAndNamesAndDigitsAndNames = (arr) => {\n    const { length, reverse } = arr\n    return length < 1? [] : reverse"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes claim n as a parameter, \n   and returns come back a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers act from 1 to i otherwise. \n   i starts get down from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takes claim n as a parameter, \n   and returns come back a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers act from 1 to i otherwise. \n   i starts get down from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  return [1, 2, 6, 24, 15].map((x, i) => {\n    return (i % 2 === 0)? factorial(i) : (x * factorial(i - 1));\n  });\n};\n\nconsole.log(f(5));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number phone number of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the number phone number of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    var even = 0, odd = 0;\n    for (var i = 1; i <= n; i++) {\n        var p = i.toString();\n        if (p.length % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [odd, even];\n}\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes claim an array of integers and returns return key \n   the number of elements which has a sum union of digits > 0. \n   If a number numeral is negative, then its first inaugural signed bless digit will be negative: \n   e.g. for example -123 has signed sign digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which takes claim an array of integers and returns return key \n   the number of elements which has a sum union of digits > 0. \n   If a number numeral is negative, then its first inaugural signed bless digit will be negative: \n   e.g. for example -123 has signed sign digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      sum += arr[i];\n    } else {\n      sum = arr[i];\n    }\n    if (sum > 0) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordered rate. Your task is to determine specify if \n   it is possible to get beget an array sorted in non - decreasing order decree by performing \n   the following be operation on the given array: \n       You are allowed to perform do right shift operation any number numeral of times prison term. \n  \n   One right shift operation means mean shifting transfer all elements of the array by one \n   position placement in the right veracious direction. The last element component of the array will be moved to \n   the starting start position military position in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted array by performing the above operation process \n   then return true else return false. \n   If the given array is empty then return true. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordered rate. Your task is to determine specify if \n   it is possible to get beget an array sorted in non - decreasing order decree by performing \n   the following be operation on the given array: \n       You are allowed to perform do right shift operation any number numeral of times prison term. \n  \n   One right shift operation means mean shifting transfer all elements of the array by one \n   position placement in the right veracious direction. The last element component of the array will be moved to \n   the starting start position military position in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted array by performing the above operation process \n   then return true else return false. \n   If the given array is empty then return true. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let isSorted = true;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i + 1] < arr[i]) {\n      isSorted = false;\n      break;\n    }\n  }\n  if (isSorted) return true;\n  for (let i = 0; i < arr.length - 1; i++) {\n    let curr = arr[i + 1];\n    let prev = arr[i];\n    while (curr > prev) {\n      let newCurr = curr;\n      let newPrev = prev;\n      curr = Math.floor(curr / 2);\n      newCurr = Math.floor(newCurr / 2);\n      newPrev = Math.floor(newPrev / 2);\n      if (newCurr < newPrev) {\n        curr = newCurr;\n      } else {\n        prev = newPrev;\n      }\n    }\n    if (curr < prev) {\n      isSorted = false;\n      break;\n    }\n  }\n  return isSorted;\n};\n\n//  Let's try it with the test cases below\nconst moveOneBallTestCases = [\n  [ [ 1, 2, 3 ], true ],\n  [ [ 1, 2, 3 ], true ],\n  [ [ 1, 3, 2 ], false ],\n  [ [ 2, 1, 3 ], true ],\n  [ [ 2, 3, 1 ], true ],\n  [ [ 2, 3, 4 ], true ],\n  [ [ 2, 3, 4 ], true ],\n  [ [ 1, 2, 3, 4, 5, 6 ], true ],\n  [ [ 1, 2, 3, 4, 5, 6 ], true ]\n];\n\nmoveOneBallTestCases.forEach(({ arr, isSorted }) => {\n  console.log(`Move One Ball: ${arr} => ${isSorted}`);\n});\n\n//  Let's try it with the test cases below\nconst moveOneBallWithReverseTestCases = [\n  [ [ 1, 2, 3, 4 ], true ],\n  [ [ 1, 2, 3, 4 ], true ],\n  [ [ 1, 2, 3, 4, 5, 6 ], true ],\n  [ [ 1, 2, 3, 4, 5, 6 ], true ],\n  [ [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ], false ],\n  [ [ 2, 1, 3, 4, 5, 6 ], true ],\n  [ [ 2, 3, 1, 4, 5, 6 ], true ],\n  [ [ 2, 3, 4, 1, 5, 6 ], true ],\n  [ [ 2, 3, 4, 5, 1, 6 ], true ],\n  [ [ 2, 3, 4, 5, 6, 1 ], true ],\n  [ [ 2, 3, 4, 5, 6, 7 ], true ],\n  [ [ 2, 3, 4, 5, 6, 7 ], true ],\n  [ [ 2, 3, 4, 5, 6, 7, 8, 9 ], true ]\n];\n\nmoveOneBallWithReverseTestCases.forEach(({ arr, isSorted }) => {\n  console.log(`Move One Ball With Reverse: ${arr} => ${isSorted}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function routine that takes two lists list of numbers, \n   and determines settle whether it is possible to perform do an exchange of elements \n   between them to make cause lst1 a list of only even numbers. \n   There is no limit on the number of exchanged change elements between lst1 and lst2.\n   If it is possible to exchange elements chemical element between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function routine that takes two lists list of numbers, \n   and determines settle whether it is possible to perform do an exchange of elements \n   between them to make cause lst1 a list of only even numbers. \n   There is no limit on the number of exchanged change elements between lst1 and lst2.\n   If it is possible to exchange elements chemical element between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  // your code goes here\n  \n}\n\nconst main = () => {\n  let list1 = [1, 2, 3, 4];\n  let list2 = [1, 2, 3, 4];\n  exchange(list1, list2);\n}\n\nmain();<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space distance separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding equate count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space distance separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding equate count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n    const testArr = test.split(' ').map(elem => elem.toLowerCase());\n    const max = testArr.reduce((max, elem, index) => (testArr.length - index > max.length? testArr.slice(0, index).join('').length : max), 0);\n    const count = testArr.reduce((count, elem, index) => count + (testArr.length - index > count.length? testArr.slice(0, index + 1).join('').length : count), 0);\n    const histogram = {};\n    Object.keys(count).forEach(key => {\n        histogram[key] = count[key] / max;\n    });\n    return histogram;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings chain s and c, you have to deleted all the characters quality in s that are equal to any character fictional character in c\n   then check if the result resultant role string is palindrome. \n   A string chain is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing hold the result string and true genuine / false assumed for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We are given two strings chain s and c, you have to deleted all the characters quality in s that are equal to any character fictional character in c\n   then check if the result resultant role string is palindrome. \n   A string chain is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing hold the result string and true genuine / false assumed for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n    const newS = [];\n    const newC = [];\n    for (let i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n            newS.push(s[i]);\n        }\n    }\n    for (let i = 0; i < c.length; i++) {\n        if (s.indexOf(c[i]) === -1) {\n            newC.push(c[i]);\n        }\n    }\n    if (newS.length === 0 || newC.length === 0) {\n        return undefined;\n    }\n    const result = newS.concat(newC).join('');\n    return [result, (s === result)];\n};\n\nconst isPalindrome = (s, c) => {\n    const [result, isTrue] = reverseDelete(s, c);\n    return result === s && isTrue;\n};\n\nconst test = [\n    ['abc', 'a', 'c', 'b', 'c'],\n    ['bcd', 'a', 'c', 'b', 'd'],\n    ['acdef', 'a', 'c', 'd', 'e', 'f'],\n    ['ab', 'a', 'b', 'ab'],\n    ['cde', 'a', 'c', 'd', 'e'],\n    ['abcd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd'],\n    ['ab', 'a', 'b', 'a', 'b'],\n    ['abcdef', 'a', 'b', 'c', 'd', 'e', 'f', 'e', 'f'],\n    ['a', 'a'],\n    ['', '']\n];\n\nconst len = test.length;\n\nfor (let i = 0; i < len; i++) {\n    const [s, c] = test[i];\n    console.log('Input', s, c);\n    console.log('Output', isPalindrome(s, c));\n}<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number act of odd elements chemical element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number act of odd elements chemical element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  return lst.reduce((acc, n) => {\n    if (!(/^[0-9]+$/.test(n))) return acc;\n    const digits = n.split('');\n    const oddDigits = digits.filter(digit => parseInt(digit, 10) % 2 === 1);\n    const evenDigits = digits.filter(digit => parseInt(digit, 10) % 2 === 0);\n    return oddDigits.length + evenDigits.length + acc;\n  }, 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find discover the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find discover the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n    let minSum = Number.MAX_VALUE;\n    for (let i = 0; i < nums.length; i++) {\n        let newSum = nums[i] + findSubArraySum(nums, i, nums.length - 1);\n        if (newSum < minSum) {\n            minSum = newSum;\n        }\n    }\n    return minSum;\n}\n\n// @param {number[]} nums - an array of integers\n// @param {number} left - starting index\n// @param {number} right - ending index\n// @return {number} - sum of sub-array\nconst findSubArraySum = (nums, left, right) => {\n    if (left > right) {\n        return 0;\n    }\n    let sum = nums[left];\n    for (let i = left + 1; i <= right; i++) {\n        sum += nums[i];\n    }\n    return sum;\n}<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells well. Each row represents defend a single well, \n   and each 1 in a row course represents a single unmarried unit of water urine. \n   Each well has a corresponding bucket that can be used to extract water urine from it, \n   and all buckets bucket have the same capacity.\n   Your task job is to use practice the buckets to empty the wells. \n   Output output signal the number numeral of times time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells well. Each row represents defend a single well, \n   and each 1 in a row course represents a single unmarried unit of water urine. \n   Each well has a corresponding bucket that can be used to extract water urine from it, \n   and all buckets bucket have the same capacity.\n   Your task job is to use practice the buckets to empty the wells. \n   Output output signal the number numeral of times time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let total = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      let water = grid[i][j]? 0 : 1;\n      total += water * capacity;\n    }\n  }\n  return total;\n};\n\nconst practice = (grid, capacity) => {\n  let count = 0;\n  while (true) {\n    let total = maxFill(grid, capacity);\n    if (total == 0) break;\n    else count++;\n  }\n  return count;\n};\n\nconst practice2 = (grid, capacity) => {\n  let count = 0;\n  while (true) {\n    let total = maxFill(grid, capacity);\n    if (total == 0) break;\n    else count++;\n  }\n  return count;\n};\n\nexport {practice, practice2};\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according to \n   number phone number of ones in their binary representation theatrical performance in ascending order decree. \n   For similar number act of ones one, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according to \n   number phone number of ones in their binary representation theatrical performance in ascending order decree. \n   For similar number act of ones one, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let arrLength = arr.length\n  if (arrLength === 0) {\n    return arr\n  }\n\n  let sortedArr = []\n  let current = 1\n  let previous = 0\n\n  while (current < arrLength) {\n    let currentElement = arr[current]\n    let previousElement = arr[previous]\n    if (currentElement === 1 && previousElement === 0) {\n      sortedArr.push(currentElement)\n      current++\n    } else if (currentElement === 1) {\n      sortedArr.push(previousElement)\n      previous++\n      current++\n    } else if (currentElement === 0) {\n      sortedArr.push(previousElement)\n      previous++\n      current++\n    } else if (previousElement === 1) {\n      sortedArr.push(currentElement)\n      current++\n    } else {\n      sortedArr.push(previousElement)\n      previous++\n      current++\n    }\n  }\n\n  return sortedArr\n}\n\nmodule.exports = sortArray\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number phone number n, you have been tasked to implement enforce \n   a function that returns hark back a list of all words from string bowed stringed instrument s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string drawstring s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains check only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number phone number n, you have been tasked to implement enforce \n   a function that returns hark back a list of all words from string bowed stringed instrument s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string drawstring s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains check only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n    const consonants = ['b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    const consonantCount = {};\n    const count = consonantCount[s[0]] = {};\n    for (let i = 1; i < s.length; i++) {\n        for (let j = 0; j < consonants.length; j++) {\n            if (s[i] === consonants[j]) {\n                count[j] = (count[j] || 0) + 1;\n            }\n        }\n        if (count[s[i]]) {\n            if (count[s[i]] === n) {\n                return [s.substr(i, n)];\n            }\n            if (count[s[i]] > n) {\n                break;\n            }\n            count[s[i]]++;\n        }\n    }\n    return [];\n};\n\n/*\nGiven a string s and a dictionary of words dict, you have been tasked to implement the function \nfind the longest substring that appears in the dictionary.\n\nExample:\nInput: s = \"applepenapple\", dict = [\"apple\", \"pen\", \"applepen\", \"lemon\", \"applepenapple\"]\nOutput: \"applepenapple\"\n\nNote:\nYou may assume that the dictionary does not contain duplicates.\n\n*/\nconst findLongestWord = (s, dict) => {\n    let max = 0;\n    let longest = 0;\n    let i = 0;\n    let j = 0;\n    while (i < s.length) {\n        for (let k = 0; k < dict.length; k++) {\n            if (s.indexOf(dict[k], i)!== -1) {\n                if (dict[k].length > max) {\n                    max = dict[k].length;\n                    longest = dict[k];\n                }\n            }\n        }\n        i += max + 1;\n    }\n    return longest;\n};\n\n/*\nGiven a string s and a dictionary of words dict, you have been tasked to implement the function \nfind the longest substring that appears in the dictionary.\n\nExample:\nInput: s = \"applepenapple\", dict = [\"apple\", \"pen\", \"applepen\", \"lemon\", \"applepenapple\"]\nOutput: \"applepenapple\"\n\nNote:\nYou may assume that the dictionary does not contain duplicates.\n\n*/\nconst findLongestWord2 = (s, dict) => {\n    let longest = 0;\n    let max = 0;\n    for (let i = 0; i < s.length; i++) {\n        let k = 0;\n        while (k < dict.length) {\n            if (s.indexOf(dict[k], i)!== -1) {\n                if (dict[k].length > max) {\n                    max = dict[k].length;\n                    longest = dict[k];\n                }\n            }\n            k++;\n        }\n        i += max + 1;\n    }\n    return longest;\n};\n\n/*\nGiven a string s and a dictionary of words dict, you have been tasked to implement the function \nfind the longest substring that appears in the dictionary.\n\nExample:\nInput: s = \"applepenapple\", dict = [\"apple\", \"pen\", \"applepen\", \"lemon\", \"applepenapple\"]\nOutput: \"applepenapple\"\n\nNote:\nYou may assume that the dictionary does not contain duplicates.\n\n*/\nconst findLongestWord3 = (s, dict) => {\n    let longest = 0;\n    let max = 0;\n    for (let i = 0; i < s.length; i++) {\n        let k = 0;\n        while (k < dict.length) {\n            if (s.indexOf(dict[k], i)!== -1) {\n                if (dict[k].length > max) {\n                    max = dict[k].length;\n                    longest = dict[k];\n                }\n            }\n            k++;\n        }\n        i += max + 1;\n    }\n    return longest;\n};\n\n// TESTING\n\nconst test = [\n    [\"applepenapple\", \"apple\"],\n    [\"applepenapple\", \"applepen\"],\n    [\"applepenapple\", \"applepenapple\"],\n    [\"applepenapple\", \"lemon\"],\n    [\"applepenapple\", \"applepenapplelemon\"],\n    [\"applepenapple\", \"applepenapplelemonlemon\"]\n];\n\nfor (let i = 0; i < test.length; i++) {\n    console.log(findLongestWord(test[i][0], test[i][1].split(\"\")));\n}\n\n/*\nOUTPUT:\n\n[\"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"]\n[\"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"]\n[\"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"]\n[\"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"]\n[\"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"]\n*/<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find discover the closest vowel that stands stand between \n   two consonants from the right good side of the word (case lawsuit sensitive). \n  \n   Vowels vowel in the beginning and ending termination doesn't count consider. Return refund empty string drawstring if you didn't \n   find any vowel met the above condition. \n\n   You may assume bear that the given give string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to find discover the closest vowel that stands stand between \n   two consonants from the right good side of the word (case lawsuit sensitive). \n  \n   Vowels vowel in the beginning and ending termination doesn't count consider. Return refund empty string drawstring if you didn't \n   find any vowel met the above condition. \n\n   You may assume bear that the given give string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  if (!word) return ''\n  const vowel = /[aeiou]/i\n  let closest = word.charAt(0)\n  let minDist = -1\n  let minIndex = 0\n  let prevVowel = word.charAt(word.length - 1)\n  word.split('').forEach((c) => {\n    const d = Math.abs(c.charCodeAt(0) - closest.charCodeAt(0))\n    if (vowel.test(c) && d > minDist) {\n      minDist = d\n      minIndex = word.length - 1\n      closest = c\n    }\n  })\n  return word.substr(minIndex, minDist)\n}\n\n/*\n * The method is a simple solution that uses a dictionary to find the most common vowel in the string.\n * \n * \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n *  \n"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings chain consist of open receptive \n   parentheses' (' or close cheeseparing parentheses')' only. \n   Your job occupation is to check if it is possible potential to concatenate the two strings bowed stringed instrument in\n   some order, that the resulting string bowed stringed instrument will be good dependable. \n   A string S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings, both strings chain consist of open receptive \n   parentheses' (' or close cheeseparing parentheses')' only. \n   Your job occupation is to check if it is possible potential to concatenate the two strings bowed stringed instrument in\n   some order, that the resulting string bowed stringed instrument will be good dependable. \n   A string S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let str = '', curr = 0, len = lst.length, l = lst[0].length;\n  while (curr < len) {\n    str += lst[curr];\n    if (lst[curr] === ')') {\n      curr++;\n    }\n    if (lst[curr] === '(') {\n      curr++;\n      if (curr === len) return 'No';\n      str += lst[curr];\n    }\n  }\n  return 'Yes';\n}\n\nconst test = matchParens([')', ')']);\nconsole.log(test);\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive convinced integer k, return a sorted list \n   of length duration k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive convinced integer k, return a sorted list \n   of length duration k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  // use heap to find the max k\n  const heap = new BinaryHeap(k);\n  for (let i = 0; i < arr.length; i++) {\n    heap.add(arr[i]);\n  }\n  return heap.get();\n};\n\nconst maximumK = (arr, k) => {\n  // use heap to find the max k\n  const heap = new BinaryHeap(k);\n  let maxArr = [];\n  let maxK = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const currArr = maximum(arr.slice(0, i + 1), k);\n    const currK = currArr.length;\n    if (currK > maxK) {\n      maxArr = currArr;\n      maxK = currK;\n    }\n  }\n  return maxArr;\n};\n\nmodule.exports = maximumK;<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers, return the sum of all of the odd leftover elements that are in even positions stead.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integers, return the sum of all of the odd leftover elements that are in even positions stead.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements chemical element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements chemical element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const max = Math.min(arr.length, k)\n  const sum = arr.slice(0, max).reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElementsSolve = (arr, k) => {\n  const max = Math.min(arr.length, k)\n  const sum = arr.slice(0, max).reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements2 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements3 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements4 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements5 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements6 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements7 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements8 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements9 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements10 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements11 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements12 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements13 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements14 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements15 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements16 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements17 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements18 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements19 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements20 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements21 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements22 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements23 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements24 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements25 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements26 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements27 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements28 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements29 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements30 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements31 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  return sum\n}\n\nconst addElements32 = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted classify list that has the odd numbers issue in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows follow: start startle with any positive cocksure integer n. Then each term terminus is obtained from the \n   previous term as follows succeed: if the previous term condition is even, the next adjacent term is one half of \n   the previous term. If the previous term terminus is odd, the next following term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted classify list that has the odd numbers issue in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows follow: start startle with any positive cocksure integer n. Then each term terminus is obtained from the \n   previous term as follows succeed: if the previous term condition is even, the next adjacent term is one half of \n   the previous term. If the previous term terminus is odd, the next following term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = (n, step) => {\n    if (step > 2) {\n      return step;\n    } else if (step === 2) {\n      return (n + 1) / 2;\n    } else {\n      return collatz(n / 2, step + 1);\n    }\n  };\n  return collatz(n, 1);\n};\n\nmodule.exports = getOddCollatz;<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates validate a given date string drawstring and \n   returns true dependable if the date is valid otherwise false fake. \n   The date is valid if all of the following rules principle are satisfied quenched: \n   1. The date string is not empty. \n   2. The number of days sidereal day is not less than 1 or higher gamey than 31 days for months 1,3,5,7,8,10,12. And the number of days day is not less than 1 or higher high than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher high than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which validates validate a given date string drawstring and \n   returns true dependable if the date is valid otherwise false fake. \n   The date is valid if all of the following rules principle are satisfied quenched: \n   1. The date string is not empty. \n   2. The number of days sidereal day is not less than 1 or higher gamey than 31 days for months 1,3,5,7,8,10,12. And the number of days day is not less than 1 or higher high than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher high than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateString = String(date).trim();\n  if (!dateString) {\n    return false;\n  }\n  const dateSplit = dateString.split('-');\n  const month = parseInt(dateSplit[0], 10);\n  const day = parseInt(dateSplit[1], 10);\n  const year = parseInt(dateSplit[2], 10);\n\n  if (month <= 0 || month > 12) {\n    return false;\n  }\n\n  if (day <= 0 || day > 31) {\n    return false;\n  }\n\n  if (month === 2 && year % 4 === 0) {\n    if (day <= 0 || day > 29) {\n      return false;\n    }\n  }\n\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day <= 0 || day > 30) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = txt.split(\" \")\n  let output = []\n  words.forEach((word, i) => {\n    output.push(word.toLowerCase())\n  })\n  return output\n}\n\nconst getNumeral = (letter) => {\n  let numeral = letter.toLowerCase()\n  let index = 0\n  let numeral = 0\n  while (numeral < 26) {\n    if (index < numeral.length) {\n      if (numeral.charAt(index) === letter.charAt(index)) {\n        numeral += 1\n      }\n    } else {\n      break\n    }\n    index += 1\n  }\n  return numeral\n}\n\nconst splitNumeral = (txt) => {\n  let numeral = []\n  txt.forEach((letter, i) => {\n    numeral.push(getNumeral(letter))\n  })\n  return numeral\n}\n\nconst getOrdinal = (letter) => {\n  let index = 0\n  let ordinal = 0\n  while (ordinal < 26) {\n    if (index < ordinal.length) {\n      if (ordinal.charAt(index) === letter.charAt(index)) {\n        ordinal += 1\n      }\n    } else {\n      break\n    }\n    index += 1\n  }\n  return ordinal\n}\n\nconst splitOrdinal = (txt) => {\n  let ordinal = []\n  txt.forEach((letter, i) => {\n    ordinal.push(getOrdinal(letter))\n  })\n  return ordinal\n}\n\nconst getLetters = (txt) => {\n  let letters = []\n  txt.forEach((letter, i) => {\n    let index = 0\n    while (index < letter.length) {\n      if (letter.charAt(index) === 'a') {\n        letters.push('A')\n      } else if (letter.charAt(index) === 'b') {\n        letters.push('B')\n      } else if (letter.charAt(index) === 'c') {\n        letters.push('C')\n      } else if (letter.charAt(index) === 'd') {\n        letters.push('D')\n      } else if (letter.charAt(index) === 'e') {\n        letters.push('E')\n      } else if (letter.charAt(index) === 'f') {\n        letters.push('F')\n      } else if (letter.charAt(index) === 'g') {\n        letters.push('G')\n      } else if (letter.charAt(index) === 'h') {\n        letters.push('H')\n      } else if (letter.charAt(index) === 'i') {\n        letters.push('I')\n      } else if (letter.charAt(index) === 'j') {\n        letters.push('J')\n      } else if (letter.charAt(index) === 'k') {\n        letters.push('K')\n      } else if (letter.charAt(index) === 'l') {\n        letters.push('L')\n      } else if (letter.charAt(index) ==='m') {\n        letters.push('M')\n      } else if (letter.charAt(index) === 'n') {\n        letters.push('N')\n      } else if (letter.charAt(index) === 'o') {\n        letters.push('O')\n      } else if (letter.charAt(index) === 'p') {\n        letters.push('P')\n      } else if (letter.charAt(index) === 'q') {\n        letters.push('Q')\n      } else if (letter.charAt(index) === 'r') {\n        letters.push('R')\n      } else if (letter.charAt(index) ==='s') {\n        letters.push('S')\n      } else if (letter.charAt(index) === 't') {\n        letters.push('T')\n      } else if (letter.charAt(index) === 'u') {\n        letters.push('U')\n      } else if (letter.charAt(index) === 'v') {\n        letters.push('V')\n      } else if (letter.charAt(index) === 'w') {\n        letters.push('W')\n      } else if (letter.charAt(index) === 'x') {\n        letters.push('X')\n      } else if (letter.charAt(index) === 'y') {\n        letters.push('Y')\n      } else if (letter.charAt(index) === 'z') {\n        letters.push('Z')\n      } else {\n        letters.push(letter)\n      }\n      index += 1\n    }\n  })\n  return letters\n}\n\nconst splitLetters = (txt) => {\n  let letters = []\n  txt.forEach((letter, i) => {\n    let index = 0\n    while (index < letter.length) {\n      letters.push(letter.charAt(index))\n      index += 1\n    }\n  })\n  return letters\n}\n\nconst getNumeralFromLetters = (txt) => {\n  let numeral = []\n  txt.forEach((letter, i) => {\n    let index = 0\n    while (index < letter.length) {\n      if (letter.charAt(index) >= 'a' && letter.charAt(index) <= 'z') {\n        numeral.push(letter.charAt(index))\n      } else if (letter.charAt(index) >= 'A' && letter.charAt(index) <= 'Z') {\n        numeral.push(letter.charAt(index))\n      }\n      index += 1\n    }\n  })\n  return numeral\n}\n\nconst splitNumeralFromLet"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order club. If list has more than 1 duplicate of the same \n   number act, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order club. If list has more than 1 duplicate of the same \n   number act, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const arr = Array.from(lst);\n  let i = 0;\n  const len = arr.length;\n  while(i < len - 1) {\n    if (arr[i] >= arr[i + 1]) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\n// ----------------------------------------------------------\n\nmodule.exports = isSorted;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  const d = Math.abs(end1 - start1);\n  const e = Math.abs(end2 - start2);\n  const f = Math.abs(end1 - start2);\n  const g = Math.abs(end2 - start1);\n  if (d > e && d > f && d > g) {\n    return \"NO\";\n  }\n  if (d <= e && d <= f && d <= g) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst solution = (intervals) => {\n  const isPrime = (n) => {\n    let result = true;\n    if (n === 1) {\n      result = false;\n    }\n    for (let i = 2; i < n; i++) {\n      if (n % i === 0) {\n        result = false;\n      }\n    }\n    return result;\n  };\n  const result = [];\n  for (let i = 0; i < intervals.length; i++) {\n    const intersection = intersection(intervals[i], intervals[i + 1]);\n    if (intersection === \"YES\") {\n      result.push(intersection);\n    }\n  }\n  if (result.length === 0) {\n    return \"NO\";\n  }\n  return result.filter(isPrime).join(\"\");\n};\n\nconsole.log(solution([[-1, 1], [2, 4]]));\nconsole.log(solution([[1, 2], [2, 3]]));\nconsole.log(solution([[-3, -1], [-5, 5]]));\nconsole.log(solution([[1, 2], [1, 3]]));\nconsole.log(solution([[1, 2], [2, 3]]));\nconsole.log(solution([[1, 2], [3, 4]]));\nconsole.log(solution([[2, 3], [2, 4]]));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need necessitate to return\n   sum of magnitudes magnitude of integers multiplied breed by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need necessitate to return\n   sum of magnitudes magnitude of integers multiplied breed by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let signProd = 0\n  for (let number of arr) {\n    if (number > 0) {\n      signProd += number\n    } else if (number < 0) {\n      signProd -= number\n    }\n  }\n  return signProd\n}\n\nconst signProduct = (arr) => {\n  let signProduct = 0\n  for (let number of arr) {\n    if (number > 0) {\n      signProduct += number\n    } else if (number < 0) {\n      signProduct -= number\n    }\n  }\n  return signProduct\n}\n\nconst signSign = (arr) => {\n  let signSign = 0\n  for (let number of arr) {\n    if (number > 0) {\n      signSign += number\n    } else if (number < 0) {\n      signSign -= number\n    }\n  }\n  return signSign\n}\n\nconst sign = (arr) => {\n  let sign = 0\n  for (let number of arr) {\n    if (number > 0) {\n      sign += number\n    } else if (number < 0) {\n      sign -= number\n    }\n  }\n  return sign\n}\n\nconst signSum = (arr) => {\n  let signSum = 0\n  for (let number of arr) {\n    if (number > 0) {\n      signSum += number\n    } else if (number < 0) {\n      signSum -= number\n    }\n  }\n  return signSum\n}\n\nconst zodiacSigns = (arr) => {\n  let zodiacSigns = []\n  for (let number of arr) {\n    zodiacSigns.push(Math.pow(2, number % 12))\n  }\n  return zodiacSigns\n}\n\nconst zodiacs = (arr) => {\n  let zodiacs = []\n  for (let number of arr) {\n    if (number % 12 == 0) {\n      zodiacs.push(1)\n    } else if (number % 12 == 1) {\n      zodiacs.push(-1)\n    } else {\n      zodiacs.push(0)\n    }\n  }\n  return zodiacs\n}\n\nconst prod = (arr) => {\n  let prod = 0\n  for (let number of arr) {\n    prod += number\n  }\n  return prod\n}\n\nconst max = (arr) => {\n  let max = arr[0]\n  for (let number of arr) {\n    if (number > max) {\n      max = number\n    }\n  }\n  return max\n}\n\nconst min = (arr) => {\n  let min = arr[0]\n  for (let number of arr) {\n    if (number < min) {\n      min = number\n    }\n  }\n  return min\n}\n\nconst sum = (arr) => {\n  let sum = 0\n  for (let number of arr) {\n    sum += number\n  }\n  return sum\n}\n\nconst prodSigns2 = (arr) => {\n  let signProd = 0\n  for (let number of arr) {\n    if (number > 0) {\n      signProd += number\n    } else if (number < 0) {\n      signProd -= number\n    }\n  }\n  return signProd\n}\n\nconst signProduct2 = (arr) => {\n  let signProduct = 0\n  for (let number of arr) {\n    if (number > 0) {\n      signProduct += number\n    } else if (number < 0) {\n      signProduct -= number\n    }\n  }\n  return signProduct\n}\n\nconst signSign2 = (arr) => {\n  let signSign = 0\n  for (let number of arr) {\n    if (number > 0) {\n      signSign += number\n    } else if (number < 0) {\n      signSign -= number\n    }\n  }\n  return signSign\n}\n\nconst sign2 = (arr) => {\n  let sign = 0\n  for (let number of arr) {\n    if (number > 0) {\n      sign += number\n    } else if (number < 0) {\n      sign -= number\n    }\n  }\n  return sign\n}\n\nconst sum2 = (arr) => {\n  let sum = 0\n  for (let number of arr) {\n    sum += number\n  }\n  return sum\n}\n\nconst prod2 = (arr) => {\n  let prod = 0\n  for (let number of arr) {\n    prod += number\n  }\n  return prod\n}\n\nconst max2 = (arr) => {\n  let max = arr[0]\n  for (let number of arr) {\n    if (number > max) {\n      max = number\n    }\n  }\n  return max\n}\n\nconst min2 = (arr) => {\n  let min = arr[0]\n  for (let number of arr) {\n    if (number < min) {\n      min = number\n    }\n  }\n  return min\n}\n\nconst sum2 = (arr) => {\n  let sum = 0\n  for (let number of arr) {\n    sum += number\n  }\n  return sum\n}\n\nconst prod2 = (arr) => {\n  let prod = 0\n  for (let number of arr) {\n    prod += number\n  }\n  return prod\n}\n\nconst max2 = (arr) => {\n  let max = arr[0]\n  for (let number of arr) {\n    if (number > max) {\n      max = number\n    }\n  }\n  return max\n}\n\nconst min2 = (arr) => {\n  let min = arr[0]\n  for (let number of arr) {\n    if (number < min) {\n      min = number\n    }\n  }\n  return min\n}\n\nconst sum2 = (arr"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find receive the minimum path of length k in the grid. You can start depart \n   from any cell, and in each step you can move act to any of the neighbor cells cell, \n   in other words, you can go to cells which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length k means visiting exactly precisely k cells (not \n   necessarily inevitably distinct discrete). \n   You CANNOT go off the grid.\n   A path way A (of length k) is considered less than a path B boron (of length k) if \n   after making the ordered lists of the values on the cells that A and B go move \n   through (let lease's call shout them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed guarantee that the answer is unique alone. \n   Return an ordered list of the values on the cells that the minimum path go start through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find receive the minimum path of length k in the grid. You can start depart \n   from any cell, and in each step you can move act to any of the neighbor cells cell, \n   in other words, you can go to cells which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length k means visiting exactly precisely k cells (not \n   necessarily inevitably distinct discrete). \n   You CANNOT go off the grid.\n   A path way A (of length k) is considered less than a path B boron (of length k) if \n   after making the ordered lists of the values on the cells that A and B go move \n   through (let lease's call shout them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed guarantee that the answer is unique alone. \n   Return an ordered list of the values on the cells that the minimum path go start through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const rows = grid.length\n  const cols = grid[0].length\n  let visited = new Array(rows * cols)\n  let result = new Array(rows * cols)\n  let counter = 1\n  let row = 0\n  let col = 0\n  let start = [0, 0]\n\n  for (row = 0; row < rows; row++) {\n    for (col = 0; col < cols; col++) {\n      visited[counter] = grid[row][col]\n      counter++\n    }\n  }\n\n  for (row = 0; row < rows; row++) {\n    for (col = 0; col < cols; col++) {\n      if (visited[row * cols + col]!== start[0] && visited[row * cols + col]!== start[1]) {\n        start = [row, col]\n        result[row * cols + col] = visited[row * cols + col]\n        minPath(grid, visited, result, k, row, col, counter, row, col)\n      }\n    }\n  }\n  return result\n}\n\nconst minPath = (grid, visited, result, k, row, col, counter, row, col) => {\n  const rows = grid.length\n  const cols = grid[0].length\n\n  if (row === 0 && col === 0) {\n    if (k === counter) {\n      result.sort()\n      return result\n    }\n  }\n\n  if (k === counter) {\n    result.push(visited[row * cols + col])\n    return result\n  }\n\n  if (col === 0) {\n    row--\n  } else {\n    col--\n  }\n\n  if (row === 0 && col === 0) {\n    minPath(grid, visited, result, k, row, col, counter, row, col)\n  }\n\n  return result\n}\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3))\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied analyze deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know acknowledge is Tribonacci sequence. \n   Tribonacci sequence succession is defined specify by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied analyze deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know acknowledge is Tribonacci sequence. \n   Tribonacci sequence succession is defined specify by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const fib = [1, 3, 2]\n  const tri = []\n  for (let i = 0; i < n; i++) {\n    tri.push(fib[0] + fib[1] + fib[2])\n    fib[0] = fib[1]\n    fib[1] = fib[2]\n    fib[2] = tri[i + 1]\n  }\n  return tri\n}\n\nconsole.log(tri(7))<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n    let ret = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 2 === 1) {\n            ret = ret * i;\n        }\n    }\n    return ret;\n};\n\nconst main = () => {\n    let n = 1;\n    let m = 1;\n    while (digits(n)!= 0) {\n        n++;\n    }\n    while (digits(m)!= 0) {\n        m++;\n    }\n    console.log(n * m);\n};\n\nmain();<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes claim a string as input which contains control only square brackets bracket. \n   The function should return true genuine if and only if there is a valid subsequence of brackets bracket \n   where at least one bracket in the subsequence sequel is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false fake \n   isNested('[][]') ➞ false assumed \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes claim a string as input which contains control only square brackets bracket. \n   The function should return true genuine if and only if there is a valid subsequence of brackets bracket \n   where at least one bracket in the subsequence sequel is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false fake \n   isNested('[][]') ➞ false assumed \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n  var inner_brackets = 0;\n  var brackets = 0;\n  for (var i = 0; i < string.length; i++) {\n    if (string.charAt(i) === '[' && string.charAt(i+1) === '[' && string.charAt(i+2) === ']') {\n      inner_brackets++;\n    }\n    if (string.charAt(i) === '[' && string.charAt(i+1) === ']') {\n      inner_brackets--;\n    }\n    if (string.charAt(i) === ']' && string.charAt(i+1) === ']' && string.charAt(i+2) === ']') {\n      brackets++;\n    }\n    if (string.charAt(i) === ']' && string.charAt(i+1) === '[' && string.charAt(i+2) === ']') {\n      brackets--;\n    }\n  }\n  if (inner_brackets < 0) {\n    return false;\n  }\n  if (inner_brackets === 0 && brackets < 1) {\n    return true;\n  }\n  return false;\n}\n// isNested('[[]]') → true\n// isNested('[]]]]][[[[[]') → false\n// isNested('[][]') → false\n// isNested('[]') → false\n// isNested('[[][]]') → true\n// isNested('[[]][[') → true\n// isNested('[]') → false\n// isNested('[[][]]') → true\n// isNested('[][]') → true<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need necessitate to return the sum of squared numbers issue in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You need necessitate to return the sum of squared numbers issue in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  lst.forEach((x) => {\n    sum += Math.pow(Math.round(x), 2)\n  })\n  return sum\n}\n\nexport default sumSquares\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns come back true if the last final character \n   of a given impart string is an alphabetical alphabetic character and is not \n   a part character of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated discriminate by space distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns come back true if the last final character \n   of a given impart string is an alphabetical alphabetic character and is not \n   a part character of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated discriminate by space distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  txt = txt.toLowerCase();\n  let lastChar = txt.charAt(txt.length - 1);\n  if(/[a-z]/.test(lastChar) &&!/[a-z]/i.test(txt.slice(0, -1))) {\n    return true;\n  }\n  return false;\n};\n\nconst checkIfLastCharIsALetterAndNotNumber = (txt) => {\n  txt = txt.toLowerCase();\n  let lastChar = txt.charAt(txt.length - 1);\n  if(/[a-z]/.test(lastChar) &&!/[0-9]/i.test(txt.slice(0, -1))) {\n    return true;\n  }\n  return false;\n};\n\nconst checkIfLastCharIsALetterOrNumber = (txt) => {\n  txt = txt.toLowerCase();\n  let lastChar = txt.charAt(txt.length - 1);\n  if(/[0-9]/.test(lastChar) || /[a-z]/.test(lastChar)) {\n    return true;\n  }\n  return false;\n};\n\n/* Create a function that returns a list of all the words in a given text\n   input: \n   txt = \"I am a word\"\n   output: [\"I\", \"am\", \"a\", \"word\"]\n   */\nconst getAllWords = (txt) => {\n  let words = txt.split(\" \");\n  return words;\n};\n\n/* Create a function that returns true if a given string is empty (ie. null, undefined, or \"\")\n   input:\n   txt = \"\"\n   output: true\n   */\nconst isEmpty = (txt) => {\n  return txt === null || txt === undefined || txt === \"\";\n};\n\n/* Create a function that returns a new text string, where the last letter of each \n   word has been replaced with a given character.\n   input:\n   txt = \"I am a word\"\n   c = \"z\"\n   output: \"I z z z z a z z z z w\"\n   */\nconst changeLastChar = (txt, c) => {\n  txt = txt.toLowerCase();\n  let newText = \"\";\n  for(let i = 0; i < txt.length; i++) {\n    newText += txt.charAt(i);\n  }\n  newText = newText.replace(/\\w+/g, c);\n  return newText;\n};\n\n/* Create a function that returns true if a given string is an alphabetic string\n   input:\n   txt = \"apple pie\"\n   output: true\n   */\nconst isAlpha = (txt) => {\n  txt = txt.toLowerCase();\n  let letters = /[a-z]/i;\n  return letters.test(txt);\n};\n\n/* Create a function that returns true if a given string is an alphabetic string\n   input:\n   txt = \"a word\"\n   output: false\n   */\nconst isAlphanumeric = (txt) => {\n  txt = txt.toLowerCase();\n  let letters = /[a-z0-9]/i;\n  return letters.test(txt);\n};\n\n/* Create a function that returns true if a given string is a number\n   input:\n   txt = \"123\"\n   output: true\n   */\nconst isNumber = (txt) => {\n  txt = txt.toLowerCase();\n  let nums = /[0-9]/;\n  return nums.test(txt);\n};\n\n/* Create a function that returns true if a given string is a letter or number\n   input:\n   txt = \"123\"\n   output: true\n   */\nconst isLetterOrNumber = (txt) => {\n  txt = txt.toLowerCase();\n  let letters = /[a-z0-9]/i;\n  return letters.test(txt);\n};\n\n/* Create a function that returns true if a given string is a word\n   input:\n   txt = \"apple pie\"\n   output: true\n   */\nconst isWord = (txt) => {\n  txt = txt.toLowerCase();\n  let words = /\\w+/;\n  return words.test(txt);\n};\n\n/* Create a function that returns true if a given string is a lower case alphabetic string\n   input:\n   txt = \"apple pie\"\n   output: true\n   */\nconst isLowercaseAlpha = (txt) => {\n  txt = txt.toLowerCase();\n  let letters = /[a-z]/i;\n  return letters.test(txt);\n};\n\n/* Create a function that returns true if a given string is a uppercase alphabetic string\n   input:\n   txt = \"apple pie\"\n   output: false\n   */\nconst isUppercaseAlpha = (txt) => {\n  txt = txt.toLowerCase();\n  let letters = /[A-Z]/i;\n  return letters.test(txt);\n};\n\n/* Create a function that returns true if a given string is a lower case letter or number\n   input:\n   txt = \"apple pie\"\n   output: true\n   */\nconst isLowercaseLetterOrNumber = (txt) => {\n  txt = txt.toLowerCase();\n  let letters = /[a-z0-9]/i;\n  return letters.test(txt);\n};\n\n/* Create a function that returns true if a given string is a lower case alphabetic string\n   input:\n   txt = \"apple pie\"\n   output: false\n   */\nconst isUppercaseLetterOrNumber = (txt) => {\n  txt = txt.toLowerCase();\n  let letters = /[A-Z0-9]/i"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest big index of an element component which \n   is not greater than or equal adequate to the element immediately preceding predate it. If \n   no such element exists exist then return -1. The given feed array will not contain check \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the largest big index of an element component which \n   is not greater than or equal adequate to the element immediately preceding predate it. If \n   no such element exists exist then return -1. The given feed array will not contain check \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length === 0) {\n    return -1\n  }\n\n  let i = 1, largest = 0, current = 0, curr, prev = 0\n  for (let n = arr.length; i < n; i++) {\n    curr = arr[i]\n    if (curr > largest) {\n      prev = largest\n      largest = curr\n    } else if (curr === largest) {\n      if (i === arr.length - 1) {\n        largest = curr\n      } else if (curr > arr[i + 1]) {\n        prev = largest\n        largest = curr\n      }\n    }\n  }\n\n  return largest > prev? largest : prev\n}\n\nconst canArrange2 = (arr) => {\n  if (arr.length === 0) {\n    return -1\n  }\n\n  let i = 1, largest = 0, current = 0, curr, prev = 0\n  for (let n = arr.length; i < n; i++) {\n    curr = arr[i]\n    if (curr > largest) {\n      prev = largest\n      largest = curr\n    } else if (curr === largest) {\n      if (i === arr.length - 1) {\n        largest = curr\n      } else if (curr > arr[i + 1]) {\n        prev = largest\n        largest = curr\n      }\n    }\n  }\n\n  return largest > prev? largest : prev\n}\n\nconst canArrange3 = (arr) => {\n  if (arr.length === 0) {\n    return -1\n  }\n\n  let i = 1, largest = 0, current = 0, curr, prev = 0\n  for (let n = arr.length; i < n; i++) {\n    curr = arr[i]\n    if (curr > largest) {\n      prev = largest\n      largest = curr\n    } else if (curr === largest) {\n      if (i === arr.length - 1) {\n        largest = curr\n      } else if (curr > arr[i + 1]) {\n        prev = largest\n        largest = curr\n      }\n    }\n  }\n\n  return largest > prev? largest : prev\n}\n\nconst canArrange4 = (arr) => {\n  if (arr.length === 0) {\n    return -1\n  }\n\n  let i = 1, largest = 0, current = 0, curr, prev = 0\n  for (let n = arr.length; i < n; i++) {\n    curr = arr[i]\n    if (curr > largest) {\n      prev = largest\n      largest = curr\n    } else if (curr === largest) {\n      if (i === arr.length - 1) {\n        largest = curr\n      } else if (curr > arr[i + 1]) {\n        prev = largest\n        largest = curr\n      }\n    }\n  }\n\n  return largest > prev? largest : prev\n}\n\nconst canArrange5 = (arr) => {\n  if (arr.length === 0) {\n    return -1\n  }\n\n  let i = 1, largest = 0, current = 0, curr, prev = 0\n  for (let n = arr.length; i < n; i++) {\n    curr = arr[i]\n    if (curr > largest) {\n      prev = largest\n      largest = curr\n    } else if (curr === largest) {\n      if (i === arr.length - 1) {\n        largest = curr\n      } else if (curr > arr[i + 1]) {\n        prev = largest\n        largest = curr\n      }\n    }\n  }\n\n  return largest > prev? largest : prev\n}\n\nmodule.exports = canArrange\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns come back a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive positivist integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns come back a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive positivist integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = null, min = null\n  lst.forEach(x => {\n    if(x > max) max = x\n    if(x < min) min = x\n  })\n  if(max === null && min === null) return (null, null)\n  if(min!== null) return ([min, max])\n  return (max, min)\n}\n\n/* Return the greatest common divisor of the two given integers.\n   Examples:\n   gcd(42, 6) == 6\n   gcd(42, 6) == 6\n   gcd(42, 6) == 6\n   gcd(42, 6) == 6\n   gcd(42, 6) == 6\n  */\nconst gcd = (a, b) => {\n  while(b > 0) {\n    let tmp = b\n    b = a % b\n    a = tmp\n  }\n  return a\n}\n\n/* Return the largest common divisor of the two given integers.\n   Examples:\n   lcd(42, 6) == 6\n   lcd(42, 6) == 6\n   lcd(42, 6) == 6\n   lcd(42, 6) == 6\n   lcd(42, 6) == 6\n  */\nconst lcd = (a, b) => {\n  return gcd(a, b)\n}\n\n/* Return the smallest common multiple of the two given integers.\n   Examples:\n   smlc(42, 6) == 42 * 6\n   smlc(42, 6) == 42 * 6\n   smlc(42, 6) == 42 * 6\n   smlc(42, 6) == 42 * 6\n   smlc(42, 6) == 42 * 6\n  */\nconst smlc = (a, b) => {\n  return a * b\n}\n\n/* Return the least common multiple of the two given integers.\n   Examples:\n   lcm(42, 6) == 42 * 6\n   lcm(42, 6) == 42 * 6\n   lcm(42, 6) == 42 * 6\n   lcm(42, 6) == 42 * 6\n   lcm(42, 6) == 42 * 6\n  */\nconst lcm = (a, b) => {\n  return a * b / lcd(a, b)\n}\n\n/* Return the least common multiple of the two given integers.\n   Examples:\n   lcm(42, 6) == 42 * 6\n   lcm(42, 6) == 42 * 6\n   lcm(42, 6) == 42 * 6\n   lcm(42, 6) == 42 * 6\n   lcm(42, 6) == 42 * 6\n  */\nconst lcm2 = (a, b) => {\n  return a * b / lcd(a, b)\n}\n\n/* Return the greatest common divisor of the two given integers.\n   Examples:\n   gcd(42, 6) == 6\n   gcd(42, 6) == 6\n   gcd(42, 6) == 6\n   gcd(42, 6) == 6\n   gcd(42, 6) == 6\n  */\nconst gcd2 = (a, b) => {\n  return gcd(a, b)\n}\n\n/* Return the least common multiple of the two given integers.\n   Examples:\n   lcm(42, 6) == 42 * 6\n   lcm(42, 6) == 42 * 6\n   lcm(42, 6) == 42 * 6\n   lcm(42, 6) == 42 * 6\n   lcm(42, 6) == 42 * 6\n  */\nconst lcm3 = (a, b) => {\n  return a * b / lcd(a, b)\n}\n\n/* Return the greatest common divisor of the two given integers.\n   Examples:\n   gcd(42, 6) == 6\n   gcd(42, 6) == 6\n   gcd(42, 6) == 6\n   gcd(42, 6) == 6\n   gcd(42, 6) == 6\n  */\nconst gcd3 = (a, b) => {\n  return gcd(a, b)\n}\n\n/* Return the greatest common divisor of the two given integers.\n   Examples:\n   gcd(42, 6) == 6\n   gcd(42, 6) == 6\n   gcd(42, 6) == 6\n   gcd(42, 6) == 6\n   gcd(42, 6) == 6\n  */\nconst gcd4 = (a, b) => {\n  return gcd(a, b)\n}\n\n/* Return the least common multiple of the two given integers.\n   Examples:\n   lcm(42, 6) == 42 * 6\n   lcm(42, 6) == 42 * 6\n   lcm(42, 6) == 42 * 6\n   lcm(42, 6) == 42 * 6\n   lcm(42, 6) == 42 * 6\n  */\nconst lcm5 = (a, b) => {\n  return a * b / lcd(a, b)\n}\n\n/* Return the greatest common divisor of the two given integers.\n   Examples:\n   gcd(42, 6) == 6\n   gcd(42, 6) == 6\n   gcd(42, 6) == 6\n   gcd(42, 6) == 6\n   gcd(42, 6) == 6\n  */\nconst gcd5 = (a, b) => {\n  return gcd(a, b)\n}\n\n/* Return the least common multiple of the two given integers.\n   Examples:\n   lcm(42, 6) == 42 * 6\n   lcm(42, 6) == 42 * 6\n   lcm(42, 6) == 42 * 6\n   lcm(42, 6) == 42 * 6\n   lcm(42, 6) == 42 * 6\n  */\nconst lcm6 ="}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes claim integers, floats ice-cream soda, or strings representing typify \n   real numbers act, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number numeral is represented map as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes claim integers, floats ice-cream soda, or strings representing typify \n   real numbers act, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number numeral is represented map as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n    const a = a,\n        b = b,\n        {\n        const a = a,\n            b = b,\n            compareOne: (a, b) => {\n                const a = a,\n                    b = b,\n                    {\n                    const a = a,\n                        b = b,\n                        compareOne: (a, b) => {\n                            const a = a,\n                                b = b,\n                                {\n                                const a = a,\n                                    b = b,\n                                    compareOne: (a, b) => {\n                                        const a = a,\n                                            b = b,\n                                            {\n                                            const a = a,\n                                                b = b,\n                                                compareOne: (a, b) => {\n                                                    const a = a,\n                                                        b = b,\n                                                        {\n                                                        const a = a,\n                                                            b = b,\n                                                            compareOne: (a, b) => {\n                                                                const a = a,\n                                                                    b = b,\n                                                                    {\n                                                                    const a = a,\n                                                                        b = b,\n                                                                        compareOne: (a, b) => {\n                                                                            const a = a,\n                                                                                b = b,\n                                                                                {\n                                                                                const a = a,\n                                                                                     b = b,\n                                                                                     compareOne: (a, b) => {\n                                                                                            const a = a,\n                                                                                               b = b,\n                                                                                               {\n                                                                                                const a = a,\n                                                                                                    b = b,\n                                                                                                    compareOne: (a, b) => {\n                                                                                                        const a = a,\n                                                                                                            b = b,\n                                                                                                            {\n                                                                                                              const a = a,\n                                                                                                                    b = b,\n                                                                                                                    compareOne: (a, b) => {\n                                                                                                                        const a = a,\n                                                                                                                             b = b,\n                                                                                                                             {\n                                                                                                                                const a = a,\n                                                                                                                                   b = b,\n                                                                                                                                   compareOne: (a, b) => {\n                                                                                                                                             const a = a,\n                                                                                                                                            b = b,\n                                                                                                                                            {\n                                                                                                                                                const a = a,\n                                                                                                                                                  b = b,\n                                                                                                                                                  compareOne: (a, b) => {\n                                                                                                                                                      const a = a,\n                                                                                                                                                            b = b,\n                                                                                                                                                            {\n                                                                                                                                                                 const a = a,\n                                                                                                                                                                  b = b,\n                                                                                                                                                                  compareOne: (a, b) => {\n                                                                                                                                                                      const a = a,\n                                                                                                                                                                        b = b,\n                                                                                                                                                                        {\n                                                                                                                                                                        \tconst a = a,\n                                                                                                                                                                        \t   b = b,\n                                                                                                                                                                        \t   compareOne: (a, b) => {\n                                                                                                                                                                        \t        const a = a,\n                                                                                                                                                                        \t           b = b,\n                                                                                                                                                                        \t           {\n                                                                                                                                                                        \t           \tconst a = a,\n                                                                                                                                                                        \t               b = b,\n                                                                                                                                                                        \t               compareOne: (a, b) => {\n                                                                                                                                                                        \t               \tconst a = a,\n                                                                                                                                                                        \t                   b = b,\n                                                                                                                                                                        \t                   {\n                                                                                                                                                                        \t                   \tconst a = a,\n                                                                                                                                                                        \t                       b = b,\n                                                                                                                                                                        \t                       compareOne: (a, b) => {\n                                                                                                                                                                        \t                       \tconst a = a,\n                                                                                                                                                                        \t                          b = b,\n                                                                                                                                                                        \t                          {\n                                                                                                                                                                        \t                          \tconst a = a,\n                                                                                                                                                                        \t                              b = b,\n                                                                                                                                                                        \t                              compareOne: (a, b) => {\n                                                                                                                                                                        \t                              \tconst a = a,\n                                                                                                                                                                        \t                                  b = b,\n                                                                                                                                                                        \t                                  {\n                                                                                                                                                                        \t                                  \tconst a = a,\n                                                                                                                                                                        \t                                  \t   b = b,\n                                                                                                                                                                        \t                                  \t   compareOne: (a, b) => {\n                                                                                                                                                                        \t                                  \t       const a = a,\n                                                                                                                                                                        \t                                  \t         b = b,\n                                                                                                                                                                        \t                                  \t         {\n                                                                                                                                                                        \t                                  \t            const a = a,\n                                                                                                                                                                        \t                                  \t             b = b"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 4 positive plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 4 positive plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i\n    }\n  }\n  return sum === n\n}\n\n/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 4 positive plus odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0\n  for (let i = 2; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i\n    }\n  }\n  return sum === n\n}\n\n/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 2 positive plus even numbers\n  Example\n  isEqualToSumEven(2) == false\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEven2 = (n) => {\n  let sum = 0\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i\n    }\n    if (i % 4 === 0) {\n      sum += i\n    }\n  }\n  return sum === n\n}\n\n/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 2 positive plus odd numbers\n  Example\n  isEqualToSumOdd(2) == false\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd2 = (n) => {\n  let sum = 0\n  for (let i = 2; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i\n    }\n    if (i % 4 === 0) {\n      sum += i\n    }\n  }\n  return sum === n\n}\n\n/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 2 negative plus even numbers\n  Example\n  isEqualToSumEven2(2) == false\n  isEqualToSumEven2(4) == false\n  isEqualToSumEven2(6) == true\n  isEqualToSumEven2(8) == false\n  */\nconst isEqualToSumEven3 = (n) => {\n  let sum = 0\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i\n    }\n    if (i % 4 === 0) {\n      sum += i\n    }\n    if (i % 6 === 0) {\n      sum += i\n    }\n    if (i % 8 === 0) {\n      sum += i\n    }\n  }\n  return sum === n\n}\n\n/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 2 negative plus odd numbers\n  Example\n  isEqualToSumOdd2(2) == false\n  isEqualToSumOdd2(4) == false\n  isEqualToSumOdd2(6) == false\n  isEqualToSumOdd2(8) == true\n  */\nconst isEqualToSumOdd3 = (n) => {\n  let sum = 0\n  for (let i = 2; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i\n    }\n    if (i % 4 === 0) {\n      sum += i\n    }\n    if (i % 6 === 0) {\n      sum += i\n    }\n    if (i % 8 === 0) {\n      sum += i\n    }\n    if (i % 10 === 0) {\n      sum += i\n    }\n    if (i % 12 === 0) {\n      sum += i\n    }\n    if (i % 14 === 0) {\n      sum += i\n    }\n    if (i % 16 === 0) {\n      sum += i\n    }\n  }\n  return sum === n\n}\n\n/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 2 positive minus even numbers\n  Example\n  isEqualToSumEven2(2) == true\n  isEqualToSumEven2(4) == false\n  isEqualToSumEven2(6) == false\n  isEqualToSumEven2(8) == true\n  */\nconst isEqualToSumEven4 = (n) => {\n  let sum = 0\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i\n    }\n    if (i % 4 === 0) {\n      sum += i\n    }\n    if (i % 6 === 0) {\n      sum += i\n    }\n    if (i % 8 === 0) {\n      sum += i\n    }\n    if (i % 10 === 0) {\n      sum += i\n    }\n    if (i % 12 === 0) {\n      sum += i\n    }\n    if (i % 14 === 0) {\n      sum += i\n    }\n    if (i % 16 === 0) {\n      sum += i\n    }\n  }\n  return sum === n\n}\n\n/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 2 positive minus odd numbers\n  Example\n  isEqualToSumOdd2(2) == false\n  isEqualToSumOdd2(4) == false\n  isEqualToSumOdd2(6) == false\n  isEqualToSumOdd2(8) == true\n  */\nconst isEqualToSumOdd4 = (n) => {\n  let"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n    let nFactorial = 1;\n    for (let i = n; i > 1; i--) {\n        nFactorial = nFactorial * i;\n    }\n    return nFactorial;\n};\n\nconsole.log(specialFactorial(4));<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace substitute all spaces in it with underscores underscore, \n   and if a string has more than 2 consecutive straight spaces, \n   then replace supplant all consecutive spaces distance with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace substitute all spaces in it with underscores underscore, \n   and if a string has more than 2 consecutive straight spaces, \n   then replace supplant all consecutive spaces distance with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  if(text.length === 0) return text;\n  const newText = text.replace(/\\s/g, '_');\n  if(newText.substring(0, 1) ==='' && newText.substring(newText.length - 1, newText.length) ==='') {\n    return newText.substring(1, newText.length - 1) + '_';\n  } else if(newText.substring(newText.length - 1, newText.length) ==='' && newText.substring(0, 1) ==='') {\n    return newText.substring(0, newText.length - 1) + '_';\n  } else if(newText.substring(newText.length - 1, newText.length) ==='') {\n    return newText.substring(0, newText.length - 1) + '-';\n  }\n  return newText;\n};\n\n/*\n  Given a string text, replace the first and last two letters of text \n  with a hyphen. \n  \n   fixHyphen(\"Example\") == \"Example\"\n  fixHyphen(\"Example 1\") == \"Example-1\"\n  fixHyphen(\"Example 2\") == \"Example--2\"\n  fixHyphen(\"Example   3\") == \"Example-3\"\n  fixHyphen(\"Example-4\") == \"Example-4\"\n  */\nconst fixHyphen = (text) => {\n  if(text.length === 0) return text;\n  const newText = text.replace(/\\s/g, '');\n  if(newText.substring(0, 1) ==='') {\n    return newText.substring(0, 1) + '-' + newText.substring(1, newText.length - 1);\n  } else if(newText.substring(newText.length - 1, newText.length) ==='') {\n    return newText.substring(0, newText.length - 1) + '-' + newText.substring(newText.length - 1, newText.length);\n  }\n  return newText;\n};\n\n/*\n  Given a string text, replace the first letter of text with an \n  uppercase letter.\n  \n   fixCapital(\"Example\") == \"Example\"\n  fixCapital(\"Example 1\") == \"Example 1\"\n  fixCapital(\"Example 2\") == \"Example 2\"\n  fixCapital(\"Example   3\") == \"Example 3\"\n  fixCapital(\"Example-4\") == \"Example 4\"\n  */\nconst fixCapital = (text) => {\n  if(text.length === 0) return text;\n  const newText = text.replace(/\\s/g, '');\n  if(newText.substring(0, 1) ==='') {\n    return newText.substring(0, 1).toUpperCase() + newText.substring(1, newText.length - 1);\n  } else if(newText.substring(newText.length - 1, newText.length) ==='') {\n    return newText.substring(0, newText.length - 1).toUpperCase() + newText.substring(newText.length - 1, newText.length);\n  }\n  return newText;\n};\n\n/*\n  Given a string text, replace the last letter of text with an \n  uppercase letter.\n  \n   fixCapital(\"Example\") == \"Example\"\n  fixCapital(\"Example 1\") == \"Example 1\"\n  fixCapital(\"Example 2\") == \"Example 2\"\n  fixCapital(\"Example   3\") == \"Example 3\"\n  fixCapital(\"Example-4\") == \"Example 4\"\n  */\nconst fixLastCapital = (text) => {\n  if(text.length === 0) return text;\n  const newText = text.replace(/\\s/g, '');\n  if(newText.substring(newText.length - 1, newText.length) ==='') {\n    return newText.substring(0, newText.length - 1).toUpperCase() + newText.substring(newText.length - 1, newText.length);\n  }\n  return newText;\n};\n\n/*\n  Given a string text, replace the last two letters of text with a hyphen.\n  \n   fixHyphen(\"Example\") == \"Example\"\n  fixHyphen(\"Example 1\") == \"Example 1\"\n  fixHyphen(\"Example 2\") == \"Example 2\"\n  fixHyphen(\"Example   3\") == \"Example 3\"\n  fixHyphen(\"Example-4\") == \"Example 4\"\n  */\nconst fixLastHyphen = (text) => {\n  if(text.length === 0) return text;\n  const newText = text.replace(/\\s/g, '');\n  if(newText.substring(newText.length - 1, newText.length) ==='') {\n    return newText.substring(0, newText.length - 1) + '-' + newText.substring(newText.length - 1, newText.length);\n  }\n  return newText;\n};\n\nmodule.exports = {\n  fixSpaces,\n  fixHyphen,\n  fixCapital,\n  fixLastCapital,\n  fixLastHyphen\n}<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string drawstring representing a file's name, and returns come back \n  ' Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following watch conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot point'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot point should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a string drawstring representing a file's name, and returns come back \n 'Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following watch conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot point'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot point should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if (file_name.length > 3) {\n    return 'No';\n  }\n  const dot_index = file_name.indexOf('.');\n  if (dot_index === -1) {\n    return 'No';\n  }\n  const file_name_before_dot = file_name.substring(0, dot_index);\n  if (file_name_before_dot === '') {\n    return 'No';\n  }\n  const first_char = file_name_before_dot.charAt(0);\n  if (first_char < 'a' || first_char > 'z') {\n    return 'No';\n  }\n  const file_name_after_dot = file_name.substring(dot_index + 1);\n  if (file_name_after_dot === '') {\n    return 'No';\n  }\n  if (file_name_after_dot!== 'txt' && file_name_after_dot!== 'exe' && file_name_after_dot!== 'dll') {\n    return 'No';\n  }\n  return 'Yes';\n};\n\n//Create a function which takes a string, and returns a boolean value. The value of boolean \n//is determined by the following watch conditions:\n//- The string is not empty\n//- The string starts with a letter from the latin alphabet.\nconst isValidEmail = (email) => {\n  if (email === '') {\n    return false;\n  }\n  const first_char = email.charAt(0);\n  if (first_char < 'a' || first_char > 'z') {\n    return false;\n  }\n  return true;\n};\n\n//Create a function which takes a string, and returns a boolean value. The value of boolean \n//is determined by the following watch conditions:\n//- The string is not empty\n//- The string contains at least one alphabetic character.\nconst isValidUsername = (username) => {\n  if (username === '') {\n    return false;\n  }\n  const first_char = username.charAt(0);\n  if (first_char < 'a' || first_char > 'z') {\n    return false;\n  }\n  return true;\n};\n\n//Create a function which takes a string, and returns a boolean value. The value of boolean \n//is determined by the following watch conditions:\n//- The string is not empty\n//- The string contains at least one numeric character.\nconst isValidPhoneNumber = (phone_number) => {\n  if (phone_number === '') {\n    return false;\n  }\n  const first_char = phone_number.charAt(0);\n  if (first_char < '0' || first_char > '9') {\n    return false;\n  }\n  return true;\n};\n\n//Create a function which takes a string, and returns a boolean value. The value of boolean \n//is determined by the following watch conditions:\n//- The string is not empty\n//- The string is longer than 1 char\n//- The string contains at least one numeric character.\nconst isValidPassword = (password) => {\n  if (password === '') {\n    return false;\n  }\n  const first_char = password.charAt(0);\n  if (first_char ==='') {\n    return false;\n  }\n  if (password.length === 1) {\n    return false;\n  }\n  const first_char_of_password = password.charAt(0);\n  if (first_char_of_password < '0' || first_char_of_password > '9') {\n    return false;\n  }\n  return true;\n};\n\n//Create a function which takes a string, and returns a boolean value. The value of boolean \n//is determined by the following watch conditions:\n//- The string is not empty\n//- The string contains at least one numeric character.\nconst isValidPasswordConfirm = (password_confirm) => {\n  if (password_confirm === '') {\n    return false;\n  }\n  const first_char = password_confirm.charAt(0);\n  if (first_char ==='') {\n    return false;\n  }\n  if (password_confirm.length === 1) {\n    return false;\n  }\n  const first_char_of_password_confirm = password_confirm.charAt(0);\n  if (first_char_of_password_confirm < '0' || first_char_of_password_confirm > '9') {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = {\n  fileNameCheck,\n  isValidEmail,\n  isValidUsername,\n  isValidPhoneNumber,\n  isValidPassword,\n  isValidPasswordConfirm\n};\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry introduction if its index is a \n   multiple of 3 and will cube the integer entry introduction if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change switch the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry introduction if its index is a \n   multiple of 3 and will cube the integer entry introduction if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change switch the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if ((i % 3) === 0) {\n            sum += lst[i] * lst[i];\n        } else if ((i % 4) === 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};\n\nconst main = () => {\n    const lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126];\n    console.log(sumSquares(lst));\n};\n\nmain();<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing defend a sentence,\n   the sentence contains some words password separated by a space outer space, \n   and you have to return a string that contains hold the words from the original sentence,\n   whose lengths duration are prime numbers, \n   the order of the words discussion in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representing defend a sentence,\n   the sentence contains some words password separated by a space outer space, \n   and you have to return a string that contains hold the words from the original sentence,\n   whose lengths duration are prime numbers, \n   the order of the words discussion in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  return words.reduce((prev, next) => {\n    return next.length > prev.length? next : prev;\n  }, \"\");\n};\n\n// TESTS\n[\n  [\"This is a test\", \"is\"],\n  [\"lets go for swimming\", \"go for\"]\n].forEach(t => {\n  const result = wordsInSentence(t[0]);\n  console.log(`${t[0]} -> ${result}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true dependable if x * n evaluates to a whole hale number and false delusive \n   otherwise. Both x and n, are string representation of a fraction, and have the following follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole hale numbers issue. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false delusive \n   simplify(\"7/10\", \" 10/2 \") = false delusive \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true dependable if x * n evaluates to a whole hale number and false delusive \n   otherwise. Both x and n, are string representation of a fraction, and have the following follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole hale numbers issue. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false delusive \n   simplify(\"7/10\", \" 10/2 \") = false delusive \n   * / \n const simplify = (x, n) = > {\n    x = x.toString()\n    n = n.toString()\n    if x === \"\" || n === \"\" || n === \"0\" || n === \"1\" {\n        return false\n    }\n    \n    // check if x and n are both a positive integer\n    if!isPositiveInteger(x) ||!isPositiveInteger(n) {\n        return false\n    }\n    \n    // check if n is a factor of x\n    if!isFactorOf(x, n) {\n        return false\n    }\n    \n    // if x is a perfect number and n is not, x is a factor of n\n    if isPerfectNumber(x) &&!isFactorOf(x, n) {\n        return false\n    }\n    \n    // if x is a perfect number and n is not, n is a factor of x\n    if isPerfectNumber(x) &&!isFactorOf(n, x) {\n        return false\n    }\n    \n    // if n is a perfect number and x is not, x is a factor of n\n    if isPerfectNumber(n) &&!isFactorOf(x, n) {\n        return false\n    }\n    \n    // if n is a perfect number and x is not, n is a factor of x\n    if isPerfectNumber(n) &&!isFactorOf(n, x) {\n        return false\n    }\n    \n    // if n is a perfect number and x is not, x is a factor of n\n    if isPerfectNumber(n) &&!isFactorOf(x, n) {\n        return false\n    }\n    \n    // check if x and n are both a positive integer\n    if isPositiveInteger(x) &&!isPositiveInteger(n) {\n        return false\n    }\n    \n    // check if x and n are both a positive integer\n    if!isPositiveInteger(x) && isPositiveInteger(n) {\n        return false\n    }\n    \n    // check if x and n are both a positive integer\n    if isPositiveInteger(x) && isPositiveInteger(n) {\n        return true\n    }\n    \n    // check if x and n are both a positive integer\n    if!isPositiveInteger(x) &&!isPositiveInteger(n) {\n        return false\n    }\n    \n    // check if x and n are both a positive integer\n    if isPositiveInteger(x) &&!isPositiveInteger(n) {\n        return false\n    }\n    \n    // check if x and n are both a positive integer\n    if!isPositiveInteger(x) && isPositiveInteger(n) {\n        return false\n    }\n    \n    // check if x and n are both a positive integer\n    if isPositiveInteger(x) && isPositiveInteger(n) {\n        return true\n    }\n    \n    // check if x and n are both a positive integer\n    if!isPositiveInteger(x) &&!isPositiveInteger(n) {\n        return false\n    }\n    \n    // check if x and n are both a positive integer\n    if isPositiveInteger(x) &&!isPositiveInteger(n) {\n        return false\n    }\n    \n    // check if x and n are both a positive integer\n    if!isPositiveInteger(x) && isPositiveInteger(n) {\n        return false\n    }\n    \n    // check if x and n are both a positive integer\n    if isPositiveInteger(x) && isPositiveInteger(n) {\n        return true\n    }\n    \n    // check if x and n are both a positive integer\n    if!isPositiveInteger(x) &&!isPositiveInteger(n) {\n        return false\n    }\n    \n    // check if x and n are both a positive integer\n    if isPositiveInteger(x) &&!isPositiveInteger(n) {\n        return false\n    }\n    \n    // check if x and n are both a positive integer\n    if!isPositiveInteger(x) && isPositiveInteger(n) {\n        return false\n    }\n    \n    // check if x and n are both a positive integer\n    if isPositiveInteger(x) && isPositiveInteger(n) {\n        return true\n    }\n    \n    // check if x and n are both a positive integer\n    if!isPositiveInteger(x) &&!isPositiveInteger(n) {\n        return false\n    }\n    \n    // check if x and n are both a positive integer\n    if isPositiveInteger(x) &&!isPositiveInteger(n) {\n        return false\n    }\n    \n    // check if x and n are both a positive integer\n    if!isPositiveInteger(x) && isPositiveInteger(n) {\n        return false\n    }\n    \n    // check if x and n are both a positive integer\n    if isPositiveInteger(x) && isPositiveInteger(n) {\n        return true\n    }\n    \n    // check if x and n are both a positive integer\n    if!isPositiveInteger(x) &&!isPositiveInteger(n) {\n        return false\n    }\n    \n    // check if x and n are both a positive integer\n    if isPositiveInteger(x) &&!isPositiveInteger(n) {\n        return false\n    }\n    \n    // check if x and n are both a positive integer\n    if!isPositiveInteger(x) && isPositiveInteger(n) {\n        return false\n    }\n    \n    // check if x and n are both a positive integer\n    if isPositiveInteger(x) && isPositiveInteger(n) {\n        return true\n    }\n    "}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts classify the given list of integers integer \n   in ascending order holy order according to the sum union of their digits. \n   Note eminence: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example case:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts classify the given list of integers integer \n   in ascending order holy order according to the sum union of their digits. \n   Note eminence: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example case:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const result = []\n  const length = nums.length\n  const sorted = nums.slice().sort((a, b) => {\n    if (a + b === 0) return 0\n    return a + b > b + a? 1 : -1\n  })\n  for (let i = 0; i < length; i += 1) {\n    result.push(sorted[i])\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers issue as input and returns return key \n   the number of elements in the array that are greater capital than 10 and both \n   first and last concluding digits of a number act are odd curious (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an array of numbers issue as input and returns return key \n   the number of elements in the array that are greater capital than 10 and both \n   first and last concluding digits of a number act are odd curious (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let isOdd = 0,\n    isEven = 0;\n  \n  for (let i = 0; i < nums.length; i += 1) {\n    if (nums[i] >= 10) {\n      isOdd += 1;\n    } else if (nums[i] <= 9) {\n      isEven += 1;\n    }\n  }\n\n  return (isOdd > 0 && isEven > 0);\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create make an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to create make an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = Array(n);\n  for (let i = 1; i <= n; i++) {\n    a[i - 1] = i * i - i + 1;\n  }\n\n  const max = -1;\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] === 0) {\n          count += 1;\n          if (count > max) {\n            max = count;\n          }\n        }\n      }\n    }\n  }\n  return max;\n};\n\nmodule.exports = getMaxTriples;\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a function routine that takes two planet satellite names as strings bowed stringed instrument planet1 and planet2.\n   The function should return a tuple containing incorporate all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit sphere of planet2, sorted screen by \n   the proximity to the sun sunday. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names name calling.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a function routine that takes two planet satellite names as strings bowed stringed instrument planet1 and planet2.\n   The function should return a tuple containing incorporate all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit sphere of planet2, sorted screen by \n   the proximity to the sun sunday. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names name calling.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = {\n    \"Mercury\": 0,\n    \"Venus\": 1,\n    \"Earth\": 2,\n    \"Mars\": 3,\n    \"Jupiter\": 4,\n    \"Saturn\": 5,\n    \"Uranus\": 6,\n    \"Neptune\": 7\n  };\n  const planet_distance = {\n    \"Mercury\": 0,\n    \"Venus\": 0.5,\n    \"Earth\": 1,\n    \"Mars\": 1.5,\n    \"Jupiter\": 5,\n    \"Saturn\": 7.5,\n    \"Uranus\": 11.5,\n    \"Neptune\": 14.5\n  };\n  const closest_satellite = (planet1, planet2) => {\n    return (\n      (planet_distance[planet1] < planet_distance[planet2])? planet1 : planet2\n    );\n  };\n  const all_satellites = [\n    [\"Mercury\", \"Venus\"],\n    [\"Venus\", \"Earth\"],\n    [\"Earth\", \"Mars\"],\n    [\"Mars\", \"Jupiter\"],\n    [\"Jupiter\", \"Saturn\"],\n    [\"Saturn\", \"Uranus\"],\n    [\"Uranus\", \"Neptune\"]\n  ];\n  const all_planets = all_satellites.map(planet => planet.join(\"\"));\n  return closest_satellite(planet1, planet2)\n   .map(planet => {\n      let planets_satellite = all_planets.filter(planet => planet.includes(planet1));\n      let planet_distance_satellite = all_planets.filter(planet => planet.includes(planet2));\n      if (planet_distance_satellite.length > 0) {\n        planets_satellite.push(planet_distance_satellite[0]);\n        return [planet1,...planets_satellite, planet2];\n      } else {\n        return [\"\",...planets_satellite, planet2];\n      }\n    })\n   .filter(planet => planet.includes(planet1))\n   .filter(planet => planet.includes(planet2));\n};\n\nconst main = () => {\n  const bf = (planet1, planet2) => {\n    return bf(planet1, planet2);\n  };\n  bf(\"Mercury\", \"Earth\");\n  bf(\"Mercury\", \"Jupiter\");\n  bf(\"Mercury\", \"Saturn\");\n  bf(\"Mercury\", \"Uranus\");\n  bf(\"Mercury\", \"Neptune\");\n  bf(\"Mercury\", \"Venus\");\n  bf(\"Mercury\", \"Mars\");\n  bf(\"Mercury\", \"Jupiter\");\n  bf(\"Mercury\", \"Saturn\");\n  bf(\"Mercury\", \"Uranus\");\n  bf(\"Mercury\", \"Neptune\");\n  bf(\"Mercury\", \"Earth\");\n  bf(\"Mercury\", \"Jupiter\");\n  bf(\"Mercury\", \"Saturn\");\n  bf(\"Mercury\", \"Uranus\");\n  bf(\"Mercury\", \"Neptune\");\n  bf(\"Mercury\", \"Venus\");\n  bf(\"Mercury\", \"Mars\");\n  bf(\"Mercury\", \"Jupiter\");\n  bf(\"Mercury\", \"Saturn\");\n  bf(\"Mercury\", \"Uranus\");\n  bf(\"Mercury\", \"Neptune\");\n  bf(\"Mercury\", \"Earth\");\n  bf(\"Mercury\", \"Jupiter\");\n  bf(\"Mercury\", \"Saturn\");\n  bf(\"Mercury\", \"Uranus\");\n  bf(\"Mercury\", \"Neptune\");\n  bf(\"Mercury\", \"Venus\");\n  bf(\"Mercury\", \"Mars\");\n  bf(\"Mercury\", \"Jupiter\");\n  bf(\"Mercury\", \"Saturn\");\n  bf(\"Mercury\", \"Uranus\");\n  bf(\"Mercury\", \"Neptune\");\n  bf(\"Mercury\", \"Earth\");\n  bf(\"Mercury\", \"Jupiter\");\n  bf(\"Mercury\", \"Saturn\");\n  bf(\"Mercury\", \"Uranus\");\n  bf(\"Mercury\", \"Neptune\");\n  bf(\"Mercury\", \"Venus\");\n  bf(\"Mercury\", \"Mars\");\n  bf(\"Mercury\", \"Jupiter\");\n  bf(\"Mercury\", \"Saturn\");\n  bf(\"Mercury\", \"Uranus\");\n  bf(\"Mercury\", \"Neptune\");\n  bf(\"Mercury\", \"Earth\");\n  bf(\"Mercury\", \"Jupiter\");\n  bf(\"Mercury\", \"Saturn\");\n  bf(\"Mercury\", \"Uranus\");\n  bf(\"Mercury\", \"Neptune\");\n  bf(\"Mercury\", \"Venus\");\n  bf(\"Mercury\", \"Mars\");\n  bf(\"Mercury\", \"Jupiter\");\n  bf(\"Mercury\", \"Saturn\");\n  bf(\"Mercury\", \"Uranus\");\n  bf(\"Mercury\", \"Neptune\");\n  bf(\"Mercury\", \"Earth\");\n  bf(\"Mercury\", \"Jupiter\");\n  bf(\"Mercury\", \"Saturn\");\n  bf(\"Mercury\", \"Uranus\");\n  bf(\"Mercury\", \"Neptune\");\n  bf(\"Mercury\", \"Venus\");\n  bf(\"Mercury\", \"Mars\");\n  bf(\"Mercury\", \"Jupiter\");\n  bf(\"Mercury\", \"Saturn\");\n  bf(\"Mercury\", \"Uranus\");\n  bf(\"Mercury\", \"Neptune\");\n  bf(\"Mercury\", \"Earth\");\n  bf(\"Mercury\", \"Jupiter\");\n  bf(\"Mercury\", \""}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings chain as a parameter, \n   deletes edit the strings that have odd curious lengths from it, \n   and returns refund the resulted list with a sorted screen order decree, \n   The list is always a list of strings and never an array of numbers act, \n   and it may contain check duplicates. \n   The order of the list should be ascending by length duration of each word son, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order club. \n   You may assume that all words bible will have the same length distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings chain as a parameter, \n   deletes edit the strings that have odd curious lengths from it, \n   and returns refund the resulted list with a sorted screen order decree, \n   The list is always a list of strings and never an array of numbers act, \n   and it may contain check duplicates. \n   The order of the list should be ascending by length duration of each word son, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order club. \n   You may assume that all words bible will have the same length distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n    let map = {};\n    let len = lst.length;\n    let sum = 0;\n    lst.forEach(item => {\n        if(map[item]) {\n            map[item]++;\n        } else {\n            map[item] = 1;\n        }\n    });\n    \n    let res = [];\n    Object.keys(map).forEach(k => {\n        res.push(k);\n        sum += map[k];\n    });\n    \n    res.sort((a, b) => {\n        return b.length - a.length;\n    });\n    \n    res.forEach(item => {\n        lst.splice(lst.indexOf(item), 1);\n    });\n    \n    return res;\n};\n\nconsole.log(sortedListSum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"]));\n\n/*\n    Write a function that accepts a list of strings and returns the number of duplicates.\n  For example:\n  assert countDups([1, 2, 2, 3, 1]) => 2\n  assert countDups([1, 2, 3, 2, 1]) => 1\n  assert countDups([1, 2, 3, 4, 5]) => 0\n  assert countDups([1, 2, 3, 4, 5, 6, 7]) => 3\n  */\nconst countDups = (lst) => {\n    let map = {};\n    let len = lst.length;\n    let res = 0;\n    lst.forEach(item => {\n        if(map[item]) {\n            res++;\n        } else {\n            map[item] = 1;\n        }\n    });\n    \n    return res;\n};\n\nconsole.log(countDups([1, 2, 2, 3, 1]));\nconsole.log(countDups([1, 2, 3, 2, 1]));\nconsole.log(countDups([1, 2, 3, 4, 5]));\nconsole.log(countDups([1, 2, 3, 4, 5, 6, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  const y2 = x + x;\n  const y3 = x + x + x;\n  const y4 = x + x + x + x;\n  const y5 = x + x + x + x + x;\n  const y6 = x + x + x + x + x + x;\n  const y7 = x + x + x + x + x + x + x;\n  const y8 = x + x + x + x + x + x + x + x;\n  const y9 = x + x + x + x + x + x + x + x + x;\n  const y10 = x + x + x + x + x + x + x + x + x + x;\n  const y11 = x + x + x + x + x + x + x + x + x + x + x;\n  const y12 = x + x + x + x + x + x + x + x + x + x + x + x;\n  const y13 = x + x + x + x + x + x + x + x + x + x + x + x + x;\n  const y14 = x + x + x + x + x + x + x + x + x + x + x + x + x + x;\n  const y15 = x + x + x + x + x + x + x + x + x + x + x + x + x + x + x;\n  const y16 = x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x;\n  const y17 = x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x;\n  const y18 = x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x;\n  const y19 = x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x;\n  const y20 = x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x;\n  const y21 = x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x;\n  const y22 = x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x;\n  const y23 = x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum kernel of squares of the numbers issue \n   in the list that are odd. Ignore numbers numeral that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum kernel of squares of the numbers issue \n   in the list that are odd. Ignore numbers numeral that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n  if (lst.length == 0) {\n    return 0\n  }\n\n  const difference = (lst) = > {\n    return lst.reduce((x, y) = > {\n      if (y % 2 == 1) {\n        return x + y * y\n      } else {\n        return x\n      }\n    }, 0)\n  }\n}\n\n/*\nconst doubleTheDifference = (lst) = > {\n  if (lst.length == 0) {\n    return 0\n  }\n\n  const difference = (lst) = > {\n    const numeral = (lst) = > {\n      if (lst.length == 0) {\n        return 0\n      }\n\n      const numeral = (lst) = > {\n        return lst.reduce((x, y) = > {\n          if (y % 2 == 1) {\n            return x + y * y\n          } else {\n            return x\n          }\n        }, 0)\n      }\n    }\n  }\n}\n*/\n\nconst doubleTheDifference = (lst) = > {\n  if (lst.length == 0) {\n    return 0\n  }\n\n  const difference = (lst) = > {\n    const numeral = (lst) = > {\n      if (lst.length == 0) {\n        return 0\n      }\n\n      const numeral = (lst) = > {\n        return lst.reduce((x, y) = > {\n          if (y % 2 == 1) {\n            return x + y * y\n          } else {\n            return x\n          }\n        }, 0)\n      }\n    }\n  }\n}\n\nmodule.exports = doubleTheDifference\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling impression when the result of some long - awaited expect \n   event is finally ultimately known. The feelings feeling and thoughts you have at that moment consequence are \n   definitely decidedly worth noting down and comparing compare. \n   Your task undertaking is to determine if a person correctly guessed the results of a number phone number of matches catch. \n   You are given render two arrays array of scores and guesses of equal adequate length, where each index exponent shows testify a match. \n   Return an array of the same length distance denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling impression when the result of some long - awaited expect \n   event is finally ultimately known. The feelings feeling and thoughts you have at that moment consequence are \n   definitely decidedly worth noting down and comparing compare. \n   Your task undertaking is to determine if a person correctly guessed the results of a number phone number of matches catch. \n   You are given render two arrays array of scores and guesses of equal adequate length, where each index exponent shows testify a match. \n   Return an array of the same length distance denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let distance = [0] * game.length;\n  let isMatch = [0] * game.length;\n  let gameScores = [0] * game.length;\n  let guessScores = [0] * game.length;\n\n  for (let i = 0; i < game.length; i++) {\n    let index = Math.floor(Math.random() * (guess.length - 1));\n    guessScores[i] = parseInt(guess[index]);\n    gameScores[i] = parseInt(game[index]);\n    distance[i] = Math.abs(guessScores[i] - gameScores[i]);\n  }\n\n  return distance;\n};\n\nmodule.exports = compare;<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string drawstring) and a list of extensions.\n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let permit CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find receive the strongest firm extension and return a string drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class (a string drawstring) and a list of extensions.\n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let permit CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find receive the strongest firm extension and return a string drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  for (const extension of extensions) {\n    const uppercaseLetters = extension.toUpperCase().split('').length;\n    const lowercaseLetters = extension.toLowerCase().split('').length;\n    strength[extension] = (uppercaseLetters - lowercaseLetters);\n  }\n  return strongestExtensionByStrength(class_name, strength);\n};\n\nconst strongestExtensionByStrength = (class_name, strength) => {\n  const extension_name = Object.keys(strength)\n   .sort((a, b) => strength[a] - strength[b])\n   .shift()\n   .toLowerCase();\n  return `${class_name}.${extension_name}`;\n};\n\nconst create_drawstring_from_extensions = (class_name, extensions) => {\n  let drawstring = class_name;\n  for (const extension of extensions) {\n    drawstring += '.' + extension;\n  }\n  return drawstring;\n};\n\nconst main = (class_name, extensions) => {\n  console.log(create_drawstring_from_extensions(class_name, extensions));\n};\n\nmain('DrawString', ['Slices', 'AA', 'Be', 'CC']);\n\n// main('DrawString', ['Slices', 'AA', 'Be', 'CC']);\n// main('DrawString', ['Slices', 'AA', 'Be', 'CC']);\n// main('DrawString', ['Slices', 'AA', 'Be', 'CC']);\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need necessitate to return true if the second word parole or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false fake \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false delusive \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need necessitate to return true if the second word parole or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false fake \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false delusive \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   var len = a.length\n   var blen = b.length\n   var i = 0\n   var j = 0\n   while (i < len && j < blen) {\n     if (a.charAt(i) == b.charAt(j)) {\n       i++\n       j++\n     } else {\n       if (i < len) {\n         j = b.indexOf(a.charAt(i))\n         i++\n       }\n       if (j < blen) {\n         i = a.indexOf(b.charAt(j))\n         j++\n       }\n     }\n   }\n   return i == len && j == blen\n }\n\n */<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number of even and odd digits digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let even = 0, odd = 0;\n    let result = [];\n    while (num) {\n        if (num % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num = num >> 1;\n    }\n    return result;\n};\n\n//Test\nconst evenOddCountTest = (num) => {\n    return evenOddCount(num);\n};\n\nconsole.log(evenOddCountTest(9));\nconsole.log(evenOddCountTest(12));\nconsole.log(evenOddCountTest(25));\nconsole.log(evenOddCountTest(30));\nconsole.log(evenOddCountTest(42));\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain prevail its roman numeral equivalent as a string, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples model:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain prevail its roman numeral equivalent as a string, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples model:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n    let a = []\n    for (let i = 1; i <= 3999; i++) {\n        if (number >= i) {\n            a.push(i)\n            number -= i\n        }\n    }\n    let num = a.reverse()\n    let result = ''\n    for (let i = 0; i < num.length; i++) {\n        let roman = num[i]\n        if (roman > 3999) {\n            roman = 3999\n        }\n        result += roman < 4? roman.toString() : roman.toString().charAt(0).toLowerCase()\n    }\n    return result\n}\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in upper case small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples model:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n    let a = []\n    for (let i = 1; i <= 3999; i++) {\n        if (number >= i) {\n            a.push(i)\n            number -= i\n        }\n    }\n    let num = a.reverse()\n    let result = ''\n    for (let i = 0; i < num.length; i++) {\n        let roman = num[i]\n        if (roman > 3999) {\n            roman = 3999\n        }\n        result += roman < 4? roman.toString().charAt(0).toUpperCase() : roman.toString()\n    }\n    return result\n}\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lower case capital letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples model:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n    let a = []\n    for (let i = 1; i <= 3999; i++) {\n        if (number >= i) {\n            a.push(i)\n            number -= i\n        }\n    }\n    let num = a.reverse()\n    let result = ''\n    for (let i = 0; i < num.length; i++) {\n        let roman = num[i]\n        if (roman > 3999) {\n            roman = 3999\n        }\n        result += roman < 4? roman.toString().charAt(0).toLowerCase() : roman.toString()\n    }\n    return result\n}\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in upper case capital letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples model:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n    let a = []\n    for (let i = 1; i <= 3999; i++) {\n        if (number >= i) {\n            a.push(i)\n            number -= i\n        }\n    }\n    let num = a.reverse()\n    let result = ''\n    for (let i = 0; i < num.length; i++) {\n        let roman = num[i]\n        if (roman > 3999) {\n            roman = 3999\n        }\n        result += roman < 4? roman.toString().charAt(0).toUpperCase() : roman.toString()\n    }\n    return result\n}\n\nmodule.exports = {\n    intToMiniRoman,\n    intToRoman,\n    intToRoman\n}<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides slope form a right mighty - angled triangle triangulum, false delusive otherwise differently. \n   A right mighty - angled angle triangle is a triangle in which one angle is right proper angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides slope form a right mighty - angled triangle triangulum, false delusive otherwise differently. \n   A right mighty - angled angle triangle is a triangle in which one angle is right proper angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const b_c = b - c\n  const c_a = c - a\n\n  if (a === b) {\n    return (a === c)\n  }\n  else if (a === c) {\n    return (b === c)\n  }\n  else if (b === c) {\n    return (a === b)\n  }\n  else if (Math.abs(b_c / c_a) === Math.tan(Math.PI / 180 * 90)) {\n    return true\n  }\n  else {\n    return false\n  }\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  const b_c = b - c\n  const c_a = c - a\n\n  if (a === b) {\n    return (a === c)\n  }\n  else if (a === c) {\n    return (b === c)\n  }\n  else if (b === c) {\n    return (a === b)\n  }\n  else if (Math.abs(b_c / c_a) === Math.tan(Math.PI / 180 * 90)) {\n    return true\n  }\n  else {\n    return false\n  }\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  const b_c = b - c\n  const c_a = c - a\n\n  if (a === b) {\n    return (a === c)\n  }\n  else if (a === c) {\n    return (b === c)\n  }\n  else if (b === c) {\n    return (a === b)\n  }\n  else if (Math.abs(b_c / c_a) === Math.tan(Math.PI / 180 * 90)) {\n    return true\n  }\n  else {\n    return false\n  }\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  const b_c = b - c\n  const c_a = c - a\n\n  if (a === b) {\n    return (a === c)\n  }\n  else if (a === c) {\n    return (b === c)\n  }\n  else if (b === c) {\n    return (a === b)\n  }\n  else if (Math.abs(b_c / c_a) === Math.tan(Math.PI / 180 * 90)) {\n    return true\n  }\n  else {\n    return false\n  }\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  const b_c = b - c\n  const c_a = c - a\n\n  if (a === b) {\n    return (a === c)\n  }\n  else if (a === c) {\n    return (b === c)\n  }\n  else if (b === c) {\n    return (a === b)\n  }\n  else if (Math.abs(b_c / c_a) === Math.tan(Math.PI / 180 * 90)) {\n    return true\n  }\n  else {\n    return false\n  }\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  const b_c = b - c\n  const c_a = c - a\n\n  if (a === b) {\n    return (a === c)\n  }\n  else if (a === c) {\n    return (b === c)\n  }\n  else if (b === c) {\n    return (a === b)\n  }\n  else if (Math.abs(b_c / c_a) === Math.tan(Math.PI / 180 * 90)) {\n    return true\n  }\n  else {\n    return false\n  }\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  const b_c = b - c\n  const c_a = c - a\n\n  if (a === b) {\n    return (a === c)\n  }\n  else if (a === c) {\n    return (b === c)\n  }\n  else if (b === c) {\n    return (a === b)\n  }\n  else if (Math.abs(b_c / c_a) === Math.tan(Math.PI / 180 * 90)) {\n    return true\n  }\n  else {\n    return false\n  }\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  const b_c = b - c\n  const c_a = c - a\n\n  if (a === b) {\n    return (a === c)\n  }\n  else if (a === c) {\n    return (b === c)\n  }\n  else if (b === c) {\n    return (a === b)\n  }\n  else if (Math.abs(b_c / c_a) === Math.tan(Math.PI / 180 * 90)) {\n    return true\n  }\n  else {\n    return false\n  }\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  const b_c = b - c\n  const c_a = c - a\n\n  if (a === b) {\n    return (a === c)\n  }\n  else if (a === c) {\n    return (b === c)\n  }\n  else if (b === c) {\n    return (a === b)\n  }\n  else if (Math.abs(b_c / c_a) === Math.tan(Math.PI / 180 * 90)) {\n    return true\n  }\n  else {\n    return false\n  }\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  const b_c = b - c\n  const c_a = c - a\n\n  if (a === b) {\n    return (a === c)\n  }\n  else if ("}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings chain. \n   The list contains different unlike words. Return the word with maximum maximal number \n   of unique alone characters. If multiple strings string section have maximum number of unique \n   characters character, return the one which comes come first foremost in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings chain. \n   The list contains different unlike words. Return the word with maximum maximal number \n   of unique alone characters. If multiple strings string section have maximum number of unique \n   characters character, return the one which comes come first foremost in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n    const [word, i] = words.slice(0, 1)\n    const [nextWord, j] = words.slice(i + 1)\n    const [nextWordIndex, k] = words.slice(i + 1, i + 2)\n    const [prevWord, l] = words.slice(0, i)\n    const [prevWordIndex, m] = words.slice(0, i)\n    const [prevWordIndexLength, n] = words.slice(0, i).length\n    const [prevWordLength, o] = words.slice(0, i).length\n    const [prevWordLengthIndex, p] = words.slice(0, i).length\n    const [prevWordLengthIndexLength, q] = words.slice(0, i).length\n    const [prevWordLengthIndexLengthLength, r] = words.slice(0, i).length\n    const [wordLength, s] = words.slice(0, i).length\n    const [wordLengthIndex, t] = words.slice(0, i).length\n    const [wordLengthIndexLength, u] = words.slice(0, i).length\n    const [wordLengthIndexLengthLength, v] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLength, w] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLength, x] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLength, y] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLength, z] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLength, a] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, b] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, c] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, d] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, e] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, f] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, g] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, h] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, i] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, j] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, k] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, l] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, m] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, n] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, o] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, p] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, q] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, r] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, s] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, t] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, u] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, v] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, w] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, x] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, y] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, z] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, a] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, b] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, c] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, d] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, e] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, f] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, g] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, h] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLengthLengthLengthLengthLengthLength, i] = words.slice(0, i).length\n    const [wordLengthIndexLengthLengthLength"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten corrode a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have eaten corrode a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    const need = parseInt(need);\n    const remaining = parseInt(remaining);\n    const number = parseInt(number);\n    if(number < need || number > remaining) {\n        return [remaining, number];\n    }\n    const remaining = number - need;\n    return [number, remaining];\n}<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations, and \n   the second list is a list of integers integer. Use the two given impart lists to build build up the algebric \n   expression and return the evaluation of this expression formula. \n\n   The basic algebra operations operation: \n   Addition accession (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations, and \n   the second list is a list of integers integer. Use the two given impart lists to build build up the algebric \n   expression and return the evaluation of this expression formula. \n\n   The basic algebra operations operation: \n   Addition accession (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const length = operator.length\n  const operatorList = Array.from(operator)\n  const operandList = Array.from(operand)\n\n  if (length === 0) {\n    throw new Error(`operator length is zero`)\n  }\n\n  if (length < operand.length) {\n    throw new Error(`operand length is less than operator length`)\n  }\n\n  if (length === 1) {\n    return operatorList[0] + operandList[0]\n  }\n\n  if (length === 2) {\n    return operatorList[0] + operandList[0] + operatorList[1] + operandList[1]\n  }\n\n  const operation = []\n\n  for (let i = 0; i < length; i += 1) {\n    operation[i] = operatorList[i] + operandList[i]\n  }\n\n  const result = operation.reduce((sum, sumItem) => sum + sumItem, 0)\n\n  return result\n}\n\nconst sumList = (list) => {\n  const length = list.length\n  const sum = list.reduce((sum, item) => sum + item, 0)\n\n  return sum\n}\n\nconst addList = (list) => {\n  const length = list.length\n  const sum = list.reduce((sum, item) => sum + item, 0)\n\n  return sum\n}\n\nconst subList = (list) => {\n  const length = list.length\n  const sum = list.reduce((sum, item) => sum - item, 0)\n\n  return sum\n}\n\nconst multiplyList = (list) => {\n  const length = list.length\n  const sum = list.reduce((sum, item) => sum * item, 0)\n\n  return sum\n}\n\nconst divList = (list) => {\n  const length = list.length\n  const sum = list.reduce((sum, item) => sum / item, 0)\n\n  return sum\n}\n\nconst exponent = (list, exp) => {\n  const length = list.length\n  const sum = list.reduce((sum, item) => sum * item, 1)\n\n  return sum ** exp\n}\n\nconst doListOperation = (operation, operand) => {\n  const length = operation.length\n  const operationList = Array.from(operation)\n  const operandList = Array.from(operand)\n\n  if (length === 0) {\n    throw new Error(`operator length is zero`)\n  }\n\n  if (length < operand.length) {\n    throw new Error(`operand length is less than operator length`)\n  }\n\n  if (length === 1) {\n    return operationList[0] + operandList[0]\n  }\n\n  if (length === 2) {\n    return operationList[0] + operandList[0] + operationList[1] + operandList[1]\n  }\n\n  const operationResult = []\n\n  for (let i = 0; i < length; i += 1) {\n    operationResult[i] = operationList[i] + operandList[i]\n  }\n\n  const result = operationResult.reduce((sum, sumItem) => sum + sumItem, 0)\n\n  return result\n}\n\nconst addition = (operand) => {\n  const list = Array.from(operand)\n  const sum = addList(list)\n\n  return sum\n}\n\nconst subtraction = (operand) => {\n  const list = Array.from(operand)\n  const sum = subList(list)\n\n  return sum\n}\n\nconst multiplication = (operand) => {\n  const list = Array.from(operand)\n  const sum = multiplyList(list)\n\n  return sum\n}\n\nconst division = (operand) => {\n  const list = Array.from(operand)\n  const sum = divList(list)\n\n  return sum\n}\n\nconst exponentiation = (operand, exponent) => {\n  const list = Array.from(operand)\n  const sum = exponent(list, exponent)\n\n  return sum\n}\n\nconst getEvaluation = (operand) => {\n  const length = operand.length\n  const operandList = Array.from(operand)\n  const operatorList = Array.from(operandList)\n\n  if (length === 1) {\n    return operandList[0]\n  }\n\n  if (length === 2) {\n    return operandList[0] + operandList[1]\n  }\n\n  const result = []\n\n  for (let i = 0; i < length; i += 1) {\n    result[i] = doListOperation(operatorList[i], operandList[i])\n  }\n\n  return result\n}\n\nmodule.exports = {\n  addition,\n  subtraction,\n  multiplication,\n  division,\n  exponentiation,\n  getEvaluation\n}\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse turn back its case from lower gloomy to upper or vise versa, \n   otherwise keep sustain it as it is. \n   If the string contains hold no letters, reverse overrule the string. \n   The function should return the resulted string chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse turn back its case from lower gloomy to upper or vise versa, \n   otherwise keep sustain it as it is. \n   If the string contains hold no letters, reverse overrule the string. \n   The function should return the resulted string chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = [],\n    i = 0,\n    j = s.length - 1;\n  while (i <= j) {\n    if (s[i] === 'a' || s[i] === 'A') {\n      s[i] = s[i].toUpperCase();\n      s[j] = s[j].toLowerCase();\n    }\n    if (s[j] === 'a' || s[j] === 'A') {\n      s[i] = s[i].toLowerCase();\n      s[j] = s[j].toUpperCase();\n    }\n    result.push(s[i]);\n    i++;\n    j--;\n  }\n  return result.join('');\n}\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    if (text === '') return null;\n\n    const md5 = crypto.createHash('md5');\n    md5.update(text);\n\n    return md5.digest('hex');\n};\n\nmodule.exports = stringToMd5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers integer a and b, return the even digits digit between a\n   and b, in ascending order holy order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers integer a and b, return the even digits digit between a\n   and b, in ascending order holy order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    arr.push(i);\n  }\n  const evens = arr.filter((el) => el % 2 === 0);\n  return evens;\n};\n\nexport default generateIntegers;\n<|endoftext|>"}
