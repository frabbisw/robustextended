{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const closestElements = closestElements(numbers, threshold);\n  return closestElements.length > 1;\n};\n\n/*\n  Finds the two numbers closest to each other, given a list of numbers and a\n  threshold.\n  >>> closestElements([1.0, 2.0, 3.0], 0.5)\n  [1.5, 2.5]\n  */\nconst closestElements = (numbers, threshold) => {\n  return numbers.filter(number => Math.abs(number - threshold) < threshold);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   separate freestanding those group into separate strings string section and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   separate freestanding those group into separate strings string section and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore neglect any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  return paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n}\n\n// Separate each group of parentheses into its own string\nconst separateParenGroup = (group, parenthesis) => {\n  let group_string = group[0];\n  for (let i = 1; i < group.length; i++) {\n    group_string += parenthesis + group[i];\n  }\n  return group_string;\n}\n\n// Rebuild the string using the string section\nconst rebuildString = (sections, parenthesis) => {\n  let string_rebuilt = '';\n  for (let i = 0; i < sections.length; i++) {\n    string_rebuilt += sections[i] + parenthesis;\n  }\n  return string_rebuilt;\n}\n\n// Separate the string using the groups\nconst separateString = (string_rebuilt) => {\n  let sections = separateParenGroups(string_rebuilt);\n  return rebuildString(sections, '()');\n}\n\nconst removeParens = (string_rebuilt) => {\n  let sections = separateParenGroup(string_rebuilt, '()');\n  return rebuildString(sections, '');\n}\n\n// Test\nlet test_cases = [\n  ['( ) (( )) (( )( ))', '()()()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '()()()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '()()()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['( ) (( )) (( )( ))', '(())()()()'],\n  ['("}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating float point number, it can be decomposed disintegrate into \n   and integer part (largest bombastic integer smaller than given give number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating float point number, it can be decomposed disintegrate into \n   and integer part (largest bombastic integer smaller than given give number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    const integerPart = number.toFixed(0);\n    const decimalPart = number - parseFloat(integerPart);\n    const intPart = parseInt(integerPart);\n    return decimalPart.toFixed(0);\n};\n\nmodule.exports = truncateNumber;<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account that starts startle with \n   zero balance. Your task is to detect if at any point degree the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account that starts startle with \n   zero balance. Your task is to detect if at any point degree the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n    let operation = operations.shift();\n    let belowZero = false;\n    while (operations.length > 0) {\n        let current = operation;\n        operation = operations.shift();\n        if (current < 0) {\n            belowZero = true;\n            break;\n        }\n    }\n    return belowZero;\n};\n\nmodule.exports = belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  if (numbers.length === 0) {\n    throw new Error('list length must be greater than 0')\n  }\n  const mean = numbers.reduce((a, b) => a + b) / numbers.length\n  const sum = numbers.reduce((a, b) => a + b)\n  const diff = numbers.reduce((a, b) => a - b)\n  const mad = Math.abs(diff) / Math.sqrt(numbers.length)\n  return mad\n}\n\nmodule.exports = meanAbsoluteDeviation\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements element of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number 'delimeter' between every two consecutive elements element of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n    if (!numbers ||!delimeter) return numbers;\n\n    const len = numbers.length,\n        last = len - 1,\n        result = [];\n\n    for (let i = 0; i <= last; i++) {\n        result.push(numbers[i]);\n        if (i!== last) result.push(delimeter);\n    }\n\n    return result;\n};\n\nexport default intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string drawstring represented multiple groups group for nested parentheses separated classify by spaces. \n   For each of the group, output the deepest thick level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string drawstring represented multiple groups group for nested parentheses separated classify by spaces. \n   For each of the group, output the deepest thick level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_groups = paren_string.split(' ');\n  const level = [1,1];\n  const max_level = [1,1];\n  paren_groups.forEach(group => {\n    const current_level = parseNestedParens(group);\n    level.push(current_level[0]);\n    max_level.push(current_level[1]);\n  });\n  level.push(parseInt(paren_groups[0]));\n  max_level.push(parseInt(paren_groups[1]));\n  return [max_level[0], level[0]];\n}\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens2 = (paren_string) => {\n  const paren_groups = paren_string.split(' ');\n  const level = [1,1];\n  const max_level = [1,1];\n  paren_groups.forEach(group => {\n    const current_level = parseNestedParens2(group);\n    level.push(current_level[0]);\n    max_level.push(current_level[1]);\n  });\n  level.push(parseInt(paren_groups[0]));\n  max_level.push(parseInt(paren_groups[1]));\n  return [max_level[0], level[0]];\n}\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens3 = (paren_string) => {\n  const paren_groups = paren_string.split(' ');\n  const level = [1,1];\n  const max_level = [1,1];\n  paren_groups.forEach(group => {\n    const current_level = parseNestedParens3(group);\n    level.push(current_level[0]);\n    max_level.push(current_level[1]);\n  });\n  level.push(parseInt(paren_groups[0]));\n  max_level.push(parseInt(paren_groups[1]));\n  return [max_level[0], level[0]];\n}\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens4 = (paren_string) => {\n  const paren_groups = paren_string.split(' ');\n  const level = [1,1];\n  const max_level = [1,1];\n  paren_groups.forEach(group => {\n    const current_level = parseNestedParens4(group);\n    level.push(current_level[0]);\n    max_level.push(current_level[1]);\n  });\n  level.push(parseInt(paren_groups[0]));\n  max_level.push(parseInt(paren_groups[1]));\n  return [max_level[0], level[0]];\n}\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens5 = (paren_string) => {\n  const paren_groups = paren_string.split(' ');\n  const level = [1,1];\n  const max_level = [1,1];\n  paren_groups.forEach(group => {\n    const current_level = parseNestedParens5(group);\n    level.push(current_level[0]);\n    max_level.push(current_level[1]);\n  });\n  level.push(parseInt(paren_groups[0]));\n  max_level.push(parseInt(paren_groups[1]));\n  return [max_level[0], level[0]];\n}\n\nconst parseNestedParens_test = () => {\n  console.log(parseNestedParens('(()()) ((())) () ((())()())'));\n  console.log(parseNestedParens('(()()) ((())) () ((())()())'));\n  console.log(parseNestedParens('(()()) ((())) () ((())()())'));\n  console.log(parseNestedParens('(()()) ((())) () ((())()())'));\n  console.log(parseNestedParens('(()()) ((())) () ((())()())'));\n  console.log(parseNestedParens('(()()) ((())) () ((())()())'));\n  console.log(parseNestedParens('(()()) ((())) () ((())()())'));\n  console.log(parseNestedParens('(()()) ((())) () ((())()())'));\n  console.log(parseNestedParens('(()()) ((())) () ((())()())'));\n  console.log(parseNestedParens('(()()) ((())) () ((())()())'));\n  console.log(parseNestedParens('(()()) ((())) () ((())()())'));\n  console.log(parseNestedParens('(()()) ((())) () ((())()())'));\n  console.log(parseNestedParens('(()()) ((())) () ((())()())'));\n  console.log(parseNestedParens('(()()) ((())) () ((())()())'));\n  console.log(parseNestedParens('(()()) ((())) () ((())()())'));\n  console.log(parseNestedParens('(()()) ((())) () ((())()())'));\n  console.log(parseNestedParens('(()()) ((())) () ((())()"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain check given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contain check given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  let result = [];\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given a list of strings, return a list of words from those strings,\n  that don't start with 'a'.\n  >>> filterWords(['abc', 'bacd', 'cde', 'array'])\n  ['bacd', 'cde']\n  */\nconst filterWords = (strings) => {\n  let result = [];\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf('a')!== 0) {\n      result.push(strings[i]);\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given a list of words, return a list of strings, that are the same\n  length and where each character in each string occurs in the\n  corresponding word in the original list.\n  >>> sameLength([{length: 1, chars: ['a']}, {length: 2, chars: ['b', 'c']}, {length: 3, chars: ['d', 'e', 'f']}])\n  [{length: 1, chars: ['a']}, {length: 2, chars: ['b', 'c']}, {length: 3, chars: ['d', 'e', 'f']}]\n  >>> sameLength(['a', 'b', 'c'])\n  [{length: 1, chars: ['a']}, {length: 2, chars: ['b', 'c']}, {length: 3, chars: ['d', 'e', 'f']}]\n  */\nconst sameLength = (words) => {\n  let result = [];\n\n  for (let i = 0; i < words.length; i++) {\n    let chars = words[i].chars;\n    let length = words[i].length;\n\n    let charsCopy = chars.slice();\n\n    for (let j = 0; j < words.length; j++) {\n      if (words[j].length === length) {\n        for (let k = 0; k < length; k++) {\n          if (chars[k]!== words[j].chars[k]) {\n            break;\n          }\n          else {\n            charsCopy.splice(k, 1);\n          }\n        }\n      }\n    }\n\n    if (charsCopy.length === 0) {\n      result.push(words[i]);\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given a list of words, return a list of all combinations\n  of strings that can be formed, given the constraints in\n  the original list.\n  >>> allCombinations([{length: 1, chars: ['a']}, {length: 2, chars: ['b', 'c']}])\n  [{length: 1, chars: ['a']}, {length: 2, chars: ['b', 'c']}, {length: 1, chars: ['a', 'b']}, {length: 1, chars: ['a', 'c']}, {length: 2, chars: ['b', 'c']}, {length: 2, chars: ['a', 'b']}, {length: 2, chars: ['a', 'c']}, {length: 3, chars: ['b', 'c', 'd']}]\n  >>> allCombinations([{length: 1, chars: ['a']}, {length: 2, chars: ['b', 'c']}, {length: 3, chars: ['d', 'e', 'f']}])\n  [{length: 1, chars: ['a']}, {length: 2, chars: ['b', 'c']}, {length: 3, chars: ['d', 'e', 'f']}]\n  >>> allCombinations([{length: 1, chars: ['a']}, {length: 2, chars: ['b', 'c']}, {length: 2, chars: ['d', 'e']}])\n  [{length: 1, chars: ['a']}, {length: 2, chars: ['b', 'c']}, {length: 2, chars: ['d', 'e']}]\n  >>> allCombinations([{length: 1, chars: ['a']}, {length: 2, chars: ['b', 'c']}])\n  [{length: 1, chars: ['a']}, {length: 2, chars: ['b', 'c']}]\n  >>> allCombinations([{length: 1, chars: ['a']}])\n  [{length: 1, chars: ['a']}]\n  >>> allCombinations([{length: 2, chars: ['b', 'c']}])\n  [{length: 2, chars: ['b', 'c']}]\n  >>> allCombinations([{length: 1, chars: ['a']}, {length: 1, chars: ['a']}, {length: 1, chars: ['a']}])\n  [{length: 1, chars: ['a']}, {length: 1, chars: ['a']}, {length: 1, chars: ['a']}]\n  */\nconst allCombinations = (words) => {\n  let result = [];\n\n  let combos = allCombinationsRecursive(words);\n\n  for (let i = 0; i < combos.length; i++) {\n    result.push(combos[i]);\n  }\n\n  return result;\n};\n\nfunction allCombinationsRecursive(words) {\n  let combos = [];\n\n  for (let i = 0; i < words.length; i++) {\n    let len = words[i].length;\n    let chars = words[i].chars.slice();\n    let next = allCombinationsRecursive(words.slice(i + 1));\n\n    for (let j = 0; j < next.length; j++) {\n      let combo = next[j];\n\n      if (combo.length === len) {\n        for (let k = 0; k < len; k++) {\n          if (chars[k]!== combo.chars[k]) {\n            break;\n          }\n          else {\n            chars."}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting consist of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting consist of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const nums = numbers.slice()\n  const product = 1\n\n  if (nums.length === 1) {\n    return (numbers[0], 1)\n  } else {\n    for (let i = 1; i < nums.length; i += 1) {\n      product *= nums[i]\n    }\n    return (sum(numbers), product)\n  }\n}\n\n// sum(numbers)\n// => 10\nconst sum = (numbers) => {\n  return numbers.reduce((a, b) => a + b, 0)\n}\n\n// product(numbers)\n// => 24\nconst product = (numbers) => {\n  return numbers.reduce((a, b) => a * b, 1)\n}\n\n// sumProduct([1, 2, 3, 4])\n// => (10, 24)\nconsole.log(sumProduct([1, 2, 3, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate render a list of rolling maximum maximal element found line up until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, generate render a list of rolling maximum maximal element found line up until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers.reduce((max, number) => Math.max(max, number), 0);\n  const maxLines = [];\n  const currentMaxLine = [];\n  let lineNumber = 0;\n  for (let i = 0; i < max; i++) {\n    if (numbers[i] === max) {\n      currentMaxLine.push(numbers[i]);\n    } else {\n      if (currentMaxLine.length > 0) {\n        maxLines.push(currentMaxLine);\n        currentMaxLine = [];\n      }\n      maxLines.push([]);\n      lineNumber = lineNumber + 1;\n      maxLines[lineNumber - 1].push(numbers[i]);\n    }\n  }\n  if (currentMaxLine.length > 0) {\n    maxLines.push(currentMaxLine);\n  }\n  return maxLines;\n};\n\nmodule.exports = rollingMax;<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest light palindrome that begins with a supplied issue string.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n   - Append to the end conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest light palindrome that begins with a supplied issue string.\n   Algorithm idea is simple bare: \n   - Find the longest farseeing postfix of supplied provide string that is a palindrome. \n   - Append to the end conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let str = string.split('').reverse().join('');\n  const longest = str.split('').reverse().join('');\n  const postfix = longest.split('').reverse().join('');\n  const prefix = longest.split('').reverse().join('');\n  if (postfix === prefix) {\n    return postfix;\n  }\n  const palindrome = str + postfix;\n  return palindrome;\n}\n\n/*\n *\n */\nconst test = {\n  'empty string' : makePalindrome(''),\n  'a string' : makePalindrome('ab'),\n  'a palindrome' : makePalindrome('ac'),\n  'another palindrome' : makePalindrome('aa'),\n  'a long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('aa'),\n  'another long long palindrome' : makePalindrome('"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string bowed stringed instrument.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string bowed stringed instrument.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] == b[i])? '1' : '0'\n  }\n  return result\n}\n\n/*\n  Input are two strings a and b consisting consist only of 1s and 0s. \n  Perform do binary OR on these inputs and return result resultant role also as a string bowled stringed instrument.\n  >>> stringOr('010', '110')\n  '110'\n  */\nconst stringOr = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] || b[i])? '1' : '0'\n  }\n  return result\n}\n\n/*\n  Input are two strings a and b consisting consist only of 1s and 0s. \n  Perform do binary AND on these inputs and return result resultant role also as a string bowled stringed instrument.\n  >>> stringAnd('010', '110')\n  '010'\n  */\nconst stringAnd = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] && b[i])? '1' : '0'\n  }\n  return result\n}\n\n/*\n  Input are two strings a and b consisting consist only of 1s and 0s. \n  Perform do binary exclusive OR on these inputs and return result resultant role also as a string bowled stringed instrument.\n  >>> stringXor('010', '110')\n  '110'\n  */\nconst stringXor2 = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] &&!b[i])? '1' : '0'\n  }\n  return result\n}\n\n/*\n  Input are two strings a and b consisting consist only of 1s and 0s. \n  Perform do binary AND on these inputs and return result resultant role also as a string bowled stringed instrument.\n  >>> stringAnd('010', '110')\n  '010'\n  */\nconst stringAnd2 = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ||!b[i])? '1' : '0'\n  }\n  return result\n}\n\n/*\n  Input are two strings a and b consisting consist only of 1s and 0s. \n  Perform do binary exclusive OR on these inputs and return result resultant role also as a string bowled stringed instrument.\n  >>> stringXor2('010', '110')\n  '110'\n  */\nconst stringXor3 = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ||!b[i])? '1' : '0'\n  }\n  return result\n}\n\n/*\n  Input are two strings a and b consisting consist only of 1s and 0s. \n  Perform do binary exclusive OR on these inputs and return result resultant role also as a string bowled stringed instrument.\n  >>> stringAnd2('010', '110')\n  '010'\n  */\nconst stringAnd3 = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] &&!b[i])? '1' : '0'\n  }\n  return result\n}\n\n/*\n  Input are two strings a and b consisting consist only of 1s and 0s. \n  Perform do binary exclusive OR on these inputs and return result resultant role also as a string bowled stringed instrument.\n  >>> stringXor3('010', '110')\n  '110'\n  */\nconst stringXor4 = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ||!b[i])? '1' : '0'\n  }\n  return result\n}\n\n/*\n  Input are two strings a and b consisting consist only of 1s and 0s. \n  Perform do binary exclusive OR on these inputs and return result resultant role also as a string bowled stringed instrument.\n  >>> stringAnd3('010', '110')\n  '010'\n  */\nconst stringAnd4 = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] &&!b[i])? '1' : '0'\n  }\n  return result\n}\n\n/*\n  Input are two strings a and b consisting consist only of 1s and 0s. \n  Perform do binary exclusive OR on these inputs and return result resultant role also as a string bowled stringed instrument.\n  >>> stringXor4('010', '110')\n  '110'\n  */\nconst stringXor5 = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ||!b[i])? '1' : '0'\n  }\n  return result\n}\n\n/*\n  Input are two strings a and b consisting consist only of 1s and 0s. \n  Perform do binary exclusive OR on these inputs and return result resultant role also as a string bowled stringed instrument.\n  >>> stringAnd4('010', '110')\n  '010'\n  */\nconst stringAnd5 = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] &&!b[i])? '1' : '0'\n  }\n  return result\n}\n\n/*\n  Input are two strings a and b consisting consist only of 1s and 0s. \n  Perform"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case sheath of multiple \n   strings of the same length. Return null nothing in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case sheath of multiple \n   strings of the same length. Return null nothing in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nexport default longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common coarse divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common coarse divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return Math.abs(a) < Math.abs(b)? greatestCommonDivisor(Math.abs(a), Math.abs(b)) : greatestCommonDivisor(Math.abs(b), Math.abs(a));\n}\n\nconst findLeastCommonMultiple = (a, b) => {\n  if (a === 0 || b === 0) return 0;\n  return Math.max(a, b) * greatestCommonDivisor(a, b);\n}\n\nconst findCommonMultiple = (a, b) => {\n  if (a === 0 || b === 0) return 0;\n  return Math.min(a, b) * greatestCommonDivisor(a, b);\n}\n\nconst findCommonDenominator = (a, b) => {\n  if (a === 0 || b === 0) return 0;\n  return Math.min(a, b) * greatestCommonDivisor(a, b);\n}\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return Math.abs(a) < Math.abs(b)? greatestCommonDivisor(Math.abs(a), Math.abs(b)) : greatestCommonDivisor(Math.abs(b), Math.abs(a));\n}\n\nconst findLeastCommonMultiple = (a, b) => {\n  if (a === 0 || b === 0) return 0;\n  return Math.max(a, b) * greatestCommonDivisor(a, b);\n}\n\nconst findCommonMultiple = (a, b) => {\n  if (a === 0 || b === 0) return 0;\n  return Math.min(a, b) * greatestCommonDivisor(a, b);\n}\n\nconst findCommonDenominator = (a, b) => {\n  if (a === 0 || b === 0) return 0;\n  return Math.min(a, b) * greatestCommonDivisor(a, b);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest long of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shortest to longest long of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  return string.split('').map((ch, index) => {\n    if (index === 0) {\n      return ch\n    } else {\n      return `${ch}${string.substring(index)}`\n    }\n  })\n}\n\n/* Return list of all suffixes from shortest to longest long of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  return string.split('').map((ch, index) => {\n    if (index === string.length - 1) {\n      return ch\n    } else {\n      return `${string.substring(index + 1)}${ch}`\n    }\n  })\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest long of the input string\n  >>> allPrefixAndSuffix('abc')\n  [\n    'a',\n    'ab',\n    'abc',\n    'b',\n    'bc',\n    'c',\n    'a',\n    'ab',\n    'abc',\n    'b',\n    'bc',\n    'c',\n    'a',\n    'ab',\n    'abc',\n    'b',\n    'bc',\n    'c',\n  ]\n  */\nconst allPrefixAndSuffix = (string) => {\n  return allPrefixes(string).concat(allSuffixes(string))\n}\n\n/* Return longest common prefix of the two input strings\n  >>> longestCommonPrefix('abcd', 'efgh')\n  'ab'\n  >>> longestCommonPrefix('abcd', 'efg')\n  'ab'\n  >>> longestCommonPrefix('abcd', 'efg')\n  'ab'\n  >>> longestCommonPrefix('abcd', 'efg')\n  'ab'\n  >>> longestCommonPrefix('abcd', 'efgh')\n  'ab'\n  >>> longestCommonPrefix('abcd', 'efgh')\n  'ab'\n  */\nconst longestCommonPrefix = (string1, string2) => {\n  return string1.substring(0, string1.indexOf(string2))\n}\n\n/* Return longest common suffix of the two input strings\n  >>> longestCommonSuffix('abcd', 'efgh')\n  'gh'\n  >>> longestCommonSuffix('abcd', 'efg')\n  'g'\n  >>> longestCommonSuffix('abcd', 'efg')\n  'g'\n  >>> longestCommonSuffix('abcd', 'efgh')\n  'gh'\n  >>> longestCommonSuffix('abcd', 'efgh')\n  'gh'\n  */\nconst longestCommonSuffix = (string1, string2) => {\n  return string1.substring(string1.length - string2.length)\n}\n\n/* Return longest common prefix and suffix of the two input strings\n  >>> longestCommonPrefixAndSuffix('abcd', 'efgh')\n  [\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n    'ab',\n"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const str = Array(n + 1).join(' ')\n  return str.slice(0, n)\n}\n\n/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(5, 'a')\n  'a a a a a a'\n  >>> stringSequence(5, 'b')\n  'b b b b b b'\n  */\nconst stringSequence = (n, char) => {\n  const str = Array(n + 1).join(char)\n  return str.slice(0, n)\n}\n\n/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(5, 'a', 'b')\n  'a b a b a b'\n  */\nconst stringSequence = (n, char1, char2) => {\n  const str = Array(n + 1).join(char1)\n  return str.slice(0, n) + char2\n}\n\n/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(5, 'a', 'b', 'c')\n  'a b c a b c'\n  */\nconst stringSequence = (n, char1, char2, char3) => {\n  const str = Array(n + 1).join(char1)\n  return str.slice(0, n) + char2 + char3\n}\n\n/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(5, 'a', 'b', 'c', 'd')\n  'a b c d a b c d'\n  */\nconst stringSequence = (n, char1, char2, char3, char4) => {\n  const str = Array(n + 1).join(char1)\n  return str.slice(0, n) + char2 + char3 + char4 + str.slice(n)\n}\n\n/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e')\n  'a b c d e a b c d e'\n  */\nconst stringSequence = (n, char1, char2, char3, char4, char5) => {\n  const str = Array(n + 1).join(char1)\n  return str.slice(0, n) + char2 + char3 + char4 + char5 + str.slice(n)\n}\n\n/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f')\n  'a b c d e f a b c d e f'\n  */\nconst stringSequence = (n, char1, char2, char3, char4, char5, char6) => {\n  const str = Array(n + 1).join(char1)\n  return str.slice(0, n) + char2 + char3 + char4 + char5 + char6 + str.slice(n)\n}\n\n/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g')\n  'a b c d e f g a b c d e f g'\n  */\nconst stringSequence = (n, char1, char2, char3, char4, char5, char6, char7) => {\n  const str = Array(n + 1).join(char1)\n  return str.slice(0, n) + char2 + char3 + char4 + char5 + char6 + char7 + str.slice(n)\n}\n\n/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n  'a b c d e f g h a b c d e f g h'\n  */\nconst stringSequence = (n, char1, char2, char3, char4, char5, char6, char7, char8) => {\n  const str = Array(n + 1).join(char1)\n  return str.slice(0, n) + char2 + char3 + char4 + char5 + char6 + char7 + char8 + str.slice(n)\n}\n\n/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n  'a b c d e f g h i a b c d e f g h i'\n  */\nconst stringSequence = (n, char1, char2, char3, char4, char5, char6, char7, char8, char9) => {\n  const str = Array(n + 1).join(char1)\n  return str.slice(0, n) + char2 + char3 + char4 + char5 + char6 + char7 + char8 + char9 + str.slice(n)\n}\n\n/* Return a string containing control space - delimited subtend numbers starting begin from 0 upto n inclusive.\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\n  'a b c d e f g h i j a b c d e f g h i j'\n  */\nconst stringSequence = (n, char1, char2, char3, char4, char5, char6, char7, char8, char9, char10) => {\n  const str = Array(n + 1).join(char1)\n  return str.slice(0, n) + char2 + char3 + char4 + char5 + char6 + char7 + char8 + char9 +"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct clear-cut characters (regardless of case sheath) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many distinct clear-cut characters (regardless of case sheath) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n    const arr = string.split('')\n    let count = 0\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[i] === arr[j] && arr[i].toUpperCase() === arr[j].toUpperCase()) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\n//Given a string, return the number of distinct words in the string.\nconst countWords = (string) => {\n    let count = 0\n    string.split('').forEach((char, index) => {\n        if (char ==='') {\n            count++\n        }\n    })\n    return count\n}\n\n/* Given a string, return the number of distinct words in the string.\n  >>> countWords('Jerry')\n  2\n  >>> countWords('Hello World')\n  2\n  >>> countWords('Hello World Hello')\n  2\n  */\nconst countWords = (string) => {\n    const arr = string.split('')\n    let count = 0\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] ==='') {\n            count++\n        }\n    }\n    return count\n}\n\n/* Given a string, return the number of unique characters in the string.\n  >>> countUniqueCharacters('Jerry')\n  2\n  >>> countUniqueCharacters('Hello World')\n  7\n  >>> countUniqueCharacters('Hello World Hello')\n  7\n  */\nconst countUniqueCharacters = (string) => {\n    const arr = string.split('')\n    let count = 0\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[i] === arr[j]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\n// Given a string, return the number of unique words in the string.\nconst countUniqueWords = (string) => {\n    let count = 0\n    string.split('').forEach((char, index) => {\n        if (char ==='') {\n            count++\n        }\n    })\n    return count\n}\n\n// Given a string, return the number of unique characters in the string.\nconst countUniqueCharacters = (string) => {\n    let count = 0\n    string.split('').forEach((char, index) => {\n        if (char ==='') {\n            count++\n        }\n    })\n    return count\n}\n\nconst check = (string) => {\n    console.log(countWords(string))\n    console.log(countUniqueWords(string))\n    console.log(countDistinctCharacters(string))\n    console.log(countUniqueCharacters(string))\n}\n\ncheck('Hello World')\ncheck('Hello World Hello')\ncheck('Hello World Hello Hello')\ncheck('Hello World Hello Hello Hello')\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string drawstring representing musical melodious notes in a special extra ASCII format. \n   Your task job is to parse this string and return list of integers integer corresponding equate to how many beats does each \n   not last. \n\n   Here is a legend caption: \n  ' o' - whole solid note, lasts four beats \n  ' o|' - half one-half note eminence, lasts survive two beats \n  ' .|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string drawstring representing musical melodious notes in a special extra ASCII format. \n   Your task job is to parse this string and return list of integers integer corresponding equate to how many beats does each \n   not last. \n\n   Here is a legend caption: \n 'o' - whole solid note, lasts four beats \n 'o|' - half one-half note eminence, lasts survive two beats \n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let length = music_string.length;\n  let beats = [];\n  let current_beat = 0;\n  for (let i = 0; i < length; i++) {\n    let current_note = music_string[i];\n    if (current_note === 'o') {\n      beats.push(current_beat);\n      current_beat += 4;\n    } else if (current_note === 'o|') {\n      beats.push(current_beat);\n      current_beat += 2;\n    } else if (current_note === '.') {\n      beats.push(current_beat);\n      current_beat += 1;\n    }\n  }\n  return beats;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found find oneself in the original string. Count overlaping cases font.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substring can be found find oneself in the original string. Count overlaping cases font.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      let j = i + 1;\n      while (j < string.length && string.charAt(j) === substring.charAt(0)) {\n        j++;\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, return the number of consonant letters. Consonant letters are letters\n * which are not of the same class as consonant letters.\n  >>> countConsonantLetters('paul')\n  2\n  >>> countConsonantLetters('paley')\n  1\n  >>> countConsonantLetters('paulpaul')\n  1\n  >>> countConsonantLetters('pa')\n  0\n  */\nconst countConsonantLetters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (classConsonantLetters(string.charAt(i)) === false) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, return the number of consonant letters. Consonant letters are letters\n * which are not of the same class as consonant letters.\n  >>> classConsonantLetters('paul')\n  false\n  >>> classConsonantLetters('paley')\n  true\n  >>> classConsonantLetters('paulpaul')\n  true\n  >>> classConsonantLetters('pa')\n  true\n  */\nconst classConsonantLetters = (string) => {\n  let consonantLetters = 'bcdfghjklmnpqrstvwxz';\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (consonantLetters.indexOf(string.charAt(i)) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, return the number of vowels in it. Vowels are letters which are not of\n * the same class as consonant letters.\n  >>> countVowels('paul')\n  2\n  >>> countVowels('paley')\n  1\n  >>> countVowels('paulpaul')\n  1\n  >>> countVowels('pa')\n  0\n  */\nconst countVowels = (string) => {\n  let vowels = 'aeiou';\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (vowels.indexOf(string.charAt(i)) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Return the number of consonant and vowel letters in a string.\n  >>> countLetters('paul')\n  3\n  >>> countLetters('paley')\n  1\n  >>> countLetters('paulpaul')\n  2\n  >>> countLetters('pa')\n  0\n  */\nconst countLetters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (classLetters(string.charAt(i)) === false) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Return a string with all vowels removed.\n  >>> removeVowels('paulpaley')\n  'ppay'\n  >>> removeVowels('paulpaul')\n  'paul'\n  >>> removeVowels('pa')\n  'p'\n  */\nconst removeVowels = (string) => {\n  let vowels = 'aeiou';\n  let newString = string;\n  for (let i = 0; i < string.length; i++) {\n    if (vowels.indexOf(string.charAt(i)) === -1) {\n      newString = newString.substring(0, i) + newString.substring(i + 1);\n    }\n  }\n  return newString;\n};\n\n/**\n * Return a string with all consonant letters removed.\n  >>> removeConsonantLetters('paulpaul')\n  'paul'\n  >>> removeConsonantLetters('paulpaley')\n  'paulpaley'\n  >>> removeConsonantLetters('pa')\n  'pa'\n  */\nconst removeConsonantLetters = (string) => {\n  let consonantLetters = 'bcdfghjklmnpqrstvwxz';\n  let newString = string;\n  for (let i = 0; i < string.length; i++) {\n    if (consonantLetters.indexOf(string.charAt(i)) === -1) {\n      newString = newString.substring(0, i) + newString.substring(i + 1);\n    }\n  }\n  return newString;\n};\n\n/**\n * Return a string with all letters removed.\n  >>> removeLetters('paulpaley')\n  'paulpaley'\n  >>> removeLetters('paulpaul')\n  'paulpaul'\n  >>> removeLetters('pa')\n  'pa'\n  */\nconst removeLetters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (classLetters(string.charAt(i)) === false) {\n      count++;\n    }\n  }\n  return string.substring(0, count);\n};\n\nmodule.exports = {\n  howManyTimes,\n  countConsonantLetters,\n  classConsonantLetters,\n  countLetters,\n  classLetters,\n  removeVowels,\n  removeConsonantLetters,\n  removeLetters\n};\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string bowed stringed instrument with numbers sorted from smallest belittled to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space - delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string bowed stringed instrument with numbers sorted from smallest belittled to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let number = numbers.replace(/[^0-9]/g, '').toUpperCase();\n  number = number.split(' ');\n  number.sort((a, b) => {\n    if (parseInt(a) < parseInt(b)) {\n      return -1;\n    }\n    if (parseInt(a) > parseInt(b)) {\n      return 1;\n    }\n    return 0;\n  });\n  return number.join(' ');\n};\n\n/*\n  Test Code\n  */\nconsole.log(sortNumbers('one two three'));\nconsole.log(sortNumbers('three one two'));\nconsole.log(sortNumbers('one two'));\nconsole.log(sortNumbers('one one two two'));\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select blue-ribbon and return two that are the closest to each \n   other and return them in order club (smaller number act, larger number numeral).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select blue-ribbon and return two that are the closest to each \n   other and return them in order club (smaller number act, larger number numeral).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let nums = numbers.slice(0);\n  let closest = [numbers[0], numbers[1]];\n  let min = Math.min(numbers[0], numbers[1]);\n  let max = Math.max(numbers[0], numbers[1]);\n  nums.forEach(num => {\n    if (num > min) {\n      if (num < closest[1]) {\n        closest = [num, closest[1]];\n      } else if (num > closest[1]) {\n        closest = [closest[0], num];\n      }\n    }\n  });\n  return closest;\n}\n\n/* From a supplied list of numbers (of length at least two) select red-ribbon and return two that are the closest to each \n   other and return them in order club (smaller number act, larger number numeral).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (3.0, 4.0)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  let nums = numbers.slice(0);\n  let closest = [numbers[0], numbers[1]];\n  let min = Math.min(numbers[0], numbers[1]);\n  let max = Math.max(numbers[0], numbers[1]);\n  nums.forEach(num => {\n    if (num > min) {\n      if (num < closest[1]) {\n        closest = [num, closest[1]];\n      } else if (num > closest[1]) {\n        closest = [closest[0], num];\n      }\n    }\n  });\n  return closest;\n}\n\nconst findClosestElements3 = (numbers) => {\n  let nums = numbers.slice(0);\n  let closest = [numbers[0], numbers[1]];\n  let min = Math.min(numbers[0], numbers[1]);\n  let max = Math.max(numbers[0], numbers[1]);\n  nums.forEach(num => {\n    if (num > min) {\n      if (num < closest[1]) {\n        closest = [num, closest[1]];\n      } else if (num > closest[1]) {\n        closest = [closest[0], num];\n      }\n    }\n  });\n  return closest;\n}\n\nconst findClosestElements4 = (numbers) => {\n  let nums = numbers.slice(0);\n  let closest = [numbers[0], numbers[1]];\n  let min = Math.min(numbers[0], numbers[1]);\n  let max = Math.max(numbers[0], numbers[1]);\n  nums.forEach(num => {\n    if (num > min) {\n      if (num < closest[1]) {\n        closest = [num, closest[1]];\n      } else if (num > closest[1]) {\n        closest = [closest[0], num];\n      }\n    }\n  });\n  return closest;\n}\n\nconst findClosestElements5 = (numbers) => {\n  let nums = numbers.slice(0);\n  let closest = [numbers[0], numbers[1]];\n  let min = Math.min(numbers[0], numbers[1]);\n  let max = Math.max(numbers[0], numbers[1]);\n  nums.forEach(num => {\n    if (num > min) {\n      if (num < closest[1]) {\n        closest = [num, closest[1]];\n      } else if (num > closest[1]) {\n        closest = [closest[0], num];\n      }\n    }\n  });\n  return closest;\n}\n\nconst findClosestElements6 = (numbers) => {\n  let nums = numbers.slice(0);\n  let closest = [numbers[0], numbers[1]];\n  let min = Math.min(numbers[0], numbers[1]);\n  let max = Math.max(numbers[0], numbers[1]);\n  nums.forEach(num => {\n    if (num > min) {\n      if (num < closest[1]) {\n        closest = [num, closest[1]];\n      } else if (num > closest[1]) {\n        closest = [closest[0], num];\n      }\n    }\n  });\n  return closest;\n}\n\nconst findClosestElements7 = (numbers) => {\n  let nums = numbers.slice(0);\n  let closest = [numbers[0], numbers[1]];\n  let min = Math.min(numbers[0], numbers[1]);\n  let max = Math.max(numbers[0], numbers[1]);\n  nums.forEach(num => {\n    if (num > min) {\n      if (num < closest[1]) {\n        closest = [num, closest[1]];\n      } else if (num > closest[1]) {\n        closest = [closest[0], num];\n      }\n    }\n  });\n  return closest;\n}\n\nconst findClosestElements8 = (numbers) => {\n  let nums = numbers.slice(0);\n  let closest = [numbers[0], numbers[1]];\n  let min = Math.min(numbers[0], numbers[1]);"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply put on a linear transform to that list,\n   such that the smallest little number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), apply put on a linear transform to that list,\n   such that the smallest little number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const mid = (min + max) / 2\n  const midRange = max - min\n\n  return [\n    mid - (midRange / 2),\n    mid + (midRange / 2)\n  ].filter(x => x >= 0)\n}\n\nexport default rescaleToUnit\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": false, "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const result = [];\n  const toString = (value) => {\n    return (typeof value === 'object')? JSON.stringify(value) : value;\n  };\n  for (const value of values) {\n    if (typeof value === 'number' && isInteger(value)) {\n      result.push(Number(toString(value)));\n    }\n  }\n  return result;\n};\n\nmodule.exports = filterIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given grant string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of given grant string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* Return a copy of a string\n  >>> strcopy('abc')\n  'abc'\n  >>> strcopy('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  */\nconst strcopy = (string) => {\n  return string;\n};\n\n/* Return a string with the same content, but with a given prefix and suffix\n  >>> stradd('abcdef', 'ghijkl')\n  'abcdefghijkl'\n  >>> stradd('abcdef', 'ghijkl','mnopqr')\n  'abcdefghijklmnopqr'\n  */\nconst stradd = (string, prefix, suffix) => {\n  return prefix + string + suffix;\n};\n\n/* Return a string with the same content, but with a given prefix, length and suffix\n  >>> stradd('abcdef', 'ghijkl', 6)\n  'abcdefghij'\n  >>> stradd('abcdef', 'ghijkl', 6,'mnopqr')\n  'abcdefghijmnopqr'\n  */\nconst stradd = (string, prefix, length, suffix) => {\n  return prefix + string.substr(0, length) + suffix;\n};\n\n/* Return a string with the same content, but with a given prefix and suffix\n  >>> strcat('abcdef', 'ghijkl')\n  'abcdefghijkl'\n  >>> strcat('abcdef', 'ghijkl','mnopqr')\n  'abcdefghijklmnopqr'\n  */\nconst strcat = (string, prefix, suffix) => {\n  return string + prefix + suffix;\n};\n\n/* Return a string with the same content, but with a given prefix, length and suffix\n  >>> strcat('abcdef', 'ghijkl', 6)\n  'abcdefghij'\n  >>> strcat('abcdef', 'ghijkl', 6,'mnopqr')\n  'abcdefghijmnopqr'\n  */\nconst strcat = (string, prefix, length, suffix) => {\n  return string.substr(0, length) + prefix + suffix;\n};\n\n/* Return a string with the same content, but with a given prefix and suffix\n  >>> strcut('abcdef', 'ghijkl')\n  'ab'\n  >>> strcut('abcdef', 'ghijkl', 6)\n  'ab'\n  >>> strcut('abcdef', 'ghijkl', 6,'mnopqr')\n 'mnopqr'\n  */\nconst strcut = (string, prefix, length) => {\n  return string.substr(0, length);\n};\n\n/* Return a string with the same content, but with a given prefix and suffix\n  >>> strcut('abcdef', 'ghijkl', 6)\n  'ab'\n  >>> strcut('abcdef', 'ghijkl', 6,'mnopqr')\n 'mnopqr'\n  */\nconst strcut = (string, prefix, length, suffix) => {\n  return string.substr(0, length) + suffix;\n};\n\n/* Return a string with the same content, but with a given prefix and suffix\n  >>> strtrim('abcdef ghijkl mnopqr','ghijkl')\n  'abcdef'\n  >>> strtrim('abcdef ghijkl mnopqr','ghijkl','mnopqr')\n  'abcdef'\n  */\nconst strtrim = (string, prefix, suffix) => {\n  return string.substring(strlen(prefix) + 1, strlen(string) - strlen(suffix));\n};\n\n/* Return a string with the same content, but with a given prefix and suffix\n  >>> strtrim('abcdef ghijkl mnopqr','ghijkl','mnopqr')\n  'abcdef'\n  */\nconst strtrim = (string, prefix, suffix, length) => {\n  return string.substring(0, length);\n};\n\n/* Return a string with the same content, but with a given prefix and suffix\n  >>> strtrim('abcdef ghijkl mnopqr','ghijkl','mnopqr')\n  'abcdef'\n  */\nconst strtrim = (string, prefix, length, suffix) => {\n  return string.substring(0, length) + suffix;\n};\n\n/* Return a string with the same content, but with a given prefix and suffix\n  >>> strtrim('abcdef ghijkl mnopqr','ghijkl','mnopqr')\n  'abcdef'\n  */\nconst strtrim = (string, prefix, length, suffix, end) => {\n  return string.substring(0, length) + suffix;\n};\n\n/* Return a string with the same content, but with a given prefix and suffix\n  >>> strtrim('abcdef ghijkl mnopqr','ghijkl','mnopqr')\n  'abcdef'\n  */\nconst strtrim = (string, prefix, length, suffix, end) => {\n  return string.substring(0, length) + suffix;\n};\n\n/* Return a string with the same content, but with a given prefix and suffix\n  >>> strtrim('abcdef ghijkl mnopqr','ghijkl','mnopqr', 6)\n  'abcdef'\n  */\nconst strtrim = (string, prefix, length, suffix, end) => {\n  return string.substring(0, length) + suffix;\n};\n\n/* Return a string with the same content, but with a given prefix and suffix\n  >>> strtrim('abcdef ghijkl mnopqr','ghijkl','mnopqr', 6)\n  'abcdef'\n  */\nconst strtrim = (string, prefix, length, suffix, end) => {\n  return string.substring(0, length) + suffix;\n};\n\n/* Return a string with the same content, but with a given prefix and suffix\n  >>> strtrim('abcdef ghijkl mnopqr','ghijkl','mnopqr', 6)\n  'abcdef'\n  */\nconst strtrim = ("}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find discover the largest number phone number that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisors = []\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return Math.max(...divisors)\n}\n\nconst largestDivisor2 = (n) => {\n  let i = 2\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor3 = (n) => {\n  let i = 3\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor4 = (n) => {\n  let i = 5\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor5 = (n) => {\n  let i = 7\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor6 = (n) => {\n  let i = 11\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor7 = (n) => {\n  let i = 13\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor8 = (n) => {\n  let i = 17\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor9 = (n) => {\n  let i = 19\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor10 = (n) => {\n  let i = 23\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor11 = (n) => {\n  let i = 29\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor12 = (n) => {\n  let i = 31\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor13 = (n) => {\n  let i = 37\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor14 = (n) => {\n  let i = 41\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor15 = (n) => {\n  let i = 47\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor16 = (n) => {\n  let i = 53\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor17 = (n) => {\n  let i = 59\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor18 = (n) => {\n  let i = 61\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor19 = (n) => {\n  let i = 67\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor20 = (n) => {\n  let i = 71\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor21 = (n) => {\n  let i = 73\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor22 = (n) => {\n  let i = 79\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor23 = (n) => {\n  let i = 83\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor24 = (n) => {\n  let i = 89\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor25 = (n) => {\n  let i = 97\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor26 = (n) => {\n  let i = 101\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor27 = (n) => {\n  let i = 103\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor28 = (n) => {\n  let i = 109\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor29 = (n) => {\n  let i = 113\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor30 = (n) => {\n  let i = 131\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor31 = (n) => {\n  let i = 137\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor32 = (n) => {\n  let i = 149\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor33 = (n) => {\n  let i = 151\n  while (n % i === 0) {\n    i++\n  }\n  return i\n}\n\nconst largestDivisor34 = (n)"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors component of given integer in the order club from smallest to largest bombastic. \n   Each of the factors should be listed list number of times fourth dimension corresponding to how many times it appeares in factorization. \n   Input stimulation number phone number should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors component of given integer in the order club from smallest to largest bombastic. \n   Each of the factors should be listed list number of times fourth dimension corresponding to how many times it appeares in factorization. \n   Input stimulation number phone number should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let primeFactorList = [];\n  let numberOfFactors = 0;\n  let currentPrime = 1;\n  let factors = [];\n  while (currentPrime <= n) {\n    if (n % currentPrime === 0) {\n      primeFactorList.push(currentPrime);\n      numberOfFactors += 1;\n    }\n    currentPrime += 1;\n  }\n  while (numberOfFactors > 0) {\n    let factor = primeFactorList[0];\n    primeFactorList.splice(0, 1);\n    factors.push(factor);\n    n = n / factor;\n  }\n  return factors;\n};\n\n/*\n  Return list of prime factors component of given integer in the order club from smallest to largest bombastic. \n  Each of the factors should be listed list number of times fourth dimension corresponding to how many times it appeares in factorization. \n  Input stimulation number phone number should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let primeFactorList = [];\n  let numberOfFactors = 0;\n  let currentPrime = 1;\n  let factors = [];\n  while (currentPrime <= n) {\n    if (n % currentPrime === 0) {\n      primeFactorList.push(currentPrime);\n      numberOfFactors += 1;\n    }\n    currentPrime += 1;\n  }\n  while (numberOfFactors > 0) {\n    let factor = primeFactorList[0];\n    primeFactorList.splice(0, 1);\n    factors.push(factor);\n    n = n / factor;\n  }\n  return factors;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements element that occur more than once. \n   Keep prevent order of elements chemical element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements element that occur more than once. \n   Keep prevent order of elements chemical element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n    const result = [];\n    let counter = 1;\n    for (const number of numbers) {\n        if (counter > 1) {\n            if (number === result[result.length - 1]) {\n                counter--;\n            } else {\n                result.push(number);\n            }\n        } else {\n            result.push(number);\n        }\n        counter++;\n    }\n    return result;\n};\n\nconsole.log(removeDuplicates([1, 2, 3, 2, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  const newString = string.replace(/[a-z]/g, (x) => {\n    if (x.match(/[A-Z]/)) {\n      return x.toUpperCase();\n    }\n    else {\n      return x.toLowerCase();\n    }\n  });\n  return newString;\n};\n\n// This is the main function.\n// All the above code is just to show the idea of using reduce.\nconst main = (string) => {\n  const flipCase = (string) => {\n    const newString = string.replace(/[a-z]/g, (x) => {\n      if (x.match(/[A-Z]/)) {\n        return x.toUpperCase();\n      }\n      else {\n        return x.toLowerCase();\n      }\n    });\n    return newString;\n  };\n  const split = (string) => {\n    const newString = string.split('').map((x) => {\n      if (x.match(/[A-Z]/)) {\n        return x.toUpperCase();\n      }\n      else {\n        return x.toLowerCase();\n      }\n    });\n    return newString;\n  };\n  const newString = split(string).reduce((x, y) => {\n    x += y;\n    return x;\n  }, '');\n  return newString;\n};\n\nconsole.log(main('hello'));\nconsole.log(main('hELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HELLO'));\nconsole.log(main('HE"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  const result = ''\n  strings.forEach(str => {\n    result += str\n  })\n  return result\n}\n\n/*\n  Return an array with the input value appended to the end of the array\n  >>> append([1, 2, 3], 4)\n  [1, 2, 3, 4]\n  */\nconst append = (arr, value) => [...arr, value]\n\n/*\n  Return an array with the input value appended to the beginning of the array\n  >>> prepend(4, [1, 2, 3])\n  [4, 1, 2, 3]\n  */\nconst prepend = (value, arr) => [value,...arr]\n\n/*\n  Return a value of the type of the first argument\n  >>> type(1)\n  number\n  >>> type(1.1)\n  number\n  >>> type(['a', 'b', 'c'])\n  array\n  >>> type([1, 2, 3])\n  array\n  >>> type(true)\n  boolean\n  >>> type(false)\n  boolean\n  >>> type('')\n  string\n  >>> type({})\n  object\n  >>> type({foo: 'bar'})\n  object\n  >>> type(Symbol('foo'))\n  symbol\n  >>> type(Symbol('foo').toString())\n  string\n  >>> type(Symbol('foo'))\n  symbol\n  */\nconst type = (value) => typeof value\n\n/*\n  Return a new value equal to the first argument\n  >>> new(1)\n  1\n  >>> new('foo')\n  'foo'\n  >>> new({foo: 'bar'})\n  {foo: 'bar'}\n  >>> new(Symbol('foo'))\n  Symbol(foo)\n  >>> new(Symbol('foo').toString())\n  Symbol(foo)\n  >>> new(Symbol('foo'))\n  Symbol(foo)\n  */\nconst new = (value) => value\n\n/*\n  Return a value equal to the first argument if it is a number, or the first\n  argument itself if it is not a number\n  >>> number(1)\n  1\n  >>> number('foo')\n  'foo'\n  >>> number({foo: 'bar'})\n  {foo: 'bar'}\n  >>> number(Symbol('foo'))\n  Symbol(foo)\n  >>> number(Symbol('foo').toString())\n  Symbol(foo)\n  >>> number(Symbol('foo'))\n  Symbol(foo)\n  */\nconst number = (value) => {\n  if (typeof value === 'number') {\n    return value\n  } else {\n    return value\n  }\n}\n\n/*\n  Return a value equal to the first argument if it is a string, or the first\n  argument itself if it is not a string\n  >>> string(1)\n  1\n  >>> string('foo')\n  'foo'\n  >>> string({foo: 'bar'})\n  {foo: 'bar'}\n  >>> string(Symbol('foo'))\n  Symbol(foo)\n  >>> string(Symbol('foo').toString())\n  Symbol(foo)\n  >>> string(Symbol('foo'))\n  Symbol(foo)\n  */\nconst string = (value) => {\n  if (typeof value ==='string') {\n    return value\n  } else {\n    return value\n  }\n}\n\n/*\n  Return a value equal to the first argument if it is a symbol, or the first\n  argument itself if it is not a symbol\n  >>> symbol('foo')\n  Symbol(foo)\n  >>> symbol('foo').toString()\n  Symbol(foo)\n  >>> symbol('foo')\n  Symbol(foo)\n  */\nconst symbol = (value) => {\n  if (typeof value ==='symbol') {\n    return value\n  } else {\n    return value\n  }\n}\n\n/*\n  Return a value equal to the first argument if it is an object, or the first\n  argument itself if it is not an object\n  >>> object({foo: 'bar'})\n  {foo: 'bar'}\n  >>> object({foo: 'bar'})\n  {foo: 'bar'}\n  >>> object(Symbol('foo'))\n  Symbol(foo)\n  >>> object(Symbol('foo').toString())\n  Symbol(foo)\n  >>> object(Symbol('foo'))\n  Symbol(foo)\n  */\nconst object = (value) => {\n  if (typeof value === 'object') {\n    return value\n  } else {\n    return value\n  }\n}\n\n/*\n  Return a value equal to the first argument if it is an array, or the first\n  argument itself if it is not an array\n  >>> array([1, 2, 3])\n  [1, 2, 3]\n  >>> array([1, 2, 3])\n  [1, 2, 3]\n  >>> array(Symbol('foo'))\n  Symbol(foo)\n  >>> array(Symbol('foo').toString())\n  Symbol(foo)\n  >>> array(Symbol('foo'))\n  Symbol(foo)\n  */\nconst array = (value) => {\n  if (typeof value === 'object') {\n    return value\n  } else {\n    return value\n  }\n}\n\nmodule.exports = {\n  append,\n  concatenate,\n  new,\n  number,\n  object,\n  prepend,\n  string,\n  symbol,\n  type,\n  array\n}\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start startle with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start startle with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return [...strings].filter(s => s.startsWith(prefix));\n}\n\n/* Filter an input list of strings for those that match a given regex.\n  >>> filterByRegex([], 'a')\n  []\n  >>> filterByRegex(['abc', 'bcd', 'cde', 'array'], /c/i)\n  ['cde']\n  */\nconst filterByRegex = (strings, regex) => {\n  return [...strings].filter(s => regex.test(s));\n}\n\n/* Return a list of strings that contain at least one of the characters in a\n  given string.\n  >>> filterByCharsIn('abc', 'bc')\n  ['b', 'c']\n  */\nconst filterByCharsIn = (str, chars) => {\n  return [...str].filter(s => chars.includes(s));\n}\n\n/* Return a list of strings that contain at least one of the words in a given\n  string.\n  >>> filterByWordsIn('abc', 'a bc')\n  ['abc']\n  >>> filterByWordsIn('abc', 'a bc def')\n  ['abc', 'def']\n  */\nconst filterByWordsIn = (str, words) => {\n  return [...str].filter(s => words.includes(s));\n}\n\n/* Return a list of strings that contain at least one of the numbers in a given\n  string.\n  >>> filterByNumbersIn('abc', '1 2 3')\n  ['1', '2', '3']\n  >>> filterByNumbersIn('abc', '1 2 3 4')\n  ['1', '2', '3', '4']\n  */\nconst filterByNumbersIn = (str, numbers) => {\n  return [...str].filter(s => numbers.includes(s));\n}\n\n/* Return a list of strings that contain at least one of the characters in a\n  given string.\n  >>> filterByAllIn('abc', 'a bc', 'b c')\n  ['a', 'b', 'c']\n  */\nconst filterByAllIn = (str, chars, others) => {\n  return [...str].filter(s => chars.includes(s) || others.includes(s));\n}\n\n/* Return a list of strings that contain at least one of the words in a given\n  string.\n  >>> filterByAllIn('abc', 'a bc', 'b c', 'def')\n  ['a', 'b', 'c', 'def']\n  */\nconst filterByAllInWords = (str, words, others) => {\n  return [...str].filter(s => words.includes(s) || others.includes(s));\n}\n\n/* Return a list of strings that contain at least one of the numbers in a given\n  string.\n  >>> filterByAllIn('abc', '1 2 3', '4 5 6')\n  ['1', '2', '3', '4', '5', '6']\n  */\nconst filterByAllInNumbers = (str, numbers, others) => {\n  return [...str].filter(s => numbers.includes(s) || others.includes(s));\n}\n\n/* Return a list of strings that contain at least one of the characters in a\n  given string.\n  >>> filterByAllIn('abc', 'a bc', 'b c', 'def')\n  ['a', 'b', 'c', 'def']\n  */\nconst filterByAllInChars = (str, chars, others) => {\n  return [...str].filter(s => chars.includes(s) || others.includes(s));\n}\n\n/* Return a list of strings that contain at least one of the words in a given\n  string.\n  >>> filterByAllIn('abc', 'a bc', 'b c', 'def')\n  ['a', 'b', 'c', 'def']\n  */\nconst filterByAllInWordsWords = (str, words, others) => {\n  return [...str].filter(s => words.includes(s) || others.includes(s));\n}\n\n/* Return a list of strings that contain at least one of the numbers in a given\n  string.\n  >>> filterByAllIn('abc', '1 2 3', '4 5 6', '7 8 9')\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n  */\nconst filterByAllInNumbersNumbers = (str, numbers, others) => {\n  return [...str].filter(s => numbers.includes(s) || others.includes(s));\n}\n\n/* Return a list of strings that contain at least one of the characters in a\n  given string.\n  >>> filterByAllIn('abc', 'a bc', 'b c', 'def')\n  ['a', 'b', 'c', 'def']\n  */\nconst filterByAllInCharsChars = (str, chars, others) => {\n  return [...str].filter(s => chars.includes(s) || others.includes(s));\n}\n\n/* Return a list of strings that contain at least one of the words in a given\n  string.\n  >>> filterByAllIn('abc', 'a bc', 'b c', 'def')\n  ['a', 'b', 'c', 'def']\n  */\nconst filterByAllInWordsWordsWords = (str, words, others) => {\n  return [...str].filter(s => words.includes(s) || others.includes(s));\n}\n\n/* Return a list of strings that contain at least one of the numbers in a given\n  string.\n  >>> filterByAllIn('abc', '1 2 3', '4 5 6', '7 8 9')\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n  */\nconst filterByAllInNumbersNumbersNumbers = (str, numbers, others) => {\n  return [...str].filter(s => numbers.includes(s) || others.includes(s));\n}\n\n/* Return a list of strings that contain at least one of the characters in a\n  given string.\n  >>> filterByAllIn('abc', 'a bc', 'b c', 'def')\n  ['a"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nexport default getPositive;\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number phone number is prime, and false assumed otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number phone number is prime, and false assumed otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i++\n  }\n  return true\n}\n\nexport default isPrime\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns return key only only zero point, even if there are many. \n   Moreover, findZero only takes aim list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns return key only only zero point, even if there are many. \n   Moreover, findZero only takes aim list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length\n  const d = xs.reduce((prev, item, index) = > {\n    return prev + item * Math.pow(index, 2);\n  }, 0);\n  const m = xs.reduce((prev, item, index) = > {\n    return prev + item * Math.pow(index, 1);\n  }, 0);\n  const mn = m < n\n  const ds = d + mn * m;\n  if(ds === 0) {\n    const key = xs.reduce((prev, item, index) = > {\n      return prev + item * index;\n    }, 0);\n    return key;\n  }\n  return 0;\n}\n\nconsole.log(findZero([1, 2, 3]));\n\nconst isZero = (val) => val === 0;\n\nconst findZero1 = (xs) => {\n  const n = xs.length\n  const d = xs.reduce((prev, item, index) = > {\n    return prev + item * Math.pow(index, 2);\n  }, 0);\n  const m = xs.reduce((prev, item, index) = > {\n    return prev + item * Math.pow(index, 1);\n  }, 0);\n  const mn = m < n\n  const ds = d + mn * m;\n  if(ds === 0) {\n    const key = xs.reduce((prev, item, index) = > {\n      return prev + item * index;\n    }, 0);\n    return key;\n  }\n  return 0;\n}\n\nconsole.log(findZero1([1, 2, 3]));\n\nconst isZero1 = (val) => val === 0;\n\nconst findZero2 = (xs) => {\n  const n = xs.length\n  const d = xs.reduce((prev, item, index) = > {\n    return prev + item * Math.pow(index, 2);\n  }, 0);\n  const m = xs.reduce((prev, item, index) = > {\n    return prev + item * Math.pow(index, 1);\n  }, 0);\n  const mn = m < n\n  const ds = d + mn * m;\n  if(ds === 0) {\n    const key = xs.reduce((prev, item, index) = > {\n      return prev + item * index;\n    }, 0);\n    return key;\n  }\n  return 0;\n}\n\nconsole.log(findZero2([1, 2, 3]));\n\nconst isZero2 = (val) => val === 0;\n\nconst findZero3 = (xs) => {\n  const n = xs.length\n  const d = xs.reduce((prev, item, index) = > {\n    return prev + item * Math.pow(index, 2);\n  }, 0);\n  const m = xs.reduce((prev, item, index) = > {\n    return prev + item * Math.pow(index, 1);\n  }, 0);\n  const mn = m < n\n  const ds = d + mn * m;\n  if(ds === 0) {\n    const key = xs.reduce((prev, item, index) = > {\n      return prev + item * index;\n    }, 0);\n    return key;\n  }\n  return 0;\n}\n\nconsole.log(findZero3([1, 2, 3]));\n\nconst isZero3 = (val) => val === 0;\n\nconst findZero4 = (xs) => {\n  const n = xs.length\n  const d = xs.reduce((prev, item, index) = > {\n    return prev + item * Math.pow(index, 2);\n  }, 0);\n  const m = xs.reduce((prev, item, index) = > {\n    return prev + item * Math.pow(index, 1);\n  }, 0);\n  const mn = m < n\n  const ds = d + mn * m;\n  if(ds === 0) {\n    const key = xs.reduce((prev, item, index) = > {\n      return prev + item * index;\n    }, 0);\n    return key;\n  }\n  return 0;\n}\n\nconsole.log(findZero4([1, 2, 3]));\n\nconst isZero4 = (val) => val === 0;\n\nconst findZero5 = (xs) => {\n  const n = xs.length\n  const d = xs.reduce((prev, item, index) = > {\n    return prev + item * Math.pow(index, 2);\n  }, 0);\n  const m = xs.reduce((prev, item, index) = > {\n    return prev + item * Math.pow(index, 1);\n  }, 0);\n  const mn = m < n\n  const ds = d + mn * m;\n  if(ds === 0) {\n    const key = xs.reduce((prev, item, index) = > {\n      return prev + item * index;\n    }, 0);\n    "}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal adequate \n   to the values of the corresponding represent indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal adequate \n   to the values of the corresponding represent indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    return l.reduce((pre, cur, i) => {\n        if (i % 3 === 0) {\n            pre.push(cur);\n        }\n        return pre;\n    }, []);\n};\n\nconst isEven = (n) => {\n    return n % 2 === 0;\n};\n\nconst find = (arr, func) => {\n    let i = 0;\n    while (i < arr.length) {\n        if (func(arr[i])) {\n            return i;\n        }\n        i++;\n    }\n    return -1;\n};\n\nconst find3 = (arr, func) => {\n    let i = 0;\n    while (i < arr.length) {\n        if (func(arr[i])) {\n            if (i % 3 === 0) {\n                return i;\n            }\n        }\n        i++;\n    }\n    return -1;\n};\n\nconst isSorted = (arr, func) => {\n    let i = 1;\n    while (i < arr.length) {\n        if (func(arr[i - 1], arr[i])) {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst remove = (arr, func) => {\n    let i = 0;\n    while (i < arr.length) {\n        if (func(arr[i])) {\n            arr.splice(i, 1);\n        } else {\n            i++;\n        }\n    }\n    return arr;\n};\n\nconst remove3 = (arr, func) => {\n    let i = 0;\n    while (i < arr.length) {\n        if (func(arr[i])) {\n            if (i % 3 === 0) {\n                arr.splice(i, 1);\n            }\n        } else {\n            i++;\n        }\n    }\n    return arr;\n};\n\nconst add = (arr, newItem) => {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === newItem) {\n            return arr;\n        }\n        i++;\n    }\n    return arr.concat([newItem]);\n};\n\nconst add3 = (arr, newItem) => {\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] === newItem) {\n            if (i % 3 === 0) {\n                return arr;\n            }\n        }\n        i++;\n    }\n    return arr.concat([newItem]);\n};\n\nconst isPalindrome = (n) => {\n    return (n + '').split('').reverse().join('') === n;\n};\n\nconst isPalindrome3 = (n) => {\n    return (n + '').split('').reverse().join('') === n;\n};\n\nconst removePalindrome = (n) => {\n    return n.replace(/\\d/g, '');\n};\n\nconst removePalindrome3 = (n) => {\n    return n.replace(/\\d/g, '');\n};\n\nconst findPalindrome = (arr, func) => {\n    let i = 0;\n    while (i < arr.length) {\n        if (func(arr[i])) {\n            return i;\n        }\n        i++;\n    }\n    return -1;\n};\n\nconst findPalindrome3 = (arr, func) => {\n    let i = 0;\n    while (i < arr.length) {\n        if (func(arr[i])) {\n            if (i % 3 === 0) {\n                return i;\n            }\n        }\n        i++;\n    }\n    return -1;\n};\n\nconst reverse = (str) => {\n    let l = str.split('').reverse().join('');\n    return l;\n};\n\nconst reverse3 = (str) => {\n    let l = str.split('').reverse().join('');\n    return l;\n};\n\nconst swap = (str, i, j) => {\n    let k = str.charAt(i);\n    str = str.charAt(i) + str.charAt(j);\n    str = str.charAt(i - 1) + str.charAt(j - 1) + str.charAt(i + 1) + str.charAt(j + 1);\n    str = str.charAt(i - 2) + str.charAt(j - 2) + str.charAt(i + 2) + str.charAt(j + 2);\n    str = str.charAt(i - 3) + str.charAt(j - 3) + str.charAt(i + 3) + str.charAt(j + 3);\n    str = str.charAt(i - 4) + str.charAt(j - 4) + str.charAt(i + 4) + str.charAt(j + 4);\n    str = str.charAt(i - 5) + str.charAt(j - 5) + str.charAt(i + 5) + str.charAt(j + 5);\n    str = str.charAt(i - 6) + str.charAt(j - 6) + str.charAt(i + 6) + str.charAt(j + 6);\n    return str;\n};\n\nconst isUnique = (arr) => {\n    if (arr.length === 1) {\n        return true;\n    }\n    if (arr.length === 2) {\n        return true;\n    }\n    let l = arr[0] - 1;\n    let r = arr[arr.length - 1] + 1;\n    let mid = Math.floor((l + r) / 2);\n    if (arr[mid] === arr[mid + 1]) {\n        "}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let ret = [],\n      flag = true;\n  while (flag) {\n    flag = false;\n    for (let i = 0; i < l.length; i++) {\n      if (ret.indexOf(l[i]) === -1) {\n        ret.push(l[i]);\n        flag = true;\n      }\n    }\n  }\n  return ret;\n};\n\nmodule.exports = unique;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l === null) {\n    return null\n  } else if (l.length === 0) {\n    return null\n  } else if (l.length === 1) {\n    return l[0]\n  } else if (l[0] > l[1]) {\n    return l[0]\n  } else {\n    return l[1]\n  }\n}\n\nexport default maxElement\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  return _.reduce(range(1, n + 1), (acc, i) => {\n    if (i % 3 === 0) {\n      acc.push(\"fizz\");\n    }\n    if (i % 5 === 0) {\n      acc.push(\"buzz\");\n    }\n    if (acc.length === n) {\n      return acc;\n    }\n    return acc;\n  }, []);\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n    const newList = [];\n    for (let i = 0; i < l.length; i += 2) {\n        newList.push(l[i]);\n    }\n    for (let i = 1; i < l.length; i += 2) {\n        newList.push(l[i]);\n    }\n    return newList;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string drawstring by cycling groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string drawstring by cycling groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   let decoded = '', i = 0, j = 0;\n   while (i < s.length) {\n     if (s.charAt(i) === s.charAt(i + 1)) {\n       decoded += s.charAt(i);\n       i += 2;\n     } else {\n       if (j > 0) {\n         decoded += s.charAt(j);\n       }\n       j = i;\n       i++;\n     }\n   }\n   if (j > 0) {\n     decoded += s.charAt(j);\n   }\n   return decoded;\n}\n*/<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number phone number and it's also prime premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number phone number and it's also prime premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    return (n * (n + 1) / 2) | 0;\n};\n\nconst fib = primeFib(10);\n\nconsole.log(fib);\n\n/*\n  It returns the sum of the first n natural numbers.\n  >>> sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  55\n  */\nconst sum = (...numbers) => {\n    let sum = 0;\n    numbers.forEach((number) => {\n        sum += number;\n    });\n    return sum;\n};\n\nconsole.log(sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));\n\n/*\n  It returns the nth number that is a prime number.\n  >>> prime(1)\n  2\n  >>> prime(2)\n  3\n  >>> prime(3)\n  5\n  >>> prime(4)\n  7\n  >>> prime(5)\n  11\n  >>> prime(6)\n  13\n  >>> prime(7)\n  17\n  >>> prime(8)\n  19\n  >>> prime(9)\n  23\n  >>> prime(10)\n  29\n  >>> prime(11)\n  31\n  >>> prime(12)\n  37\n  >>> prime(13)\n  41\n  >>> prime(14)\n  43\n  >>> prime(15)\n  47\n  >>> prime(16)\n  53\n  >>> prime(17)\n  59\n  >>> prime(18)\n  61\n  >>> prime(19)\n  67\n  >>> prime(20)\n  71\n  >>> prime(21)\n  73\n  >>> prime(22)\n  79\n  >>> prime(23)\n  83\n  >>> prime(24)\n  89\n  >>> prime(25)\n  97\n  >>> prime(26)\n  101\n  >>> prime(27)\n  103\n  >>> prime(28)\n  107\n  >>> prime(29)\n  109\n  >>> prime(30)\n  113\n  >>> prime(31)\n  127\n  >>> prime(32)\n  131\n  >>> prime(33)\n  137\n  >>> prime(34)\n  139\n  >>> prime(35)\n  143\n  >>> prime(36)\n  149\n  >>> prime(37)\n  151\n  >>> prime(38)\n  157\n  >>> prime(39)\n  163\n  >>> prime(40)\n  167\n  >>> prime(41)\n  173\n  >>> prime(42)\n  179\n  >>> prime(43)\n  181\n  >>> prime(44)\n  191\n  >>> prime(45)\n  193\n  >>> prime(46)\n  197\n  >>> prime(47)\n  199\n  >>> prime(48)\n  211\n  >>> prime(49)\n  223\n  >>> prime(50)\n  227\n  >>> prime(51)\n  229\n  >>> prime(52)\n  233\n  >>> prime(53)\n  239\n  >>> prime(54)\n  241\n  >>> prime(55)\n  251\n  >>> prime(56)\n  257\n  >>> prime(57)\n  263\n  >>> prime(58)\n  269\n  >>> prime(59)\n  271\n  >>> prime(60)\n  277\n  >>> prime(61)\n  281\n  >>> prime(62)\n  283\n  >>> prime(63)\n  289\n  >>> prime(64)\n  293\n  >>> prime(65)\n  307\n  >>> prime(66)\n  311\n  >>> prime(67)\n  313\n  >>> prime(68)\n  317\n  >>> prime(69)\n  319\n  >>> prime(70)\n  331\n  >>> prime(71)\n  337\n  >>> prime(72)\n  339\n  >>> prime(73)\n  343\n  >>> prime(74)\n  349\n  >>> prime(75)\n  353\n  >>> prime(76)\n  359\n  >>> prime(77)\n  361\n  >>> prime(78)\n  367\n  >>> prime(79)\n  373\n  >>> prime(80)\n  379\n  >>> prime(81)\n  383\n  >>> prime(82)\n  389\n  >>> prime(83)\n  391\n  >>> prime(84)\n  397\n  >>> prime(85)\n  401\n  >>> prime(86)\n  409\n  >>> prime(87)\n  419\n  >>> prime(88)\n  421\n  >>> prime(89)\n  431\n  >>> prime(90)\n  433\n  >>> prime(91)\n  439\n  >>> prime(92)\n  443\n  >>> prime(93)\n  449\n  >>> prime(94)\n  457\n  >>> prime(95)\n  461\n  >>> prime(96)\n  463\n  >>> prime(97)\n  467\n  >>> prime(98)\n  479\n  >>> prime(99)\n  487\n  >>> prime(100)\n  491\n  >>> prime(101)\n  499\n  >>> prime(102)\n  503\n  >>> prime(103)\n  509\n  >>> prime(104)\n  521\n  >>> prime(105)\n  523\n  >>> prime(106)\n  541\n  >>> prime(107)\n  547\n  >>> prime(108)\n  557\n  >>> prime(109)\n  563\n  >>> prime(110)\n  569\n  >>> prime(111)\n  571\n  >>> prime(112)\n  577\n  >>> prime(113)\n  587\n  >>> prime(114)\n  593\n  >>> prime(115)\n  599\n  >>> prime(116)\n  601\n  >>> prime(117)\n  607\n  >>> prime(118)\n  613\n  >>> prime(119)\n  617\n  >>> prime(120)\n  619\n  >>> prime(121)\n  631\n  >>> prime(122)\n  641\n  >>> prime(123)\n  643\n  >>> prime(124)\n  647\n  >>> prime(125)\n  653\n  "}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  return l.filter((x) => {\n    return l.filter((y) => {\n      return x!== y && Math.abs(x - y) === Math.abs(x + y);\n    }).length === 2;\n  }).length === 3;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight uncoiled infinitely long retentive line. \n   n cars car are driving left bequeath to right;   simultaneously, a different unlike set stage set of n cars cable car \n   are driving repel right proper to left.    The two sets of cars start get down out being very far from \n   each other.   All cars car move affect in the same speed.   Two cars are said to collide \n   when a car that's moving travel left bequeath to right good hits hit a car that's moving act right to left. \n   However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function outputs the number issue of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly straight uncoiled infinitely long retentive line. \n   n cars car are driving left bequeath to right;   simultaneously, a different unlike set stage set of n cars cable car \n   are driving repel right proper to left.    The two sets of cars start get down out being very far from \n   each other.   All cars car move affect in the same speed.   Two cars are said to collide \n   when a car that's moving travel left bequeath to right good hits hit a car that's moving act right to left. \n   However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function outputs the number issue of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n   let c1 = carArray[0];\n   let c2 = carArray[1];\n   let r = c1.x - c2.x;\n   let c = c1.y - c2.y;\n   let a = c1.vx - c2.vx;\n   let b = c1.vy - c2.vy;\n   let d = Math.sqrt(r*r + c*c + a*a + b*b);\n   let d2 = Math.pow(d, 2);\n   let a2 = a*a;\n   let b2 = b*b;\n   let r2 = r*r;\n   let s = d2 - a2 - b2;\n   let c2s = c2*c2;\n   let c2r2 = c2r*c2r;\n   let c1s = c1*c1;\n   let c1r2 = c1r*c1r;\n   let s2 = c2s - c1s;\n   let c1c2 = c1*c2;\n   let s1s2 = s - c1s - c2s;\n   let r2s1 = r2 - c1s - c2s;\n   let r2s2 = r2 - c2s - c1s;\n   let c1r2s1 = c1r2 - c1s - c2s;\n   let c2r2s2 = c2r2 - c2s - c1s;\n   let c1r2s2 = c1r2 - c2s - c2s;\n   let s1s2r2 = s1s2 - r2 - c2s;\n   let s1s2r1 = s1s2 - r1 - c2s;\n   let s1s2c2 = s1s2 - c2 - c1s;\n   let s1s2c1 = s1s2 - c1 - c2s;\n   let s1s2r1r2 = s1s2r2 - r1 - r2;\n   let s1s2r1c2 = s1s2r1 - c1 - c2s;\n   let s1s2r1c1 = s1s2r1 - c1 - c1s;\n   let s1s2r2c2 = s1s2r2 - c2 - c1s;\n   let s1s2r2c1 = s1s2r2 - c1 - c2s;\n   let s1s2c1c2 = s1s2c1 - c2 - c1s;\n   let s1s2c1c1 = s1s2c1 - c1 - c1s;\n   let s1s2c2c2 = s1s2c2 - c2 - c1s;\n   let s1s2c2c1 = s1s2c2 - c1 - c2s;\n   let s1s2c1c2 = s1s2c1 - c1 - c2s;\n   let s1s2c1c1 = s1s2c1 - c1 - c1s;\n   let s1s2c2c1 = s1s2c2 - c2 - c1s;\n   let s1s2c2c1r2 = s1s2c2c1 - r2 - c2s;\n   let s1s2c2c1r1 = s1s2c2c1 - r1 - c2s;\n   let s1s2c2c1c2 = s1s2c2c1 - c2 - c2s;\n   let s1s2c2c1c1 = s1s2c2c1 - c1 - c2s;\n   let s1s2c2c1c1r2 = s1s2c2c1c2 - r2 - r1;\n   let s1s2c2c1c1r1 = s1s2c2c1c2 - r1 - r2;\n   let s1s2c2c1c1c2 = s1s2c2c1c2 - c2 - c1s;\n   let s1s2c2c1c1c1 = s1s2c2c1c2 - c1 - c1s;\n   let s1s2c2c1c1c1r2 = s1s2c2c1c1c2 - r2 - r1;\n   let s1s2c2c1c1c1r1 = s1s2c2c1c1c2 - r1 - r2;\n   let s1s2c2c1c1c1c2 = s1s2c2c1c1c2 - c2 - c1s;\n   let s1s2c2c1c1c1c1 = s1s2c2c1c1c2 - c1 - c1s;\n   let s1s2c2c1c1c1c1r2 = s1s2c2c1c1c1c2 - r2 - r1;\n   let s1s2c2c1c1c1c1r1 = s1s2c2c1c1c1c2 - r1 - r2;\n   let s1s2c2c1c1c1c1c2 = s1s2c2c1c1c1c2 - c2 - c1s;\n   let s1s2c2c1c1c1c1c1 = s1s2c2c1c1"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const list = [...l];\n  let idx = 0;\n  return list.map(e => idx++ + e);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  const list = [...l];\n  let idx = 0;\n  return list.map(e => e + 1);\n};\n\nmodule.exports = {\n  incrList,\n  incrList2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements chemical element in the list that \n   sum to zero, and false fake otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let isSumToZero = true;\n  for (let i = 0; i < l.length - 1; i += 2) {\n    if (l[i + 1]!== 0) {\n      isSumToZero = false;\n      break;\n    }\n  }\n  return isSumToZero;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number phone number x to base.\n   return string representation theatrical performance after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number phone number x to base.\n   return string representation theatrical performance after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const output = []\n  while (x > 0) {\n    output.unshift(x % base)\n    x = Math.floor(x / base)\n  }\n  return output.reverse().join('')\n}\n\n/*Find the value of a number given an array of possible values and a multiplier.\n   for example:\n   [1,2,3,4]\n   5 = 3*2\n   6 = 3*3\n   9 = 3*3*3\n  returns the value\n  >>> findValue(1, [1,2,3,4], 5)\n  3\n  >>> findValue(1, [1,2,3,4], 6)\n  3\n  >>> findValue(1, [1,2,3,4], 9)\n  3\n  */\nconst findValue = (x, values, multiplier) => {\n  let result = 0\n  for (let i = 0; i < values.length; i++) {\n    if (x === values[i]) {\n      result += i * multiplier\n    }\n  }\n  return result\n}\n\n/*\n  find the nth term of a fibonacci sequence.\n  for example:\n  findTerm(2, [0, 1, 1, 2, 3, 5, 8])\n  returns 3\n  */\nconst findTerm = (n, terms) => {\n  const nth = terms[n - 1]\n  return nth + terms[n - 2]\n}\n\n/*\n  find the nth fibonacci number.\n  for example:\n  findFib(3)\n  returns 8\n  */\nconst findFib = (n) => {\n  const terms = [0, 1, 1, 2, 3, 5, 8]\n  return findTerm(n, terms)\n}\n\n/*\n  find the nth tribonacci number.\n  for example:\n  findTrib(3)\n  returns 13\n  */\nconst findTrib = (n) => {\n  const terms = [0, 1, 1, 2, 3, 5, 8, 13]\n  return findTerm(n, terms)\n}\n\n/*\n  find the nth bernoulli number.\n  for example:\n  findBern(5)\n  returns 11\n  */\nconst findBern = (n) => {\n  const terms = [1, 1, 2, 6, 16, 36, 64, 92, 128, 216]\n  return findTerm(n, terms)\n}\n\n/*\n  find the nth golden number.\n  for example:\n  findGolden(2)\n  returns 12\n  */\nconst findGolden = (n) => {\n  const terms = [1, 1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 59049, 177147, 531441, 1594323, 4782969, 14348907, 43046721, 129140163, 35301239, 1073741837, 2147483647]\n  return findTerm(n, terms)\n}\n\n/*\n  find the nth harmonic number.\n  for example:\n  findHarm(3)\n  returns 6\n  */\nconst findHarm = (n) => {\n  const terms = [1, 1, 1, 1, 1, 2, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767]\n  return findTerm(n, terms)\n}\n\n/*\n  find the nth hypergeometric number.\n  for example:\n  findHyper(3, 5, 5)\n  returns 5\n  */\nconst findHyper = (n, a, b) => {\n  const terms = [1, 1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 1307674368000, 20922789888000, 355687428096000, 6402373705728000, 121645100408832000, 2432902008176640000]\n  return findTerm(n, terms)\n}\n\n/*\n  find the nth square root of a number.\n  for example:\n  findSqrt(13)\n  returns 3\n  */\nconst findSqrt = (n) => {\n  const terms = [1, 1, 2, 3, 5, 9, 15, 25, 45, 75, 125, 225, 375, 625, 975, 1525, 2025, 3125, 4525, 7125, 9125, 13125, 17125, 21125, 28125, 36125, 45125, 56525, 76525, 96525, 126525, 152525, 202525, 282525, 362525, 452525, 565625, 757525, 9757525, 12757525, 15757525, 20257525, 2837525, 3637525, 4547525, 5457525, 6557525, 75757525, 975757525, 1275757525, 1575757525, 2025757525, 283757525, 363757525, 453757525, 5453757525, 6553757525, 7553757525, 9555757525, 12555757525, 15555757525, 2055757525, 2855757525, 3555757525, 4555757525, 555757525, 6555757525, 755757525, 8555757525, 9555757525]\n  return findTerm(n, terms)\n}\n\n/*\n  find the nth permutation number.\n  for example:\n  findPerm(3)\n  returns 8\n  */\nconst findPerm = (n) => {\n  const terms = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 177"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high gamey return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high gamey return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h - 2) / 2;\n}\n\n/*\n  Given a side of a triangle, return area of a triangle triangulum\n  \n  >>> triangleArea(5, 4)\n  3.5\n  \n  >>> triangleArea(2, 3)\n  1.0\n  \n  >>> triangleArea(5, 5)\n  15\n  \n  >>> triangleArea(10, 4)\n  17\n  \n  >>> triangleArea(5, 1)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, -2)\n  0.0\n  \n  >>> triangleArea(5, -3)\n  0.0\n  \n  >>> triangleArea(0, -1)\n  0.0\n  \n  >>> triangleArea(-1, -1)\n  0.0\n  \n  >>> triangleArea(-2, -2)\n  0.0\n  \n  >>> triangleArea(-3, -3)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>> triangleArea(0, 0)\n  0.0\n  \n  >>>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write compose a function to efficiently compute calculate the n-th element of the fib4 number act sequence succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write compose a function to efficiently compute calculate the n-th element of the fib4 number act sequence succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if (n === 0) {\n        return 0\n    } else if (n === 1) {\n        return 1\n    } else {\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n}\n\n/*The Fib5 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib5(0) - > 0 \n   fib5(1) - > 0 \n   fib5(2) - > 3 \n   fib5(3) - > 0 \n   fib5(n) - > fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5)\n   Please write compose a function to efficiently compute calculate the n-th element of the fib5 number act sequence succession.   Do not use recursion.\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  9\n  >>> fib5(7)\n  15\n  >>> fib5(8)\n  21\n  >>> fib5(9)\n  28\n  */\nconst fib5 = (n) => {\n    if (n === 0) {\n        return 0\n    } else if (n === 1) {\n        return 1\n    } else {\n        return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5)\n    }\n}\n\n// Test\n/*\n\nconst fib4 = (n) => {\n    if (n === 0) {\n        return 0\n    } else if (n === 1) {\n        return 1\n    } else {\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n}\n\nconst fib5 = (n) => {\n    if (n === 0) {\n        return 0\n    } else if (n === 1) {\n        return 1\n    } else {\n        return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5)\n    }\n}\n\nconst fib6 = (n) => {\n    if (n === 0) {\n        return 0\n    } else if (n === 1) {\n        return 1\n    } else {\n        return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5) + fib6(n - 6)\n    }\n}\n\nconst fib7 = (n) => {\n    if (n === 0) {\n        return 0\n    } else if (n === 1) {\n        return 1\n    } else {\n        return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4) + fib7(n - 5) + fib7(n - 6) + fib7(n - 7)\n    }\n}\n\nconst fib8 = (n) => {\n    if (n === 0) {\n        return 0\n    } else if (n === 1) {\n        return 1\n    } else {\n        return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4) + fib8(n - 5) + fib8(n - 6) + fib8(n - 7) + fib8(n - 8)\n    }\n}\n\nconst fib9 = (n) => {\n    if (n === 0) {\n        return 0\n    } else if (n === 1) {\n        return 1\n    } else {\n        return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4) + fib9(n - 5) + fib9(n - 6) + fib9(n - 7) + fib9(n - 8) + fib9(n - 9)\n    }\n}\n\nconst fib10 = (n) => {\n    if (n === 0) {\n        return 0\n    } else if (n === 1) {\n        return 1\n    } else {\n        return fib10(n - 1) + fib10(n - 2) + fib10(n - 3) + fib10(n - 4) + fib10(n - 5) + fib10(n - 6) + fib10(n - 7) + fib10(n - 8) + fib10(n - 9) + fib10(n - 10)\n    }\n}\n\nconst fib11 = (n) => {\n    if (n === 0) {\n        return 0\n    } else if (n === 1) {\n        return 1\n    } else {\n        return fib11(n - 1) + fib11(n - 2) + fib11(n - 3) + fib11(n - 4) + fib11(n - 5) + fib11(n - 6) + fib11(n - 7) + fib11(n - 8) + fib11(n - 9) + fib11(n - 10) + fib11(n - 11)\n    }\n}\n\nconst fib12 = (n) => {\n    if (n === 0) {\n        return 0\n    } else if (n === 1) {\n        return 1\n    } else {\n        return fib12(n - 1) + fib12(n - 2) + fib12(n - 3)"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const array = l.slice()\n  array.sort()\n\n  if (array.length % 2 === 0) {\n    return (array[(array.length - 1) / 2] + array[(array.length - 1) / 2 + 1]) / 2\n  }\n\n  return array[(array.length - 1) / 2]\n}\n\nexport default median\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string drawstring is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string drawstring is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    const textLength = text.length;\n\n    if (textLength === 0) return true;\n\n    let mid = textLength / 2;\n    let i = 0;\n    let j = textLength - 1;\n\n    while (i <= mid && j >= mid) {\n        if (text.charAt(i)!== text.charAt(j)) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n\n    return true;\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  n %= p\n  if (n < 0) {\n    return p - n\n  }\n  return n\n}\n\n/**\n  >>> modq(3, 5)\n  3\n  >>> modq(1101, 101)\n  1\n  >>> modq(0, 101)\n  1\n  >>> modq(3, 11)\n  8\n  >>> modq(100, 101)\n  1\n  */\nconst modq = (n, q) => {\n  n %= q\n  if (n < 0) {\n    return q - n\n  }\n  return n\n}\n\n/**\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  1\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst mod = (n, p) => {\n  return modp(n, p) % p\n}\n\n/**\n  >>> modq(3, 5)\n  3\n  >>> modq(1101, 101)\n  1\n  >>> modq(0, 101)\n  1\n  >>> modq(3, 11)\n  8\n  >>> modq(100, 101)\n  1\n  */\nconst modq = (n, q) => {\n  return modq(n, q) % q\n}\n\nexport {\n  mod,\n  modp,\n  modq\n}\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string drawstring by shifting every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes aim as input string bowed stringed instrument encoded with encode_shift function affair. Returns reappearance decoded decode string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string drawstring by shifting every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes aim as input string bowed stringed instrument encoded with encode_shift function affair. Returns reappearance decoded decode string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   let s = s.split(\" \");\n   let s2 = [];\n   for (let i = 0; i < s.length; i++) {\n      s2.push(String.fromCharCode(\n        (((s[i].charCodeAt(0) - \" a\".charCodeAt(0) )% 26) - 5) + \" a\".charCodeAt(0)\n      )\n    );\n   }\n   return s2.join(\"\");\n } \n*/\n\nfunction encodeShift(s) {\n    let s2 = [];\n    for (let i = 0; i < s.length; i++) {\n        s2.push(String.fromCharCode(\n            (((s[i].charCodeAt(0) - \" a\".charCodeAt(0) )% 26) - 5) + \" a\".charCodeAt(0)\n        )\n        );\n    }\n    return s2.join(\" \");\n}\n\nfunction decodeShift(s) {\n    let s2 = [];\n    for (let i = 0; i < s.length; i++) {\n        s2.push(String.fromCharCode(\n            (((s[i].charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + 5) + \" a\".charCodeAt(0)\n        )\n        );\n    }\n    return s2.join(\"\");\n}\n\nfunction encodeShift(s) {\n    let s2 = [];\n    for (let i = 0; i < s.length; i++) {\n        s2.push(String.fromCharCode(\n            (((s[i].charCodeAt(0) - \" a\".charCodeAt(0) )% 26) - 5) + \" a\".charCodeAt(0)\n        )\n        );\n    }\n    return s2.join(\" \");\n}\n\nfunction decodeShift(s) {\n    let s2 = [];\n    for (let i = 0; i < s.length; i++) {\n        s2.push(String.fromCharCode(\n            (((s[i].charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + 5) + \" a\".charCodeAt(0)\n        )\n        );\n    }\n    return s2.join(\"\");\n}\n\nfunction encodeShift(s) {\n    let s2 = [];\n    for (let i = 0; i < s.length; i++) {\n        s2.push(String.fromCharCode(\n            (((s[i].charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + 5) + \" a\".charCodeAt(0)\n        )\n        );\n    }\n    return s2.join(\" \");\n}\n\nfunction decodeShift(s) {\n    let s2 = [];\n    for (let i = 0; i < s.length; i++) {\n        s2.push(String.fromCharCode(\n            (((s[i].charCodeAt(0) - \" a\".charCodeAt(0) )% 26) - 5) + \" a\".charCodeAt(0)\n        )\n        );\n    }\n    return s2.join(\"\");\n}\n\nconsole.log(decodeShift(\"aaaaaa\"));\nconsole.log(encodeShift(\"aaaaaa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string drawstring and returns string drawstring without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z']\n  const vowelsInText = vowels.map(v => text.indexOf(v) > -1)\n  const consonantsInText = consonants.map(c => text.indexOf(c) > -1)\n  const first = text.charAt(0)\n  const last = text.charAt(text.length - 1)\n  let newText = ''\n  if (vowelsInText.indexOf(true) === -1) {\n    newText += first\n  }\n  if (vowelsInText.indexOf(true) > -1) {\n    if (consonantsInText.indexOf(true) > -1) {\n      newText += text.slice(1, text.length - 1)\n    } else if (consonantsInText.indexOf(false) > -1) {\n      newText += text.slice(1)\n    } else {\n      newText += text.slice(1, text.length)\n    }\n  } else {\n    newText += text.slice(1, text.length)\n  }\n  if (vowelsInText.indexOf(true) > -1 && consonantsInText.indexOf(false) > -1) {\n    newText += last\n  }\n  return newText\n}\n\nexport default removeVowels\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold brink t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l are below threshold brink t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const m = l.length\n  const l2 = l.slice()\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < m; j++) {\n      if (l2[i] < l2[j] && Math.abs(l2[i] - l2[j]) <= t) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nmodule.exports = belowThreshold\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\nexport default add;\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters quality.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same characters quality.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len === 0) {\n    return s1Len === 0\n  }\n  if (s1Len === 0) {\n    return false\n  }\n\n  if (s0.charCodeAt(0)!== s1.charCodeAt(0)) {\n    return false\n  }\n  if (s0Len === 1) {\n    return true\n  }\n  for (let i = 1; i < s0Len; i++) {\n    if (s0.charCodeAt(i)!== s1.charCodeAt(i)) {\n      return false\n    }\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  const a = 1, b = 1;\n  return a + b;\n};\n\nmodule.exports = fib;\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketsLength = brackets.length;\n  for (let i = 0; i < bracketsLength; i++) {\n    let openingBracket = brackets[i];\n    let closingBracket = brackets[i + 1];\n\n    if (openingBracket === \">\" && closingBracket === \">\") {\n      return false;\n    }\n\n    if (openingBracket === \"<\" && closingBracket === \"<\") {\n      return false;\n    }\n\n    if (openingBracket === \"<\" &&!closingBracket) {\n      return false;\n    }\n\n    if (!openingBracket && closingBracket === \">\") {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = correctBracketing;<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length < 2) return true;\n  const last = l[l.length - 1];\n  let prev = l[l.length - 2];\n  return l.every((el) => el >= prev);\n}\n\n/**\n  * Return true if given list is monotonically increasing decrease\n  * @param l\n  * @returns {boolean}\n  */\nconst decreasing = (l) => {\n  if (l.length < 2) return true;\n  const last = l[l.length - 1];\n  let prev = l[l.length - 2];\n  return l.every((el) => el <= prev);\n}\n\n/**\n  * Return true if given list is monotonically decreasing increase\n  * @param l\n  * @returns {boolean}\n  */\nconst increasing = (l) => {\n  if (l.length < 2) return true;\n  const last = l[l.length - 1];\n  let prev = l[l.length - 2];\n  return l.every((el) => el >= prev);\n}\n\n/**\n  * Return true if given list is monotonically increasing or decreasing\n  * @param l\n  * @returns {boolean}\n  */\nconst nonmonotonic = (l) => {\n  return!monotonic(l);\n}\n\n/**\n  * Return true if given list is monotonically decreasing\n  * @param l\n  * @returns {boolean}\n  */\nconst decreasing = (l) => {\n  return!increasing(l);\n}\n\n/**\n  * Return true if given list is monotonically increasing\n  * @param l\n  * @returns {boolean}\n  */\nconst increasing = (l) => {\n  return!decreasing(l);\n}\n\n/**\n  * Return true if given list is monotonically increasing or decreasing\n  * @param l\n  * @returns {boolean}\n  */\nconst nonmonotonic = (l) => {\n  return!increasing(l) &&!decreasing(l);\n}\n\nmodule.exports = {\n  monotonic,\n  decreasing,\n  increasing,\n  nonmonotonic\n}\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements element for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elements element for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  return l1.filter((e) => l2.indexOf(e) >= 0);\n};\n\n//export default common;\n\n// module.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const isPrime = (p) => {\n    for (let i = 2; i <= p; i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  if (n === 1 || n === 2) {\n    return n;\n  }\n  if (isPrime(n)) {\n    return n;\n  }\n  const half = n / 2;\n  let largest = largestPrimeFactor(half);\n  while (isPrime(largest + half)) {\n    largest = largest + half;\n  }\n  return largest;\n};\n\nconsole.log(largestPrimeFactor(13195));\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers issue from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums numbers issue from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        result += i;\n    }\n    return result;\n};\n\n// let sum = sumToN(10);\n// console.log(sum);\n// /*\n//  * sumToN is a function that sums numbers issue from 1 to n.\n//  * @param {Number} n\n//  * @returns {Number}\n//  */\n// const sumToN = (n) => {\n//     let result = 1;\n//     for (let i = 1; i <= n; i++) {\n//         result += i;\n//     }\n//     return result;\n// };\n\n// console.log(sumToN(10));\n// console.log(sumToN(5));\n// console.log(sumToN(15));\n// console.log(sumToN(100));\n// console.log(sumToN(1));\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening possibility bracket has a corresponding closing closure bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const numOpen = brackets.split(\"(\").length - 1\n  const numClosed = brackets.split(\")\").length - 1\n  return numOpen === numClosed\n}\n\nmodule.exports = correctBracketing\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return restitution derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return restitution derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  // Base case\n  if (xs.length === 1) {\n    return xs;\n  }\n\n  // If length is odd, the derivative is zero\n  if (xs.length % 2 === 1) {\n    return [0];\n  }\n\n  // Otherwise, add the first and second derivative\n  const firstDerivative = derivative(xs.slice(0, xs.length - 1));\n  const secondDerivative = derivative(xs.slice(1, xs.length));\n  return [...firstDerivative,...secondDerivative];\n};\n\nconst solve = (xs) => {\n  const derivative = derivative(xs);\n  const firstDerivative = derivative[1];\n  const secondDerivative = derivative[2];\n  const x1 = firstDerivative / secondDerivative;\n  const x2 = -1 / (secondDerivative + x1 * firstDerivative);\n  return [x1, x2];\n};\n\nconst x1 = solve([3, 1, 2, 4, 5]);\nconst x2 = solve([1, 2, 3]);\n\nconst xs = [1, 2, 3, 4, 5, 6];\n\nconst xs1 = [1, 2, 3];\nconst xs2 = [3, 4, 5];\nconst xs3 = [6];\n\nconsole.log(xs1);\nconsole.log(xs2);\nconsole.log(xs3);\n\nconsole.log(x1);\nconsole.log(x2);\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write compose a function to efficiently compute calculate the n-th element of the fibfib number act sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write compose a function to efficiently compute calculate the n-th element of the fibfib number act sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let nth = 0;\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return (fibfib(n-1) + fibfib(n-2) + fibfib(n-3));\n  }\n}\n\nmodule.exports = fibfib;\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string drawstring representing \n   a word parole as input and returns hark back the number of vowels in the string bowed stringed instrument. \n   Vowels in this case event are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also besides a \n   vowel, but only when it is at the end goal of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string drawstring representing \n   a word parole as input and returns hark back the number of vowels in the string bowed stringed instrument. \n   Vowels in this case event are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also besides a \n   vowel, but only when it is at the end goal of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let len = s.length;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(vowelsCount(\"abceo\"));\n\n/*Write a function that will take a string as input and return a list of all the words in the string \n  bowdered instrument. The list of words should be sorted in ascending order.\n  \n  Example:\n  >>> wordsIn(\"abceo\")\n  ['abceo', 'a', 'abceo', 'ac', 'ace', 'aceo', 'acid', 'acid', 'aceo', 'acids', 'aceo', 'acido', 'acids', 'aceo', 'aced', 'acedo', 'aceo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'aceo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'aceo', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acido', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acido', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acido', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acido', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acido', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acido', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acido', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acido', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido', 'aced', 'acedo', 'acedo', 'acids', 'acids', 'acido', 'acido"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right proper by shift\n   and return the result as a string drawstring. \n   If shift > number of digits finger, return digits reversed change by reversal.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right proper by shift\n   and return the result as a string drawstring. \n   If shift > number of digits finger, return digits reversed change by reversal.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let y = x.toString();\n  let z = y.slice();\n  if(shift > y.length) {\n    z.reverse();\n  } else {\n    for(let i = 0; i < shift; i++) {\n      z.unshift(z.pop());\n    }\n  }\n  return z.join('');\n};\n\nconst circularShift = (x, shift) => {\n  let y = x.toString();\n  let z = y.slice();\n  if(shift > y.length) {\n    z.reverse();\n  } else {\n    for(let i = 0; i < shift; i++) {\n      z.unshift(z.pop());\n    }\n  }\n  return z.join('');\n};\n\nconst circularShift = (x, shift) => {\n  let y = x.toString();\n  let z = y.slice();\n  if(shift > y.length) {\n    z.reverse();\n  } else {\n    for(let i = 0; i < shift; i++) {\n      z.unshift(z.pop());\n    }\n  }\n  return z.join('');\n};\n\nconst circularShift = (x, shift) => {\n  let y = x.toString();\n  let z = y.slice();\n  if(shift > y.length) {\n    z.reverse();\n  } else {\n    for(let i = 0; i < shift; i++) {\n      z.unshift(z.pop());\n    }\n  }\n  return z.join('');\n};\n\nconst circularShift = (x, shift) => {\n  let y = x.toString();\n  let z = y.slice();\n  if(shift > y.length) {\n    z.reverse();\n  } else {\n    for(let i = 0; i < shift; i++) {\n      z.unshift(z.pop());\n    }\n  }\n  return z.join('');\n};\n\nconst circularShift = (x, shift) => {\n  let y = x.toString();\n  let z = y.slice();\n  if(shift > y.length) {\n    z.reverse();\n  } else {\n    for(let i = 0; i < shift; i++) {\n      z.unshift(z.pop());\n    }\n  }\n  return z.join('');\n};\n\nconst circularShift = (x, shift) => {\n  let y = x.toString();\n  let z = y.slice();\n  if(shift > y.length) {\n    z.reverse();\n  } else {\n    for(let i = 0; i < shift; i++) {\n      z.unshift(z.pop());\n    }\n  }\n  return z.join('');\n};\n\nconst circularShift = (x, shift) => {\n  let y = x.toString();\n  let z = y.slice();\n  if(shift > y.length) {\n    z.reverse();\n  } else {\n    for(let i = 0; i < shift; i++) {\n      z.unshift(z.pop());\n    }\n  }\n  return z.join('');\n};\n\nconst circularShift = (x, shift) => {\n  let y = x.toString();\n  let z = y.slice();\n  if(shift > y.length) {\n    z.reverse();\n  } else {\n    for(let i = 0; i < shift; i++) {\n      z.unshift(z.pop());\n    }\n  }\n  return z.join('');\n};\n\nconst circularShift = (x, shift) => {\n  let y = x.toString();\n  let z = y.slice();\n  if(shift > y.length) {\n    z.reverse();\n  } else {\n    for(let i = 0; i < shift; i++) {\n      z.unshift(z.pop());\n    }\n  }\n  return z.join('');\n};\n\nconst circularShift = (x, shift) => {\n  let y = x.toString();\n  let z = y.slice();\n  if(shift > y.length) {\n    z.reverse();\n  } else {\n    for(let i = 0; i < shift; i++) {\n      z.unshift(z.pop());\n    }\n  }\n  return z.join('');\n};\n\nconst circularShift = (x, shift) => {\n  let y = x.toString();\n  let z = y.slice();\n  if(shift > y.length) {\n    z.reverse();\n  } else {\n    for(let i = 0; i < shift; i++) {\n      z.unshift(z.pop());\n    }\n  }\n  return z.join('');\n};\n\nconst circularShift = (x, shift) => {\n  let y = x.toString();\n  let z = y.slice();\n  if(shift > y.length) {\n    z.reverse();\n  } else {\n    for(let i = 0; i < shift; i++) {\n      z.unshift(z.pop());\n    }\n  }\n  return z.join('');\n};\n\nconst circularShift = (x, shift) => {\n  let y = x.toString();\n  let z = y.slice();\n  if(shift > y.length) {\n    z.reverse();\n  } else {\n    for(let i = 0; i < shift; i++) {\n      z.unshift(z.pop());\n    }\n  }\n  return z.join('');\n};\n\nconst circularShift = (x, shift) => {\n  let y = x.toString();\n  let z = y.slice();\n  if(shift > y.length) {\n    z.reverse();\n  } else {\n    for(let i = 0; i < shift; i++) {\n      z.unshift(z.pop());\n    }"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function routine that takes a string drawstring as input and returns hark back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   Write a function routine that takes a string drawstring as input and returns hark back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let i = 0;\n  let sum = 0;\n  while (i < s.length) {\n    let c = s[i];\n    if (c >= 97 && c <= 122) {\n      sum += c - 97;\n    }\n    i++;\n  }\n  return sum;\n};\n\nconst check = (s) => {\n  let sum = 0;\n  let i = 0;\n  while (i < s.length) {\n    let c = s[i];\n    if (c >= 97 && c <= 122) {\n      sum += c - 97;\n    }\n    i++;\n  }\n  return sum === s.length;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\nconsole.log(check(\"a\"));\nconsole.log(check(\"ab\"));\nconsole.log(check(\"abA\"));\nconsole.log(check(\"aab\"));\nconsole.log(check(\"abc\"));\nconsole.log(check(\"aAaaaX\"));\nconsole.log(check(\"helloE\"));\nconsole.log(check(\"woArBld\"));\nconsole.log(check(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string drawstring that represents a number phone number of apples and oranges orange \n   that are distributed in a basket of fruit yield this basket contains \n   apples apple, oranges orange, and mango fruits. Given the string bowed stringed instrument that represents represent the total number of \n   the oranges and apples apple and an integer that represent act the total full number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a string drawstring that represents a number phone number of apples and oranges orange \n   that are distributed in a basket of fruit yield this basket contains \n   apples apple, oranges orange, and mango fruits. Given the string bowed stringed instrument that represents represent the total number of \n   the oranges and apples apple and an integer that represent act the total full number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n  let arr = s.split(\" \");\n  let i = 0;\n  let c = 0;\n  let num = 0;\n  while (i < arr.length) {\n    c = arr[i];\n    if (c == \"apple\" || c == \"orange\") {\n      num += c == \"apple\"? 1 : -1;\n    }\n    i++;\n  }\n  return num;\n }\n */\n\nfunction fruitDistribution(s, n) {\n    // write your code in JavaScript SE\n    let arr = s.split(\" \");\n    let i = 0;\n    let c = 0;\n    let num = 0;\n    while (i < arr.length) {\n        c = arr[i];\n        if (c == \"apple\" || c == \"orange\") {\n            num += c == \"apple\"? 1 : -1;\n        }\n        i++;\n    }\n    return num;\n}\n\n//console.log(fruitDistribution(\"5 apples and 6 oranges orange \", 19));\n//console.log(fruitDistribution(\"2 apples apple and 3 oranges orange \", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch arm of a tree that has non - negative integer nodes lymph node \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes node with the same smallest even value are found determine return the node lymph node that has smallest index. \n\n   The plucked node should be returned fall in a list, [ smalest_value, its index exponent ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" Given an array representing a branch arm of a tree that has non - negative integer nodes lymph node \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes node with the same smallest even value are found determine return the node lymph node that has smallest index. \n\n   The plucked node should be returned fall in a list, [ smalest_value, its index exponent ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const odd = (val) => val % 2 === 1;\n  const find = (arr, val) => arr.find((v) => odd(v) && v < val);\n\n  if (!arr ||!arr.length) {\n    return [];\n  }\n\n  const min = find(arr, arr[0]);\n  const result = [min, arr.indexOf(min)];\n\n  const same = (arr) => arr.every((v) => v === min);\n\n  if (same(arr)) {\n    return [arr[0], 0];\n  }\n\n  return result;\n};\n\nmodule.exports = pluck;<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of positive integers integer. Return the greatest bang-up integer that is greater than \n   zero, and has a frequency greater capital than or equal to the value of the integer itself. \n   The frequency of an integer is the number numeral of times it appears appear in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non - empty list of positive integers integer. Return the greatest bang-up integer that is greater than \n   zero, and has a frequency greater capital than or equal to the value of the integer itself. \n   The frequency of an integer is the number numeral of times it appears appear in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n    if (lst.length === 0) return -1;\n    let max = lst[0];\n    let i = 0;\n    for (i = 1; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1])) // 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])) // 3\nconsole.log(search([5, 5, 4, 4, 4])) // -1\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange foreign order. \n   Strange foreign sorting, is when you start begin with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange foreign order. \n   Strange foreign sorting, is when you start begin with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) {\n    return []\n  }\n  const arr = lst.slice()\n  arr.sort((a, b) => a - b)\n  let arr2 = arr.slice()\n  arr2.sort((a, b) => b - a)\n  return arr2.concat(arr)\n}\n\nconsole.log(strangeSortList([5, 5, 5, 5]))\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides side of a triangle. Return reelect the area of \n   the triangle rounded round to 2 decimal points if the three sides slope form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides side of a triangle. Return reelect the area of \n   the triangle rounded round to 2 decimal points if the three sides slope form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n\n  let p = a + b - c;\n  let q = a + c - b;\n  let r = b + c - a;\n\n  if (p === 0 && q === 0 && r === 0) {\n    return 0;\n  }\n\n  if (p === 0) {\n    return b * c;\n  }\n\n  if (q === 0) {\n    return a * c;\n  }\n\n  if (r === 0) {\n    return a * b;\n  }\n\n  if (a * b < c * c && a * c < b * c && b * c < a * b) {\n    return Math.round(((a + b + c) / 2) * 10) / 10;\n  }\n\n  return -1;\n}\n\n/*\n  Given a triangle, return the area of the triangle rounded to two decimal points\n  */\nconst triangleArea2 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n\n  let p = a + b - c;\n  let q = a + c - b;\n  let r = b + c - a;\n\n  if (p === 0 && q === 0 && r === 0) {\n    return 0;\n  }\n\n  if (p === 0) {\n    return b * c;\n  }\n\n  if (q === 0) {\n    return a * c;\n  }\n\n  if (r === 0) {\n    return a * b;\n  }\n\n  if (a * b < c * c && a * c < b * c && b * c < a * b) {\n    return ((a + b + c) / 2) * 10;\n  }\n\n  return -1;\n}\n\nconst triangleArea3 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n\n  let p = a + b - c;\n  let q = a + c - b;\n  let r = b + c - a;\n\n  if (p === 0 && q === 0 && r === 0) {\n    return 0;\n  }\n\n  if (p === 0) {\n    return b * c;\n  }\n\n  if (q === 0) {\n    return a * c;\n  }\n\n  if (r === 0) {\n    return a * b;\n  }\n\n  if (a * b < c * c && a * c < b * c && b * c < a * b) {\n    return ((a + b + c) / 2) * 10;\n  }\n\n  return -1;\n}\n\nconst triangleArea4 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n\n  let p = a + b - c;\n  let q = a + c - b;\n  let r = b + c - a;\n\n  if (p === 0 && q === 0 && r === 0) {\n    return 0;\n  }\n\n  if (p === 0) {\n    return b * c;\n  }\n\n  if (q === 0) {\n    return a * c;\n  }\n\n  if (r === 0) {\n    return a * b;\n  }\n\n  if (a * b < c * c && a * c < b * c && b * c < a * b) {\n    return ((a + b + c) / 2) * 10;\n  }\n\n  return -1;\n}\n\nconst triangleArea5 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n\n  let p = a + b - c;\n  let q = a + c - b;\n  let r = b + c - a;\n\n  if (p === 0 && q === 0 && r === 0) {\n    return 0;\n  }\n\n  if (p === 0) {\n    return b * c;\n  }\n\n  if (q === 0) {\n    return a * c;\n  }\n\n  if (r === 0) {\n    return a * b;\n  }\n\n  if (a * b < c * c && a * c < b * c && b * c < a * b) {\n    return ((a + b + c) / 2) * 10;\n  }\n\n  return -1;\n}\n\nconst triangleArea6 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n\n  let p = a + b - c;\n  let q = a + c - b;\n  let r = b + c - a;\n\n  if (p === 0 && q === 0 && r === 0) {\n    return 0;\n  }\n\n  if (p === 0) {\n    return b * c;\n  }\n\n  if (q === 0) {\n    return a * c;\n  }\n\n  if (r === 0) {\n    return a * b;\n  }\n\n  if (a * b < c * c && a * c < b * c && b * c < a * b) {\n    return ((a + b + c) / 2) * 10;\n  }\n\n  return -1;\n}\n\nconst triangleArea7 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n\n  let p = a + b - c;\n  let q = a + c - b;\n  let r = b + c - a;\n\n  if (p === 0 && q === 0 && r === 0) {\n    return 0;\n  }\n\n  if (p === 0) {\n"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns come back true if the object aim q will fly, and false fake otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns come back true if the object aim q will fly, and false fake otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const len = q.length\n  if (len === 0) return false\n  if (q.slice(0, len - 1).join()!== q.slice(1).join()) return false\n  return w + q.reduce((sum, item) => sum + item, 0) <= w\n}\n\n/*\n  Write a function that returns come back true if the number n is prime, and false fake otherwise.\n\n  Example:\n  isPrime(19) ➞ false\n  # 19 is not prime because it is not divisible by 7, 3, 5, or 11.\n\n  isPrime(12) ➞ true\n  # 12 is prime because it is divisible by every number from 1 to 20.\n  */\nconst isPrime = n => {\n  const limit = n\n  for (let i = 2; i <= limit; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*\n  Write a function that returns true if the number n is palindromic, and false fake otherwise.\n\n  Example:\n  isPalindrome(19) ➞ true\n  # 19 is a palindromic number because it's equal to its reverse.\n\n  isPalindrome(12) ➞ false\n  # 12 is not a palindromic number because it has a length different than its reverse.\n  */\nconst isPalindrome = n => {\n  return n === n.toString().split('').reverse().join('')\n}\n\n/*\n  Write a function that returns the sum of all the elements in the list.\n\n  Example:\n  sumList([1, 2, 3]) ➞ 6\n  # The sum of the list is 6.\n  */\nconst sumList = (q) => q.reduce((sum, item) => sum + item, 0)\n\n/*\n  Write a function that returns the product of all the elements in the list.\n\n  Example:\n  productList([1, 2, 3]) ➞ 6\n  # The product of the list is 6.\n  */\nconst productList = (q) => q.reduce((sum, item) => sum * item, 1)\n\n/*\n  Write a function that returns true if the list contains the given number n, and false fake otherwise.\n\n  Example:\n  containsNumber(19, [1, 2, 3]) ➞ true\n  # 19 is in the list.\n\n  containsNumber(21, [1, 2, 3]) ➞ false\n  # 21 is not in the list.\n  */\nconst containsNumber = (n, q) => q.includes(n)\n\n/*\n  Write a function that returns true if the list is all positive, and false fake otherwise.\n\n  Example:\n  areAllPositive([1, 2, 3]) ➞ true\n  # The list is all positive.\n\n  areAllPositive([-1, 0, 2]) ➞ false\n  # The list is not all positive.\n  */\nconst areAllPositive = (q) => q.every(n => n >= 0)\n\n/*\n  Write a function that returns true if the list is all negative, and false fake otherwise.\n\n  Example:\n  areAllNegative([-1, 0, 2]) ➞ true\n  # The list is all negative.\n\n  areAllNegative([1, 2, 3]) ➞ false\n  # The list is not all negative.\n  */\nconst areAllNegative = (q) => q.every(n => n < 0)\n\n/*\n  Write a function that returns true if the list is all positive and negative, and false fake otherwise.\n\n  Example:\n  areAllPositiveAndNegative([-1, 0, 2]) ➞ true\n  # The list is all positive and negative.\n\n  areAllPositiveAndNegative([1, 2, 3]) ➞ false\n  # The list is not all positive and negative.\n  */\nconst areAllPositiveAndNegative = (q) => areAllPositive(q) && areAllNegative(q)\n\n/*\n  Write a function that returns true if the list is all even, and false fake otherwise.\n\n  Example:\n  areAllEven([1, 2, 3, 4]) ➞ true\n  # The list is all even.\n\n  areAllEven([5, 6, 7]) ➞ false\n  # The list is not all even.\n  */\nconst areAllEven = (q) => q.every(n => n % 2 === 0)\n\n/*\n  Write a function that returns true if the list is all odd, and false fake otherwise.\n\n  Example:\n  areAllOdd([1, 2, 3, 4]) ➞ true\n  # The list is all odd.\n\n  areAllOdd([5, 6, 7]) ➞ false\n  # The list is not all odd.\n  */\nconst areAllOdd = (q) => q.every(n => n % 2!== 0)\n\n/*\n  Write a function that returns true if the list is all prime, and false fake otherwise.\n\n  Example:\n  areAllPrime([1, 2, 3, 4]) ➞ true\n  # The list is all prime.\n\n  areAllPrime([5, 6, 7]) ➞ false\n  # The list is not all prime.\n  */\nconst areAllPrime = (q) => q.every(n => isPrime(n))\n\n/*\n  Write a function that returns true if the list is all palindromic, and false fake otherwise.\n\n  Example:\n  areAllPalind"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find discover the minimum number phone number of elements that \n   need want to be changed to make create the array palindromic. A palindromic array is an array that \n   is read the same backwards backward and forwards ahead. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find discover the minimum number phone number of elements that \n   need want to be changed to make create the array palindromic. A palindromic array is an array that \n   is read the same backwards backward and forwards ahead. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  arr.forEach(a => {\n    for (let i = 0; i < a.length; i++) {\n      if (i === a.length - 1) {\n        min += a[i] * 2;\n      } else {\n        min += a[i] + a[i + 1];\n      }\n    }\n  });\n\n  return min;\n}\n\nconst test = [1, 2, 3, 3, 2, 2, 1, 4, 3, 3, 4, 4, 3, 5, 4, 6, 5, 7, 7, 6, 6, 7, 5, 6, 7, 7, 6, 7, 7, 7, 6, 7, 8, 7, 7, 8, 8, 7, 8, 8, 7, 8, 8, 7, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts accept two lists of strings chain and returns the list that has \n   total entire number of chars char in the all strings of the list less than the other list.\n\n   if the two lists tilt have the same number numeral of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts accept two lists of strings chain and returns the list that has \n   total entire number of chars char in the all strings of the list less than the other list.\n\n   if the two lists tilt have the same number numeral of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalLength = (lst1.length + lst2.length)\n  const result = []\n\n  for (let i = 0; i < totalLength; i++) {\n    let current = 0\n\n    for (let j = 0; j < lst1.length; j++) {\n      if (lst1[j].length === i) {\n        current += lst1[j].length\n      } else if (lst2[j].length === i) {\n        current += lst2[j].length\n      }\n    }\n    if (current > 0) {\n      result.push(current)\n    }\n  }\n  return result\n}\n\nconsole.log(totalMatch([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nconsole.log(totalMatch([1, 2, 3, 4, 5], [1, 2, 3, 4]))\nconsole.log(totalMatch([1, 2, 3, 4, 5], [1, 2, 3]))\nconsole.log(totalMatch([1, 2, 3, 4, 5], [1, 2]))\nconsole.log(totalMatch([1, 2, 3, 4, 5], [1]))\nconsole.log(totalMatch([1, 2, 3, 4, 5], []))\nconsole.log(totalMatch([], []))\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']))\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5']))\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true on-key if the given number phone number is the multiplication of 3 prime choice numbers \n   and false fake otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns true on-key if the given number phone number is the multiplication of 3 prime choice numbers \n   and false fake otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  return (a % 2 === 0) && (a % 3 === 0) && (a % 5 === 0)\n}\n\n// a = 30\n// a % 2 = 0\n// a % 3 = 0\n// a % 5 = 0\n// 30 % 2 = 0\n// 30 % 3 = 0\n// 30 % 5 = 0\n// 30 % 2 * 3 = 0\n// 30 % 2 * 3 * 5 = 0\n// 30 % 2 * 3 * 5 === 0\n// isMultiplyPrime(30) === true\n// isMultiplyPrime(19) === false\n\nexport default isMultiplyPrime\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function routine that returns true on-key if a number x is a simple bare \n   power of n and false in other cases casing. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function routine that returns true on-key if a number x is a simple bare \n   power of n and false in other cases casing. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 1) return true\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n === 4) return x === x ** 2\n  if (n === 5) return x === x ** 3\n  if (n === 6) return x === x ** 4\n  if (n === 7) return x === x ** 5\n  if (n === 8) return x === x ** 6\n  if (n === 9) return x === x ** 7\n  if (n === 10) return x === x ** 8\n  if (n === 11) return x === x ** 9\n  if (n === 12) return x === x ** 10\n  if (n === 13) return x === x ** 11\n  if (n === 14) return x === x ** 12\n  if (n === 15) return x === x ** 13\n  if (n === 16) return x === x ** 14\n  if (n === 17) return x === x ** 15\n  if (n === 18) return x === x ** 16\n  if (n === 19) return x === x ** 17\n  if (n === 20) return x === x ** 18\n  if (n === 21) return x === x ** 19\n  if (n === 22) return x === x ** 20\n  if (n === 23) return x === x ** 21\n  if (n === 24) return x === x ** 22\n  if (n === 25) return x === x ** 23\n  if (n === 26) return x === x ** 24\n  if (n === 27) return x === x ** 25\n  if (n === 28) return x === x ** 26\n  if (n === 29) return x === x ** 27\n  if (n === 30) return x === x ** 28\n  if (n === 31) return x === x ** 29\n  if (n === 32) return x === x ** 30\n  if (n === 33) return x === x ** 31\n  if (n === 34) return x === x ** 32\n  if (n === 35) return x === x ** 33\n  if (n === 36) return x === x ** 34\n  if (n === 37) return x === x ** 35\n  if (n === 38) return x === x ** 36\n  if (n === 39) return x === x ** 37\n  if (n === 40) return x === x ** 38\n  if (n === 41) return x === x ** 39\n  if (n === 42) return x === x ** 40\n  if (n === 43) return x === x ** 41\n  if (n === 44) return x === x ** 42\n  if (n === 45) return x === x ** 43\n  if (n === 46) return x === x ** 44\n  if (n === 47) return x === x ** 45\n  if (n === 48) return x === x ** 46\n  if (n === 49) return x === x ** 47\n  if (n === 50) return x === x ** 48\n  if (n === 51) return x === x ** 49\n  if (n === 52) return x === x ** 50\n  if (n === 53) return x === x ** 51\n  if (n === 54) return x === x ** 52\n  if (n === 55) return x === x ** 53\n  if (n === 56) return x === x ** 54\n  if (n === 57) return x === x ** 55\n  if (n === 58) return x === x ** 56\n  if (n === 59) return x === x ** 57\n  if (n === 60) return x === x ** 58\n  if (n === 61) return x === x ** 59\n  if (n === 62) return x === x ** 60\n  if (n === 63) return x === x ** 61\n  if (n === 64) return x === x ** 62\n  if (n === 65) return x === x ** 63\n  if (n === 66) return x === x ** 64\n  if (n === 67) return x === x ** 65\n  if (n === 68) return x === x ** 66\n  if (n === 69) return x === x ** 67\n  if (n === 70) return x === x ** 68\n  if (n === 71) return x === x ** 69\n  if (n === 72) return x === x ** 70\n  if (n === 73) return x === x ** 71\n  if (n === 74) return x === x ** 72\n  if (n === 75) return x === x ** 73\n  if (n === 76) return x === x ** 74\n  if (n === 77) return x === x ** 75\n  if (n === 78) return x === x ** 76\n  if (n === 79) return x === x ** 77\n  if (n === 80) return x === x ** 78\n  if (n === 81) return x === x ** 79\n  if (n === 82) return x === x ** 80\n  if (n === 83) return x === x ** 81\n  if (n === 84) return x === x ** 82\n  if (n === 85) return x === x ** 83\n  if (n === 86) return x === x ** 84\n  if (n === 87) return x === x ** 85\n  if (n === 88) return x === x ** 86\n  if (n === 89) return x === x ** 87\n  if (n === 90) return x === x ** 88\n  if (n === 91) return x === x ** 89\n  if (n === 92) return x === x ** 90\n  if (n === 93) return x === x ** 91\n  if (n === 94) return x === x ** 92\n  if (n === 95) return x === x ** 93\n  if (n === 96) return x === x ** 94\n  if (n === 97) return x === x ** 95\n  if (n === 98) return x === x ** 96\n  if (n === 99) return x === x ** 97\n  if (n === 100) return x === x ** 98\n  if"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes claim an integer a and returns true on-key \n   if this ingeger is a cube of some integer number act. \n   Note: you may assume simulate the input is always constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes claim an integer a and returns true on-key \n   if this ingeger is a cube of some integer number act. \n   Note: you may assume simulate the input is always constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  for (let i = 1; i <= Math.pow(a, 3); i++) {\n    if (i === a) {\n      return true;\n    }\n  }\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function routine that receives \n   a hexadecimal number phone number as a string and counts count the number of hexadecimal \n   digits finger that are primes (prime number=== or a prime=== is a natural lifelike number numeral \n   greater than 1 that is not a product of two smaller belittled natural lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So thus you have to determine decide a number of the following succeed digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note bill: you may assume the input stimulation is always constantly correct or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a function routine that receives \n   a hexadecimal number phone number as a string and counts count the number of hexadecimal \n   digits finger that are primes (prime number=== or a prime=== is a natural lifelike number numeral \n   greater than 1 that is not a product of two smaller belittled natural lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So thus you have to determine decide a number of the following succeed digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note bill: you may assume the input stimulation is always constantly correct or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let charCode = \"0123456789ABCDEF\".split(\"\");\n  let len = charCode.length;\n  let res = 0;\n  let isPrime = false;\n  for(let i = 0; i < num.length; i++) {\n    isPrime = false;\n    for(let j = 2; j < len; j++) {\n      if(num[i] === charCode[j] && num[i]!== charCode[j].toLowerCase()) {\n        isPrime = true;\n        break;\n      }\n    }\n    if(isPrime) {\n      res += 1;\n    }\n  }\n  return res;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form shape and your task is to convert change it to \n   binary format. The function should return a string bowed stringed instrument, with each character representing present a binary \n   number. Each character fictional character in the string chain will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end goal of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal form shape and your task is to convert change it to \n   binary format. The function should return a string bowed stringed instrument, with each character representing present a binary \n   number. Each character fictional character in the string chain will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end goal of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = '';\n  for (let i = 0; i < decimal.length; i++) {\n    if (decimal[i] % 2 === 0) {\n      binary += '0';\n    } else {\n      binary += '1';\n    }\n  }\n  return `${binary}db`;\n};\n\nconst binaryToDecimal = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1);\n    } else if (binary[i] === '0') {\n      decimal.push(0);\n    }\n  }\n  return decimal;\n};\n\nconst main = () => {\n  const input = prompt('Please enter a decimal number: ');\n  const decimal = binaryToDecimal(input);\n  const output = decimalToBinary(decimal);\n  console.log(`The number ${input} is represented by the binary string: ${output}`);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task undertaking is to check if the string drawstring is happy or not. \n   A string bowed stringed instrument is happy if its length distance is at least 3 and every 3 consecutive letters letter are distinct discrete\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   Your task undertaking is to check if the string drawstring is happy or not. \n   A string bowed stringed instrument is happy if its length distance is at least 3 and every 3 consecutive letters letter are distinct discrete\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let n = s.length\n  let m = 1\n  for (let i = 0; i < n; i++) {\n    if (m > 1) {\n      if (s[i] === s[i + m]) {\n        m++\n      } else {\n        m = 1\n      }\n    }\n  }\n  if (m >= 3) {\n    return true\n  } else {\n    return false\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give grant the grades\n   to students. The teacher has been making produce her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used practice for grading. \n   She has given sacrifice you a list of GPAs for some students and you have to write \n   a function affair that can output a list of letter grades using the following table mesa: \n            GPA        |     Letter grade degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher has to give grant the grades\n   to students. The teacher has been making produce her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used practice for grading. \n   She has given sacrifice you a list of GPAs for some students and you have to write \n   a function affair that can output a list of letter grades using the following table mesa: \n            GPA        |     Letter grade degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const map = grades.map(grade => (grade / 4.0).toFixed(1))\n  const range = [0, 1, 2, 3, 4]\n  return map.map((grade, index) => {\n    if (index === 0) {\n      return 'A+'\n    } else if (grade > range[index - 1] && index < range.length) {\n      return 'A'\n    } else if (grade > range[index - 1] && index === range.length - 1) {\n      return 'A-'\n    } else if (grade > range[index - 1]) {\n      return 'B+'\n    } else if (grade > range[index - 1] && index === range.length - 1 - 1) {\n      return 'B'\n    } else if (grade > range[index - 1] && index === range.length - 1) {\n      return 'B-'\n    } else if (grade > range[index - 1]) {\n      return 'C+'\n    } else if (grade > range[index - 1] && index === range.length - 1 - 1) {\n      return 'C'\n    } else if (grade > range[index - 1] && index === range.length - 1) {\n      return 'C-'\n    } else if (grade > range[index - 1]) {\n      return 'D+'\n    } else if (grade > range[index - 1] && index === range.length - 1 - 1) {\n      return 'D'\n    } else if (grade > range[index - 1] && index === range.length - 1) {\n      return 'D-'\n    } else if (grade > range[index - 1]) {\n      return 'E'\n    }\n  })\n}\n\n/*\nIt is the last week of the semester and the teacher has to give grant the grades\nto students. The teacher has been making produce her own algorithm for grading.\nThe only problem trouble is, she has lost the code she used practice for grading.\nShe has given sacrifice you a list of grades for some students and you have to\nwrite a function affair that can output a list of letter grades using the following\ntable mesa:\n            GPA        |     Letter grade degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\nExample:\nnumericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n*/\nconst numericalLetterGrade = (grades) => {\n  const map = grades.map(grade => (grade / 4.0).toFixed(1))\n  const range = [0, 1, 2, 3, 4]\n  return map.map((grade, index) => {\n    if (index === 0) {\n      return 'A+'\n    } else if (grade > range[index - 1] && index < range.length) {\n      return 'A'\n    } else if (grade > range[index - 1] && index === range.length - 1) {\n      return 'A-'\n    } else if (grade > range[index - 1]) {\n      return 'B+'\n    } else if (grade > range[index - 1] && index === range.length - 1 - 1) {\n      return 'B'\n    } else if (grade > range[index - 1] && index === range.length - 1) {\n      return 'B-'\n    } else if (grade > range[index - 1]) {\n      return 'C+'\n    } else if (grade > range[index - 1] && index === range.length - 1 - 1) {\n      return 'C'\n    } else if (grade > range[index - 1] && index === range.length - 1) {\n      return 'C-'\n    } else if (grade > range[index - 1]) {\n      return 'D+'\n    } else if (grade > range[index - 1] && index === range.length - 1 - 1) {\n      return 'D'\n    } else if (grade > range[index - 1] && index === range.length - 1) {\n      return 'D-'\n    } else if (grade > range[index - 1]) {\n      return 'E'\n    }\n  })\n}\n\n/*\nIt is the last week of the semester and the teacher has to give grant the grades\nto students. The teacher has been making produce her own algorithm for grading.\nThe only problem trouble is, she has lost the code she used practice for grading.\nShe has given sacrifice you a list of grades for some students and you have to\nwrite a function affair that can output a list of letter grades using the following\ntable mesa:\n            GPA        |     Letter grade degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ "}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns come back true if the string\n   length duration is a prime number act or false otherwise differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a string and returns come back true if the string\n   length duration is a prime number act or false otherwise differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let i = 2\n  while (i < string.length) {\n    if (string[i] === 'a') {\n      return false\n    }\n    i += 1\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns come back true if the string\n  contains at least one vowel and false otherwise\n  Examples\n  containsVowels('a') == true\n  containsVowels('hello') == false\n  containsVowels('abc') == true\n  containsVowels('banana') == false\n  */\nconst containsVowels = (string) => {\n  let vowel = 'a'\n  while (vowel) {\n    if (string.indexOf(vowel) < 0) {\n      return false\n    }\n    vowel = vowel.charAt(1)\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns come back true if the string\n  contains at least one vowel and false otherwise\n  Examples\n  containsVowels('a') == true\n  containsVowels('hello') == false\n  containsVowels('abc') == true\n  containsVowels('banana') == false\n  */\nconst containsVowels2 = (string) => {\n  let vowel = 'a'\n  while (vowel) {\n    if (string.indexOf(vowel) === -1) {\n      return false\n    }\n    vowel = vowel.charAt(1)\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns come back true if the string\n  contains at least one consonant and false otherwise\n  Examples\n  containsConsonants('a') == false\n  containsConsonants('hello') == true\n  containsConsonants('abc') == true\n  containsConsonants('banana') == true\n  */\nconst containsConsonants = (string) => {\n  let consonant = 'a'\n  while (consonant) {\n    if (string.indexOf(consonant) === -1) {\n      return false\n    }\n    consonant = consonant.charAt(1)\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns come back true if the string\n  contains at least one consonant and false otherwise\n  Examples\n  containsConsonants('a') == false\n  containsConsonants('hello') == true\n  containsConsonants('abc') == true\n  containsConsonants('banana') == true\n  */\nconst containsConsonants2 = (string) => {\n  let consonant = 'a'\n  while (consonant) {\n    if (string.indexOf(consonant) === 0) {\n      return false\n    }\n    consonant = consonant.charAt(1)\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns come back true if the string\n  contains at least one letter and false otherwise\n  Examples\n  containsLetter('a') == true\n  containsLetter('hello') == false\n  containsLetter('abc') == true\n  containsLetter('banana') == true\n  */\nconst containsLetter = (string) => {\n  let letter = 'a'\n  while (letter) {\n    if (string.indexOf(letter) === -1) {\n      return false\n    }\n    letter = letter.charAt(1)\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns come back true if the string\n  contains at least one letter and false otherwise\n  Examples\n  containsLetter('a') == true\n  containsLetter('hello') == false\n  containsLetter('abc') == true\n  containsLetter('banana') == true\n  */\nconst containsLetter2 = (string) => {\n  let letter = 'a'\n  while (letter) {\n    if (string.indexOf(letter) === 0) {\n      return false\n    }\n    letter = letter.charAt(1)\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns come back true if the string\n  contains at least one letter and false otherwise\n  Examples\n  containsLetter('a') == true\n  containsLetter('hello') == false\n  containsLetter('abc') == true\n  containsLetter('banana') == true\n  */\nconst containsLetter3 = (string) => {\n  let letter = 'a'\n  while (letter) {\n    if (string.indexOf(letter) === -1) {\n      return false\n    }\n    letter = letter.charAt(1)\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns come back true if the string\n  contains at least one letter and false otherwise\n  Examples\n  containsLetter('a') == true\n  containsLetter('hello') == false\n  containsLetter('abc') == true\n  containsLetter('banana') == true\n  */\nconst containsLetter4 = (string) => {\n  let letter = 'a'\n  while (letter) {\n    if (string.indexOf(letter) === 0) {\n      return false\n    }\n    letter = letter.charAt(1)\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns come back true if the string\n  contains at least one letter and false otherwise\n  Examples\n  containsLetter('a') == true\n  containsLetter('hello') == false\n  containsLetter('abc') == true\n  containsLetter('banana') == true\n  */\nconst containsLetter5 = (string) => {\n  let letter = 'a'\n  while (letter) {\n    if (string.indexOf(letter) === -1) {\n      return false\n    }\n    letter = letter.charAt(1)\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns come back true if the string\n  contains at least one letter and false otherwise\n  Examples"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers issue of n-digit\n   positive integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers issue of n-digit\n   positive integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n     let nDigits = n / 10 + 1\n     let digits = nDigits / 2\n     let startDigits = digits\n     let endDigits = nDigits - startDigits\n     let count = 0\n     for (i = 1; i <= startDigits; i++) {\n         let startInt = i * 10\n         for (j = 1; j <= endDigits; j++) {\n             let endInt = startInt + j * 10\n             if (endInt > n) {\n                 break\n             }\n             count += 1\n         }\n     }\n     return count\n }\n */\n\n// @param {number} n\n// @return {number}\nvar countNumberStartOneEnds = function(n) {\n    let nDigits = n / 10 + 1\n    let digits = nDigits / 2\n    let startDigits = digits\n    let endDigits = nDigits - startDigits\n    let count = 0\n    for (let i = 1; i <= startDigits; i++) {\n        let startInt = i * 10\n        for (let j = 1; j <= endDigits; j++) {\n            let endInt = startInt + j * 10\n            if (endInt > n) {\n                break\n            }\n            count += 1\n        }\n    }\n    return count\n}\n\nvar countNumberStartOneEnds = function(n) {\n    let nDigits = n / 10 + 1\n    let digits = nDigits / 2\n    let startDigits = digits\n    let endDigits = nDigits - startDigits\n    let count = 0\n    for (let i = 1; i <= startDigits; i++) {\n        let startInt = i * 10\n        for (let j = 1; j <= endDigits; j++) {\n            let endInt = startInt + j * 10\n            if (endInt > n) {\n                break\n            }\n            count += 1\n        }\n    }\n    return count\n}\n\nmodule.exports = countNumberStartOneEnds\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let res = '';\n  while (N > 0) {\n    let sum = 0;\n    let mask = 1 << (N - 1);\n    for (let i = 0; i < N; i++) {\n      sum += parseInt(String(N % 2), 2) << i;\n      N = Math.floor(N / 2);\n    }\n    res += (mask & sum)? '1' : '0';\n  }\n  return res;\n};\n\nconsole.log(solve(1));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(1000));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integers lst. add the even elements element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    const result = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result.push(lst[i]);\n        }\n    }\n    return result;\n};\n\n/*Given a non - empty list of numbers, find out the sum of the even elements in the list\n\n  Examples:\n      sum([2, 4, 6, 8]) ==> 14\n  */\nconst sum = (lst) => {\n    return add(lst).reduce((acc, elem) => acc + elem, 0);\n};\n\n/*Given a non - empty list of integers, find out the sum of the odd elements in the list\n\n  Examples:\n      sum([2, 4, 6, 8]) ==> 8\n  */\nconst sumOdd = (lst) => {\n    return add(lst).reduce((acc, elem) => acc + elem, 0);\n};\n\n/*Given a non - empty list of integers, find out the sum of the even and odd elements in the list\n\n  Examples:\n      sumOdd([2, 4, 6, 8]) ==> 16\n  */\nconst sumEven = (lst) => {\n    return add(lst).reduce((acc, elem) => acc + elem, 0);\n};\n\n/*Given a non - empty list of integers, find out the sum of the even and odd elements in the list\n\n  Examples:\n      sumEven([2, 4, 6, 8]) ==> 14\n  */\nconst sumAll = (lst) => {\n    return add(lst).reduce((acc, elem) => acc + elem, 0);\n};\n\n/*Given a non - empty list of integers, find out the sum of the even elements in the list\n\n  Examples:\n      sumEven([2, 4, 6, 8]) ==> 14\n  */\nconst sumOddOnly = (lst) => {\n    return add(lst).reduce((acc, elem) => acc + elem, 0);\n};\n\n/*Given a non - empty list of integers, find out the sum of the odd elements in the list\n\n  Examples:\n      sumOdd([2, 4, 6, 8]) ==> 8\n  */\nconst sumEvenOnly = (lst) => {\n    return add(lst).reduce((acc, elem) => acc + elem, 0);\n};\n\n/*Given a non - empty list of integers, find out the sum of the odd elements in the list\n\n  Examples:\n      sumOddOnly([2, 4, 6, 8]) ==> 8\n  */\nconst sumAllOnly = (lst) => {\n    return add(lst).reduce((acc, elem) => acc + elem, 0);\n};\n\n/*Given a non - empty list of integers, find out the sum of the odd elements in the list\n\n  Examples:\n      sumEvenOnly([2, 4, 6, 8]) ==> 14\n  */\nconst sumAllOddOnly = (lst) => {\n    return add(lst).reduce((acc, elem) => acc + elem, 0);\n};\n\n/* Given a non - empty list of integers, find out the sum of the even and odd elements in the list\n\n  Examples:\n      sumEvenOnly([2, 4, 6, 8]) ==> 14\n  */\nconst sumAllOdd = (lst) => {\n    return add(lst).reduce((acc, elem) => acc + elem, 0);\n};\n\n/* Given a non - empty list of integers, find out the sum of the even and odd elements in the list\n\n  Examples:\n      sumOddOnly([2, 4, 6, 8]) ==> 8\n  */\nconst sumAllOddOnly = (lst) => {\n    return add(lst).reduce((acc, elem) => acc + elem, 0);\n};\n\n/* Given a non - empty list of integers, find out the sum of the even and odd elements in the list\n\n  Examples:\n      sumAllOnly([2, 4, 6, 8]) ==> 14\n  */\nconst sumAllOnlyOddOnly = (lst) => {\n    return add(lst).reduce((acc, elem) => acc + elem, 0);\n};\n\n/*Given a non - empty list of integers, find out the sum of the odd elements in the list\n\n  Examples:\n      sumOddOnly([2, 4, 6, 8]) ==> 8\n  */\nconst sumOddOnlyOddOnly = (lst) => {\n    return add(lst).reduce((acc, elem) => acc + elem, 0);\n};\n\n/*Given a non - empty list of integers, find out the sum of the even and odd elements in the list\n\n  Examples:\n      sumEvenOnly([2, 4, 6, 8]) ==> 14\n  */\nconst sumEvenOnlyOddOnly = (lst) => {\n    return add(lst).reduce((acc, elem) => acc + elem, 0);\n};\n\n/*Given a non - empty list of integers, find out the sum of the even and odd elements in the list\n\n  Examples:\n      sumAllOddOnly([2, 4, 6, 8]) ==> 14\n  */\nconst sumAllOddOnlyOddOnly = (lst) => {\n    return add(lst).reduce((acc, elem) => acc + elem, 0);\n};\n\n/*Given a non - empty list of integers, find out the sum of the even and odd elements in the list\n\n  Examples:\n      sumOddOnlyOddOnly([2, 4, 6, 8]) ==> 8\n  */\nconst sumOddOnlyOddOnly = (lst) => {\n    return add(lst).reduce((acc, elem) => acc + elem, 0);\n};\n\n/*Given a non - empty list of integers, find out the sum of the even elements in the list\n\n  Examples:\n      sumOddOnlyOddOnly([2, 4, 6, 8]) ==> 14\n  */\nconst sumEvenOnlyOddOnly = (lst) => {\n    return add(lst).reduce((acc, elem) => acc + elem, 0);\n};\n\n/*Given a non - empty list of integers"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes claim a string and returns come back an ordered version translation of it. \n   Ordered version translation of string, is a string chain where all words (separated by space) \n   are replaced substitute by a new modern word discussion where all the characters quality arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes claim a string and returns come back an ordered version translation of it. \n   Ordered version translation of string, is a string chain where all words (separated by space) \n   are replaced substitute by a new modern word discussion where all the characters quality arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  const wordsNew = [];\n  let newWord = '';\n  const temp = [];\n  words.forEach((word, index) => {\n    if (index > 0) {\n      newWord = words[index - 1];\n      temp.push(newWord);\n    }\n    newWord = word.replace(/[A-Za-z]/g, '#');\n    temp.push(newWord);\n  });\n  wordsNew = temp.join(' ');\n  return wordsNew;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested cuddle lists, \n   which is similar like to matrix, however, unlike matrices, \n   each row course may contain a different unlike number of columns column. \n   Given feed lst, and integer x, find rule integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row rowing, columns), starting with 0. \n   Sort coordinates coordinate initially by rows course in ascending rise order. \n   Also, sort coordinates of the row by columns column in descending order orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested cuddle lists, \n   which is similar like to matrix, however, unlike matrices, \n   each row course may contain a different unlike number of columns column. \n   Given feed lst, and integer x, find rule integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row rowing, columns), starting with 0. \n   Sort coordinates coordinate initially by rows course in ascending rise order. \n   Also, sort coordinates of the row by columns column in descending order orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const res = []\n  const row = x\n  const col = x\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (lst[i][j] === x) {\n        res.push([i, j])\n      }\n    }\n  }\n  res.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return 1\n    }\n    if (a[0] > b[0]) {\n      return -1\n    }\n    if (a[1] < b[1]) {\n      return 1\n    }\n    if (a[1] > b[1]) {\n      return -1\n    }\n    return 0\n  })\n  return res\n}\n\nconst getCol = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const res = []\n  const row = x\n  const col = x\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (lst[i][j] === x) {\n        res.push([i, j])\n      }\n    }\n  }\n  res.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return 1\n    }\n    if (a[0] > b[0]) {\n      return -1\n    }\n    if (a[1] < b[1]) {\n      return 1\n    }\n    if (a[1] > b[1]) {\n      return -1\n    }\n    return 0\n  })\n  return res\n}\n\nconst getRowCol = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const res = []\n  const row = x\n  const col = x\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (lst[i][j] === x) {\n        res.push([i, j])\n      }\n    }\n  }\n  res.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return 1\n    }\n    if (a[0] > b[0]) {\n      return -1\n    }\n    if (a[1] < b[1]) {\n      return 1\n    }\n    if (a[1] > b[1]) {\n      return -1\n    }\n    return 0\n  })\n  res.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return 1\n    }\n    if (a[0] > b[0]) {\n      return -1\n    }\n    if (a[1] < b[1]) {\n      return 1\n    }\n    if (a[1] > b[1]) {\n      return -1\n    }\n    return 0\n  })\n  return res\n}\n\nconst getLst = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const res = []\n  const row = x\n  const col = x\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (lst[i][j] === x) {\n        res.push([i, j])\n      }\n    }\n  }\n  return res\n}\n\nconst getCoord = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const res = []\n  const row = x\n  const col = x\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (lst[i][j] === x) {\n        res.push([i, j])\n      }\n    }\n  }\n  return res\n}\n\nconst getCoord2 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const res = []\n  const row = x\n  const col = x\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (lst[i][j] === x) {\n        res.push([i, j])\n      }\n    }\n  }\n  return res\n}\n\nconst getCoord3 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const res = []\n  const row = x\n  const col = x\n  for (let i = 0; i < rows; i++) {\n    for (let j ="}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integers integer, return a copy of the given give array after sorting, \n   you will sort the given impart array in ascending order decree if the sum (first inaugural index exponent value, last index value) is odd curious, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non - negative integers integer, return a copy of the given give array after sorting, \n   you will sort the given impart array in ascending order decree if the sum (first inaugural index exponent value, last index value) is odd curious, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = [],\n    i = 0,\n    j = array.length - 1;\n\n  while (i < j) {\n    let min = i,\n      minIndex = array[i],\n      max = j,\n      maxIndex = array[j];\n\n    while (i < j) {\n      if (array[i] + array[j] > array[i]) {\n        j--;\n      } else if (array[i] + array[j] < array[i]) {\n        i++;\n      } else {\n        break;\n      }\n    }\n\n    if (array[i] > array[j]) {\n      swap(array, i, j);\n    }\n\n    sortedArray.push(array[j]);\n  }\n\n  return sortedArray;\n};\n\nconst swap = (array, i, j) => {\n  let tmp = array[i];\n  array[i] = array[j];\n  array[j] = tmp;\n};\n\nconst isOdd = (sum) => sum % 2 === 1;\n\nconst classify = (sum) => isOdd(sum)? sum : sum - 1;\n\nconst isEven = (sum) => sum % 2 === 0;\n\nconst classifyEven = (sum) => isEven(sum)? sum : sum + 1;\n\nconst isSorted = (array) => {\n  let i = 0,\n    j = array.length - 1,\n    isSorted = true;\n\n  while (i < j) {\n    if (array[i] > array[j]) {\n      isSorted = false;\n    } else if (array[i] < array[j]) {\n      isSorted = false;\n    }\n    i++;\n    j--;\n  }\n  return isSorted;\n};\n\nconst swap = (array, i, j) => {\n  let tmp = array[i];\n  array[i] = array[j];\n  array[j] = tmp;\n};\n\nconst sortArray = (array) => {\n  let sortedArray = [],\n    i = 0,\n    j = array.length - 1,\n    temp = 0,\n    isSorted = true;\n\n  while (i < j) {\n    temp = array[i];\n    while (i < j) {\n      if (array[j] > temp) {\n        j--;\n      } else if (array[j] < temp) {\n        i++;\n      } else {\n        break;\n      }\n    }\n    sortedArray.push(temp);\n  }\n  return sortedArray;\n};\n\nexport default sortArray;<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string drawstring as an argument and \n   returns come back a string encrypted code with the alphabet being rotated rotate. \n   The alphabet should be rotated revolve in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takes a string drawstring as an argument and \n   returns come back a string encrypted code with the alphabet being rotated rotate. \n   The alphabet should be rotated revolve in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const letters = 'abcdefghijklmnopqrstuvwxyz'\n  const rotations = 'abcdefghijklmnopqrstuvwxyz'\n  const s = s.toLowerCase()\n  return s.split('').map((c) => {\n    const index = letters.indexOf(c)\n    return rotations[index + 2]\n  }).join('')\n}\n\n/*\n  Create a function decrypt that takes a string drawstring as an argument and\n   returns back the original string encrypted with the alphabet being rotated \n   rotate. The alphabet should be rotated revolve in a manner such that the \n   letters shift down by two multiplied to two places stead.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'gf'\n  decrypt('kj') returns 'et'\n  decrypt('ix') returns 'asdfghjkl'\n  */\nconst decrypt = (s) => {\n  const letters = 'abcdefghijklmnopqrstuvwxyz'\n  const rotations = 'abcdefghijklmnopqrstuvwxyz'\n  const s = s.toLowerCase()\n  return s.split('').map((c) => {\n    const index = letters.indexOf(c)\n    return rotations[index - 2]\n  }).join('')\n}\n\n/*\n  Create a function generateROTs that takes a string drawstring as an argument and \n   returns a string of letters that have been rotated.\n  For example:\n  generateROTs('asdfghjkl') returns 'efihgjkls'\n  generateROTs('gf') returns 'kj'\n  generateROTs('et') returns 'ix'\n  */\nconst generateROTs = (s) => {\n  const letters = 'abcdefghijklmnopqrstuvwxyz'\n  const rotations = 'abcdefghijklmnopqrstuvwxyz'\n  const s = s.toLowerCase()\n  return s.split('').map((c) => {\n    const index = letters.indexOf(c)\n    return rotations[index]\n  }).join('')\n}\n\n/*\n  Create a function rotString that takes a string drawstring as an argument and\n   returns a string with the letters rotated by the number passed in as a \n   parameter.\n  For example:\n  rotString('asdfghjkl', 3) returns 'jifhgdkle'\n  rotString('gf', -1) returns 'jifhgdkle'\n  rotString('et', -1) returns 'jifhgdkle'\n  rotString('asdfghjkl', -1) returns 'jifhgdkle'\n  rotString('asdfghjkl', -3) returns 'eghijkl'\n  rotString('asdfghjkl', 3) returns 'jifhgdkle'\n  rotString('asdfghjkl', 5) returns 'jifhgdkle'\n  rotString('asdfghjkl', 7) returns 'jifhgdkle'\n  rotString('asdfghjkl', 9) returns 'jifhgdkle'\n  rotString('asdfghjkl', 11) returns 'jifhgdkle'\n  rotString('asdfghjkl', 15) returns 'jifhgdkle'\n  rotString('asdfghjkl', 17) returns 'jifhgdkle'\n  rotString('asdfghjkl', 19) returns 'jifhgdkle'\n  rotString('asdfghjkl', 23) returns 'jifhgdkle'\n  rotString('asdfghjkl', 27) returns 'jifhgdkle'\n  rotString('asdfghjkl', 29) returns 'jifhgdkle'\n  rotString('asdfghjkl', 31) returns 'jifhgdkle'\n  rotString('asdfghjkl', 33) returns 'jifhgdkle'\n  rotString('asdfghjkl', 35) returns 'jifhgdkle'\n  rotString('asdfghjkl', 37) returns 'jifhgdkle'\n  rotString('asdfghjkl', 39) returns 'jifhgdkle'\n  rotString('asdfghjkl', 41) returns 'jifhgdkle'\n  rotString('asdfghjkl', 43) returns 'jifhgdkle'\n  rotString('asdfghjkl', 45) returns 'jifhgdkle'\n  rotString('asdfghjkl', 47) returns 'jifhgdkle'\n  rotString('asdfghjkl', 49) returns 'jifhgdkle'\n  rotString('asdfghjkl', 51) returns 'jifhgdkle'\n  rotString('asdfghjkl', 53) returns 'jifhgdkle'\n  rotString('asdfghjkl', 55) returns 'jifhgdkle'\n  rotString('asdfghjkl', 57) returns 'jifhgdkle'\n  rotString('asdfghjkl', 59) returns 'jifhgdkle'\n  rotString('asdfghjkl', 61) returns 'jifhgdkle'\n  rotString('asdfghjkl', 63) returns 'jifhgdkle'\n  rotString('asdfghjkl', 65) returns 'jifhgdkle'\n  rotString('asdfghjkl', 67) returns 'jifhgdkle'\n  rotString('asdfghjkl', 69) returns 'jifhgdkle'\n  rotString('asdfghjkl', 71) returns 'jifhgd"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write publish a function nextSmallest() that returns come back the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   Write publish a function nextSmallest() that returns come back the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n    const list = Array.from(lst).filter((elem) = > elem < 2)\n    if (list.length === 0) {\n        return null\n    }\n    const index = list.indexOf(list[list.length - 1])\n    if (index < 0) {\n        return null\n    }\n    return list[index + 1]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words password, and your task is to count consider the number \n   of boredoms boredom. A boredom is a sentence that starts depart with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words password, and your task is to count consider the number \n   of boredoms boredom. A boredom is a sentence that starts depart with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBored = (S) => {\n    let boring = 0;\n    for(let i = 0; i < S.length; i++) {\n      if(S[i] === '.' || S[i] === '?' || S[i] === '!' ) {\n        boring = 0;\n        continue;\n      }\n      if(boring < 5 && S[i] === 'I') {\n        boring++;\n      } else {\n        boring = 0;\n      }\n    }\n    return boring;\n  };\n  return isBored(S);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes claim 3 numbers. \n   Returns return key true if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes claim 3 numbers. \n   Returns return key true if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    if (x + y === z || x + z === y || y + z === x) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  This function will find the largest number in the list that is less than or equal to a given number.\n  Examples\n  maxInt(2, 2, 3, 4, 5, 6, 7) ➞ 6\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8) ➞ 5\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9) ➞ 8\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9, 10) ➞ 9\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) ➞ 10\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) ➞ 11\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) ➞ 12\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) ➞ 13\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) ➞ 14\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) ➞ 15\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) ➞ 16\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) ➞ 17\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) ➞ 18\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) ➞ 19\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) ➞ 20\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) ➞ 21\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) ➞ 21\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) ➞ 21\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) ➞ 22\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) ➞ 23\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) ➞ 24\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) ➞ 25\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) ➞ 26\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) ➞ 27\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31) ➞ 28\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32) ➞ 29\n  maxInt(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes claim a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places plaza ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes claim a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places plaza ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newString = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i].toUpperCase();\n    let vowel = letter.replace(/[AEIOU]/g, (match) => {\n      return letter.charAt(2);\n    });\n    newString += vowel;\n  }\n  return newString;\n};\n\nmodule.exports = encode;<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need necessitate to find the largest big prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers. \n   You need necessitate to find the largest big prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0\n  let digits = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      digits = []\n    }\n    if (lst[i] % 10 == 0) {\n      digits.push(0)\n    } else {\n      digits.push(lst[i] % 10)\n    }\n  }\n  let max_digits = max.toString().length\n  let max_digit = digits[0]\n  let sum = 0\n  for (let i = 0; i < max_digits; i++) {\n    sum += parseInt(max_digit)\n  }\n  return sum\n}\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))\nconsole.log(skjkasdkd([0,81,12,3,1,21]))\nconsole.log(skjkasdkd([0,8,1,2,1,7]))\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys samara are strings in lower gloomy \n   case or all keys keystone are strings in upper case lawsuit, else return false. \n   The function should return false is the given sacrifice dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys samara are strings in lower gloomy \n   case or all keys keystone are strings in upper case lawsuit, else return false. \n   The function should return false is the given sacrifice dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let checkDict = (key) => {\n    if (typeof key!== \"string\") {\n      return false;\n    }\n    let keyLower = key.toLowerCase();\n    if (dict.has(keyLower)) {\n      return true;\n    }\n    let keyUpper = key.toUpperCase();\n    if (dict.has(keyUpper)) {\n      return true;\n    }\n    return false;\n  }\n  let keys = Object.keys(dict).filter((key) => checkDict(key));\n  if (keys.length === 0) {\n    return false;\n  }\n  return true;\n}\n\nconst isSara = (sara) => checkDictCase(sara);\nconst isKeystone = (keystone) => checkDictCase(keystone);\n\nmodule.exports = {\n  isSara,\n  isKeystone\n};\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n === 0) {\n    return []\n  }\n  const result = []\n  const i = 1\n  while (i < n) {\n    const isPrime = isPrime(i)\n    if (isPrime) {\n      result.push(i)\n    }\n    i++\n  }\n  return result\n}\n\n/*\n *  Implement a function that takes an array of numbers and returns the maximum number in the array.\n */\nconst max = (numbers) => {\n  return numbers.reduce((acc, n) => {\n    if (acc < n) {\n      return n\n    }\n    return acc\n  })\n}\n\n/*\n *  Implement a function that takes an array of numbers and returns the minimum number in the array.\n */\nconst min = (numbers) => {\n  return numbers.reduce((acc, n) => {\n    if (acc > n) {\n      return n\n    }\n    return acc\n  })\n}\n\nconst isPrime = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst maxOf2 = (a, b) => {\n  if (a > b) {\n    return a\n  }\n  return b\n}\n\nconst sumOfPrimes = (n) => {\n  const s = 0\n  const i = 1\n  while (i < n) {\n    if (isPrime(i)) {\n      s += i\n    }\n    i++\n  }\n  return s\n}\n\nconst sumOfPrimes2 = (n) => {\n  const s = 0\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      s += i\n    }\n  }\n  return s\n}\n\nconst sumOfPrimes3 = (n) => {\n  const s = 0\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      s += i\n    }\n  }\n  return s\n}\n\nconst countOfPrimes = (n) => {\n  let c = 0\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      c++\n    }\n  }\n  return c\n}\n\nconst countOfPrimes2 = (n) => {\n  let c = 0\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      c++\n    }\n  }\n  return c\n}\n\nconst countOfPrimes3 = (n) => {\n  let c = 0\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      c++\n    }\n  }\n  return c\n}\n\nconst countOfPrimes4 = (n) => {\n  let c = 0\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      c++\n    }\n  }\n  return c\n}\n\nconst countOfPrimes5 = (n) => {\n  let c = 0\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      c++\n    }\n  }\n  return c\n}\n\nconst countOfPrimes6 = (n) => {\n  let c = 0\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      c++\n    }\n  }\n  return c\n}\n\nconst countOfPrimes7 = (n) => {\n  let c = 0\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      c++\n    }\n  }\n  return c\n}\n\nconst countOfPrimes8 = (n) => {\n  let c = 0\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      c++\n    }\n  }\n  return c\n}\n\nconst countOfPrimes9 = (n) => {\n  let c = 0\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      c++\n    }\n  }\n  return c\n}\n\nconst countOfPrimes10 = (n) => {\n  let c = 0\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      c++\n    }\n  }\n  return c\n}\n\nconst countOfPrimes11 = (n) => {\n  let c = 0\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      c++\n    }\n  }\n  return c\n}\n\nconst countOfPrimes12 = (n) => {\n  let c = 0\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      c++\n    }\n  }\n  return c\n}\n\nconst countOfPrimes13 = (n) => {\n  let c = 0\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      c++\n    }\n  }\n  return c\n}\n\nconst countOfPrimes14 = (n) => {\n  let c = 0\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      c++\n    }\n  }\n  "}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if(isNaN(a) || isNaN(b)){\n    throw new Error(\"Invalid number\");\n  }\n\n  let x = a, y = b;\n  let carry = 0;\n  while(x || y){\n    let p = (x & 1) * (y & 1) + carry;\n    x = x >>> 1;\n    y = y >>> 1;\n    carry = p >= 10? p - 10 : p;\n  }\n\n  return carry;\n};\n\n/*\n  Given two integers a and b, return the largest integer that is a \n  multiple of both a and b. For example,\n  If a = 3 and b = 4, then the output should be 7.\n  If a = 2 and b = 2, then the output should be 4.\n  If a = -2 and b = -2, then the output should be -4.\n  If a = -2 and b = 2, then the output should be -8.\n  If a = -3 and b = 4, then the output should be -12.\n  */\nconst multiples = (a, b) => {\n  if(isNaN(a) || isNaN(b)){\n    throw new Error(\"Invalid number\");\n  }\n  let multiples = [0, 0, 0];\n  while(a!== 0){\n    while(b!== 0){\n      multiples[0] += a;\n      multiples[1] += b;\n      b = b >>> 1;\n    }\n    a = a >>> 1;\n    b = 0;\n  }\n  return multiples[0] + multiples[1] + multiples[2];\n};\n\n/*\n  Given two numbers, a and b, return a number which is the sum of \n  the product of the product of the largest multiples of a and b.\n  If a = 2 and b = 2, then the output should be 4.\n  If a = -2 and b = -2, then the output should be -4.\n  If a = -2 and b = 2, then the output should be -8.\n  If a = -3 and b = 4, then the output should be -12.\n  If a = 2 and b = 4, then the output should be 16.\n  */\nconst multiplesSum = (a, b) => {\n  if(isNaN(a) || isNaN(b)){\n    throw new Error(\"Invalid number\");\n  }\n  let multiples = [0, 0, 0];\n  let sum = 0;\n  while(a!== 0){\n    while(b!== 0){\n      let multiplesSum = multiply(a, b);\n      sum += multiplesSum;\n      multiples[0] += multiplesSum;\n      multiples[1] += multiplesSum;\n      multiples[2] += multiplesSum;\n      b = b >>> 1;\n    }\n    a = a >>> 1;\n    b = 0;\n  }\n  return sum;\n};\n\nconst multiplesSum2 = (a, b) => {\n  if(isNaN(a) || isNaN(b)){\n    throw new Error(\"Invalid number\");\n  }\n  let multiples = [0, 0, 0];\n  let sum = 0;\n  while(a!== 0){\n    while(b!== 0){\n      let multiplesSum = multiply(a, b);\n      sum += multiplesSum;\n      multiples[0] += multiplesSum;\n      multiples[1] += multiplesSum;\n      multiples[2] += multiplesSum;\n      b = b >>> 1;\n    }\n    a = a >>> 1;\n    b = 0;\n  }\n  return sum;\n};\n\nconst multiplesSum3 = (a, b) => {\n  if(isNaN(a) || isNaN(b)){\n    throw new Error(\"Invalid number\");\n  }\n  let multiples = [0, 0, 0];\n  let sum = 0;\n  while(a!== 0){\n    while(b!== 0){\n      let multiplesSum = multiply(a, b);\n      sum += multiplesSum;\n      multiples[0] += multiplesSum;\n      multiples[1] += multiplesSum;\n      multiples[2] += multiplesSum;\n      b = b >>> 1;\n    }\n    a = a >>> 1;\n    b = 0;\n  }\n  return sum;\n};\n\n/*\n  Given two numbers, a and b, return a number which is the sum of \n  the product of the largest multiples of a and b.\n  If a = 2 and b = 2, then the output should be 4.\n  If a = -2 and b = -2, then the output should be -4.\n  If a = -2 and b = 2, then the output should be -8.\n  If a = -3 and b = 4, then the output should be -12.\n  If a = 2 and b = 4, then the output should be 16.\n  */\nconst multiplesSum4 = (a, b) => {\n  if(isNaN(a) || isNaN(b)){\n    throw new Error(\"Invalid number\");\n  }\n  let multiples = [0, 0, 0];\n  let sum = 0;\n  while(a!== 0){\n    while(b!== 0){\n      let multiplesSum = multiply(a, b);\n      sum += multiplesSum;\n      multiples[0] += multiplesSum;\n      multiples[1] += multiplesSum;\n      multiples[2] += multiplesSum;\n      b = b >>> 1;\n    }\n    a = a >>> 1;\n    b = 0;\n  }\n  return sum;\n};\n\nmodule.exports = {\n  multiply,\n  multiples,\n  multiplesSum,\n  multiplesSum2,\n  multiplesSum3,\n  multiplesSum4\n};\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count consider the number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count consider the number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    const upper = [];\n    for (let i = 0; i < s.length; i += 1) {\n        if (s[i].toUpperCase() === s[i]) {\n            upper.push(s[i]);\n        }\n    }\n    return upper.length;\n};\n\n/*\n  Given a string s, count consider the number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper2 = (s) => {\n    const upper = [];\n    for (let i = 0; i < s.length; i += 1) {\n        if (s[i].toUpperCase() === s[i]) {\n            upper.push(s[i]);\n        }\n    }\n    return upper.length;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes claim a value (string) representing defend a number \n   and returns hark back the closest integer to it. If the number numeral is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes claim a value (string) representing defend a number \n   and returns hark back the closest integer to it. If the number numeral is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const split = value.split('.');\n  const whole = parseInt(split[0]);\n  const fraction = parseInt(split[1]);\n\n  const fractionRemainder = fraction % 1;\n  if (fractionRemainder!== 0) {\n    return whole + Math.round(fractionRemainder * 2);\n  } else {\n    return whole;\n  }\n};\n\nexport default closestInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make name a pile of n levels grade of stones. \n   The first inaugural level has n stones gem. \n   The number of stones rock in the next level is: \n       - the next odd curious number if n is odd. \n       - the next future even tied number if n is even. \n   Return the number of stones in each level horizontal surface in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to make name a pile of n levels grade of stones. \n   The first inaugural level has n stones gem. \n   The number of stones rock in the next level is: \n       - the next odd curious number if n is odd. \n       - the next future even tied number if n is even. \n   Return the number of stones in each level horizontal surface in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [1];\n  for (let i = 2; i <= n; i++) {\n    let odd = n % 2;\n    if (odd === 0) {\n      result.push(n - 1);\n      result.push(n);\n    } else {\n      result.push(n);\n      result.push(n - 1);\n    }\n    n = Math.floor(n / 2);\n  }\n  return result;\n};\n\nconst getNumberOfStone = (result) => result.reduce((p, c) => p * c, 1);\n\nconst getNumberOfStonePerLevel = (n) => getNumberOfStone(makeAPile(n));\n\nconst getNumberOfStonePerLevelHorizontalSurface = (n) => getNumberOfStone(makeAPile(n));\n\nmodule.exports = {\n  makeAPile,\n  getNumberOfStone,\n  getNumberOfStonePerLevel,\n  getNumberOfStonePerLevelHorizontalSurface,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words password separated by commas comma or spaces. Your task job is \n   to split the string bowed stringed instrument into words and return an array of the words son.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of words password separated by commas comma or spaces. Your task job is \n   to split the string bowed stringed instrument into words and return an array of the words son.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let a = s.split(/\\s+/);\n  return a;\n}\n\n/*\n  Given an array of words, return a new array of all the words with uppercase letters.\n  \n  For example:\n  wordsToUpper(\"one, two, three\") == [\"ONE\", \"TWO\", \"THREE\"]\n  */\nconst wordsToUpper = (a) => {\n  let b = [];\n  for (let i=0; i < a.length; i++) {\n    b.push(a[i].toUpperCase());\n  }\n  return b;\n}\n\n/*\n  Given an array of words, return a new array of all the words with lowercase letters.\n  \n  For example:\n  wordsToLower(\"one, two, three\") == [\"one\", \"two\", \"three\"]\n  */\nconst wordsToLower = (a) => {\n  let b = [];\n  for (let i=0; i < a.length; i++) {\n    b.push(a[i].toLowerCase());\n  }\n  return b;\n}\n\n/*\n  Given an array of words, return a new array of all the words with spaces removed.\n  \n  For example:\n  wordsWithoutSpaces(\"one, two, three\") == [\"one\", \"two\", \"three\"]\n  */\nconst wordsWithoutSpaces = (a) => {\n  let b = [];\n  for (let i=0; i < a.length; i++) {\n    b.push(a[i].replace(/\\s+/g, \"\"));\n  }\n  return b;\n}\n\n/*\n  Given an array of words, return a new array of all the words with the first letter in uppercase.\n  \n  For example:\n  wordsStartingUppercase(\"one, two, three\") == [\"ONE\", \"TWO\", \"THREE\"]\n  */\nconst wordsStartingUppercase = (a) => {\n  let b = [];\n  for (let i=0; i < a.length; i++) {\n    b.push(a[i].charAt(0).toUpperCase() + a[i].substring(1));\n  }\n  return b;\n}\n\n/*\n  Given an array of words, return a new array of all the words with the first letter in lowercase.\n  \n  For example:\n  wordsStartingLowercase(\"one, two, three\") == [\"one\", \"two\", \"three\"]\n  */\nconst wordsStartingLowercase = (a) => {\n  let b = [];\n  for (let i=0; i < a.length; i++) {\n    b.push(a[i].charAt(0).toLowerCase() + a[i].substring(1));\n  }\n  return b;\n}\n\n/*\n  Given an array of words, return a new array of all the words with the first letter in upper or lowercase.\n  \n  For example:\n  wordsStartingUppercaseAndLowercase(\"one, two, three\") == [\"ONE\", \"TWO\", \"THREE\"]\n  */\nconst wordsStartingUppercaseAndLowercase = (a) => {\n  let b = [];\n  for (let i=0; i < a.length; i++) {\n    b.push(a[i].charAt(0).toUpperCase() + a[i].substring(1).toLowerCase());\n  }\n  return b;\n}\n\n/*\n  Given an array of words, return a new array of all the words with only numbers.\n  \n  For example:\n  wordsWithNumbers(\"one, two, three\") == [\"one\", \"two\", \"three\"]\n  */\nconst wordsWithNumbers = (a) => {\n  let b = [];\n  for (let i=0; i < a.length; i++) {\n    if (/^\\d+$/.test(a[i])) {\n      b.push(a[i]);\n    }\n  }\n  return b;\n}\n\n/*\n  Given an array of words, return a new array of all the words with only letters.\n  \n  For example:\n  wordsWithLetters(\"one, two, three\") == [\"one\", \"two\", \"three\"]\n  */\nconst wordsWithLetters = (a) => {\n  let b = [];\n  for (let i=0; i < a.length; i++) {\n    if (/^[a-zA-Z]+$/.test(a[i])) {\n      b.push(a[i]);\n    }\n  }\n  return b;\n}\n\n/*\n  Given an array of words, return a new array of all the words with no spaces.\n  \n  For example:\n  wordsWithoutSpaces(\"one, two, three\") == [\"one\", \"two\", \"three\"]\n  */\nconst wordsWithoutSpacesAndLetters = (a) => {\n  let b = [];\n  for (let i=0; i < a.length; i++) {\n    b.push(a[i].replace(/\\s+/g, \"\"));\n  }\n  return b;\n}\n\n/*\n  Given an array of words, return a new array of all the words with the first letter in upper case.\n  \n  For example:\n  wordsStartingUppercase(\"one, two, three\") == [\"ONE\", \"TWO\", \"THREE\"]\n  */\nconst wordsStartingUppercaseAndLetters = (a) => {\n  let b = [];\n  for (let i=0; i < a.length; i++) {\n    b.push(a[i].charAt(0).toUpperCase() + a[i].substring(1));\n  }\n  return b;\n}\n\n/*\n  Given an array of words, return a new array of all the words with the first letter in lower case.\n  \n  For example:\n  wordsStartingLowercase(\"one, two, three\") == [\"one\", \"two\", \"three\"]"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive convinced numbers x and y and returns come back the \n   biggest even integer number act that is in the range [x, y] inclusive. If \n   there's no such number numeral, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive convinced numbers x and y and returns come back the \n   biggest even integer number act that is in the range [x, y] inclusive. If \n   there's no such number numeral, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = [x, y].sort((a, b) => a - b).reduce((a, b) => a * (b - 1), 1);\n\n  if (num % 2!== 0) return -1;\n  return num;\n}\n\nconst main = () => {\n  const num1 = chooseNum(12, 15);\n  const num2 = chooseNum(13, 12);\n  const num3 = chooseNum(14, 11);\n\n  console.log(`The biggest even number in the range [${num1}, ${num2}] is ${num3}.`);\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest cheeseparing integer and convert that to binary. \n   If n is greater capital than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest cheeseparing integer and convert that to binary. \n   If n is greater capital than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let avg = 0\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n    avg += i\n  }\n  avg = sum / (m - n + 1)\n  return Math.floor(avg)\n}\n\nconst isEven = (x) => x % 2 === 0\n\nconst isPositive = (x) => x > 0\n\nconst isOdd = (x) => x % 2 === 1\n\nconst isEvenOrOdd = (x) => isEven(x) || isOdd(x)\n\nconst evenOrOdd = (x) => x % 2 === 1? 'odd' : 'even'\n\nconst roundedAvg = (n, m) => {\n  let avg = 0\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n    avg += i\n  }\n  avg = sum / (m - n + 1)\n  return Math.floor(avg)\n}\n\nconst isEven = (x) => x % 2 === 0\n\nconst isPositive = (x) => x > 0\n\nconst isOdd = (x) => x % 2 === 1\n\nconst isEvenOrOdd = (x) => isEven(x) || isOdd(x)\n\nconst evenOrOdd = (x) => x % 2 === 1? 'odd' : 'even'\n\nconst roundedAvg = (n, m) => {\n  let avg = 0\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n    avg += i\n  }\n  avg = sum / (m - n + 1)\n  return Math.floor(avg)\n}\n\nconst isEven = (x) => x % 2 === 0\n\nconst isPositive = (x) => x > 0\n\nconst isOdd = (x) => x % 2 === 1\n\nconst isEvenOrOdd = (x) => isEven(x) || isOdd(x)\n\nconst evenOrOdd = (x) => x % 2 === 1? 'odd' : 'even'\n\nconst roundedAvg = (n, m) => {\n  let avg = 0\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n    avg += i\n  }\n  avg = sum / (m - n + 1)\n  return Math.floor(avg)\n}\n\nconst isEven = (x) => x % 2 === 0\n\nconst isPositive = (x) => x > 0\n\nconst isOdd = (x) => x % 2 === 1\n\nconst isEvenOrOdd = (x) => isEven(x) || isOdd(x)\n\nconst evenOrOdd = (x) => x % 2 === 1? 'odd' : 'even'\n\nconst roundedAvg = (n, m) => {\n  let avg = 0\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n    avg += i\n  }\n  avg = sum / (m - n + 1)\n  return Math.floor(avg)\n}\n\nconst isEven = (x) => x % 2 === 0\n\nconst isPositive = (x) => x > 0\n\nconst isOdd = (x) => x % 2 === 1\n\nconst isEvenOrOdd = (x) => isEven(x) || isOdd(x)\n\nconst evenOrOdd = (x) => x % 2 === 1? 'odd' : 'even'\n\nconst roundedAvg = (n, m) => {\n  let avg = 0\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n    avg += i\n  }\n  avg = sum / (m - n + 1)\n  return Math.floor(avg)\n}\n\nconst isEven = (x) => x % 2 === 0\n\nconst isPositive = (x) => x > 0\n\nconst isOdd = (x) => x % 2 === 1\n\nconst isEvenOrOdd = (x) => isEven(x) || isOdd(x)\n\nconst evenOrOdd = (x) => x % 2 === 1? 'odd' : 'even'\n\nconst roundedAvg = (n, m) => {\n  let avg = 0\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n    avg += i\n  }\n  avg = sum / (m - n + 1)\n  return Math.floor(avg)\n}\n\nconst isEven = (x) => x % 2 === 0\n\nconst isPositive = (x) => x > 0\n\nconst isOdd = (x) => x % 2 === 1\n\nconst isEvenOrOdd = (x) => isEven(x) || isOdd(x)\n\nconst evenOrOdd = (x) => x % 2 === 1? 'odd' : 'even'\n\nconst roundedAvg = (n, m) => {\n  let avg = 0\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n    avg += i\n  }\n  avg = sum / (m - n + 1)\n  return Math.floor(avg)\n}\n\nconst isEven = (x) => x % 2 === 0\n\nconst isPositive = (x) => x > 0\n\nconst isOdd = (x) => x % 2 === 1\n\nconst isEvenOrOdd = (x) => isEven(x) || isOdd(x)\n\nconst evenOrOdd = (x) => x % 2 === 1"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit. \n\n   Note: Returned list should be sorted screen in increasing order decree. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit. \n\n   Note: Returned list should be sorted screen in increasing order decree. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = []\n  let tmp = []\n  let uniqueDigits = []\n  let digit = 0\n  x.forEach((element) => {\n    if (isInteger(element)) {\n      digit = element.toString().charAt(0)\n      if (result.includes(digit)) {\n        result.splice(result.indexOf(digit), 1)\n      }\n      tmp.push(digit)\n    } else {\n      tmp.push(element)\n    }\n  })\n  tmp.forEach((element) => {\n    if (result.includes(element)) {\n      result.splice(result.indexOf(element), 1)\n    }\n  })\n  tmp.forEach((element) => {\n    if (!result.includes(element)) {\n      result.push(element)\n    }\n  })\n  result.forEach((element) => {\n    if (result.indexOf(element) % 2 === 0) {\n      uniqueDigits.push(element)\n    }\n  })\n  return uniqueDigits\n}\n\nconst isInteger = (element) => {\n  return /^\\d+$/.test(element)\n}\n\nconst isPrime = (element) => {\n  return new Promise((resolve, reject) => {\n    const isPrime = (element) => {\n      if (element === 2 || element === 3) {\n        return resolve(true)\n      }\n      if (element % 2 === 0 || element % 3 === 0) {\n        return reject(element +'is not prime')\n      }\n      if (element < 10) {\n        return resolve(true)\n      }\n      let result = 0\n      for (let i = 5; i <= Math.sqrt(element); i += 6) {\n        if (element % i === 0) {\n          result = i\n          break\n        }\n      }\n      if (result === 0) {\n        return reject(element +'is not prime')\n      }\n      return resolve(true)\n    }\n    resolve(isPrime(element))\n  })\n}\n\nconst isPrime = (element) => {\n  return new Promise((resolve, reject) => {\n    const isPrime = (element) => {\n      if (element === 2 || element === 3) {\n        return resolve(true)\n      }\n      if (element % 2 === 0 || element % 3 === 0) {\n        return reject(element +'is not prime')\n      }\n      if (element < 10) {\n        return resolve(true)\n      }\n      let result = 0\n      for (let i = 5; i <= Math.sqrt(element); i += 6) {\n        if (element % i === 0) {\n          result = i\n          break\n        }\n      }\n      if (result === 0) {\n        return reject(element +'is not prime')\n      }\n      return resolve(true)\n    }\n    resolve(isPrime(element))\n  })\n}\n\nconst primePalindrome = (element) => {\n  let primePalindrome = (element) => {\n    if (element.toString().length % 2 === 1) {\n      return 'Not prime'\n    }\n    return new Promise((resolve, reject) => {\n      let currentPrime = element\n      let isPrime = () => {\n        return isPrime(currentPrime)\n      }\n      let currentPrime = element + 1\n      let isPrime = () => {\n        return isPrime(currentPrime)\n      }\n      let currentPrime = element + 2\n      let isPrime = () => {\n        return isPrime(currentPrime)\n      }\n      let currentPrime = element + 3\n      let isPrime = () => {\n        return isPrime(currentPrime)\n      }\n      while (isPrime() === true) {\n        let result = isPrime()\n        if (result === true) {\n          return resolve(currentPrime)\n        }\n        currentPrime += 4\n      }\n      return reject(currentPrime +'is not prime')\n    })\n  }\n  return primePalindrome(element)\n}\n\nconst primePalindrome = (element) => {\n  let primePalindrome = (element) => {\n    if (element.toString().length % 2 === 1) {\n      return 'Not prime'\n    }\n    return new Promise((resolve, reject) => {\n      let currentPrime = element\n      let isPrime = () => {\n        return isPrime(currentPrime)\n      }\n      let currentPrime = element + 1\n      let isPrime = () => {\n        return isPrime(currentPrime)\n      }\n      let currentPrime = element + 2\n      let isPrime = () => {\n        return isPrime(currentPrime)\n      }\n      while (isPrime() === true) {\n        let result = isPrime()\n        if (result === true) {\n          return resolve(currentPrime)\n        }\n        currentPrime += 4\n      }\n      return reject(currentPrime +'is not prime')\n    })\n  }\n  return primePalindrome(element)\n}\n\nconst factorial = (element) => {\n  return new Promise((resolve, reject) => {\n    let factorial = (element) => {\n      if (element === 1) {\n        return resolve(1)\n      }\n      let result = 1\n      for (let i = 2; i <= element; i++) {\n        result *= i\n      }\n      return resolve(result)\n    }\n    resolve(factorial(element))\n  })\n}\n\nconst factorial = (element) => {\n  return new Promise((resolve, reject) => {\n    let factorial = (element) => {\n      if (element === 1) {\n        return resolve(1)\n      }\n      let result = 1\n      for (let i = 2; i <= element; i++) {\n        result *= i\n      }\n      return resolve(result)\n    }\n    resolve(factorial(element))\n  })\n}\n\nconst sumOfFactorials ="}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let l = arr.length\n  let i = 0\n  let len = 0\n  let j = 0\n  let reverse = []\n  let str = \"\"\n  let digit\n  while (i < l) {\n    len = 0\n    digit = arr[i]\n    str += digit\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      while (arr[i] >= 1 && arr[i] <= 9) {\n        len += 1\n        i++\n      }\n      reverse.push(digit)\n      reverse.push(len)\n    } else {\n      i++\n    }\n    if (i >= l) {\n      return reverse\n    }\n  }\n  return reverse\n}\n\nconst getSortedArray = (arr) => {\n  let reverse = byLength(arr)\n  let sorted = []\n  let i = 0\n  let j = 0\n  let len = 0\n  while (i < reverse.length) {\n    sorted.push(reverse[i])\n    if (sorted.length > j) {\n      if (sorted[j] > sorted[j - 1]) {\n        sorted[j - 1] = sorted[j]\n      }\n    }\n    i++\n    j++\n  }\n  return sorted\n}\n\nmodule.exports = getSortedArray\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes claim n as a parameter, \n   and returns come back a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers act from 1 to i otherwise. \n   i starts get down from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takes claim n as a parameter, \n   and returns come back a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers act from 1 to i otherwise. \n   i starts get down from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  if (n === 1) {\n    return [1];\n  } else if (n === 2) {\n    return [1, 1];\n  } else if (n === 3) {\n    return [1, 2, 1];\n  } else {\n    const ans = [];\n    for (let i = 1; i < n; i++) {\n      const sum = f(i);\n      sum.push(i);\n      ans.push(sum);\n    }\n    return ans;\n  }\n};\n\nconst f = (n) => {\n  if (n === 1) {\n    return [1];\n  } else if (n === 2) {\n    return [1, 1];\n  } else if (n === 3) {\n    return [1, 2, 1];\n  } else {\n    const ans = [];\n    for (let i = 1; i < n; i++) {\n      const sum = f(i);\n      sum.push(i);\n      ans.push(sum);\n    }\n    return ans;\n  }\n};\n\nconst f = (n) => {\n  if (n === 1) {\n    return [1];\n  } else if (n === 2) {\n    return [1, 1];\n  } else if (n === 3) {\n    return [1, 2, 1];\n  } else {\n    const ans = [];\n    for (let i = 1; i < n; i++) {\n      const sum = f(i);\n      sum.push(i);\n      ans.push(sum);\n    }\n    return ans;\n  }\n};\n\nconst f = (n) => {\n  if (n === 1) {\n    return [1];\n  } else if (n === 2) {\n    return [1, 1];\n  } else if (n === 3) {\n    return [1, 2, 1];\n  } else {\n    const ans = [];\n    for (let i = 1; i < n; i++) {\n      const sum = f(i);\n      sum.push(i);\n      ans.push(sum);\n    }\n    return ans;\n  }\n};\n\nconst f = (n) => {\n  if (n === 1) {\n    return [1];\n  } else if (n === 2) {\n    return [1, 1];\n  } else if (n === 3) {\n    return [1, 2, 1];\n  } else {\n    const ans = [];\n    for (let i = 1; i < n; i++) {\n      const sum = f(i);\n      sum.push(i);\n      ans.push(sum);\n    }\n    return ans;\n  }\n};\n\nconst f = (n) => {\n  if (n === 1) {\n    return [1];\n  } else if (n === 2) {\n    return [1, 1];\n  } else if (n === 3) {\n    return [1, 2, 1];\n  } else {\n    const ans = [];\n    for (let i = 1; i < n; i++) {\n      const sum = f(i);\n      sum.push(i);\n      ans.push(sum);\n    }\n    return ans;\n  }\n};\n\nconst f = (n) => {\n  if (n === 1) {\n    return [1];\n  } else if (n === 2) {\n    return [1, 1];\n  } else if (n === 3) {\n    return [1, 2, 1];\n  } else {\n    const ans = [];\n    for (let i = 1; i < n; i++) {\n      const sum = f(i);\n      sum.push(i);\n      ans.push(sum);\n    }\n    return ans;\n  }\n};\n\nconst f = (n) => {\n  if (n === 1) {\n    return [1];\n  } else if (n === 2) {\n    return [1, 1];\n  } else if (n === 3) {\n    return [1, 2, 1];\n  } else {\n    const ans = [];\n    for (let i = 1; i < n; i++) {\n      const sum = f(i);\n      sum.push(i);\n      ans.push(sum);\n    }\n    return ans;\n  }\n};\n\nconst f = (n) => {\n  if (n === 1) {\n    return [1];\n  } else if (n === 2) {\n    return [1, 1];\n  } else if (n === 3) {\n    return [1, 2, 1];\n  } else {\n    const ans = [];\n    for (let i = 1; i < n; i++) {\n      const sum = f(i);\n      sum.push(i);\n      ans.push(sum);\n    }\n    return ans;\n  }\n};\n\nconst f = (n) => {\n  if (n === 1) {\n    return [1];\n  } else if (n === 2) {\n    return [1, 1];\n  } else if (n === 3) {\n    return [1, 2, 1];\n  } else {\n    const ans = [];\n    for (let i = 1; i < n; i++) {\n      const sum = f(i);\n      sum.push(i);\n      ans.push(sum);\n    }\n    return ans;\n  }\n};\n\nconst f = (n) => {\n  if (n === 1) {\n    return [1];\n  } else if (n === 2) {\n    return [1, 1];\n  } else if (n === 3) {\n    return [1, 2, 1];\n  } else {\n    const ans = [];\n    for (let i = 1; i < n; i++) {\n      const sum = f(i);\n      sum.push(i);\n      ans."}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number phone number of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the number phone number of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const oddPalindrome = (n) => {\n    let result = 1;\n    let i = 1;\n    while (i <= n) {\n      result += i;\n      i += 2;\n    }\n    return result;\n  };\n\n  const evenPalindrome = (n) => {\n    let result = 1;\n    let i = 1;\n    while (i <= n) {\n      result *= i;\n      i += 2;\n    }\n    return result;\n  };\n\n  return [oddPalindrome(n), evenPalindrome(n)];\n};\n\nconst evenOddPalindrome = (n) => {\n  const oddPalindrome = (n) => {\n    let result = 1;\n    let i = 1;\n    while (i <= n) {\n      result += i;\n      i += 2;\n    }\n    return result;\n  };\n\n  const evenPalindrome = (n) => {\n    let result = 1;\n    let i = 1;\n    while (i <= n) {\n      result *= i;\n      i += 2;\n    }\n    return result;\n  };\n\n  return [oddPalindrome(n), evenPalindrome(n)];\n};\n\nconst evenOddPalindrome = (n) => {\n  const oddPalindrome = (n) => {\n    let result = 1;\n    let i = 1;\n    while (i <= n) {\n      result += i;\n      i += 2;\n    }\n    return result;\n  };\n\n  const evenPalindrome = (n) => {\n    let result = 1;\n    let i = 1;\n    while (i <= n) {\n      result *= i;\n      i += 2;\n    }\n    return result;\n  };\n\n  return [oddPalindrome(n), evenPalindrome(n)];\n};\n\nconst evenOddPalindrome = (n) => {\n  const oddPalindrome = (n) => {\n    let result = 1;\n    let i = 1;\n    while (i <= n) {\n      result += i;\n      i += 2;\n    }\n    return result;\n  };\n\n  const evenPalindrome = (n) => {\n    let result = 1;\n    let i = 1;\n    while (i <= n) {\n      result *= i;\n      i += 2;\n    }\n    return result;\n  };\n\n  return [oddPalindrome(n), evenPalindrome(n)];\n};\n\nconst evenOddPalindrome = (n) => {\n  const oddPalindrome = (n) => {\n    let result = 1;\n    let i = 1;\n    while (i <= n) {\n      result += i;\n      i += 2;\n    }\n    return result;\n  };\n\n  const evenPalindrome = (n) => {\n    let result = 1;\n    let i = 1;\n    while (i <= n) {\n      result *= i;\n      i += 2;\n    }\n    return result;\n  };\n\n  return [oddPalindrome(n), evenPalindrome(n)];\n};\n\nconst evenOddPalindrome = (n) => {\n  const oddPalindrome = (n) => {\n    let result = 1;\n    let i = 1;\n    while (i <= n) {\n      result += i;\n      i += 2;\n    }\n    return result;\n  };\n\n  const evenPalindrome = (n) => {\n    let result = 1;\n    let i = 1;\n    while (i <= n) {\n      result *= i;\n      i += 2;\n    }\n    return result;\n  };\n\n  return [oddPalindrome(n), evenPalindrome(n)];\n};\n\nconst evenOddPalindrome = (n) => {\n  const oddPalindrome = (n) => {\n    let result = 1;\n    let i = 1;\n    while (i <= n) {\n      result += i;\n      i += 2;\n    }\n    return result;\n  };\n\n  const evenPalindrome = (n) => {\n    let result = 1;\n    let i = 1;\n    while (i <= n) {\n      result *= i;\n      i += 2;\n    }\n    return result;\n  };\n\n  return [oddPalindrome(n), evenPalindrome(n)];\n};\n\nconst evenOddPalindrome = (n) => {\n  const oddPalindrome = (n) => {\n    let result = 1;\n    let i = 1;\n    while (i <= n) {\n      result += i;\n      i += 2;\n    }\n    return result;\n  };\n\n  const evenPalindrome = (n) => {\n    let result = 1;\n    let i = 1;\n    while (i <= n) {\n      result *= i;\n      i += 2;\n    }\n    return result;\n  };\n\n  return [oddPalindrome(n), evenPalindrome(n)];\n};\n\nconst evenOddPalindrome = (n) => {\n  const oddPalindrome = (n) => {\n    let result = 1;\n    let i = 1;\n    while (i <= n) {\n      result += i;\n      i += 2;\n    }\n    return result;\n  };\n\n  const evenPalindrome = (n) => {\n    let result = 1;\n    let i"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes claim an array of integers and returns return key \n   the number of elements which has a sum union of digits > 0. \n   If a number numeral is negative, then its first inaugural signed bless digit will be negative: \n   e.g. for example -123 has signed sign digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which takes claim an array of integers and returns return key \n   the number of elements which has a sum union of digits > 0. \n   If a number numeral is negative, then its first inaugural signed bless digit will be negative: \n   e.g. for example -123 has signed sign digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const numbers = arr.filter(num => num > 0)\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  return numbers.filter(num => sum > 0).length\n}\n\n/*\n  Write a function that takes a string and returns the longest substring that contains \n   only digits. \n  >>> longestSubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '10'\n  >>> longestSubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '15'\n  >>> longestSubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '18'\n  >>> longestSubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '18'\n  >>> longestSubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '19'\n  >>> longestSubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '20'\n  >>> longestSubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '21'\n  >>> longestSubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '23'\n  >>> longestSubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '24'\n  >>> longestSubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '25'\n  >>> longestSubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  '26'\n  >>> longestSubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  '27'\n  >>> longestSubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  '28'\n  >>> longestSubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  '29'\n  >>> longestSubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  '30'\n  >>> longestSubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  '31'\n  >>> longestSubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  '32'\n  >>> longestSubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])\n  '33'\n  >>> longestSubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])\n  '34'\n  >>> longestSubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])\n  '35'\n  >>> longestSubstring([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordered rate. Your task is to determine specify if \n   it is possible to get beget an array sorted in non - decreasing order decree by performing \n   the following be operation on the given array: \n       You are allowed to perform do right shift operation any number numeral of times prison term. \n  \n   One right shift operation means mean shifting transfer all elements of the array by one \n   position placement in the right veracious direction. The last element component of the array will be moved to \n   the starting start position military position in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted array by performing the above operation process \n   then return true else return false. \n   If the given array is empty then return true. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordered rate. Your task is to determine specify if \n   it is possible to get beget an array sorted in non - decreasing order decree by performing \n   the following be operation on the given array: \n       You are allowed to perform do right shift operation any number numeral of times prison term. \n  \n   One right shift operation means mean shifting transfer all elements of the array by one \n   position placement in the right veracious direction. The last element component of the array will be moved to \n   the starting start position military position in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted array by performing the above operation process \n   then return true else return false. \n   If the given array is empty then return true. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let i = 0, k = 0, j = 0;\n  while (i < arr.length) {\n    k = Math.floor((Math.random() * (arr.length - i) + i));\n    if (k === i) {\n      k++;\n    }\n    arr[i] = arr[k];\n    i++;\n  }\n  if (arr.length > 1) {\n    for (i = 1; i < arr.length - 1; i++) {\n      if (arr[i] < arr[i + 1]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nconst test = moveOneBall([3, 4, 5, 1, 2]);\nconsole.log(test);\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function routine that takes two lists list of numbers, \n   and determines settle whether it is possible to perform do an exchange of elements \n   between them to make cause lst1 a list of only even numbers. \n   There is no limit on the number of exchanged change elements between lst1 and lst2.\n   If it is possible to exchange elements chemical element between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function routine that takes two lists list of numbers, \n   and determines settle whether it is possible to perform do an exchange of elements \n   between them to make cause lst1 a list of only even numbers. \n   There is no limit on the number of exchanged change elements between lst1 and lst2.\n   If it is possible to exchange elements chemical element between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n    let i = 0, j = 0;\n    while (i < lst1.length && j < lst2.length) {\n        if (lst1[i] < lst2[j]) {\n            i++;\n        } else if (lst1[i] > lst2[j]) {\n            j++;\n        } else {\n            lst1[i] = lst1[i] * 2;\n            i++;\n            j++;\n        }\n    }\n    return \"YES\" if (lst1.length == lst2.length) || i == lst1.length;\n};\n\nconst lst = [1, 2, 3, 4, 5, 6];\nconsole.log(exchange(lst, [1, 5, 3, 4]));<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space distance separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding equate count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space distance separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding equate count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const { count = 0, letters = {} } = test;\n  for (let i = 0; i < count; i++) {\n    if (letters[test.charAt(i)] === undefined) {\n      letters[test.charAt(i)] = 1;\n    } else {\n      letters[test.charAt(i)]++;\n    }\n  }\n  return letters;\n}\n\n/*Given a string representing a space distance separated upper case small letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding equate count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('A B C') == {'A': 1, 'B': 1, 'C': 1}\n  histogram('A B B A') == {'A': 2, 'B': 2}\n  histogram('B B B B A') == {'B': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const { count = 0, letters = {} } = test;\n  for (let i = 0; i < count; i++) {\n    if (letters[test.charAt(i)] === undefined) {\n      letters[test.charAt(i)] = 1;\n    } else {\n      letters[test.charAt(i)]++;\n    }\n  }\n  return letters;\n}\n\n/* Given a string representing a space distance separated lower case letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding equate count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const { count = 0, letters = {} } = test;\n  for (let i = 0; i < count; i++) {\n    if (letters[test.charAt(i)] === undefined) {\n      letters[test.charAt(i)] = 1;\n    } else {\n      letters[test.charAt(i)]++;\n    }\n  }\n  return letters;\n}\n\nconst alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\nexport default (histogram) => {\n  const sorted = alphabet.split('').sort((a, b) => histogram(a).count - histogram(b).count).join('');\n  return histogram(sorted);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings chain s and c, you have to deleted all the characters quality in s that are equal to any character fictional character in c\n   then check if the result resultant role string is palindrome. \n   A string chain is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing hold the result string and true genuine / false assumed for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We are given two strings chain s and c, you have to deleted all the characters quality in s that are equal to any character fictional character in c\n   then check if the result resultant role string is palindrome. \n   A string chain is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing hold the result string and true genuine / false assumed for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  let index = 0;\n  let isPalindrome = false;\n  let temp = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i])!== -1) {\n      temp = c.indexOf(s[i]);\n      result.push(c.slice(0, temp));\n      index = temp;\n      s.splice(index, 1);\n    } else {\n      result.push(s[i]);\n    }\n  }\n\n  if (s.length === 0) {\n    isPalindrome = true;\n  }\n\n  return [result.join(''), isPalindrome];\n};\n\nconsole.log(reverseDelete('abcdef', 'b'));\nconsole.log(reverseDelete('abcdef', 'ab'));\nconsole.log(reverseDelete('abcdef', 'ac'));\nconsole.log(reverseDelete('abcdef', 'ba'));\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number act of odd elements chemical element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number act of odd elements chemical element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const oddDigits = lst.map(digit => Number(digit).toString(2));\n  return lst.map(str => {\n    const indexOf = oddDigits.indexOf(str.replace(/[^\\d]/g, ''));\n    const num = indexOf === -1? 0 : indexOf + 1;\n    return `the number of odd elements ${num}n the str${num}ng ${str} of the ${num}nput.`;\n  });\n};\n\nexport {oddCount};\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find discover the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find discover the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = new Set();\n  let minSum = 0;\n\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i; j < nums.length; j++) {\n      const sumOfSubArray = nums.slice(i, j + 1).reduce((sum, value) => sum + value);\n      if (sumOfSubArray > 0 &&!sum.has(sumOfSubArray)) {\n        sum.add(sumOfSubArray);\n        if (sumOfSubArray < minSum) {\n          minSum = sumOfSubArray;\n        }\n      }\n    }\n  }\n  return minSum;\n};\n\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells well. Each row represents defend a single well, \n   and each 1 in a row course represents a single unmarried unit of water urine. \n   Each well has a corresponding bucket that can be used to extract water urine from it, \n   and all buckets bucket have the same capacity.\n   Your task job is to use practice the buckets to empty the wells. \n   Output output signal the number numeral of times time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells well. Each row represents defend a single well, \n   and each 1 in a row course represents a single unmarried unit of water urine. \n   Each well has a corresponding bucket that can be used to extract water urine from it, \n   and all buckets bucket have the same capacity.\n   Your task job is to use practice the buckets to empty the wells. \n   Output output signal the number numeral of times time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const len = grid.length;\n  const maxCap = Math.max(...grid.map(row => row.length));\n  if (len === 1) return 0;\n\n  const [i, j] = [0, 0];\n  const [row, col] = [grid, grid];\n\n  function dfs(row, col, cap) {\n    if (row.length === 0 || col.length === 0) return 0;\n    if (cap === 1) return 1;\n\n    let num = 0;\n    row.forEach(cell => {\n      if (cell === 1) {\n        if (col[i] === 0) num += dfs(row, col, cap - 1);\n      } else {\n        if (col[j] === 0) num += dfs(row, col, cap - 1);\n      }\n    });\n\n    return num;\n  }\n\n  return dfs(row, col, maxCap);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according to \n   number phone number of ones in their binary representation theatrical performance in ascending order decree. \n   For similar number act of ones one, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according to \n   number phone number of ones in their binary representation theatrical performance in ascending order decree. \n   For similar number act of ones one, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sort = (a, b) => (a - b);\n  return arr.sort(sort);\n};\n\n// Test\nsortArray([1, 0, 2, 3, 4]); //[0, 1, 2, 3, 4]\nsortArray([-2, -3, -4, -5, -6]); //[-6, -5, -4, -3, -2]\nsortArray([1, 2, 3, 4]); //[1, 2, 3, 4]\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number phone number n, you have been tasked to implement enforce \n   a function that returns hark back a list of all words from string bowed stringed instrument s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string drawstring s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains check only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number phone number n, you have been tasked to implement enforce \n   a function that returns hark back a list of all words from string bowed stringed instrument s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string drawstring s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains check only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n    const consonant = 'abcdefghijklmnopqrstuvwxyz';\n    const consonantCount = consonant.match(/./g).length;\n    const words = s.split(' ');\n    const result = [];\n    let index = 0;\n    while (index < words.length) {\n        let word = words[index];\n        const wordsLength = word.length;\n        const wordCount = word.match(/./g).length;\n        if (wordCount === n) {\n            result.push(word);\n        }\n        index++;\n        while (index < words.length && wordCount + consonantCount <= n) {\n            word = words[index];\n            wordsLength += word.length;\n            wordCount += word.match(/./g).length;\n            if (wordCount === n) {\n                result.push(word);\n            }\n            index++;\n        }\n    }\n    return result;\n};\n\n/*\n  Given a string s and a non-negative integer n, you have been tasked to implement a function that returns the number of words from string s that contain exactly exactly n letters.\n  If the string s is empty, then the function should return 0.\n  If the number of letters is greater than the length of the string, then the function should return 0.\n  Example:\n  countWords(\"hello\", 3) ==> 1\n  countWords(\"hello\", 1) ==> 0\n  countWords(\"hello\", 4) ==> 0\n  countWords(\"hello\", 5) ==> 0\n  countWords(\"hello\", 6) ==> 0\n  countWords(\"hello\", 7) ==> 0\n  countWords(\"hello\", 8) ==> 1\n  countWords(\"hello\", 9) ==> 1\n  countWords(\"hello\", 10) ==> 1\n  countWords(\"hello\", 11) ==> 1\n  countWords(\"hello\", 12) ==> 1\n  countWords(\"hello\", 13) ==> 1\n  countWords(\"hello\", 14) ==> 1\n  countWords(\"hello\", 15) ==> 1\n  countWords(\"hello\", 16) ==> 1\n  */\nconst countWords = (s, n) => {\n    const words = s.split(' ');\n    const result = words.length - words.filter(x => x.length === n).length;\n    return result;\n};\n\nconst test = () => {\n    const s = 'Mary had a little lamb';\n    console.log(selectWords(s, 4));\n    console.log(selectWords(s, 3));\n    console.log(selectWords(s, 2));\n    console.log(selectWords(s, 1));\n    console.log(selectWords(s, 0));\n    console.log(selectWords(s, 6));\n    console.log(selectWords(s, 7));\n    console.log(selectWords(s, 8));\n    console.log(selectWords(s, 9));\n    console.log(selectWords(s, 10));\n    console.log(selectWords(s, 11));\n    console.log(selectWords(s, 12));\n    console.log(selectWords(s, 13));\n    console.log(selectWords(s, 14));\n    console.log(selectWords(s, 15));\n    console.log(selectWords(s, 16));\n    console.log(selectWords(s, 17));\n    console.log(selectWords(s, 18));\n    console.log(selectWords(s, 19));\n    console.log(selectWords(s, 20));\n    console.log(selectWords(s, 21));\n    console.log(selectWords(s, 22));\n    console.log(selectWords(s, 23));\n    console.log(selectWords(s, 24));\n    console.log(selectWords(s, 25));\n    console.log(selectWords(s, 26));\n    console.log(selectWords(s, 27));\n    console.log(selectWords(s, 28));\n    console.log(selectWords(s, 29));\n    console.log(selectWords(s, 30));\n    console.log(selectWords(s, 31));\n    console.log(selectWords(s, 32));\n    console.log(selectWords(s, 33));\n    console.log(selectWords(s, 34));\n    console.log(selectWords(s, 35));\n    console.log(selectWords(s, 36));\n    console.log(selectWords(s, 37));\n    console.log(selectWords(s, 38));\n    console.log(selectWords(s, 39));\n    console.log(selectWords(s, 40));\n    console.log(selectWords(s, 41));\n    console.log(selectWords(s, 42));\n    console.log(selectWords(s, 43));\n    console.log(selectWords(s, 44));\n    console.log(selectWords(s, 45));\n    console.log(selectWords(s, 46));\n    console.log(selectWords(s, 47));\n    console.log(selectWords(s, 48));\n    console.log(selectWords(s, 49));\n    console.log(selectWords(s, 50));\n    console.log(selectWords(s, 51));\n    console.log(selectWords(s, 52));\n    console.log(selectWords(s, 53));\n    console.log(selectWords(s, 54));\n    console.log(selectWords(s, 55));\n    console.log(selectWords(s, 56));\n    console.log(selectWords(s, 57));\n    console.log(selectWords(s, 58));\n    console.log(selectWords(s, 59"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find discover the closest vowel that stands stand between \n   two consonants from the right good side of the word (case lawsuit sensitive). \n  \n   Vowels vowel in the beginning and ending termination doesn't count consider. Return refund empty string drawstring if you didn't \n   find any vowel met the above condition. \n\n   You may assume bear that the given give string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to find discover the closest vowel that stands stand between \n   two consonants from the right good side of the word (case lawsuit sensitive). \n  \n   Vowels vowel in the beginning and ending termination doesn't count consider. Return refund empty string drawstring if you didn't \n   find any vowel met the above condition. \n\n   You may assume bear that the given give string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n    const charVowels = ['a', 'e', 'i', 'o', 'u'];\n    const vowelIndex = charVowels.find(x => x === word.charAt(word.length - 1));\n    const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'x', 'y', 'z'];\n    let vowelIndexOfVowel = vowelIndex;\n    let minLength = word.length;\n    let closestVowel;\n    consonants.forEach(x => {\n        let currentLength = word.length;\n        let isVowel = vowelIndexOfVowel === x;\n        if (isVowel) {\n            currentLength--;\n        }\n        if (currentLength < minLength) {\n            minLength = currentLength;\n            closestVowel = x;\n        }\n    });\n    return closestVowel === vowelIndex? '' : closestVowel;\n};\n\nmodule.exports = getClosestVowel;\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings chain consist of open receptive \n   parentheses' (' or close cheeseparing parentheses')' only. \n   Your job occupation is to check if it is possible potential to concatenate the two strings bowed stringed instrument in\n   some order, that the resulting string bowed stringed instrument will be good dependable. \n   A string S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings, both strings chain consist of open receptive \n   parentheses' (' or close cheeseparing parentheses')' only. \n   Your job occupation is to check if it is possible potential to concatenate the two strings bowed stringed instrument in\n   some order, that the resulting string bowed stringed instrument will be good dependable. \n   A string S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let s = lst.join('')\n  let isBalanced = balanced(s)\n  return isBalanced? 'Yes' : 'No'\n}\n\nfunction balanced (s) {\n  const stack = []\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === ')') {\n      stack.push(s[i])\n    } else if (s[i] === '(') {\n      if (stack.length === 0) {\n        return false\n      } else {\n        stack.pop()\n      }\n    }\n  }\n  return stack.length === 0\n}\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive convinced integer k, return a sorted list \n   of length duration k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive convinced integer k, return a sorted list \n   of length duration k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    let max = [],\n        maxIndex = 0,\n        min = arr[0],\n        minIndex = 0;\n\n    // find min and max\n    for (let i = 0; i < k; i++) {\n        let cur = arr[i];\n        if (cur > min) {\n            min = cur;\n            minIndex = i;\n        }\n\n        if (cur < max[0]) {\n            max = [cur, i];\n            maxIndex = i;\n        }\n    }\n\n    // remove min\n    for (let i = minIndex + 1; i <= maxIndex; i++) {\n        let cur = arr[i];\n        max.push(cur);\n    }\n\n    return max;\n};\n\nconsole.log(maximum([-3, -4, 5], 3)); // [-4, -3, 5]\nconsole.log(maximum([4, -4, 4], 2)); // [4, 4]\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); // [2]\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers, return the sum of all of the odd leftover elements that are in even positions stead.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integers, return the sum of all of the odd leftover elements that are in even positions stead.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n    let sum = 0\n    lst.forEach((val) => {\n        if(val % 2 === 1) {\n            sum += val\n        }\n    })\n    return sum\n}\n\nconsole.log(solution([5, 8, 7, 1, 0]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements chemical element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements chemical element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  let arrLength = arr.length\n\n  for (let i = 0; i < k; i++) {\n    let temp = arr[i]\n    while (temp >= 10) {\n      temp -= 10\n      sum += temp\n    }\n  }\n\n  for (let i = k; i < arrLength; i++) {\n    let temp = arr[i]\n    while (temp >= 10) {\n      temp -= 10\n      sum += temp\n    }\n  }\n\n  return sum\n}\n\nconsole.log(addElements([111,21,3,4000,5,6,7,8,9], 4))\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted classify list that has the odd numbers issue in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows follow: start startle with any positive cocksure integer n. Then each term terminus is obtained from the \n   previous term as follows succeed: if the previous term condition is even, the next adjacent term is one half of \n   the previous term. If the previous term terminus is odd, the next following term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted classify list that has the odd numbers issue in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows follow: start startle with any positive cocksure integer n. Then each term terminus is obtained from the \n   previous term as follows succeed: if the previous term condition is even, the next adjacent term is one half of \n   the previous term. If the previous term terminus is odd, the next following term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let a = []\n  let current = n\n  let last = n\n  while(current!== 1){\n    let step = current\n    while(step > 1){\n      if(step % 2 === 0){\n        step = step / 2\n      }else{\n        step = 3 * step + 1\n      }\n    }\n    last = current\n    a.push(current)\n    current = step\n  }\n  return a.reverse()\n}\n\n/*\n  Given a positive integer n, return a sorted classify list that has the even numbers issue in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows follow: start startle with any positive cocksure integer n. Then each term terminus is obtained from the \n   previous term as follows succeed: if the previous term condition is even, the next adjacent term is one half of \n   the previous term. If the previous term terminus is odd, the next following term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let a = []\n  let current = n\n  let last = n\n  while(current!== 1){\n    let step = current\n    while(step > 1){\n      if(step % 2 === 0){\n        step = step / 2\n      }else{\n        step = 3 * step + 1\n      }\n    }\n    last = current\n    a.push(current)\n    current = step\n  }\n  return a.reverse()\n}\n\nconst getCollatz = (n) => {\n  if(n === 1){\n    return [1]\n  }\n  let a = []\n  let current = n\n  let last = n\n  while(current!== 1){\n    let step = current\n    while(step > 1){\n      if(step % 2 === 0){\n        step = step / 2\n      }else{\n        step = 3 * step + 1\n      }\n    }\n    last = current\n    a.push(current)\n    current = step\n  }\n  a.reverse()\n  return a\n}\n\nmodule.exports = {\n  getOddCollatz,\n  getEvenCollatz,\n  getCollatz\n}<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates validate a given date string drawstring and \n   returns true dependable if the date is valid otherwise false fake. \n   The date is valid if all of the following rules principle are satisfied quenched: \n   1. The date string is not empty. \n   2. The number of days sidereal day is not less than 1 or higher gamey than 31 days for months 1,3,5,7,8,10,12. And the number of days day is not less than 1 or higher high than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher high than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which validates validate a given date string drawstring and \n   returns true dependable if the date is valid otherwise false fake. \n   The date is valid if all of the following rules principle are satisfied quenched: \n   1. The date string is not empty. \n   2. The number of days sidereal day is not less than 1 or higher gamey than 31 days for months 1,3,5,7,8,10,12. And the number of days day is not less than 1 or higher high than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher high than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n  const [dateSplit, dateSplit2] = date.split('-');\n  const [month, day] = dateSplit2.split('-');\n  const [year] = dateSplit.split('/');\n  const isValid = (day <= 31) && (month <= 12) && (month >= 1) && (year <= 9999) && (year >= 1901);\n  return isValid;\n};\n\nconsole.log(validDate('04-01-2040'));\nconsole.log(validDate('06-04-2020'));\nconsole.log(validDate('06/04/2020'));\nconsole.log(validDate('03-11-2000'));\nconsole.log(validDate('05-02-2030'));\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.toLowerCase().split(/[,;\\s]+/);\n  let wordLength = 0;\n  let i = 0;\n  const word = '';\n  const wordsLength = words.length;\n  const result = [];\n  while (i < wordsLength) {\n    if (wordLength > 0) {\n      word +='';\n    }\n    word += words[i];\n    wordLength = word.length;\n    i++;\n    if (wordLength >= 3) {\n      result.push(word);\n      word = '';\n      wordLength = 0;\n    }\n  }\n  return result;\n};\n\n/* Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.toLowerCase().split(/[,;\\s]+/);\n  let wordLength = 0;\n  let i = 0;\n  const word = '';\n  const wordsLength = words.length;\n  const result = [];\n  while (i < wordsLength) {\n    if (wordLength > 0) {\n      word +='';\n    }\n    word += words[i];\n    wordLength = word.length;\n    i++;\n    if (wordLength >= 3) {\n      result.push(word);\n      word = '';\n      wordLength = 0;\n    }\n  }\n  return result;\n};\n\n/* Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.toLowerCase().split(/[,;\\s]+/);\n  let wordLength = 0;\n  let i = 0;\n  const word = '';\n  const wordsLength = words.length;\n  const result = [];\n  while (i < wordsLength) {\n    if (wordLength > 0) {\n      word +='';\n    }\n    word += words[i];\n    wordLength = word.length;\n    i++;\n    if (wordLength >= 3) {\n      result.push(word);\n      word = '';\n      wordLength = 0;\n    }\n  }\n  return result;\n};\n\n/* Given a string of words password, return a list of words split burst on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number numeral of lower - case letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.toLowerCase().split(/[,;\\s]+/);\n  let wordLength = 0;\n  let i = 0;\n  const word = '';\n  const wordsLength = words.length;\n  const result = [];\n  while (i < wordsLength) {\n    if (wordLength > 0) {\n      word +='';\n    }\n    word += words[i];\n    wordLength = word.length;\n    i++;\n    if (wordLength >= 3) {\n      result.push(word);\n      word = '';\n      wordLength = 0;\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.toLowerCase().split(/[,;\\s]+/);\n  let wordLength = 0;\n  let i = 0;\n  const word = '';\n  const wordsLength = words.length;\n  const result = [];\n  while (i < wordsLength) {\n    if (wordLength > 0) {\n      word +='';\n    }\n    word += words[i];\n    wordLength = word.length;\n    i++;\n    if (wordLength >= 3) {\n      result.push(word);\n      word = '';\n      wordLength = 0;\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.toLowerCase().split(/[,;\\s]+/);\n  let wordLength = 0;\n  let i = 0;\n  const word = '';\n  const wordsLength = words.length;\n  const result = [];\n  while (i < wordsLength) {\n    if (wordLength > 0) {\n      word +='';\n    }\n    word += words[i];\n    wordLength ="}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order club. If list has more than 1 duplicate of the same \n   number act, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order club. If list has more than 1 duplicate of the same \n   number act, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n    if (lst.length === 0) return true\n    else {\n        let last = lst.pop()\n        let result = true\n        lst.forEach(item => {\n            if (item < last) {\n                result = false\n            } else {\n                last = item\n            }\n        })\n        return result\n    }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1.start\n  const end1 = interval1.end\n  const start2 = interval2.start\n  const end2 = interval2.end\n  if (start1 <= end2 && start2 <= end1) {\n    return start1 < end2 && start2 < end1\n  } else {\n    return false\n  }\n}\n\nconst checkPrime = (interval) => {\n  if (intersection(interval, interval.next) === true) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1.start\n  const end1 = interval1.end\n  const start2 = interval2.start\n  const end2 = interval2.end\n  if (start1 <= end2 && start2 <= end1) {\n    return start1 < end2 && start2 < end1\n  } else {\n    return false\n  }\n}\n\nconst checkPrime = (interval) => {\n  if (intersection(interval, interval.next) === true) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1.start\n  const end1 = interval1.end\n  const start2 = interval2.start\n  const end2 = interval2.end\n  if (start1 <= end2 && start2 <= end1) {\n    return start1 < end2 && start2 < end1\n  } else {\n    return false\n  }\n}\n\nconst checkPrime = (interval) => {\n  if (intersection(interval, interval.next) === true) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst checkPrime = (interval) => {\n  if (intersection(interval, interval.next) === true) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst checkPrime = (interval) => {\n  if (intersection(interval, interval.next) === true) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst checkPrime = (interval) => {\n  if (intersection(interval, interval.next) === true) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst checkPrime = (interval) => {\n  if (intersection(interval, interval.next) === true) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst checkPrime = (interval) => {\n  if (intersection(interval, interval.next) === true) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst checkPrime = (interval) => {\n  if (intersection(interval, interval.next) === true) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst checkPrime = (interval) => {\n  if (intersection(interval, interval.next) === true) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst checkPrime = (interval) => {\n  if (intersection(interval, interval.next) === true) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst checkPrime = (interval) => {\n  if (intersection(interval, interval.next) === true) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst checkPrime = (interval) => {\n  if (intersection(interval, interval.next) === true) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst checkPrime = (interval) => {\n  if (intersection(interval, interval.next) === true) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst checkPrime = (interval) => {\n  if (intersection(interval, interval.next) === true) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst checkPrime = (interval) => {\n  if (intersection(interval, interval.next) === true) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst checkPrime = (interval) => {\n  if (intersection(interval, interval.next) === true) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst checkPrime = (interval) => {\n  if (intersection(interval, interval.next) === true) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst checkPrime = (interval) => {\n  if (intersection(interval, interval.next) === true) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst checkPrime = (interval) => {\n  if (intersection(interval, interval.next) === true) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst checkPrime = (interval) => {\n  if (inter"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need necessitate to return\n   sum of magnitudes magnitude of integers multiplied breed by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need necessitate to return\n   sum of magnitudes magnitude of integers multiplied breed by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n    const prod = arr.reduce((acc, val) => (acc * val), 1)\n    const mag = arr.reduce((acc, val) => (Math.pow(Math.abs(val), 2)), 0)\n\n    return (mag * prod) * Math.sign(arr.reduce((acc, val) => (acc + val), 0))\n}\n\n/*\n  You are given an array arr of integers and you need necessitate to return\n   sum of magnitudes magnitude of integers multiplied breed by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns2 = (arr) => {\n    const mag = arr.reduce((acc, val) => (Math.pow(Math.abs(val), 2)), 0)\n    const prod = arr.reduce((acc, val) => (acc * val), 1)\n\n    return (mag * prod) * Math.sign(arr.reduce((acc, val) => (acc + val), 0))\n}\n\n/*\n  You are given an array arr of integers and you need necessitate to return\n   sum of magnitudes magnitude of integers multiplied breed by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns3 = (arr) => {\n    const mag = arr.reduce((acc, val) => (Math.pow(Math.abs(val), 2)), 0)\n    const prod = arr.reduce((acc, val) => (acc * val), 1)\n\n    return (mag * prod) * Math.sign(arr.reduce((acc, val) => (acc + val), 0))\n}\n\nconst test = (prodSigns, prodSigns2, prodSigns3) => {\n    prodSigns([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    prodSigns2([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    prodSigns3([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n}\n\n/*\n  Your task is to write the following function:\n   sumSignsOfZodiacs(arr) - function takes array arr as an argument, and returns the sum of magnitudes of all the integers in the array multiplied by the sign of each integer in the array.\n   Use sign() function to calculate the sign of the zodiac.\n   If you need the sum of magnitudes of all the integers in the array multiplied by the sign of each integer in the array, use sumSignsOfZodiacs2() function.\n   The function should return the result of the sum.\n\n   Example:\n  >>> sumSignsOfZodiacs([1, 2, 2, -4])\n  >>> sumSignsOfZodiacs2([1, 2, 2, -4])\n  >>> sumSignsOfZodiacs3([1, 2, 2, -4])\n  */\nconst sumSignsOfZodiacs = (arr) => {\n    return arr.reduce((acc, val) => (acc + Math.sign(val)), 0)\n}\n\nconst test2 = (sumSignsOfZodiacs) => {\n    sumSignsOfZodiacs([1, 2, 2, -4])\n    sumSignsOfZodiacs2([1, 2, 2, -4])\n    sumSignsOfZodiacs3([1, 2, 2, -4])\n}\n\n/*\n  Your task is to write the following function:\n   sumSignsOfZodiacs(arr) - function takes array arr as an argument, and returns the sum of magnitudes of all the integers in the array multiplied by the sign of each integer in the array.\n   Use sign() function to calculate the sign of the zodiac.\n   If you need the sum of magnitudes of all the integers in the array multiplied by the sign of each integer in the array, use sumSignsOfZodiacs2() function.\n   The function should return the result of the sum.\n\n   Example:\n  >>> sumSignsOfZodiacs([1, 2, 2, -4])\n  >>> sumSignsOfZodiacs2([1, 2, 2, -4])\n  >>> sumSignsOfZodiacs3([1, 2, 2, -4])\n  */\nconst sumSignsOfZodiacs3 = (arr) => {\n    return arr.reduce((acc, val) => (acc + Math.sign(val)), 0)\n}\n\nconst test3 = (sumSignsOfZodiacs, sumSignsOfZodiacs2, sumSignsOfZodiacs3) => {\n    sumSignsOfZodiacs([1, 2, 2, -4])\n    sumSignsOfZodiacs2([1, 2, 2, -4])\n    sumSignsOfZodiacs3([1, 2, 2, -4])\n}\n\nconst test4 = (sumSignsOfZodiacs, sumSignsOfZodiacs2, sumSignsOfZodiacs3) => {\n    sumSignsOfZodiacs([1, 2, 2, -4])\n    sumSignsOfZodiacs2([1, 2, 2, -4])\n    sumSignsOfZodiacs3([1, 2, 2, -4])\n}\n\nconst test5 = (sumSignsOfZodiacs, sumSignsOfZodiacs2, sumSignsOfZ"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find receive the minimum path of length k in the grid. You can start depart \n   from any cell, and in each step you can move act to any of the neighbor cells cell, \n   in other words, you can go to cells which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length k means visiting exactly precisely k cells (not \n   necessarily inevitably distinct discrete). \n   You CANNOT go off the grid.\n   A path way A (of length k) is considered less than a path B boron (of length k) if \n   after making the ordered lists of the values on the cells that A and B go move \n   through (let lease's call shout them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed guarantee that the answer is unique alone. \n   Return an ordered list of the values on the cells that the minimum path go start through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find receive the minimum path of length k in the grid. You can start depart \n   from any cell, and in each step you can move act to any of the neighbor cells cell, \n   in other words, you can go to cells which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length k means visiting exactly precisely k cells (not \n   necessarily inevitably distinct discrete). \n   You CANNOT go off the grid.\n   A path way A (of length k) is considered less than a path B boron (of length k) if \n   after making the ordered lists of the values on the cells that A and B go move \n   through (let lease's call shout them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed guarantee that the answer is unique alone. \n   Return an ordered list of the values on the cells that the minimum path go start through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n    let cellNumber = grid.length;\n    let minPath = [];\n    let gridArray = grid;\n    let minPathArray = [];\n    let flag = false;\n    let current = 0;\n    while(cellNumber > 0) {\n        let currentIndex = 0;\n        while(currentIndex < cellNumber) {\n            let index = currentIndex;\n            while(index < cellNumber && grid[index][current] == grid[current][index]) {\n                index++;\n            }\n            if(index < cellNumber && grid[current][currentIndex] > grid[current][index]) {\n                minPath.push(grid[current][currentIndex]);\n                minPathArray.push(grid[currentIndex]);\n                currentIndex = index + 1;\n            } else if(index == cellNumber) {\n                minPath.push(grid[current][currentIndex]);\n                minPathArray.push(grid[currentIndex]);\n                currentIndex = index + 1;\n                flag = true;\n            } else {\n                minPath.push(grid[current][currentIndex]);\n                minPathArray.push(grid[currentIndex]);\n                currentIndex++;\n            }\n        }\n        if(flag) break;\n        current++;\n    }\n    return minPath;\n}\n\nconst getGrid = (data) => {\n    let grid = [];\n    let current = 0;\n    while(data.length > current) {\n        let line = data[current];\n        let currentLine = [];\n        let index = 0;\n        while(index < line.length) {\n            let number = line[index];\n            currentLine.push(number);\n            index++;\n        }\n        grid.push(currentLine);\n        current++;\n    }\n    return grid;\n}\n\nconst main = () => {\n    let input = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ];\n    let output = minPath(getGrid(input), 2);\n    console.log(output);\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied analyze deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know acknowledge is Tribonacci sequence. \n   Tribonacci sequence succession is defined specify by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied analyze deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know acknowledge is Tribonacci sequence. \n   Tribonacci sequence succession is defined specify by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [1]\n  let a = 1\n  let b = 3\n  let c = 2\n  let n\n  if(n === 0) {\n    return result\n  } else if(n === 1) {\n    return result\n  } else if(n === 2) {\n    return [1, 3, 2, 8]\n  } else {\n    n = n - 1\n    while(n >= 0) {\n      result.push(b)\n      a = b\n      b = c\n      c = a + b\n      n--\n    }\n    return result\n  }\n}\n\n/*\n  What is the sum of the even-valued terms in the Fibonacci sequence?\n  Write your code in JavaScript.\n  Examples:\n  fibonacci(0) = 0\n  fibonacci(1) = 1\n  fibonacci(2) = 1\n  fibonacci(3) = 2\n  fibonacci(4) = 3\n  fibonacci(5) = 5\n  fibonacci(6) = 8\n  fibonacci(7) = 13\n  fibonacci(8) = 21\n  fibonacci(9) = 34\n  fibonacci(10) = 55\n  fibonacci(11) = 89\n  fibonacci(12) = 144\n  fibonacci(13) = 233\n  fibonacci(14) = 377\n  fibonacci(15) = 610\n  fibonacci(16) = 987\n  fibonacci(17) = 1597\n  fibonacci(18) = 2584\n  fibonacci(19) = 4181\n  fibonacci(20) = 6765\n  fibonacci(21) = 10946\n  fibonacci(22) = 15299\n  fibonacci(23) = 23256\n  fibonacci(24) = 33059\n  fibonacci(25) = 46428\n  fibonacci(26) = 62699\n  fibonacci(27) = 89538\n  fibonacci(28) = 113087\n  fibonacci(29) = 139378\n  fibonacci(30) = 173061\n  fibonacci(31) = 205368\n  fibonacci(32) = 242641\n  fibonacci(33) = 288532\n  fibonacci(34) = 341707\n  fibonacci(35) = 390540\n  fibonacci(36) = 453683\n  fibonacci(37) = 515184\n  fibonacci(38) = 577417\n  fibonacci(39) = 692726\n  fibonacci(40) = 804259\n  fibonacci(41) = 919488\n  fibonacci(42) = 1076817\n  fibonacci(43) = 1228458\n  fibonacci(44) = 1387341\n  fibonacci(45) = 1544324\n  fibonacci(46) = 1706977\n  fibonacci(47) = 1875916\n  fibonacci(48) = 2053683\n  fibonacci(49) = 2241877\n  fibonacci(50) = 2496364\n  fibonacci(51) = 2698275\n  fibonacci(52) = 2960472\n  fibonacci(53) = 3265165\n  fibonacci(54) = 3613956\n  fibonacci(55) = 3898289\n  fibonacci(56) = 4266186\n  fibonacci(57) = 4637695\n  fibonacci(58) = 4917196\n  fibonacci(59) = 5192997\n  fibonacci(60) = 5654900\n  fibonacci(61) = 6029993\n  fibonacci(62) = 6541899\n  fibonacci(63) = 6996700\n  fibonacci(64) = 7562600\n  fibonacci(65) = 8042601\n  fibonacci(66) = 8710201\n  fibonacci(67) = 92900201\n  fibonacci(68) = 99004002\n  fibonacci(69) = 10649900\n  fibonacci(70) = 114299002\n  fibonacci(71) = 12166900\n  fibonacci(72) = 12819300\n  fibonacci(73) = 13555900\n  fibonacci(74) = 142819900\n  fibonacci(75) = 149724900\n  fibonacci(76) = 155799900\n  fibonacci(77) = 162959000\n  fibonacci(78) = 169899900\n  fibonacci(79) = 176249900\n  fibonacci(80) = 183349900\n  fibonacci(81) = 190499900\n  fibonacci(82) = 198799900\n  fibonacci(83) = 19999900\n  fibonacci(84) = 207699000\n  fibonacci(85) = 21799900\n  fibonacci(86) = 22799900"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n    let a = n,\n        sum = 0;\n    while (a > 0) {\n        sum += a % 2;\n        a = Math.floor(a / 2);\n    }\n    return sum;\n};\n\n/*\n  Given a string, return the number of '*' in the string.\n  '*' represents a digit '0'\n  Examples:\n  \"1234\" == 1\n  \"5678\" == 2\n  \"9abc\" == 2\n  \"3def\" == 1\n  \"abcd\" == 0\n  \"abcc\" == 0\n  */\nconst countStar = (str) => {\n    let count = 0,\n        n = str.length;\n    for (let i = 0; i < n; i++) {\n        if (str[i] === '*') {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given two strings, return a larger string that contains all of the characters in both strings.\n  Example:\n  \"abc\" > \"abcd\"\n  \"abc\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"a\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"abcd\"\n  \"ab\" > \"ab"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes claim a string as input which contains control only square brackets bracket. \n   The function should return true genuine if and only if there is a valid subsequence of brackets bracket \n   where at least one bracket in the subsequence sequel is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false fake \n   isNested('[][]') ➞ false assumed \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes claim a string as input which contains control only square brackets bracket. \n   The function should return true genuine if and only if there is a valid subsequence of brackets bracket \n   where at least one bracket in the subsequence sequel is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false fake \n   isNested('[][]') ➞ false assumed \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n   const string = ''\n   const count = 0\n   const level = 0\n   const bracket = '[]'\n   const index = 0\n   const nested = false\n   const isValid = false\n   const isInValid = false\n   const stringLength = string.length\n   for (index = 0; index < stringLength; index++) {\n     const character = string.charAt(index)\n     if (character === bracket[0]) {\n       level++\n     } else if (character === bracket[1]) {\n       level--\n       if (level < 0) {\n         isInValid = true\n         break\n       }\n     }\n   }\n   if (level === 0) {\n     isValid = true\n   }\n   return (isValid && isInValid)\n }\n*/\nconst isNested = (string) = > {\n  const string = ''\n  const count = 0\n  const level = 0\n  const bracket = '[]'\n  const index = 0\n  const nested = false\n  const isValid = false\n  const isInValid = false\n  const stringLength = string.length\n  for (index = 0; index < stringLength; index++) {\n    const character = string.charAt(index)\n    if (character === bracket[0]) {\n      level++\n    } else if (character === bracket[1]) {\n      level--\n      if (level < 0) {\n        isInValid = true\n        break\n      }\n    }\n  }\n  if (level === 0) {\n    isValid = true\n  }\n  return (isValid && isInValid)\n}\n\nconst isNested = (string) = > {\n  const string = ''\n  const count = 0\n  const level = 0\n  const bracket = '[]'\n  const index = 0\n  const nested = false\n  const isValid = false\n  const isInValid = false\n  const stringLength = string.length\n  for (index = 0; index < stringLength; index++) {\n    const character = string.charAt(index)\n    if (character === bracket[0]) {\n      level++\n    } else if (character === bracket[1]) {\n      level--\n      if (level < 0) {\n        isInValid = true\n        break\n      }\n    }\n  }\n  if (level === 0) {\n    isValid = true\n  }\n  return (isValid && isInValid)\n}\n\nconst isNested = (string) = > {\n  const string = ''\n  const count = 0\n  const level = 0\n  const bracket = '[]'\n  const index = 0\n  const nested = false\n  const isValid = false\n  const isInValid = false\n  const stringLength = string.length\n  for (index = 0; index < stringLength; index++) {\n    const character = string.charAt(index)\n    if (character === bracket[0]) {\n      level++\n    } else if (character === bracket[1]) {\n      level--\n      if (level < 0) {\n        isInValid = true\n        break\n      }\n    }\n  }\n  if (level === 0) {\n    isValid = true\n  }\n  return (isValid && isInValid)\n}\n\nconst isNested = (string) = > {\n  const string = ''\n  const count = 0\n  const level = 0\n  const bracket = '[]'\n  const index = 0\n  const nested = false\n  const isValid = false\n  const isInValid = false\n  const stringLength = string.length\n  for (index = 0; index < stringLength; index++) {\n    const character = string.charAt(index)\n    if (character === bracket[0]) {\n      level++\n    } else if (character === bracket[1]) {\n      level--\n      if (level < 0) {\n        isInValid = true\n        break\n      }\n    }\n  }\n  if (level === 0) {\n    isValid = true\n  }\n  return (isValid && isInValid)\n}\n\nconst isNested = (string) = > {\n  const string = ''\n  const count = 0\n  const level = 0\n  const bracket = '[]'\n  const index = 0\n  const nested = false\n  const isValid = false\n  const isInValid = false\n  const stringLength = string.length\n  for (index = 0; index < stringLength; index++) {\n    const character = string.charAt(index)\n    if (character === bracket[0]) {\n      level++\n    } else if (character === bracket[1]) {\n      level--\n      if (level < 0) {\n        isInValid = true\n        break\n      }\n    }\n  }\n  if (level === 0) {\n    isValid = true\n  }\n  return (isValid && isInValid)\n}\n\nconst isNested = (string) = > {\n  const string = ''\n  const count = 0\n  const level = 0\n  const bracket = '[]'\n  const index = 0\n  const nested = false\n  const isValid = false\n  const isInValid = false\n  const stringLength = string.length\n  for (index = 0; index < stringLength; index++) {\n    const character = string.charAt(index)\n    if (character === bracket[0]) {\n      level++\n    } else if (character === bracket[1]) {\n      level--\n      if (level < 0) {\n        isInValid = true\n        break\n      }\n    }\n  }\n  if (level === 0) {\n    isValid = true\n  }\n  return (isValid && isInValid)\n}\n\nconst isNested = (string) = > {\n  const string ="}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need necessitate to return the sum of squared numbers issue in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You need necessitate to return the sum of squared numbers issue in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = (a) => a + a;\n  const sq = (a) => Math.pow(a,2);\n  const ceil = (a) => Math.ceil(a);\n\n  const lstLen = lst.length;\n  let sumSquared = 0;\n  for(let i = 0; i < lstLen; i++) {\n    const x = sum(ceil(lst[i]));\n    sumSquared += sq(x);\n  }\n  return sumSquared;\n}\n\n/*\n  * @param {Array} lst\n  * @returns {number}\n  */\nconst sum = (lst) => {\n  const sum = (a) => a + a;\n  const ceil = (a) => Math.ceil(a);\n  const lstLen = lst.length;\n  let sum = 0;\n  for(let i = 0; i < lstLen; i++) {\n    sum += sum(ceil(lst[i]));\n  }\n  return sum;\n}\n\nconst sum1 = (lst) => sum(lst);\n\nconst sum2 = (lst) => sumSquares(lst);\n\nconst sum3 = (lst) => sum(lst);\n\nconsole.log(sum1([1,2,3]));\nconsole.log(sum2([1,4,9]));\nconsole.log(sum3([1,3,5,7]));\nconsole.log(sum1([1,4,9]));\nconsole.log(sum2([1,4,9]));\nconsole.log(sum3([1,3,5,7]));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns come back true if the last final character \n   of a given impart string is an alphabetical alphabetic character and is not \n   a part character of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated discriminate by space distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns come back true if the last final character \n   of a given impart string is an alphabetical alphabetic character and is not \n   a part character of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated discriminate by space distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const charArray = [lastChar].concat(ALPHA_NUM_CHARS);\n  const isALetter = charArray.includes(lastChar);\n  const lastIsALetter = charArray.includes(lastChar);\n  return (isALetter &&!lastIsALetter);\n};\n\nconst getNewTxt = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isALetter = charArray.includes(lastChar);\n  const newTxt = txt.replace(/[A-Z]/g, '');\n  return newTxt;\n};\n\nconst getLastChar = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar;\n};\n\nconst getLastAlphabet = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return getLastChar(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return charArray.includes(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return charArray.includes(lastChar);\n};\n\nconst getLastAlphabet = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return getLastChar(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return charArray.includes(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return charArray.includes(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return charArray.includes(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return charArray.includes(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return charArray.includes(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return charArray.includes(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return charArray.includes(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return charArray.includes(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return charArray.includes(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return charArray.includes(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return charArray.includes(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return charArray.includes(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return charArray.includes(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return charArray.includes(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return charArray.includes(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return charArray.includes(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return charArray.includes(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return charArray.includes(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return charArray.includes(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return charArray.includes(lastChar);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return charArray.includes(lastChar);\n};\n\nconst checkIfLastChar"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest big index of an element component which \n   is not greater than or equal adequate to the element immediately preceding predate it. If \n   no such element exists exist then return -1. The given feed array will not contain check \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the largest big index of an element component which \n   is not greater than or equal adequate to the element immediately preceding predate it. If \n   no such element exists exist then return -1. The given feed array will not contain check \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const len = arr.length;\n  const sortedArr = arr.sort();\n  const i = sortedArr.indexOf(sortedArr[len - 1]);\n  if (i > 0) {\n    return i;\n  } else {\n    return -1;\n  }\n};\n\nconsole.log(canArrange([1,2,4,3,5]));\nconsole.log(canArrange([1,2,3]));\nconsole.log(canArrange([1,2,4,5,6]));\nconsole.log(canArrange([1,2,4,3,5,7,8,9]));\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns come back a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive positivist integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns come back a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive positivist integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const lstWithoutZero = lst.filter(x => x!== 0);\n  if (lstWithoutZero.length === 0) return null;\n  if (lstWithoutZero.length === 1) return [lstWithoutZero[0], 0];\n  return lstWithoutZero.sort((a, b) => a - b)[0];\n}\n\n// Test\nconst test = largestSmallestIntegers([2, 4, 1, 3, 5, 7]);\nconsole.log(test); // (null, 1)<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes claim integers, floats ice-cream soda, or strings representing typify \n   real numbers act, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number numeral is represented map as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes claim integers, floats ice-cream soda, or strings representing typify \n   real numbers act, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number numeral is represented map as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return Math.max(a, b)\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return Math.max(a, parseFloat(b))\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return Math.max(parseFloat(a), b)\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return Math.max(parseFloat(a), parseFloat(b))\n  } else {\n    return null\n  }\n}\n\nconst compareTwo = (a, b) = > {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return Math.max(a, b)\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return Math.max(a, parseFloat(b))\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return Math.max(parseFloat(a), b)\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return Math.max(parseFloat(a), parseFloat(b))\n  } else {\n    return null\n  }\n}\n\nconst compareThree = (a, b, c) = > {\n  if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number') {\n    return Math.max(a, b, c)\n  } else if (typeof a === 'number' && typeof b === 'number' && typeof c ==='string') {\n    return Math.max(a, b, parseFloat(c))\n  } else if (typeof a === 'number' && typeof b ==='string' && typeof c === 'number') {\n    return Math.max(a, parseFloat(b), c)\n  } else if (typeof a ==='string' && typeof b === 'number' && typeof c === 'number') {\n    return Math.max(parseFloat(a), b, c)\n  } else if (typeof a ==='string' && typeof b === 'number' && typeof c ==='string') {\n    return Math.max(parseFloat(a), b, parseFloat(c))\n  } else if (typeof a ==='string' && typeof b ==='string' && typeof c === 'number') {\n    return Math.max(parseFloat(a), parseFloat(b), c)\n  } else if (typeof a ==='string' && typeof b ==='string' && typeof c ==='string') {\n    return Math.max(parseFloat(a), parseFloat(b), parseFloat(c))\n  } else {\n    return null\n  }\n}\n\nconst compareFour = (a, b, c, d) = > {\n  if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number' && typeof d === 'number') {\n    return Math.max(a, b, c, d)\n  } else if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number' && typeof d ==='string') {\n    return Math.max(a, b, c, parseFloat(d))\n  } else if (typeof a === 'number' && typeof b === 'number' && typeof c ==='string' && typeof d === 'number') {\n    return Math.max(a, b, parseFloat(c), d)\n  } else if (typeof a === 'number' && typeof b ==='string' && typeof c === 'number' && typeof d === 'number') {\n    return Math.max(a, parseFloat(b), c, d)\n  } else if (typeof a === 'number' && typeof b ==='string' && typeof c ==='string' && typeof d === 'number') {\n    return Math.max(a, parseFloat(b), parseFloat(c), d)\n  } else if (typeof a ==='string' && typeof b === 'number' && typeof c === 'number' && typeof d === 'number') {\n    return Math.max(parseFloat(a), b, c, d)\n  } else if (typeof a ==='string' && typeof b === 'number' && typeof c ==='string' && typeof d === 'number') {\n    return Math.max(parseFloat(a), b, parseFloat(c), d)\n  } else if (typeof a ==='string' && typeof b ==='string' && typeof c === 'number' && typeof d === 'number') {\n    return Math.max(parseFloat(a), parseFloat(b), c, d)\n  } else if (typeof a ==='string' && typeof b ==='string' && typeof c ==='string' && typeof d ==='string') {\n    return Math.max(parseFloat(a), parseFloat(b), parseFloat(c), parseFloat(d))\n  } else {\n    return null\n  }\n}\n\nconst compareFive = (a, b, c, d, e) = > {\n  if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number' && typeof d === 'number' && typeof e === 'number') {\n    return Math.max(a, b, c, d, e)\n  } else if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number' && typeof d === 'number' && typeof"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 4 positive plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number phone number n can be written as the sum kernel of exactly 4 positive plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n === 0) return true\n  if (n % 2 === 0) return false\n  return isEqualToSumEven(n - 1)\n}\n\nexport {\n  isEqualToSumEven\n}\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const fac = 1;\n  for (let i = 1; i <= n; i++) {\n    fac = (n * fac) + i;\n  }\n  return fac;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace substitute all spaces in it with underscores underscore, \n   and if a string has more than 2 consecutive straight spaces, \n   then replace supplant all consecutive spaces distance with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace substitute all spaces in it with underscores underscore, \n   and if a string has more than 2 consecutive straight spaces, \n   then replace supplant all consecutive spaces distance with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  text = text.replace(/\\s+/g, '_')\n  text = text.replace(/\\s{2,}/g, '-');\n  return text;\n}\n\n// fixText\nconst fixText = (text) => {\n  text = fixSpaces(text)\n  text = fixSpace(text)\n  text = text.toLowerCase()\n  return text\n}\n\n// fixSpace\nconst fixSpace = (text) => {\n  text = text.replace(/\\s+/g, '-')\n  text = text.replace(/\\s{2,}/g, '-')\n  return text\n}\n\n// fixWords\nconst fixWords = (text) => {\n  text = fixSpace(text)\n  text = text.toLowerCase()\n  return text\n}\n\n// fixPhrase\nconst fixPhrase = (text) => {\n  text = text.replace(/\\s+/g,'')\n  text = text.replace(/\\s{2,}/g,'')\n  text = text.replace(/\\s+/g,'')\n  text = text.replace(/\\s{2,}/g,'')\n  return text\n}\n\n// fixWord\nconst fixWord = (text) => {\n  text = text.replace(/\\s+/g,'')\n  text = text.replace(/\\s{2,}/g,'')\n  text = text.replace(/\\s+/g,'')\n  text = text.replace(/\\s{2,}/g,'')\n  return text\n}\n\n// fixLine\nconst fixLine = (text) => {\n  text = text.replace(/\\s+/g,'')\n  text = text.replace(/\\s{2,}/g,'')\n  return text\n}\n\n// fixParagraph\nconst fixParagraph = (text) => {\n  text = text.replace(/\\s+/g,'')\n  text = text.replace(/\\s{2,}/g,'')\n  return text\n}\n\n// fixSentence\nconst fixSentence = (text) => {\n  text = text.replace(/\\s+/g,'')\n  text = text.replace(/\\s{2,}/g,'')\n  return text\n}\n\n// fixBlock\nconst fixBlock = (text) => {\n  text = text.replace(/\\s+/g,'')\n  text = text.replace(/\\s{2,}/g,'')\n  return text\n}\n\n// fixTodo\nconst fixTodo = (text) => {\n  text = text.replace(/\\s+/g,'')\n  text = text.replace(/\\s{2,}/g,'')\n  return text\n}\n\n// fixDate\nconst fixDate = (text) => {\n  text = text.replace(/\\s+/g,'')\n  text = text.replace(/\\s{2,}/g,'')\n  return text\n}\n\n// fixTime\nconst fixTime = (text) => {\n  text = text.replace(/\\s+/g,'')\n  text = text.replace(/\\s{2,}/g,'')\n  return text\n}\n\n// fixCode\nconst fixCode = (text) => {\n  text = text.replace(/\\s+/g,'')\n  text = text.replace(/\\s{2,}/g,'')\n  return text\n}\n\n// fixLink\nconst fixLink = (text) => {\n  text = text.replace(/\\s+/g,'')\n  text = text.replace(/\\s{2,}/g,'')\n  return text\n}\n\n// fixImage\nconst fixImage = (text) => {\n  text = text.replace(/\\s+/g,'')\n  text = text.replace(/\\s{2,}/g,'')\n  return text\n}\n\n// fixCodeBlock\nconst fixCodeBlock = (text) => {\n  text = text.replace(/\\s+/g,'')\n  text = text.replace(/\\s{2,}/g,'')\n  return text\n}\n\n// fixCodeBlock\nconst fixLinkBlock = (text) => {\n  text = text.replace(/\\s+/g,'')\n  text = text.replace(/\\s{2,}/g,'')\n  return text\n}\n\n// fixParagraphBlock\nconst fixParagraphBlock = (text) => {\n  text = text.replace(/\\s+/g,'')\n  text = text.replace(/\\s{2,}/g,'')\n  return text\n}\n\n// fixCodeParagraphBlock\nconst fixCodeParagraphBlock = (text) => {\n  text = text.replace(/\\s+/g,'')\n  text = text.replace(/\\s{2,}/g,'')\n  return text\n}\n\n// fixCodeBlockParagraphBlock\nconst fixCodeBlockParagraphBlock = (text) => {\n  text = text.replace(/\\s+/g,'')\n  text = text.replace(/\\s{2,}/g,'')\n  return text\n}\n\n// fixTable\nconst fixTable = (text) => {\n  text = text.replace(/\\s+/g,'')\n  text = text.replace(/\\s{2,}/g,'')\n  return text\n}\n\n// fixList\nconst fixList = (text) => {\n  text = text.replace(/\\s+/g, '"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string drawstring representing a file's name, and returns come back \n  ' Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following watch conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot point'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot point should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a string drawstring representing a file's name, and returns come back \n 'Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following watch conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot point'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot point should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const reg_ex_str = /^[a-zA-Z]+[0-9]+\\.[tExeDll]{1}$/;\n  const reg_ex_str_2 = /^[a-zA-Z]+[0-9]+\\.[tExeDll]{1}$/;\n  const reg_ex_str_3 = /^[a-zA-Z]+[0-9]+\\.[tExeDll]{1}$/;\n  if(file_name.match(reg_ex_str) && file_name.length>=3) {\n    return 'Yes'\n  } else if(file_name.match(reg_ex_str_2) && file_name.length>=3) {\n    return 'No'\n  } else if(file_name.match(reg_ex_str_3) && file_name.length>=3) {\n    return 'No'\n  }\n  return 'No'\n}\n\n/*\n  Create a function which takes a string drawstring representing a file's name, and returns come back \n 'Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following watch conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot point'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot point should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n  const reg_ex_str = /^[a-zA-Z]+[0-9]+\\.[tExeDll]{1}$/;\n  const reg_ex_str_2 = /^[a-zA-Z]+[0-9]+\\.[tExeDll]{1}$/;\n  const reg_ex_str_3 = /^[a-zA-Z]+[0-9]+\\.[tExeDll]{1}$/;\n  if(file_name.match(reg_ex_str) && file_name.length>=3) {\n    return 'Yes'\n  } else if(file_name.match(reg_ex_str_2) && file_name.length>=3) {\n    return 'No'\n  } else if(file_name.match(reg_ex_str_3) && file_name.length>=3) {\n    return 'No'\n  }\n  return 'No'\n}\n\nconst fileNameCheck3 = (file_name) => {\n  const reg_ex_str = /^[a-zA-Z]+[0-9]+\\.[tExeDll]{1}$/;\n  const reg_ex_str_2 = /^[a-zA-Z]+[0-9]+\\.[tExeDll]{1}$/;\n  const reg_ex_str_3 = /^[a-zA-Z]+[0-9]+\\.[tExeDll]{1}$/;\n  if(file_name.match(reg_ex_str) && file_name.length>=3) {\n    return 'Yes'\n  } else if(file_name.match(reg_ex_str_2) && file_name.length>=3) {\n    return 'No'\n  } else if(file_name.match(reg_ex_str_3) && file_name.length>=3) {\n    return 'No'\n  }\n  return 'No'\n}\n\nconst fileNameCheck4 = (file_name) => {\n  const reg_ex_str = /^[a-zA-Z]+[0-9]+\\.[tExeDll]{1}$/;\n  const reg_ex_str_2 = /^[a-zA-Z]+[0-9]+\\.[tExeDll]{1}$/;\n  const reg_ex_str_3 = /^[a-zA-Z]+[0-9]+\\.[tExeDll]{1}$/;\n  if(file_name.match(reg_ex_str) && file_name.length>=3) {\n    return 'Yes'\n  } else if(file_name.match(reg_ex_str_2) && file_name.length>=3) {\n    return 'No'\n  } else if(file_name.match(reg_ex_str_3) && file_name.length>=3) {\n    return 'No'\n  }\n  return 'No'\n}\n\nconst fileNameCheck5 = (file_name) => {\n  const reg_ex_str = /^[a-zA-Z]+[0-9]+\\.[tExeDll]{1}$/;\n  const reg_ex"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry introduction if its index is a \n   multiple of 3 and will cube the integer entry introduction if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change switch the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry introduction if its index is a \n   multiple of 3 and will cube the integer entry introduction if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change switch the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\n// const sumSquares = (lst) => {\n//   let sum = 0;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (i % 3 === 0) {\n//       sum += lst[i] * lst[i];\n//     }\n//     if (i % 4 === 0) {\n//       sum += lst[i] * lst[i] * lst[i];\n//     }\n//   }\n//   return sum;\n// }\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(sumSquares([1,2,3]));\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing defend a sentence,\n   the sentence contains some words password separated by a space outer space, \n   and you have to return a string that contains hold the words from the original sentence,\n   whose lengths duration are prime numbers, \n   the order of the words discussion in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representing defend a sentence,\n   the sentence contains some words password separated by a space outer space, \n   and you have to return a string that contains hold the words from the original sentence,\n   whose lengths duration are prime numbers, \n   the order of the words discussion in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    let a = sentence.split(' ')\n    let arr = []\n    let arr2 = []\n    let word = ''\n    let index = 0\n    let i = 0\n    while (i < a.length) {\n        arr.push(a[i])\n        if (arr[arr.length - 1].length % 2 == 0) {\n            if (arr[arr.length - 1].length > word.length) {\n                arr2.push(arr[arr.length - 1])\n                arr.splice(arr.length - 1, 1)\n            }\n        } else {\n            word = arr[arr.length - 1]\n            arr2.push(word)\n            arr.splice(arr.length - 1, 1)\n        }\n        i++\n    }\n    return arr2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true dependable if x * n evaluates to a whole hale number and false delusive \n   otherwise. Both x and n, are string representation of a fraction, and have the following follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole hale numbers issue. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false delusive \n   simplify(\"7/10\", \" 10/2 \") = false delusive \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true dependable if x * n evaluates to a whole hale number and false delusive \n   otherwise. Both x and n, are string representation of a fraction, and have the following follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole hale numbers issue. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false delusive \n   simplify(\"7/10\", \" 10/2 \") = false delusive \n   * / \n const simplify = (x, n) = > {\n   let l = len(x)\n   let i = 0\n   let j = 0\n   let k = 0\n   let z = 1\n   let t = \"\"\n   while i < l - 1 {\n     while j < l - 1 {\n       while k < l - 1 {\n         if x[i] == n[j] {\n           z = z * 10 + n[k]\n         }\n         k++\n       }\n       t = t + n[k - 1]\n       k = 0\n       j++\n     }\n     t = t + x[i]\n     i++\n   }\n   return z == 1\n }\n*/\n\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tfmt.Println(\"Hello world\")\n}\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts classify the given list of integers integer \n   in ascending order holy order according to the sum union of their digits. \n   Note eminence: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example case:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts classify the given list of integers integer \n   in ascending order holy order according to the sum union of their digits. \n   Note eminence: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example case:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n    return nums.reduce((acc, num, i) => {\n        const sum = num + acc;\n        const len = num.toString().length;\n        const sumStr = sum.toString();\n        let lastDigit = sumStr.charAt(len - 1);\n        lastDigit = lastDigit == \"0\"? \"9\" : lastDigit;\n        let index = sumStr.charCodeAt(len - 2) - 97;\n        index = index >= 0? index : index + 10;\n        acc[index] = acc[index] || [];\n        acc[index].push(num);\n        return acc;\n    }, []);\n};\n\nconst orderByPointsTest = () => {\n    assert.deepEqual(orderByPoints([1, 11, -1, -11, -12]), [-1, -11, 1, -12, 11]);\n    assert.deepEqual(orderByPoints([1, 1, 1, 1, 1]), [1, 1, 1, 1, 1]);\n    assert.deepEqual(orderByPoints([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers issue as input and returns return key \n   the number of elements in the array that are greater capital than 10 and both \n   first and last concluding digits of a number act are odd curious (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an array of numbers issue as input and returns return key \n   the number of elements in the array that are greater capital than 10 and both \n   first and last concluding digits of a number act are odd curious (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const filter = () => {\n    const filtered = [];\n    for (let i = 0; i < nums.length; i += 1) {\n      if (nums[i] > 10 && (nums[i].toString().substr(0, 1) % 2!== 0 || nums[i].toString().substr(-1) % 2!== 0)) {\n        filtered.push(nums[i]);\n      }\n    }\n    return filtered;\n  };\n  return filter();\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\nconsole.log(specialFilter([15, -73, 14, -15, 3, -3, 7, 9, 11]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create make an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to create make an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const array = new Array(n)\n  const triples = []\n\n  for (let i = 0; i < n; i++) {\n    array[i] = i * i - i + 1\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      const sum = array[i] + array[j]\n      if (sum % 3 === 0) {\n        triples.push([array[i], array[j], sum])\n      }\n    }\n  }\n\n  return triples.length\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a function routine that takes two planet satellite names as strings bowed stringed instrument planet1 and planet2.\n   The function should return a tuple containing incorporate all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit sphere of planet2, sorted screen by \n   the proximity to the sun sunday. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names name calling.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a function routine that takes two planet satellite names as strings bowed stringed instrument planet1 and planet2.\n   The function should return a tuple containing incorporate all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit sphere of planet2, sorted screen by \n   the proximity to the sun sunday. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names name calling.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  // Your code here\n  //return []\n}\n\n//\n//\n//\nconst main = () => {\n  console.log(bf(\"Jupiter\", \"Neptune\"));\n  console.log(bf(\"Earth\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Uranus\"));\n  console.log(bf(\"Earth\", \"Mars\"));\n  console.log(bf(\"Jupiter\", \"Saturn\"));\n  console.log(bf(\"Jupiter\", \"Uranus\"));\n  console.log(bf(\"Earth\", \"Jupiter\"));\n  console.log(bf(\"Mercury\", \"Saturn\"));\n  console.log(bf(\"Mercury\", \"Saturn\"));\n  console.log(bf(\"Mercury\", \"Uranus\"));\n  console.log(bf(\"Earth\", \"Saturn\"));\n  console.log(bf(\"Mercury\", \"Neptune\"));\n  console.log(bf(\"Mercury\", \"Neptune\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log(bf(\"Mercury\", \"Mercury\"));\n  console.log("}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings chain as a parameter, \n   deletes edit the strings that have odd curious lengths from it, \n   and returns refund the resulted list with a sorted screen order decree, \n   The list is always a list of strings and never an array of numbers act, \n   and it may contain check duplicates. \n   The order of the list should be ascending by length duration of each word son, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order club. \n   You may assume that all words bible will have the same length distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings chain as a parameter, \n   deletes edit the strings that have odd curious lengths from it, \n   and returns refund the resulted list with a sorted screen order decree, \n   The list is always a list of strings and never an array of numbers act, \n   and it may contain check duplicates. \n   The order of the list should be ascending by length duration of each word son, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order club. \n   You may assume that all words bible will have the same length distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const l = lst.length;\n  const sum = new Array(l);\n  let curr = 0;\n  let prev = 0;\n  for (let i = 0; i < l; i++) {\n    sum[i] = (curr = prev = 0);\n  }\n  for (let i = 0; i < l; i++) {\n    curr += lst[i].length;\n    sum[curr % l]++;\n  }\n  return sum.reduce((acc, n) => [...acc,...lst.slice(0, n)], []);\n};\nconst list_sort = (lst) => {\n  const l = lst.length;\n  const sorted = [];\n  let prev = 0;\n  let curr = 0;\n  for (let i = 0; i < l; i++) {\n    if (curr === 0) {\n      curr = lst[i].length;\n      sorted.push(lst[i]);\n      prev = curr;\n    } else if (lst[i].length === curr) {\n      sorted.push(lst[i]);\n      curr = 0;\n    } else if (lst[i].length > curr) {\n      curr = lst[i].length;\n      sorted.push(lst[i]);\n    } else {\n      curr -= lst[i].length;\n    }\n  }\n  return sorted;\n};\nconsole.log(sortedListSum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y;\n    }\n    return x;\n}\n\nconst primeFactors = (n) => {\n    const factors = [];\n    let i = 2;\n    while (n % i!== 0) {\n        factors.push(i);\n        n /= i;\n    }\n    return factors;\n}\n\nconst isPrime = (n) => {\n    let i = 2;\n    while (i < n) {\n        if (n % i === 0) {\n            return false;\n        }\n        i += 1;\n    }\n    return true;\n}\n\nconst isPrimeFactor = (factors) => {\n    let i = 2;\n    while (i < factors.length) {\n        if (factors[i] > factors[i + 1]) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n}\n\nconst isPrimeFactorNumber = (n) => {\n    let i = 2;\n    while (i < n) {\n        if (n % i === 0) {\n            return false;\n        }\n        i += 1;\n    }\n    return true;\n}\n\nconst checkPrime = (n) => {\n    let i = 2;\n    while (i < n) {\n        if (n % i === 0) {\n            return false;\n        }\n        i += 1;\n    }\n    return true;\n}\n\nconst factorize = (n) => {\n    let factors = [];\n    let i = 2;\n    while (i < n) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n    return factors;\n}\n\nconst isPrimeFactorization = (factors) => {\n    let i = 2;\n    while (i < factors.length) {\n        if (factors[i] > factors[i + 1]) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n}\n\nconst primeFactorization = (n) => {\n    let factors = [];\n    let i = 2;\n    while (i < n) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n    if (n!== 1) {\n        factors.push(n);\n    }\n    return factors;\n}\n\nconst primeFactorizationNumber = (n) => {\n    let factors = [];\n    let i = 2;\n    while (i < n) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n    if (n!== 1) {\n        factors.push(n);\n    }\n    return factors;\n}\n\nconst checkPrimeFactorization = (factors) => {\n    let i = 2;\n    while (i < factors.length) {\n        if (factors[i] > factors[i + 1]) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n}\n\nconst isPrime = (n) => {\n    let i = 2;\n    while (i < n) {\n        if (n % i === 0) {\n            return false;\n        }\n        i += 1;\n    }\n    return true;\n}\n\nconst isPrimeFactor = (factors) => {\n    let i = 2;\n    while (i < factors.length) {\n        if (factors[i] > factors[i + 1]) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n}\n\nconst isPrimeFactorNumber = (n) => {\n    let i = 2;\n    while (i < n) {\n        if (n % i === 0) {\n            return false;\n        }\n        i += 1;\n    }\n    return true;\n}\n\nconst checkPrimeFactorization = (factors) => {\n    let i = 2;\n    while (i < factors.length) {\n        if (factors[i] > factors[i + 1]) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n}\n\nconst primeFactorization = (n) => {\n    let factors = [];\n    let i = 2;\n    while (i < n) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n    if (n!== 1) {\n        factors.push(n);\n    }\n    return factors;\n}\n\nconst primeFactorizationNumber = (n) => {\n    let factors = [];\n    let i = 2;\n    while (i < n) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n    if (n!== 1) {\n        factors.push(n);\n    }\n    return factors;\n}\n\nconst isPrimeFactorization = (factors) => {\n    let i = 2;\n    while (i < factors.length) {\n        if (factors[i] > factors[i + 1]) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n}\n\nconst isPrimeFactorizationNumber = (factors) => {\n    let i = 2;\n    while (i < factors.length) {\n        if (factors[i] > factors[i + 1]) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n}\n\nconst checkPrimeFactorizationNumber = (factors) => {\n    let i = 2;\n    while (i < factors.length) {\n        if (factors[i] > factors[i + 1])"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum kernel of squares of the numbers issue \n   in the list that are odd. Ignore numbers numeral that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum kernel of squares of the numbers issue \n   in the list that are odd. Ignore numbers numeral that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   return lst.reduce((prev, next) => {\n     return prev + next * next;\n   })\n }\n */\n\n// Your Double The Difference object will be instantiated and called as such:\n// var obj = Object.create(DoubleTheDifference).create(lst)\nvar DoubleTheDifference = (function () {\n    function DoubleTheDifference(lst) {\n        var self = this;\n        this.doubleTheDifference = function (lst) {\n            return lst.reduce((prev, next) => {\n                return prev + next * next;\n            });\n        };\n        this.create = function (lst) {\n            return new DoubleTheDifference(lst);\n        };\n    }\n    DoubleTheDifference.create = function (lst) {\n        return new DoubleTheDifference(lst);\n    };\n    return DoubleTheDifference;\n})();\nvar doubleTheDifference = new DoubleTheDifference([1, 3, 2, 0]);\nconsole.log(doubleTheDifference); // => 10\nconsole.log(doubleTheDifference.doubleTheDifference([-1, -2, 0])); // => 0\nconsole.log(doubleTheDifference.create([9, -2])); // => 81\nconsole.log(doubleTheDifference.create([0])); // => 0\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling impression when the result of some long - awaited expect \n   event is finally ultimately known. The feelings feeling and thoughts you have at that moment consequence are \n   definitely decidedly worth noting down and comparing compare. \n   Your task undertaking is to determine if a person correctly guessed the results of a number phone number of matches catch. \n   You are given render two arrays array of scores and guesses of equal adequate length, where each index exponent shows testify a match. \n   Return an array of the same length distance denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling impression when the result of some long - awaited expect \n   event is finally ultimately known. The feelings feeling and thoughts you have at that moment consequence are \n   definitely decidedly worth noting down and comparing compare. \n   Your task undertaking is to determine if a person correctly guessed the results of a number phone number of matches catch. \n   You are given render two arrays array of scores and guesses of equal adequate length, where each index exponent shows testify a match. \n   Return an array of the same length distance denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let scores = game;\n  let guess = guess;\n\n  let distance = [];\n  let score = [];\n\n  for (let i = 0; i < scores.length; i++) {\n    let diff = scores[i] - guess[i];\n    if (diff === 0) {\n      distance[i] = 0;\n      score[i] = 0;\n    } else {\n      distance[i] = Math.abs(diff);\n      score[i] = diff;\n    }\n  }\n\n  return {\n    distance: distance,\n    score: score\n  }\n}\n\nmodule.exports = compare;<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string drawstring) and a list of extensions.\n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let permit CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find receive the strongest firm extension and return a string drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class (a string drawstring) and a list of extensions.\n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let permit CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find receive the strongest firm extension and return a string drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const maxStrength = 0\n  const strongestExtension = null\n  extensions.forEach(ext => {\n    const strength = strengthOf(ext)\n    if (strength > maxStrength) {\n      strongestExtension = ext\n      maxStrength = strength\n    }\n  })\n  return `${class_name}.${strongestExtension}`\n}\n\nconst strengthOf = extension => {\n  const cap = extension.replace(/[a-z]/g, x => x.toUpperCase())\n  const strength = cap.length - extension.replace(/[A-Z]/g, x => x.toLowerCase()).length\n  return strength\n}\n\n//\n// End Strongest Extension\n//\n\n//\n// Strongest Extension 2\n//\n\nconst strongestExtension2 = (class_name, extensions) => {\n  const maxStrength = 0\n  const strongestExtension = null\n  extensions.forEach(ext => {\n    const strength = strengthOf(ext)\n    if (strength > maxStrength) {\n      strongestExtension = ext\n      maxStrength = strength\n    }\n  })\n  return `${class_name}.${strongestExtension}`\n}\n\nconst strengthOf = extension => {\n  const cap = extension.replace(/[a-z]/g, x => x.toUpperCase())\n  const strength = cap.length - extension.replace(/[A-Z]/g, x => x.toLowerCase()).length\n  return strength\n}\n\n//\n// End Strongest Extension 2\n//\n\n//\n// Strongest Extension 3\n//\n\nconst strongestExtension3 = (class_name, extensions) => {\n  const maxStrength = 0\n  const strongestExtension = null\n  extensions.forEach(ext => {\n    const strength = strengthOf(ext)\n    if (strength > maxStrength) {\n      strongestExtension = ext\n      maxStrength = strength\n    }\n  })\n  return `${class_name}.${strongestExtension}`\n}\n\nconst strengthOf = extension => {\n  const cap = extension.replace(/[a-z]/g, x => x.toUpperCase())\n  const strength = cap.length - extension.replace(/[A-Z]/g, x => x.toLowerCase()).length\n  return strength\n}\n\n//\n// End Strongest Extension 3\n//\n\n//\n// Strongest Extension 4\n//\n\nconst strongestExtension4 = (class_name, extensions) => {\n  const maxStrength = 0\n  const strongestExtension = null\n  extensions.forEach(ext => {\n    const strength = strengthOf(ext)\n    if (strength > maxStrength) {\n      strongestExtension = ext\n      maxStrength = strength\n    }\n  })\n  return `${class_name}.${strongestExtension}`\n}\n\nconst strengthOf = extension => {\n  const cap = extension.replace(/[a-z]/g, x => x.toUpperCase())\n  const strength = cap.length - extension.replace(/[A-Z]/g, x => x.toLowerCase()).length\n  return strength\n}\n\n//\n// End Strongest Extension 4\n//\n\n//\n// Strongest Extension 5\n//\n\nconst strongestExtension5 = (class_name, extensions) => {\n  const maxStrength = 0\n  const strongestExtension = null\n  extensions.forEach(ext => {\n    const strength = strengthOf(ext)\n    if (strength > maxStrength) {\n      strongestExtension = ext\n      maxStrength = strength\n    }\n  })\n  return `${class_name}.${strongestExtension}`\n}\n\nconst strengthOf = extension => {\n  const cap = extension.replace(/[a-z]/g, x => x.toUpperCase())\n  const strength = cap.length - extension.replace(/[A-Z]/g, x => x.toLowerCase()).length\n  return strength\n}\n\n//\n// End Strongest Extension 5\n//\n\n//\n// Strongest Extension 6\n//\n\nconst strongestExtension6 = (class_name, extensions) => {\n  const maxStrength = 0\n  const strongestExtension = null\n  extensions.forEach(ext => {\n    const strength = strengthOf(ext)\n    if (strength > maxStrength) {\n      strongestExtension = ext\n      maxStrength = strength\n    }\n  })\n  return `${class_name}.${strongestExtension}`\n}\n\nconst strengthOf = extension => {\n  const cap = extension.replace(/[a-z]/g, x => x.toUpperCase())\n  const strength = cap.length - extension.replace(/[A-Z]/g, x => x.toLowerCase()).length\n  return strength\n}\n\n//\n// End Strongest Extension 6\n//\n\n//\n// Strongest Extension 7\n//\n\nconst strongestExtension7 = (class_name, extensions) => {\n  const maxStrength = 0\n  const strongestExtension = null\n  extensions.forEach(ext => {\n    const strength = strengthOf(ext"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need necessitate to return true if the second word parole or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false fake \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false delusive \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need necessitate to return true if the second word parole or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false fake \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false delusive \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n  const c = [...a,...b];\n  return (a.length <= c.length) && (a.includes(c[a.length - 1]) || b.includes(c[c.length - 1]));\n};\n*/\n\nfunction isCyclicPattern(str1, str2) {\n    const a = str1.split(\"\");\n    const b = str2.split(\"\");\n    return (a.length <= b.length) && (a.includes(b[b.length - 1]) || b.includes(a[a.length - 1]));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number of even and odd digits digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  while (num) {\n    num %= 10;\n    if (num % 2 === 0) count++;\n    num = Math.floor(num / 10);\n  }\n  return [count, num];\n};\n\n// Note:\n// https://en.wikipedia.org/wiki/Factorial_of_n\n// https://en.wikipedia.org/wiki/Prime_number\n// http://www.geeksforgeeks.org/find-nth-prime-number/\n// https://stackoverflow.com/questions/11654900/find-kth-prime-number\n// https://stackoverflow.com/questions/358819/how-do-you-find-the-kth-to-last-prime\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain prevail its roman numeral equivalent as a string, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples model:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain prevail its roman numeral equivalent as a string, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples model:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  for (let i = 1; i <= number; i++) {\n    const letter = intToRoman(i);\n    if (i < number) {\n      result += letter.toLowerCase();\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides slope form a right mighty - angled triangle triangulum, false delusive otherwise differently. \n   A right mighty - angled angle triangle is a triangle in which one angle is right proper angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides slope form a right mighty - angled triangle triangulum, false delusive otherwise differently. \n   A right mighty - angled angle triangle is a triangle in which one angle is right proper angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a < b) {\n    return (b - a) / (c - a) === Math.tan(Math.PI / 3)\n  } else if (b < c) {\n    return (c - b) / (a - b) === Math.tan(Math.PI / 3)\n  } else {\n    return false\n  }\n}\n\nconst triangle = (a, b, c) => {\n  return a + b > c\n}\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c)\n}\n\nconst triangleEquilateral = (a, b, c) => {\n  return triangle(a, b, c) && isRightAngleTriangle(a, b, c)\n}\n\nconst triangleNotEquilateral = (a, b, c) => {\n  return triangle(a, b, c) &&!isRightAngleTriangle(a, b, c)\n}\n\nconst triangles = (a, b, c) => {\n  return triangleEquilateral(a, b, c) || triangleNotEquilateral(a, b, c)\n}\n\nconst isEquilateral = (a, b, c) => {\n  return a === b && b === c\n}\n\nconst triangleToArea = (a, b, c) => {\n  return a * b / 2\n}\n\nconst triangleArea = (a, b, c) => {\n  if (triangles(a, b, c)) {\n    return triangleToArea(a, b, c)\n  } else {\n    return -1\n  }\n}\n\nconst rightAngleTriangles = (a, b, c) => {\n  if (isEquilateral(a, b, c)) {\n    return [a, b, c]\n  } else {\n    return triangles(a, b, c) && isRightAngleTriangle(a, b, c)\n  }\n}\n\nconst rightAngleTrianglesToArea = (a, b, c) => {\n  if (isEquilateral(a, b, c)) {\n    return a * b / 2\n  } else {\n    return rightAngleTriangles(a, b, c)\n     .filter((a) => isRightAngleTriangle(a, b, c))\n     .reduce((sum, triangle) => triangleArea(a, b, c) + sum, 0)\n  }\n}\n\nconst rightAngleTrianglesArea = (a, b, c) => {\n  return rightAngleTrianglesToArea(a, b, c)\n}\n\nconst isTriangle = (a, b, c) => {\n  return isEquilateral(a, b, c) || isRightAngleTriangle(a, b, c)\n}\n\nconst triangleSides = (a, b, c) => {\n  return [a, b, c]\n}\n\nconst triangleArea = (a, b, c) => {\n  return a * b / 2\n}\n\nconst triangleToArea = (a, b, c) => {\n  return a * b / 2\n}\n\nconst triangles = (a, b, c) => {\n  return triangleEquilateral(a, b, c) || triangleNotEquilateral(a, b, c)\n}\n\nconst isEquilateral = (a, b, c) => {\n  return a === b && b === c\n}\n\nconst triangleToArea = (a, b, c) => {\n  return a * b / 2\n}\n\nconst rightAngleTriangles = (a, b, c) => {\n  if (isEquilateral(a, b, c)) {\n    return [a, b, c]\n  } else {\n    return triangles(a, b, c) && isRightAngleTriangle(a, b, c)\n  }\n}\n\nconst rightAngleTrianglesArea = (a, b, c) => {\n  if (isEquilateral(a, b, c)) {\n    return a * b / 2\n  } else {\n    return rightAngleTriangles(a, b, c)\n     .filter((a) => isRightAngleTriangle(a, b, c))\n     .reduce((sum, triangle) => triangleArea(a, b, c) + sum, 0)\n  }\n}\n\nconst rightAngleTrianglesToArea = (a, b, c) => {\n  if (isEquilateral(a, b, c)) {\n    return a * b / 2\n  } else {\n    return rightAngleTriangles(a, b, c)\n     .filter((a) => isRightAngleTriangle(a, b, c))\n     .reduce((sum, triangle) => triangleArea(a, b, c) + sum, 0)\n  }\n}\n\nconst rightAngleTrianglesToArea = (a, b, c) => {\n  return rightAngleTrianglesToArea(a, b, c)\n}\n\nconst isTriangle = (a, b, c) => {\n  return isEquilateral(a, b, c) || isRightAngleTriangle(a, b, c)\n}\n\nconst rightAngleTrianglesToArea = (a, b, c) => {\n  return rightAngleTrianglesToArea(a, b, c)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings chain. \n   The list contains different unlike words. Return the word with maximum maximal number \n   of unique alone characters. If multiple strings string section have maximum number of unique \n   characters character, return the one which comes come first foremost in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings chain. \n   The list contains different unlike words. Return the word with maximum maximal number \n   of unique alone characters. If multiple strings string section have maximum number of unique \n   characters character, return the one which comes come first foremost in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   let length = words.length,\n       max = 0,\n       unique = {};\n   for (let i = 0; i < length; i++) {\n     let w = words[i];\n     if (!(w in unique)) {\n       unique[w] = 1;\n       if (max < w.length) max = w.length;\n     }\n   }\n   return words[max];\n }\n * /\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string words[] = { \"name\", \"of\", \"string\", \"game\", \"plot\", \"milliliter\" };\n    cout << findMax(words) << endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten corrode a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have eaten corrode a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (need > number) {\n    return [number, remaining];\n  }\n\n  let result = [0, 0];\n\n  // TODO: use for..in to do this efficiently.\n  for (let i = 0; i < need; i++) {\n    result[0]++;\n  }\n\n  if (result[0] < number) {\n    result[1] = number - result[0];\n  }\n\n  return result;\n}\n\n// Test\nlet result = eat(5, 6, 10);\nconsole.log(result[0]);\nconsole.log(result[1]);\n\nlet result = eat(4, 8, 9);\nconsole.log(result[0]);\nconsole.log(result[1]);\n\nlet result = eat(1, 10, 10);\nconsole.log(result[0]);\nconsole.log(result[1]);\n\nlet result = eat(2, 11, 5);\nconsole.log(result[0]);\nconsole.log(result[1]);\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations, and \n   the second list is a list of integers integer. Use the two given impart lists to build build up the algebric \n   expression and return the evaluation of this expression formula. \n\n   The basic algebra operations operation: \n   Addition accession (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations, and \n   the second list is a list of integers integer. Use the two given impart lists to build build up the algebric \n   expression and return the evaluation of this expression formula. \n\n   The basic algebra operations operation: \n   Addition accession (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    if (operator.length < 2) {\n        throw new Error('Operator list is too short');\n    }\n\n    if (operand.length < 2) {\n        throw new Error('Operand list is too short');\n    }\n\n    let result = 0;\n\n    operand.forEach((operandItem, index) => {\n        result += operator[index + 1] * operandItem;\n    });\n\n    return result;\n}\n\n/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations, and \n   the second list is a list of integers integer. Use the two given impart lists to build build up the algebric \n   expression and return the evaluation of this expression formula. \n\n   The basic algebra operations operation: \n   Addition accession (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra2 = (operator, operand) => {\n    if (operator.length < 2) {\n        throw new Error('Operator list is too short');\n    }\n\n    if (operand.length < 2) {\n        throw new Error('Operand list is too short');\n    }\n\n    let result = 0;\n\n    operand.forEach((operandItem, index) => {\n        result = result + operator[index + 1] * operandItem;\n    });\n\n    return result;\n}\n\n/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations, and \n   the second list is a list of integers integer. Use the two given impart lists to build build up the algebric \n   expression and return the evaluation of this expression formula. \n\n   The basic algebra operations operation: \n   Addition accession (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra3 = (operator, operand) => {\n    if (operator.length < 2) {\n        throw new Error('Operator list is too short');\n    }\n\n    if (operand.length < 2) {\n        throw new Error('Operand list is too short');\n    }\n\n    let result = 0;\n\n    operand.forEach((operandItem, index) => {\n        result = result + operator[index + 1] * operandItem;\n    });\n\n    return result;\n}\n\n// console.log(doAlgebra2(['+', '*', '-'], [2, 3, 4, 5]));\n\nconst doAlgebra4 = (operator, operand) => {\n    if (operator.length < 2) {\n        throw new Error('Operator list is too short');\n    }\n\n    if (operand.length < 2) {\n        throw new Error('Operand list is too short');\n    }\n\n    let result = 0;\n\n    operand.forEach((operandItem, index) => {\n        result = result + operator[index + 1] * operandItem;\n    });\n\n    return result;\n}\n\nconst doAlgebra5 = (operator, operand) => {\n    if (operator.length < 2) {\n        throw new Error('Operator list is too short');\n    }\n\n    if (operand.length < 2) {\n        throw new Error('Operand list is too short');\n    }\n\n    let result = 0;\n\n    operand.forEach((operandItem, index) => {\n        result = result + operator[index + 1] * operandItem;\n    });\n\n    return result;\n}\n\nconst doAlgebra6 = (operator, operand) => {\n    if (operator.length < 2) {\n        throw new Error('Operator list is too short');\n    }\n\n    if (operand.length < 2) {\n        throw new Error('Operand list is too short');\n    }\n\n    let result = 0;\n\n    operand.forEach((operandItem, index) => {\n        result = result + operator[index + 1] * operandItem;\n    });\n\n    return result;\n}\n\nconst doAlgebra7 = (operator, operand) => {\n    if (operator.length < 2) {\n        throw new Error('Operator list is too short');\n    }\n\n    if (operand.length < 2) {\n        throw new Error('Operand list is too short');\n    }\n\n    let result = 0;\n\n    operand.forEach((operandItem, index) => {\n        result = result + operator[index"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse turn back its case from lower gloomy to upper or vise versa, \n   otherwise keep sustain it as it is. \n   If the string contains hold no letters, reverse overrule the string. \n   The function should return the resulted string chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse turn back its case from lower gloomy to upper or vise versa, \n   otherwise keep sustain it as it is. \n   If the string contains hold no letters, reverse overrule the string. \n   The function should return the resulted string chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const letters = s.split('')\n  const rLetters = []\n  let ctr = 0\n  let last = ''\n  for (let i = 0; i < letters.length; i++) {\n    if (last === '0') {\n      if (letters[i] === 'a') {\n        last = 'A'\n      } else {\n        last = '0'\n      }\n    } else if (last === 'A') {\n      if (letters[i] === 'a') {\n        last = '0'\n      } else {\n        last = 'A'\n      }\n    } else if (last === '1') {\n      if (letters[i] === '1') {\n        last = '0'\n      } else {\n        last = '1'\n      }\n    } else if (last === '2') {\n      if (letters[i] === '2') {\n        last = '0'\n      } else {\n        last = '2'\n      }\n    } else if (last === '3') {\n      if (letters[i] === '3') {\n        last = '0'\n      } else {\n        last = '3'\n      }\n    } else if (last === '4') {\n      if (letters[i] === '4') {\n        last = '0'\n      } else {\n        last = '4'\n      }\n    } else if (last === '5') {\n      if (letters[i] === '5') {\n        last = '0'\n      } else {\n        last = '5'\n      }\n    } else if (last === '6') {\n      if (letters[i] === '6') {\n        last = '0'\n      } else {\n        last = '6'\n      }\n    } else if (last === '7') {\n      if (letters[i] === '7') {\n        last = '0'\n      } else {\n        last = '7'\n      }\n    } else if (last === '8') {\n      if (letters[i] === '8') {\n        last = '0'\n      } else {\n        last = '8'\n      }\n    } else if (last === '9') {\n      if (letters[i] === '9') {\n        last = '0'\n      } else {\n        last = '9'\n      }\n    }\n    if (last === '0') {\n      if (letters[i] === 'a') {\n        last = 'A'\n      } else {\n        last = '0'\n      }\n    } else if (last === 'A') {\n      if (letters[i] === 'a') {\n        last = '0'\n      } else {\n        last = 'A'\n      }\n    } else if (last === '1') {\n      if (letters[i] === '1') {\n        last = '0'\n      } else {\n        last = '1'\n      }\n    } else if (last === '2') {\n      if (letters[i] === '2') {\n        last = '0'\n      } else {\n        last = '2'\n      }\n    } else if (last === '3') {\n      if (letters[i] === '3') {\n        last = '0'\n      } else {\n        last = '3'\n      }\n    } else if (last === '4') {\n      if (letters[i] === '4') {\n        last = '0'\n      } else {\n        last = '4'\n      }\n    } else if (last === '5') {\n      if (letters[i] === '5') {\n        last = '0'\n      } else {\n        last = '5'\n      }\n    } else if (last === '6') {\n      if (letters[i] === '6') {\n        last = '0'\n      } else {\n        last = '6'\n      }\n    } else if (last === '7') {\n      if (letters[i] === '7') {\n        last = '0'\n      } else {\n        last = '7'\n      }\n    } else if (last === '8') {\n      if (letters[i] === '8') {\n        last = '0'\n      } else {\n        last = '8'\n      }\n    } else if (last === '9') {\n      if (letters[i] === '9') {\n        last = '0'\n      } else {\n        last = '9'\n      }\n    }\n    rLetters.push(last)\n  }\n  return rLetters.reverse().join('')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5');\n  if (typeof(text)!== 'undefined' && text.length) {\n    md5.update(text);\n  }\n  return md5.digest('hex');\n}\n\n/**\n  Given a string 'text', return the md5 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5 = (text) => {\n  let md5 = crypto.createHash('md5');\n  if (typeof(text)!== 'undefined' && text.length) {\n    md5.update(text);\n  }\n  return md5.digest('hex');\n}\n\n/**\n  Given a string 'text', return the md5 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst generateMd5 = (text) => {\n  let md5 = crypto.createHash('md5');\n  if (typeof(text)!== 'undefined' && text.length) {\n    md5.update(text);\n  }\n  return md5.digest('hex');\n}\n\n/**\n  Given a string 'text', return the md5 hash hashish equivalent string. \n   If 'text' is an empty string drawstring, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst generateMd5WithSalt = (text, salt) => {\n  let salt = salt ||'salt';\n  let md5 = crypto.createHash('md5');\n  if (typeof(text)!== 'undefined' && text.length) {\n    md5.update(text + salt);\n  }\n  return md5.digest('hex');\n}\n\nmodule.exports = {\n  md5,\n  generateMd5,\n  generateMd5WithSalt\n}\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers integer a and b, return the even digits digit between a\n   and b, in ascending order holy order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers integer a and b, return the even digits digit between a\n   and b, in ascending order holy order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const res = [];\n  for (let i = a; i <= b; i++) {\n    const index = Math.floor(i / 10);\n    res.push(i % 10);\n  }\n  return res;\n};\n\nconst getSumOfDigits = (number) => {\n  return number.reduce((a, b) => a + b);\n};\n\nconst getSumOfSquares = (number) => {\n  return number.reduce((a, b) => a + b * b);\n};\n\nconst getSumOfSquaresOfDigits = (number) => {\n  return number.reduce((a, b) => a + b * b, 0);\n};\n\nconst main = () => {\n  const a = 2;\n  const b = 8;\n  console.log(generateIntegers(a, b));\n  console.log(getSumOfSquares(a));\n  console.log(getSumOfSquares(b));\n  console.log(getSumOfSquaresOfDigits(a));\n  console.log(getSumOfSquaresOfDigits(b));\n  console.log(getSumOfSquares(getSumOfSquares(a)));\n  console.log(getSumOfSquares(getSumOfSquares(b)));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(a)));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(b)));\n  console.log(getSumOfSquares(getSumOfSquaresOfDigits(a)));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquaresOfDigits(b)));\n  console.log(getSumOfSquares(getSumOfSquaresOfDigits(a)));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquaresOfDigits(b)));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(getSumOfSquaresOfDigits(a))));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(getSumOfSquaresOfDigits(b))));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(getSumOfSquaresOfDigits(a))));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(getSumOfSquaresOfDigits(b))));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(getSumOfSquares(getSumOfSquaresOfDigits(a)))));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(getSumOfSquares(getSumOfSquaresOfDigits(b)))));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(getSumOfSquares(getSumOfSquaresOfDigits(a)))));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(getSumOfSquares(getSumOfSquaresOfDigits(b)))));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(getSumOfSquares(getSumOfSquares(getSumOfSquaresOfDigits(a))))));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(getSumOfSquares(getSumOfSquares(getSumOfSquaresOfDigits(b))))));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(getSumOfSquares(getSumOfSquares(getSumOfSquaresOfDigits(a))))));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(getSumOfSquares(getSumOfSquares(getSumOfSquaresOfDigits(b))))));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(getSumOfSquares(getSumOfSquares(getSumOfSquaresOfDigits(a))))));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(getSumOfSquares(getSumOfSquares(getSumOfSquaresOfDigits(b))))));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(getSumOfSquares(getSumOfSquares(getSumOfSquaresOfDigits(a))))));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(getSumOfSquares(getSumOfSquares(getSumOfSquaresOfDigits(b))))));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(getSumOfSquares(getSumOfSquares(getSumOfSquaresOfDigits(a))))));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(getSumOfSquares(getSumOfSquares(getSumOfSquaresOfDigits(b))))));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(getSumOfSquares(getSumOfSquares(getSumOfSquaresOfDigits(a))))));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(getSumOfSquares(getSumOfSquares(getSumOfSquaresOfDigits(b))))));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(getSumOfSquares(getSumOfSquares(getSumOfSquaresOfDigits(a))))));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(getSumOfSquares(getSumOfSquares(getSumOfSquaresOfDigits(b))))));\n  console.log(getSumOfSquaresOfDigits(getSumOfSquares(getSumOfSquares(getSumOfSquares(getSumOfSquaresOfDigits(a))))));\n  console.log(getSumOfSquaresOfDig"}
