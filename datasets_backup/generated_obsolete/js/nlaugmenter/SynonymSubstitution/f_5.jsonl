{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  return numbers.filter((x, i) => {\n    const prevNumber = numbers[i - 1]\n    const nextNumber = numbers[i + 1]\n    return Math.abs(x - prevNumber) <= threshold && Math.abs(x - nextNumber) <= threshold\n  })\n}\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  return numbers.filter((x, i) => {\n    const prevNumber = numbers[i - 1]\n    const nextNumber = numbers[i + 1]\n    return Math.abs(x - prevNumber) <= threshold && Math.abs(x - nextNumber) <= threshold\n  })\n}\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  return numbers.filter((x, i) => {\n    const prevNumber = numbers[i - 1]\n    const nextNumber = numbers[i + 1]\n    return Math.abs(x - prevNumber) <= threshold && Math.abs(x - nextNumber) <= threshold\n  })\n}\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  return numbers.filter((x, i) => {\n    const prevNumber = numbers[i - 1]\n    const nextNumber = numbers[i + 1]\n    return Math.abs(x - prevNumber) <= threshold && Math.abs(x - nextNumber) <= threshold\n  })\n}\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  return numbers.filter((x, i) => {\n    const prevNumber = numbers[i - 1]\n    const nextNumber = numbers[i + 1]\n    return Math.abs(x - prevNumber) <= threshold && Math.abs(x - nextNumber) <= threshold\n  })\n}\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  return numbers.filter((x, i) => {\n    const prevNumber = numbers[i - 1]\n    const nextNumber = numbers[i + 1]\n    return Math.abs(x - prevNumber) <= threshold && Math.abs(x - nextNumber) <= threshold\n  })\n}\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  return numbers.filter((x, i) => {\n    const prevNumber = numbers[i - 1]\n    const nextNumber = numbers[i + 1]\n    return Math.abs(x - prevNumber) <= threshold && Math.abs(x - nextNumber) <= threshold\n  })\n}\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  return numbers.filter((x, i) => {\n    const prevNumber = numbers[i - 1]\n    const nextNumber = numbers[i + 1]\n    return Math.abs(x - prevNumber) <= threshold && Math.abs(x - nextNumber) <= threshold\n  })\n}\n\n/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of cuddle parenthesis. Your finish is to \n   separate those group into separate strings and return the list of those. \n   disjoined groups are balanced (each open couple is properly closed) and not nest within each other \n   Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string containing multiple groups of cuddle parenthesis. Your finish is to \n   separate those group into separate strings and return the list of those. \n   disjoined groups are balanced (each open couple is properly closed) and not nest within each other \n   Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n    const groups = paren_string.split('(')\n    let res = []\n    let curr = ''\n    for (let i = 0; i < groups.length; i++) {\n        curr = groups[i]\n        if (curr === '') continue\n        if (curr[0] ==='') {\n            curr = curr.substr(1)\n        }\n        if (curr[curr.length - 1] ==='') {\n            curr = curr.substr(0, curr.length - 1)\n        }\n        if (curr === ')') {\n            res.push(curr)\n            curr = ''\n        } else {\n            curr = curr + '('\n        }\n    }\n    return res\n}\n\nconsole.log(separateParenGroups('(()()))'))\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  return number - Math.floor(number);\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  return Math.floor(number);\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateDecimal = (number) => {\n  return number - Math.floor(number);\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalTruncated = (number) => {\n  return Math.round(number);\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalNotTruncated = (number) => {\n  return Math.floor(number);\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalWithSign = (number) => {\n  return Math.floor(number) + Math.sign(number);\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalWithSignAndDecimal = (number) => {\n  return Math.round(number) + Math.sign(number);\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalWithSignAndDecimalTruncated = (number) => {\n  return Math.round(number);\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalWithSignAndDecimalNotTruncated = (number) => {\n  return Math.floor(number);\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalWithSignAndDecimalNotTruncatedAndDecimal = (number) => {\n  return Math.floor(number) + Math.sign(number);\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalWithSignAndDecimalNotTruncatedAndDecimalTruncated = (number) => {\n  return Math.round(number);\n}\n\n/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalWithSignAndDecimalNotTruncatedAndDecimalTruncatedAndDecimal = (number) => {\n  return Math.round(number) + Math.sign(number);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n    const stack = [];\n    const current = 0;\n    for (let i = 0; i < operations.length; i++) {\n        const operation = operations[i];\n        if (operation === -1) {\n            current += stack.pop();\n            stack.push(current);\n            current = 0;\n        } else {\n            current += operation;\n            stack.push(current);\n            current = 0;\n        }\n    }\n    return current < 0 && stack.length > 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute difference between each \n   element and a centerpoint (mean in this case ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute difference between each \n   element and a centerpoint (mean in this case ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let { mean, abs } = numbers.reduce(\n    (acc, x) => {\n      acc.mean = acc.mean || 0;\n      acc.abs = acc.abs || 0;\n      acc.mean += x;\n      acc.abs += abs(x);\n      return acc;\n    },\n    {mean: 0, abs: 0}\n  );\n  return mean / numbers.length;\n};\n\n/* \n   Given a list of numbers, calculate the standard deviation \n   around the mean of this dataset. \n   standard deviation = sqrt( (sum(|x - x_mean|) / N) )\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  let { mean, sum } = numbers.reduce(\n    (acc, x) => {\n      acc.mean = acc.mean || 0;\n      acc.sum = acc.sum || 0;\n      acc.mean += x;\n      acc.sum += abs(x);\n      return acc;\n    },\n    {mean: 0, sum: 0}\n  );\n  return Math.sqrt(sum / numbers.length);\n};\n\n/*\n   Given a list of numbers, calculate the Median of this dataset. \n   The Median is the number in the middle of the list. \n  >>> median([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst median = (numbers) => {\n  let { sort } = numbers.reduce(\n    (acc, x) => {\n      acc.sort = acc.sort || [];\n      acc.sort.push(x);\n      return acc;\n    },\n    {sort: []}\n  );\n  return sort[Math.floor(numbers.length / 2)];\n};\n\n/* \n   Given a list of numbers, calculate the maximum and minimum of this dataset. \n   The Maximum is the largest number in the list. \n   The Minimum is the smallest number in the list. \n  >>> maximum([1.0, 2.0, 3.0, 4.0])\n  4.0\n  >>> minimum([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst maximum = (numbers) => {\n  let { sort } = numbers.reduce(\n    (acc, x) => {\n      acc.sort = acc.sort || [];\n      acc.sort.push(x);\n      return acc;\n    },\n    {sort: []}\n  );\n  return sort[numbers.length - 1];\n};\n\n/* \n   Given a list of numbers, calculate the Mode of this dataset. \n   The Mode is the most frequent number in the list. \n  >>> mode([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst mode = (numbers) => {\n  let { sort } = numbers.reduce(\n    (acc, x) => {\n      acc.sort = acc.sort || [];\n      acc.sort.push(x);\n      return acc;\n    },\n    {sort: []}\n  );\n  let counts = {};\n  for (let x of sort) {\n    counts[x] = counts[x] || 0;\n    counts[x]++;\n  }\n  let max = Object.keys(counts).reduce(\n    (acc, x) => {\n      return counts[x] > acc? counts[x] : acc;\n    },\n    0\n  );\n  return sort.indexOf(max) + 1;\n};\n\n/* \n   Given a list of numbers, calculate the Sum of this dataset. \n   The Sum is the sum of all the numbers in the list. \n  >>> sum([1.0, 2.0, 3.0, 4.0])\n  10.0\n  */\nconst sum = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x, 0);\n};\n\n/* \n   Given a list of numbers, calculate the Mean of this dataset. \n   The Mean is the average of all the numbers in the list. \n  >>> mean([1.0, 2.0, 3.0, 4.0])\n  2.5\n  */\nconst mean = (numbers) => {\n  return sum(numbers) / numbers.length;\n};\n\n/* \n   Given a list of numbers, calculate the Variance of this dataset. \n   The Variance is the sum of squares of differences between each \n   number and the mean of this dataset. \n   Variance = sum((x - mean)^2) / (N - 1)\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.25\n  */\nconst variance = (numbers) => {\n  return sum(numbers.map(x => x - mean(numbers))) / (numbers.length - 1);\n};\n\n/*\n   Given a list of numbers, calculate the Standard Deviation of this dataset. \n   The Standard Deviation is the square root of the Variance. \n   standard deviation = sqrt(variance)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  return Math.sqrt(variance(numbers));\n};\n\nmodule.exports = {\n  meanAbsoluteDeviation,\n  mean,\n  median,\n  mode,\n  maximum,\n  minimum,\n  standardDeviation,\n  variance\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length;\n  const res = [];\n  let i = 0;\n  while (i < len) {\n    res.push(numbers[i]);\n    if (i < len - 1) {\n      res.push(delimeter);\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  Given a list of integers `numbers'\n    (a list of consecutive numbers, such as [1, 2, 3, 4])\n    returns a list of `numbers' with the even numbers\n    replaced by 1/2\n  >>> intersperseEven([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> intersperseEven([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> intersperseEven([1, 2, 3])\n  [1, 2, 3]\n  >>> intersperseEven([1, 2])\n  [1, 2]\n  >>> intersperseEven([1])\n  [1]\n  >>> intersperseEven([1, 2, 3, 4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> intersperseEven([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> intersperseEven([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> intersperseEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> intersperseEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> intersperseEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> intersperseEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n  >>> intersperseEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  >>> intersperseEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  >>> intersperseEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> intersperseEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n  >>> intersperseEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  >>> intersperseEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> intersperseEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> intersperseEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  >>> intersperseEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n  >>> intersperseEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by space. \n   For each of the group, output the thick grade of nesting of digression. \n   E.g. (() ()) has maximum two levels of nesting while (( ()) ) receive three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by space. \n   For each of the group, output the thick grade of nesting of digression. \n   E.g. (() ()) has maximum two levels of nesting while (( ()) ) receive three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const regexp = /\\((\\()\\()\\((\\))\\)\\()\\(\\()\\(\\()\\)/g\n  const paren_list = paren_string.match(regexp)\n  if(!paren_list)\n    return []\n  const stack = []\n  for (let i = 0; i < paren_list.length; i++) {\n    const current_group = paren_list[i].match(/\\((\\()\\()\\(\\))\\)/)[0]\n    const next_group = paren_list[i+1].match(/\\((\\()\\()\\(\\))\\)/)[0]\n    const current_depth = (next_group.length - current_group.length)\n    if (stack.length == 0 || current_depth > stack[stack.length-1]) {\n      stack.push(current_depth)\n    } else {\n      const new_depth = current_depth - stack[stack.length-1]\n      if (new_depth > 0) {\n        stack.push(new_depth)\n      }\n    }\n  }\n  return stack.reverse()\n}\n\n//Tests\n\nconsole.log(parseNestedParens('((())))'))\nconsole.log(parseNestedParens('()'))\nconsole.log(parseNestedParens('()()()()'))\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain grant substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contain grant substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const split = strings.reduce((acc, str) => {\n    const subStrings = str.split(substring);\n    return subStrings.reduce((acc, subStr) => {\n      return acc.concat(subStr);\n    }, []);\n  }, []);\n  return split;\n};\n\nmodule.exports = filterBySubstring;\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n    const max = Math.max(...numbers);\n    const min = Math.min(...numbers);\n    const sum = numbers.reduce((p, n) => p + n, 0);\n    let intersection = 1;\n    let intersects = numbers.filter(n => n <= max && n >= min);\n    if (intersects.length > 0) {\n        intersection = intersects.reduce((p, n) => p * n, 1);\n    }\n    return (sum, intersection);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximal element determine until establish here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, generate a list of rolling maximal element determine until establish here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const length = numbers.length\n  const rollingMaxArr = []\n  let maxValue = numbers[0]\n  let index = 0\n  let currentMax = 0\n  while (index < length) {\n    rollingMaxArr[index] = maxValue\n    index++\n    currentMax = maxValue\n    for (let i = 0; i < length - index; i++) {\n      if (numbers[index + i] > currentMax) {\n        currentMax = numbers[index + i]\n      }\n    }\n    maxValue = currentMax\n  }\n  return rollingMaxArr\n}\n\nmodule.exports = rollingMax\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.slice(0, -1)\n  let postfix = string.slice(string.length - 1)\n  let isPalindrome = (string) = > \n  {\n    let newString = string.split('').reverse().join('')\n    if(newString === string) {\n      return newString\n    } else {\n      return prefix + newString + postfix\n    }\n  }\n}\n\n/* Test if strig is a palindrome * / \n const isPalindrome = (string) = > {\n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cat')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.slice(0, -1)\n  let postfix = string.slice(string.length - 1)\n  let isPalindrome = (string) = > \n  {\n    let newString = string.split('').reverse().join('')\n    if(newString === string) {\n      return newString\n    } else {\n      return prefix + newString + postfix\n    }\n  }\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cat')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.slice(0, -1)\n  let postfix = string.slice(string.length - 1)\n  let isPalindrome = (string) = > \n  {\n    let newString = string.split('').reverse().join('')\n    if(newString === string) {\n      return newString\n    } else {\n      return prefix + newString + postfix\n    }\n  }\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cat')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.slice(0, -1)\n  let postfix = string.slice(string.length - 1)\n  let isPalindrome = (string) = > \n  {\n    let newString = string.split('').reverse().join('')\n    if(newString === string) {\n      return newString\n    } else {\n      return prefix + newString + postfix\n    }\n  }\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cat')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.slice(0, -1)\n  let postfix = string.slice(string.length - 1)\n  let isPalindrome = (string) = > \n  {\n    let newString = string.split('').reverse().join('')\n    if(newString === string) {\n      return newString\n    } else {\n      return prefix + newString + postfix\n    }\n  }\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cat')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.slice(0, -1)\n  let postfix = string.slice(string.length - 1)\n  let isPalindrome = (string) = > \n  {\n    let newString = string.split('').reverse().join('')\n    if(newString === string) {\n      return newString\n    } else {\n      return prefix + newString + postfix\n    }\n  }\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cata')\n  'catac"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n    // This function is only for two-digit numbers.\n    // For larger numbers, use bitXor in the below solution.\n    if (a.length!== b.length) return a + b;\n    const xor = [];\n    for (let i = 0; i < a.length; i++) {\n        xor.push(a[i] ^ b[i]);\n    }\n    return xor.join('');\n};\n\nconsole.log(stringXor('010', '110'));<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the same duration. Return nothing in lawsuit the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the same duration. Return nothing in lawsuit the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  return strings.reduce((acc, str) => {\n    if (acc.length < str.length) {\n      acc = str;\n    }\n    return acc;\n  }, '');\n};\n\nexport default longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n\n  if (a > b) {\n    return greatestCommonDivisor(a % b, b);\n  } else {\n    return greatestCommonDivisor(a, b % a);\n  }\n};\n\n/**\n  * Return the greatest common divisor of two integer a and b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nexport const gcd = (a, b) => {\n  return greatestCommonDivisor(a, b);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the remark string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shortest to longest of the remark string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const result = [];\n  const n = string.length;\n  for (let i = 0; i < n; i++) {\n    const prefix = string.substring(0, i + 1);\n    if (i === n - 1) {\n      result.push(prefix);\n    } else {\n      const next = string.substring(i + 1, n);\n      const nextPrefixes = allPrefixes(next);\n      result = result.concat(nextPrefixes);\n    }\n  }\n  return result;\n};\n\n/*\n  Return list of all prefixes from shortest to longest of the remark string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes2 = (string) => {\n  const result = [];\n  const n = string.length;\n  for (let i = 0; i < n; i++) {\n    const prefix = string.substring(0, i + 1);\n    if (i === n - 1) {\n      result.push(prefix);\n    } else {\n      const next = string.substring(i + 1, n);\n      const nextPrefixes = allPrefixes(next);\n      result = result.concat(nextPrefixes);\n    }\n  }\n  return result;\n};\n\nconst test = (string) => {\n  const n = string.length;\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    const prefix = string.substring(0, i + 1);\n    if (i === n - 1) {\n      result.push(prefix);\n    } else {\n      const next = string.substring(i + 1, n);\n      const nextPrefixes = allPrefixes(next);\n      result = result.concat(nextPrefixes);\n    }\n  }\n  console.log(result);\n};\n\nconst test2 = (string) => {\n  const n = string.length;\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    const prefix = string.substring(0, i + 1);\n    if (i === n - 1) {\n      result.push(prefix);\n    } else {\n      const next = string.substring(i + 1, n);\n      const nextPrefixes = allPrefixes2(next);\n      result = result.concat(nextPrefixes);\n    }\n  }\n  console.log(result);\n};\n\ntest('abc');\ntest2('abc');\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const string = '';\n  for (let i = 0; i < n; i++) {\n    string +='';\n  }\n  return string;\n};\n\n/**\n  * Return a string containing space - subtend number starting from 0 upto n inclusive.\n  *\n  * @param {number} n\n  * @returns {string}\n  */\nexport const stringSequence2 = (n) => {\n  const string = '';\n  for (let i = 0; i < n; i++) {\n    string +='';\n  }\n  return string;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let chars = string.split('').filter(\n    (c) =>!c.match(/[A-Z]/) &&!c.match(/[a-z]/)\n  );\n  let count = chars.length;\n  for (let i = 0; i < chars.length; i++) {\n    for (let j = i + 1; j < chars.length; j++) {\n      if (chars[i].toLowerCase() === chars[j].toLowerCase()) {\n        count--;\n      }\n    }\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing melodious notes in a particular ASCII format. \n   Your task is to parse this string and return list of integers equate to how many beats does each \n   not concluding. \n\n   Here is a legend: \n  ' oxygen' - whole bill, lasts four beats \n  ' o|' - one-half bill, lasts two pulse \n  ' .|' - quater eminence, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string representing melodious notes in a particular ASCII format. \n   Your task is to parse this string and return list of integers equate to how many beats does each \n   not concluding. \n\n   Here is a legend: \n 'oxygen' - whole bill, lasts four beats \n 'o|' - one-half bill, lasts two pulse \n  '.|' - quater eminence, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let last_beat_index = 0;\n  let last_beat = 0;\n  let beat_list = [];\n\n  for (let i = 0; i < music_string.length; i++) {\n    let current_beat_index = i;\n\n    if (music_string[i] === 'o' && music_string[i + 1] === '|') {\n      last_beat_index = current_beat_index;\n      last_beat = 1;\n    } else if (music_string[i] === 'o' && music_string[i + 1] === '|') {\n      last_beat_index = current_beat_index;\n      last_beat = 2;\n    } else if (music_string[i] === 'o' && music_string[i + 1] === '|') {\n      last_beat_index = current_beat_index;\n      last_beat = 4;\n    } else if (music_string[i] === 'o' && music_string[i + 1] === 'o') {\n      last_beat_index = current_beat_index;\n      last_beat = 8;\n    }\n\n    if (last_beat_index!== 0) {\n      beat_list.push(last_beat);\n      last_beat_index = 0;\n      last_beat = 0;\n    }\n  }\n\n  return beat_list;\n};\n\nexport default parseMusic;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n    let count = 0\n    let lastIndex = 0\n    let index = 0\n    while (lastIndex <= string.length - substring.length) {\n        if (string.slice(lastIndex, lastIndex + substring.length) === substring) {\n            count++\n            lastIndex += substring.length\n        } else {\n            lastIndex++\n        }\n    }\n    return count\n}\n\n/*\n  Find the nth largest element in an unsorted array.\n\n  >>> nthLargest(1, [3, 1, 2, 4, 3, 5, 7])\n  3\n  >>> nthLargest(2, [3, 1, 2, 4, 3, 5, 7])\n  5\n  >>> nthLargest(3, [3, 1, 2, 4, 3, 5, 7])\n  7\n  >>> nthLargest(4, [3, 1, 2, 4, 3, 5, 7])\n  4\n  >>> nthLargest(5, [3, 1, 2, 4, 3, 5, 7])\n  7\n  */\nconst nthLargest = (n, list) => {\n    const sortedList = list.slice().sort()\n    if (sortedList.length === 0) return -1\n    return sortedList[n - 1]\n}\n\n/*\n  Find the nth smallest element in an unsorted array.\n\n  >>> nthSmallest(1, [3, 1, 2, 4, 3, 5, 7])\n  1\n  >>> nthSmallest(2, [3, 1, 2, 4, 3, 5, 7])\n  2\n  >>> nthSmallest(3, [3, 1, 2, 4, 3, 5, 7])\n  3\n  >>> nthSmallest(4, [3, 1, 2, 4, 3, 5, 7])\n  3\n  >>> nthSmallest(5, [3, 1, 2, 4, 3, 5, 7])\n  3\n  */\nconst nthSmallest = (n, list) => {\n    const sortedList = list.slice().sort()\n    if (sortedList.length === 0) return -1\n    return sortedList[n]\n}\n\n/*\n  Returns the sum of the numbers in the given list.\n\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([])\n  0\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8])\n  42\n  */\nconst sum = (list) => {\n    return list.reduce((acc, num) => acc + num, 0)\n}\n\n/*\n  Returns the average of the numbers in the given list.\n\n  >>> average([1, 2, 3])\n  2\n  >>> average([])\n  NaN\n  >>> average([1, 2, 3, 4, 5])\n  3.0\n  */\nconst average = (list) => {\n    return sum(list) / list.length\n}\n\n/*\n  Returns the median of the numbers in the given list.\n\n  >>> median([1, 2, 3])\n  2\n  >>> median([])\n  NaN\n  >>> median([1, 2, 3, 4, 5])\n  3\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8])\n  4.5\n  */\nconst median = (list) => {\n    const sortedList = list.slice().sort()\n    if (sortedList.length === 0) return NaN\n    const middle = sortedList[Math.floor(sortedList.length / 2)]\n    if (sortedList.length % 2 === 0) {\n        return (middle + sortedList[sortedList.length - 1]) / 2\n    } else {\n        return middle\n    }\n}\n\n/*\n  Returns the minimum element in the given list.\n\n  >>> min([1, 2, 3])\n  1\n  >>> min([])\n  NaN\n  >>> min([1, 2, 3, 4, 5])\n  1\n  */\nconst min = (list) => {\n    return Math.min(...list)\n}\n\n/*\n  Returns the maximum element in the given list.\n\n  >>> max([1, 2, 3])\n  3\n  >>> max([])\n  NaN\n  >>> max([1, 2, 3, 4, 5])\n  5\n  */\nconst max = (list) => {\n    return Math.max(...list)\n}\n\n/*\n  Returns the minimum and maximum elements in the given list.\n\n  >>> minMax([1, 2, 3])\n  (1, 3)\n  >>> minMax([])\n  (NaN, NaN)\n  >>> minMax([1, 2, 3, 4, 5])\n  (1, 5)\n  */\nconst minMax = (list) => {\n    const sortedList = list.slice().sort()\n    if (sortedList.length === 0) return [NaN, NaN]\n    return [sortedList[0], sortedList[sortedList.length - 1]]\n}\n\n/*\n  Returns the mode of the given list.\n\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([])\n  NaN\n  >>> mode([1, 2, 3, 4, 5])\n  3\n  */\nconst mode = (list) => {\n    const sortedList = list.slice().sort()\n    if (sortedList.length === 0) return NaN\n    let count = 1\n    let prev = sortedList[0]\n    let index = 0\n    while (index < sortedList.length) {\n        if (sortedList[index]!== prev) {\n            prev = sortedList[index]\n            count++\n        }\n        index++\n    }\n    return count\n}\n\n/*\n  Returns the sum of the squares of the numbers in the given list.\n\n  >>> squareSum([1, 2, 3])\n  9\n  >>> squareSum([])\n  0\n  >>> squareSum([1, 2, 3, 4, 5])\n  45"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   revert the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   revert the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const sort = numbers.split(' ').sort();\n  return sort.join(' ');\n};\n\nexport default sortNumbers;\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) blue-ribbon and return two that be the closest to each \n   other and return them in order (smaller number, larger phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) blue-ribbon and return two that be the closest to each \n   other and return them in order (smaller number, larger phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  if(!numbers)\n    return null;\n  //if(numbers.length < 2)\n  //  return null;\n  \n  const len = numbers.length;\n  let num1 = numbers[0];\n  let num2 = numbers[1];\n  \n  for(let i = 2; i < len; i++) {\n    if(numbers[i] < num1) {\n      num2 = num1;\n      num1 = numbers[i];\n    } else if(numbers[i] < num2) {\n      num2 = numbers[i];\n    }\n  }\n  return [num1, num2];\n}\n\n/* From a supplied list of numbers (of length at least two) and return the two largest numbers.\n  >>> largestTwo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  [5.0, 2.2]\n  >>> largestTwo([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  [5.0, 2.0]\n  */\nconst largestTwo = (numbers) => {\n  if(!numbers)\n    return null;\n  \n  let len = numbers.length;\n  \n  let max1 = numbers[0];\n  let max2 = numbers[0];\n  \n  for(let i = 1; i < len; i++) {\n    if(numbers[i] > max1) {\n      max2 = max1;\n      max1 = numbers[i];\n    } else if(numbers[i] > max2) {\n      max2 = numbers[i];\n    }\n  }\n  return [max1, max2];\n}\n\n/* From a supplied list of numbers (of length at least two) and return the two smallest numbers.\n  >>> largestTwo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  [1.0, 2.0]\n  >>> largestTwo([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  [1.0, 2.0]\n  */\nconst smallestTwo = (numbers) => {\n  if(!numbers)\n    return null;\n  \n  let len = numbers.length;\n  \n  let min1 = numbers[0];\n  let min2 = numbers[0];\n  \n  for(let i = 1; i < len; i++) {\n    if(numbers[i] < min1) {\n      min2 = min1;\n      min1 = numbers[i];\n    } else if(numbers[i] < min2) {\n      min2 = numbers[i];\n    }\n  }\n  return [min1, min2];\n}\n\n/* From a supplied list of numbers (of length at least two) and return the two largest numbers.\n  >>> largestTwo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  [5.0, 2.2]\n  >>> largestTwo([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  [5.0, 2.0]\n  */\nconst largestThree = (numbers) => {\n  if(!numbers)\n    return null;\n  \n  let len = numbers.length;\n  \n  let max1 = numbers[0];\n  let max2 = numbers[0];\n  let max3 = numbers[0];\n  \n  for(let i = 1; i < len; i++) {\n    if(numbers[i] > max1) {\n      max3 = max2;\n      max2 = max1;\n      max1 = numbers[i];\n    } else if(numbers[i] > max2) {\n      max3 = max2;\n      max2 = numbers[i];\n    } else if(numbers[i] > max3) {\n      max3 = numbers[i];\n    }\n  }\n  return [max1, max2, max3];\n}\n\n/* From a supplied list of numbers (of length at least two) and return the two largest numbers.\n  >>> largestTwo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  [5.0, 2.2]\n  >>> largestTwo([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  [5.0, 2.0]\n  */\nconst smallestThree = (numbers) => {\n  if(!numbers)\n    return null;\n  \n  let len = numbers.length;\n  \n  let min1 = numbers[0];\n  let min2 = numbers[0];\n  let min3 = numbers[0];\n  \n  for(let i = 1; i < len; i++) {\n    if(numbers[i] < min1) {\n      min3 = min2;\n      min2 = min1;\n      min1 = numbers[i];\n    } else if(numbers[i] < min2) {\n      min3 = min2;\n      min2 = numbers[i];\n    } else if(numbers[i] < min3) {\n      min3 = numbers[i];\n    }\n  }\n  return [min1, min2, min3];\n}\n\nexport { findClosestElements, largestThree, largestTwo, smallestThree, smallestTwo };\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  if (numbers.length === 1) {\n    return numbers;\n  }\n\n  const largest = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const normalized = numbers.map(x => x / largest);\n  const minIsZero = min === 0.0;\n  const isZero = normalized.find(x => x === 0.0);\n  const isOne = normalized.find(x => x === 1.0);\n  if (isOne === undefined) {\n    const newOne = 1.0 / largest;\n    normalized.push(newOne);\n  } else if (isZero!== undefined) {\n    const newZero = largest / isZero;\n    normalized.splice(normalized.indexOf(isZero), 1, newZero);\n  } else if (isZero === undefined && minIsZero) {\n    normalized.push(1.0);\n  }\n\n  return normalized;\n};\n\n/**\n  * Generate a list of numbers that are evenly distributed from 0 to 1, inclusive.\n  * If the numbers are in a list, it will sort them before returning them.\n  * @param {number} [size] - The number of numbers to generate. If not specified,\n  * the size will be the number of numbers given.\n  * @param {Array} [numbers] - The list of numbers to use for distribution.\n  * If not specified, then it will generate a new list.\n  * @returns {Array} The list of evenly distributed numbers.\n  * @example\n  * evenlyDistributed(5); //=> [0.0, 0.25, 0.5, 0.75, 1.0]\n  * evenlyDistributed(3, [1.0, 2.0, 3.0, 4.0, 5.0]); //=> [0.0, 0.25, 0.5, 0.75, 1.0]\n  * evenlyDistributed(3, [1.0, 2.0, 3.0, 4.0, 5.0], [1.0, 2.0, 3.0, 4.0, 5.0]); //=> [0.0, 0.25, 0.5, 0.75, 1.0]\n  * evenlyDistributed(2); //=> [0.0, 1.0]\n  * evenlyDistributed(2, [1.0, 2.0, 3.0, 4.0, 5.0]); //=> [0.0, 1.0]\n  * evenlyDistributed(2, [1.0, 2.0, 3.0, 4.0, 5.0], [1.0, 2.0, 3.0, 4.0, 5.0]); //=> [0.0, 1.0]\n  */\nconst evenlyDistributed = (size = undefined, numbers = undefined) => {\n  if (numbers) {\n    return numbers.sort().slice(0, size).map(x => x);\n  }\n\n  return Math.floor(Math.random() * (1 + size) * 100) / 100;\n};\n\n/**\n * Creates a new list of the same length with all the elements repeated.\n * @param {Array} original - The original list to repeat.\n * @param {number} count - The number of times to repeat the list.\n * @returns {Array} The new repeated list.\n */\nconst repeat = (original, count) => {\n  if (count === 0) {\n    return [];\n  }\n\n  return original.concat(original.reduce((arr, val) => arr.concat(val), []), original.reduce((arr, val) => arr.concat(val), []));\n};\n\nexport {\n  rescaleToUnit,\n  evenlyDistributed,\n  repeat\n};\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integer\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter given list of any python values only for integer\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only for strings or integers\n * @param {Array} values\n * @returns {Array}\n */\nconst filterPrimitives = (values) => {\n  return values.filter((value) => typeof value!=='string' && typeof value!== 'number');\n};\n\n/**\n * @param {Array} values\n * @returns {Array}\n */\nconst filterNonStrings = (values) => {\n  return values.filter((value) => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only for strings or integers\n * @param {Array} values\n * @returns {Array}\n */\nconst filterNonStringsOrIntegers = (values) => {\n  return values.filter((value) => typeof value!=='string' && typeof value!== 'number');\n};\n\n/**\n * @param {Array} values\n * @returns {Array}\n */\nconst filterPrimitivesOrStrings = (values) => {\n  return values.filter((value) => typeof value ==='string' || typeof value === 'number');\n};\n\n/**\n * Filter given list of any python values only for strings or integers\n * @param {Array} values\n * @returns {Array}\n */\nconst filterStringsOrIntegers = (values) => {\n  return values.filter((value) => typeof value ==='string' || typeof value === 'number');\n};\n\n/**\n * Filter given list of any python values only for strings, integers or booleans\n * @param {Array} values\n * @returns {Array}\n */\nconst filterStringsOrIntegersOrBools = (values) => {\n  return values.filter((value) => typeof value ==='string' || typeof value === 'number' || typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any python values only for strings, integers or booleans\n * @param {Array} values\n * @returns {Array}\n */\nconst filterNonStringsOrIntegersOrBools = (values) => {\n  return values.filter((value) => typeof value!=='string' && typeof value!== 'number' && typeof value!== 'boolean');\n};\n\n/**\n * Filter given list of any python values only for strings, integers or booleans\n * @param {Array} values\n * @returns {Array}\n */\nconst filterNonStringsOrIntegersOrBoolsOrPrimitives = (values) => {\n  return values.filter((value) => typeof value!=='string' && typeof value!== 'number' && typeof value!== 'boolean' && typeof value!== 'number');\n};\n\n/**\n * Filter given list of any python values only for strings, integers or booleans\n * @param {Array} values\n * @returns {Array}\n */\nconst filterStringsOrIntegersOrBoolsOrPrimitives = (values) => {\n  return values.filter((value) => typeof value ==='string' || typeof value === 'number' || typeof value === 'boolean' || typeof value === 'number');\n};\n\n/**\n * Filter given list of any python values only for strings, integers or booleans\n * @param {Array} values\n * @returns {Array}\n */\nconst filterStringsOrIntegersOrBoolsOrPrimitivesOrNonStringsOrNonIntegersOrNonBools = (values) => {\n  return values.filter((value) => typeof value ==='string' || typeof value === 'number' || typeof value === 'boolean' || typeof value === 'number' || typeof value!=='string' && typeof value!== 'number');\n};\n\n/**\n * Filter given list of any python values only for strings, integers or booleans\n * @param {Array} values\n * @returns {Array}\n */\nconst filterStringsOrIntegersOrBoolsOrPrimitivesOrNonStringsOrNonIntegersOrNonBools = (values) => {\n  return values.filter((value) => typeof value ==='string' || typeof value === 'number' || typeof value === 'boolean' || typeof value === 'number' || typeof value!=='string' && typeof value!== 'number');\n};\n\n/**\n * Filter given list of any python values only for strings, integers or booleans\n * @param {Array} values\n * @returns {Array}\n */\nconst filterStringsOrIntegersOrBoolsOrPrimitivesOrNonStringsOrNonIntegersOrNonBoolsOrNonStringsOrNonIntegersOrNonBools = (values) => {\n  return values.filter((value) => typeof value ==='string' || typeof value === 'number' || typeof value === 'boolean' || typeof value === 'number' || typeof value!=='string' && typeof value!== 'number' || typeof value!== 'boolean' && typeof value!== 'number');\n};\n\n/**\n * Filter given list of any python values only for strings, integers or booleans\n * @param {Array} values\n * @returns {Array}\n */\nconst filterStringsOrIntegersOrBoolsOrPrimitivesOrNonStringsOrNonIntegersOrNonBoolsOrNonStringsOrNonIntegersOrNonBools = (values) => {\n  return values.filter((value) => typeof value ==='string' || typeof value === 'number' || typeof value === 'boolean' || typeof value === 'number' || typeof value!=='string' && typeof value!== 'number' || typeof value!== 'boolean' && typeof value!== 'number');\n};\n\n/**\n * Filter given list of any python values only for strings, integers or booleans\n * @param {Array} values\n * @returns {Array}"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 0) break;\n    len++;\n  }\n  return len;\n};\n\n/** Return index of first occurrence of given character in given string\n  >>> strindex('')\n  0\n  >>> strindex('abc', 'b')\n  1\n  >>> strindex('abc', 'd')\n  -1\n  */\nconst strindex = (string, char) => {\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === char) return i;\n    i++;\n  }\n  return -1;\n};\n\n/** Return index of first occurrence of given substring in given string\n  >>> strindex('')\n  0\n  >>> strindex('abc', 'bc')\n  0\n  >>> strindex('abc', 'b')\n  1\n  >>> strindex('abc', 'ab')\n  0\n  >>> strindex('abc', 'c')\n  2\n  */\nconst strindex = (string, substring) => {\n  let i = 0;\n  while (i < string.length) {\n    if (string.substr(i, strlen(substring)) === substring) return i;\n    i++;\n  }\n  return -1;\n};\n\n/** Return last index of given character in given string\n  >>> lastindex('')\n  -1\n  >>> lastindex('abc', 'b')\n  2\n  >>> lastindex('abc', 'd')\n  -1\n  */\nconst lastindex = (string, char) => {\n  let len = strlen(string);\n  let i = len;\n  while (i > 0) {\n    if (string[--i] === char) return i;\n  }\n  return -1;\n};\n\n/** Return last index of given substring in given string\n  >>> lastindex('')\n  -1\n  >>> lastindex('abc', 'bc')\n  2\n  >>> lastindex('abc', 'b')\n  2\n  >>> lastindex('abc', 'ab')\n  1\n  >>> lastindex('abc', 'c')\n  3\n  */\nconst lastindex = (string, substring) => {\n  let len = strlen(string);\n  let i = len;\n  while (i >= 0) {\n    if (string.substr(--i, strlen(substring)) === substring) return i;\n  }\n  return -1;\n};\n\n/** Return string between two given indices\n  >>> between('')\n  ''\n  >>> between('abc', 1, 2)\n  'bc'\n  >>> between('abc', 0, 2)\n  'ab'\n  >>> between('abc', 2, 1)\n  ''\n  >>> between('abc', 2, 3)\n  'c'\n  */\nconst between = (string, start, end) => {\n  let startIndex = start;\n  let endIndex = end;\n  if (startIndex < 0) {\n    startIndex = 0;\n  }\n  if (endIndex > string.length) {\n    endIndex = string.length;\n  }\n  return string.substring(startIndex, endIndex);\n};\n\nmodule.exports = {\n  strlen,\n  strindex,\n  lastindex,\n  between\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest phone number that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find the largest phone number that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const result = Math.ceil(n / 2)\n  if (result === n) return result\n  const remainder = n % result\n  if (remainder === 0) return result\n  const max = largestDivisor(result)\n  if (max === n) return result\n  return largestDivisor(n)\n}\n\nconsole.log(largestDivisor(15))\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n    const factors = [];\n    const factorize = (n) => {\n        if (n === 1) {\n            return [n];\n        }\n        const half = Math.floor(n / 2);\n        const tmp = factorize(half);\n        const tmp2 = factorize(n - half);\n        const tmp3 = [...tmp,...tmp2];\n        return [...tmp3, half];\n    };\n    return factorize(n);\n};\n\nmodule.exports = {\n    factorize,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = []\n  let i = 0\n  while (i < numbers.length) {\n    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i])\n    }\n    i += 1\n  }\n  return result\n}\n\n/*\n  From a list of integers, remove all elements that occur more than once.\n  observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesInPlace = (numbers) => {\n  let i = 0\n  while (i < numbers.length) {\n    let j = i + 1\n    while (j < numbers.length) {\n      if (numbers[i] === numbers[j]) {\n        numbers.splice(j, 1)\n      }\n      j += 1\n    }\n    i += 1\n  }\n}\n\n/*\n  From a list of strings, remove all strings that occur more than once.\n  observe holy order of string left the like as in the remark.\n  >>> removeDuplicates([\"a\", \"b\", \"c\", \"b\", \"d\"])\n  [\"a\", \"c\", \"d\"]\n  >>> removeDuplicates([\"a\", \"b\", \"c\", \"b\", \"d\"])\n  [\"a\", \"c\", \"d\"]\n  */\nconst removeDuplicatesInPlace = (strings) => {\n  let i = 0\n  while (i < strings.length) {\n    let j = i + 1\n    while (j < strings.length) {\n      if (strings[i] === strings[j]) {\n        strings.splice(j, 1)\n      }\n      j += 1\n    }\n    i += 1\n  }\n}\n\n/*\n  From a list of strings, remove all strings that occur more than once.\n  observe holy order of string left the like as in the remark.\n  >>> removeDuplicates([\"a\", \"b\", \"c\", \"b\", \"d\"])\n  [\"a\", \"c\", \"d\"]\n  >>> removeDuplicates([\"a\", \"b\", \"c\", \"b\", \"d\"])\n  [\"a\", \"c\", \"d\"]\n  */\nconst removeDuplicatesWithFunction = (strings) => {\n  let i = 0\n  while (i < strings.length) {\n    let j = i + 1\n    while (j < strings.length) {\n      if (removeDuplicates(strings[i], strings[j])) {\n        strings.splice(j, 1)\n      }\n      j += 1\n    }\n    i += 1\n  }\n}\n\n/*\n  From a list of strings, remove all strings that occur more than once.\n  observe holy order of string left the like as in the remark.\n  >>> removeDuplicates([\"a\", \"b\", \"c\", \"b\", \"d\"])\n  [\"a\", \"c\", \"d\"]\n  >>> removeDuplicates([\"a\", \"b\", \"c\", \"b\", \"d\"])\n  [\"a\", \"c\", \"d\"]\n  */\nconst removeDuplicatesWithFunctionInPlace = (strings) => {\n  let i = 0\n  while (i < strings.length) {\n    let j = i + 1\n    while (j < strings.length) {\n      if (removeDuplicates(strings[i], strings[j])) {\n        strings.splice(j, 1)\n      }\n      j += 1\n    }\n    i += 1\n  }\n}\n\n/*\n  From a list of strings, remove all strings that occur more than once.\n  observe holy order of string left the like as in the remark.\n  >>> removeDuplicates([\"a\", \"b\", \"c\", \"b\", \"d\"])\n  [\"a\", \"c\", \"d\"]\n  >>> removeDuplicates([\"a\", \"b\", \"c\", \"b\", \"d\"])\n  [\"a\", \"c\", \"d\"]\n  */\nconst removeDuplicatesWithFunctionInPlaceInPlace = (strings) => {\n  let i = 0\n  while (i < strings.length) {\n    let j = i + 1\n    while (j < strings.length) {\n      if (removeDuplicates(strings[i], strings[j])) {\n        strings.splice(j, 1)\n      }\n      j += 1\n    }\n    i += 1\n  }\n}\n\n/*\n  From a list of strings, remove all strings that occur more than once.\n  observe holy order of string left the like as in the remark.\n  >>> removeDuplicates([\"a\", \"b\", \"c\", \"b\", \"d\"])\n  [\"a\", \"c\", \"d\"]\n  >>> removeDuplicates([\"a\", \"b\", \"c\", \"b\", \"d\"])\n  [\"a\", \"c\", \"d\"]\n  */\nconst removeDuplicatesWithFunctionInPlaceInPlaceInPlace = (strings) => {\n  let i = 0\n  while (i < strings.length) {\n    let j = i + 1\n    while (j < strings.length) {\n      if (removeDuplicates(strings[i], strings[j])) {\n        strings.splice(j, 1)\n      }\n      j += 1\n    }\n    i += 1\n  }\n}\n\n/*\n  From a list of strings, remove all strings that occur more than once.\n  observe holy order of string left the like as in the remark.\n  >>> removeDuplicates([\"a\", \"b\", \"c\", \"b\", \"d\"])\n  [\"a\", \"c\", \"d\"]\n  >>> removeDuplicates([\"a\", \"b\", \"c\", \"b\", \"d\"])\n  [\"a\", \"c\", \"d\"]\n  */\nconst removeDuplicatesWithFunctionInPlaceInPlaceInPlaceInPlace = (strings) => {\n  let i = 0\n  while (i < strings.length) {\n    let j = i + 1\n    while ("}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/\\b[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\nconst flipCaseAndNumber = (string) => {\n  return flipCase(string) +'' + string.replace(/\\b[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n// Example:\n// flipCaseAndNumber('this is a string')\n// 'THIS IS A STRING'\n\nconst splitOnNumbers = (string) => {\n  return string.split(/\\d/);\n};\n\nconst numberOfWords = (string) => {\n  return splitOnNumbers(string).length;\n};\n\nconst flipCaseAndNumberAndWords = (string) => {\n  return flipCaseAndNumber(string) +'' + numberOfWords(string);\n};\n\nconst wordCount = (string) => {\n  return splitOnNumbers(string).length;\n};\n\nconst flipCaseAndWords = (string) => {\n  return flipCase(string) +'' + wordCount(string);\n};\n\nconst flipCaseAndNumbersAndWords = (string) => {\n  return flipCaseAndNumbers(string) +'' + wordCount(string);\n};\n\nconst flipCaseAndNumbersAndWordsAndWords = (string) => {\n  return flipCaseAndNumbersAndWords(string) +'' + wordCount(string);\n};\n\nmodule.exports = {\n  flipCaseAndNumbersAndWordsAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndNumbersAndWordsAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndNumbersAndWordsAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndNumbersAndWordsAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndNumbersAndWordsAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndNumbersAndWordsAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndNumbersAndWordsAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndNumbersAndWordsAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndNumbersAndWordsAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndNumbersAndWordsAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndNumbersAndWordsAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndNumbersAndWordsAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndNumbersAndWordsAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndNumbersAndWordsAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndNumbersAndWordsAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndNumbersAndWordsAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndNumbersAndWordsAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndNumbersAndWordsAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndNumbersAndWordsAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndNumbersAndWordsAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndNumbersAndWordsAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndWordsAndWords,\n  flipCaseAndNumbersAndWordsAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndNumbersAndWords,\n  flipCaseAndWordsAnd"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, cur) => acc + cur, '');\n}\n\n/**\n  * Concatenate the strings in a list\n  *\n  * @param {Array} strings - The list of strings to be concatenated\n  * @return {string}\n  */\nconst concatenateList = (strings) => {\n  return strings.reduce((acc, cur) => acc + cur, '');\n}\n\n/**\n * Returns the last element in an array or null if empty\n *\n * @param {Array} array - The array to get the last element from\n * @return {Array}\n */\nconst last = (array) => {\n  return array[array.length - 1];\n}\n\n/**\n * Returns the number of occurrences of a string in an array\n *\n * @param {Array} array - The array to count the occurrences in\n * @param {string} string - The string to count\n * @return {number}\n */\nconst countOccurrences = (array, string) => {\n  let count = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === string) count++;\n  }\n  return count;\n}\n\n/**\n * Returns the position of a string in an array\n *\n * @param {Array} array - The array to search\n * @param {string} string - The string to search\n * @return {number}\n */\nconst indexOf = (array, string) => {\n  let index = -1;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === string) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n}\n\n/**\n * Returns the position of a string in an array starting from a specified index\n *\n * @param {Array} array - The array to search\n * @param {string} string - The string to search\n * @param {number} index - The index to start search from\n * @return {number}\n */\nconst indexOfStartingFrom = (array, string, index) => {\n  let index = -1;\n  for (let i = index; i < array.length; i++) {\n    if (array[i] === string) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n}\n\n/**\n * Returns the index of the last occurrence of a string in an array starting from a specified index\n *\n * @param {Array} array - The array to search\n * @param {string} string - The string to search\n * @param {number} index - The index to start search from\n * @return {number}\n */\nconst lastIndexOfStartingFrom = (array, string, index) => {\n  let index = -1;\n  for (let i = index; i < array.length; i++) {\n    if (array[i] === string) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n}\n\n/**\n * Returns the number of occurrences of a string in an array starting from a specified index\n *\n * @param {Array} array - The array to count the occurrences in\n * @param {string} string - The string to count\n * @param {number} index - The index to start counting from\n * @return {number}\n */\nconst countOccurrencesStartingFrom = (array, string, index) => {\n  let count = 0;\n  for (let i = index; i < array.length; i++) {\n    if (array[i] === string) count++;\n  }\n  return count;\n}\n\n/**\n * Returns the length of an array\n *\n * @param {Array} array - The array to get the length of\n * @return {number}\n */\nconst length = (array) => {\n  return array.length;\n}\n\n/**\n * Returns the maximum value of an array\n *\n * @param {Array} array - The array to get the maximum value of\n * @return {number}\n */\nconst max = (array) => {\n  let max = array[0];\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] > max) max = array[i];\n  }\n  return max;\n}\n\n/**\n * Returns the minimum value of an array\n *\n * @param {Array} array - The array to get the minimum value of\n * @return {number}\n */\nconst min = (array) => {\n  let min = array[0];\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] < min) min = array[i];\n  }\n  return min;\n}\n\n/**\n * Returns the sum of all values in an array\n *\n * @param {Array} array - The array to get the sum of\n * @return {number}\n */\nconst sum = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n}\n\n/**\n * Returns the average of an array\n *\n * @param {Array} array - The array to get the average of\n * @return {number}\n */\nconst average = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum / array.length;\n}\n\n/**\n * Returns the index of the first element in an array that is not equal to a specified value\n *\n * @param {Array} array - The array to search\n * @param {number} value - The value to search for\n * @return {number}\n */\nconst indexOfNot = (array, value) => {\n  let index = -1;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i]!== value) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n}\n\nmodule.exports = {\n  concatenate,\n  concatenateList,\n  last,\n  countOccurrences,\n  indexOf,"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a grant prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start with a grant prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (!strings ||!strings.length) return [];\n\n  return strings.filter(s => {\n    return s.substring(0, prefix.length) === prefix;\n  });\n};\n\n/**\n  * Generate an array of strings from an input list of strings,\n  * joining each element of the list with the specified delimiter.\n  * @param {string} delimiter The delimiter to use between elements of the list.\n  * @param {array} strings The list of strings to join.\n  * @return {string} The joined list of strings.\n  * @example\n  * join([], '-')\n  * // => ''\n  *\n  * join(['abc', 'bcd', 'cde'], '-')\n  * // => 'abc-bcd-cde'\n  *\n  * join(['abc', 'bcd', 'cde'], '-', 2)\n  * // => 'abc-bcd-cde'\n  *\n  * join(['abc', 'bcd', 'cde'], '-', 3)\n  * // => 'abc-bcd-cde'\n  *\n  * join(['abc', 'bcd', 'cde'], '-', 4)\n  * // => 'abc-bcd-cde'\n  *\n  * join(['abc', 'bcd', 'cde'], '-', 5)\n  * // => 'abc-bcd-cde'\n  *\n  * join(['abc', 'bcd', 'cde'], '-', 6)\n  * // => 'abc-bcd-cde'\n  */\nconst join = (strings, delimiter, limit) => {\n  if (!strings ||!strings.length) return '';\n\n  if (limit && limit < 1) {\n    return '';\n  }\n\n  return strings.join(delimiter);\n};\n\nexport default {\n  filterByPrefix,\n  join\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const s = []\n  for (const x of l) {\n    if (x > 0) {\n      s.push(x)\n    }\n  }\n  return s\n}\n\nexport default getPositive\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number equal choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number equal choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  * Return true if a given number is a palindrome, and false otherwise.\n  * Examples:\n  *    >>> isPalindrome(121)\n  *    true\n  *    >>> isPalindrome(1221)\n  *    true\n  *    >>> isPalindrome(121)\n  *    false\n  *    >>> isPalindrome(1)\n  *    false\n  *    >>> isPalindrome(2)\n  *    true\n  */\nconst isPalindrome = (n) => {\n  if (n === 0 || n === 1) {\n    return true\n  }\n  let str = n.toString()\n  for (let i = 0, j = str.length - 1; i < j; i++, j--) {\n    if (str[i]!== str[j]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  * Return true if a given number is a palindrome, and false otherwise.\n  * Examples:\n  *    >>> isPalindrome(121)\n  *    true\n  *    >>> isPalindrome(1221)\n  *    false\n  *    >>> isPalindrome(121)\n  *    false\n  *    >>> isPalindrome(1)\n  *    false\n  *    >>> isPalindrome(2)\n  *    true\n  */\nconst isPalindrome_2 = (n) => {\n  if (n === 0 || n === 1) {\n    return true\n  }\n  let str = n.toString()\n  for (let i = 0, j = str.length - 1; i < j; i++, j--) {\n    if (str[i]!== str[j]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  * Return true if a given number is a power of two, and false otherwise.\n  * Examples:\n  *    >>> isPowerOfTwo(0)\n  *    false\n  *    >>> isPowerOfTwo(1)\n  *    false\n  *    >>> isPowerOfTwo(2)\n  *    true\n  *    >>> isPowerOfTwo(3)\n  *    false\n  *    >>> isPowerOfTwo(4)\n  *    true\n  *    >>> isPowerOfTwo(6)\n  *    false\n  *    >>> isPowerOfTwo(10)\n  *    true\n  *    >>> isPowerOfTwo(12)\n  *    false\n  */\nconst isPowerOfTwo = (n) => {\n  if (n === 0) {\n    return false\n  }\n  if (n % 2 === 0) {\n    return n === 2\n  }\n  return false\n}\n\n/*\n  * Return true if a given number is a multiple of 3, and false otherwise.\n  * Examples:\n  *    >>> isMultipleOfThree(0)\n  *    false\n  *    >>> isMultipleOfThree(1)\n  *    false\n  *    >>> isMultipleOfThree(2)\n  *    false\n  *    >>> isMultipleOfThree(3)\n  *    true\n  *    >>> isMultipleOfThree(4)\n  *    false\n  *    >>> isMultipleOfThree(5)\n  *    true\n  *    >>> isMultipleOfThree(6)\n  *    false\n  *    >>> isMultipleOfThree(7)\n  *    true\n  *    >>> isMultipleOfThree(8)\n  *    false\n  *    >>> isMultipleOfThree(9)\n  *    true\n  */\nconst isMultipleOfThree = (n) => {\n  if (n % 3 === 0) {\n    return true\n  }\n  return false\n}\n\n/*\n  * Return true if a given number is a multiple of 5, and false otherwise.\n  * Examples:\n  *    >>> isMultipleOfFive(0)\n  *    false\n  *    >>> isMultipleOfFive(1)\n  *    false\n  *    >>> isMultipleOfFive(2)\n  *    false\n  *    >>> isMultipleOfFive(3)\n  *    false\n  *    >>> isMultipleOfFive(4)\n  *    true\n  *    >>> isMultipleOfFive(5)\n  *    true\n  *    >>> isMultipleOfFive(6)\n  *    false\n  *    >>> isMultipleOfFive(7)\n  *    false\n  *    >>> isMultipleOfFive(8)\n  *    false\n  *    >>> isMultipleOfFive(9)\n  *    false\n  */\nconst isMultipleOfFive = (n) => {\n  if (n % 5 === 0) {\n    return true\n  }\n  return false\n}\n\n/*\n  * Return true if a given number is a multiple of 7, and false otherwise.\n  * Examples:\n  *    >>> isMultipleOfSeven(0)\n  *    false\n  *    >>> isMultipleOfSeven(1)\n  *    false\n  *    >>> isMultipleOfSeven(2)\n  *    false\n  *    >>> isMultipleOfSeven(3)\n  *    false\n  *    >>> isMultipleOfSeven(4)\n  *    false\n  *    >>> isMultipleOfSeven(5)\n  *    false\n  *    >>> isMultipleOfSeven(6)\n  *    true\n  *    >>> isMultipleOfSeven(7)\n  *    true\n  *    >>> isMultipleOfSeven(8)\n  *    false\n  *    >>> isMultipleOfSeven(9)\n  *    false\n  */\nconst isMultipleOfSeven = (n) => {\n  if (n % 7 === 0)"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero recurrence only entirely zero point, even if there exist many. \n   Moreover, findZero only carry list xs having even number of coefficient \n   and largest non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero recurrence only entirely zero point, even if there exist many. \n   Moreover, findZero only carry list xs having even number of coefficient \n   and largest non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zero = [0, 0];\n  let maxIndex = Math.max(...xs.map(x => x.length - 1));\n  let maxCoefficient = Math.max(...xs.map(x => x[xs.length - 1]));\n  for(let index = maxIndex; index >= 1; index -= 2) {\n    let currentCoefficient = xs.reduce((prev, item, index) = > {\n      return prev + item[index];\n    }, 0);\n    if(currentCoefficient == 0) {\n      zero[index] = 1;\n    } else if(currentCoefficient!= 0 && currentCoefficient > maxCoefficient) {\n      maxCoefficient = currentCoefficient;\n      maxIndex = index;\n    }\n  }\n  return zero;\n};\n\nconsole.log(findZero([1, 2]));\nconsole.log(findZero([-6, 11, -6, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by three, while its value at the indicies that are divisible by three are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by three, while its value at the indicies that are divisible by three are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const newList = []\n  let i = 0\n  while (i < l.length) {\n    const j = i + 1\n    let k = j + 1\n    while (k < l.length) {\n      if (l[i] % 3 === 0 && l[j] % 3 === 0 && l[k] % 3 === 0) {\n        newList.push(l[k])\n        newList.push(l[i])\n        newList.push(l[j])\n      }\n      k++\n    }\n    i++\n  }\n  return newList\n}\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  if (!l || l.length === 0) return []\n  let unique = [l[0]]\n  for (let i = 1, len = l.length; i < len; i++) {\n    if (l[i]!== unique[unique.length - 1]) unique.push(l[i])\n  }\n  return unique\n}\n\n/*\n  Return sorted unique elements in a list, ignoring case\n  >>> unique_case([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique_case = (l) => {\n  if (!l || l.length === 0) return []\n  let unique = [l[0]]\n  for (let i = 1, len = l.length; i < len; i++) {\n    if (l[i].toLowerCase()!== unique[unique.length - 1].toLowerCase()) {\n      unique.push(l[i].toLowerCase())\n    }\n  }\n  return unique\n}\n\n/*\n  Return sorted unique elements in a list, ignoring case and order\n  >>> unique_case_order([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique_case_order = (l) => {\n  if (!l || l.length === 0) return []\n  let unique = [l[0]]\n  for (let i = 1, len = l.length; i < len; i++) {\n    if (l[i].toLowerCase()!== unique[unique.length - 1].toLowerCase()) {\n      unique.push(l[i].toLowerCase())\n    }\n  }\n  return unique\n}\n\nmodule.exports = {\n  unique,\n  unique_case,\n  unique_case_order\n}\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let largest = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > largest) {\n      largest = l[i];\n    }\n  }\n  return largest;\n};\n\n//# sourceMappingURL=max-element.js.map<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let number = 0;\n  while (number < n) {\n    let divisibleBy11 = Math.floor(number / 11);\n    let divisibleBy13 = Math.floor(number / 13);\n    number++;\n    if (divisibleBy11 == 1) {\n      console.log('7');\n    } else if (divisibleBy13 == 1) {\n      console.log('fizz');\n    } else {\n      console.log(number);\n    }\n  }\n};\n\nconst fizzBuzz = (n) => {\n  for (let i = 0; i < n; i++) {\n    let number = i + 1;\n    if (number % 3 == 0 && number % 5 == 0) {\n      console.log('fizzbuzz');\n    } else if (number % 3 == 0) {\n      console.log('fizz');\n    } else if (number % 5 == 0) {\n      console.log('buzz');\n    } else {\n      console.log(number);\n    }\n  }\n};\n\nfizzBuzz(100);\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the odd indicies, while its values at the even indicies constitute equal \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the odd indicies, while its values at the even indicies constitute equal \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n    const sorted = []\n    for (let i = 0; i < l.length; i+=2) {\n        sorted.push(l[i])\n    }\n    for (let i = 1; i < l.length; i+=2) {\n        sorted.push(l[i])\n    }\n    return sorted\n}\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOdd = (l) => {\n    const sorted = []\n    for (let i = 1; i < l.length; i+=2) {\n        sorted.push(l[i])\n    }\n    for (let i = 0; i < l.length; i+=2) {\n        sorted.push(l[i])\n    }\n    return sorted\n}\n\nmodule.exports = {\n    sortEven,\n    sortOdd\n}<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n   groups = [ ], groups2 = [ ];\n   for (permit i = 0; i < s.length - 3; i += 3) {\n     groups.push(s.slice(i, i + 3));\n   }\n   for (const group of groups) {\n     if (group.length = = 3) \n       groups2.push(group.slice(2) + group[1] + group[2]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n  returns encoded string by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n   groups = [ ], groups2 = [ ];\n   for (permit i = 0; i < s.length - 3; i += 3) {\n     groups.push(s.slice(i, i + 3));\n   }\n   for (const group of groups) {\n     if (group.length = = 3) \n       groups2.push(group.slice(2) + group[1] + group[2]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    let prime = 2\n    while (prime < n) {\n        let x = prime + prime\n        if (x < n && isPrime(x)) {\n            prime = x\n        }\n    }\n    return prime\n}\n\n/*\n  isPrime returns true if n is prime.\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(5)\n  true\n  >>> isPrime(6)\n  false\n  >>> isPrime(7)\n  false\n  >>> isPrime(8)\n  true\n  >>> isPrime(9)\n  true\n  >>> isPrime(10)\n  false\n  >>> isPrime(11)\n  true\n  >>> isPrime(12)\n  false\n  */\nconst isPrime = (n) => {\n    let divisor = 1\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            return false\n        }\n        divisor += 1\n    }\n    return true\n}\n\n/*\n  generatePrime returns prime number that is prime and\n  also is divisible by n.\n  >>> generatePrime(1)\n  2\n  >>> generatePrime(2)\n  3\n  >>> generatePrime(3)\n  5\n  >>> generatePrime(4)\n  7\n  >>> generatePrime(5)\n  11\n  >>> generatePrime(6)\n  13\n  >>> generatePrime(7)\n  17\n  >>> generatePrime(8)\n  19\n  >>> generatePrime(9)\n  23\n  >>> generatePrime(10)\n  29\n  >>> generatePrime(11)\n  31\n  >>> generatePrime(12)\n  37\n  */\nconst generatePrime = (n) => {\n    let prime = 1\n    while (prime < n) {\n        let x = prime + prime\n        if (x < n && isPrime(x)) {\n            prime = x\n        }\n    }\n    return prime\n}\n\nexport { primeFib, isPrime, generatePrime }\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let result = false;\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          result = true;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst isTriplesSumToZero = (l) => {\n  let result = false;\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          result = true;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst isPairsSumToZero = (l) => {\n  let result = false;\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        result = true;\n      }\n    }\n  }\n  return result;\n};\n\nconst isDoublySumToZero = (l) => {\n  let result = false;\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        result = true;\n      }\n    }\n  }\n  return result;\n};\n\nconst isPositive = (x) => {\n  return x > 0;\n};\n\nconst isNegative = (x) => {\n  return x < 0;\n};\n\nconst isZero = (x) => {\n  return x === 0;\n};\n\nconst allPositive = (l) => {\n  return l.every(isPositive);\n};\n\nconst allNegative = (l) => {\n  return l.every(isNegative);\n};\n\nconst allZero = (l) => {\n  return l.every(isZero);\n};\n\nconst allInRange = (l, min, max) => {\n  return l.every(x => x >= min && x <= max);\n};\n\nconst allPairsSumToZero = (l) => {\n  return l.every(isPairsSumToZero);\n};\n\nconst allTriplesSumToZero = (l) => {\n  return l.every(isTriplesSumToZero);\n};\n\nconst allDoublySumToZero = (l) => {\n  return l.every(isDoublySumToZero);\n};\n\nmodule.exports = {\n  triplesSumToZero,\n  isTriplesSumToZero,\n  isPairsSumToZero,\n  isDoublySumToZero,\n  isPositive,\n  isNegative,\n  isZero,\n  allPositive,\n  allNegative,\n  allZero,\n  allInRange,\n  allPairsSumToZero,\n  allTriplesSumToZero,\n  allDoublySumToZero\n};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly square boundlessly long line. \n   n car are drive exit to correctly;   simultaneously, a unlike set of n car \n   are drive right to left.    The two sets of cars start out be very far from \n   each early.   All cars motivate in the like amphetamine.   Two cars are said to clash \n   when a car that's move left to proper hit a car that's move good to left. \n   However, the cars are infinitely sturdy and hard; as a solution, they continue be active \n   in their trajectory as if they did not clash. \n\n   This function output the number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly square boundlessly long line. \n   n car are drive exit to correctly;   simultaneously, a unlike set of n car \n   are drive right to left.    The two sets of cars start out be very far from \n   each early.   All cars motivate in the like amphetamine.   Two cars are said to clash \n   when a car that's move left to proper hit a car that's move good to left. \n   However, the cars are infinitely sturdy and hard; as a solution, they continue be active \n   in their trajectory as if they did not clash. \n\n   This function output the number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n\tfor (i = 0; i < n; i++) {\n\t\tfor (j = 0; j < n; j++) {\n\t\t\tif (i!= j) {\n\t\t\t\tif (carRace[i].x + carRace[j].x < 0 || carRace[i].x + carRace[j].x > 1000 || carRace[i].y + carRace[j].y < 0 || carRace[i].y + carRace[j].y > 1000)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (carRace[i].vx + carRace[j].vx < 0 || carRace[i].vx + carRace[j].vx > 1000 || carRace[i].vy + carRace[j].vy < 0 || carRace[i].vy + carRace[j].vy > 1000)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (carRace[i].x + carRace[j].x + carRace[i].vx - carRace[j].vx < 0 || carRace[i].x + carRace[j].x + carRace[i].vx - carRace[j].vx > 1000 || carRace[i].y + carRace[j].y + carRace[i].vy - carRace[j].vy < 0 || carRace[i].y + carRace[j].y + carRace[i].vy - carRace[j].vy > 1000)\n\t\t\t\t\tcontinue;\n\t\t\t\tcollisions++;\n\t\t\t}\n\t\t}\n\t}\n};\n \n\nmodule.exports = carRaceCollision;\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.reduce((a, b) => a + b, 0);\n}\n\nmodule.exports = incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    let n = l.length;\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += l[i];\n    }\n    if (sum === 0) {\n        return true;\n    }\n    if (sum === 0) {\n        return false;\n    }\n    if (l.indexOf(0) === -1) {\n        return false;\n    }\n    let pairSum = 0;\n    let i = 0;\n    while (i < n - 1) {\n        if (l[i] === 0) {\n            pairSum += l[i + 1];\n            if (pairSum === 0) {\n                return true;\n            }\n            i++;\n        } else {\n            i++;\n        }\n    }\n    return false;\n}\n\n/*\n  pairsSumToZero returns the number of distinct elements in the list.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  2\n  >>> pairsSumToZero([1, 3, -2, 1])\n  2\n  >>> pairsSumToZero([1, 2, 3, 7])\n  3\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  4\n  >>> pairsSumToZero([1])\n  1\n  */\nconst pairsSumToZero = (l) => {\n    let n = l.length;\n    let pairSum = 0;\n    let i = 0;\n    while (i < n) {\n        pairSum += l[i];\n        if (pairSum === 0) {\n            return pairSum;\n        }\n        i++;\n    }\n    return pairSum;\n}\n\n/*\n  pairsSumToZero returns the number of distinct elements in the list.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  2\n  >>> pairsSumToZero([1, 3, -2, 1])\n  2\n  >>> pairsSumToZero([1, 2, 3, 7])\n  3\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  4\n  >>> pairsSumToZero([1])\n  1\n  */\nconst pairsSumToZero = (l) => {\n    let n = l.length;\n    let pairSum = 0;\n    let i = 0;\n    while (i < n) {\n        pairSum += l[i];\n        i++;\n    }\n    return pairSum;\n}\n\n/*\n  pairsSumToZero returns the number of distinct elements in the list.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  2\n  >>> pairsSumToZero([1, 3, -2, 1])\n  2\n  >>> pairsSumToZero([1, 2, 3, 7])\n  3\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  4\n  >>> pairsSumToZero([1])\n  1\n  */\nconst pairsSumToZero = (l) => {\n    let n = l.length;\n    let pairSum = 0;\n    let i = 0;\n    while (i < n) {\n        pairSum += l[i];\n        i++;\n    }\n    return pairSum;\n}\n\n/*\n  pairsSumToZero returns the number of distinct elements in the list.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  2\n  >>> pairsSumToZero([1, 3, -2, 1])\n  2\n  >>> pairsSumToZero([1, 2, 3, 7])\n  3\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  4\n  >>> pairsSumToZero([1])\n  1\n  */\nconst pairsSumToZero = (l) => {\n    let n = l.length;\n    let pairSum = 0;\n    let i = 0;\n    while (i < n) {\n        pairSum += l[i];\n        i++;\n    }\n    return pairSum;\n}\n\n/*\n  pairsSumToZero returns the number of distinct elements in the list.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  2\n  >>> pairsSumToZero([1, 3, -2, 1])\n  2\n  >>> pairsSumToZero([1, 2, 3, 7])\n  3\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  4\n  >>> pairsSumToZero([1])\n  1\n  */\nconst pairsSumToZero = (l) => {\n    let n = l.length;\n    let pairSum = 0;\n    let i = 0;\n    while (i < n) {\n        pairSum += l[i];\n        i++;\n    }\n    return pairSum;\n}\n\nmodule.exports = pairsSumToZero;<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return drawstring theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return drawstring theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n    const result = [];\n    for(let i=0; i<x; i++){\n        let curDigit = x % base;\n        x = x / base;\n        if(x!= 0){\n            curDigit = curDigit * base;\n        }\n        result.push(curDigit);\n    }\n    return result.reverse().join('');\n}\n\nconst drawstring = (x, base) => {\n    let result = '';\n    while(x!= 0){\n        let curDigit = x % base;\n        x = x / base;\n        if(x!= 0){\n            curDigit = curDigit * base;\n        }\n        result = curDigit + result;\n    }\n    return result;\n}\n\nconst main = () => {\n    let x = drawstring(8, 2);\n    let y = drawstring(12, 3);\n    let result = changeBase(x, y);\n    console.log(result);\n}\n\nmain();<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h / 2);\n};\n\n/*Given length of a side and high return sphere for a rectangle.\n  >>> rectangleArea(5, 3)\n  15\n  */\nconst rectangleArea = (a, h) => {\n  return (a * h);\n};\n\n/*Given length of a side and high return sphere for a cylinder.\n  >>> cylinderArea(5, 3)\n  10\n  */\nconst cylinderArea = (a, h) => {\n  return (a * h * Math.PI);\n};\n\n/*Given length of a side and high return sphere for a cone.\n  >>> coneArea(5, 3)\n  9\n  */\nconst coneArea = (a, h) => {\n  return (a * h * (h - Math.sqrt(h * h - 4 * a * a)) / (2 * a));\n};\n\n/*Given length of a side and high return sphere for a hyperboloid.\n  >>> hyperboloidArea(5, 3)\n  30\n  */\nconst hyperboloidArea = (a, h) => {\n  return (a * h * (h * h / 4 + (1 / (2 * a))));\n};\n\n/*Given length of a side and high return sphere for a torus.\n  >>> torusArea(5, 3)\n  25\n  */\nconst torusArea = (a, h) => {\n  return (a * h * (h * h + a * a) / (4 * a));\n};\n\n/*Given length of a side and high return sphere for a paraboloid.\n  >>> paraboloidArea(5, 3)\n  30\n  */\nconst paraboloidArea = (a, h) => {\n  return (a * h * (h + (1 / (2 * a))));\n};\n\n/*Given length of a side and high return sphere for a regular polygon.\n  >>> regularPolygonArea(5, 3)\n  35\n  */\nconst regularPolygonArea = (a, n) => {\n  return (a * n * (2 * Math.PI / n));\n};\n\n/*Given length of a side and high return sphere for a right triangle.\n  >>> rightTriangleArea(5, 3)\n  7.5\n  */\nconst rightTriangleArea = (a, h) => {\n  return (a * h / 2);\n};\n\n/*Given length of a side and high return sphere for a regular polygon.\n  >>> regularPolygonArea(5, 3)\n  35\n  */\nconst regularPolygonArea = (a, n) => {\n  return (a * n * (2 * Math.PI / n));\n};\n\n/*Given length of a side and high return sphere for a regular polygon.\n  >>> regularPolygonArea(5, 3)\n  35\n  */\nconst regularPolygonArea = (a, n) => {\n  return (a * n * (2 * Math.PI / n));\n};\n\n/*Given length of a side and high return sphere for a regular polygon.\n  >>> regularPolygonArea(5, 3)\n  35\n  */\nconst regularPolygonArea = (a, n) => {\n  return (a * n * (2 * Math.PI / n));\n};\n\n/*Given length of a side and high return sphere for a regular polygon.\n  >>> regularPolygonArea(5, 3)\n  35\n  */\nconst regularPolygonArea = (a, n) => {\n  return (a * n * (2 * Math.PI / n));\n};\n\n/*Given length of a side and high return sphere for a regular polygon.\n  >>> regularPolygonArea(5, 3)\n  35\n  */\nconst regularPolygonArea = (a, n) => {\n  return (a * n * (2 * Math.PI / n));\n};\n\n/*Given length of a side and high return sphere for a regular polygon.\n  >>> regularPolygonArea(5, 3)\n  35\n  */\nconst regularPolygonArea = (a, n) => {\n  return (a * n * (2 * Math.PI / n));\n};\n\n/*Given length of a side and high return sphere for a regular polygon.\n  >>> regularPolygonArea(5, 3)\n  35\n  */\nconst regularPolygonArea = (a, n) => {\n  return (a * n * (2 * Math.PI / n));\n};\n\n/*Given length of a side and high return sphere for a regular polygon.\n  >>> regularPolygonArea(5, 3)\n  35\n  */\nconst regularPolygonArea = (a, n) => {\n  return (a * n * (2 * Math.PI / n));\n};\n\n/*Given length of a side and high return sphere for a regular polygon.\n  >>> regularPolygonArea(5, 3)\n  35\n  */\nconst regularPolygonArea = (a, n) => {\n  return (a * n * (2 * Math.PI / n));\n};\n\n/*Given length of a side and high return sphere for a regular polygon.\n  >>> regularPolygonArea(5, 3)\n  35\n  */\nconst regularPolygonArea = (a, n) => {\n  return (a * n * (2 * Math.PI / n));\n};\n\n/*Given length of a side and high return sphere for a regular polygon.\n  >>> regularPolygonArea(5, 3)\n  35\n  */\nconst regularPolygonArea = (a, n) => {\n  return (a * n * (2 * Math.PI / n));\n};\n\n/*Given length of a side and high return sphere for a regular polygon.\n  >>> regularPolygonArea(5, 3)\n  35\n  */\nconst regularPolygonArea = (a, n) => {\n  return (a * n * (2 * Math.PI / n));\n};\n\n/*Given length of a side and high return sphere for a regular polygon.\n  >>> regularPolygonArea(5, 3)\n  35\n  */\nconst regularPolygonArea = (a, n) => {\n  return (a * n * (2 * Math.PI / n));\n};\n\n/*Given length of a side and high return sphere for a regular polygon.\n  >>> regularPolygonArea(5, 3)\n  35\n  */\nconst regularPolygon"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please publish a affair to efficiently calculate the n-th component of the fib4 phone number sequence.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please publish a affair to efficiently calculate the n-th component of the fib4 phone number sequence.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n        return 2;\n    }\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconst fib4_iter = (n) => {\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n        return 2;\n    }\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4_iter(5));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const n = sorted.length;\n  if (n === 0) {\n    return undefined;\n  } else if (n === 1) {\n    return sorted[0];\n  } else if (n % 2 === 1) {\n    return sorted[(n - 1) / 2];\n  } else {\n    const i = Math.floor(n / 2);\n    return (sorted[i - 1] + sorted[i]) / 2;\n  }\n};\n\nmodule.exports = median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": false, "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n === 0) return 0;\n  const result = n % p;\n  if (result === 0) return n;\n  return result;\n};\n\n// ----------------------------------------------------------------------------\n\n/**\n  * Returns the product of a list of numbers.\n  * @param {number[]} nums - The list of numbers.\n  * @return {number} The product of the list of numbers.\n  * @example\n  *\n  * ```javascript\n  * var product = product([1, 2, 3, 4, 5]);\n  * // returns 24\n  * // If the product is calculated in a loop, it's much more efficient.\n  * var product = product([1, 2, 3, 4, 5]);\n  * // returns 24\n  * ```\n  *\n  * ```javascript\n  * const product = product([1, 2, 3, 4, 5]);\n  * // returns 24\n  * ```\n  *\n  * ```javascript\n  * var nums = [1, 2, 3, 4, 5];\n  * // Returns 24\n  * // If the product is calculated in a loop, it's much more efficient.\n  * var product = product(nums);\n  * // Returns 24\n  * ```\n  */\nconst product = nums => nums.reduce((a, b) => a * b, 1);\n\n/**\n  * Returns the sum of a list of numbers.\n  * @param {number[]} nums - The list of numbers.\n  * @return {number} The sum of the list of numbers.\n  * @example\n  *\n  * ```javascript\n  * var sum = sum([1, 2, 3, 4, 5]);\n  * // returns 15\n  * // If the sum is calculated in a loop, it's much more efficient.\n  * var sum = sum([1, 2, 3, 4, 5]);\n  * // returns 15\n  * ```\n  *\n  * ```javascript\n  * const sum = sum([1, 2, 3, 4, 5]);\n  * // returns 15\n  * ```\n  *\n  * ```javascript\n  * var nums = [1, 2, 3, 4, 5];\n  * // Returns 15\n  * // If the sum is calculated in a loop, it's much more efficient.\n  * var sum = sum(nums);\n  * // Returns 15\n  * ```\n  */\nconst sum = nums => nums.reduce((a, b) => a + b, 0);\n\n/**\n  * Returns the smallest number in a list.\n  * @param {number[]} nums - The list of numbers.\n  * @return {number} The smallest number in the list.\n  * @example\n  *\n  * ```javascript\n  * var smallest = smallest([1, 2, 3, 4, 5]);\n  * // returns 1\n  * // If the smallest is calculated in a loop, it's much more efficient.\n  * var smallest = smallest([1, 2, 3, 4, 5]);\n  * // returns 1\n  * ```\n  *\n  * ```javascript\n  * const smallest = smallest([1, 2, 3, 4, 5]);\n  * // returns 1\n  * ```\n  *\n  * ```javascript\n  * var nums = [1, 2, 3, 4, 5];\n  * // Returns 1\n  * // If the smallest is calculated in a loop, it's much more efficient.\n  * var smallest = smallest(nums);\n  * // Returns 1\n  * ```\n  */\nconst smallest = nums => nums.sort((a, b) => a - b)[0];\n\n// ----------------------------------------------------------------------------\n\n/**\n  * Calculates the modular inverse of a number.\n  * @param {number} n - The number to invert.\n  * @param {number} p - The modulus.\n  * @return {number} The modular inverse of n modulo p.\n  * @example\n  *\n  * ```javascript\n  * var modp = modp(3, 5);\n  * // returns 3\n  * // If the modular inverse is calculated in a loop, it's much more efficient.\n  * var modp = modp(3, 5);\n  * // returns 3\n  * ```\n  *\n  * ```javascript\n  * const modp = modp(3, 5);\n  * // returns 3\n  * ```\n  *\n  * ```javascript\n  * var modp = modp(3, 11);\n  * // returns 3\n  * // If the modular inverse is calculated in a loop, it's much more efficient.\n  * var modp = modp(3, 11);\n  * // returns 3\n  * ```\n  */\nconst modp = (n, p) => modp(n, p, 1);\n\n/**\n  * Calculates the modular inverse of a number, using a given starting number.\n  * @param {number} n - The number to invert.\n  * @param {number} p - The modulus.\n  * @param {number} start - The starting number.\n  * @return {number} The modular inverse of n modulo p, starting at start.\n  * @example\n  *\n  * ```javascript\n  * var modp = modp(3, 5, 0);\n  * // returns 3\n  * // If the modular inverse is calculated in a loop, it's much more efficient.\n  * var modp = modp(3, 5, 0);\n  * // returns 3\n  * ```\n  *\n  * ```javascript\n  * const modp = modp(3, 11, 0);\n  * // returns 3\n  * // If the modular inverse is calculated in a loop, it's much more efficient.\n  * var modp = modp(3, 11, 0);\n  * // returns 3\n  * ```\n  */\nconst modp = (n, p, start) => modp(n, p, start, 1);\n\n// ----------------------------------------------------------------------------\n\n/**\n  * Calculates the factorial of a number.\n  * @param {number} n -"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes as remark string encode with encode_shift routine. return decoded string. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as remark string encode with encode_shift routine. return decoded string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n   ) ).join(\"\");\n } \n\n / *\n   takes as remark string encode with encode_shift routine. return decoded string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n   ) ).join(\"\");\n } \n */<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string and returns drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g,'')\n}\n\n/**\n  isVowel is a function that takes string and returns true if it is a vowel.\n  >>> isVowel(\"a\")\n  true\n  >>> isVowel(\"A\")\n  false\n  >>> isVowel(\"ab\")\n  true\n  >>> isVowel(\"\")\n  false\n  >>> isVowel(\"abcd\")\n  false\n  */\nconst isVowel = (text) => {\n    return /[aeiouAEIOU].*$/.test(text)\n}\n\n/**\n  isVowel is a function that takes string and returns true if it is a vowel.\n  >>> isVowel(\"a\")\n  true\n  >>> isVowel(\"A\")\n  false\n  >>> isVowel(\"ab\")\n  true\n  >>> isVowel(\"\")\n  false\n  >>> isVowel(\"abcd\")\n  false\n  */\nconst isVowel = (text) => {\n    return /[aeiouAEIOU].*$/.test(text)\n}\n\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g,'')\n}\n\nconst isVowel = (text) => {\n    return /[aeiouAEIOU].*$/.test(text)\n}\n\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g,'')\n}\n\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g,'')\n}\n\nconst isVowel = (text) => {\n    return /[aeiouAEIOU].*$/.test(text)\n}\n\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g,'')\n}\n\nconst isVowel = (text) => {\n    return /[aeiouAEIOU].*$/.test(text)\n}\n\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g,'')\n}\n\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g,'')\n}\n\nconst isVowel = (text) => {\n    return /[aeiouAEIOU].*$/.test(text)\n}\n\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g,'')\n}\n\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g,'')\n}\n\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g,'')\n}\n\nconst isVowel = (text) => {\n    return /[aeiouAEIOU].*$/.test(text)\n}\n\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g,'')\n}\n\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g,'')\n}\n\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g,'')\n}\n\nconst isVowel = (text) => {\n    return /[aeiouAEIOU].*$/.test(text)\n}\n\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g,'')\n}\n\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g,'')\n}\n\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g,'')\n}\n\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g,'')\n}\n\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g,'')\n}\n\nconst isVowel = (text) => {\n    return /[aeiouAEIOU].*$/.test(text)\n}\n\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g,'')\n}\n\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g,'')\n}\n\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g,'')\n}\n\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g,'')\n}\n\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g,'')\n}\n\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g,'')\n}\n\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": false, "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(v => v <= t);\n};\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(v => v >= t);\n};\n\n/*Return the median of the list l.\n  >>> median([1, 2, 4, 10])\n  4\n  >>> median([1, 2, 4, 10, -10])\n  4\n  >>> median([1, 2, 4, -10])\n  -10\n  */\nconst median = (l) => {\n  l = l.sort(Number.compare);\n  if (l.length % 2 === 0) {\n    return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n  }\n  return l[l.length / 2];\n};\n\n/*Return the sum of the numbers in the list l.\n  >>> sum([1, 2, 4, 10, -10, 20])\n  26\n  */\nconst sum = (l) => {\n  return l.reduce((pre, next) => pre + next, 0);\n};\n\n/*Return the average of the numbers in the list l.\n  >>> average([1, 2, 4, 10, -10, 20])\n  7.5\n  >>> average([1, 2, 4, 10, -10, -20])\n  -20\n  */\nconst average = (l) => {\n  return sum(l) / l.length;\n};\n\n/*Return the minimum of the numbers in the list l.\n  >>> min([1, 2, 4, 10, -10, 20])\n  1\n  >>> min([1, 2, 4, 10, -10, -20])\n  -20\n  */\nconst min = (l) => {\n  return Math.min.apply(null, l);\n};\n\n/*Return the maximum of the numbers in the list l.\n  >>> max([1, 2, 4, 10, -10, 20])\n  10\n  >>> max([1, 2, 4, 10, -10, -20])\n  20\n  */\nconst max = (l) => {\n  return Math.max.apply(null, l);\n};\n\n/*Return the average of the numbers in the list l.\n  >>> average([1, 2, 4, 10, -10, 20])\n  7.5\n  >>> average([1, 2, 4, 10, -10, -20])\n  -20\n  */\nconst average = (l) => {\n  return sum(l) / l.length;\n};\n\n/*Return the median of the list l.\n  >>> median([1, 2, 4, 10, -10, 20])\n  4\n  >>> median([1, 2, 4, 10, -10, -20])\n  4\n  >>> median([1, 2, 4, -10, -20])\n  -10\n  */\nconst median = (l) => {\n  l = l.sort(Number.compare);\n  if (l.length % 2 === 0) {\n    return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n  }\n  return l[l.length / 2];\n};\n\n/*Return the sum of the numbers in the list l.\n  >>> sum([1, 2, 4, 10, -10, 20])\n  26\n  */\nconst sum = (l) => {\n  return l.reduce((pre, next) => pre + next, 0);\n};\n\n/*Return the average of the numbers in the list l.\n  >>> average([1, 2, 4, 10, -10, 20])\n  7.5\n  >>> average([1, 2, 4, 10, -10, -20])\n  -20\n  */\nconst average = (l) => {\n  return sum(l) / l.length;\n};\n\n/*Return the minimum of the numbers in the list l.\n  >>> min([1, 2, 4, 10, -10, 20])\n  1\n  >>> min([1, 2, 4, 10, -10, -20])\n  -20\n  */\nconst min = (l) => {\n  return Math.min.apply(null, l);\n};\n\n/*Return the maximum of the numbers in the list l.\n  >>> max([1, 2, 4, 10, -10, 20])\n  10\n  >>> max([1, 2, 4, 10, -10, -20])\n  20\n  */\nconst max = (l) => {\n  return Math.max.apply(null, l);\n};\n\n/*Return the average of the numbers in the list l.\n  >>> average([1, 2, 4, 10, -10, 20])\n  7.5\n  >>> average([1, 2, 4, 10, -10, -20])\n  -20\n  */\nconst average = (l) => {\n  return sum(l) / l.length;\n};\n\n/*Return the median of the list l.\n  >>> median([1, 2, 4, 10, -10, 20])\n  4\n  >>> median([1, 2, 4, 10, -10, -20])\n  4\n  >>> median([1, 2, 4, -10, -20])\n  -10\n  */\nconst median = (l) => {\n  l = l.sort(Number.compare);\n  if (l.length % 2 === 0) {\n    return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n  }\n  return l[l.length / 2];\n};\n\nmodule.exports = {\n  sum,\n  average,\n  min,\n  max,\n  median,\n  belowThreshold,\n  aboveThreshold\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y\n}\n\n/*\n  Add two numbers x and y,\n  and then subtract the result from the original\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return add(x, -y)\n}\n\n/*\n  Add two numbers x and y,\n  and then multiply the result by 10\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  return add(x, multiply(y, 10))\n}\n\n/*\n  Add two numbers x and y,\n  and then divide the result by 10\n  >>> divide(2, 3)\n  0.6\n  >>> divide(5, 7)\n  2.5\n  */\nconst divide = (x, y) => {\n  return multiply(x, 1 / multiply(y, 10))\n}\n\n/*\n  Add two numbers x and y,\n  and then take the modulo of the result by 10\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  4\n  */\nconst modulo = (x, y) => {\n  return subtract(multiply(x, y), multiply(add(x, y), 10))\n}\n\n/*\n  Add two numbers x and y,\n  and then take the floor of the result\n  >>> floor(2, 3)\n  2\n  >>> floor(5, 7)\n  5\n  >>> floor(10, 7)\n  10\n  */\nconst floor = (x, y) => {\n  return subtract(add(x, y), 1)\n}\n\n/*\n  Add two numbers x and y,\n  and then take the ceil of the result\n  >>> ceil(2, 3)\n  3\n  >>> ceil(5, 7)\n  6\n  >>> ceil(10, 7)\n  11\n  */\nconst ceil = (x, y) => {\n  return subtract(add(x, y), 1)\n}\n\n/*\n  Add two numbers x and y,\n  and then take the round of the result\n  >>> round(2, 3)\n  2\n  >>> round(5, 7)\n  5\n  >>> round(10, 7)\n  10\n  */\nconst round = (x, y) => {\n  return add(subtract(ceil(x, y), 1), 1)\n}\n\n/*\n  Add two numbers x and y,\n  and then take the truncate of the result\n  >>> truncate(2, 3)\n  2\n  >>> truncate(5, 7)\n  5\n  >>> truncate(10, 7)\n  10\n  */\nconst truncate = (x, y) => {\n  return add(subtract(floor(x, y), 1), 1)\n}\n\n/*\n  Given two numbers,\n  and then take the remainder of the difference\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  2\n  */\nconst remainder = (x, y) => {\n  return subtract(add(x, y), floor(x, y))\n}\n\n/*\n  Given two numbers,\n  and then take the quotient of the difference\n  >>> quotient(2, 3)\n  0.6\n  >>> quotient(5, 7)\n  2.5\n  */\nconst quotient = (x, y) => {\n  return divide(add(x, y), subtract(x, y))\n}\n\n/*\n  Given two numbers,\n  and then take the square of the difference\n  >>> square(2, 3)\n  4\n  >>> square(5, 7)\n  25\n  */\nconst square = (x, y) => {\n  return multiply(subtract(add(x, y), floor(x, y)), 2)\n}\n\n/*\n  Given two numbers,\n  and then take the cube of the difference\n  >>> cube(2, 3)\n  8\n  >>> cube(5, 7)\n  125\n  */\nconst cube = (x, y) => {\n  return multiply(multiply(subtract(add(x, y), floor(x, y)), 2), 3)\n}\n\n/*\n  Given two numbers,\n  and then take the power of the difference\n  >>> power(2, 3)\n  8\n  >>> power(5, 7)\n  125\n  */\nconst power = (x, y) => {\n  return multiply(multiply(multiply(subtract(add(x, y), floor(x, y)), 2), 3), 2)\n}\n\n/*\n  Given two numbers,\n  and then take the root of the difference\n  >>> root(2, 3)\n  1\n  >>> root(5, 7)\n  2.5\n  */\nconst root = (x, y) => {\n  return divide(multiply(subtract(add(x, y), floor(x, y)), 2), 3)\n}\n\n/*\n  Given two numbers,\n  and then take the natural logarithm of the difference\n  >>> ln(2, 3)\n  1.0\n  >>> ln(5, 7)\n  2.0\n  */\nconst ln = (x, y) => {\n  return multiply(add(x, y), Math.log(subtract(x, y)))\n}\n\n/*\n  Given two numbers,\n  and then take the natural logarithm of the difference\n  >>> log(2, 3)\n  0.6931\n  >>> log(5, 7)\n  1.1763\n  */\nconst log = (x, y) => {\n  return divide(multiply(add(x, y), ln(x, y)), 2)\n}\n\n/*\n  Given two numbers,\n  and then take the natural logarithm of the difference\n  >>> log10(2, 3)\n  0.5\n  >>> log10(5, 7)\n  1.0\n  */\nconst log10 = (x, y) => {\n  return divide(multiply(add(x, y), ln(x, y)), 10)\n}\n"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    if (s0.length!== s1.length) return false;\n    const s0Char = s0.charAt(0);\n    const s1Char = s1.charAt(0);\n    const isSameChar = s0Char === s1Char;\n    return isSameChar && s0.substring(1) === s1.substring(1);\n};\n\nmodule.exports = {\n    sameChars\n};<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 1; i <= n; i++) {\n    b = a + b;\n    a = b - a;\n  }\n  return b;\n};\n\nconsole.log(fib(10));\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const numOfBrackets = brackets.length;\n  const opening = brackets.match(/</g);\n  const closing = brackets.match(/>/g);\n  const open = opening.length;\n  const close = closing.length;\n  let count = 0;\n\n  if (open === 0 || close === 0) return false;\n\n  for (let i = 0; i < numOfBrackets; i++) {\n    const openingBracket = opening[i];\n    const closingBracket = closing[i];\n\n    if (openingBracket.length!== close.length) {\n      return false;\n    }\n    if (closingBracket.length!== open.length) {\n      return false;\n    }\n\n    const openLength = openingBracket.length;\n    const closeLength = closingBracket.length;\n    for (let j = 0; j < openLength; j++) {\n      const openBracket = openingBracket[j];\n      const closeBracket = closingBracket[j];\n      if (openBracket!== closeBracket) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  brackets: correctBracketing\n};\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = Array.from(l).sort((a, b) => a - b);\n  return sorted[0] > sorted[1];\n};\n\nmodule.exports = monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  // get unique elements\n  const l1s = new Set(l1);\n  const l2s = new Set(l2);\n  // get the union\n  const l1u = new Set(l1);\n  l1u.addAll(l2);\n  // get the intersection\n  const l2u = new Set(l2);\n  l2u.addAll(l1);\n  // get the difference\n  const l1d = new Set(l1);\n  l1d.deleteAll(l2);\n  // sort the common\n  const common = [...l1s].sort().filter(x => l2s.has(x));\n  // the common has to be in the sorted unique list\n  if (common.length === 0) return [];\n  // get the rest\n  const rest = [...l1u,...l2u,...l1d];\n  return common.concat(rest.sort());\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const isPrime = (n) => {\n    const i = 2;\n    while (i * i <= n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  let largestPrime = 0;\n  let prime = 0;\n  while (true) {\n    largestPrime = Math.sqrt(n);\n    prime = largestPrime + 1;\n    if (isPrime(prime)) {\n      return prime;\n    }\n    n -= prime;\n  }\n}\n\n/* Return the number of primes less than n. Assume n > 1. */\nconst numberOfPrimesLessThan = (n) => {\n  let count = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/* Return the number of perfect n-trees. */\nconst numberOfPerfectTrees = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    count += numberOfPrimesLessThan(i);\n  }\n  return count;\n}\n\n/* Return the number of n-trees. */\nconst numberOfTrees = (n) => {\n  let count = 1;\n  for (let i = 1; i < n; i++) {\n    count *= numberOfPrimesLessThan(i);\n  }\n  return count;\n}\n\nconst a = largestPrimeFactor(2147483647)\nconsole.log(a)\n\n/*\n\n```\n/*\nReturn the number of n-trees. Assume n > 0.\n\nHere is a sample program that finds the number of n-trees.\n\n```javascript\nconst numberOfTrees = (n) => {\n  let count = 1;\n  for (let i = 1; i < n; i++) {\n    count *= numberOfPrimesLessThan(i);\n  }\n  return count;\n}\n\nconsole.log(numberOfTrees(20));\n\n```\n\n[Learn More](https://en.wikipedia.org/wiki/N-tree)\n\n[Source code](https://github.com/shivaram-sanjay/Competitive-Programming-Exercises-in-Depth/blob/master/src/main.js)\n\n[Test](https://jsfiddle.net/shivaram-sanjay/7qf9j/1/)\n\n*/\n\n/*\n\n```javascript\nfunction isPrime(n) {\n  const i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nfunction largestPrimeFactor(n) {\n  const isPrime = (n) => {\n    const i = 2;\n    while (i * i <= n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  let largestPrime = 0;\n  let prime = 0;\n  while (true) {\n    largestPrime = Math.sqrt(n);\n    prime = largestPrime + 1;\n    if (isPrime(prime)) {\n      return prime;\n    }\n    n -= prime;\n  }\n}\n\nfunction numberOfPrimesLessThan(n) {\n  let count = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n}\n\nfunction numberOfTrees(n) {\n  let count = 1;\n  for (let i = 1; i < n; i++) {\n    count *= numberOfPrimesLessThan(i);\n  }\n  return count;\n}\n\nconsole.log(numberOfTrees(20));\n\n```\n\n[Learn More](https://en.wikipedia.org/wiki/N-tree)\n\n[Source code](https://github.com/shivaram-sanjay/Competitive-Programming-Exercises-in-Depth/blob/master/src/main.js)\n\n[Test](https://jsfiddle.net/shivaram-sanjay/7qf9j/2/)\n\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": false, "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += n\n    n--\n  }\n  return sum\n}\n\n// The function below prints the first few numbers in the Fibonacci sequence.\n//\n// Note that the sequence starts at 1 and ends at a number that is the sum of the first two numbers.\n//\n// Fibonacci numbers can be represented as the sum of the two previous numbers.\n//\n// For example, the first 10 numbers in the Fibonacci sequence are:\n//\n// 1, 1, 2, 3, 5, 8, 13, 21, 34, 55\n//\n// The first two numbers in the Fibonacci sequence are 1 and 1.\n// The second two numbers in the Fibonacci sequence are 2 and 3.\n// The third two numbers in the Fibonacci sequence are 5 and 8.\n// The fourth two numbers in the Fibonacci sequence are 13 and 21.\n// The fifth two numbers in the Fibonacci sequence are 34 and 55.\n//\n// The function below will print the first 10 Fibonacci numbers.\n\nconst fibonacci = (n) => {\n  const a = 1\n  const b = 1\n  while (n > 0) {\n    console.log(a)\n    a = b\n    b = a + b\n    n--\n  }\n}\n\n// fibonacci(10)\n// 1\n// 1\n// 2\n// 3\n// 5\n// 8\n// 13\n// 21\n// 34\n// 55\n// 66\n// 76\n// 89\n// 99\n// 110\n// 132\n// 165\n// 176\n// 197\n// 228\n// 269\n// 300\n// 331\n// 362\n// 395\n// 424\n// 447\n// 476\n// 515\n// 546\n// 577\n// 618\n// 649\n// 680\n// 711\n// 742\n// 775\n// 808\n// 841\n// 874\n// 907\n// 939\n// 970\n// 992\n// 1025\n// 1058\n// 1091\n// 1124\n// 1147\n// 1170\n// 1203\n// 1236\n// 1269\n// 1294\n// 1327\n// 1360\n// 1393\n// 1426\n// 1459\n// 1492\n// 1525\n// 1558\n// 1591\n// 1624\n// 1657\n// 1690\n// 1723\n// 1756\n// 1789\n// 1822\n// 1855\n// 1888\n// 1921\n// 1954\n// 1987\n// 2020\n// 2053\n// 2086\n// 2119\n// 2152\n// 2185\n// 2218\n// 2251\n// 2284\n// 2307\n// 2340\n// 2373\n// 2396\n// 2429\n// 2462\n// 2495\n// 2528\n// 2561\n// 2594\n// 2627\n// 2660\n// 2693\n// 2726\n// 2759\n// 2792\n// 2825\n// 2858\n// 2891\n// 2924\n// 2957\n// 2990\n// 3023\n// 3056\n// 3089\n// 3122\n// 3155\n// 3188\n// 3211\n// 3244\n// 3277\n// 3310\n// 3343\n// 3376\n// 3419\n// 3452\n// 3475\n// 3508\n// 3541\n// 3574\n// 3607\n// 3640\n// 3673\n// 3706\n// 3739\n// 3762\n// 3785\n// 3818\n// 3851\n// 3884\n// 3917\n// 3950\n// 3983\n// 4016\n// 4049\n// 4082\n// 4115\n// 4148\n// 4181\n// 4214\n// 4247\n// 4280\n// 4313\n// 4346\n// 4379\n// 4412\n// 4443\n// 4476\n// 4509\n// 4542\n// 4573\n// 4606\n// 4639\n// 4662\n// 4695\n// 4728\n// 4761\n// 4794\n// 4827\n// 4860\n// 4883\n// 4916\n// 4949\n// 4982\n// 5015\n// 5048\n// 5081\n// 5114\n// 5147\n// 5180\n// 5213\n// 5246\n// 5279\n// 5312\n// 5343\n// 5376\n// 5409\n// 5432\n// 5455\n// 5488\n// 5521\n// 5554\n// 5587\n// 5620\n// 5653\n// 5686\n// 5719\n// 5742\n// 5775\n// 5808\n// 5841\n// 5874\n// 5907\n// 5940\n// 5973\n// 6006\n// 6039\n// 6072\n// 6105\n// 6138\n// 6171\n// 6204\n// 6237\n// 6270\n// 6303\n// 6336\n// 6369\n// 6392\n// 6425\n// 6458\n// 6491\n// 6524\n// 6557\n// 6590\n// 6623\n// 6656\n// 6689\n// 6722\n// 6755\n// 6888\n// 6921\n// 6954\n// 6987\n// 7010\n// 7043\n// 7076\n// 7109\n// 7142\n// 7175\n// 7208\n// 7241\n// 7274\n// 7307\n// 7340\n// 7373\n// 7406\n// 7439\n// 7472\n// 7505\n// 7538\n// 7571\n// 7604\n// 7637\n// 7670\n// 7703\n// 7736\n// 7769\n// 7802\n// 7835\n// 7868\n// 7899\n// 7932\n// 7965\n// 7998\n// 8031\n// 8063\n// 8096\n// 8129\n// 8162\n// 8195\n// 8228\n// 8261\n// 8294\n// 8327\n// 8360\n// 8393\n// 8426\n// 8460\n// 8493\n// 8526\n// 8559\n// 8592\n// 8625\n// 8658\n// 8691\n// 8724\n// 8757\n// 8790\n// 8823\n// 8856\n// 8889\n// 8922\n// 8954\n// 8988\n// 9011\n//"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = []\n\n  for (let i = 0; i < brackets.length; i++) {\n    const char = brackets[i]\n\n    if (char === \")\") {\n      stack.pop()\n      continue\n    }\n\n    if (stack.length === 0) {\n      return false\n    }\n\n    const opening = stack[stack.length - 1]\n\n    if (opening === \"(\" && char === \")\") {\n      stack.pop()\n      continue\n    }\n\n    if (opening === \"(\" && char === \")\") {\n      stack.pop()\n      continue\n    }\n\n    if (opening === \"(\" && char === \")\") {\n      stack.pop()\n      continue\n    }\n\n    stack.push(char)\n  }\n\n  return stack.length === 0\n}\n\nexport {\n  bracketsAreCorrect,\n  correctBracketing\n}\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same mannequin.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same mannequin.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 1) {\n    return [1]\n  }\n  let d = [1]\n  for (let i = 1; i < xs.length; i++) {\n    d[i] = d[i - 1] * (xs[i] + xs[i - 1])\n  }\n  return d\n}\n\n/*\n  Given an array xs, return true if all the elements are positive.\n  >>> allPositive([1, 2, 3])\n  false\n  >>> allPositive([1, 2, 3, 4])\n  true\n  */\nconst allPositive = (xs) => {\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given an array xs, return true if all the elements are negative.\n  >>> allNegative([1, 2, 3])\n  false\n  >>> allNegative([-1, -2, -3])\n  true\n  */\nconst allNegative = (xs) => {\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] > 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given an array xs, return true if all the elements are zero.\n  >>> allZero([1, 2, 3])\n  false\n  >>> allZero([0, 0, 0])\n  true\n  */\nconst allZero = (xs) => {\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i]!== 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given an array xs, return true if all the elements are one.\n  >>> allOne([1, 2, 3])\n  false\n  >>> allOne([1, 2, 3, 4])\n  false\n  >>> allOne([1, 2, 3, 4, 5])\n  true\n  */\nconst allOne = (xs) => {\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i]!== 1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given an array xs, return true if all the elements are negative and positive.\n  >>> allNegativePositive([1, 2, 3])\n  true\n  >>> allNegativePositive([1, 2, 3, 4])\n  false\n  >>> allNegativePositive([-1, -2, -3])\n  false\n  >>> allNegativePositive([0, 0, 0])\n  false\n  >>> allNegativePositive([-1, -2, -3, 4])\n  false\n  */\nconst allNegativePositive = (xs) => {\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i]!== -1 && xs[i]!== 1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given an array xs, return true if all the elements are in the interval [0,1].\n  >>> allInInterval([0, 1, 2, 3])\n  false\n  >>> allInInterval([1, 2, 3, 4])\n  false\n  >>> allInInterval([-1, 0, 1, 2])\n  false\n  >>> allInInterval([0, 0, 0])\n  false\n  >>> allInInterval([-1, -2, -3, 1])\n  true\n  */\nconst allInInterval = (xs) => {\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] < 0 || xs[i] > 1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given an array xs, return true if all the elements are greater than zero.\n  >>> allGreaterThanZero([0, 1, 2, 3])\n  false\n  >>> allGreaterThanZero([1, 2, 3, 4])\n  false\n  >>> allGreaterThanZero([-1, -2, -3])\n  false\n  >>> allGreaterThanZero([-1, 0, 1, 2])\n  true\n  */\nconst allGreaterThanZero = (xs) => {\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] <= 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given an array xs, return true if all the elements are less than zero.\n  >>> allLessThanZero([0, 1, 2, 3])\n  true\n  >>> allLessThanZero([1, 2, 3, 4])\n  false\n  >>> allLessThanZero([-1, -2, -3])\n  true\n  >>> allLessThanZero([-1, 0, 1, 2])\n  false\n  */\nconst allLessThanZero = (xs) => {\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] >= 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given an array xs, return true if all the elements are equal.\n  >>> allEqual([1, 1, 1])\n  false\n  >>> allEqual([1, 2, 3])\n  true\n  */\nconst allEqual = (xs) => {\n  if (xs.length === 0) {\n    return false\n  }\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i]!== xs[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  "}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please publish a affair to efficiently calculate the n-th component of the fibfib phone number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please publish a affair to efficiently calculate the n-th component of the fibfib phone number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let a = 0, b = 1, i = 0, fib = [a, b, a, b];\n  while (i++ < n) {\n    let [a, b] = [fib[i - 2], fib[i - 1]];\n    fib.push(a + b);\n  }\n  return fib;\n};\n\nexport default fibfib;\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst vowelsCount = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst vowelsCount = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst vowelsCount = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst vowelsCount = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y' || s[i] === 'y' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits veracious by shift\n   and return the resultant role as a bowed stringed instrument. \n   If shift > numeral of digits, return finger reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits veracious by shift\n   and return the resultant role as a bowed stringed instrument. \n   If shift > numeral of digits, return finger reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift > x) {\n    return (x - shift)\n  } else {\n    return (x + (1 << (x.length - 1) - shift))\n  }\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShiftReverse = (x, shift) => {\n  if (shift > x) {\n    return (x - shift)\n  } else {\n    return (x + (1 << (x.length - 1) - shift))\n  }\n}\n\n/*\n  >>> circularShiftReverse(12, 1)\n  \"21\"\n  >>> circularShiftReverse(12, 2)\n  \"12\"\n  */\nconst circularShiftReverse2 = (x, shift) => {\n  if (shift > x) {\n    return (x - shift)\n  } else {\n    return (x + (1 << (x.length - 1) - shift))\n  }\n}\n\n/*\n  >>> circularShiftReverse(12, 1)\n  \"21\"\n  >>> circularShiftReverse(12, 2)\n  \"12\"\n  */\nconst circularShiftReverse3 = (x, shift) => {\n  if (shift > x) {\n    return (x - shift)\n  } else {\n    return (x + (1 << (x.length - 1) - shift))\n  }\n}\n\n/*\n  >>> circularShiftReverse(12, 1)\n  \"21\"\n  >>> circularShiftReverse(12, 2)\n  \"12\"\n  */\nconst circularShiftReverse4 = (x, shift) => {\n  if (shift > x) {\n    return (x - shift)\n  } else {\n    return (x + (1 << (x.length - 1) - shift))\n  }\n}\n\n/*\n  >>> circularShiftReverse(12, 1)\n  \"21\"\n  >>> circularShiftReverse(12, 2)\n  \"12\"\n  */\nconst circularShiftReverse5 = (x, shift) => {\n  if (shift > x) {\n    return (x - shift)\n  } else {\n    return (x + (1 << (x.length - 1) - shift))\n  }\n}\n\n/*\n  >>> circularShiftReverse(12, 1)\n  \"21\"\n  >>> circularShiftReverse(12, 2)\n  \"12\"\n  */\nconst circularShiftReverse6 = (x, shift) => {\n  if (shift > x) {\n    return (x - shift)\n  } else {\n    return (x + (1 << (x.length - 1) - shift))\n  }\n}\n\n/*\n  >>> circularShiftReverse(12, 1)\n  \"21\"\n  >>> circularShiftReverse(12, 2)\n  \"12\"\n  */\nconst circularShiftReverse7 = (x, shift) => {\n  if (shift > x) {\n    return (x - shift)\n  } else {\n    return (x + (1 << (x.length - 1) - shift))\n  }\n}\n\n/*\n  >>> circularShiftReverse(12, 1)\n  \"21\"\n  >>> circularShiftReverse(12, 2)\n  \"12\"\n  */\nconst circularShiftReverse8 = (x, shift) => {\n  if (shift > x) {\n    return (x - shift)\n  } else {\n    return (x + (1 << (x.length - 1) - shift))\n  }\n}\n\n/*\n  >>> circularShiftReverse(12, 1)\n  \"21\"\n  >>> circularShiftReverse(12, 2)\n  \"12\"\n  */\nconst circularShiftReverse9 = (x, shift) => {\n  if (shift > x) {\n    return (x - shift)\n  } else {\n    return (x + (1 << (x.length - 1) - shift))\n  }\n}\n\n/*\n  >>> circularShiftReverse(12, 1)\n  \"21\"\n  >>> circularShiftReverse(12, 2)\n  \"12\"\n  */\nconst circularShiftReverse10 = (x, shift) => {\n  if (shift > x) {\n    return (x - shift)\n  } else {\n    return (x + (1 << (x.length - 1) - shift))\n  }\n}\n\n/*\n  >>> circularShiftReverse(12, 1)\n  \"21\"\n  >>> circularShiftReverse(12, 2)\n  \"12\"\n  */\nconst circularShiftReverse11 = (x, shift) => {\n  if (shift > x) {\n    return (x - shift)\n  } else {\n    return (x + (1 << (x.length - 1) - shift))\n  }\n}\n\n/*\n  >>> circularShiftReverse(12, 1)\n  \"21\"\n  >>> circularShiftReverse(12, 2)\n  \"12\"\n  */\nconst circularShiftReverse12 = (x, shift) => {\n  if (shift > x) {\n    return (x - shift)\n  } else {\n    return (x + (1 << (x.length - 1) - shift))\n  }\n}\n\n/*\n  >>> circularShiftReverse(12, 1)\n  \"21\"\n  >>> circularShiftReverse(12, 2)\n  \"12\"\n  */\nconst circularShiftReverse13 = (x, shift) => {\n  if (shift > x) {\n    return (x - shift)\n  } else {\n    return (x + (1 << (x.length - 1) - shift))\n  }\n}\n\n/*\n  >>> circularShiftReverse(12, 1)\n  \"21\"\n  >>> circularShiftReverse(12, 2)\n  \"12\"\n  */\nconst circularShiftReverse14 = (x"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n    const sum = 0;\n    s.split(\"\").forEach(str => {\n        let x = parseInt(str, 10);\n        if (x >= 0 && x <= 9) {\n            sum += x;\n        }\n    });\n    return sum;\n};\n\ndigitSum.test = () => {\n    assert.equal(digitSum(\"\"), 0);\n    assert.equal(digitSum(\"abAB\"), 131);\n    assert.equal(digitSum(\"abcCd\"), 67);\n    assert.equal(digitSum(\"helloE\"), 69);\n    assert.equal(digitSum(\"woArBld\"), 131);\n    assert.equal(digitSum(\"aAaaaXa\"), 153);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a phone number of apple and oranges \n   that are distributed in a basket of fruit this basket contains \n   apples, orange, and mango yield. Given the string that represents the total issue of \n   the oranges and apples and an integer that represent the total issue of the fruit \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a string that represents a phone number of apple and oranges \n   that are distributed in a basket of fruit this basket contains \n   apples, orange, and mango yield. Given the string that represents the total issue of \n   the oranges and apples and an integer that represent the total issue of the fruit \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n     const {\n        apple = [],\n        orange = [],\n        mango = [],\n        appleCount = 0,\n        orangeCount = 0,\n        mangoCount = 0,\n        distribution = {},\n        numbers = s.split(\" \").map(Number),\n        fruit = [],\n        fruitCount = 0\n      } = {\n        apple: numbers.reduce((c, n) => {\n          if (c === undefined) {\n            c = 0\n          }\n          c += n\n          return c\n        }, 0),\n        orange: numbers.reduce((c, n) => {\n          if (c === undefined) {\n            c = 0\n          }\n          c += n\n          return c\n        }, 0),\n        mango: numbers.reduce((c, n) => {\n          if (c === undefined) {\n            c = 0\n          }\n          c += n\n          return c\n        }, 0),\n        distribution: {\n          apple: 0,\n          orange: 0,\n          mango: 0\n        },\n        appleCount: 0,\n        orangeCount: 0,\n        mangoCount: 0,\n        fruit: [],\n        fruitCount: 0\n      }\n      fruit.push(fruitDistribution(s, n))\n      fruitCount += fruit.reduce((c, f) => {\n        return c + f\n      }, 0)\n      return fruitCount\n    }\n    * /\n\n// function FruitDistribution(fruitBasket) {\n//   fruitBasket.length > 0 &&\n//   fruitBasket.fruit.length > 0 &&\n//   fruitBasket.fruit.length == fruitBasket.fruitCount &&\n//   fruitBasket.fruit.every((fruit) => fruit == fruitBasket.fruit[fruitBasket.fruitCount - 1])\n//   return fruitBasket.fruitCount\n// }\n\n\nconst FruitDistribution = (fruitBasket, n) => {\n  let appleCount = 0, orangeCount = 0, mangoCount = 0;\n  fruitBasket.length > 0 &&\n  fruitBasket.fruit.length > 0 &&\n  fruitBasket.fruit.length == fruitBasket.fruitCount &&\n  fruitBasket.fruit.every((fruit) => fruit == fruitBasket.fruit[fruitBasket.fruitCount - 1])\n  return fruitBasket.fruitCount - n - appleCount - orangeCount - mangoCount\n}\n\nconst FruitDistribution = (fruitBasket, n) => {\n  fruitBasket.length > 0 &&\n  fruitBasket.fruit.length > 0 &&\n  fruitBasket.fruit.length == fruitBasket.fruitCount &&\n  fruitBasket.fruit.every((fruit) => fruit == fruitBasket.fruit[fruitBasket.fruitCount - 1])\n  return fruitBasket.fruitCount - n - fruitBasket.appleCount - fruitBasket.orangeCount - fruitBasket.mangoCount\n}\n\nconst FruitDistribution = (fruitBasket, n) => {\n  fruitBasket.length > 0 &&\n  fruitBasket.fruit.length > 0 &&\n  fruitBasket.fruit.length == fruitBasket.fruitCount &&\n  fruitBasket.fruit.every((fruit) => fruit == fruitBasket.fruit[fruitBasket.fruitCount - 1])\n  return fruitBasket.fruitCount - n - fruitBasket.appleCount - fruitBasket.orangeCount - fruitBasket.mangoCount - fruitBasket.appleCount\n}\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch of a tree that has non - negative integer nodes \n   your task is to pluck one of the nodes and return it. \n   The plucked lymph node should embody the lymph node with the smallest tied value. \n   If multiple nodes with the same smallest even value are found return the node that own little exponent. \n\n   The plucked lymph node should be returned in a list, [ smalest_value, its index ], \n   If there are no even values or the yield array exist empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" Given an array representing a branch of a tree that has non - negative integer nodes \n   your task is to pluck one of the nodes and return it. \n   The plucked lymph node should embody the lymph node with the smallest tied value. \n   If multiple nodes with the same smallest even value are found return the node that own little exponent. \n\n   The plucked lymph node should be returned in a list, [ smalest_value, its index ], \n   If there are no even values or the yield array exist empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    let tree = new Array(arr.length + 1);\n    for (let i = 0; i < arr.length; i++) {\n        let left = i * 2 + 1;\n        let right = left + 1;\n        if (right > arr.length) {\n            right = arr.length;\n        }\n        tree[left] = arr[i];\n        tree[right] = arr[i];\n    }\n\n    let node = tree[1];\n    let result = [node.value, node.index];\n    let left = 1;\n    while (left < tree.length - 1) {\n        let node = tree[left];\n        if (node.value === 0) {\n            left++;\n            continue;\n        }\n        let right = left + 1;\n        while (right < tree.length) {\n            if (node.value === tree[right].value) {\n                let index = node.index;\n                while (right < tree.length && tree[right].index === index) {\n                    right++;\n                }\n                result.push([node.value, index]);\n                break;\n            } else if (node.value < tree[right].value) {\n                break;\n            } else {\n                right++;\n            }\n        }\n        left++;\n    }\n    return result;\n};\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const current = lst[i];\n    const index = lst.indexOf(current);\n    if (index > -1 && index < lst.length) {\n      const currentCount = result.filter(v => v === current)[0] || 0;\n      result.push(currentCount + 1);\n    }\n  }\n  return result.reduce((a, b) => a > b? a : b);\n};\n\nexport default search;<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   foreign sorting, is when you start with the minimum value, \n   then maximum of the remaining integers, then minimum and indeed on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   foreign sorting, is when you start with the minimum value, \n   then maximum of the remaining integers, then minimum and indeed on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const arr = lst.slice(0)\n  let min = arr[0]\n  let max = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === min) {\n      arr.splice(i, 1)\n      arr.unshift(max)\n      return arr\n    }\n  }\n  return arr\n}\n\nexport default strangeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let a1 = a - b;\n  let b1 = b - c;\n  let c1 = c - a;\n\n  let a2 = a1 + b1;\n  let b2 = b1 + c1;\n  let c2 = c1 + a1;\n\n  if (a2 > c2) {\n    return -1;\n  }\n  if (b2 > c2) {\n    return -1;\n  }\n  if (a2 < b2) {\n    return -1;\n  }\n\n  let s = (a1 * b2) - (b1 * a2);\n  let area = Math.sqrt(s * (s - a1 * a1) * (s - b1 * b1) * (s - c1 * c1));\n  if (area % 1 === 0) {\n    return area;\n  }\n  else {\n    return -1;\n  }\n};\n\nconsole.log(triangleArea(1, 2, 3));\nconsole.log(triangleArea(1, 2, 4));\nconsole.log(triangleArea(1, 2, 5));\nconsole.log(triangleArea(1, 2, 6));\nconsole.log(triangleArea(1, 2, 7));\nconsole.log(triangleArea(1, 2, 8));\nconsole.log(triangleArea(1, 2, 9));\nconsole.log(triangleArea(1, 2, 10));\nconsole.log(triangleArea(1, 2, 11));\nconsole.log(triangleArea(1, 2, 12));\nconsole.log(triangleArea(1, 2, 13));\nconsole.log(triangleArea(1, 2, 14));\nconsole.log(triangleArea(1, 2, 15));\nconsole.log(triangleArea(1, 2, 16));\nconsole.log(triangleArea(1, 2, 17));\nconsole.log(triangleArea(1, 2, 18));\nconsole.log(triangleArea(1, 2, 19));\nconsole.log(triangleArea(1, 2, 20));\nconsole.log(triangleArea(1, 2, 21));\nconsole.log(triangleArea(1, 2, 22));\nconsole.log(triangleArea(1, 2, 23));\nconsole.log(triangleArea(1, 2, 24));\nconsole.log(triangleArea(1, 2, 25));\nconsole.log(triangleArea(1, 2, 26));\nconsole.log(triangleArea(1, 2, 27));\nconsole.log(triangleArea(1, 2, 28));\nconsole.log(triangleArea(1, 2, 29));\nconsole.log(triangleArea(1, 2, 30));\nconsole.log(triangleArea(1, 2, 31));\nconsole.log(triangleArea(1, 2, 32));\nconsole.log(triangleArea(1, 2, 33));\nconsole.log(triangleArea(1, 2, 34));\nconsole.log(triangleArea(1, 2, 35));\nconsole.log(triangleArea(1, 2, 36));\nconsole.log(triangleArea(1, 2, 37));\nconsole.log(triangleArea(1, 2, 38));\nconsole.log(triangleArea(1, 2, 39));\nconsole.log(triangleArea(1, 2, 40));\nconsole.log(triangleArea(1, 2, 41));\nconsole.log(triangleArea(1, 2, 42));\nconsole.log(triangleArea(1, 2, 43));\nconsole.log(triangleArea(1, 2, 44));\nconsole.log(triangleArea(1, 2, 45));\nconsole.log(triangleArea(1, 2, 46));\nconsole.log(triangleArea(1, 2, 47));\nconsole.log(triangleArea(1, 2, 48));\nconsole.log(triangleArea(1, 2, 49));\nconsole.log(triangleArea(1, 2, 50));\nconsole.log(triangleArea(1, 2, 51));\nconsole.log(triangleArea(1, 2, 52));\nconsole.log(triangleArea(1, 2, 53));\nconsole.log(triangleArea(1, 2, 54));\nconsole.log(triangleArea(1, 2, 55));\nconsole.log(triangleArea(1, 2, 56));\nconsole.log(triangleArea(1, 2, 57));\nconsole.log(triangleArea(1, 2, 58));\nconsole.log(triangleArea(1, 2, 59));\nconsole.log(triangleArea(1, 2, 60));\nconsole.log(triangleArea(1, 2, 61));\nconsole.log(triangleArea(1, 2, 62));\nconsole.log(triangleArea(1, 2, 63));\nconsole.log(triangleArea(1, 2, 64));\nconsole.log(triangleArea(1, 2, 65));\nconsole.log(triangleArea(1, 2, 66));\nconsole.log(triangleArea(1, 2, 67));\nconsole.log(triangleArea(1, 2, 68));\nconsole.log(triangleArea(1, 2, 69));\nconsole.log(triangleArea(1, 2, 70));\nconsole.log(triangleArea(1, 2, 71));\nconsole.log(triangleArea(1, 2, 72));\nconsole.log(triangleArea(1, 2, 73));\nconsole.log(triangleArea(1, 2, 74));\nconsole.log(triangleArea(1, 2, 75));\nconsole.log(triangleArea(1, 2, 76));\nconsole.log(triangleArea(1, 2, 77));\nconsole.log(triangleArea(1, 2, 78));\nconsole.log(triangleArea(1, 2, 79));\nconsole.log(triangleArea(1, 2, 80));\nconsole.log(triangleArea(1, 2, 81));\nconsole"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the aim q will fly, and assumed differently. \n   The aim q will vanish if it's balanced (it is a palindromic list) and the union of its elements equal less than or equal the maximum possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true if the aim q will fly, and assumed differently. \n   The aim q will vanish if it's balanced (it is a palindromic list) and the union of its elements equal less than or equal the maximum possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const isPal = q.every((n, i) => n === q[i + 1] && i + 1 < q.length - 1)\n\n  if (isPal) {\n    const sum = q.reduce((a, b) => a + b, 0)\n    return sum <= w\n  }\n\n  return false\n}\n\nconst test = [1, 2, 3, 2, 3]\nconst max = 9\n\nconsole.log(willItFly(test, max))\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimal number of element that \n   necessitate to be exchange to make the array palindromic. A palindromic array is an array that \n   is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find the minimal number of element that \n   necessitate to be exchange to make the array palindromic. A palindromic array is an array that \n   is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const newArr = arr.slice().reverse();\n  let min = arr.length - 1;\n  for (let i = 0; i < newArr.length - 1; i++) {\n    if (newArr[i] > newArr[i + 1]) {\n      min = Math.min(min, newArr[i] - newArr[i + 1]);\n    }\n  }\n  return min;\n};\n\nconst change = (arr) => {\n  return smallestChange(arr) + 1;\n};\n\nmodule.exports = {\n  change\n};\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of string and retort the list that has \n   total number of char in the all strings of the list less than the early list.\n\n   if the two lists hold the like number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of string and retort the list that has \n   total number of char in the all strings of the list less than the early list.\n\n   if the two lists hold the like number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let lst = [];\n  const len = lst1.length;\n  const len2 = lst2.length;\n  let sum = 0;\n\n  for (let i = 0; i < len; i++) {\n    sum += lst1[i].length;\n  }\n\n  for (let i = 0; i < len2; i++) {\n    sum += lst2[i].length;\n  }\n\n  if (sum < len) {\n    for (let i = 0; i < len; i++) {\n      lst.push(lst1[i]);\n    }\n  } else {\n    for (let i = 0; i < len2; i++) {\n      lst.push(lst2[i]);\n    }\n  }\n\n  return lst;\n};\n\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'Hi'])); // ['hI', 'Hi']\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])); // ['hi', 'admin']\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5'])); // ['4']<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns dependable if the feed number is the generation of 3 prime numbers \n   and false otherwise. \n   know that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns dependable if the feed number is the generation of 3 prime numbers \n   and false otherwise. \n   know that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n    const factors = [2, 3, 5];\n    for (const factor of factors) {\n        const remainder = a % factor;\n        if (remainder!== 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst isPrime = (a) => {\n    const isPrime = (a > 1) && (a % 2 === 0);\n    return isPrime;\n}\n\nconst isMultiplyPrime = (a) => {\n    return isPrime(a) && isPrime(a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {\n    return isPrime(a) && isPrime(a * a) && isPrime(a * a * a) && isPrime(a * a * a * a);\n}\n\nconst isPrime = (a) => {"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n    if (Math.pow(x, n) === x) return true;\n    return false;\n}\n\n/*\n  Task:\n  Find the greatest product of a number and its square root in a given range\n  Write a function that returns this product.\n\n  Example:\n  findGreatestProduct(1, 4) => 6\n  findGreatestProduct(2, 4) => 16\n  findGreatestProduct(3, 4) => 27\n  findGreatestProduct(4, 4) => 64\n  findGreatestProduct(5, 4) => 125\n  findGreatestProduct(6, 4) => 216\n*/\nconst findGreatestProduct = (x, y) => {\n    return Math.pow(x, y / x) * x;\n}\n\n/*\n  Task:\n  Write a function that returns the number of odd integers between two numbers\n  Include the numbers in the range (start, end) and only count the odd integers.\n  This function should return the number of odd integers in the range (start, end)\n\n  Example:\n  countOddsInRange(1, 4) => 2\n  countOddsInRange(2, 4) => 2\n  countOddsInRange(3, 4) => 2\n  countOddsInRange(4, 4) => 0\n  countOddsInRange(5, 4) => 1\n  countOddsInRange(6, 4) => 1\n  countOddsInRange(7, 4) => 2\n  countOddsInRange(8, 4) => 0\n  countOddsInRange(9, 4) => 1\n  countOddsInRange(10, 4) => 0\n  countOddsInRange(11, 4) => 1\n  countOddsInRange(12, 4) => 2\n  countOddsInRange(13, 4) => 1\n  countOddsInRange(14, 4) => 2\n  countOddsInRange(15, 4) => 2\n*/\nconst countOddsInRange = (start, end) => {\n    let result = 0;\n    for (let i = start; i <= end; i++) {\n        if (i % 2!== 0) {\n            result++;\n        }\n    }\n    return result;\n}\n\n/*\n  Task:\n  Write a function that checks whether a number is prime or not.\n  The number can be given as a string. The function should return true if the\n  number is prime and false otherwise.\n\n  Example:\n  isPrime(\"13\") => true\n  isPrime(\"14\") => false\n  isPrime(\"23\") => true\n  isPrime(\"15\") => false\n  isPrime(\"15\") => false\n*/\nconst isPrime = (n) => {\n    if (n % 2 === 0) return false;\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}\n\n/*\n  Task:\n  Write a function that checks whether a number is a perfect number or not.\n  The number can be given as a string. The function should return true if the\n  number is a perfect number and false otherwise.\n\n  Example:\n  isPerfect(\"12\") => false\n  isPerfect(\"14\") => true\n  isPerfect(\"15\") => false\n  isPerfect(\"15\") => true\n  isPerfect(\"13\") => true\n  isPerfect(\"17\") => false\n*/\nconst isPerfect = (n) => {\n    return (n === n) && (n % 1 === 0);\n}\n\n/*\n  Task:\n  Write a function that returns the greatest product of two consecutive numbers\n  in a given range.\n\n  Example:\n  findGreatestProductOfTwoConsecutive(1, 4) => 6\n  findGreatestProductOfTwoConsecutive(2, 4) => 16\n  findGreatestProductOfTwoConsecutive(3, 4) => 27\n  findGreatestProductOfTwoConsecutive(4, 4) => 64\n  findGreatestProductOfTwoConsecutive(5, 4) => 125\n  findGreatestProductOfTwoConsecutive(6, 4) => 216\n*/\nconst findGreatestProductOfTwoConsecutive = (start, end) => {\n    let result = 0;\n    for (let i = start; i <= end; i++) {\n        result = Math.pow(i, 2);\n        if (isPerfect(result)) {\n            return result;\n        }\n    }\n    return result;\n}\n\n/*\n  Task:\n  Write a function that returns the sum of the first n odd integers.\n  Include the numbers in the range (start, end) and only sum the odd integers.\n  This function should return the sum of the first n odd integers in the range\n  (start, end).\n\n  Example:\n  sumOddsInRange(1, 4) => 3\n  sumOddsInRange(2, 4) => 5\n  sumOddsInRange(3, 4) => 7\n  sumOddsInRange(4, 4) => 9\n  sumOddsInRange(5, 4) => 11\n  sumOddsInRange(6, 4) => 13\n*/\nconst sumOddsInRange = (start, end) => {\n    let result = 0;\n    for (let i = start; i <= end; i++) {\n        if (i % 2 === 1) {\n            result += i;\n        }\n    }\n    return result;\n}\n\n/*\n  Task:\n  Write a function that returns the sum of the first n even integers.\n  Include the numbers in the range (start, end) and only sum the even integers.\n  This function should return the sum of the first n even integers in the range\n  (start, end).\n\n  Example:\n  sumEvensInRange(1, 4) => 6\n  sumEvensInRange(2, 4) => 10\n  sumEvensInRange(3, 4) =>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and return on-key \n   if this ingeger is a block of some integer number. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integer a and return on-key \n   if this ingeger is a block of some integer number. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 3 === 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives \n   a hexadecimal number as a chain and count the number of hexadecimal \n   digits that are primes (flower number=== or a prime=== is a lifelike issue \n   greater than 1 that be not a product of two smaller lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime act are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you get to specify a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== five hundred (= decimal 13). \n   Note: you may wear the stimulation is always right or empty string=== \n   and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a function that receives \n   a hexadecimal number as a chain and count the number of hexadecimal \n   digits that are primes (flower number=== or a prime=== is a lifelike issue \n   greater than 1 that be not a product of two smaller lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime act are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you get to specify a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== five hundred (= decimal 13). \n   Note: you may wear the stimulation is always right or empty string=== \n   and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let s = num.toUpperCase();\n  let key = 0;\n  for (let i = 0; i < s.length; i++) {\n    key += s[i].charCodeAt() - 64;\n  }\n  return key;\n};\nconst isPrime = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\nconst countPrime = (num) => {\n  let counter = 0;\n  let i = 2;\n  while (i < num) {\n    if (isPrime(i)) {\n      counter++;\n    }\n    i++;\n  }\n  return counter;\n};\nconst hexDigit = (num) => {\n  let digit = 0;\n  while (num > 0) {\n    digit = num % 16;\n    num = Math.floor(num / 16);\n  }\n  return digit;\n};\n\nconst result = countPrime(hexKey(input));\n\nconsole.log(`${result}`);\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task equal to commute it to \n   binary format. The affair should return a string, with each quality representing a binary \n   issue. Each quality in the string will be' 0' or' 1'. \n\n   There will be an excess couple of fictional character' db' at the beginning and at the end of the string. \n   The excess character are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal form and your task equal to commute it to \n   binary format. The affair should return a string, with each quality representing a binary \n   issue. Each quality in the string will be' 0' or' 1'. \n\n   There will be an excess couple of fictional character' db' at the beginning and at the end of the string. \n   The excess character are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n    const bin = \"\";\n    let number = \"\";\n    for (let i = 0; i < decimal.length; i++) {\n        number = number + decimal.charAt(i);\n    }\n    number = number + '0';\n    const numberLength = number.length;\n    for (let i = numberLength; i > 0; i--) {\n        bin += number.charAt(i - 1);\n    }\n    return bin;\n};\n\nmodule.exports = decimalToBinary;\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task is to check if the drawstring is glad or not. \n   A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   Your task is to check if the drawstring is glad or not. \n   A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  let i = 0\n  let isHappy = true\n  while(i < len && isHappy) {\n    const a = s[i]\n    const next = i + 1\n    const prev = i - 1\n    const nextNext = next + 1\n    const nextPrev = next - 1\n    if(nextNext > len || nextPrev > len) {\n      return false\n    }\n    if(next == len || prev == len) {\n      return isHappy\n    }\n    if(nextNext == len || nextPrev == len) {\n      isHappy = false\n      return isHappy\n    }\n    if(a == s[next]) {\n      i++\n      continue\n    }\n    if(a == s[prev]) {\n      i--\n      continue\n    }\n    if(a == s[nextNext]) {\n      i++\n      continue\n    }\n    if(a == s[nextPrev]) {\n      i--\n      continue\n    }\n  }\n  return isHappy\n}\n\nconsole.log(isHappy(\"xyy\"))\nconsole.log(isHappy(\"aabb\"))\nconsole.log(isHappy(\"adb\"))\nconsole.log(isHappy(\"a\"))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to pass the grades\n   to student. The teacher has been making her own algorithm for grading. \n   The alone problem is, she has lose the code she used for grading. \n   She has given you a list of grade point average for some students and you experience to write \n   a function that can output a list of letter grades use the following mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 speed of light \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher has to pass the grades\n   to student. The teacher has been making her own algorithm for grading. \n   The alone problem is, she has lose the code she used for grading. \n   She has given you a list of grade point average for some students and you experience to write \n   a function that can output a list of letter grades use the following mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 speed of light \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesList = Array.from(grades);\n  const letterGrade = gradesList.map(grade => {\n    const gradeInt = parseInt(grade, 10);\n    if (gradeInt < 3.7) {\n      return 'A+';\n    } else if (gradeInt >= 3.7 && gradeInt < 3.3) {\n      return 'A';\n    } else if (gradeInt >= 3.3 && gradeInt < 3) {\n      return 'A-';\n    } else if (gradeInt >= 2.7 && gradeInt < 2.3) {\n      return 'B+';\n    } else if (gradeInt >= 2.3 && gradeInt < 2) {\n      return 'B';\n    } else if (gradeInt >= 1.7 && gradeInt < 1.3) {\n      return 'B-';\n    } else if (gradeInt >= 1.3 && gradeInt < 1) {\n      return 'C+';\n    } else if (gradeInt >= 0.7 && gradeInt < 0.3) {\n      return 'C-';\n    } else if (gradeInt >= 0.3 && gradeInt < 0) {\n      return 'D-';\n    } else if (gradeInt >= 0.0 && gradeInt < 0.3) {\n      return 'D+';\n    } else if (gradeInt >= 0.0) {\n      return 'D';\n    } else {\n      return 'East';\n    }\n  }).sort();\n  return letterGrade;\n};\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]));<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n    const len = string.length;\n    if (len < 2) return false;\n    const s = string.split('');\n    const arr = [];\n    for (let i = 0; i < len; i++) {\n        let p = s[i];\n        if (p ==='') p = '0';\n        if (p === '0') {\n            if (arr.indexOf(p)!== -1) return false;\n            arr.push(p);\n            continue;\n        }\n        if (p > s[i + 1]) {\n            if (arr.indexOf(p)!== -1) return false;\n            arr.push(p);\n        } else if (p > s[i]) {\n            if (arr.indexOf(s[i])!== -1) return false;\n            arr.push(s[i]);\n        }\n    }\n    return arr.every(x => isPrime(x));\n};\n\nconsole.log(primeLength('kittens'));\nconsole.log(primeLength('abcdcba'));\nconsole.log(primeLength('orange'));\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numeral of n-digit\n   convinced integers that begin or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numeral of n-digit\n   convinced integers that begin or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n  let counter = 0\n  let digits = 0\n  let currentNum = n\n  while (currentNum >= 1) {\n    if (currentNum % 10 === 1) {\n      counter++\n    }\n    currentNum = currentNum / 10\n    digits++\n  }\n  return counter\n}\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total union of its digit in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return the total union of its digit in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const digits = Number(N).toString(2)\n  return digits.match(/[0-1]{4,}/)[0].split('').reduce((acc, digit) => acc + digit, 0)\n}\n\nconst run = async () => {\n  const result = solve(await prompt(\"Enter N\"))\n  console.log(result)\n}\n\nrun()\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    const evens = lst.filter((elem, i) => (i % 2 === 0));\n    let sum = 0;\n    for (let i = 0; i < evens.length; i++) {\n        sum += evens[i];\n    }\n    return sum;\n};\n\nadd([4, 2, 6, 7]);\n// expect(add([4, 2, 6, 7])).toBe(2);\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and return an coherent version of it. \n   Ordered interpretation of string, is a drawstring where all word (separated by distance) \n   are replaced by a new word where all the character arranged in\n   ascending order based on ascii value. \n   bill: You should keep the decree of word and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string and return an coherent version of it. \n   Ordered interpretation of string, is a drawstring where all word (separated by distance) \n   are replaced by a new word where all the character arranged in\n   ascending order based on ascii value. \n   bill: You should keep the decree of word and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n    return s.replace(/[\\s]/g, '')\n       .replace(/\\b(.)/g, (m, p1) => p1)\n       .replace(/([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)([^\\s])(\\s+)(["}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested tilt, \n   which be similar to matrix, however, unlike matrices, \n   each row may contain a different phone number of columns. \n   hold lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (quarrel, columns), starting with 0. \n   Sort coordinate initially by row in ascend holy order. \n   Also, sort coordinates of the row by columns in descend order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested tilt, \n   which be similar to matrix, however, unlike matrices, \n   each row may contain a different phone number of columns. \n   hold lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (quarrel, columns), starting with 0. \n   Sort coordinate initially by row in ascend holy order. \n   Also, sort coordinates of the row by columns in descend order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let ret = []\n  for (let i = 0; i < lst.length; i++) {\n    let cur = lst[i]\n    if (cur.length > x) {\n      ret.push(cur[x])\n    }\n  }\n  return ret\n}\n\n/*\n  find the longest string\n  \n  Examples:\n  findLongest([\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c']\n  ], 3) == 'abc'\n  findLongest([\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c']\n  ], 3) == 'abc'\n  findLongest([\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c']\n  ], 3) == 'abc'\n  findLongest([\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c']\n  ], 3) == 'abc'\n  findLongest([\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c']\n  ], 3) == 'abc'\n  findLongest([\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c']\n  ], 3) == 'abc'\n  findLongest([\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c']\n  ], 3) == 'abc'\n  findLongest([\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c']\n  ], 3) == 'abc'\n  findLongest([\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c'],\n"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integer, return a copy of the give array after screen, \n   you will screen the given array in ascend order if the union (first exponent value, concluding index value) exist odd, \n   or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n   Note: \n   * don't change the yield array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non - negative integer, return a copy of the give array after screen, \n   you will screen the given array in ascend order if the union (first exponent value, concluding index value) exist odd, \n   or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n   Note: \n   * don't change the yield array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (array.length === 0) return array;\n  const sorted = array.slice().sort();\n  const begin = sorted.pop();\n  const end = sorted.pop();\n  const half = sorted.length / 2;\n  const diff = end - begin;\n  if (diff % 2 === 0) {\n    return sorted.concat(sorted.reverse());\n  }\n  return sorted.concat([begin]).concat([end]).concat(sorted.slice(0, half));\n};\n\nexport default sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argumentation and \n   retort a string encrypted with the rudiment being rotated. \n   The alphabet should be rotated in a manner such that the letter \n   switch down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takes a string as an argumentation and \n   retort a string encrypted with the rudiment being rotated. \n   The alphabet should be rotated in a manner such that the letter \n   switch down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let encrypt = [];\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = [];\n  for(let i = 0; i < alphabet.length; i++) {\n    rotated.push(alphabet[i]);\n  }\n  rotated.sort((a, b) => a - b);\n  rotated.reverse();\n  let rotation = 0;\n  let index = 0;\n  for(let i = 0; i < alphabet.length; i++) {\n    rotated[index] = alphabet[i];\n    rotation = rotation + 1;\n    index = index + 1;\n    if(rotation == 2) {\n      rotation = 0;\n    }\n  }\n  let str = '';\n  for(let i = 0; i < s.length; i++) {\n    str += rotated[s.charCodeAt(i) - 97];\n  }\n  return str;\n};\n\n/*\n  Create a function decrypt that takes a string as an argumentation and \n  retort a string decrypted with the rudiment being rotated. \n  The alphabet should be rotated in a manner such that the letter \n  switch up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'gf'\n  decrypt('kj') returns 'et'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let decrypt = [];\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = [];\n  for(let i = 0; i < alphabet.length; i++) {\n    rotated.push(alphabet[i]);\n  }\n  rotated.sort((a, b) => a - b);\n  rotated.reverse();\n  let rotation = 0;\n  let index = 0;\n  for(let i = 0; i < alphabet.length; i++) {\n    rotated[index] = alphabet[i];\n    rotation = rotation + 1;\n    index = index + 1;\n    if(rotation == 2) {\n      rotation = 0;\n    }\n  }\n  let str = '';\n  for(let i = 0; i < s.length; i++) {\n    str += rotated[s.charCodeAt(i) - 97];\n  }\n  return str;\n};\n\nconsole.log(encrypt('asdfghjkl'));\nconsole.log(decrypt('lm'));\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write a function nextSmallest() that return the second smallest component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   Write a function nextSmallest() that return the second smallest component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n  const sort = (a, b) = > (a > b? 1 : a < b? -1 : 0)\n  const {\n   let {\n    last\n   } = lst\n   if (last) {\n    return sort(last, 0)\n   }\n  }\n  \n  return null\n}\n\n*/\n\n// ######################################################################\n\n#include <iostream>\n#include <stdio.h>\n#include <string.h>\n\nusing namespace std;\n\nstruct ListNode {\n  int val;\n  ListNode *next;\n  ListNode(int x) : val(x), next(NULL) {}\n};\n\nListNode* nextSmallest(ListNode *head) {\n  if (!head ||!head->next) {\n    return nullptr;\n  }\n\n  ListNode *p = head->next;\n  int i = 0;\n  int min = p->val;\n  while (p->next) {\n    if (p->next->val < min) {\n      min = p->next->val;\n      p = p->next;\n    }\n    ++i;\n  }\n\n  if (min < p->val) {\n    return p;\n  }\n  return nullptr;\n}\n\nint main() {\n  ListNode *head = new ListNode(1);\n  head->next = new ListNode(2);\n  head->next->next = new ListNode(3);\n  head->next->next->next = new ListNode(4);\n  head->next->next->next->next = new ListNode(5);\n\n  cout << nextSmallest(head) << endl;\n\n  return 0;\n}<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n    let startIndex = 0;\n    let endIndex = S.length - 1;\n    let result = 0;\n    while(startIndex <= endIndex){\n        if(S[startIndex] === \"I\" && S[startIndex + 1] === \" \"){\n            result++;\n            startIndex += 2;\n        }\n        else if(S[startIndex] === \"I\"){\n            startIndex += 1;\n        }\n        else if(S[startIndex] === \".\" && S[startIndex + 1] === \" \"){\n            result++;\n            startIndex += 2;\n        }\n        else if(S[startIndex] === \".\"){\n            startIndex += 1;\n        }\n        else if(S[startIndex] === \"?\" && S[startIndex + 1] === \" \"){\n            result++;\n            startIndex += 2;\n        }\n        else if(S[startIndex] === \"?\"){\n            startIndex += 1;\n        }\n        else if(S[startIndex] === \"!\" && S[startIndex + 1] === \" \"){\n            result++;\n            startIndex += 2;\n        }\n        else if(S[startIndex] === \"!\"){\n            startIndex += 1;\n        }\n        else{\n            startIndex++;\n        }\n    }\n    return result;\n};\n\nconsole.log(isBored(\"Hello world\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather\"));\nconsole.log(isBored(\"I am a student. I am a university student. I am a teacher. I am a university teacher. I am a teacher. I am a student. I am a university student. I am a university student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a university student. I am a student. I am a"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  let p1 = x, p2 = y, p3 = z;\n  let p1Int = typeof p1 === 'number';\n  let p2Int = typeof p2 === 'number';\n  let p3Int = typeof p3 === 'number';\n  if (p1Int && p2Int && p3Int) {\n    return p1 + p2 + p3 === p1 * p2 * p3;\n  }\n  return false;\n}\n\nconsole.log(anyInt(3, 2, 2)); //true\nconsole.log(anyInt(3, -2, 1)); //true\nconsole.log(anyInt(3.6, -2.2, 2)); //false\nconsole.log(anyInt(3, 2, -2)); //false\nconsole.log(anyInt(3, 2, 3)); //false\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a message, and encodes in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const messageLength = message.length;\n  let result = '';\n  for (let i = 0; i < messageLength; i++) {\n    result += message[i].toUpperCase();\n  }\n  return result;\n};\n\nmodule.exports = encode;\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need to find the large choice value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers. \n   You need to find the large choice value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  // if (lst.length === 0) {\n  //   return 0;\n  // }\n\n  const sum = (a, b) => a + b;\n\n  const digits = (lst) => {\n    let digit = 0;\n    for (let i = lst.length - 1; i >= 0; i--) {\n      digit += lst[i];\n    }\n    return digit;\n  }\n\n  const max = (a, b) => a > b? a : b;\n\n  const maxDigit = (lst) => {\n    let digit = 0;\n    for (let i = lst.length - 1; i >= 0; i--) {\n      digit += lst[i];\n    }\n    return digit;\n  }\n\n  const getDigits = (digit) => {\n    let digits = [];\n    for (let i = digit; i >= 0; i--) {\n      digits.unshift(i);\n    }\n    return digits;\n  }\n\n  const getNext = (digits, digit) => {\n    const maxDigit = maxDigit(digits);\n    let n = digits.indexOf(maxDigit);\n    if (digit === maxDigit) {\n      return getDigits(n);\n    } else if (n === -1) {\n      return getDigits(digit);\n    } else {\n      return getDigits(n);\n    }\n  }\n\n  const getDigitsSum = (digit) => {\n    let sum = 0;\n    for (let i = digit; i >= 0; i--) {\n      sum += i;\n    }\n    return sum;\n  }\n\n  const getDigitsMaxSum = (digit) => {\n    let sum = 0;\n    for (let i = digit; i >= 0; i--) {\n      sum += i;\n    }\n    return sum;\n  }\n\n  const getDigitsMax = (digit) => {\n    let maxDigits = 0;\n    for (let i = digit; i >= 0; i--) {\n      if (i > maxDigits) {\n        maxDigits = i;\n      }\n    }\n    return maxDigits;\n  }\n\n  const getDigitsMaxDigitsSum = (digit) => {\n    let sum = 0;\n    for (let i = digit; i >= 0; i--) {\n      sum += i;\n    }\n    return sum;\n  }\n\n  const getDigitsMaxDigitsSumMax = (digit) => {\n    let maxSum = 0;\n    let maxDigits = 0;\n    for (let i = digit; i >= 0; i--) {\n      sum += i;\n      if (sum > maxSum) {\n        maxDigits = i;\n        maxSum = sum;\n      }\n    }\n    return maxDigits;\n  }\n\n  const getDigitsMaxDigitsSumMaxMax = (digit) => {\n    let maxDigits = 0;\n    let maxSum = 0;\n    for (let i = digit; i >= 0; i--) {\n      sum += i;\n      if (sum > maxSum) {\n        maxDigits = i;\n        maxSum = sum;\n      }\n    }\n    return maxDigits;\n  }\n\n  const getDigitsMaxDigitsSumMaxMaxMax = (digit) => {\n    let maxDigits = 0;\n    let maxSum = 0;\n    for (let i = digit; i >= 0; i--) {\n      sum += i;\n      if (sum > maxSum) {\n        maxDigits = i;\n        maxSum = sum;\n      }\n    }\n    return maxDigits;\n  }\n\n  const getDigitsMaxDigitsSumMaxMaxMax = (digit) => {\n    let maxDigits = 0;\n    let maxSum = 0;\n    for (let i = digit; i >= 0; i--) {\n      sum += i;\n      if (sum > maxSum) {\n        maxDigits = i;\n        maxSum = sum;\n      }\n    }\n    return maxDigits;\n  }\n\n  const getDigitsMaxDigitsSumMaxMaxMaxMax = (digit) => {\n    let maxDigits = 0;\n    let maxSum = 0;\n    for (let i = digit; i >= 0; i--) {\n      sum += i;\n      if (sum > maxSum) {\n        maxDigits = i;\n        maxSum = sum;\n      }\n    }\n    return maxDigits;\n  }\n\n  const getDigitsMaxDigitsSumMaxMaxMaxMax = (digit) => {\n    let maxDigits = 0;\n    let maxSum = 0;\n    for (let i = digit; i >= 0; i--) {\n      sum += i;\n      if (sum > maxSum) {\n        maxDigits = i;\n        maxSum = sum;\n      }\n    }\n    return maxDigits;\n  }\n\n  const getDigitsMaxDigitsSumMaxMaxMaxMaxMax = (digit) => {\n    let maxDigits = 0;\n    let maxSum = 0;\n    for (let i = digit; i >= 0; i--) {\n      sum += i;\n      if (sum > max"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys equal string in lower \n   case or all key are strings in upper lawsuit, else return false. \n   The routine should return false is the give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys equal string in lower \n   case or all key are strings in upper lawsuit, else return false. \n   The routine should return false is the give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (!dict ||!Object.keys(dict).length) return false;\n  for (const key in dict) {\n    if (key.toLowerCase()!== key) return false;\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys equal string in lower \n   case or all key are strings in upper lawsuit, else return false. \n   The routine should return false is the give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictUnique = (dict) => {\n  if (!dict ||!Object.keys(dict).length) return false;\n  const keys = Object.keys(dict);\n  return keys.every(key => keys.indexOf(key) === keys.lastIndexOf(key));\n}\n\nexport {\n  checkDictCase,\n  checkDictUnique,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const count = [0,1,2,3];\n  for(let i = 4; i <= n; i++){\n    let isPrime = true;\n    for(let j = 2; j <= Math.sqrt(i); j++){\n      if(i % j === 0){\n        isPrime = false;\n        break;\n      }\n    }\n    if(isPrime){\n      count.push(i);\n    }\n  }\n  return count;\n};\n\nexport default countUpTo;\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and return \n   the intersection of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes two integers and return \n   the intersection of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let t = a.toString();\n  let u = b.toString();\n  let result = 0;\n  if (t.length < u.length) {\n    t = new Array(u.length - t.length + 1).fill().map((_, i) => t[i]).join('');\n  }\n  for (let i = 0; i < u.length; i++) {\n    result += parseInt(t[i]) * parseInt(u[i]);\n  }\n  return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count the number of capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  return s.match(/[A-Z]/)? s.match(/[A-Z]/g).filter((a) => {\n    return a.match(/[A-Z]/)\n  }).length : 0\n}\n\nexport default countUpper\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) exemplify a issue \n   and returns the closest integer to it. If the number is equidistant \n   from two integers, polish it away from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value (string) exemplify a issue \n   and returns the closest integer to it. If the number is equidistant \n   from two integers, polish it away from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let num = parseInt(value);\n  let nums = [0, num, num + 1, num - 1];\n  return Math.abs(nums[0] + (nums[1] - nums[0]) / 2);\n}\n\nconst closestIntegerDemo = [\n  \"10\",\n  \"15.3\",\n  \"0\",\n  \"-14.5\"\n];\n\nclosestIntegerDemo.forEach(value => console.log(closestInteger(value)));\n\n/*\n\nQuestion:\n  Given a list of numbers, find the closest number to the average of the\n  list.\n  exercise\n  >>> averageList = [5, 7, 11, 13, 17];\n  >>> closestNumber(averageList)\n  11\n  >>> averageList = [7, 11, 13, 17];\n  >>> closestNumber(averageList)\n  13\n  >>> averageList = [13, 17];\n  >>> closestNumber(averageList)\n  17\n  >>> averageList = [17];\n  >>> closestNumber(averageList)\n  17\n  >>> averageList = [5, 7, 11, 13, 17];\n  >>> closestNumber(averageList)\n  13\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestNumber(\"14.5\") should\n  return 15 and closestNumber(\"-14.5\") should return -15.\n  */\nconst closestNumber = (values) => {\n  const sum = values.reduce((sum, value) => sum + value);\n  const average = sum / values.length;\n  let closestNumber = null;\n  let min = Number.MAX_VALUE;\n  values.forEach((value) => {\n    if (value < min) {\n      min = value;\n      closestNumber = value;\n    }\n  });\n  return closestNumber;\n}\n\nconst closestNumberDemo = [\n  [5, 7, 11, 13, 17],\n  [7, 11, 13, 17],\n  [13, 17],\n  [5, 7, 11, 13, 17]\n];\n\nclosestNumberDemo.forEach(values => console.log(closestNumber(values)));\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let piles = [];\n  for (let i = 0; i < n; i++) {\n    piles.push(n);\n  }\n  return piles;\n};\n\nmodule.exports = makeAPile;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/[\\s,]+/);\n};\n\nconsole.log(wordsString(\"Hi, my name is John\")); // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nconsole.log(wordsString(\"One, two, three, four, five, six\")); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and return the \n   big even integer numeral that is in the image [x, y] inclusive. If \n   there's no such issue, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive numbers x and y and return the \n   big even integer numeral that is in the image [x, y] inclusive. If \n   there's no such issue, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x >= y) {\n    return -1;\n  }\n\n  let i = Math.floor(x / y);\n  if (i % 2 === 0) {\n    return i * y;\n  }\n  return -1;\n};\n\nexport default chooseNum;<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const nBits = (n - 1).toString(2);\n  const mBits = (m - n).toString(2);\n  const nmBits = nBits + mBits;\n  const nm = parseInt(nmBits, 2);\n  const result = (n + m) / 2;\n  return result.toString(2);\n};\n\nmodule.exports = roundedAvg;\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n    let res = [];\n    let sorted = x.sort();\n    let current = 0;\n    let previous = 0;\n    while (current < sorted.length) {\n        if (previous!== current) {\n            res.push(sorted[current]);\n            previous = current;\n        }\n        current++;\n    }\n    return res;\n}\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integer that are between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integer that are between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  let temp = []\n  let arrLength = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 10) {\n      arrLength = arr[i]\n      temp.push(names[arr[i]])\n    }\n  }\n  arr.reverse()\n  let reversedArr = []\n  for (let i = 0; i < arrLength; i++) {\n    reversedArr.push(temp[i])\n  }\n  return reversedArr\n}\n\nmodule.exports = byLength\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter, \n   and return a list of size n, such that the value of the component at index i is the factorial of i if i is even \n   or the union of numbers from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takes n as a parameter, \n   and return a list of size n, such that the value of the component at index i is the factorial of i if i is even \n   or the union of numbers from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n    const list = []\n    for (let i = 1; i < n; i++) {\n        let val = 1\n        while (val <= i) {\n            val = val * i\n            list.push(val)\n        }\n    }\n    return list\n}\n\nconsole.log(f(5))\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let odd = []\n  let even = []\n  for (let i = 1; i < n; i++) {\n    let d = i\n    while (d) {\n      if (d % 2 === 0) {\n        even.push(d)\n      } else {\n        odd.push(d)\n      }\n      d /= 2\n    }\n  }\n  return (even.length, odd.length)\n}\n\nexport { evenOddPalindrome }\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0. \n   If a number be negative, then its first sign digit will be minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0. \n   If a number be negative, then its first sign digit will be minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const count = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++\n    } else {\n      count++\n      const n = arr[i]\n      const r = n\n      if (n === Math.abs(n)) {\n        r = n + 1\n      } else {\n        r = n - 1\n      }\n      arr[i] = r\n    }\n  }\n  return count\n}\n\n// TEST\nconst arr = [2, -2, -3, 2, -2, 3, 1, 2, 3, 4, 2, -2, 3]\nconsole.log(countNums(arr))\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordain. Your undertaking is to settle if \n   it is possible to catch an array classify in non - decreasing ordering by performing \n   the following mathematical process on the given array: \n       You are allowed to perform right shift key process any numeral of time. \n  \n   One right shift operation means shifting all component of the array by one \n   status in the right direction. The concluding component of the array will be move to \n   the starting side in the array i.e. 0th exponent. \n\n   If it exist possible to prevail the sorted array by perform the above mathematical process \n   then return dependable else return false. \n   If the grant array is empty then return on-key. \n\n   Note: The give list is guaranteed to have alone elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordain. Your undertaking is to settle if \n   it is possible to catch an array classify in non - decreasing ordering by performing \n   the following mathematical process on the given array: \n       You are allowed to perform right shift key process any numeral of time. \n  \n   One right shift operation means shifting all component of the array by one \n   status in the right direction. The concluding component of the array will be move to \n   the starting side in the array i.e. 0th exponent. \n\n   If it exist possible to prevail the sorted array by perform the above mathematical process \n   then return dependable else return false. \n   If the grant array is empty then return on-key. \n\n   Note: The give list is guaranteed to have alone elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  arr.sort((a, b) => a - b);\n  let result = false;\n  let i = 0;\n  let count = 1;\n  while (count <= arr.length) {\n    while (arr[i] < arr[i + count]) {\n      result =!result;\n      i++;\n    }\n    count++;\n  }\n  return result;\n}\n\nconsole.log(moveOneBall([3, 4, 5, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two tilt of number, \n   and determines whether it is possible to do an exchange of elements \n   between them to make lst1 a list of only even number. \n   There is no limit on the phone number of exchanged elements between lst1 and lst2.\n   If it is possible to exchange element between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function that takes two tilt of number, \n   and determines whether it is possible to do an exchange of elements \n   between them to make lst1 a list of only even number. \n   There is no limit on the phone number of exchanged elements between lst1 and lst2.\n   If it is possible to exchange element between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return 'NO';\n  var len = Math.min(lst1.length, lst2.length);\n  var res = 'NO';\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] % 2!== 0 || lst2[i] % 2!== 0) {\n      res = 'NO';\n      break;\n    }\n  }\n  if (res === 'NO') {\n    for (let i = 0; i < len; i++) {\n      if (lst1[i] > lst2[i]) {\n        lst1[i] = lst1[i] - 2;\n      } else {\n        lst2[i] = lst2[i] - 2;\n      }\n    }\n    res = 'YES';\n  }\n  return res;\n};\n\nmodule.exports = exchange;\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let ret = {};\n  let char = '';\n  for (let i = 0; i < test.length; i++) {\n    char = test[i];\n    if (ret[char] === undefined) {\n      ret[char] = 1;\n    } else {\n      ret[char] += 1;\n    }\n  }\n  return ret;\n};\n\nconst isPalindrome = (test) => {\n  let t = test.split('');\n  let i = 0;\n  while (i < t.length / 2) {\n    if (t[i]!== t[t.length - i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst longestPalindrome = (test) => {\n  let t = test.split('');\n  let ret = '';\n  let currentMax = 0;\n  let last = 0;\n  let lastI = 0;\n  let i = 0;\n  while (i < t.length) {\n    if (isPalindrome(t.slice(last, i + 1).join(''))) {\n      if (i - last > currentMax) {\n        last = i;\n        currentMax = i - last + 1;\n        lastI = i;\n      }\n    }\n    i++;\n  }\n  return {\n    start: lastI,\n    end: last,\n    len: currentMax\n  };\n};\n\nconst main = () => {\n  let test = 'a b b a';\n  let ret = longestPalindrome(test);\n  console.log(ret.start, ret.end, ret.len);\n};\n\nmain();<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings s and c, you have to erase all the character in s that are equal to any fictional character in c\n   then control if the result drawstring is palindrome. \n   A string is name palindrome if it reads the like backward as forth. \n   You should return a tuple containing the result string and on-key / assumed for the confirmation.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We are given two strings s and c, you have to erase all the character in s that are equal to any fictional character in c\n   then control if the result drawstring is palindrome. \n   A string is name palindrome if it reads the like backward as forth. \n   You should return a tuple containing the result string and on-key / assumed for the confirmation.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result += s[i];\n    }\n  }\n  return [result, s.length === result.length];\n};\n\n//  Task \n//  Write a function that takes a string as an argument and returns a new string without all the characters equal to the argument.\n//  Example\n//  Given the string 'abcdef' and the character 'b', the function should return 'acef'\nconst filterString = (s, c) => {\n  return s.replace(c, '');\n};\n\n//  Task \n//  Write a function that takes a string as an argument and returns a new string with all the characters equal to the argument replaced by the reverse of the character.\n//  Example\n//  Given the string 'abcdef' and the character 'b', the function should return 'fedcba'\nconst replaceReverse = (s, c) => {\n  return s.replace(c, s.split(c).reverse().join(''));\n};\n\n//  Task \n//  Write a function that takes two strings as an argument and returns a new string with the characters of the first string in the second string.\n//  Example\n//  Given the strings 'abcdef' and 'b', the function should return 'aef'\nconst mergeStrings = (s, c) => {\n  return s.split(c).join('');\n};\n\n//  Task \n//  Write a function that takes two strings as an argument and returns a new string with the characters of the second string in the first string.\n//  Example\n//  Given the strings 'abcdef' and 'b', the function should return 'fedcba'\nconst reverseMergeStrings = (s, c) => {\n  return c.split(s).reverse().join('');\n};\n\n//  Task \n//  Write a function that takes two strings as an argument and returns a new string with the first string as a prefix of the second string.\n//  Example\n//  Given the strings 'abcdef' and 'def', the function should return 'abcdef'\nconst prefix = (s, c) => {\n  return c.slice(0, c.indexOf(s)) + s;\n};\n\n//  Task \n//  Write a function that takes two strings as an argument and returns a new string with the second string as a suffix of the first string.\n//  Example\n//  Given the strings 'abcdef' and 'ef', the function should return 'abcdef'\nconst suffix = (s, c) => {\n  return s.slice(s.indexOf(c) + c.length) + c;\n};\n\n//  Task \n//  Write a function that takes two strings as an argument and returns a new string with the characters of the first string in the second string.\n//  Example\n//  Given the strings 'abcdef' and 'b', the function should return 'bacdef'\nconst inplaceReplace = (s, c) => {\n  return s.replace(c, s.split(c).join(''));\n};\n\n//  Task \n//  Write a function that takes two strings as an argument and returns a new string with the characters of the second string in the first string.\n//  Example\n//  Given the strings 'abcdef' and 'b', the function should return 'abdef'\nconst inplaceReverseReplace = (s, c) => {\n  return s.replace(c, s.split(c).reverse().join(''));\n};\n\nconst tasks = [\n  {\n    name:'reverseDelete',\n    run: reverseDelete\n  },\n  {\n    name: 'filterString',\n    run: filterString\n  },\n  {\n    name:'replaceReverse',\n    run: replaceReverse\n  },\n  {\n    name:'mergeStrings',\n    run: mergeStrings\n  },\n  {\n    name:'reverseMergeStrings',\n    run: reverseMergeStrings\n  },\n  {\n    name: 'prefix',\n    run: prefix\n  },\n  {\n    name:'suffix',\n    run: suffix\n  },\n  {\n    name: 'inplaceReplace',\n    run: inplaceReplace\n  },\n  {\n    name: 'inplaceReverseReplace',\n    run: inplaceReverseReplace\n  }\n];\n\nmodule.exports = tasks;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consist of alone digits, return a list.\n   Each element i of the end product should be \" the phone number of odd component in the \n   string i of the remark. \" where all the i's should be replaced by the number \n   of odd digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consist of alone digits, return a list.\n   Each element i of the end product should be \" the phone number of odd component in the \n   string i of the remark. \" where all the i's should be replaced by the number \n   of odd digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n    let count = [];\n    let result = [];\n    for(let i=0;i<lst.length;i++){\n        let temp = \"\";\n        for(let j=0;j<lst[i].length;j++){\n            if(lst[i][j].toString().charAt(0)=='9'){\n                if(lst[i][j].toString().charAt(1)=='1'){\n                    temp += \"1\";\n                }\n                else{\n                    temp += \"0\";\n                }\n            }\n            else{\n                temp += lst[i][j].toString();\n            }\n        }\n        let s = temp.toString();\n        count[s] = count[s] || 0;\n        count[s]++;\n        result.push(`the number of odd elements ${count[s]} in the str${s} of the ${s}put.`);\n    }\n    return result;\n}\n\nmodule.exports = oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find the minimal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const arr = nums.map((x, i) => x * i);\n  return Math.min(...arr.filter((x) => x!== 0));\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4])); // 1\nconsole.log(minSubArraySum([-1, -2, -3])); // -6\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row exemplify a individual well, \n   and each 1 in a course represents a single unit of water. \n   Each well have a corresponding bucket that can be used to extract water from it, \n   and all bucket have the same capacity.\n   Your task is to use the buckets to evacuate the well. \n   Output the act of time you necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells. Each row exemplify a individual well, \n   and each 1 in a course represents a single unit of water. \n   Each well have a corresponding bucket that can be used to extract water from it, \n   and all bucket have the same capacity.\n   Your task is to use the buckets to evacuate the well. \n   Output the act of time you necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let fill = 0;\n  let length = grid.length;\n\n  for (let i = 0; i < length; i++) {\n    fill += grid[i][0];\n  }\n\n  if (fill > capacity) {\n    fill = capacity;\n  }\n\n  return fill;\n};\n\nconst solution = (grid, capacity) => {\n  let length = grid.length;\n\n  for (let i = 0; i < length; i++) {\n    for (let j = 1; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        grid[i][j] = 0;\n      }\n    }\n  }\n\n  let totalFill = 0;\n  for (let i = 0; i < length; i++) {\n    totalFill += grid[i][0];\n  }\n\n  if (totalFill < capacity) {\n    return totalFill;\n  }\n\n  return -1;\n};\n\nconsole.log(solution([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 1));\nconsole.log(solution([[0, 0, 0], [0, 0, 0]], 5));\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  // Your code here\n  return arr;\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4])[0, 1, 2, 3, 4]);\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tax to follow through \n   a function that returns a list of all word from string s that hold exactly \n   n consonant, in ordering these words appear in the chain s.\n   If the string s is empty then the function should return an empty list.\n   bill: you may assume the stimulation bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you have been tax to follow through \n   a function that returns a list of all word from string s that hold exactly \n   n consonant, in ordering these words appear in the chain s.\n   If the string s is empty then the function should return an empty list.\n   bill: you may assume the stimulation bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n    let wordArray = [];\n    let i = 0;\n    let prevWord = '';\n    let count = 0;\n\n    while (i < s.length) {\n        const currentWord = s.slice(i, i + 1);\n        if (count === n) {\n            wordArray.push(currentWord);\n        }\n\n        if (currentWord!== prevWord && count === n) {\n            wordArray.push(currentWord);\n        }\n\n        if (count === n) {\n            count = 0;\n        }\n\n        if (count === n) {\n            wordArray.push(currentWord);\n            count = 0;\n        }\n\n        prevWord = currentWord;\n        i++;\n    }\n\n    return wordArray;\n};\n\nconst selectWordsTest = () => {\n    assert.deepEqual(selectWords('Hello world', 4), ['world']);\n    assert.deepEqual(selectWords('Mary had a little lamb', 3), ['Mary', 'had', 'a', 'little', 'lamb']);\n    assert.deepEqual(selectWords('Uncle sam', 3), ['Uncle','sam']);\n    assert.deepEqual(selectWords('Hello world', 0), []);\n    assert.deepEqual(selectWords('Hello world', 5), []);\n};\n\ndescribe('selectWords', () => {\n    selectWordsTest();\n});<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n   two consonant from the good slope of the word (case sensible). \n  \n   vowel in the beginning and termination doesn't count. Return empty string if you didn't \n   find any vowel met the above condition. \n\n   You may bear that the given chain contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n   two consonant from the good slope of the word (case sensible). \n  \n   vowel in the beginning and termination doesn't count. Return empty string if you didn't \n   find any vowel met the above condition. \n\n   You may bear that the given chain contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let char = '',\n      start = 0,\n      end = word.length - 1;\n\n  while (start < end) {\n    let middle = (start + end) / 2;\n    char = word[middle];\n\n    if (isVowel(char) &&!isVowel(word[middle - 1]) &&!isVowel(word[middle + 1])) {\n      return char;\n    }\n\n    if (isVowel(char) && isVowel(word[middle - 1])) {\n      start = middle + 1;\n    }\n\n    if (isVowel(char) && isVowel(word[middle + 1])) {\n      end = middle - 1;\n    }\n  }\n\n  return '';\n};\n\nconst isVowel = (char) => {\n  return char.toLowerCase() === char.toUpperCase();\n};\n\n// eslint-disable-next-line no-unused-vars\nconst getVowel = (word) => {\n  let char = '',\n      start = 0,\n      end = word.length - 1;\n\n  while (start < end) {\n    let middle = (start + end) / 2;\n    char = word[middle];\n\n    if (isVowel(char)) {\n      return char;\n    }\n\n    if (isVowel(word[middle - 1])) {\n      start = middle + 1;\n    }\n\n    if (isVowel(word[middle + 1])) {\n      end = middle - 1;\n    }\n  }\n\n  return '';\n};\n\nconst isVowelCapital = (char) => {\n  return isVowel(char.toUpperCase()) &&!isVowel(char.toLowerCase());\n};\n\nconst getVowelCapital = (word) => {\n  let char = '',\n      start = 0,\n      end = word.length - 1;\n\n  while (start < end) {\n    let middle = (start + end) / 2;\n    char = word[middle];\n\n    if (isVowelCapital(char)) {\n      return char;\n    }\n\n    if (isVowelCapital(word[middle - 1])) {\n      start = middle + 1;\n    }\n\n    if (isVowelCapital(word[middle + 1])) {\n      end = middle - 1;\n    }\n  }\n\n  return '';\n};\n\nexport default getClosestVowel;\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of capable \n   digression' (' or close parentheses')' merely. \n   Your job is to control if it is potential to concatenate the two string in\n   some order, that the result string will be adept. \n   A string S is considered to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings, both strings consist of capable \n   digression' (' or close parentheses')' merely. \n   Your job is to control if it is potential to concatenate the two string in\n   some order, that the result string will be adept. \n   A string S is considered to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const count = (x) => (x === '(')? 1 : x === ')'? -1 : 0\n  const l = lst.length\n  const stack = []\n  let i = 0\n  let j = l - 1\n  while (i < l && j >= 0) {\n    const p = lst[i]\n    const q = lst[j]\n    if (count(p) === 0) {\n      stack.push(p)\n      i++\n    } else if (count(q) === 0) {\n      stack.pop()\n      j--\n    } else if (p === q) {\n      i++\n      j--\n    } else {\n      return 'No'\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No'\n}\n\nconsole.log(matchParens([')', ')']));\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of duration k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of duration k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    const sorted = sort(arr);\n    const range = sorted.slice(0, k);\n\n    return range.sort((a, b) => a - b);\n};\n\nexport default maximum;\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in even military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in even military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const l = lst.filter(x => (x % 2 === 0));\n  const r = lst.filter(x => (x % 2!== 0));\n  return l.reduce((acc, x) => (x + acc), 0) + r.reduce((acc, x) => (x + acc), 0);\n};\n\nconsole.log(solution([5, 8, 7, 1])); //12\nconsole.log(solution([3, 3, 3, 3, 3])); //9\nconsole.log(solution([30, 13, 24, 321])); //0<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  if (k > arr.length) {\n    return 0\n  }\n\n  const res = 0\n  for (let i = 0; i < k; i++) {\n    res += arr[i]\n  }\n\n  const left = k - 1\n  for (let i = k; i < arr.length; i++) {\n    res += arr[i]\n    if (i + 1 < arr.length) {\n      res += arr[i + 1]\n    }\n    if (i + 2 < arr.length) {\n      res += arr[i + 2]\n    }\n  }\n\n  return res\n}\n\nexport default addElements\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that take the curious number in collatz sequence. \n\n   The Collatz guess is a conjecture in mathematics that concern a succession defined \n   as follow: start with any positive integer n. Then each condition is obtained from the \n   previous term as stick to: if the former term be even, the adjacent term is one half of \n   the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list classify in increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that take the curious number in collatz sequence. \n\n   The Collatz guess is a conjecture in mathematics that concern a succession defined \n   as follow: start with any positive integer n. Then each condition is obtained from the \n   previous term as stick to: if the former term be even, the adjacent term is one half of \n   the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list classify in increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return collatz(n / 2);\n    }\n    return [collatz(3 * n + 1), collatz(n)];\n  }\n  return collatz(n);\n}\n\nconst getOddCollatz2 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return collatz(n / 2);\n    }\n    return [collatz(3 * n + 1), collatz(n)];\n  }\n  return collatz(n);\n}\n\nconst getOddCollatz3 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return collatz(n / 2);\n    }\n    return [collatz(3 * n + 1), collatz(n)];\n  }\n  return collatz(n);\n}\n\nconst getOddCollatz4 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return collatz(n / 2);\n    }\n    return [collatz(3 * n + 1), collatz(n)];\n  }\n  return collatz(n);\n}\n\nconst getOddCollatz5 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return collatz(n / 2);\n    }\n    return [collatz(3 * n + 1), collatz(n)];\n  }\n  return collatz(n);\n}\n\nconst getOddCollatz6 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return collatz(n / 2);\n    }\n    return [collatz(3 * n + 1), collatz(n)];\n  }\n  return collatz(n);\n}\n\nconst getOddCollatz7 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return collatz(n / 2);\n    }\n    return [collatz(3 * n + 1), collatz(n)];\n  }\n  return collatz(n);\n}\n\nconst getOddCollatz8 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return collatz(n / 2);\n    }\n    return [collatz(3 * n + 1), collatz(n)];\n  }\n  return collatz(n);\n}\n\nconst getOddCollatz9 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return collatz(n / 2);\n    }\n    return [collatz(3 * n + 1), collatz(n)];\n  }\n  return collatz(n);\n}\n\nconst getOddCollatz10 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return collatz(n / 2);\n    }\n    return [collatz(3 * n + 1), collatz(n)];\n  }\n  return collatz(n);\n}\n\nconst getOddCollatz11 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return collatz(n / 2);\n    }\n    return [collatz(3 * n + 1), collatz(n)];\n  }\n  return collatz(n);\n}\n\nconst getOddCollatz12 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return collatz(n / 2);\n    }\n    return [collatz(3 * n + 1), collatz(n)];\n  }\n  return collatz(n);\n}\n\nconst getOddCollatz13 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return collatz(n / 2);\n    }\n    return [collatz(3 * n + 1), collatz(n)];\n  }\n  return collatz(n);\n}\n\nconst getOddCollatz14 = (n) => {\n  "}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a grant date chain and \n   reappearance genuine if the date is valid differently false. \n   The date is valid if all of the following rule are satisfied: \n   1. The date string is not empty. \n   2. The issue of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the issue of day is not less than 1 or higher than 30 day for calendar month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. \n   3. The month should not be less than 1 or high than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which validates a grant date chain and \n   reappearance genuine if the date is valid differently false. \n   The date is valid if all of the following rule are satisfied: \n   1. The date string is not empty. \n   2. The issue of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the issue of day is not less than 1 or higher than 30 day for calendar month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. \n   3. The month should not be less than 1 or high than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n    let months = ['01','02','03','04','05','06','07','08','09','10','11','12'];\n    let day = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];\n    let dateArr = date.split('-');\n    let month = months[dateArr[0]-1];\n    let day = day[dateArr[1]-1];\n    let year = parseInt(dateArr[2]);\n    if(month == '01' || month == '03' || month == '05' || month == '07' || month == '08' || month == '10' || month == '12'){\n        if(day <= 31 && day >= 1)\n            return true;\n        else\n            return false;\n    }\n    else if(month == '04' || month == '06' || month == '09' || month == '11'){\n        if(day <= 30 && day >= 1)\n            return true;\n        else\n            return false;\n    }\n    else if(month == '02'){\n        if(day <= 29 && day >= 1)\n            return true;\n        else\n            return false;\n    }\n    else{\n        return false;\n    }\n}\n\nconst getFirstDay = () => {\n    let month = new Date().getMonth();\n    let day = new Date().getDate();\n    let year = new Date().getFullYear();\n    let dayOfWeek = new Date().getDay();\n    if(month == 0){\n        return month + '/' + day + '/' + year;\n    }\n    else{\n        return month + '/' + day + '/' + year;\n    }\n}\n\nconst getLastDay = () => {\n    let month = new Date().getMonth();\n    let day = new Date().getDate();\n    let year = new Date().getFullYear();\n    if(month == 11){\n        return month + '/' + day + '/' + year;\n    }\n    else{\n        return month + '/' + day + '/' + year;\n    }\n}\n\nconst getStartDate = () => {\n    let firstDay = getFirstDay();\n    return firstDay +'-'+ firstDay;\n}\n\nconst getEndDate = () => {\n    let lastDay = getLastDay();\n    return lastDay +'-'+ lastDay;\n}\n\nconst checkGrantDate = (date) => {\n    let grantDate = document.getElementById('grant-date').value;\n    if(validDate(grantDate)){\n        document.getElementById('grant-date').value = date;\n        document.getElementById('grant-date-valid').innerHTML = 'valid';\n    }\n    else{\n        document.getElementById('grant-date-valid').innerHTML = 'not valid';\n    }\n}\n\nconst startGrantDate = () => {\n    let firstDate = document.getElementById('grant-date-first').value;\n    let lastDate = document.getElementById('grant-date-last').value;\n    if(validDate(firstDate)){\n        document.getElementById('grant-date-first').value = firstDate;\n        document.getElementById('grant-date-last').value = lastDate;\n        document.getElementById('grant-date-valid').innerHTML = 'valid';\n    }\n    else{\n        document.getElementById('grant-date-first').value = '';\n        document.getElementById('grant-date-last').value = '';\n        document.getElementById('grant-date-valid').innerHTML = 'not valid';\n    }\n}\n\nconst endGrantDate = () => {\n    let firstDate = document.getElementById('grant-date-first').value;\n    let lastDate = document.getElementById('grant-date-last').value;\n    if(validDate(lastDate)){\n        document.getElementById('grant-date-first').value = firstDate;\n        document.getElementById('grant-date-last').value = lastDate;\n        document.getElementById('grant-date-valid').innerHTML = 'valid';\n    }\n    else{\n        document.getElementById('grant-date-first').value = '';\n        document.getElementById('grant-date-last').value = '';\n        document.getElementById('grant-date-valid').innerHTML = 'not valid';\n    }\n}\n\nconst addDate = () => {\n    let firstDate = document.getElementById('grant-date-first').value;\n    let lastDate = document.getElementById('grant-date-last').value;\n    let date = document.getElementById('grant-date-add').value;\n    if(validDate(date)){\n        let dateArr = date.split('-');\n        let firstDateArr = firstDate.split('-');\n        let lastDateArr = lastDate.split('-');\n        let startDate = new Date(firstDateArr[0],firstDateArr[1]-1,firstDateArr"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n    const words = txt.split(/\\s+/);\n    let ret = [];\n    words.forEach(function(word) {\n        ret.push(word);\n    });\n    return ret;\n}\n\n/* Given a string of words, return a list of words separated on commas, if no commas exists you should split on whitespace\n   Examples\n   splitWords(\"Hello world!\") ➞ [\"Hello world!\"]\n   splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n   splitWords(\"abcdef\") == 3\n   */\nconst splitWordsOnCommas = (txt) => {\n    const words = txt.split(/\\s*,\\s*/);\n    let ret = [];\n    words.forEach(function(word) {\n        ret.push(word);\n    });\n    return ret;\n}\n\n/* Given a string of words, return a list of words separated on commas and on whitespace, if no commas or whitespace exists\n   you should split on commas\n   Examples\n   splitWords(\"Hello world!\") ➞ [\"Hello world!\"]\n   splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n   splitWords(\"abcdef\") == 3\n   */\nconst splitWordsOnCommasAndWhitespace = (txt) => {\n    const words = txt.split(/\\s*,\\s*|\\s+/);\n    let ret = [];\n    words.forEach(function(word) {\n        ret.push(word);\n    });\n    return ret;\n}\n\n/* Given a string of words, return a list of words separate on commas and on whitespace, if no commas or whitespace exists\n   you should split on commas\n   Examples\n   splitWords(\"Hello world!\") ➞ [\"Hello world!\"]\n   splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n   splitWords(\"abcdef\") == 3\n   */\nconst splitWordsOnCommasAndWhitespace2 = (txt) => {\n    const words = txt.split(/\\s*(?:\\,\\s*|\\s+)/);\n    let ret = [];\n    words.forEach(function(word) {\n        ret.push(word);\n    });\n    return ret;\n}\n\n/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas, if no commas exists you should split on whitespace\n   Examples\n   splitWords(\"Hello world!\") ➞ [\"Hello world!\"]\n   splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n   splitWords(\"abcdef\") == 3\n   */\nconst splitWordsOnWhitespace = (txt) => {\n    const words = txt.split(/\\s+/);\n    let ret = [];\n    words.forEach(function(word) {\n        ret.push(word);\n    });\n    return ret;\n}\n\n/* Given a string of words, return a list of words separated on whitespace, if no whitespaces exists in the textbook you \n   should split on commas, if no commas exists you should split on whitespace\n   Examples\n   splitWords(\"Hello world!\") ➞ [\"Hello world!\"]\n   splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n   splitWords(\"abcdef\") == 3\n   */\nconst splitWordsOnWhitespace2 = (txt) => {\n    const words = txt.split(/\\s*(?:\\,\\s*|\\s+)/);\n    let ret = [];\n    words.forEach(function(word) {\n        ret.push(word);\n    });\n    return ret;\n}\n\n/* Given a string of words, return a list of words separated on commas, if no commas exists you should split on whitespace\n   Examples\n   splitWords(\"Hello world!\") ➞ [\"Hello world!\"]\n   splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n   splitWords(\"abcdef\") == 3\n   */\nconst splitWordsOnWhitespace3 = (txt) => {\n    const words = txt.split(/\\s*(?:\\,\\s*|\\s+)/);\n    let ret = [];\n    words.forEach(function(word) {\n        ret.push(word);\n    });\n    return ret;\n}\n\n/* Given a string of words, return a list of words separated on whitespace, if no whitespaces exists in the textbook you \n   should split on commas, if no commas exists you should split on whitespace\n   Examples\n   splitWords(\"Hello world!\") ➞ [\"Hello world!\"]\n   splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n   splitWords(\"abcdef\") == 3\n   */\nconst splitWordsOnWhitespace4 = (txt) => {\n    const words = txt.split(/\\s*(?:\\,\\s*|\\s+)/);\n    let ret = [];\n    words.forEach(function(word) {\n        ret.push(word);\n    });\n    return ret;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted \n   in ascending decree. If list have more than 1 extra of the like \n   number, return false. simulate no minus numbers and alone integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are sorted \n   in ascending decree. If list have more than 1 extra of the like \n   number, return false. simulate no minus numbers and alone integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const result = lst.slice(0, lst.length - 1);\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < lst[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(isSorted([5]));\nconsole.log(isSorted([1, 2, 3, 4, 5]));\nconsole.log(isSorted([1, 3, 2, 4, 5]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(isSorted([1, 3, 2, 4, 5, 6, 7]));\nconsole.log(isSorted([1, 2, 2, 3, 3, 4]));\nconsole.log(isSorted([1, 2, 2, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval equal a couple of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval equal a couple of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let min = Math.min(interval1.start, interval2.start)\n  let max = Math.max(interval1.end, interval2.end)\n  if (min > max) return \"NO\"\n  return Math.floor(Math.min(min, max) / 2)\n}\n\nconsole.log(intersection((1, 2), (2, 3)))\nconsole.log(intersection((-1, 1), (0, 4)))\nconsole.log(intersection((-3, -1), (-5, 5)))\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n   union of magnitude of integer multiply by product of all signs \n   of each number in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need to return\n   union of magnitude of integer multiply by product of all signs \n   of each number in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const len = arr.length;\n  let product = 0;\n  let sign = 0;\n  \n  if (len === 0) {\n    return null;\n  }\n\n  for (let i = 0; i < len; i++) {\n    product = arr[i];\n    if (product < 0) {\n      sign = -1;\n    } else if (product > 0) {\n      sign = 1;\n    } else {\n      sign = 0;\n    }\n    product = sign * product;\n    product = Math.abs(product);\n    prodSigns.push(product);\n  }\n\n  return prodSigns.reduce((prod, val) => prod + val);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cell of the grid incorporate a value. Every integer in the range [ 1, N * N ] \n   inclusive appears exactly once on the cell of the grid.\n\n   You induce to find the minimum path of length k in the grid. You can begin \n   from any cell, and in each step you can move to any of the neighbor cells, \n   in early password, you can go to cell which partake an edge with you current \n   cell. \n   Please note that a path of duration k means travel to exactly k cells (not \n   inevitably discrete). \n   You CANNOT go off the grid.\n   A way A (of distance k) is considered less than a way barn (of length k) if \n   after have the arrange tilt of the values on the cell that A and B plump \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early son, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we consume \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the solution is unique. \n   Return an ordered list of the values on the cells that the minimum way move through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cell of the grid incorporate a value. Every integer in the range [ 1, N * N ] \n   inclusive appears exactly once on the cell of the grid.\n\n   You induce to find the minimum path of length k in the grid. You can begin \n   from any cell, and in each step you can move to any of the neighbor cells, \n   in early password, you can go to cell which partake an edge with you current \n   cell. \n   Please note that a path of duration k means travel to exactly k cells (not \n   inevitably discrete). \n   You CANNOT go off the grid.\n   A way A (of distance k) is considered less than a way barn (of length k) if \n   after have the arrange tilt of the values on the cell that A and B plump \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early son, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we consume \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the solution is unique. \n   Return an ordered list of the values on the cells that the minimum way move through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const lst_row = new Array(grid.length)\n  const lst_col = new Array(grid.length)\n\n  for(let i = 0; i < grid.length; i++) {\n    for(let j = 0; j < grid[i].length; j++) {\n      if(i === 0 && j === 0) {\n        lst_row[i] = grid[i][j]\n        lst_col[i] = grid[i][j]\n      } else {\n        let a = grid[i-1][j]\n        let b = grid[i][j]\n        if(lst_row[i] < lst_row[i-1] && lst_col[i] < lst_col[i-1]) {\n          lst_row[i] = a\n          lst_col[i] = a\n        } else {\n          lst_row[i] = b\n          lst_col[i] = b\n        }\n      }\n    }\n  }\n\n  let min = Number.MAX_SAFE_INTEGER\n  let min_index = 0\n  let lst_row_k = new Array(grid.length)\n  let lst_col_k = new Array(grid.length)\n\n  for(let i = 0; i < grid.length; i++) {\n    for(let j = 0; j < grid[i].length; j++) {\n      if(k === 1) {\n        if(grid[i][j] < min) {\n          min = grid[i][j]\n          min_index = [i, j]\n          lst_row_k = lst_row\n          lst_col_k = lst_col\n        }\n      } else {\n        let min_index_k = [i, j]\n        for(let p = 1; p < k; p++) {\n          let min_index_k_p = min_index_k.slice()\n          min_index_k_p[1] += p\n          let tmp = lst_row_k[min_index_k_p[0]]\n          if(lst_col_k[min_index_k_p[0]] < tmp) {\n            tmp = lst_col_k[min_index_k_p[0]]\n          }\n          if(tmp < lst_row_k[min_index_k_p[0]]) {\n            tmp = lst_row_k[min_index_k_p[0]]\n          }\n          lst_row_k[min_index_k_p[0]] = tmp\n          tmp = lst_col_k[min_index_k_p[0]]\n          if(tmp < lst_row_k[min_index_k_p[0]]) {\n            tmp = lst_row_k[min_index_k_p[0]]\n          }\n          lst_col_k[min_index_k_p[0]] = tmp\n        }\n        if(lst_row_k[min_index_k[0]] < lst_row_k[min_index_k_p[0]]) {\n          min_index = min_index_k\n        }\n      }\n    }\n  }\n\n  return min\n}\n\nconsole.log(minPath([[1,2,3], [4,5,6], [7,8,9]], 3))\nconsole.log(minPath([[5,9,3], [4,1,6], [7,8,2]], 1))\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied profoundly by mathematicians in \n   the final couple hundred. However, what people don't know is Tribonacci sequence. \n   Tribonacci succession is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is curious.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied profoundly by mathematicians in \n   the final couple hundred. However, what people don't know is Tribonacci sequence. \n   Tribonacci succession is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is curious.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const array = []\n  for (let i = 1; i <= n; i++) {\n    array.push(1)\n    array.push(i)\n    if (i % 2 === 0) {\n      array.push(i + 1)\n    }\n    array.push(Math.pow(tri(i - 1), 2) + tri(i - 2) + tri(i + 1))\n  }\n  return array\n}\n\nexport default tri\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the leftover digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the leftover digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const result = [];\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  for (let i = sum; i > 0; i--) {\n    result.push(i);\n  }\n  if (sum === 0) {\n    return 0;\n  }\n  return result;\n};\n\nmodule.exports = digits;\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ assumed \n   isNested('[]') ➞ assumed \n   isNested('[[][]]') ➞ dependable \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ assumed \n   isNested('[]') ➞ assumed \n   isNested('[[][]]') ➞ dependable \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n   let outer = /[\\[\\]]/\n   let inner = /[\\[\\]]/\n   let isValid = (string) = > {\n     let string = string.split(outer)\n     let i = 0\n     for (i = 0; i < string.length; i++) {\n       if (string[i] === '[' && string[i + 1] === '[' && string[i + 2] === ']') {\n         let j = 0\n         while (j < string.length && string[j] === '[' && string[j + 1] === ']') {\n           j++\n         }\n         if (j === string.length) {\n           return false\n         }\n       }\n     }\n     return true\n   }\n   return isValid(string)\n }\n */\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need to return the sum of squared numbers in the give list,\n   round each component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You need to return the sum of squared numbers in the give list,\n   round each component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n    lst[i] = Math.floor(lst[i]);\n  }\n  return sum;\n}\n\nconst main = () => {\n  let lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  let sum = sumSquares(lst);\n  console.log(sum);\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetical quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetical quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n    const pattern = /\\w+$/;\n    const match = pattern.exec(txt);\n    if (match) {\n        const ch = match[0].charAt(match[0].length - 1);\n        return!(ch.match(/[A-Za-z]/));\n    }\n    return false;\n};\n\n/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetic quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n    const pattern = /\\w+$/;\n    const match = pattern.exec(txt);\n    if (match) {\n        const ch = match[0].charAt(match[0].length - 1);\n        return ch.match(/[A-Za-z]/);\n    }\n    return false;\n};\n\nconst checkIfLastCharIsNumber = (txt) => {\n    const pattern = /\\d+$/;\n    const match = pattern.exec(txt);\n    if (match) {\n        const ch = match[0].charAt(match[0].length - 1);\n        return ch.match(/\\d/);\n    }\n    return false;\n};\n\nconst checkIfLastCharIsLetter = (txt) => {\n    const pattern = /\\w+$/;\n    const match = pattern.exec(txt);\n    if (match) {\n        const ch = match[0].charAt(match[0].length - 1);\n        return ch.match(/[A-Za-z]/);\n    }\n    return false;\n};\n\n/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetic quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsNumber = (txt) => {\n    const pattern = /\\d+$/;\n    const match = pattern.exec(txt);\n    if (match) {\n        const ch = match[0].charAt(match[0].length - 1);\n        return ch.match(/\\d/);\n    }\n    return false;\n};\n\n/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetic quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsLetter = (txt) => {\n    const pattern = /\\w+$/;\n    const match = pattern.exec(txt);\n    if (match) {\n        const ch = match[0].charAt(match[0].length - 1);\n        return ch.match(/[A-Za-z]/);\n    }\n    return false;\n};\n\nconst checkIfLastCharIsSpace = (txt) => {\n    const pattern = /\\s+$/;\n    const match = pattern.exec(txt);\n    if (match) {\n        const ch = match[0].charAt(match[0].length - 1);\n        return ch.match(/\\s/);\n    }\n    return false;\n};\n\nconst checkIfLastCharIsHyphen = (txt) => {\n    const pattern = /\\-+$/;\n    const match = pattern.exec(txt);\n    if (match) {\n        const ch = match[0].charAt(match[0].length - 1);\n        return ch.match(/-/);\n    }\n    return false;\n};\n\nconst checkIfLastCharIsPunctuation = (txt) => {\n    const pattern = /[\\.\\/\\-_!@#$%^&*()+=|~;:<>?\\\\]+$/;\n    const match = pattern.exec(txt);\n    if (match) {\n        const ch = match[0].charAt(match[0].length - 1);\n        return ch.match(/[\\.\\/\\-_!@#$%^&*()+=|~;:<>?\\\\]/);\n    }\n    return false;\n};\n\nconst checkIfLastCharIsSymbol = (txt) => {\n    const pattern = /[^\\w\\s]+$/;\n    const match = pattern.exec(txt);\n    if (match) {\n        const ch = match[0].charAt(match[0].length - 1);\n        return ch.match(/[^\\w\\s]/);\n    }\n    return false;\n};\n\nconst checkIfLastCharIsWhitespace = (txt) => {\n    const pattern = /\\s+$/;\n    const match = pattern.exec(txt);\n    if (match) {\n        const ch = match["}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = 0\n  while (i < arr.length - 1) {\n    let j = i + 1\n    while (j < arr.length) {\n      if (arr[j] > arr[i]) {\n        return j - 1\n      }\n      j++\n    }\n    i++\n  }\n  return -1\n}\n\nmodule.exports = canArrange\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' equal \n   the big of damaging integer, and 'b' is the smallest \n   of positive integers in a list.\n   If there is no negative or plus integers, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tuple (a, b), where 'a' equal \n   the big of damaging integer, and 'b' is the smallest \n   of positive integers in a list.\n   If there is no negative or plus integers, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const res = lst.map((x) => {\n    if (x === null || isNaN(x)) {\n      return null\n    }\n    let n = Math.abs(x)\n    let t = []\n    while (n > 0) {\n      t.unshift(n)\n      n = n - 1\n    }\n    return t\n  }).filter((x) => x.length > 0)\n  return res.length === 0? null : res\n}\n\nmodule.exports = largestSmallestIntegers\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, float, or string representing \n   real issue, and returns the large variable in its give variable character. \n   Return null if the value are equal. \n   eminence: If a real number is represented as a string, the floating compass point might constitute. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes integers, float, or string representing \n   real issue, and returns the large variable in its give variable character. \n   Return null if the value are equal. \n   eminence: If a real number is represented as a string, the floating compass point might constitute. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n\t  if (a === b) return null;\n\t  if (a < b) return a;\n\t  if (b < a) return b;\n\t  return a;\n\t}\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the union of precisely 4 cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number n can be written as the union of precisely 4 cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n + n;\n  return sum % 2 === 0;\n}\n\n/**\n * Evaluate whether the given number n can be written as the sum of an even number of cocksure pairs.\n * Example\n * isSumEven(4) == false\n * isSumEven(6) == false\n * isSumEven(8) == true\n */\nconst isSumEven = (n) => {\n  const sum = n + n;\n  return sum % 2 === 0;\n}\n\nmodule.exports = {\n  isEqualToSumEven,\n  isSumEven\n}\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let i = 1;\n  let a = 1;\n  let b = 1;\n  let sum = 1;\n  while (n > 0) {\n    sum += a;\n    i++;\n    a = a * i;\n    b = b * (n - i);\n    n--;\n  }\n  return sum;\n}\n\nconsole.log(specialFactorial(7));\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n    var spaces = /\\s/g;\n    var split = text.split(spaces);\n    var result = split.join(\"_\");\n    var instrument = /\\s+/g;\n    var instrumentParts = result.split(instrument);\n    var fixed = instrumentParts.join(\"\");\n    return fixed;\n}\n\n/*\n  Given a string text, return a string where all consecutive spaces are \n   replaced with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixDoubleSpaces = (text) => {\n    var doubleSpaces = /\\s{2,}/g;\n    var split = text.split(doubleSpaces);\n    var result = split.join(\" \");\n    return result;\n}\n\n/*\n  Given a string text, return a string where all consecutive spaces are \n   replaced with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst removeDoubleSpaces = (text) => {\n    var doubleSpaces = /\\s{2,}/g;\n    var split = text.split(doubleSpaces);\n    var result = split.join(\" \");\n    return result;\n}\n\n/*\n  Given a string text, return a string where all consecutive spaces are \n   replaced with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst removeDoubleSpacesFromEnd = (text) => {\n    var doubleSpaces = /\\s{2,}/g;\n    var split = text.split(doubleSpaces);\n    var result = split.join(\" \");\n    return result;\n}\n\n/*\n  Given a string text, return a string where all consecutive spaces are \n   replaced with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst removeDoubleSpacesFromStart = (text) => {\n    var doubleSpaces = /\\s{2,}/g;\n    var split = text.split(doubleSpaces);\n    var result = split.join(\" \");\n    return result;\n}\n\n/*\n  Given a string text, return a string where all consecutive spaces are \n   replaced with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst removeDoubleSpacesFromMiddle = (text) => {\n    var doubleSpaces = /\\s{2,}/g;\n    var split = text.split(doubleSpaces);\n    var result = split.join(\" \");\n    return result;\n}\n\nmodule.exports = {\n    fixSpaces,\n    fixDoubleSpaces,\n    removeDoubleSpaces,\n    removeDoubleSpacesFromStart,\n    removeDoubleSpacesFromMiddle,\n    removeDoubleSpacesFromEnd\n}<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string exemplify a file's name, and fall \n  ' Yes' if the the file's name is valid, and returns' No' differently. \n   A file's name is considered to be valid if and only if all the following condition \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains precisely one department of transportation'.' \n   - The substring before the department of transportation should not be empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a string exemplify a file's name, and fall \n 'Yes' if the the file's name is valid, and returns' No' differently. \n   A file's name is considered to be valid if and only if all the following condition \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains precisely one department of transportation'.' \n   - The substring before the department of transportation should not be empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n    return (file_name.match(/^[A-Za-z][A-Za-z0-9]{1}[a-z0-9]{1}[0-9]{1}[a-z]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za-z0-9]{1}[A-Za"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  return lst.reduce((acc, val) => acc + Math.pow(val, 2), 0);\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the routine will feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  return lst.reduce((acc, val) => acc + Math.pow(val, 3), 0);\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the routine will feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumMultiples = (lst) => {\n  return lst.reduce((acc, val) => acc + val, 0);\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the routine will feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresAndCubes = (lst) => {\n  return lst.reduce((acc, val) => acc + Math.pow(val, 2) + Math.pow(val, 3), 0);\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the routine will feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumMultiplesAndSquares = (lst) => {\n  return lst.reduce((acc, val) => acc + val, 0);\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the routine will feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumMultiplesAndCubes = (lst) => {\n  return lst.reduce((acc, val) => acc + Math.pow(val, 3) + val, 0);\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the routine will feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumMultiplesAndSquaresAndCubes = (lst) => {\n  return lst.reduce((acc, val) => acc + Math.pow(val, 2) + Math.pow(val, 3) + val, 0);\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the routine will feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. "}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n   the sentence contains some news separate by a space, \n   and you have to return a chain that contains the quarrel from the original sentence,\n   whose duration are choice numbers, \n   the order of the words in the new chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representing a sentence,\n   the sentence contains some news separate by a space, \n   and you have to return a chain that contains the quarrel from the original sentence,\n   whose duration are choice numbers, \n   the order of the words in the new chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let current = sentence.split(\" \")[0]\n  let currentWord = current.split(\"\")[0]\n  let words = [current]\n  let chain = current\n  while(words.indexOf(currentWord) === -1){\n    words = words.concat(current.split(\"\"))\n    current = current.replace(currentWord, \"\")\n    currentWord = current.split(\"\")[0]\n    words.push(current)\n    chain = words.join(\"\")\n  }\n  return chain\n}\n\nconsole.log(wordsInSentence(\"This is a test\"))\nconsole.log(wordsInSentence(\"lets go for swimming\"))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression \n   x * n. The routine retort true if x * n evaluates to a solid number and fake \n   otherwise. Both x and n, are drawstring representation of a fraction, and have the follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive unharmed numbers. \n\n   You can wear that x, and n are valid fraction, and do not hold zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a function that will simplify the expression \n   x * n. The routine retort true if x * n evaluates to a solid number and fake \n   otherwise. Both x and n, are drawstring representation of a fraction, and have the follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive unharmed numbers. \n\n   You can wear that x, and n are valid fraction, and do not hold zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n   let [x, n] = [x, n]\n   if x * n === 0 then return false\n   else if x === 1 then return n === 1\n   else if n === 1 then return x\n   else if n === 0 then return false\n   else if x === n then return x\n   else return simplify(x, n / x) || simplify(x / n, n)\n }\n*/\n\nfunction simplify(x, n) {\n  let [x, n] = [x, n]\n  if (x * n === 0) {\n    return false\n  } else if (x === 1) {\n    return n === 1\n  } else if (n === 1) {\n    return x\n  } else if (n === 0) {\n    return false\n  } else if (x === n) {\n    return x\n  } else if (x === n / x) {\n    return n\n  } else if (n === x / n) {\n    return x\n  } else {\n    return simplify(x, n / x) || simplify(x / n, n)\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integer \n   in ascending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts the given list of integer \n   in ascending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const points = new Array(nums.length)\n  for (let i = 0; i < nums.length; i++) {\n    points[i] = Math.pow(nums[i], 2)\n  }\n  return points.sort((a, b) => {\n    if (a === b) return 0\n    return (a < b)? -1 : 1\n  })\n}\n\nmodule.exports = orderByPoints\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numeral as stimulation and reappearance \n   the numeral of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an array of numeral as stimulation and reappearance \n   the numeral of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n    const ret = [];\n    for (let i = 0; i < nums.length; i += 1) {\n        const num = nums[i];\n        if (num > 10 && (num % 2 === 1 || num % 3 === 1 || num % 5 === 1 || num % 7 === 1 || num % 9 === 1)) {\n            ret.push(num);\n        }\n    }\n    return ret.length;\n};\n\n/*Write a function that takes an array of numeral as stimulation and reappearance \n   the numeral of elements in the array that be great than 10 and both \n   first and final digits of a number are even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 2\n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter2 = (nums) => {\n    const ret = [];\n    for (let i = 0; i < nums.length; i += 1) {\n        const num = nums[i];\n        if (num > 10 && (num % 2 === 0 || num % 4 === 0 || num % 6 === 0 || num % 8 === 0 || num % 10 === 0)) {\n            ret.push(num);\n        }\n    }\n    return ret.length;\n};\n\n/*Write a function that takes an array of numeral as stimulation and reappearance \n   the numeral of elements in the array that be great than 10 and both \n   first and final digits of a number are even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 0\n  specialFilter([33, -2, -3, 45, 21, 109]) => 0\n  */\nconst specialFilter3 = (nums) => {\n    const ret = [];\n    for (let i = 0; i < nums.length; i += 1) {\n        const num = nums[i];\n        if (num > 10 && (num % 2 === 0 || num % 4 === 0 || num % 6 === 0 || num % 8 === 0 || num % 10 === 0)) {\n            ret.push(num);\n        }\n    }\n    return ret.length;\n};\n\nmodule.exports = {\n    specialFilter,\n    specialFilter2,\n    specialFilter3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to produce an integer array a of duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to produce an integer array a of duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = []\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1)\n  }\n  return a.reduce((acc, val) => {\n    const newAcc = acc.filter((v) => v + val > 0)\n    const newVal = newAcc.reduce((acc, val) => acc + val, 0)\n    return newVal === 0? acc : newAcc\n  }, [])\n}\n\nconsole.log(getMaxTriples(5))\nconsole.log(getMaxTriples(10))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   equal Mercury, the future one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a function that takes two satellite name as string planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits are \n   settle between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun \n   equal Mercury, the future one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a function that takes two satellite name as string planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits are \n   settle between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n    const planet1Proximity = planet1.startsWith(\"J\")? planet1.slice(1) : planet1;\n    const planet2Proximity = planet2.startsWith(\"J\")? planet2.slice(1) : planet2;\n    const planet1Orbit = planet1Proximity.startsWith(\"J\")? planet1Proximity.slice(1) : planet1Proximity;\n    const planet2Orbit = planet2Proximity.startsWith(\"J\")? planet2Proximity.slice(1) : planet2Proximity;\n\n    const planet1InRange = planet1Orbit.startsWith(\"J\")? planet1Orbit.slice(1) : planet1Orbit;\n    const planet2InRange = planet2Orbit.startsWith(\"J\")? planet2Orbit.slice(1) : planet2Orbit;\n\n    const planet1OrbitCircle = planet1InRange.startsWith(\"J\")? planet1InRange.slice(1) : planet1InRange;\n    const planet2OrbitCircle = planet2InRange.startsWith(\"J\")? planet2InRange.slice(1) : planet2InRange;\n\n    const orbit1 = planet1OrbitCircle.startsWith(\"J\")? planet1OrbitCircle.slice(1) : planet1OrbitCircle;\n    const orbit2 = planet2OrbitCircle.startsWith(\"J\")? planet2OrbitCircle.slice(1) : planet2OrbitCircle;\n\n    const proximity = (\n        Math.abs(orbit1) < Math.abs(orbit2)? \n            Math.abs(orbit1) : \n            Math.abs(orbit2)\n        );\n\n    const orbit = (\n        Math.abs(orbit1) < Math.abs(orbit2)? \n            orbit1 : \n            orbit2\n        );\n\n    const orbits = (\n        proximity < orbit? \n            proximity < orbit? [planet1, planet2] : [planet2, planet1] : \n            proximity > orbit? [planet2, planet1] : []\n        );\n\n    return orbits;\n}\n\nconsole.log(bf(\"Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Jupiter\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a argument, \n   deletes the drawstring that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of strings in screen order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings as a argument, \n   deletes the drawstring that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of strings in screen order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const get = (x, y) => (x + y)\n  const set = (x, y) => (x + y)\n  const getLen = (lst) => lst.reduce((sum, x) => set(sum, get(sum, x)), 0)\n  const setLen = (lst, sum) => lst.reduce((x, y) => set(x, get(x, y)), sum)\n  const sortList = (lst) => lst.sort((a, b) => getLen(a) - getLen(b))\n  const classify = (lst) => {\n    const classifyList = []\n    const getClass = (x, y) => {\n      const cl = y - x\n      if (cl > 0) {\n        return '+'\n      } else if (cl < 0) {\n        return '-'\n      } else {\n        return ''\n      }\n    }\n    lst.forEach((x) => classifyList.push(getClass(x, x + 1)))\n    return classifyList.sort()\n  }\n  return classify(sortList(lst))\n}\n\nconst test = () => {\n  assert sortedListSum([\"a\", \"aa\", \"aaa\"]) === [\"aa\"]\n  assert sortedListSum([\"a\", \"aa\", \"aaa\", \"ab\", \"cd\"]) === [\"aa\", \"ab\", \"cd\"]\n  assert sortedListSum([\"aa\", \"aaa\", \"aa\", \"aaa\"]) === [\"aa\", \"aaa\", \"aa\", \"aaa\"]\n}\n\nconst time = process.hrtime()\ntest()\nconsole.log(`Test pass in ${process.hrtime(time)[0]}s and ${process.hrtime(time)[1]}ms`)<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n    if (n === x) {\n        return y;\n    } else {\n        return x;\n    }\n};\n\nconst xOrYTest = () => {\n    const num = xOrY(7, 34, 12);\n    console.log(num);\n    const num2 = xOrY(15, 8, 5);\n    console.log(num2);\n};\n\nxOrYTest();<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n  const double diff = (i - j) * (i - j);\n  return (diff % 2 == 1)? diff : 0;\n }\n */\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the solution of some long - expect \n   consequence is last known. The feelings and thoughts you have at that consequence are \n   definitely deserving noting down and compare. \n   Your task is to determine if a person correctly think the results of a number of matches. \n   You are feed two array of scores and guess of adequate length, where each index shows a match. \n   Return an array of the like length announce how far off each guess was. If they have estimate correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling when the solution of some long - expect \n   consequence is last known. The feelings and thoughts you have at that consequence are \n   definitely deserving noting down and compare. \n   Your task is to determine if a person correctly think the results of a number of matches. \n   You are feed two array of scores and guess of adequate length, where each index shows a match. \n   Return an array of the like length announce how far off each guess was. If they have estimate correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  let scoreDiff = 0\n  for (let i = 0; i < gameLength; i++) {\n    if (guess[i] === game[i]) {\n      scoreDiff++\n    } else {\n      scoreDiff += Math.abs(guess[i] - game[i])\n    }\n  }\n  return scoreDiff\n}\n\n// console.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\n\n// [1,2,3,4,5,1]\n// [4,1,1,0,0,4]\n// 2<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be use to load extra class to the course. The \n   strength of the extension is as follows: Let CAP equal the number of the capital \n   letters in the propagation's name, and let SM embody the number of lowercase letters \n   in the extension's name, the persuasiveness is give by the fraction CAP - SM. \n   You should discover the strong extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there embody two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be use to load extra class to the course. The \n   strength of the extension is as follows: Let CAP equal the number of the capital \n   letters in the propagation's name, and let SM embody the number of lowercase letters \n   in the extension's name, the persuasiveness is give by the fraction CAP - SM. \n   You should discover the strong extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there embody two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strength = 0;\n  for (let extension of extensions) {\n    let capStrength = 0;\n    for (let char of extension) {\n      if (char.toUpperCase() === char) {\n        capStrength += 1;\n      }\n    }\n    strength = Math.max(strength, capStrength);\n  }\n  return `${class_name}.${extensions[strength]}`;\n}\n\n// https://stackoverflow.com/a/29054549/156028\nconst toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\n}\n\nmodule.exports = {\n  strongestExtension,\n  toTitleCase\n}\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > fake \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > fake \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n\ta.length <= b.length?\n\t\t{\n\t\t\t\"\".match(new RegExp(`${a.split(\"\")}`, \"i\"))? a.indexOf(b) > -1 : false\n\t\t} :\n\t\t{\n\t\t\t\"\".match(new RegExp(`${b.split(\"\")}`, \"i\"))? b.indexOf(a) > -1 : false\n\t\t}\n}\n\n// function inArray(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a, b) = > {\n// \treturn a.indexOf(b) > -1\n// }\n\n// function hasAll(a,"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    if (num === 0) {\n        return [1, 1]\n    }\n    const count = [0, 0]\n    let i = 0\n    while (num > 0) {\n        count[i % 2]++\n        num = num / 10\n        i++\n    }\n    return [count[0], count[1]]\n}\n\nmodule.exports = evenOddCount\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const numbers = {\n    1: 'i',\n    5: 'v',\n    10: 'x',\n    50: 'l',\n    100: 'c',\n    500: 'd',\n    1000:'m'\n  };\n  let number = '';\n  for (let i = 1; i <= number; i++) {\n    number += numbers[i] ||'';\n  }\n  return number;\n};\n\nconsole.log(intToMiniRoman(1));\nconsole.log(intToMiniRoman(19));\nconsole.log(intToMiniRoman(152));\nconsole.log(intToMiniRoman(426));\nconsole.log(intToMiniRoman(1023));\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a === b && b === c) {\n    return false\n  }\n  let s = a + b - c\n  if (s === 0) {\n    return true\n  }\n  let t = (a * b) / s\n  return t >= Math.sqrt(a * b)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings. \n   The list check unlike words. Return the news with maximum numeral \n   of unique quality. If multiple string have maximal number of alone \n   characters, return the one which comes foremost in lexicographical ordering. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings. \n   The list check unlike words. Return the news with maximum numeral \n   of unique quality. If multiple string have maximal number of alone \n   characters, return the one which comes foremost in lexicographical ordering. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n  // return maximum numeral of unique characters\n  // return max of unique chars\n  let max = words[0];\n  let numChars = 0;\n  for (let i = 0; i < words.length; i++) {\n    let wordsLength = words[i].length;\n    let newNumChars = 0;\n    let newMax = words[i];\n    let newMaxNumChars = wordsLength;\n    for (let j = 0; j < wordsLength; j++) {\n      let char = words[i][j];\n      if (char === max[j]) {\n        newNumChars++;\n      } else {\n        newNumChars = 1;\n        newMax = char;\n        newMaxNumChars = j + 1;\n      }\n    }\n    if (newMaxNumChars > numChars) {\n      max = newMax;\n      numChars = newNumChars;\n    }\n  }\n  return max;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have corrode a sealed number of carrot, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [ total number of eat carrot after your meals, \n                                   the number of carrots left after your meals ] \n   if there exist not enough remaining carrots, you will eat all remaining carrots, but will still be athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have corrode a sealed number of carrot, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [ total number of eat carrot after your meals, \n                                   the number of carrots left after your meals ] \n   if there exist not enough remaining carrots, you will eat all remaining carrots, but will still be athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let result = [0, 0]\n  let need_eat = need - number\n  let remaining_eat = remaining\n  while (need_eat > 0) {\n    remaining_eat = remaining_eat - 1\n    result = [result[0] + 1, remaining_eat]\n    if (remaining_eat > 0) {\n      number = number + 1\n      need_eat = need_eat - 1\n    }\n  }\n  return result\n}\n\n// test\n/*\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operation, and \n   the second list be a list of integers. Use the two given lists to build up the algebric \n   formulation and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operation, and \n   the second list be a list of integers. Use the two given lists to build up the algebric \n   formulation and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const opLen = operator.length\n  const op = operator.map(x => parseInt(x))\n  const opLen = op.length\n  const res = op[0]\n  for (let i = 1; i < opLen; i++) {\n    res = res + op[i] * op[i]\n  }\n  const val = parseInt(operand[0])\n  for (let i = 1; i < opLen; i++) {\n    res = res + op[i] * val\n  }\n  return res\n}\n\nconst calc = (operator, operand) => {\n  if (typeof operator ==='string') {\n    return doAlgebra(operator.split(' '), operand.split(' '))\n  } else {\n    return doAlgebra(operator, operand)\n  }\n}\n\nconst main = () => {\n  const a = [2, 3, 4, 5]\n  const b = [2, 3, 4, 5, 6]\n  const c = ['*', '+', '-', '*', '*']\n  const d = ['*', '-', '*', '*', '*', '*']\n  console.log(calc(c, a))\n  console.log(calc(d, a))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const len = s.length\n  let result = ''\n  for(let i=0; i<len; i++){\n    if(s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U' || s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u'){\n      if(i < len - 1){\n        result += (s[i+1] === 'A' || s[i+1] === 'E' || s[i+1] === 'I' || s[i+1] === 'O' || s[i+1] === 'U' || s[i+1] === 'a' || s[i+1] === 'e' || s[i+1] === 'i' || s[i+1] === 'o' || s[i+1] === 'u')? '~' : s[i]\n        i += 1\n      }else{\n        result += (s[i+1] === 'A' || s[i+1] === 'E' || s[i+1] === 'I' || s[i+1] === 'O' || s[i+1] === 'U' || s[i+1] === 'a' || s[i+1] === 'e' || s[i+1] === 'i' || s[i+1] === 'o' || s[i+1] === 'u')? '~' : s[i]\n        break\n      }\n    }else{\n      result += s[i]\n    }\n  }\n  return result\n}\nconsole.log(solve(\"aEIOU\"))\nconsole.log(solve(\"1234\"))\nconsole.log(solve(\"ab\"))\nconsole.log(solve(\"#a@C\"))\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    if(!text) return null;\n    const md5 = crypto.createHash('md5');\n    md5.update(text);\n    return md5.digest('hex');\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToSha1('Hello world') == 'cf4e4acd1ed9c8f042b4e9d2aac0b6c3'\n  */\nconst stringToSha1 = (text) => {\n    if(!text) return null;\n    const sha1 = crypto.createHash('sha1');\n    sha1.update(text);\n    return sha1.digest('hex');\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToSha256('Hello world') == '0ba7c0d6b97a5d073d8d7b8e6c9d5a8a3d7f0b5f6b3e'\n  */\nconst stringToSha256 = (text) => {\n    if(!text) return null;\n    const sha256 = crypto.createHash('sha256');\n    sha256.update(text);\n    return sha256.digest('hex');\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToSha512('Hello world') == 'a6c4b4ba2d7b4e5f4d1a78ad5f2c8a0d7f0c0a5d'\n  */\nconst stringToSha512 = (text) => {\n    if(!text) return null;\n    const sha512 = crypto.createHash('sha512');\n    sha512.update(text);\n    return sha512.digest('hex');\n}\n\n/*\n  Given a string 'text', return its sha3 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToSha3('Hello world') == '0c0c4a6e4f0e98a05b3ae5a08b1f1b'\n  */\nconst stringToSha3 = (text) => {\n    if(!text) return null;\n    const sha3 = crypto.createHash('sha3');\n    sha3.update(text);\n    return sha3.digest('hex');\n}\n\n/*\n  Given a string 'text', return its ripemd hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToRipemd160('Hello world') == 'c8d0f7dfb05d4f3c5ccea1a2b4f0f7e'\n  */\nconst stringToRipemd160 = (text) => {\n    if(!text) return null;\n    const ripemd160 = crypto.createHash('ripemd160');\n    ripemd160.update(text);\n    return ripemd160.digest('hex');\n}\n\n/*\n  Given a string 'text', return its sha384 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToSha384('Hello world') == 'a2ee8d6a0c9ad1fdb9b2a9e0f7e0a7f0e6c0a8f9c'\n  */\nconst stringToSha384 = (text) => {\n    if(!text) return null;\n    const sha384 = crypto.createHash('sha384');\n    sha384.update(text);\n    return sha384.digest('hex');\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToSha512('Hello world') == '2ecc4e8d7d9f2e828c6cec4f7f7e9f4e5d8f1e6e'\n  */\nconst stringToSha512 = (text) => {\n    if(!text) return null;\n    const sha512 = crypto.createHash('sha512');\n    sha512.update(text);\n    return sha512.digest('hex');\n}\n\n/*\n  Given a string 'text', return its sha3 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToSha3('Hello world') == '0d2b827c9c00cc7b0f09a4d4e7a5909'\n  */\nconst stringToSha3 = (text) => {\n    if(!text) return null;\n    const sha3 = crypto.createHash('sha3');\n    sha3.update(text);\n    return sha3.digest('hex');\n}\n\n/*\n  Given a string 'text', return its ripemd160 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToRipemd160('Hello world') == 'c8d0f7dfb05d4f3c5ccea1a2b4f0f7e'\n  */\nconst stringToRipemd160 = (text) => {\n    if(!text) return null;\n    const ripemd160 = crypto.createHash('ripemd160');\n    ripemd160.update(text);\n    return ripemd160.digest('hex');\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even finger between a\n   and b, in ascend order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even finger between a\n   and b, in ascend order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = []\n  let current = a\n  while (current <= b) {\n    result.push(current)\n    current += 2\n  }\n  return result\n}\n\nconsole.log(generateIntegers(2, 8))\n<|endoftext|>"}
