{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let len = numbers.length\n  let i = 0\n  let j = 0\n  let minDistance = numbers[0]\n  let curDistance = numbers[0]\n  for (; i < len; i++) {\n    for (; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n        curDistance = Math.abs(numbers[i] - numbers[j])\n        if (curDistance < minDistance) {\n          minDistance = curDistance\n        }\n      }\n    }\n  }\n  return minDistance === 0\n}\n\n/**\n  * Given a list of numbers, return a list of sorted numbers\n  * @param numbers\n  * @returns {number[]}\n  * @example\n  * sort([1, 3, 4, 6, 7, 9])\n  * //=> [1, 3, 4, 6, 7, 9]\n  * sort([1, 3, 4, 6, 7, 9], [5, 2, 1])\n  * //=> [1, 2, 3, 4, 5, 6, 7, 9]\n  */\nconst sort = (numbers, sortOrder) => {\n  const len = numbers.length\n  let i = 0\n  let j = 0\n  let temp = 0\n  let sortArr = []\n  for (; i < len; i++) {\n    for (; j < len; j++) {\n      if (sortOrder[i] === sortOrder[j]) {\n        if (numbers[i] < numbers[j]) {\n          temp = numbers[i]\n          numbers[i] = numbers[j]\n          numbers[j] = temp\n        }\n      }\n    }\n  }\n  return numbers\n}\n\nmodule.exports = {\n  hasCloseElements,\n  sort\n}\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of cuddle parenthesis. Your finish is to \n   separate those group into separate strings and return the list of those. \n   disjoined groups are balanced (each open couple is properly closed) and not nest within each other \n   Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string containing multiple groups of cuddle parenthesis. Your finish is to \n   separate those group into separate strings and return the list of those. \n   disjoined groups are balanced (each open couple is properly closed) and not nest within each other \n   Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n    const open_pairs = 0;\n    const closed_pairs = 0;\n    const groups = [];\n    const groups_string = paren_string.split(')(');\n    const paren_groups = paren_string.split(')(');\n    for (let i = 0; i < paren_groups.length; i++) {\n        const group_string = paren_groups[i].split(')(');\n        for (let j = 0; j < group_string.length; j++) {\n            if (group_string[j] === ')') {\n                if (open_pairs === 0) {\n                    groups.push(paren_groups[i]);\n                    break;\n                }\n                open_pairs--;\n            } else if (group_string[j] === '(') {\n                open_pairs++;\n            } else {\n                break;\n            }\n        }\n    }\n    return groups;\n};\n\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const intPart = Math.floor(number);\n  const decimalPart = number - intPart;\n  return decimalPart;\n};\n\n/* Given a positive integer, return the number of digits.\n   \n   Return the length of the given number.\n  >>> lengthOfNumber(6)\n  2\n  */\nconst lengthOfNumber = (number) => {\n  const intPart = Math.floor(number);\n  const decimalPart = number - intPart;\n  return Math.floor(Math.log(decimalPart) / Math.log(10));\n};\n\n/* Given a positive integer, return the number of digits.\n   \n   Return the number of digits in the given number.\n  >>> numberOfDigits(6)\n  2\n  */\nconst numberOfDigits = (number) => {\n  const intPart = Math.floor(number);\n  const decimalPart = number - intPart;\n  return Math.floor(Math.log(decimalPart) / Math.log(10));\n};\n\n/* Given a positive integer, return the number of digits.\n   \n   Return the number of digits in the given number.\n  >>> numberOfDigits(6)\n  2\n  */\nconst numberOfDigits = (number) => {\n  const intPart = Math.floor(number);\n  const decimalPart = number - intPart;\n  return Math.floor(Math.log(decimalPart) / Math.log(10));\n};\n\n/* Given a positive integer, return the number of digits.\n   \n   Return the number of digits in the given number.\n  >>> numberOfDigits(6)\n  2\n  */\nconst numberOfDigits = (number) => {\n  const intPart = Math.floor(number);\n  const decimalPart = number - intPart;\n  return Math.floor(Math.log(decimalPart) / Math.log(10));\n};\n\n/* Given a positive integer, return the number of digits.\n   \n   Return the number of digits in the given number.\n  >>> numberOfDigits(6)\n  2\n  */\nconst numberOfDigits = (number) => {\n  const intPart = Math.floor(number);\n  const decimalPart = number - intPart;\n  return Math.floor(Math.log(decimalPart) / Math.log(10));\n};\n\n/* Given a positive integer, return the number of digits.\n   \n   Return the number of digits in the given number.\n  >>> numberOfDigits(6)\n  2\n  */\nconst numberOfDigits = (number) => {\n  const intPart = Math.floor(number);\n  const decimalPart = number - intPart;\n  return Math.floor(Math.log(decimalPart) / Math.log(10));\n};\n\n/* Given a positive integer, return the number of digits.\n   \n   Return the number of digits in the given number.\n  >>> numberOfDigits(6)\n  2\n  */\nconst numberOfDigits = (number) => {\n  const intPart = Math.floor(number);\n  const decimalPart = number - intPart;\n  return Math.floor(Math.log(decimalPart) / Math.log(10));\n};\n\n/* Given a positive integer, return the number of digits.\n   \n   Return the number of digits in the given number.\n  >>> numberOfDigits(6)\n  2\n  */\nconst numberOfDigits = (number) => {\n  const intPart = Math.floor(number);\n  const decimalPart = number - intPart;\n  return Math.floor(Math.log(decimalPart) / Math.log(10));\n};\n\n/* Given a positive integer, return the number of digits.\n   \n   Return the number of digits in the given number.\n  >>> numberOfDigits(6)\n  2\n  */\nconst numberOfDigits = (number) => {\n  const intPart = Math.floor(number);\n  const decimalPart = number - intPart;\n  return Math.floor(Math.log(decimalPart) / Math.log(10));\n};\n\n/* Given a positive integer, return the number of digits.\n   \n   Return the number of digits in the given number.\n  >>> numberOfDigits(6)\n  2\n  */\nconst numberOfDigits = (number) => {\n  const intPart = Math.floor(number);\n  const decimalPart = number - intPart;\n  return Math.floor(Math.log(decimalPart) / Math.log(10));\n};\n\n/* Given a positive integer, return the number of digits.\n   \n   Return the number of digits in the given number.\n  >>> numberOfDigits(6)\n  2\n  */\nconst numberOfDigits = (number) => {\n  const intPart = Math.floor(number);\n  const decimalPart = number - intPart;\n  return Math.floor(Math.log(decimalPart) / Math.log(10));\n};\n\n/* Given a positive integer, return the number of digits.\n   \n   Return the number of digits in the given number.\n  >>> numberOfDigits(6)\n  2\n  */\nconst numberOfDigits = (number) => {\n  const intPart = Math.floor(number);\n  const decimalPart = number - intPart;\n  return Math.floor(Math.log(decimalPart) / Math.log(10));\n};\n\n/* Given a positive integer, return the number of digits.\n   \n   Return the number of digits in the given number.\n  >>> numberOfDigits(6)\n  2\n  */\nconst numberOfDigits = (number) => {\n  const intPart = Math.floor(number);\n  const decimalPart = number - intPart;\n  return Math.floor(Math.log(decimalPart) / Math.log(10));\n};\n\n/* Given a positive integer, return the number of digits.\n   \n   Return the number of digits in the given number.\n  >>> numberOfDigits(6)\n  2\n  */\nconst numberOfDigits = (number) => {\n  const intPart = Math.floor(number);\n  const decimalPart = number - intPart;\n  return Math.floor"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  let balance = sum;\n  for (let i = 0; i < operations.length; i++) {\n    balance = balance - operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// belowZero([1, 2, -4, 5]);\n// false\n\n/*\n  Below Zero\n  Given a list of transactions in the form of [amount, operation]\n  - For each transaction\n    - If the amount of the transaction is negative, subtract it from the balance\n    - If the operation is deposit, add the transaction amount to the balance\n    - If the operation is withdrawal, subtract the transaction amount from the balance\n  - Return true if the balance of the account is below zero, false otherwise\n  - Below zero:\n    - If the balance is below zero, return true\n    - If the balance is above zero, return false\n    - If the balance is zero, return false\n  >>> belowZero([-1, 1, -2, 2])\n  true\n  >>> belowZero([1, 1, 2, 2])\n  false\n  >>> belowZero([-1, -1, -2, 2])\n  false\n  >>> belowZero([1, 1, 2, 2])\n  false\n  >>> belowZero([-1, 1, -2, 2, -1])\n  false\n  >>> belowZero([1, 1, 2, 2, 1])\n  false\n  >>> belowZero([-1, 1, -2, 2, -1, -1])\n  false\n  >>> belowZero([1, 1, 2, 2, 1, 1])\n  false\n  >>> belowZero([-1, 1, -2, 2, -1, -1, -1])\n  true\n  >>> belowZero([1, 1, 2, 2, 1, 1, 1])\n  true\n  >>> belowZero([-1, 1, -2, 2, -1, -1, -1, -1])\n  true\n  >>> belowZero([1, 1, 2, 2, 1, 1, 1, 1])\n  true\n  >>> belowZero([-1, 1, -2, 2, -1, -1, -1, -1, -1])\n  true\n  >>> belowZero([1, 1, 2, 2, 1, 1, 1, 1, 1])\n  true\n  >>> belowZero([-1, 1, -2, 2, -1, -1, -1, -1, -1, -1])\n  true\n  >>> belowZero([1, 1, 2, 2, 1, 1, 1, 1, 1, 1])\n  true\n  >>> belowZero([-1, 1, -2, 2, -1, -1, -1, -1, -1, -1, -1])\n  true\n  >>> belowZero([1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> belowZero([-1, 1, -2, 2, -1, -1, -1, -1, -1, -1, -1, -1])\n  true\n  >>> belowZero([1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> belowZero([-1, 1, -2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1])\n  true\n  >>> belowZero([1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> belowZero([-1, 1, -2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])\n  true\n  >>> belowZero([1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> belowZero([-1, 1, -2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])\n  true\n  >>> belowZero([1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> belowZero([-1, 1, -2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])\n  true\n  >>> belowZero([1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> belowZero([-1, 1, -2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])\n  true\n  >>> belowZero([1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> belowZero([-1, 1, -2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])\n  true\n  >>> belowZero([1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> belowZero([-1, 1, -2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])\n  true\n  >>> belowZero([1, 1"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute difference between each \n   element and a centerpoint (mean in this case ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute difference between each \n   element and a centerpoint (mean in this case ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const array = toArray(numbers);\n  const mean = array.reduce( (p, n) => p + n, 0) / array.length;\n  const MAD = array.reduce( (p, n) => Math.abs(n - mean), 0);\n  return MAD;\n};\n\n// example\nconst numbers = [\n  1.0, 2.0, 3.0, 4.0,\n  2.0, 3.0, 4.0, 5.0,\n  3.0, 4.0, 5.0, 6.0,\n  4.0, 5.0, 6.0, 7.0,\n  5.0, 6.0, 7.0, 8.0,\n  6.0, 7.0, 8.0, 9.0,\n  7.0, 8.0, 9.0, 10.0\n];\n\nconsole.log(meanAbsoluteDeviation(numbers));\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!numbers ||!numbers.length || delimeter <= 0) {\n    return [];\n  }\n  const len = numbers.length - 1;\n  const res = [];\n  let i = 0;\n  let j = 0;\n  while (i <= len) {\n    res.push(numbers[i]);\n    i += 1;\n    j += 1;\n    if (j % delimeter === 0) {\n      res.push(delimeter);\n    }\n  }\n  return res;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by space. \n   For each of the group, output the thick grade of nesting of digression. \n   E.g. (() ()) has maximum two levels of nesting while (( ()) ) receive three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by space. \n   For each of the group, output the thick grade of nesting of digression. \n   E.g. (() ()) has maximum two levels of nesting while (( ()) ) receive three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let paren_stack = [];\n  let i = 0;\n  let len = paren_string.length;\n  let level = 0;\n  let max_level = 0;\n  let stack_level = 0;\n\n  while (i < len) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(i);\n      level++;\n    } else if (paren_string[i] === ')') {\n      if (paren_stack.length === 0) {\n        stack_level--;\n        max_level = Math.max(max_level, level);\n      } else {\n        stack_level++;\n        level--;\n      }\n      paren_stack.pop();\n    }\n    i++;\n  }\n  return max_level;\n};\n\n/**\n   @param {string} string - string to parse\n   @returns {Array} - Array of all groups of nested parentheses\n */\nconst parseNestedParensAsArray = (string) => {\n  let paren_stack = [];\n  let i = 0;\n  let len = string.length;\n  let level = 0;\n  let max_level = 0;\n  let stack_level = 0;\n\n  while (i < len) {\n    if (string[i] === '(') {\n      paren_stack.push(i);\n      level++;\n    } else if (string[i] === ')') {\n      if (paren_stack.length === 0) {\n        stack_level--;\n        max_level = Math.max(max_level, level);\n      } else {\n        stack_level++;\n        level--;\n      }\n      paren_stack.pop();\n    }\n    i++;\n  }\n  return paren_stack.reverse();\n};\n\n/**\n   @param {string} string - string to parse\n   @returns {Array} - Array of all groups of nested parentheses\n */\nconst parseNestedParensAsArray2 = (string) => {\n  let paren_stack = [];\n  let i = 0;\n  let len = string.length;\n  let level = 0;\n  let max_level = 0;\n  let stack_level = 0;\n\n  while (i < len) {\n    if (string[i] === '(') {\n      paren_stack.push(i);\n      level++;\n    } else if (string[i] === ')') {\n      if (paren_stack.length === 0) {\n        stack_level--;\n        max_level = Math.max(max_level, level);\n      } else {\n        stack_level++;\n        level--;\n      }\n      paren_stack.pop();\n    }\n    i++;\n  }\n  return paren_stack.reverse();\n};\n\nmodule.exports = parseNestedParens;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain grant substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contain grant substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\nmodule.exports = {\n  filterBySubstring,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const set = new Set(numbers);\n  const product = 1;\n  const sum = 0;\n  for (const number of set) {\n    product *= number;\n    sum += number;\n  }\n  return [sum, product];\n};\n\nmodule.exports = sumProduct;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximal element determine until establish here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, generate a list of rolling maximal element determine until establish here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const {length} = numbers;\n  const max = numbers[0];\n  const maxPos = 0;\n  for(let i=1;i<length;i++){\n    if(numbers[i] > max){\n      max = numbers[i];\n      maxPos = i;\n    }\n  }\n  return [...numbers.slice(0, maxPos + 1), max].concat(numbers.slice(maxPos + 1));\n};\n\n/* From a given list of integers, generate a list of rolling max element determine until establish here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMaxByTwo = (numbers) => {\n  const {length} = numbers;\n  const max = numbers[0];\n  const maxPos = 0;\n  for(let i=1;i<length;i++){\n    if(numbers[i] > max && numbers[i] < max * 2){\n      max = numbers[i];\n      maxPos = i;\n    }\n  }\n  return [...numbers.slice(0, maxPos + 1), max].concat(numbers.slice(maxPos + 1));\n};\n\n/* From a given list of integers, generate a list of rolling max element determine until establish here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMaxByThree = (numbers) => {\n  const {length} = numbers;\n  const max = numbers[0];\n  const maxPos = 0;\n  for(let i=1;i<length;i++){\n    if(numbers[i] > max && numbers[i] < max * 3){\n      max = numbers[i];\n      maxPos = i;\n    }\n  }\n  return [...numbers.slice(0, maxPos + 1), max].concat(numbers.slice(maxPos + 1));\n};\n\n/* From a given list of integers, generate a list of rolling max element determine until establish here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMaxByFour = (numbers) => {\n  const {length} = numbers;\n  const max = numbers[0];\n  const maxPos = 0;\n  for(let i=1;i<length;i++){\n    if(numbers[i] > max && numbers[i] < max * 4){\n      max = numbers[i];\n      maxPos = i;\n    }\n  }\n  return [...numbers.slice(0, maxPos + 1), max].concat(numbers.slice(maxPos + 1));\n};\n\n/* From a given list of integers, generate a list of rolling max element determine until establish here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMaxByFive = (numbers) => {\n  const {length} = numbers;\n  const max = numbers[0];\n  const maxPos = 0;\n  for(let i=1;i<length;i++){\n    if(numbers[i] > max && numbers[i] < max * 5){\n      max = numbers[i];\n      maxPos = i;\n    }\n  }\n  return [...numbers.slice(0, maxPos + 1), max].concat(numbers.slice(maxPos + 1));\n};\n\n/* From a given list of integers, generate a list of rolling max element determine until establish here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMaxBySix = (numbers) => {\n  const {length} = numbers;\n  const max = numbers[0];\n  const maxPos = 0;\n  for(let i=1;i<length;i++){\n    if(numbers[i] > max && numbers[i] < max * 6){\n      max = numbers[i];\n      maxPos = i;\n    }\n  }\n  return [...numbers.slice(0, maxPos + 1), max].concat(numbers.slice(maxPos + 1));\n};\n\n/* From a given list of integers, generate a list of rolling max element determine until establish here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMaxBySeven = (numbers) => {\n  const {length} = numbers;\n  const max = numbers[0];\n  const maxPos = 0;\n  for(let i=1;i<length;i++){\n    if(numbers[i] > max && numbers[i] < max * 7){\n      max = numbers[i];\n      maxPos = i;\n    }\n  }\n  return [...numbers.slice(0, maxPos + 1), max].concat(numbers.slice(maxPos + 1));\n};\n\n/* From a given list of integers, generate a list of rolling max element determine until establish here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMaxByEight = (numbers) => {\n  const {length} = numbers;\n  const max = numbers[0];\n  const maxPos = 0;\n  for(let i=1;i<length;i++){\n    if(numbers[i] > max && numbers[i] <"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const pString = postfix.split('').reverse().join('');\n  return pString;\n}\n\n/* rule the short prefix of a string that is a palindrome\n   Algorithm idea is to start with the first char of a string and \n   then iterate through the string, looking for a palindrome. \n   if the current char is a palindrome, append to the conclusion of the string.\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  const pString = string.split('').reverse().join('');\n  return pString;\n}\n\nconst palindrome = makePalindrome;\n\nconsole.log(palindrome('cata'));\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let aLength = a.length,\n    bLength = b.length;\n  let result = [];\n\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n\n  return result.join('');\n}\n\nexport default stringXor;<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the same duration. Return nothing in lawsuit the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the same duration. Return nothing in lawsuit the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) {\n    return;\n  }\n\n  const max = (strings) => {\n    let longest = 0;\n    for (let i = 0; i < strings.length; i++) {\n      if (strings[i].length > longest) {\n        longest = strings[i].length;\n      }\n    }\n    return longest;\n  };\n\n  return longest(strings);\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 1;\n  }\n\n  while (b!== 0) {\n    const temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n};\n\nexport default greatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the remark string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shortest to longest of the remark string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = []\n  let lastPrefix = ''\n\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i; j < string.length; j++) {\n      let prefix = string.slice(i, j + 1)\n      if (prefixes.indexOf(prefix) === -1) {\n        prefixes.push(prefix)\n      }\n    }\n    lastPrefix = string.slice(i, i + 1)\n  }\n\n  return prefixes\n}\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const string = '';\n  while (n-- > 0) {\n    string ='' + string;\n  }\n  return string;\n};\n\nconst getUserInput = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')))\n  );\n};\n\nconst getUserInput2 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 1)\n  );\n};\n\nconst getUserInput3 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 2)\n  );\n};\n\nconst getUserInput4 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 3)\n  );\n};\n\nconst getUserInput5 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 4)\n  );\n};\n\nconst getUserInput6 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 5)\n  );\n};\n\nconst getUserInput7 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 6)\n  );\n};\n\nconst getUserInput8 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 7)\n  );\n};\n\nconst getUserInput9 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 8)\n  );\n};\n\nconst getUserInput10 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 9)\n  );\n};\n\nconst getUserInput11 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 10)\n  );\n};\n\nconst getUserInput12 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 11)\n  );\n};\n\nconst getUserInput13 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 12)\n  );\n};\n\nconst getUserInput14 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 13)\n  );\n};\n\nconst getUserInput15 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 14)\n  );\n};\n\nconst getUserInput16 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 15)\n  );\n};\n\nconst getUserInput17 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 16)\n  );\n};\n\nconst getUserInput18 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 17)\n  );\n};\n\nconst getUserInput19 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 18)\n  );\n};\n\nconst getUserInput20 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 19)\n  );\n};\n\nconst getUserInput21 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 20)\n  );\n};\n\nconst getUserInput22 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 21)\n  );\n};\n\nconst getUserInput23 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 22)\n  );\n};\n\nconst getUserInput24 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 23)\n  );\n};\n\nconst getUserInput25 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 24)\n  );\n};\n\nconst getUserInput26 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 25)\n  );\n};\n\nconst getUserInput27 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 26)\n  );\n};\n\nconst getUserInput28 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are needed?')) + 27)\n  );\n};\n\nconst getUserInput29 = () => {\n  return prompt(\n    'Please enter a number',\n    stringSequence(Number(prompt('How many numbers are"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const count = 0;\n  const chars = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (chars.indexOf(char) === -1) {\n      chars.push(char);\n    } else {\n      count++;\n    }\n  }\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing melodious notes in a particular ASCII format. \n   Your task is to parse this string and return list of integers equate to how many beats does each \n   not concluding. \n\n   Here is a legend: \n  ' oxygen' - whole bill, lasts four beats \n  ' o|' - one-half bill, lasts two pulse \n  ' .|' - quater eminence, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string representing melodious notes in a particular ASCII format. \n   Your task is to parse this string and return list of integers equate to how many beats does each \n   not concluding. \n\n   Here is a legend: \n 'oxygen' - whole bill, lasts four beats \n 'o|' - one-half bill, lasts two pulse \n  '.|' - quater eminence, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let notes = [0, 0, 0, 0];\n  let beats = 0;\n  let last_beat = 0;\n  let last_note = 0;\n\n  music_string.split('').forEach((note) => {\n    switch(note) {\n      case 'o':\n        last_beat += 4;\n        break;\n      case '.':\n        last_beat += 1;\n        break;\n      case 'o':\n        last_beat += 2;\n        break;\n      default:\n        notes[last_beat] += 1;\n        last_beat = 0;\n        last_note = note;\n    }\n  });\n\n  return [notes[0], notes[1], notes[2], notes[3], beats, last_beat, last_note];\n}\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const subStrings = string.split('');\n  let count = 0;\n  for (let i = 0; i < subStrings.length; i++) {\n    let index = subStrings.indexOf(substring, i);\n    while (index!= -1) {\n      count++;\n      index = subStrings.indexOf(substring, i + 1);\n    }\n  }\n  return count;\n};\n\n/**\n  * @function\n  * @name repeat\n  * @description\n  * Repeats a given string n times.\n  * @param {string} string - String to repeat.\n  * @param {number} times - Number of times to repeat.\n  * @returns {string}\n  */\nconst repeat = (string, times) => {\n  const str = '';\n  for (let i = 0; i < times; i++) {\n    str += string;\n  }\n  return str;\n};\n\n/**\n  * @function\n  * @name repeatTimes\n  * @description\n  * Repeats a given string n times. Count overlaping cases.\n  * @param {string} string - String to repeat.\n  * @param {number} times - Number of times to repeat.\n  * @returns {string}\n  */\nconst repeatTimes = (string, times) => {\n  const subStrings = string.split('');\n  let count = 0;\n  for (let i = 0; i < times; i++) {\n    let index = subStrings.indexOf(string, i);\n    while (index!= -1) {\n      count++;\n      index = subStrings.indexOf(string, i + 1);\n    }\n  }\n  return count;\n};\n\n/**\n  * @function\n  * @name reverse\n  * @description\n  * Reverses a string.\n  * @param {string} string - String to reverse.\n  * @returns {string}\n  */\nconst reverse = string => {\n  return string.split('').reverse().join('');\n};\n\nexport {\n  concat,\n  concatTimes,\n  find,\n  findAll,\n  findAllReverse,\n  findIndex,\n  findLast,\n  findLastReverse,\n  findLastIndex,\n  findLastIndexReverse,\n  findLastIndexInString,\n  findLastReverseInString,\n  findLastIndexInStrings,\n  findLastReverseInStrings,\n  findLastIndexInStringsReverse,\n  findLastReverseInStringsReverse,\n  findTimes,\n  findAllInReverse,\n  findAllInStrings,\n  findAllReverseInStrings,\n  findIndexInReverse,\n  findIndexInStrings,\n  findIndexInStringsReverse,\n  findLastIndexInReverse,\n  findLastIndexInStringsReverse,\n  findLastIndexInStringsReverseReverse,\n  findLastIndexInStringsReverseInString,\n  findLastIndexInStringsReverseInStrings,\n  findLastIndexInStringsReverseInStringsReverse,\n  findLastIndexInStringsReverseInStringsReverseReverse,\n  findLastReverseInStringsReverse,\n  findLastReverseInStringsReverseReverse,\n  findLastReverseInStringsReverseInString,\n  findLastReverseInStringsReverseInStrings,\n  findLastReverseInStringsReverseInStringsReverse,\n  findLastReverseInStringsReverseInStringsReverseReverse,\n  findTimesInReverse,\n  findTimesInStrings,\n  findTimesInStringsReverse,\n  findTimesInStringsReverseInString,\n  findTimesInStringsReverseInStrings,\n  findTimesInStringsReverseInStringsReverse,\n  findTimesInStringsReverseInStringsReverseReverse,\n  findTimesInStringsReverseInStringsReverseReverseReverse,\n  getRandomIndexInString,\n  getRandomIndexInStrings,\n  getRandomIndexInStringsReverse,\n  getRandomIndexInStringsReverseInString,\n  getRandomIndexInStringsReverseInStrings,\n  getRandomIndexInStringsReverseInStringsReverse,\n  getRandomIndexInStringsReverseInStringsReverseReverse,\n  lastIndexOf,\n  lastIndexOfReverse,\n  lastIndexOfInReverse,\n  lastIndexOfInStrings,\n  lastIndexOfInStringsReverse,\n  lastIndexOfInStringsReverseInString,\n  lastIndexOfInStringsReverseInStrings,\n  lastIndexOfInStringsReverseInStringsReverse,\n  lastIndexOfInStringsReverseInStringsReverseReverse,\n  lastIndexOfReverseInStringsReverse,\n  lastIndexOfReverseInStringsReverseReverse,\n  lastIndexOfReverseInStringsReverseInString,\n  lastIndexOfReverseInStringsReverseInStrings,\n  lastIndexOfReverseInStringsReverseInStringsReverse,\n  lastIndexOfReverseInStringsReverseInStringsReverseReverse,\n  lastIndexOfReverseInStringsReverseInStringsReverseReverseReverse,\n  reverse,\n  reverseTimes,\n  reverseTimesInReverse,\n  reverseTimesInStrings,\n  reverseTimesInStringsReverse,\n  reverseTimesInStringsReverseInString,\n  reverseTimesInStringsReverseInStrings,\n  reverseTimesInStringsReverseInStringsReverse,\n  reverseTimesInStringsReverseInStringsRever"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   revert the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   revert the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const arr = numbers.split(' ')\n  return arr.sort((a, b) => a - b)\n   .join(' ')\n}\n\n/*\n  Input is a space delimited string of numbers.\n  Convert the string to an array and then sort it using the sortNumbers function.\n  Return the sorted string\n  revert the string with numbers sorted from largest to smallest\n  >>> sortNumbers('123 456 789')\n  '789 456 123'\n  */\nconst sortArrayNumbers = (numbers) => {\n  const arr = numbers.split(' ')\n  return arr.sort((a, b) => b - a)\n   .join(' ')\n}\n\n/*\n  Input is a space delimited string of numbers.\n  Convert the string to an array and then sort it using the sortNumbers function.\n  Return the sorted string\n  revert the string with numbers sorted from largest to smallest\n  >>> sortArrayNumbers('123 456 789')\n  '789 456 123'\n  */\nconst sortArrayNumbersReverse = (numbers) => {\n  const arr = numbers.split(' ')\n  return arr.sort((a, b) => a - b)\n   .reverse()\n   .join(' ')\n}\n\n/*\n  Input is a string of words delimited by a space.\n  Convert the string to an array and then sort it using the sortWords function.\n  Return the sorted string\n  revert the string with words sorted from largest to smallest\n  >>> sortWords('one two three')\n  'three two one'\n  */\nconst sortWords = (words) => {\n  const arr = words.split(' ')\n  return arr.sort((a, b) => b - a)\n   .join(' ')\n}\n\n/*\n  Input is a string of words delimited by a space.\n  Convert the string to an array and then sort it using the sortWords function.\n  Return the sorted string\n  revert the string with words sorted from largest to smallest\n  >>> sortWords('one two three')\n  'three two one'\n  */\nconst sortWordsReverse = (words) => {\n  const arr = words.split(' ')\n  return arr.sort((a, b) => a - b)\n   .reverse()\n   .join(' ')\n}\n\n/*\n  Input is a string of words delimited by a space.\n  Convert the string to an array and then sort it using the sortWords function.\n  Return the sorted string\n  revert the string with words sorted from largest to smallest\n  >>> sortWords('one two three')\n  'three two one'\n  */\nconst sortWordsReverse2 = (words) => {\n  const arr = words.split(' ')\n  return arr.sort((a, b) => b - a)\n   .reverse()\n   .join(' ')\n}\n\n/*\n  Input is a string of words delimited by a space.\n  Convert the string to an array and then sort it using the sortWords function.\n  Return the sorted string\n  revert the string with words sorted from largest to smallest\n  >>> sortWords('one two three')\n  'three two one'\n  */\nconst sortWordsReverse3 = (words) => {\n  const arr = words.split(' ')\n  return arr.sort((a, b) => a - b)\n   .reverse()\n   .reverse()\n   .join(' ')\n}\n\n/*\n  Input is a string of words delimited by a space.\n  Convert the string to an array and then sort it using the sortWords function.\n  Return the sorted string\n  revert the string with words sorted from largest to smallest\n  >>> sortWords('one two three')\n  'three two one'\n  */\nconst sortWordsReverse4 = (words) => {\n  const arr = words.split(' ')\n  return arr.sort((a, b) => b - a)\n   .reverse()\n   .reverse()\n   .reverse()\n   .reverse()\n   .join(' ')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) blue-ribbon and return two that be the closest to each \n   other and return them in order (smaller number, larger phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) blue-ribbon and return two that be the closest to each \n   other and return them in order (smaller number, larger phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let n = numbers.length\n  if (n <= 1) {\n    return numbers\n  }\n\n  const smallest = numbers[0]\n  const largest = numbers[n-1]\n  const result = [smallest, largest]\n\n  for (let i = 0; i < n-1; i++) {\n    const dist = Math.abs(numbers[i] - largest)\n    const best = Math.min(largest, numbers[i])\n    if (dist < Math.abs(smallest - best)) {\n      smallest = best\n    }\n    best = Math.max(smallest, numbers[i])\n    if (dist < Math.abs(largest - best)) {\n      largest = best\n    }\n    result[0] = smallest\n    result[1] = largest\n  }\n\n  return result\n}\n\nmodule.exports = findClosestElements\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  return numbers.map(number => number / number.max());\n};\n\n// -------------------------------------------------\n//  Rescale and reverse a list\n// -------------------------------------------------\n/**\n * @function\n * @param {Array} numbers\n * @param {Number} max - The largest number in the list.\n * @returns {Array}\n */\nconst rescaleAndReverse = (numbers, max = 0) => {\n  return rescaleToUnit(reverse(numbers));\n};\n\n// -------------------------------------------------\n//  Reverse a list\n// -------------------------------------------------\n/**\n * @function\n * @param {Array} numbers\n * @returns {Array}\n */\nconst reverse = (numbers) => {\n  return numbers.reverse();\n};\n\n// -------------------------------------------------\n//  Check if a list is a palindrome\n// -------------------------------------------------\n/**\n * @function\n * @param {Array} numbers\n * @returns {Boolean}\n */\nconst isPalindrome = (numbers) => {\n  let i = 0,\n      j = numbers.length - 1;\n\n  while (i < j) {\n    if (numbers[i]!== numbers[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n// -------------------------------------------------\n//  Return a list of unique items\n// -------------------------------------------------\n/**\n * @function\n * @param {Array} numbers\n * @returns {Array}\n */\nconst unique = (numbers) => {\n  return uniq(numbers);\n};\n\n// -------------------------------------------------\n//  Get a list of unique numbers from a list\n// -------------------------------------------------\n/**\n * @function\n * @param {Array} numbers\n * @returns {Array}\n */\nconst uniq = (numbers) => {\n  return uniqBy(numbers, [x => x]);\n};\n\n// -------------------------------------------------\n//  Get a list of unique numbers from a list\n// -------------------------------------------------\n/**\n * @function\n * @param {Array} numbers\n * @param {Function} comparator - Function to compare two values.\n * @returns {Array}\n */\nconst uniqBy = (numbers, comparator = (a, b) => a === b) {\n  return uniq(flatten(numbers, comparator));\n};\n\n// -------------------------------------------------\n//  Flatten a list\n// -------------------------------------------------\n/**\n * @function\n * @param {Array} numbers\n * @param {Function} comparator - Function to compare two values.\n * @returns {Array}\n */\nconst flatten = (numbers, comparator = (a, b) => a === b) {\n  let results = [];\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers[i].length; j++) {\n      results.push(numbers[i][j]);\n    }\n  }\n  return unique(results, comparator);\n};\n\n// -------------------------------------------------\n//  Check if a number is an even or an odd number\n// -------------------------------------------------\n/**\n * @function\n * @param {Number} number\n * @returns {Boolean}\n */\nconst isEven = (number) => {\n  return number % 2 === 0;\n};\n\n// -------------------------------------------------\n//  Check if a number is an even or an odd number\n// -------------------------------------------------\n/**\n * @function\n * @param {Number} number\n * @returns {Boolean}\n */\nconst isOdd = (number) => {\n  return number % 2!== 0;\n};\n\n// -------------------------------------------------\n//  Convert a list of numbers into a string\n// -------------------------------------------------\n/**\n * @function\n * @param {Array} numbers\n * @returns {String}\n */\nconst toString = (numbers) => {\n  let str = '',\n      i = 0;\n  for (let n of numbers) {\n    str += n;\n    i++;\n    if (i < numbers.length) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n// -------------------------------------------------\n//  Get the next number in a list\n// -------------------------------------------------\n/**\n * @function\n * @param {Array} numbers\n * @returns {Number}\n */\nconst next = (numbers) => {\n  return numbers[numbers.length - 1] + 1;\n};\n\n// -------------------------------------------------\n//  Get the previous number in a list\n// -------------------------------------------------\n/**\n * @function\n * @param {Array} numbers\n * @returns {Number}\n */\nconst previous = (numbers) => {\n  return numbers[0] - 1;\n};\n\n// -------------------------------------------------\n//  Check if a list is a sequence of numbers\n// -------------------------------------------------\n/**\n * @function\n * @param {Array} numbers\n * @returns {Boolean}\n */\nconst isSequence = (numbers) => {\n  return isEven(next(numbers));\n};\n\n// -------------------------------------------------\n//  Check if a list is a permutation of numbers\n// -------------------------------------------------\n/**\n * @function\n * @param {Array} numbers\n * @returns {Boolean}\n */\nconst isPermutation = (numbers) => {\n  return isSequence(numbers);\n};\n\n// -------------------------------------------------\n//  Check if a list is a permutation of numbers\n// -------------------------------------------------\n/**\n * @function\n * @param {Array} numbers\n * @returns {Boolean}\n */\nconst isPermutationOf = (numbers, numbers2) => {\n  return isPermutation(numbers2);\n};\n\n// -------------------------------------------------\n//  Check if a list is a permutation of numbers\n// -------------------------------------------------\n/**\n * @function\n * @param {Array} numbers\n * @returns {Boolean}\n */\nconst isPermutationOfInPlace = (numbers, numbers2) => {\n  let i = 0,\n      j = numbers.length - 1;\n  while (i < j) {\n    if"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integer\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter given list of any python values only for integer\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => {\n    if (!v) {\n      return false\n    } else if (typeof v === 'number') {\n      return isInteger(v)\n    } else if (typeof v ==='string') {\n      return isInteger(v)\n    } else if (typeof v === 'object') {\n      return typeof v.length === 'number'\n    } else if (typeof v === 'function') {\n      return false\n    } else if (typeof v === 'boolean') {\n      return false\n    } else {\n      return false\n    }\n  })\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5, 'abc', {}, []])\n  [5, 'abc', {}, []]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => {\n    if (!v) {\n      return false\n    } else if (typeof v === 'number') {\n      return isInteger(v)\n    } else if (typeof v ==='string') {\n      return isInteger(v)\n    } else if (typeof v === 'object') {\n      return typeof v.length === 'number'\n    } else if (typeof v === 'function') {\n      return false\n    } else if (typeof v === 'boolean') {\n      return true\n    } else {\n      return false\n    }\n  })\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5, 'abc', {}, []])\n  [5, 'abc', {}, []]\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => {\n    if (!v) {\n      return false\n    } else if (typeof v === 'number') {\n      return isInteger(v)\n    } else if (typeof v ==='string') {\n      return isInteger(v)\n    } else if (typeof v === 'object') {\n      return typeof v.length === 'number'\n    } else if (typeof v === 'function') {\n      return false\n    } else if (typeof v === 'boolean') {\n      return false\n    } else {\n      return false\n    }\n  })\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5, 'abc', {}, []])\n  [5, 'abc', {}, []]\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => {\n    if (!v) {\n      return false\n    } else if (typeof v === 'number') {\n      return isInteger(v)\n    } else if (typeof v ==='string') {\n      return isInteger(v)\n    } else if (typeof v === 'object') {\n      return typeof v.length === 'number'\n    } else if (typeof v === 'function') {\n      return true\n    } else if (typeof v === 'boolean') {\n      return false\n    } else {\n      return false\n    }\n  })\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5, 'abc', {}, []])\n  [5, 'abc', {}, []]\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(v => {\n    if (!v) {\n      return false\n    } else if (typeof v === 'number') {\n      return isInteger(v)\n    } else if (typeof v ==='string') {\n      return isInteger(v)\n    } else if (typeof v === 'object') {\n      return typeof v.length === 'number'\n    } else if (typeof v === 'function') {\n      return false\n    } else if (typeof v === 'boolean') {\n      return false\n    } else {\n      return false\n    }\n  })\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5, 'abc', {}, []])\n  [5, 'abc', {}, []]\n  */\nconst filterLists = (values) => {\n  return values.filter(v => {\n    if (!v) {\n      return false\n    } else if (typeof v === 'number') {\n      return isInteger(v)\n    } else if (typeof v ==='string') {\n      return isInteger(v)\n    } else if (typeof v === 'object') {\n      return typeof v.length === 'number'\n    } else if (typeof v === 'function') {\n      return false\n    } else if (typeof v === 'boolean') {\n      return false\n    } else {\n      return false\n    }\n  })\n}\n\nexport default {\n  filterIntegers,\n  filterBooleans,\n  filterStrings,\n  filterFunctions,\n  filterDictionaries,\n  filterLists\n}\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    return string.length;\n}\n\n/* Return index of given char in given string\n  >>> strindex('','a')\n  0\n  >>> strindex('abc','a')\n  1\n  >>> strindex('abc','b')\n  2\n  >>> strindex('abc','c')\n  3\n  >>> strindex('abc','x')\n  -1\n  */\nconst strindex = (string, char) => {\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === char) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n/* Return a new string that has been trimmed of spaces and trailing\n  whitespace\n  >>> trim('')\n  ''\n  >>> trim('abc')\n  'abc'\n  >>> trim(' abc ')\n  'abc'\n  >>> trim(' abc ')\n  'abc'\n  */\nconst trim = (string) => {\n    return string.trim();\n}\n\n/* Return the same string with every space replaced by a newline\n  >>> replace('')\n  ''\n  >>> replace('abc')\n  'abc'\n  >>> replace('abc ')\n  'abc'\n  >>> replace(' abc ')\n  'abc'\n  */\nconst replace = (string) => {\n    return string.replace(/ /g, '\\n');\n}\n\n/* Return the same string with every space replaced by a newline\n  >>> replace_all('')\n  ''\n  >>> replace_all('abc')\n  'abc'\n  >>> replace_all('abc ')\n  'abc'\n  >>> replace_all(' abc ')\n  'abc'\n  >>> replace_all(' abc ')\n  'abc'\n  */\nconst replace_all = (string) => {\n    return string.replace(/\\s+/g,'');\n}\n\n/* Return the same string with every newline replaced by a space\n  >>> replace_newlines('')\n  ''\n  >>> replace_newlines('abc')\n  'abc'\n  >>> replace_newlines('abc\\n')\n  'abc'\n  >>> replace_newlines('abc\\n')\n  'abc'\n  >>> replace_newlines('abc\\nabc')\n  'abc abc'\n  >>> replace_newlines('abc\\nabc\\n')\n  'abc abc'\n  */\nconst replace_newlines = (string) => {\n    return string.replace(/\\n/g,'');\n}\n\n/* Return a string that is the first N characters of the given string\n  >>> first('')\n  ''\n  >>> first('abc')\n  'abc'\n  >>> first('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> first('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> first('abcdefghijklmnopqrstuvwxyz', 20)\n  'abcdefghijklmnopqrstuvwxyz'\n  */\nconst first = (string, n) => {\n    return string.substr(0, n);\n}\n\n/* Return a string that is the last N characters of the given string\n  >>> last('')\n  ''\n  >>> last('abc')\n  'abc'\n  >>> last('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> last('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> last('abcdefghijklmnopqrstuvwxyz', 20)\n  'abcdefghijklmnopqrstuvwxyz'\n  */\nconst last = (string, n) => {\n    return string.substr(string.length - n, n);\n}\n\n/* Return the same string with every character in given range replaced\n  by a newline\n  >>> replace_all_range('abc', 'a', 'z')\n  '\\nbc\\n\\nbc\\n'\n  >>> replace_all_range('abc', 'a', 'z')\n  '\\nbc\\n\\nbc\\n'\n  >>> replace_all_range('abc', 'a', 'z', 'a', 'z')\n  '\\nbc\\n\\nbc\\n'\n  >>> replace_all_range('abc', 'a', 'z', 'a', 'z')\n  '\\nbc\\n\\nbc\\n'\n  */\nconst replace_all_range = (string, start, end, char_range) => {\n    return string.replace(new RegExp(`[${start}-${end}]`, 'g'), char => {\n        if (char_range.includes(char)) {\n            return '\\n';\n        } else {\n            return char;\n        }\n    });\n}\n\n/* Return the same string with every character in given range replaced\n  by a space\n  >>> replace_all_range('abc', 'a', 'z', 'a', 'z')\n 'a b c '\n  >>> replace_all_range('abc', 'a', 'z', 'a', 'z')\n 'a b c '\n  */\nconst replace_all_range_space = (string, start, end, char_range) => {\n    return string.replace(new RegExp(`[${start}-${end}]`, 'g'), char => {\n        if (char_range.includes(char)) {\n            return'';\n        } else {\n            return char;\n        }\n    });\n}\n\n/* Return the same string with every character in given range replaced\n  by a newline\n  >>> replace_all_range_newlines('abc', 'a', 'z', 'a', 'z')\n  '\\n\\n\\n\\n'\n  >>> replace_all_range_newlines('abc', 'a', 'z', 'a', 'z')\n  '\\n\\n\\n\\n'\n  >>> replace_all_"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest phone number that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find the largest phone number that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n    const divisors = []\n    for (let i = 1; i < n; i++) {\n        const divisor = n / i\n        if (divisor <= i && n % divisor === 0) {\n            divisors.push(divisor)\n        }\n    }\n    if (divisors.length === 0) {\n        return n\n    }\n    return Math.max(...divisors)\n}\n\n/*\n  For a given number n, find the smallest number m that divides n evenly\n  >>> smallestDivisor(15)\n  2\n  */\nconst smallestDivisor = (n) => {\n    const divisors = []\n    for (let i = 1; i < n; i++) {\n        const divisor = n / i\n        if (divisor <= i && n % divisor === 0) {\n            divisors.push(divisor)\n        }\n    }\n    if (divisors.length === 0) {\n        return n\n    }\n    return Math.min(...divisors)\n}\n\n/*\n  For a given number n, find the smallest number m that divides n evenly\n  >>> smallestDivisor(15)\n  2\n  */\nconst smallestEvenDivisor = (n) => {\n    const divisors = []\n    for (let i = 1; i < n; i++) {\n        const divisor = n / i\n        if (divisor <= i && n % divisor === 0 && divisor % 2 === 0) {\n            divisors.push(divisor)\n        }\n    }\n    if (divisors.length === 0) {\n        return n\n    }\n    return Math.min(...divisors)\n}\n\n/*\n  Find the nth prime number\n  >>> findPrime(2)\n  2\n  >>> findPrime(5)\n  5\n  >>> findPrime(10)\n  11\n  >>> findPrime(15)\n  19\n  >>> findPrime(16)\n  23\n  >>> findPrime(20)\n  29\n  >>> findPrime(30)\n  37\n  >>> findPrime(31)\n  43\n  >>> findPrime(32)\n  47\n  >>> findPrime(34)\n  53\n  >>> findPrime(36)\n  59\n  >>> findPrime(40)\n  67\n  >>> findPrime(41)\n  73\n  >>> findPrime(42)\n  79\n  >>> findPrime(43)\n  87\n  >>> findPrime(44)\n  97\n  >>> findPrime(45)\n  107\n  >>> findPrime(46)\n  119\n  >>> findPrime(47)\n  131\n  >>> findPrime(48)\n  143\n  >>> findPrime(49)\n  157\n  >>> findPrime(50)\n  167\n  >>> findPrime(51)\n  173\n  >>> findPrime(52)\n  179\n  >>> findPrime(53)\n  187\n  >>> findPrime(54)\n  193\n  >>> findPrime(55)\n  199\n  >>> findPrime(56)\n  207\n  >>> findPrime(57)\n  215\n  >>> findPrime(58)\n  223\n  >>> findPrime(59)\n  231\n  >>> findPrime(60)\n  239\n  >>> findPrime(61)\n  247\n  >>> findPrime(62)\n  265\n  >>> findPrime(63)\n  283\n  >>> findPrime(64)\n  291\n  >>> findPrime(65)\n  299\n  >>> findPrime(66)\n  307\n  >>> findPrime(67)\n  317\n  >>> findPrime(68)\n  325\n  >>> findPrime(69)\n  333\n  >>> findPrime(70)\n  339\n  >>> findPrime(71)\n  347\n  >>> findPrime(72)\n  355\n  >>> findPrime(73)\n  363\n  >>> findPrime(74)\n  371\n  >>> findPrime(75)\n  379\n  >>> findPrime(76)\n  387\n  >>> findPrime(77)\n  395\n  >>> findPrime(78)\n  403\n  >>> findPrime(79)\n  411\n  >>> findPrime(80)\n  419\n  >>> findPrime(81)\n  427\n  >>> findPrime(82)\n  435\n  >>> findPrime(83)\n  443\n  >>> findPrime(84)\n  451\n  >>> findPrime(85)\n  459\n  >>> findPrime(86)\n  467\n  >>> findPrime(87)\n  475\n  >>> findPrime(88)\n  483\n  >>> findPrime(89)\n  491\n  >>> findPrime(90)\n  499\n  >>> findPrime(91)\n  507\n  >>> findPrime(92)\n  515\n  >>> findPrime(93)\n  523\n  >>> findPrime(94)\n  531\n  >>> findPrime(95)\n  539\n  >>> findPrime(96)\n  547\n  >>> findPrime(97)\n  555\n  >>> findPrime(98)\n  563\n  >>> findPrime(99)\n  571\n  >>> findPrime(100)\n  579\n  >>> findPrime(101)\n  587\n  >>> findPrime(102)\n  595\n  >>> findPrime(103)\n  603\n  >>> findPrime(104)\n  611\n  >>> findPrime(105)\n  619\n  >>> findPrime(106)\n  627\n  >>> findPrime(107)\n  635\n  >>> findPrime(108)\n  643\n  >>> findPrime(109)\n  651\n  >>> findPrime(110)\n  659\n  >>> findPrime(111)\n  667\n  >>> findPrime(112)\n  675\n  >>> findPrime(113)\n  683\n  >>> findPrime(114)\n  691\n  >>> findPrime(115)\n  699\n  >>> findPrime(116)\n  707\n  >>> findPrime(117)\n  715\n  >>> findPrime(118)\n  723\n  >>> findPrime(119)\n  731\n  >>> findPrime(120)\n  739\n  >>> findPrime(121)\n  747\n  >>> findPrime(122)\n  755\n  >>> findPrime(123)\n  763\n  >>>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  if(n === 0) return []\n  const factors = []\n  for(let i = 2; i * i <= n; i++) {\n    if(n % i === 0) {\n      factors.push(i)\n      while(n % i === 0) n /= i\n    }\n  }\n  if(n > 1) factors.push(n)\n  return factors\n}\n\nconsole.log(factorize(8))\nconsole.log(factorize(25))\nconsole.log(factorize(70))\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let unique = [...new Set(numbers)];\n  return unique;\n};\n\nremoveDuplicates([1, 2, 3, 2, 4]);<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, c => c.toUpperCase())\n     .replace(/[A-Z]/g, c => c.toLowerCase())\n}\n\n/*\n  * Prints a string followed by a newline character.\n  * For a given string, prints the string followed by a newline character.\n  * For example:\n  * >>> print('Hello World!')\n  * Hello World!\n  * >>> print('Hello World!', '\\n')\n  * Hello World!\n  * >>> print('Hello World!', '\\n', '\\t')\n  * Hello World!\n  * >>> print('Hello World!', '\\n', '\\t', '\\r')\n  * Hello World!\n  */\nconst print = (string,...args) => {\n  console.log(string,...args)\n}\n\n/*\n  * Prints a string followed by a newline character.\n  * For a given string, prints the string followed by a newline character.\n  * For example:\n  * >>> print('Hello World!')\n  * Hello World!\n  * >>> print('Hello World!', '\\n')\n  * Hello World!\n  * >>> print('Hello World!', '\\n', '\\t')\n  * Hello World!\n  * >>> print('Hello World!', '\\n', '\\t', '\\r')\n  * Hello World!\n  */\nconst println = (string,...args) => {\n  console.log(string,...args)\n}\n\n/*\n  * Prints a string followed by a newline character.\n  * For a given string, prints the string followed by a newline character.\n  * For example:\n  * >>> print('Hello World!')\n  * Hello World!\n  * >>> print('Hello World!', '\\n')\n  * Hello World!\n  * >>> print('Hello World!', '\\n', '\\t')\n  * Hello World!\n  * >>> print('Hello World!', '\\n', '\\t', '\\r')\n  * Hello World!\n  */\nconst printf = (format,...args) => {\n  console.log(format,...args)\n}\n\n/*\n  * Prints a string followed by a newline character.\n  * For a given string, prints the string followed by a newline character.\n  * For example:\n  * >>> print('Hello World!')\n  * Hello World!\n  * >>> print('Hello World!', '\\n')\n  * Hello World!\n  * >>> print('Hello World!', '\\n', '\\t')\n  * Hello World!\n  * >>> print('Hello World!', '\\n', '\\t', '\\r')\n  * Hello World!\n  */\nconst sprintf = (format,...args) => {\n  console.log(format,...args)\n}\n\n/*\n  * Prints a string followed by a newline character.\n  * For a given string, prints the string followed by a newline character.\n  * For example:\n  * >>> print('Hello World!')\n  * Hello World!\n  * >>> print('Hello World!', '\\n')\n  * Hello World!\n  * >>> print('Hello World!', '\\n', '\\t')\n  * Hello World!\n  * >>> print('Hello World!', '\\n', '\\t', '\\r')\n  * Hello World!\n  */\nconst printlnf = (format,...args) => {\n  console.log(format,...args)\n}\n\n/*\n  * Prints a string followed by a newline character.\n  * For a given string, prints the string followed by a newline character.\n  * For example:\n  * >>> print('Hello World!')\n  * Hello World!\n  * >>> print('Hello World!', '\\n')\n  * Hello World!\n  * >>> print('Hello World!', '\\n', '\\t')\n  * Hello World!\n  * >>> print('Hello World!', '\\n', '\\t', '\\r')\n  * Hello World!\n  */\nconst printff = (format,...args) => {\n  console.log(format,...args)\n}\n\n/*\n  * Prints a string followed by a newline character.\n  * For a given string, prints the string followed by a newline character.\n  * For example:\n  * >>> print('Hello World!')\n  * Hello World!\n  * >>> print('Hello World!', '\\n')\n  * Hello World!\n  * >>> print('Hello World!', '\\n', '\\t')\n  * Hello World!\n  * >>> print('Hello World!', '\\n', '\\t', '\\r')\n  * Hello World!\n  */\nconst sprintff = (format,...args) => {\n  console.log(format,...args)\n}\n\n/*\n  * Prints a string followed by a newline character.\n  * For a given string, prints the string followed by a newline character.\n  * For example:\n  * >>> print('Hello World!')\n  * Hello World!\n  * >>> print('Hello World!', '\\n')\n  * Hello World!\n  * >>> print('Hello World!', '\\n', '\\t')\n  * Hello World!\n  * >>> print('Hello World!', '\\n', '\\t', '\\r')\n  * Hello World!\n  */\nconst printlnff = (format,...args) => {\n  console.log(format,...args)\n}\n\n/*\n  * Prints a string followed by a newline character.\n  * For a given string, prints the string followed by a newline character.\n  * For example:\n  * >>> print('Hello World!')\n  * Hello World!\n  * >>> print('Hello World!', '\\n')\n  * Hello World!\n  * >>> print('Hello World!', '\\n', '\\t')\n  * Hello World!\n  * >>> print('Hello World!', '\\n', '\\t', '\\r')\n  * Hello World!\n  */\nconst printfff = (format,...args) => {\n  console.log(format,...args)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = ''\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i]\n  }\n  return result\n}\n\n/* Create a function that checks if two strings are equal\n  >>> same = same(concatenate(['a', 'b', 'c']), 'abc')\n  >>> same('a', 'a')\n  True\n  >>> same('a', 'b')\n  False\n  >>> same('a', 'c')\n  False\n  >>> same(['a', 'b', 'c'], 'abc')\n  True\n  */\nconst same = (a, b) => a === b\n\n/* Create a function that removes duplicate elements from a list\n  >>> removeDuplicates([1, 2, 1, 2, 3])\n  [1, 2, 3]\n  >>> removeDuplicates([1, 2, 3, 1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> removeDuplicates([])\n  []\n  >>> removeDuplicates([1, 2, 3, 1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  */\nconst removeDuplicates = (list) => {\n  let result = []\n  let item = 0\n  for (let i = 0; i < list.length; i++) {\n    if (list[i]!== list[item]) {\n      result.push(list[i])\n    } else {\n      item++\n    }\n  }\n  return result\n}\n\n/* Create a function that removes the first element from a list\n  >>> removeFirst([1, 2, 3, 4, 5, 6])\n  [2, 3, 4, 5, 6]\n  >>> removeFirst([])\n  []\n  >>> removeFirst([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  */\nconst removeFirst = (list) => {\n  let result = []\n  for (let i = 1; i < list.length; i++) {\n    result.push(list[i])\n  }\n  return result\n}\n\n/* Create a function that removes the last element from a list\n  >>> removeLast([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5]\n  >>> removeLast([])\n  []\n  >>> removeLast([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5]\n  */\nconst removeLast = (list) => {\n  let result = []\n  for (let i = 0; i < list.length - 1; i++) {\n    result.push(list[i])\n  }\n  return result\n}\n\n/* Create a function that removes the second-last element from a list\n  >>> removeSecondLast([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5]\n  >>> removeSecondLast([])\n  []\n  >>> removeSecondLast([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5]\n  */\nconst removeSecondLast = (list) => {\n  let result = []\n  for (let i = 0; i < list.length - 2; i++) {\n    result.push(list[i])\n  }\n  return result\n}\n\n/* Create a function that splits a string into parts\n  >>> split('hello world')\n  ['hello', 'world']\n  >>> split('hello world')\n  ['hello', 'world']\n  >>> split('hello world')\n  ['hello', 'world']\n  >>> split('hello world')\n  ['hello', 'world']\n  */\nconst split = (str) => str.split(' ')\n\n/* Create a function that adds two numbers\n  >>> add(1, 1)\n  2\n  >>> add(1, 1.5)\n  2.5\n  >>> add(1.5, 1)\n  2.5\n  >>> add(1.5, 1.5)\n  3.0\n  */\nconst add = (a, b) => a + b\n\n/* Create a function that subtracts two numbers\n  >>> subtract(2, 1)\n  1\n  >>> subtract(2, 1.5)\n  0.5\n  >>> subtract(1.5, 2)\n  0.5\n  >>> subtract(1.5, 1.5)\n  0.0\n  */\nconst subtract = (a, b) => a - b\n\n/* Create a function that multiplies two numbers\n  >>> multiply(2, 2)\n  4\n  >>> multiply(2, 1.5)\n  2.5\n  >>> multiply(1.5, 2)\n  2.5\n  >>> multiply(1.5, 1.5)\n  1.0\n  */\nconst multiply = (a, b) => a * b\n\n/* Create a function that divides two numbers\n  >>> divide(4, 2)\n  2\n  >>> divide(4, 1.5)\n  2.0\n  >>> divide(4, 1)\n  2.0\n  >>> divide(4, 1)\n  2.0\n  */\nconst divide = (a, b) => a / b\n\n/* Create a function that takes a string and converts it to an array\n  >>> strToArray('hello world')\n  ['hello', 'world']\n  >>> strToArray('hello world')\n  ['hello', 'world']\n  >>> strToArray('hello world')\n  ['hello', 'world']\n  */\nconst strToArray = (str) => split(str)\n\n/* Create a function that takes a number and converts it to an array\n  >>> numToArray(2)\n  [2]\n  >>> numToArray(2)\n  [2]\n  >>> numToArray(2)\n  [2]\n  */\nconst numToArray = (num) => [num]\n\n/* Create a function that takes a string and converts it to a list\n  >>> strToList('hello world')\n  ['hello', 'world']\n  >>> strToList('hello world')\n  ['hello', 'world']\n  >>> strTo"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a grant prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start with a grant prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nmodule.exports = filterByPrefix;\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/*\n  * Return the sum of the numbers in the list.\n  *\n  * @param {number[]} l - The list to sum.\n  * @returns {number} - The sum of the list.\n  *\n  * @example\n  * getSum([1, 2, 3, 4, 5])\n  * // => 15\n  *\n  * @example\n  * getSum([-1, -2, -3, -4, -5])\n  * // => -15\n  *\n  * @example\n  * getSum([-1, -2, -3, -4, -5, -6, -7])\n  * // => -21\n  */\nconst getSum = (l) => {\n  return l.reduce((prev, curr) => prev + curr, 0);\n};\n\n/*\n  * Return the maximum of the numbers in the list.\n  *\n  * @param {number[]} l - The list to find the maximum of.\n  * @returns {number} - The maximum of the list.\n  *\n  * @example\n  * getMax([1, 2, 3, 4, 5])\n  * // => 5\n  *\n  * @example\n  * getMax([-1, -2, -3, -4, -5])\n  * // => -5\n  *\n  * @example\n  * getMax([-1, -2, -3, -4, -5, -6, -7])\n  * // => -7\n  */\nconst getMax = (l) => {\n  return Math.max.apply(null, l);\n};\n\n/*\n  * Return the maximum of the numbers in the list.\n  *\n  * @param {number[]} l - The list to find the maximum of.\n  * @returns {number} - The maximum of the list.\n  *\n  * @example\n  * getMin([1, 2, 3, 4, 5])\n  * // => 1\n  *\n  * @example\n  * getMin([-1, -2, -3, -4, -5])\n  * // => -5\n  *\n  * @example\n  * getMin([-1, -2, -3, -4, -5, -6, -7])\n  * // => -7\n  */\nconst getMin = (l) => {\n  return Math.min.apply(null, l);\n};\n\n/*\n  * Return the average of the numbers in the list.\n  *\n  * @param {number[]} l - The list to find the average of.\n  * @returns {number} - The average of the list.\n  *\n  * @example\n  * getAverage([1, 2, 3, 4, 5])\n  * // => 3\n  *\n  * @example\n  * getAverage([-1, -2, -3, -4, -5])\n  * // => -5\n  *\n  * @example\n  * getAverage([-1, -2, -3, -4, -5, -6, -7])\n  * // => -7\n  */\nconst getAverage = (l) => {\n  return l.reduce((prev, curr) => prev + curr, 0) / l.length;\n};\n\n/*\n  * Return the median of the numbers in the list.\n  *\n  * @param {number[]} l - The list to find the median of.\n  * @returns {number} - The median of the list.\n  *\n  * @example\n  * getMedian([1, 2, 3, 4, 5])\n  * // => 3\n  *\n  * @example\n  * getMedian([-1, -2, -3, -4, -5])\n  * // => -5\n  *\n  * @example\n  * getMedian([-1, -2, -3, -4, -5, -6, -7])\n  * // => -7\n  */\nconst getMedian = (l) => {\n  const half = Math.floor(l.length / 2);\n\n  return l[half - 1] + (l[half] - l[half - 1]) / 2;\n};\n\nexport {\n  getPositive,\n  getSum,\n  getMax,\n  getMin,\n  getAverage,\n  getMedian,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number equal choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number equal choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 1) {\n    return false;\n  }\n  if (n === 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let limit = Math.sqrt(n);\n  for (let i = 3; i <= limit; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero recurrence only entirely zero point, even if there exist many. \n   Moreover, findZero only carry list xs having even number of coefficient \n   and largest non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero recurrence only entirely zero point, even if there exist many. \n   Moreover, findZero only carry list xs having even number of coefficient \n   and largest non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let len = xs.length;\n  let n = len - 1;\n  let poly = (x) => {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  };\n  let recurrence = (x) => {\n    let xs0 = xs.slice(0, n);\n    let xs1 = xs.slice(n);\n    return xs0.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index);\n    }, 0) - poly(x);\n  };\n  while (n > 0) {\n    let x = -recurrence(0.5);\n    if (x === 0) {\n      return x;\n    }\n    n--;\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by three, while its value at the indicies that are divisible by three are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by three, while its value at the indicies that are divisible by three are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let sorted = l.slice().sort((a, b) => {\n    return (a % 3 === b % 3)? 0 : (a % 3 < b % 3)? -1 : 1;\n  });\n  return sorted.filter(i => i % 3!== 0);\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by five, while its value at the indicies that are divisible by five are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFifth = (l) => {\n  let sorted = l.slice().sort((a, b) => {\n    return (a % 5 === b % 5)? 0 : (a % 5 < b % 5)? -1 : 1;\n  });\n  return sorted.filter(i => i % 5!== 0);\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by 7, while its value at the indicies that are divisible by 7 are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeven([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSeven = (l) => {\n  let sorted = l.slice().sort((a, b) => {\n    return (a % 7 === b % 7)? 0 : (a % 7 < b % 7)? -1 : 1;\n  });\n  return sorted.filter(i => i % 7!== 0);\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by 11, while its value at the indicies that are divisible by 11 are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortEleven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEleven([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortEleven = (l) => {\n  let sorted = l.slice().sort((a, b) => {\n    return (a % 11 === b % 11)? 0 : (a % 11 < b % 11)? -1 : 1;\n  });\n  return sorted.filter(i => i % 11!== 0);\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by 13, while its value at the indicies that are divisible by 13 are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortThirteen([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirteen([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirteen = (l) => {\n  let sorted = l.slice().sort((a, b) => {\n    return (a % 13 === b % 13)? 0 : (a % 13 < b % 13)? -1 : 1;\n  });\n  return sorted.filter(i => i % 13!== 0);\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by 17, while its value at the indicies that are divisible by 17 are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortFifteen([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFifteen([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFifteen = (l) => {\n  let sorted = l.slice().sort((a, b) => {\n    return (a % 17 === b % 17)? 0 : (a % 17 < b % 17)? -1 : 1;\n  });\n  return sorted.filter(i => i % 17!== 0);\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by 19, while its value at the indicies that are divisible by 19 are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortNineteen([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNineteen([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortNineteen = (l) => {\n  let sorted = l.slice().sort((a, b) => {\n    return (a % 19 === b % 19)? 0 : (a % 19 < b % 19)? -1 : 1;\n  });\n  return sorted.filter(i => i % 19!== 0);\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by 31, while its value at the indicies that are divisible by 31 are equal \n   to the value of"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueElements = []\n  const seenElements = {}\n  for (let i = 0; i < l.length; i++) {\n    const currentElement = l[i]\n    if (!seenElements.hasOwnProperty(currentElement)) {\n      seenElements[currentElement] = true\n      uniqueElements.push(currentElement)\n    }\n  }\n  return uniqueElements\n}\n\n/*\n  Given a list of numbers, find the number of different permutations\n  that can be created using the given numbers.\n\n  >>> count([1, 2, 3, 4, 5])\n  3\n  >>> count([1, 2, 3])\n  3\n  >>> count([1, 2])\n  2\n  >>> count([1, 2, 3, 4])\n  2\n  >>> count([1, 2, 3, 4, 5, 6])\n  3\n  >>> count([1, 2, 3, 4, 5, 6, 7])\n  3\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8])\n  4\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  5\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  6\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  7\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  8\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  9\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  10\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  11\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  12\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  13\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  14\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  15\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  16\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  17\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  18\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  19\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  20\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  21\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  22\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  23\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  24\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  25\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  26\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  27\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  28\n  >>> count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nexport default maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let output = 0;\n  let i = 1;\n  while (i <= n) {\n    if ((n % i) === 0) {\n      if (((n % (i * 11)) === 0) || ((n % (i * 13)) === 0)) {\n        output += 1;\n      }\n    }\n    i++;\n  }\n  return output;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the odd indicies, while its values at the even indicies constitute equal \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the odd indicies, while its values at the even indicies constitute equal \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let i = 0;\n  let len = l.length;\n  let result = new Array(len);\n  let j = 0;\n  for (let x of l) {\n    if (i % 2 === 0) {\n      result[j] = x;\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  This function takes a list l and returns a list l' such that \n   l' is identical to l in the even indicies, while its values at the odd indicies constitute equal \n   to the value of the odd indicies of l, but classify.\n  >>> sortOdd([1, 2, 3])\n  [1, 3, 2]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 4, 3, 6]\n  */\nconst sortOdd = (l) => {\n  let i = 0;\n  let len = l.length;\n  let result = new Array(len);\n  let j = 0;\n  for (let x of l) {\n    if (i % 2 === 1) {\n      result[j] = x;\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\n// Test Cases\nlet testCase1 = [1, 2, 3];\nconsole.log(sortEven(testCase1));\n\nlet testCase2 = [5, 6, 3, 4];\nconsole.log(sortEven(testCase2));\n\nlet testCase3 = [1, 3, 2];\nconsole.log(sortOdd(testCase3));\n\nlet testCase4 = [5, 4, 3, 6];\nconsole.log(sortOdd(testCase4));\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n   const n = Math.floor((s.length + 2) / 3);\n   const decoded = [ ]; \n   for (permit i = 0; i < n; i++) { \n     decoded.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   return decoded.join('');\n}\n*/\n\n/*\n   returns decoded string by cycling groups of three character. \n   * / \n const decodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\nconst encode = (s) = > {\n  return encodeCyclic(s);\n}\n\nconst decode = (s) = > {\n  return decodeCyclic(s);\n}\n*/\n\n// TODO: Make this a function\nconst encode = (s) = > {\n  let encoded = '';\n  for (let i = 0; i < s.length; i++) {\n    if (i === 0 || i === s.length - 1) {\n      encoded += s[i];\n    } else {\n      encoded += encodeCyclic(s.substr(i, 3));\n    }\n  }\n  return encoded;\n}\n\nconst decode = (s) = > {\n  let decoded = '';\n  for (let i = 0; i < s.length; i++) {\n    if (i === 0 || i === s.length - 1) {\n      decoded += s[i];\n    } else {\n      decoded += decodeCyclic(s.substr(i, 3));\n    }\n  }\n  return decoded;\n}\n\nmodule.exports = {\n  encode: encode,\n  decode: decode\n};\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let prime = 2\n  let fib = 1\n  let i = 0\n  while (prime < n) {\n    let next = fib + fib\n    if (next < n) {\n      fib = next\n    } else {\n      break\n    }\n    prime += 1\n  }\n  return fib\n}\n\nconsole.log(primeFib(1))\nconsole.log(primeFib(2))\nconsole.log(primeFib(3))\nconsole.log(primeFib(4))\nconsole.log(primeFib(5))\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  if(l.length === 0) {\n    return false;\n  }\n  const distinctElements = _.uniq(l);\n  if(distinctElements.length === 1) {\n    return false;\n  }\n  const sum = _.reduce(distinctElements, (a, b) => a + b, 0);\n  return sum === 0;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly square boundlessly long line. \n   n car are drive exit to correctly;   simultaneously, a unlike set of n car \n   are drive right to left.    The two sets of cars start out be very far from \n   each early.   All cars motivate in the like amphetamine.   Two cars are said to clash \n   when a car that's move left to proper hit a car that's move good to left. \n   However, the cars are infinitely sturdy and hard; as a solution, they continue be active \n   in their trajectory as if they did not clash. \n\n   This function output the number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly square boundlessly long line. \n   n car are drive exit to correctly;   simultaneously, a unlike set of n car \n   are drive right to left.    The two sets of cars start out be very far from \n   each early.   All cars motivate in the like amphetamine.   Two cars are said to clash \n   when a car that's move left to proper hit a car that's move good to left. \n   However, the cars are infinitely sturdy and hard; as a solution, they continue be active \n   in their trajectory as if they did not clash. \n\n   This function output the number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n     var a = [\n        [0, 1, 2],\n        [2, 3, 4],\n        [4, 5, 6],\n        [6, 7, 8],\n        [8, 9, 10],\n        [10, 11, 12],\n        [12, 13, 14],\n        [14, 15, 16],\n        [16, 17, 18],\n        [18, 19, 20],\n        [20, 21, 22],\n        [22, 23, 24],\n        [24, 25, 26],\n        [26, 27, 28],\n        [28, 29, 30],\n        [30, 31, 32],\n        [32, 33, 34],\n        [34, 35, 36],\n        [36, 37, 38],\n        [38, 39, 40],\n        [40, 41, 42],\n        [42, 43, 44],\n        [44, 45, 46],\n        [46, 47, 48],\n        [48, 49, 50],\n        [50, 51, 52],\n        [52, 53, 54],\n        [54, 55, 56],\n        [56, 57, 58],\n        [58, 59, 60],\n        [60, 61, 62],\n        [62, 63, 64],\n        [64, 65, 66],\n        [66, 67, 68],\n        [68, 69, 70],\n        [70, 71, 72],\n        [72, 73, 74],\n        [74, 75, 76],\n        [76, 77, 78],\n        [78, 79, 80],\n        [80, 81, 82],\n        [82, 83, 84],\n        [84, 85, 86],\n        [86, 87, 88],\n        [88, 89, 90],\n        [90, 91, 92],\n        [92, 93, 94],\n        [94, 95, 96],\n        [96, 97, 98],\n        [98, 99, 100],\n        [100, 101, 102],\n        [102, 103, 104],\n        [104, 105, 106],\n        [106, 107, 108],\n        [108, 109, 110],\n        [110, 111, 112],\n        [112, 113, 114],\n        [114, 115, 116],\n        [116, 117, 118],\n        [118, 119, 120],\n        [120, 121, 122],\n        [122, 123, 124],\n        [124, 125, 126],\n        [126, 127, 128],\n        [128, 129, 130],\n        [130, 131, 132],\n        [132, 133, 134],\n        [134, 135, 136],\n        [136, 137, 138],\n        [138, 139, 140],\n        [140, 141, 142],\n        [142, 143, 144],\n        [144, 145, 146],\n        [146, 147, 148],\n        [148, 149, 150],\n        [150, 151, 152],\n        [152, 153, 154],\n        [154, 155, 156],\n        [156, 157, 158],\n        [158, 159, 160],\n        [160, 161, 162],\n        [162, 163, 164],\n        [164, 165, 166],\n        [166, 167, 168],\n        [168, 169, 170],\n        [170, 171, 172],\n        [172, 173, 174],\n        [174, 175, 176],\n        [176, 177, 178],\n        [178, 179, 180],\n        [180, 181, 182],\n        [182, 183, 184],\n        [184, 185, 186],\n        [186, 187, 188],\n        [188, 189, 190],\n        [190, 191, 192],\n        [192, 193, 194],\n        [194, 195, 196],\n        [196, 197, 198],\n        [198, 199, 200],\n        [200, 201, 202],\n        [202, 203, 204],\n        [204, 205, 206],\n        [206, 207, 208],\n        [208, 209, 210],\n        [210, 211, 212],\n        [212, 213, 214],\n        [214, 215, 216],\n        [216, 217, 218],\n        [218, 219, 220],\n        [220, 221, 222],\n        [222, 223, 224],\n        [224, 225, 226],\n        [226, 227, 228],\n        [228, 229, 230],\n        [230, 231, 232],\n        [232, 233, 234],\n        [234, 235, 236],\n        [236, 237, 238],\n        [238, 239, 240],\n        [240, 241, 242],\n        [242, 243, 244],\n        [244, 245, 246],\n        [246, 247, 248],\n        [248, 249, 250],\n        [250, 251, 252],\n        [252, 253, 254],\n        [254, 255, 256],\n        [256, 257, 258],\n        [258, 259, 260],\n        [260, 261, 262],\n        [262, 263, 264],\n        [264, 265, 266],\n        [266, 267, 268],\n        [268, 269, 270],\n        [270, 271, 272],\n        [272, 273, 274],\n        [274, 275, 276],\n        [276, 277, 278],\n        [278, 279, 280],\n        [280, 281, 282],\n        [282, 283, 284],\n        [284, 285, 286],\n        [286, 287, 288],\n        [288, 289, 290],\n        [290, 291, 292],\n        [292, 293, 294],\n        [294, 295, 296],\n        [296, 297, 298],\n        [298, 299, 300],\n        [300, 301, 302],\n        "}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const res = [...l];\n  return res.map((v) => v + 1);\n};\n\n/*\n  >>> [1, 2, 3].reduce( (acc, x) => acc + x, 0)\n  6\n  >>> [1, 2, 3].reduce( (acc, x) => acc + x, \"\")\n  '6'\n  >>> [1, 2, 3].reduce( (acc, x) => acc + x, null)\n  null\n  >>> [1, 2, 3].reduce( (acc, x) => acc + x, undefined)\n  undefined\n  >>> [1, 2, 3].reduce( (acc, x) => acc + x, \"Hello\")\n  'HelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHello�',\n  >>> 'hello'.toLocaleLowerCase()\n  'hello'\n  >>> [1, 2, 3].reduce( (acc, x) => acc + x, 0)\n  '6'\n  >>> [1, 2, 3].reduce( (acc, x) => acc + x, \"\")\n  '6'\n  >>> [1, 2, 3].reduce( (acc, x) => acc + x, null)\n  null\n  >>> [1, 2, 3].reduce( (acc, x) => acc + x, undefined)\n  undefined\n  >>> [1, 2, 3].reduce( (acc, x) => acc + x, \"\")\n  '6'\n  >>> [1, 2, 3].reduce( (acc, x) => acc + x, \"Hello\")\n  'HelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHello�'\n  >>> 'hello'.toLocaleLowerCase()\n  'hello'\n  >>> [1, 2, 3].reduce( (acc, x) => acc + x, 0)\n  '6'\n  >>> [1, 2, 3].reduce( (acc, x) => acc + x, \"\")\n  '6'\n  >>> [1, 2, 3].reduce( (acc, x) => acc + x, null)\n  null\n  >>> [1, 2, 3].reduce( (acc, x) => acc + x, undefined)\n  undefined\n  >>> [1, 2, 3].reduce( (acc, x) => acc + x, \"\")\n  '6'\n  >>> [1, 2, 3].reduce( (acc, x) => acc + x, \"Hello\")\n  'HelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHelloHello"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let list = Array.from(l)\n  let i = 0\n  let j = list.length - 1\n  let zero = false\n\n  while (i < j) {\n    if (list[i] + list[j] === 0) {\n      zero = true\n      break\n    } else if (list[i] < list[j]) {\n      i++\n    } else {\n      j--\n    }\n  }\n  return zero\n}\n\nmodule.exports = pairsSumToZero\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return drawstring theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return drawstring theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const baseLength = (base === 10)? 2 : 3\n  const temp = x\n   .toString()\n   .split('')\n   .map(digit => parseInt(digit, 10))\n   .reduce((a, b) => a + b * baseLength)\n  return temp\n}\n\n/*\n  >>> numToBase(8, 2)\n  '1000'\n  >>> numToBase(8, 3)\n  '22'\n  >>> numToBase(7, 2)\n  '111'\n  */\nconst numToBase = (x, base) => {\n  const temp = x\n   .toString()\n   .split('')\n   .map((digit, index) => {\n      const digitLength = (digit === '0')? 1 : 2\n      return parseInt(digit, 10) * Math.pow(base, digitLength)\n    })\n   .reduce((a, b) => a + b)\n  return temp\n}\n\n/*\n  >>> baseToNum(1000)\n  8\n  >>> baseToNum(22)\n  8\n  >>> baseToNum(111)\n  7\n  >>> baseToNum(1000, 2)\n  4\n  >>> baseToNum(22, 2)\n  4\n  >>> baseToNum(111, 2)\n  2\n  >>> baseToNum(1000, 3)\n  7\n  >>> baseToNum(22, 3)\n  2\n  >>> baseToNum(111, 3)\n  3\n  >>> baseToNum(1000, 10)\n  8\n  >>> baseToNum(22, 10)\n  2\n  >>> baseToNum(111, 10)\n  7\n  >>> baseToNum(1000, 2, 3)\n  4\n  >>> baseToNum(22, 2, 3)\n  4\n  >>> baseToNum(111, 2, 3)\n  3\n  >>> baseToNum(1000, 3, 2)\n  4\n  >>> baseToNum(22, 3, 2)\n  4\n  >>> baseToNum(111, 3, 2)\n  2\n  >>> baseToNum(1000, 10, 2)\n  8\n  >>> baseToNum(22, 10, 2)\n  2\n  >>> baseToNum(111, 10, 2)\n  7\n  >>> baseToNum(1000, 2, 3, 2)\n  4\n  >>> baseToNum(22, 2, 3, 2)\n  4\n  >>> baseToNum(111, 2, 3, 2)\n  3\n  >>> baseToNum(1000, 3, 2, 2)\n  4\n  >>> baseToNum(22, 3, 2, 2)\n  4\n  >>> baseToNum(111, 3, 2, 2)\n  2\n  >>> baseToNum(1000, 10, 2, 2)\n  8\n  >>> baseToNum(22, 10, 2, 2)\n  2\n  >>> baseToNum(111, 10, 2, 2)\n  7\n  >>> baseToNum(1000, 3, 2, 3)\n  7\n  >>> baseToNum(22, 3, 2, 3)\n  2\n  >>> baseToNum(111, 3, 2, 3)\n  3\n  >>> baseToNum(1000, 10, 2, 3)\n  8\n  >>> baseToNum(22, 10, 2, 3)\n  2\n  >>> baseToNum(111, 10, 2, 3)\n  7\n  >>> baseToNum(1000, 3, 2, 3, 2)\n  4\n  >>> baseToNum(22, 3, 2, 3, 2)\n  4\n  >>> baseToNum(111, 3, 2, 3, 2)\n  3\n  >>> baseToNum(1000, 3, 2, 3, 2, 2)\n  4\n  >>> baseToNum(22, 3, 2, 3, 2, 2)\n  4\n  >>> baseToNum(111, 3, 2, 3, 2, 2)\n  2\n  >>> baseToNum(1000, 3, 2, 3, 2, 3)\n  7\n  >>> baseToNum(22, 3, 2, 3, 2, 3)\n  2\n  >>> baseToNum(111, 3, 2, 3, 2, 3)\n  3\n  >>> baseToNum(1000, 10, 2, 3, 2)\n  8\n  >>> baseToNum(22, 10, 2, 3, 2)\n  2\n  >>> baseToNum(111, 10, 2, 3, 2)\n  7\n  >>> baseToNum(1000, 10, 2, 3, 2, 2)\n  8\n  >>> baseToNum(22, 10, 2, 3, 2, 2)\n  2\n  >>> baseToNum(111, 10, 2, 3, 2, 2)\n  7\n  >>> baseToNum(1000, 10, 2, 3, 2, 3)\n  8\n  >>> baseToNum(22, 10, 2, 3, 2, 3)\n  2\n  >>> baseToNum(111, 10, 2, 3, 2, 3)\n  3\n  >>> baseToNum(1000, 10, 2, 3, 2, 3, 2)\n  4\n  >>> baseToNum(22, 10, 2, 3, 2, 3, 2)\n  4\n  >>> baseToNum(111, 10, 2, 3, 2, 3, 2)\n  3\n  >>> baseToNum(1000, 10, 2, 3, 2, 3, 2, 2)\n  4\n  >>> baseToNum(22, 10, 2, 3, 2, 3, 2, 2)\n  4\n  >>> baseToNum(111, 10, 2, 3, 2, 3, 2, 2)\n  2\n  >>> baseToNum(1000, 10, 2, 3, 2, 3, 2, 3)\n  7\n  >>> baseToNum(22, 10, 2, 3, 2, 3, 2, 3)\n  2\n  >>> baseToNum(111, 10, 2, 3, 2, 3, 2, 3)\n  3\n  >>> baseToNum(1000, 10, 2, 3, 2, 3, 2, 3,"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h) / 2\n}\n\n/*Given two spheres, find the distance between their center of mass.\n  >>> distance(1, 5, 2, 3)\n  1.0\n  >>> distance(1, 3, 2, 5)\n  2.0\n  >>> distance(1, 5, 3, 5)\n  0.0\n  */\nconst distance = (x, y, z, w) => {\n  const dx = x - w\n  const dy = y - w\n  const dz = z - w\n  return Math.sqrt(dx * dx + dy * dy + dz * dz)\n}\n\n/*Given a sphere, find the point which is closest to the sphere center.\n  >>> closest(1, 2, 3, 4)\n  1.0\n  >>> closest(2, 2, 3, 4)\n  2.0\n  >>> closest(1, 2, 4, 4)\n  3.0\n  */\nconst closest = (x, y, z, w) => {\n  const dx = x - w\n  const dy = y - w\n  const dz = z - w\n  return Math.sqrt(dx * dx + dy * dy + dz * dz)\n}\n\n/*Given a sphere, find the point which is closest to the sphere center\n  and is the farthest from the sphere center.\n  >>> farthest(1, 2, 3, 4)\n  2.0\n  >>> farthest(1, 2, 3, 3)\n  3.0\n  >>> farthest(1, 2, 2, 4)\n  3.0\n  >>> farthest(1, 2, 3, 4)\n  3.0\n  */\nconst farthest = (x, y, z, w) => {\n  const dx = x - w\n  const dy = y - w\n  const dz = z - w\n  return Math.max(Math.sqrt(dx * dx + dy * dy + dz * dz), 0)\n}\n\n/*Given two spheres, find the point which is closest to the sphere center\n  of each sphere.\n  >>> closest(1, 2, 3, 4)\n  1.0\n  >>> closest(2, 2, 3, 4)\n  3.0\n  >>> closest(1, 2, 4, 4)\n  2.0\n  >>> closest(1, 2, 3, 5)\n  3.0\n  >>> closest(1, 2, 3, 4)\n  3.0\n  */\nconst closestSphere = (x, y, z, w) => {\n  const dx = x - w\n  const dy = y - w\n  const dz = z - w\n  return Math.min(Math.sqrt(dx * dx + dy * dy + dz * dz), 0)\n}\n\n/*Given two spheres, find the point which is closest to the sphere center\n  of each sphere and is farthest from the sphere center of the other sphere.\n  >>> farthestSphere(1, 2, 3, 4)\n  2.0\n  >>> farthestSphere(2, 2, 3, 4)\n  3.0\n  >>> farthestSphere(1, 2, 4, 4)\n  4.0\n  >>> farthestSphere(1, 2, 3, 5)\n  4.0\n  >>> farthestSphere(1, 2, 3, 4)\n  4.0\n  */\nconst farthestSphere = (x, y, z, w) => {\n  const dx = x - w\n  const dy = y - w\n  const dz = z - w\n  return Math.max(Math.sqrt(dx * dx + dy * dy + dz * dz), 0)\n}\n\n/*Given two spheres, find the point which is farthest from the sphere center\n  of each sphere and is closest to the sphere center of the other sphere.\n  >>> closestSphere(1, 2, 3, 4)\n  1.0\n  >>> closestSphere(2, 2, 3, 4)\n  3.0\n  >>> closestSphere(1, 2, 4, 4)\n  3.0\n  >>> closestSphere(1, 2, 3, 5)\n  2.0\n  >>> closestSphere(1, 2, 3, 4)\n  3.0\n  */\nconst closestSphereSphere = (x, y, z, w) => {\n  const dx = x - w\n  const dy = y - w\n  const dz = z - w\n  return Math.min(Math.sqrt(dx * dx + dy * dy + dz * dz), 0)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please publish a affair to efficiently calculate the n-th component of the fib4 phone number sequence.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please publish a affair to efficiently calculate the n-th component of the fib4 phone number sequence.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if(n === 0 || n === 1) {\n        return n;\n    }\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconst test = () => {\n    console.log(fib4(7));\n};\n\ntest();\n\nmodule.exports = {\n    fib4\n};\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let i = l.length\n  let half = Math.floor(i / 2)\n  if (i % 2 === 0) {\n    return (l[half] + l[half - 1]) / 2\n  } else {\n    return l[half]\n  }\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst mode = (l) => {\n  let max = 0\n  let index = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n      index = i\n    }\n  }\n  return l[index]\n}\n\n/* Return the sum of all elements in the list.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  */\nconst sum = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/* Return the average of all elements in the list.\n  >>> avg([3, 1, 2, 4, 5])\n  3.0\n  */\nconst avg = (l) => {\n  return sum(l) / l.length\n}\n\nmodule.exports = {\n  median,\n  mode,\n  sum,\n  avg\n}\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": false, "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    const len = text.length\n    let i = 0, j = len - 1\n    while (i < j) {\n        if (text.charAt(i)!== text.charAt(j)) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\nexport default isPalindrome\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n    return (n % p + p) % p;\n};\n\n/*\n  * Given a set of numbers, calculate the number of different ways to add up to that sum.\n  *\n  * The result is returned in a format like:\n  *\n  * [3,2,2,1,4,3,2,1]\n  *\n  * For example, [3,2,2,1,4,3,2,1] represents the number of different ways to add up to 10,\n  * since there are 3 ways to add up to 10, 2 ways to add up to 8, and 2 ways to add up to 6.\n  *\n  * There are 2 ways to add up to 7, 1 way to add up to 5, and 1 way to add up to 3.\n  *\n  * The function is not optimized, so it should be used sparingly.\n  *\n  * @param {Array} arr - The array of numbers to sum.\n  * @return {Array} - The number of different ways to add up to the sum.\n  *\n  * @example\n  *\n  * [3,2,2,1,4,3,2,1]\n  *\n  * [1,2,3,4,5,6,7,8,9,10]\n  *\n  * [1,2,3,4,5,6,7,8,9,10]\n  *\n  * [1,2,3,4,5,6,7,8,9,10,11,12]\n  *\n  * [1,2,3,4,5,6,7,8,9,10,11,12,13,14]\n  *\n  * [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n  */\nconst multiSum = (arr) => {\n    let sum = 0;\n    let tmpSum = 0;\n    let i = 0;\n\n    // loop through the numbers\n    while (i < arr.length) {\n        sum += arr[i];\n        tmpSum = sum - arr[i - 1];\n        // check if there are more numbers after this one\n        if (tmpSum == 0) {\n            // if there are, return the array\n            return arr;\n        }\n        i++;\n    }\n    // if there are no more numbers, return the array\n    return arr;\n};\n\n/*\n  * Given two numbers, calculate the sum of the multiples of their digits.\n  *\n  * @param {Number} num1 - The first number to calculate the multiples of its digits.\n  * @param {Number} num2 - The second number to calculate the multiples of its digits.\n  *\n  * @return {Number} - The sum of the multiples of the digits.\n  *\n  * @example\n  *\n  * 3*5 + 6*7 = 21\n  *\n  * 4*9 + 6*9 = 54\n  */\nconst multiSumOfDigits = (num1, num2) => {\n    let multiSum = 0;\n\n    // loop through each digit of num1\n    for (let i = 0; i < num1.toString().length; i++) {\n        // loop through each digit of num2\n        for (let j = 0; j < num2.toString().length; j++) {\n            multiSum += num1 * num2;\n        }\n    }\n    return multiSum;\n};\n\n/*\n  * Given two numbers, calculate the sum of the multiples of their digits, modulo p.\n  *\n  * @param {Number} num1 - The first number to calculate the multiples of its digits.\n  * @param {Number} num2 - The second number to calculate the multiples of its digits.\n  * @param {Number} p - The modulo p.\n  *\n  * @return {Number} - The sum of the multiples of the digits modulo p.\n  *\n  * @example\n  *\n  * 3*5 + 6*7 = 21\n  *\n  * 4*9 + 6*9 = 54\n  *\n  * 3*5 + 6*7 = 21\n  *\n  * 4*9 + 6*9 = 54\n  */\nconst multiSumModp = (num1, num2, p) => {\n    let multiSum = 0;\n\n    // loop through each digit of num1\n    for (let i = 0; i < num1.toString().length; i++) {\n        // loop through each digit of num2\n        for (let j = 0; j < num2.toString().length; j++) {\n            multiSum += num1 * num2;\n            multiSum = multiSum % p;\n        }\n    }\n    return multiSum;\n};\n\n/*\n  * Given a set of numbers, calculate the number of different ways to add up to that sum,\n  * modulo p.\n  *\n  * The result is returned in a format like:\n  *\n  * [3,2,2,1,4,3,2,1]\n  *\n  * For example, [3,2,2,1,4,3,2,1] represents the number of different ways to add up to 10,\n  * since there are 3 ways to add up to 10, 2 ways to add up to 8, and 2 ways to add up to 6.\n  *\n  * There are 2 ways to add up to 7, 1 way to add up to 5, and 1 way to add up to 3.\n  *\n  * The function is not optimized, so it should be used sparingly.\n  *\n  * @param {Array} arr - The array of numbers to sum.\n  * @param {Number} p - The modulo p.\n  *\n  * @return {Array} - The number of different ways to add up to the sum modulo p.\n  *\n  * @example\n  *\n  * [3,2,2,1,4,3,2,1]\n  *\n  * [1,2,3,4,5,6"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes as remark string encode with encode_shift routine. return decoded string. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as remark string encode with encode_shift routine. return decoded string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\");\n } \n\n / * \n   encodes string by shifting every quality by 5 in the rudiment. \n   * / \n const encode = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as remark string and encode with encode_shift routine. return decoded string. \n   * / \n const decode = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join(\"\");\n } \n\n / * \n   returns quality of a given string by using encode and decode shift routines. \n   * / \n const getQuality = (s) = > { \n   return encode(decode(s)) \n } \n\n / * \n   returns quality of a given string by using encode and decode shift routines. \n   * / \n const getQuality = (s) = > { \n   return encode(decode(s)) \n } \n*/<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string and returns drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  if (text.length === 0) {\n    return text\n  }\n  return text.replace(/[aeiou]/g, '')\n}\n\n/**\n  findVowels is a function that takes string and returns array of vowels.\n  >>> findVowels('')\n  []\n  >>> findVowels(\"abcdef\\nghijklm\")\n  ['f', 'g', 'h', 'i', 'j', 'k', 'l']\n  >>> findVowels('abcdef')\n  ['f', 'g', 'h', 'i', 'j', 'k', 'l']\n  >>> findVowels('aaaaa')\n  []\n  >>> findVowels('aaBAA')\n  ['B']\n  >>> findVowels('zbcd')\n  ['z']\n  */\nconst findVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  return text.replace(/[aeiou]/g, (v) => {\n    return vowels.indexOf(v) > -1\n  })\n}\n\n/**\n  replaceVowels is a function that takes string and returns drawstring with vowel.\n  >>> replaceVowels('')\n  ''\n  >>> replaceVowels(\"abcdef\\nghijklm\")\n  'aeBcdF\\nehijklm'\n  >>> replaceVowels('abcdef')\n  'aeBcdF'\n  >>> replaceVowels('aaaaa')\n  ''\n  >>> replaceVowels('aaBAA')\n  'AAB'\n  >>> replaceVowels('zbcd')\n  'zbc'\n  */\nconst replaceVowels = (text) => {\n  if (text.length === 0) {\n    return text\n  }\n  return text.replace(/[aeiou]/g, (v) => {\n    return vowels[v]\n  })\n}\n\n/**\n  vowelsCount is a function that takes string and returns count of vowels.\n  >>> vowelsCount('')\n  0\n  >>> vowelsCount(\"abcdef\\nghijklm\")\n  7\n  >>> vowelsCount('abcdef')\n  6\n  >>> vowelsCount('aaaaa')\n  0\n  >>> vowelsCount('aaBAA')\n  1\n  >>> vowelsCount('zbcd')\n  1\n  */\nconst vowelsCount = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  return vowels.reduce((c, v) => {\n    return c + (text.indexOf(v) > -1? 1 : 0)\n  }, 0)\n}\n\nmodule.exports = {\n  removeVowels,\n  findVowels,\n  replaceVowels,\n  vowelsCount\n}\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": false, "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const lLength = l.length;\n  for (let i = 0; i < lLength; i++) {\n    if (l[i] >= t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = belowThreshold;\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\nmodule.exports = add;\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    let length = s0.length;\n    let max = length;\n    for (let i = 0; i < length; i++) {\n        if (s0[i]!= s1[i]) {\n            max = i;\n        }\n    }\n    return max === length;\n};\n\n/*\n  Return all the palindromic subsets of a string\n  >>> palindromicSubsets('abc')\n  [[], ['a', 'b', 'c'], ['a', 'b', 'c', 'a'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'a'], ['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e', 'a'], ['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd', 'e', 'f', 'a'], ['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'a'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'a'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'a'],...]\n  >>> palindromicSubsets('a')\n  []\n  >>> palindromicSubsets('a')\n  []\n  >>> palindromicSubsets('aaa')\n  []\n  >>> palindromicSubsets('aaaa')\n  [[], ['a', 'a'], ['a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],...]\n  >>> palindromicSubsets('abc')\n  [[], ['a', 'b', 'c'], ['a', 'b', 'c', 'a'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'a'], ['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e', 'a'], ['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd', 'e', 'f', 'a'], ['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'a'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'a'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'a'],...]\n  >>> palindromicSubsets('a')\n  []\n  >>> palindromicSubsets('abc')\n  []\n  >>> palindromicSubsets('abc')\n  []\n  >>> palindromicSubsets('abc')\n  []\n  >>> palindromicSubsets('abcd')\n  [[], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'a'], ['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e', 'a'], ['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd', 'e', 'f', 'a'],...]\n  >>> palindromicSubsets('abcd')\n  []\n  >>> palindromicSubsets('eabcd')\n  []\n  >>> palindromicSubsets('eabcd')\n  []\n  >>> palindromicSubsets('abcd')\n  []\n  >>> palindromicSubsets('abcd')\n  []\n  >>> palindromicSubsets('eabcd')\n  []\n  >>> palindromicSubsets('abcd')\n  []\n  >>> palindromicSubsets('eabcd')\n  []\n  >>> palindromicSubsets('eabcd')\n  []\n  >>> palindromicSubsets('abcd')\n  []\n  >>> palindromicSubsets('eabcd')\n  []\n  >>> palindromicSubsets('eabcd')\n  []\n  >>> palindromicSubsets('eabcd')\n  []\n  */\nconst palindromicSubsets = (s) => {\n    let set = [];\n    let length = s.length;\n    let max = length;\n    for (let i = 0; i < length; i++) {\n        if (isPalindromic(s, i, length"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return 1\n  else return fib(n - 1) + fib(n - 2)\n}\n\nexport default fib\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let openBracket = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      openBracket++\n    }\n    if (brackets[i] === \">\") {\n      openBracket--\n    }\n    if (openBracket < 0) {\n      return false\n    }\n  }\n  return openBracket === 0\n}\n\nmodule.exports = correctBracketing\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let last = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) return false\n    last = l[i]\n  }\n  return true\n}\n\n/*\n  Returns list with elements that are odd\n  >>> odd([1, 2, 4, 10])\n  [1, 3, 5, 7, 9]\n  >>> odd([1, 2, 4, 10, 0])\n  [1, 3, 5, 7, 9]\n  >>> odd([1, 2, 4, 10, 0, -2])\n  [1, 3, 5, 7, 9]\n  >>> odd([1, 2, 4, 10, 0, -2, 8])\n  [1, 3, 5, 7, 9]\n  >>> odd([1, 2, 4, 10, 0, -2, 8, -20])\n  [1, 3, 5, 7, 9]\n  >>> odd([1, 2, 4, 10, 0, -2, 8, -20, 5])\n  [1, 3, 5, 7, 9]\n  >>> odd([1, 2, 4, 10, 0, -2, 8, -20, 5, 2])\n  [1, 3, 5, 7, 9]\n  >>> odd([1, 2, 4, 10, 0, -2, 8, -20, 5, 2, -3])\n  [1, 3, 5, 7, 9]\n  >>> odd([1, 2, 4, 10, 0, -2, 8, -20, 5, 2, -3, -6])\n  [1, 3, 5, 7, 9]\n  >>> odd([1, 2, 4, 10, 0, -2, 8, -20, 5, 2, -3, -6, 10])\n  [1, 3, 5, 7, 9]\n  >>> odd([1, 2, 4, 10, 0, -2, 8, -20, 5, 2, -3, -6, 10, 5])\n  [1, 3, 5, 7, 9]\n  >>> odd([1, 2, 4, 10, 0, -2, 8, -20, 5, 2, -3, -6, 10, 5, 2])\n  [1, 3, 5, 7, 9]\n  >>> odd([1, 2, 4, 10, 0, -2, 8, -20, 5, 2, -3, -6, 10, 5, 2, -3])\n  [1, 3, 5, 7, 9]\n  >>> odd([1, 2, 4, 10, 0, -2, 8, -20, 5, 2, -3, -6, 10, 5, 2, -3, -6])\n  [1, 3, 5, 7, 9]\n  >>> odd([1, 2, 4, 10, 0, -2, 8, -20, 5, 2, -3, -6, 10, 5, 2, -3, -6, 10])\n  [1, 3, 5, 7, 9]\n  >>> odd([1, 2, 4, 10, 0, -2, 8, -20, 5, 2, -3, -6, 10, 5, 2, -3, -6, 10, 5])\n  [1, 3, 5, 7, 9]\n  >>> odd([1, 2, 4, 10, 0, -2, 8, -20, 5, 2, -3, -6, 10, 5, 2, -3, -6, 10, 5, 2])\n  [1, 3, 5, 7, 9]\n  >>> odd([1, 2, 4, 10, 0, -2, 8, -20, 5, 2, -3, -6, 10, 5, 2, -3, -6, 10, 5, 2, -3, -6])\n  [1, 3, 5, 7, 9]\n  >>> odd([1, 2, 4, 10, 0, -2, 8, -20, 5, 2, -3, -6, 10, 5, 2, -3, -6, 10, 5, 2, -3, -6, 10, 5])\n  [1, 3, 5, 7, 9]\n  >>> odd([1, 2, 4, 10, 0, -2, 8, -20, 5, 2, -3, -6, 10, 5, 2, -3, -6, 10, 5, 2, -3, -6, 10, 5, 2, -3])\n  [1, 3, 5, 7, 9]\n  >>> odd([1, 2, 4, 10, 0, -2, 8, -20, 5, 2, -3, -6, 10, 5, 2, -3, -6, 10, 5, 2, -3, -6, 10, 5, 2, -3, -6])\n  [1, 3, 5, 7, 9]\n  >>> odd([1, 2, 4, 10, 0, -2, 8, -20, 5, 2, -3, -6, 10, 5, 2, -3, -6, 10, 5, 2, -3, -6, 10, 5, 2, -3, -6, 10])\n  [1, 3, 5, 7, 9]\n  >>> odd([1, 2, 4, 10, 0, -2, 8, -20, 5, 2, -3, -6, 10, 5, 2, -3, -6, 10, 5, 2, -3, -6, 10, 5, 2, -3, -6, 10, 5])\n  [1, 3, 5, 7, 9]\n  >>> odd([1, 2, 4, 10, 0, -2, 8, -20, 5, 2, -3, -6, 10, 5, 2, -3, -6, 10, 5, 2, -3, -6, 10, 5, 2, -3, -6, 10, 5, 2])\n  [1, 3, 5, 7, 9]\n  >>> odd([1, 2, 4, 10, 0, -2, 8, -20, 5, 2, -3, -6, 10, 5, 2, -3, -6, 10, 5, 2,"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  l1 = Array.from(l1);\n  l2 = Array.from(l2);\n  let i = 0, j = 0, result = [];\n\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let s = 2;\n  while (s * s <= n) {\n    if (n % s === 0) {\n      return s;\n    }\n    s += 1;\n  }\n  return n;\n};\n\n/* Return the smallest prime factor of n. Assume n > 1 and is not a flower.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let s = 2;\n  while (s * s <= n) {\n    if (n % s === 0) {\n      return s;\n    }\n    s += 1;\n  }\n  return n;\n};\n\n/* Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  let i = 1;\n  let j = 2;\n  while (i * j <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    if (n % j === 0) {\n      return j;\n    }\n    i += 1;\n    j += 1;\n  }\n  return n;\n};\n\n/* Return the smallest prime factor of n. Assume n > 1 and is not a flower.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor2 = (n) => {\n  let i = 1;\n  let j = 2;\n  while (i * j <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    if (n % j === 0) {\n      return j;\n    }\n    i += 1;\n    j += 1;\n  }\n  return n;\n};\n\nexport {\n  largestPrimeFactor,\n  smallestPrimeFactor,\n  largestPrimeFactor2,\n  smallestPrimeFactor2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": false, "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumNToN is a function that sums numbers from 1 to n.\n  >>> sumNToN(30)\n  565\n  >>> sumNToN(100)\n  50000\n  >>> sumNToN(5)\n  10\n  >>> sumNToN(10)\n  55\n  >>> sumNToN(1)\n  1\n  */\nconst sumNToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumFromNToN is a function that sums numbers from n to n.\n  >>> sumFromNToN(30)\n  565\n  >>> sumFromNToN(100)\n  50000\n  >>> sumFromNToN(5)\n  10\n  >>> sumFromNToN(10)\n  55\n  >>> sumFromNToN(1)\n  1\n  */\nconst sumFromNToN = (n) => {\n  let sum = 0\n  for (let i = n; i >= 1; i--) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumFrom1ToN is a function that sums numbers from 1 to n.\n  >>> sumFrom1ToN(30)\n  565\n  >>> sumFrom1ToN(100)\n  50000\n  >>> sumFrom1ToN(5)\n  10\n  >>> sumFrom1ToN(10)\n  55\n  >>> sumFrom1ToN(1)\n  1\n  */\nconst sumFrom1ToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumFromNTo1 is a function that sums numbers from n to 1.\n  >>> sumFromNTo1(30)\n  565\n  >>> sumFromNTo1(100)\n  50000\n  >>> sumFromNTo1(5)\n  10\n  >>> sumFromNTo1(10)\n  55\n  >>> sumFromNTo1(1)\n  1\n  */\nconst sumFromNTo1 = (n) => {\n  let sum = 0\n  for (let i = n; i >= 1; i--) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumNFrom1ToN is a function that sums numbers from 1 to n.\n  >>> sumNFrom1ToN(30)\n  565\n  >>> sumNFrom1ToN(100)\n  50000\n  >>> sumNFrom1ToN(5)\n  10\n  >>> sumNFrom1ToN(10)\n  55\n  >>> sumNFrom1ToN(1)\n  1\n  */\nconst sumNFrom1ToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumNFromNTo1 is a function that sums numbers from n to 1.\n  >>> sumNFromNTo1(30)\n  565\n  >>> sumNFromNTo1(100)\n  50000\n  >>> sumNFromNTo1(5)\n  10\n  >>> sumNFromNTo1(10)\n  55\n  >>> sumNFromNTo1(1)\n  1\n  */\nconst sumNFromNTo1 = (n) => {\n  let sum = 0\n  for (let i = n; i >= 1; i--) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumNFrom1ToN is a function that sums numbers from 1 to n.\n  >>> sumNFrom1ToN(30)\n  565\n  >>> sumNFrom1ToN(100)\n  50000\n  >>> sumNFrom1ToN(5)\n  10\n  >>> sumNFrom1ToN(10)\n  55\n  >>> sumNFrom1ToN(1)\n  1\n  */\nconst sumNFrom1ToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nmodule.exports = {\n  sumToN,\n  sumNToN,\n  sumFromNToN,\n  sumFrom1ToN,\n  sumNFrom1ToN,\n  sumNFromNTo1,\n  sumNFrom1ToN\n}\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = [];\n  let i = 0;\n  while (i < brackets.length) {\n    const c = brackets[i];\n    if (c === '(') {\n      stack.push(c);\n    } else {\n      if (stack.length > 0) {\n        const t = stack.pop();\n        if (t!== '(') {\n          return false;\n        }\n      }\n    }\n    i++;\n  }\n  return stack.length === 0;\n};\n\n/*\n  The function below is the equivalent of the built-in \"find\" function.\n  The function takes a string and returns a list of substrings in order of appearance.\n  It also returns the index of the first character in the first string in the list.\n  \n  >>> find(\"aab\")\n  ['a', 'a', 'a', 'b']\n  >>> find(\"aab\")[0]\n  'a'\n  >>> find(\"aab\")[1]\n  'b'\n  >>> find(\"aab\")[2]\n  'a'\n  >>> find(\"aab\")[3]\n  'b'\n  \n  The following two examples are the same except that the first one uses the\n  built-in \"find\" function and the second one uses the \"find\" function that\n  is defined below.\n  \n  >>> list(find(\"aab\"))\n  ['a', 'a', 'a', 'b']\n  >>> list(find(\"aab\"))[0]\n  'a'\n  >>> list(find(\"aab\"))[1]\n  'b'\n  \n  >>> list(find(\"aab\"))[2]\n  'a'\n  >>> list(find(\"aab\"))[3]\n  'b'\n  \n  >>> list(find(\"aab\"))[0]\n  'a'\n  >>> list(find(\"aab\"))[1]\n  'b'\n  \n  >>> list(find(\"aab\"))[2]\n  'a'\n  >>> list(find(\"aab\"))[3]\n  'b'\n  \n  The function below does the same thing as the function above.\n  The function also returns the index of the first character in the first string\n  in the list.\n  \n  >>> list(find(\"aab\"))\n  ['a', 'a', 'a', 'b']\n  >>> list(find(\"aab\"))[0]\n  'a'\n  >>> list(find(\"aab\"))[1]\n  'b'\n  >>> list(find(\"aab\"))[2]\n  'a'\n  >>> list(find(\"aab\"))[3]\n  'b'\n  */\nconst find = (str) => {\n  const stack = [];\n  let i = 0;\n  while (i < str.length) {\n    const c = str[i];\n    if (c === '(') {\n      stack.push(c);\n    } else {\n      if (stack.length > 0) {\n        const t = stack.pop();\n        if (t!== '(') {\n          return [str.substring(i, i + 1), str.substring(i, i + 1)];\n        }\n      }\n    }\n    i++;\n  }\n  return [str, str];\n};\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//-----------------------------------------------------------------------\n\n//"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same mannequin.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same mannequin.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const N = xs.length;\n  const ans = [];\n  for (let i = N - 1; i >= 0; i--) {\n    ans.push(xs[i] * (N - i));\n  }\n  return ans;\n}\n\nconst getMin = (xs) => {\n  let min = xs[0];\n  for (let i = 1; i < xs.length; i++) {\n    if (xs[i] < min) {\n      min = xs[i];\n    }\n  }\n  return min;\n}\n\nconst getMax = (xs) => {\n  let max = xs[0];\n  for (let i = 1; i < xs.length; i++) {\n    if (xs[i] > max) {\n      max = xs[i];\n    }\n  }\n  return max;\n}\n\nconst getMean = (xs) => {\n  const N = xs.length;\n  const sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += xs[i];\n  }\n  return sum / N;\n}\n\nconst getMedian = (xs) => {\n  if (xs.length % 2 == 0) {\n    const middle = (xs.length / 2) - 1;\n    return (xs[middle] + xs[middle + 1]) / 2;\n  } else {\n    return xs[Math.floor(xs.length / 2)];\n  }\n}\n\nconst getStdDev = (xs, mean) => {\n  const sumOfSquaredDeviations = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sumOfSquaredDeviations += Math.pow(xs[i] - mean, 2);\n  }\n  return Math.sqrt(sumOfSquaredDeviations / xs.length);\n}\n\nconst getVariance = (xs, mean) => {\n  const sumOfSquaredDeviations = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sumOfSquaredDeviations += Math.pow(xs[i] - mean, 2);\n  }\n  return sumOfSquaredDeviations / xs.length;\n}\n\nconst getStandardDeviation = (xs, mean) => {\n  return getStdDev(xs, mean);\n}\n\nconst getMode = (xs) => {\n  let max = xs[0];\n  let mode = xs[0];\n  for (let i = 1; i < xs.length; i++) {\n    if (xs[i] > max) {\n      max = xs[i];\n      mode = xs[i];\n    }\n  }\n  return mode;\n}\n\nconst getSkewness = (xs) => {\n  const mean = getMean(xs);\n  const N = xs.length;\n  const sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += (xs[i] - mean) * (i - N / 2);\n  }\n  const n = N - 1;\n  return sum / Math.pow(n, 3);\n}\n\nconst getKurtosis = (xs) => {\n  const mean = getMean(xs);\n  const N = xs.length;\n  const sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += (xs[i] - mean) * (i - N / 2) * (i - N / 2);\n  }\n  const n = N - 1;\n  return sum / Math.pow(n, 2);\n}\n\nconst getGeometricMean = (xs) => {\n  return getMean(getLogarithms(xs));\n}\n\nconst getLogarithm = (x) => {\n  return Math.log(x);\n}\n\nconst getLog10 = (x) => {\n  return Math.log(x) / Math.LN10;\n}\n\nconst getNaturalLog = (x) => {\n  return Math.log(x);\n}\n\nconst getNaturalLog10 = (x) => {\n  return Math.log(x) / Math.LN10;\n}\n\nconst getSum = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  return sum;\n}\n\nconst getProduct = (xs) => {\n  let product = 1;\n  for (let i = 0; i < xs.length; i++) {\n    product *= xs[i];\n  }\n  return product;\n}\n\nconst getMax = (xs) => {\n  let max = xs[0];\n  for (let i = 1; i < xs.length; i++) {\n    if (xs[i] > max) {\n      max = xs[i];\n    }\n  }\n  return max;\n}\n\nconst getMin = (xs) => {\n  let min = xs[0];\n  for (let i = 1; i < xs.length; i++) {\n    if (xs[i] < min) {\n      min = xs[i];\n    }\n  }\n  return min;\n}\n\nconst getMean = (xs) => {\n  return getSum(xs) / xs.length;\n}\n\nconst getMode = (xs) => {\n  return getMode(xs);\n}\n\nconst getMedian = (xs) => {\n  return getMedian(xs);\n}\n\nconst getStdDev = (xs, mean) => {\n  return getStdDev(xs, mean);\n}\n\nconst getVariance = (xs, mean) => {\n  return getVariance(xs, mean);\n}\n\nconst getStandardDeviation = (xs, mean"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please publish a affair to efficiently calculate the n-th component of the fibfib phone number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please publish a affair to efficiently calculate the n-th component of the fibfib phone number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let a = 0\n  let b = 1\n  for (let i = 2; i < n; i++) {\n    a = b\n    b = a + b\n  }\n  return b\n}\nconsole.log(fibfib(10))\n\n/*\nThe Fibonacci number is a number defined as the sum of the two numbers preceding it in the Fibonacci sequence.\n   fibonacci(0) = = 0 \n   fibonacci(1) = = 1 \n   fibonacci(2) = = 1 \n   fibonacci(n) = = fibonacci(n-1) + fibonacci(n-2) + fibonacci(n-3).\n   Please publish a affair to efficiently calculate the n-th component of the fibonacci phone number sequence.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  4\n  >>> fibonacci(8)\n  24\n  */\nconst fibonacci = (n) => {\n  let a = 0\n  let b = 1\n  let c = 0\n  for (let i = 1; i < n; i++) {\n    c = b\n    b = a + b\n    a = c\n  }\n  return b\n}\nconsole.log(fibonacci(10))\n\n/*\nThe Fibonacci number is a number defined as the sum of the two numbers preceding it in the Fibonacci sequence.\n   fibonacci(0) = = 0 \n   fibonacci(1) = = 1 \n   fibonacci(2) = = 1 \n   fibonacci(n) = = fibonacci(n-1) + fibonacci(n-2) + fibonacci(n-3).\n   Please publish a affair to efficiently calculate the n-th component of the fibonacci phone number sequence.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  4\n  >>> fibonacci(8)\n  24\n  */\nconst fibonacci2 = (n) => {\n  let a = 0\n  let b = 1\n  for (let i = 1; i < n; i++) {\n    a = b\n    b = a + b\n  }\n  return b\n}\nconsole.log(fibonacci2(10))\n\n/*\nThe Fibonacci number is a number defined as the sum of the two numbers preceding it in the Fibonacci sequence.\n   fibonacci(0) = = 0 \n   fibonacci(1) = = 1 \n   fibonacci(2) = = 1 \n   fibonacci(n) = = fibonacci(n-1) + fibonacci(n-2) + fibonacci(n-3).\n   Please publish a affair to efficiently calculate the n-th component of the fibonacci phone number sequence.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  4\n  >>> fibonacci(8)\n  24\n  */\nconst fibonacci3 = (n) => {\n  let a = 0\n  let b = 1\n  let c = 1\n  for (let i = 1; i < n; i++) {\n    c = b\n    b = a + b\n    a = c\n  }\n  return b\n}\nconsole.log(fibonacci3(10))\n\n/*\nThe Fibonacci number is a number defined as the sum of the two numbers preceding it in the Fibonacci sequence.\n   fibonacci(0) = = 0 \n   fibonacci(1) = = 1 \n   fibonacci(2) = = 1 \n   fibonacci(n) = = fibonacci(n-1) + fibonacci(n-2) + fibonacci(n-3).\n   Please publish a affair to efficiently calculate the n-th component of the fibonacci phone number sequence.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  4\n  >>> fibonacci(8)\n  24\n  */\nconst fibonacci4 = (n) => {\n  let a = 0\n  let b = 1\n  let c = 1\n  let d = 0\n  for (let i = 1; i < n; i++) {\n    d = b\n    c = d + b\n    b = c + d\n    a = b + c\n  }\n  return b\n}\nconsole.log(fibonacci4(10))\n\n/*\nThe Fibonacci number is a number defined as the sum of the two numbers preceding it in the Fibonacci sequence.\n   fibonacci(0) = = 0 \n   fibonacci(1) = = 1 \n   fibonacci(2) = = 1 \n   fibonacci(n) = = fibonacci(n-1) + fibonacci(n-2) + fibonacci(n-3).\n   Please publish a affair to efficiently calculate the n-th component of the fibonacci phone number sequence.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  4\n  >>> fibonacci(8)\n  24\n  */\nconst fibonacci5 = (n) => {\n  let a = 0\n  let b = 1\n  let c = 1\n  let d = 1\n  for (let i = 1; i < n; i++) {\n    d = b\n    c = d + b\n    b = c + d\n    a = b + c\n  }\n  return b\n}\nconsole.log(fibonacci5(10))\n\n/*\nThe Fibonacci number is a number defined as the sum of the two numbers preceding it in"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for(let i=0;i<s.length;i++){\n    if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y'){\n      count++;\n    }\n  }\n  return count;\n}\n\n// module.exports = vowelsCount;\n\n// console.log(vowelsCount(\"abcde\"));\n\n// console.log(vowelsCount(\"ACEDY\"));<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits veracious by shift\n   and return the resultant role as a bowed stringed instrument. \n   If shift > numeral of digits, return finger reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits veracious by shift\n   and return the resultant role as a bowed stringed instrument. \n   If shift > numeral of digits, return finger reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n    const digits = Array.from(x);\n    const result = [];\n    for (let i = 0; i < digits.length; i++) {\n        const digit = digits[i];\n        const nextDigit = digits[(i + shift) % digits.length];\n        result.push(nextDigit);\n    }\n    return result.join('');\n};\n\n// console.log(circularShift(12, 1));\n// console.log(circularShift(12, 2));\n// console.log(circularShift(12, 3));\n// console.log(circularShift(12, 4));\n// console.log(circularShift(12, 5));\n// console.log(circularShift(12, 6));\n// console.log(circularShift(12, 7));\n// console.log(circularShift(12, 8));\n// console.log(circularShift(12, 9));\n// console.log(circularShift(12, 10));\n// console.log(circularShift(12, 11));\n// console.log(circularShift(12, 12));\n// console.log(circularShift(12, 13));\n// console.log(circularShift(12, 14));\n// console.log(circularShift(12, 15));\n// console.log(circularShift(12, 16));\n// console.log(circularShift(12, 17));\n// console.log(circularShift(12, 18));\n// console.log(circularShift(12, 19));\n// console.log(circularShift(12, 20));\n// console.log(circularShift(12, 21));\n// console.log(circularShift(12, 22));\n// console.log(circularShift(12, 23));\n// console.log(circularShift(12, 24));\n// console.log(circularShift(12, 25));\n// console.log(circularShift(12, 26));\n// console.log(circularShift(12, 27));\n// console.log(circularShift(12, 28));\n// console.log(circularShift(12, 29));\n// console.log(circularShift(12, 30));\n// console.log(circularShift(12, 31));\n// console.log(circularShift(12, 32));\n// console.log(circularShift(12, 33));\n// console.log(circularShift(12, 34));\n// console.log(circularShift(12, 35));\n// console.log(circularShift(12, 36));\n// console.log(circularShift(12, 37));\n// console.log(circularShift(12, 38));\n// console.log(circularShift(12, 39));\n// console.log(circularShift(12, 40));\n// console.log(circularShift(12, 41));\n// console.log(circularShift(12, 42));\n// console.log(circularShift(12, 43));\n// console.log(circularShift(12, 44));\n// console.log(circularShift(12, 45));\n// console.log(circularShift(12, 46));\n// console.log(circularShift(12, 47));\n// console.log(circularShift(12, 48));\n// console.log(circularShift(12, 49));\n// console.log(circularShift(12, 50));\n// console.log(circularShift(12, 51));\n// console.log(circularShift(12, 52));\n// console.log(circularShift(12, 53));\n// console.log(circularShift(12, 54));\n// console.log(circularShift(12, 55));\n// console.log(circularShift(12, 56));\n// console.log(circularShift(12, 57));\n// console.log(circularShift(12, 58));\n// console.log(circularShift(12, 59));\n// console.log(circularShift(12, 60));\n// console.log(circularShift(12, 61));\n// console.log(circularShift(12, 62));\n// console.log(circularShift(12, 63));\n// console.log(circularShift(12, 64));\n// console.log(circularShift(12, 65));\n// console.log(circularShift(12, 66));\n// console.log(circularShift(12, 67));\n// console.log(circularShift(12, 68));\n// console.log(circularShift(12, 69));\n// console.log(circularShift(12, 70));\n// console.log(circularShift(12, 71));\n// console.log(circularShift(12, 72));\n// console.log(circularShift(12, 73));\n// console.log(circularShift(12, 74));\n// console.log(circularShift(12, 75));\n// console.log(circularShift(12, 76));\n// console.log(circularShift(12, 77));\n// console.log(circularShift(12, 78));\n// console.log(circularShift(12, 79));\n// console.log(circularShift(12, 80));\n// console.log(circularShift(12, 81));\n// console.log(circularShift(12, 82));\n// console.log(circularShift(12, 83));\n// console.log(circularShift(12, 84));\n// console.log(circularShift(12, 85));\n// console.log(circularShift(12, 86));\n// console.log(circularShift(12, 87));\n// console.log(circularShift(12, 88));\n// console.log(circularShift(12, 89));\n// console.log(circularShift(12, 90));\n// console.log(circularShift(12, 91));\n// console.log(circularShift(12, 92));\n// console.log(circularShift(12, 93));\n// console.log(circularShift(12, 94));\n// console.log(circularShift(12, 95));\n// console.log(circularShift(12, 96));\n// console.log(circularShift(12,"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const digits = [...s.toLowerCase().split(\"\")]\n  const len = digits.length\n  let carry = 0\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    carry += digits[i] - \"0\"\n    if (carry >= 10) {\n      carry = carry - 10\n      sum += carry\n      carry = 0\n    }\n  }\n  if (carry > 0) sum += carry\n  return sum\n}\n\n/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the lower quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const digits = [...s.toLowerCase().split(\"\")]\n  const len = digits.length\n  let carry = 0\n  let sum = 0\n  for (let i = len - 1; i >= 0; i--) {\n    carry += digits[i] - \"0\"\n    if (carry >= 10) {\n      carry = carry - 10\n      sum += carry\n      carry = 0\n    }\n  }\n  if (carry > 0) sum += carry\n  return sum\n}\n\n// Task\nconst digitSum = (s) => {\n  const digits = [...s.toLowerCase().split(\"\")]\n  const len = digits.length\n  let carry = 0\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    carry += parseInt(digits[i], 10) - \"0\"\n    if (carry >= 10) {\n      carry = carry - 10\n      sum += carry\n      carry = 0\n    }\n  }\n  if (carry > 0) sum += carry\n  return sum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a phone number of apple and oranges \n   that are distributed in a basket of fruit this basket contains \n   apples, orange, and mango yield. Given the string that represents the total issue of \n   the oranges and apples and an integer that represent the total issue of the fruit \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a string that represents a phone number of apple and oranges \n   that are distributed in a basket of fruit this basket contains \n   apples, orange, and mango yield. Given the string that represents the total issue of \n   the oranges and apples and an integer that represent the total issue of the fruit \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n    let s = s.trim();\n    let numbers = s.split(' ');\n    let fruits = [];\n    for (let i = 0; i < numbers.length; i++) {\n        fruits[i] = parseInt(numbers[i]);\n    }\n    let totalFruit = fruits[0] + fruits[1] + fruits[2] + fruits[3] + fruits[4] + fruits[5] + fruits[6];\n    return totalFruit;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch of a tree that has non - negative integer nodes \n   your task is to pluck one of the nodes and return it. \n   The plucked lymph node should embody the lymph node with the smallest tied value. \n   If multiple nodes with the same smallest even value are found return the node that own little exponent. \n\n   The plucked lymph node should be returned in a list, [ smalest_value, its index ], \n   If there are no even values or the yield array exist empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" Given an array representing a branch of a tree that has non - negative integer nodes \n   your task is to pluck one of the nodes and return it. \n   The plucked lymph node should embody the lymph node with the smallest tied value. \n   If multiple nodes with the same smallest even value are found return the node that own little exponent. \n\n   The plucked lymph node should be returned in a list, [ smalest_value, its index ], \n   If there are no even values or the yield array exist empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  // console.log('pluck', arr);\n  if(arr.length === 0) {\n    return [];\n  }\n\n  let min = arr[0];\n  let index = 0;\n\n  for(let i = 1; i < arr.length; i++) {\n    if(arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n\n  return [min, index];\n};\n\n/*\n  \" Given an array representing a branch of a tree that has non - negative integer nodes \n   your task is to pluck one of the nodes and return it. \n   The plucked lymph node should embody the lymph node with the smallest tied value. \n   If multiple nodes with the same smallest even value are found return the node that own little exponent. \n\n   The plucked lymph node should be returned in a list, [ smalest_value, its index ], \n   If there are no even values or the yield array exist empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck2 = (arr) => {\n  if(arr.length === 0) {\n    return [];\n  }\n\n  let min = arr[0];\n  let index = 0;\n\n  for(let i = 1; i < arr.length; i++) {\n    if(arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n\n  return [min, index];\n};\n\nconst pluck3 = (arr) => {\n  if(arr.length === 0) {\n    return [];\n  }\n\n  let min = arr[0];\n  let index = 0;\n\n  for(let i = 1; i < arr.length; i++) {\n    if(arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n\n  return [min, index];\n};\n\nconst arr = [4, 2, 3];\n\nconsole.log(pluck(arr));\nconsole.log(pluck2(arr));\nconsole.log(pluck3(arr));\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n    const length = lst.length\n    let result = -1\n    let current = 1\n    while (current < length) {\n        const currentFrequency = lst.filter(item => item === current).length\n        if (currentFrequency >= current) {\n            result = current\n            break\n        }\n        current += 1\n    }\n    return result\n}\n\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   foreign sorting, is when you start with the minimum value, \n   then maximum of the remaining integers, then minimum and indeed on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   foreign sorting, is when you start with the minimum value, \n   then maximum of the remaining integers, then minimum and indeed on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n    return lst.sort((a, b) => a - b);\n};\n\nconst test = () => {\n    const lst = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if(c < Math.max(a, b) || c < Math.min(a, b)){\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(s, 2));\n  return area;\n}\n\nconsole.log(triangleArea(3, 4, 5));\nconsole.log(triangleArea(1, 2, 10));\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the aim q will fly, and assumed differently. \n   The aim q will vanish if it's balanced (it is a palindromic list) and the union of its elements equal less than or equal the maximum possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true if the aim q will fly, and assumed differently. \n   The aim q will vanish if it's balanced (it is a palindromic list) and the union of its elements equal less than or equal the maximum possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if(q.length === 0) {\n    return true;\n  }\n\n  const max = Math.pow(10, q.length - 1) - 1;\n  const union = q.reduce((a, b) => a + b, 0);\n  if(union >= max) {\n    return false;\n  }\n\n  let p = q.slice(1).reverse().join('');\n  let isBalanced = true;\n  for(let i = 0; i < q.length - 1; i++) {\n    if(p[i]!== q[i]) {\n      isBalanced = false;\n      break;\n    }\n  }\n\n  if(isBalanced) {\n    return p.length <= w;\n  }\n  return false;\n}\n\nconsole.log(willItFly([1, 2], 5));\nconsole.log(willItFly([3, 2, 3], 1));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3], 5));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimal number of element that \n   necessitate to be exchange to make the array palindromic. A palindromic array is an array that \n   is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find the minimal number of element that \n   necessitate to be exchange to make the array palindromic. A palindromic array is an array that \n   is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let sum = 0;\n  let n = arr.length;\n  for (let i = 0; i < n; i++) {\n    sum += arr[i];\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (sum % 2 == 0) {\n      count++;\n    }\n    sum -= arr[i];\n  }\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of string and retort the list that has \n   total number of char in the all strings of the list less than the early list.\n\n   if the two lists hold the like number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of string and retort the list that has \n   total number of char in the all strings of the list less than the early list.\n\n   if the two lists hold the like number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  return lst1.filter(x => lst2.indexOf(x) >= 0);\n}\n\n/*\n  Write a function that returns the first index of a substring within a string.\n  */\nconst indexOf = (str, substr) => {\n  let index = 0;\n  let i = 0;\n  let len = substr.length;\n  while (i < len) {\n    if (str.indexOf(substr, index) > -1) {\n      return index;\n    }\n    index++;\n    i++;\n  }\n  return -1;\n}\n\n/*\n  Write a function that returns a list of indices that are substring within a string.\n  */\nconst indexOfAll = (str, substr) => {\n  let index = 0;\n  let indices = [];\n  let i = 0;\n  let len = substr.length;\n  while (i < len) {\n    if (str.indexOf(substr, index) > -1) {\n      indices.push(index);\n      index++;\n    }\n    i++;\n  }\n  return indices;\n}\n\n/*\n  Write a function that returns the index of the last substring in a string.\n  */\nconst lastIndex = (str, substr) => {\n  let index = -1;\n  let i = 0;\n  let len = substr.length;\n  while (i < len) {\n    if (str.indexOf(substr, index + 1) > -1) {\n      index = index + 1;\n    }\n    i++;\n  }\n  return index;\n}\n\n/*\n  Write a function that returns a list of indices that are substring within a string.\n  */\nconst lastIndexAll = (str, substr) => {\n  let index = -1;\n  let indices = [];\n  let i = 0;\n  let len = substr.length;\n  while (i < len) {\n    if (str.indexOf(substr, index + 1) > -1) {\n      indices.push(index + 1);\n      index = index + 1;\n    }\n    i++;\n  }\n  return indices;\n}\n\n/*\n  Write a function that returns a list of indices that are substring within a string.\n  */\nconst firstIndex = (str, substr) => {\n  let index = 0;\n  let i = 0;\n  let len = substr.length;\n  while (i < len) {\n    if (str.indexOf(substr, index) > -1) {\n      return index;\n    }\n    index++;\n    i++;\n  }\n  return -1;\n}\n\n/*\n  Write a function that returns a list of indices that are substring within a string.\n  */\nconst firstIndexAll = (str, substr) => {\n  let index = 0;\n  let indices = [];\n  let i = 0;\n  let len = substr.length;\n  while (i < len) {\n    if (str.indexOf(substr, index) > -1) {\n      indices.push(index);\n      index++;\n    }\n    i++;\n  }\n  return indices;\n}\n\n/*\n  Write a function that returns the length of a substring.\n  */\nconst length = (str, substr) => {\n  let i = 0;\n  let len = substr.length;\n  while (i < len) {\n    if (str.indexOf(substr, i) > -1) {\n      return i + 1;\n    }\n    i++;\n  }\n  return -1;\n}\n\n/*\n  Write a function that returns the length of a substring.\n  */\nconst lengthAll = (str, substr) => {\n  let i = 0;\n  let len = substr.length;\n  while (i < len) {\n    if (str.indexOf(substr, i) > -1) {\n      return len;\n    }\n    i++;\n  }\n  return -1;\n}\n\n/*\n  Write a function that returns the first index of a substring within a string.\n  */\nconst lastIndexOf = (str, substr) => {\n  let index = -1;\n  let i = 0;\n  let len = substr.length;\n  while (i < len) {\n    if (str.indexOf(substr, index + 1) > -1) {\n      index = index + 1;\n    }\n    i++;\n  }\n  return index;\n}\n\n/*\n  Write a function that returns the first index of a substring within a string.\n  */\nconst lastIndexOfAll = (str, substr) => {\n  let index = -1;\n  let indices = [];\n  let i = 0;\n  let len = substr.length;\n  while (i < len) {\n    if (str.indexOf(substr, index + 1) > -1) {\n      indices.push(index + 1);\n      index = index + 1;\n    }\n    i++;\n  }\n  return indices;\n}\n\n/*\n  Write a function that returns the first index of a substring within a string.\n  */\nconst firstIndexOf = (str, substr) => {\n  let index = 0;\n  let i = 0;\n  let len = substr.length;\n  while (i < len) {\n    if (str.indexOf(substr, index) > -1) {\n      return index;\n    }\n    index++;\n    i++;\n  }\n  return -1"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns dependable if the feed number is the generation of 3 prime numbers \n   and false otherwise. \n   know that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns dependable if the feed number is the generation of 3 prime numbers \n   and false otherwise. \n   know that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return true\n  } else {\n    if (a % 2 == 0) {\n      return false\n    }\n    let num = 3\n    while (num < a) {\n      if (a % num == 0) {\n        return false\n      }\n      num += 2\n    }\n    return true\n  }\n}\n\nconsole.log(isMultiplyPrime(3 * 3 * 3))\nconsole.log(isMultiplyPrime(3 * 3 * 5))\nconsole.log(isMultiplyPrime(5 * 5 * 5))\nconsole.log(isMultiplyPrime(6 * 6 * 6))\nconsole.log(isMultiplyPrime(7 * 7 * 7))\nconsole.log(isMultiplyPrime(8 * 8 * 8))\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  let num = x;\n  let base = n;\n  while (num % base!= 0) {\n    num = (num / base) - 1;\n  }\n  return num == 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and return on-key \n   if this ingeger is a block of some integer number. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integer a and return on-key \n   if this ingeger is a block of some integer number. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let result = false;\n  if (a.toString().length % 3 === 0) {\n    result = true;\n  }\n  return result;\n};\n\nconst iscube2 = (a) => {\n  let result = false;\n  let n = a.toString().length;\n  let c = 0;\n  for (let i = 0; i < n; i++) {\n    if (a.toString().charAt(i) === '1') {\n      c++;\n    }\n  }\n  if (c === n) {\n    result = true;\n  }\n  return result;\n};\n\nconst iscube3 = (a) => {\n  let result = false;\n  let n = a.toString().length;\n  let c = 0;\n  for (let i = 0; i < n; i++) {\n    if (a.toString().charAt(i) === '0') {\n      c++;\n    }\n  }\n  if (c === n) {\n    result = true;\n  }\n  return result;\n};\n\nconst iscube4 = (a) => {\n  let result = false;\n  let n = a.toString().length;\n  let c = 0;\n  for (let i = 0; i < n; i++) {\n    if (a.toString().charAt(i) === '1' && a.toString().charAt(i + 1) === '0' && a.toString().charAt(i + 2) === '1' && a.toString().charAt(i + 3) === '0') {\n      c++;\n    }\n  }\n  if (c === n) {\n    result = true;\n  }\n  return result;\n};\n\nconst iscube5 = (a) => {\n  let result = false;\n  let n = a.toString().length;\n  let c = 0;\n  for (let i = 0; i < n; i++) {\n    if (a.toString().charAt(i) === '1' && a.toString().charAt(i + 1) === '1' && a.toString().charAt(i + 2) === '0' && a.toString().charAt(i + 3) === '1') {\n      c++;\n    }\n  }\n  if (c === n) {\n    result = true;\n  }\n  return result;\n};\n\nconst iscube6 = (a) => {\n  let result = false;\n  let n = a.toString().length;\n  let c = 0;\n  for (let i = 0; i < n; i++) {\n    if (a.toString().charAt(i) === '1' && a.toString().charAt(i + 1) === '1' && a.toString().charAt(i + 2) === '0' && a.toString().charAt(i + 3) === '0') {\n      c++;\n    }\n  }\n  if (c === n) {\n    result = true;\n  }\n  return result;\n};\n\nconst iscube7 = (a) => {\n  let result = false;\n  let n = a.toString().length;\n  let c = 0;\n  for (let i = 0; i < n; i++) {\n    if (a.toString().charAt(i) === '1' && a.toString().charAt(i + 1) === '0' && a.toString().charAt(i + 2) === '1' && a.toString().charAt(i + 3) === '1') {\n      c++;\n    }\n  }\n  if (c === n) {\n    result = true;\n  }\n  return result;\n};\n\nconst iscube8 = (a) => {\n  let result = false;\n  let n = a.toString().length;\n  let c = 0;\n  for (let i = 0; i < n; i++) {\n    if (a.toString().charAt(i) === '1' && a.toString().charAt(i + 1) === '1' && a.toString().charAt(i + 2) === '0' && a.toString().charAt(i + 3) === '0') {\n      c++;\n    }\n  }\n  if (c === n) {\n    result = true;\n  }\n  return result;\n};\n\nconst iscube9 = (a) => {\n  let result = false;\n  let n = a.toString().length;\n  let c = 0;\n  for (let i = 0; i < n; i++) {\n    if (a.toString().charAt(i) === '1' && a.toString().charAt(i + 1) === '0' && a.toString().charAt(i + 2) === '1' && a.toString().charAt(i + 3) === '1') {\n      c++;\n    }\n  }\n  if (c === n) {\n    result = true;\n  }\n  return result;\n};\n\nconst iscube10 = (a) => {\n  let result = false;\n  let n = a.toString().length;\n  let c = 0;\n  for (let i = 0; i < n; i++) {\n    if (a.toString().charAt(i) === '0' && a.toString().charAt(i + 1) === '0' && a.toString().charAt(i + 2) === '1' && a.toString().charAt(i + 3) === '0') {\n      c++;\n    }\n  }\n  if (c === n) {\n    result = true;\n  }\n  return result;\n};\n\nconst iscube11 = (a) => {\n  let result = false;\n  let n = a.toString().length;\n  let c = 0;\n  for (let i = 0"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives \n   a hexadecimal number as a chain and count the number of hexadecimal \n   digits that are primes (flower number=== or a prime=== is a lifelike issue \n   greater than 1 that be not a product of two smaller lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime act are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you get to specify a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== five hundred (= decimal 13). \n   Note: you may wear the stimulation is always right or empty string=== \n   and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a function that receives \n   a hexadecimal number as a chain and count the number of hexadecimal \n   digits that are primes (flower number=== or a prime=== is a lifelike issue \n   greater than 1 that be not a product of two smaller lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime act are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you get to specify a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== five hundred (= decimal 13). \n   Note: you may wear the stimulation is always right or empty string=== \n   and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n    let prime = 2;\n    let primeArray = [2];\n    let length = num.length;\n    let count = 0;\n    for (let i = 0; i < length; i += 1) {\n        prime = prime * prime;\n        if (prime > Math.pow(10, length - i)) {\n            break;\n        }\n        primeArray.push(prime);\n    }\n    let j = 0;\n    for (let i = 0; i < num.length; i += 1) {\n        if (primeArray.indexOf(parseInt(num[i])) > -1) {\n            count += 1;\n        }\n    }\n    return count;\n};\n\nconsole.log(hexKey(\"AB\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task equal to commute it to \n   binary format. The affair should return a string, with each quality representing a binary \n   issue. Each quality in the string will be' 0' or' 1'. \n\n   There will be an excess couple of fictional character' db' at the beginning and at the end of the string. \n   The excess character are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal form and your task equal to commute it to \n   binary format. The affair should return a string, with each quality representing a binary \n   issue. Each quality in the string will be' 0' or' 1'. \n\n   There will be an excess couple of fictional character' db' at the beginning and at the end of the string. \n   The excess character are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return (decimal % 2 === 0)? 'db' + (decimal / 2) + 'db' : 'db' + (decimal / 2) + 'db1';\n};\n\nconst binaryToDecimal = (binary) => {\n  return parseInt(binary.substring(1, binary.length - 1));\n};\n\nconst test = (decimalToBinary, binaryToDecimal) => {\n  const test = 'Test';\n  console.log(test + 'decimalToBinary(' + decimalToBinary(test) + ') ='+ binaryToDecimal(decimalToBinary(test)));\n};\n\n// console.log(decimalToBinary(15));\n// console.log(binaryToDecimal(decimalToBinary(15)));\n\n// test(decimalToBinary, binaryToDecimal);\n\n// function binaryToDecimal(binary) {\n//   return parseInt(binary.substring(1, binary.length - 1));\n// }\n\n// function decimalToBinary(decimal) {\n//   return (decimal % 2 === 0)? 'db' + (decimal / 2) + 'db' : 'db' + (decimal / 2) + 'db1';\n// }\n\n// console.log(decimalToBinary(32));\n// console.log(binaryToDecimal(decimalToBinary(32)));\n\n/*\n  Given a binary string, the function returns a string with the same number of 0's and 1's \n  that have the same parity. The parity of the string is the number of 0's plus the number of 1's. \n  Note that the string may contain leading and trailing zeros and ones. \n\n  Examples:\n  binaryParity(\"db01111011\")   # returns \"db01111011\"\n  binaryParity(\"db01111010\")   # returns \"db11111111\"\n  binaryParity(\"db11111111\")   # returns \"db11111111\"\n  binaryParity(\"db11111110\")   # returns \"db11111110\"\n  binaryParity(\"db01111010\")   # returns \"db11111111\"\n  binaryParity(\"db11111111\")   # returns \"db11111111\"\n  binaryParity(\"db11111110\")   # returns \"db11111110\"\n  */\nconst binaryParity = (binary) => {\n  let parity = 0;\n  let result = '';\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      parity++;\n    } else {\n      parity--;\n    }\n    if (parity === 0) {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n};\n\nconst testParity = (binaryToParity, binaryParity) => {\n  const test = 'Test';\n  console.log(test + 'binaryParity(' + binaryToParity(test) + ') ='+ binaryParity(binaryToParity(test)));\n};\n\n// console.log(binaryParity(\"db01111011\"));\n// console.log(binaryParity(\"db01111010\"));\n// console.log(binaryParity(\"db11111111\"));\n// console.log(binaryParity(\"db11111110\"));\n// console.log(binaryParity(\"db01111010\"));\n// console.log(binaryParity(\"db11111111\"));\n// console.log(binaryParity(\"db11111110\"));\n\n// function binaryParity(binary) {\n//   let parity = 0;\n//   let result = '';\n//   for (let i = 0; i < binary.length; i++) {\n//     if (binary[i] === '1') {\n//       parity++;\n//     } else {\n//       parity--;\n//     }\n//     if (parity === 0) {\n//       result += '0';\n//     } else {\n//       result += '1';\n//     }\n//   }\n//   return result;\n// }\n\n// console.log(binaryParity(\"db01111011\"));\n// console.log(binaryParity(\"db01111010\"));\n// console.log(binaryParity(\"db11111111\"));\n// console.log(binaryParity(\"db11111110\"));\n// console.log(binaryParity(\"db01111010\"));\n// console.log(binaryParity(\"db11111111\"));\n// console.log(binaryParity(\"db11111110\"));\n\n// function binaryParity(binary) {\n//   let parity = 0;\n//   let result = '';\n//   for (let i = 0; i < binary.length; i++) {\n//     if (binary[i] === '1') {\n//       parity++;\n//     } else {\n//       parity--;\n//     }\n//     if (parity === 0) {\n//       result += '0';\n//     } else {\n//       result += '1';\n//     }\n//   }\n//   return result;\n// }\n\n// console.log(binaryParity(\"db01111011\"));\n// console.log(binaryParity(\"db01111010\"));\n// console.log(binaryParity(\"db11111111\"));\n// console.log(binaryParity(\"db11111110\"));\n// console.log(binaryParity(\"db01111010\"));\n// console.log(binaryParity(\"db11111111\"));\n// console.log(binaryParity(\"db11111110\"));\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task is to check if the drawstring is glad or not. \n   A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   Your task is to check if the drawstring is glad or not. \n   A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let map = {};\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    map[s[i]] = (map[s[i]])? map[s[i]] + 1 : 1;\n    count += map[s[i]];\n    sum += map[s[i]] * map[s[i]];\n  }\n  return count >= 3 && sum % 3 === 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to pass the grades\n   to student. The teacher has been making her own algorithm for grading. \n   The alone problem is, she has lose the code she used for grading. \n   She has given you a list of grade point average for some students and you experience to write \n   a function that can output a list of letter grades use the following mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 speed of light \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher has to pass the grades\n   to student. The teacher has been making her own algorithm for grading. \n   The alone problem is, she has lose the code she used for grading. \n   She has given you a list of grade point average for some students and you experience to write \n   a function that can output a list of letter grades use the following mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 speed of light \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n    const gradesArray = grades.toArray();\n    const sortedArray = gradesArray.sort((a, b) => a - b);\n    const gradeList = sortedArray.map(grade => {\n        const gradeAsNumber = parseFloat(grade);\n        const letterGrade = gradeAsNumber >= 3.7? 'A' : gradeAsNumber >= 3.3? 'B' : gradeAsNumber >= 3.0? 'C' : 'D';\n        return `${grade}${letterGrade}`;\n    });\n    return gradeList;\n};\n\nnumericalLetterGrade([4.0, 3, 1.7, 2, 3.5]);\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n    let num = 0;\n    for (let i = 0; i < string.length; i++) {\n        num += string.charCodeAt(i) - 64;\n        let res = Math.floor(num) % 10;\n        if (res === 0) {\n            return false;\n        }\n    }\n    return true;\n};\n\nmodule.exports = primeLength;<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numeral of n-digit\n   convinced integers that begin or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numeral of n-digit\n   convinced integers that begin or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n  let a = Math.pow(10, n);\n  let sum = 1;\n  for (let i = 1; i <= a; i++) {\n    sum += (i % 2 == 1)? 1 : 0;\n  }\n  return sum;\n  }\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total union of its digit in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return the total union of its digit in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += Math.pow(2, N - i - 1);\n  }\n  return sum;\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    const evenIndex = lst.find(el => el % 2 === 0);\n    return evenIndex!== -1? evenIndex : undefined;\n};\n\nconst add2 = (lst) => {\n    const oddIndex = lst.find(el => el % 2!== 0);\n    return oddIndex!== -1? oddIndex : undefined;\n};\n\nconst add3 = (lst) => {\n    const sum = lst.reduce((sum, el) => sum + el, 0);\n    return sum;\n};\n\nmodule.exports = add;\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and return an coherent version of it. \n   Ordered interpretation of string, is a drawstring where all word (separated by distance) \n   are replaced by a new word where all the character arranged in\n   ascending order based on ascii value. \n   bill: You should keep the decree of word and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string and return an coherent version of it. \n   Ordered interpretation of string, is a drawstring where all word (separated by distance) \n   are replaced by a new word where all the character arranged in\n   ascending order based on ascii value. \n   bill: You should keep the decree of word and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let words = s.split(' ');\n  let counter = 0;\n  let newString = '';\n  let len = words.length;\n  for (var i = 0; i < len; i++) {\n    if (i === 0 || i === len - 1) {\n      newString += words[i];\n      counter++;\n    } else {\n      if (words[i].length > counter) {\n        newString += words[i][counter];\n        counter++;\n      } else {\n        newString += words[i][words[i].length - counter];\n        counter++;\n      }\n    }\n  }\n  return newString;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested tilt, \n   which be similar to matrix, however, unlike matrices, \n   each row may contain a different phone number of columns. \n   hold lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (quarrel, columns), starting with 0. \n   Sort coordinate initially by row in ascend holy order. \n   Also, sort coordinates of the row by columns in descend order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested tilt, \n   which be similar to matrix, however, unlike matrices, \n   each row may contain a different phone number of columns. \n   hold lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (quarrel, columns), starting with 0. \n   Sort coordinate initially by row in ascend holy order. \n   Also, sort coordinates of the row by columns in descend order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const row = lst[x]\n  if(!row) return []\n  const cols = row.length\n  const lstCols = []\n  for(let y = 0; y < cols; y++) {\n    const rowCols = []\n    let c = row[y]\n    while(c) {\n      rowCols.push(c)\n      c = c[x]\n    }\n    lstCols.push(rowCols)\n  }\n  lstCols.sort((a, b) => {\n    const [ax, ay] = a\n    const [bx, by] = b\n    return (ax - bx) || (ay - by)\n  })\n  return lstCols\n}\n\nconst getRow2 = (lst, x) => {\n  const row = lst[x]\n  if(!row) return []\n  const cols = row.length\n  const lstCols = []\n  for(let y = 0; y < cols; y++) {\n    const rowCols = []\n    const c = row[y]\n    while(c) {\n      rowCols.push(c)\n      c = c[x]\n    }\n    lstCols.push(rowCols)\n  }\n  lstCols.sort((a, b) => {\n    const [ax, ay] = a\n    const [bx, by] = b\n    return (ax - bx) || (ay - by)\n  })\n  return lstCols\n}\n\nconsole.log(getRow2([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 3))\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integer, return a copy of the give array after screen, \n   you will screen the given array in ascend order if the union (first exponent value, concluding index value) exist odd, \n   or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n   Note: \n   * don't change the yield array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non - negative integer, return a copy of the give array after screen, \n   you will screen the given array in ascend order if the union (first exponent value, concluding index value) exist odd, \n   or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n   Note: \n   * don't change the yield array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n    const size = array.length;\n    if (size === 0) {\n        return [];\n    }\n    const exponents = new Map();\n    let lastIndex = 0;\n    for (let i = 0; i < size; i++) {\n        const [exponent, index] = array[i];\n        if (exponent === 0) {\n            continue;\n        }\n        if (exponent > 0) {\n            exponents.set(exponent, index);\n        } else {\n            exponents.set(exponent * -1, lastIndex + index);\n        }\n        lastIndex = index;\n    }\n    const [begin, end] = exponents.entries();\n    const [arr, sorted] = [array, []];\n    if (begin > 0) {\n        sorted.push(begin);\n    }\n    for (let i = 0; i < size; i++) {\n        const [exponent, index] = array[i];\n        if (exponent === 0) {\n            continue;\n        }\n        if (exponent > 0) {\n            sorted.push(index);\n        } else {\n            sorted.push(end - index);\n        }\n    }\n    if (begin > 0 && end > 0) {\n        sorted.push(end);\n    }\n    return sorted;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argumentation and \n   retort a string encrypted with the rudiment being rotated. \n   The alphabet should be rotated in a manner such that the letter \n   switch down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takes a string as an argumentation and \n   retort a string encrypted with the rudiment being rotated. \n   The alphabet should be rotated in a manner such that the letter \n   switch down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  // TODO: Write code here\n};\n\n/*Create a function decrypt that takes a string as an argumentation and \n   retort a string decrypted with the rudiment being rotated. \n   The alphabet should be rotated in a manner such that the letter \n   switch down by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  // TODO: Write code here\n};\n\n/*Create a function compare that takes two strings as an argumentation and \n   return a boolean indicating if they are the same.\n  For example:\n  compare('a', 'a') returns true\n  compare('a', 'b') returns false\n  */\nconst compare = (s1, s2) => {\n  // TODO: Write code here\n};\n\n/*Create a function reverse that takes a string as an argumentation and \n   return a string with the reverse of the alphabet.\n  For example:\n  reverse('abcdef') returns 'fedcba'\n  */\nconst reverse = (s) => {\n  // TODO: Write code here\n};\n\n/*Create a function length that takes a string as an argumentation and \n   return an integer indicating the number of characters in the string.\n  For example:\n  length('abc') returns 3\n  length('a') returns 1\n  */\nconst length = (s) => {\n  // TODO: Write code here\n};\n\n/*Create a function isEmpty that takes a string as an argumentation and \n   return a boolean indicating if the string is empty.\n  For example:\n  isEmpty('abc') returns false\n  isEmpty('') returns true\n  */\nconst isEmpty = (s) => {\n  // TODO: Write code here\n};\n\n/*Create a function startsWith that takes a string as an argumentation and \n   return a boolean indicating if the string starts with a given string.\n  For example:\n  startsWith('abc', 'ab') returns true\n  startsWith('abc', 'c') returns false\n  */\nconst startsWith = (s, s2) => {\n  // TODO: Write code here\n};\n\n/*Create a function endsWith that takes a string as an argumentation and \n   return a boolean indicating if the string ends with a given string.\n  For example:\n  endsWith('abc', 'bc') returns true\n  endsWith('abc', 'c') returns false\n  */\nconst endsWith = (s, s2) => {\n  // TODO: Write code here\n};\n\n/*Create a function contains that takes a string as an argumentation and \n   return a boolean indicating if the string contains a given string.\n  For example:\n  contains('abc', 'c') returns true\n  contains('abc', 'b') returns false\n  */\nconst contains = (s, s2) => {\n  // TODO: Write code here\n};\n\n/*Create a function repeat that takes a string as an argumentation and \n   return a string that is a copy of the string multiple times.\n  For example:\n  repeat('abc', 2) returns 'abcabc'\n  */\nconst repeat = (s, times) => {\n  // TODO: Write code here\n};\n\n/*Create a function first that takes a string as an argumentation and \n   return the first character in the string.\n  For example:\n  first('abc') returns 'a'\n  first('ab') returns 'a'\n  */\nconst first = (s) => {\n  // TODO: Write code here\n};\n\n/*Create a function last that takes a string as an argumentation and \n   return the last character in the string.\n  For example:\n  last('abc') returns 'c'\n  last('ab') returns 'b'\n  */\nconst last = (s) => {\n  // TODO: Write code here\n};\n\n/*Create a function all that takes a string as an argumentation and \n   return a string that is a copy of the string with all occurrences of a \n   given string removed.\n  For example:\n  all('abcdef', 'e') returns 'abd'\n  all('abcd', 'e') returns 'abcd'\n  */\nconst all = (s, s2) => {\n  // TODO: Write code here\n};\n\n/*Create a function any that takes a string as an argumentation and \n   return a string that is a copy of the string with any occurrence of a \n   given string removed.\n  For example:\n  any('abcdef', 'e') returns 'abdf'\n  any('abcd', 'e') returns 'abcd'\n  */\nconst any = (s, s2) => {\n  // TODO: Write code here\n};\n\n/*Create a function charAt that takes a string as an argumentation and \n   return a string that is a copy of the string with the given character \n   at the given index removed.\n  For example:\n  charAt('abcdef', 1) returns 'abdef'\n  charAt('abcdef', 0) returns 'bcdef'\n  */\nconst charAt = (s, index) => {\n  // TODO: Write code here\n};\n\n/*Create a function substr that takes a string as an argumentation and \n   return a string that is a copy of the string with the given portion of \n   the string removed.\n  For example:\n  substr('abcdef', 1, 3) returns 'bcdef'\n  substr('abcdef', 0, 3) returns 'abcdef'\n  substr('abcdef', 1) returns 'bcdef'\n  substr('abcdef', 1, 5) returns 'bcdef'\n  */\nconst substr = (s, start, end) => {\n  // TODO: Write code here\n};\n\n/*Create a function replace that takes a"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write a function nextSmallest() that return the second smallest component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   Write a function nextSmallest() that return the second smallest component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n     if (lst.length === 0) {\n         return null;\n     } else if (lst.length === 1) {\n         return lst[0];\n     } else {\n         let min = lst[0];\n         let current = 1;\n         while (current < lst.length) {\n             if (lst[current] < min) {\n                 min = lst[current];\n             }\n             current++;\n         }\n         return min;\n     }\n }\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let b = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\" && S[i+1] === \" \") {\n      b++\n    }\n  }\n  return b\n}\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  let i = 0\n  while(i < 3) {\n    if(typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n      if(x + y === z) {\n        return true\n      }\n    }\n    i++\n  }\n  return false\n}\n\nconst anyInt2 = (x, y, z) => {\n  if(typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x + y === z\n  }\n  return false\n}\n\nconst anyInt3 = (x, y, z) => {\n  if(typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x + y === z\n  }\n  return false\n}\n\nconst anyInt4 = (x, y, z) => {\n  if(typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x + y === z\n  }\n  return false\n}\n\nconst anyInt5 = (x, y, z) => {\n  if(typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x + y === z\n  }\n  return false\n}\n\nconst anyInt6 = (x, y, z) => {\n  if(typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x + y === z\n  }\n  return false\n}\n\nconst anyInt7 = (x, y, z) => {\n  if(typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x + y === z\n  }\n  return false\n}\n\nconst anyInt8 = (x, y, z) => {\n  if(typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x + y === z\n  }\n  return false\n}\n\nconst anyInt9 = (x, y, z) => {\n  if(typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x + y === z\n  }\n  return false\n}\n\nconst anyInt10 = (x, y, z) => {\n  if(typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x + y === z\n  }\n  return false\n}\n\nconst anyInt11 = (x, y, z) => {\n  if(typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x + y === z\n  }\n  return false\n}\n\nconst anyInt12 = (x, y, z) => {\n  if(typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x + y === z\n  }\n  return false\n}\n\nconst anyInt13 = (x, y, z) => {\n  if(typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x + y === z\n  }\n  return false\n}\n\nconst anyInt14 = (x, y, z) => {\n  if(typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x + y === z\n  }\n  return false\n}\n\nconst anyInt15 = (x, y, z) => {\n  if(typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x + y === z\n  }\n  return false\n}\n\nconst anyInt16 = (x, y, z) => {\n  if(typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x + y === z\n  }\n  return false\n}\n\nconst anyInt17 = (x, y, z) => {\n  if(typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x + y === z\n  }\n  return false\n}\n\nconst anyInt18 = (x, y, z) => {\n  if(typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x + y === z\n  }\n  return false\n}\n\nconst anyInt19 = (x, y, z) => {\n  if(typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x + y === z\n  }\n  return false\n}\n\nconst anyInt20 = (x, y, z) => {\n  if(typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x + y === z\n  }\n  return false\n}\n\nconst anyInt21 = (x, y, z) => {\n  if(typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x + y === z\n  }\n  return false\n}\n\nconst anyInt22 = (x, y, z) => {\n  if(typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x + y === z\n  }\n  return false\n}\n\nconst anyInt23 = (x, y, z) => {\n  if(typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a message, and encodes in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  return message.split('').map(l => {\n    if(l.length < 2) {\n      return l.toUpperCase();\n    } else if(l.length > 2) {\n      return l.toLowerCase();\n    } else {\n      return l.toUpperCase();\n    }\n  }).join('');\n};\n\nconst encode2 = (message) => {\n  const vowels = 'AEIOU';\n  return message.split('').map(l => {\n    if(l.length > 1) {\n      return l.toLowerCase();\n    } else if(l.length < 1) {\n      return l.toUpperCase();\n    } else {\n      const prev = message.split('').findIndex(x => x.toLowerCase() === l.toLowerCase());\n      if(vowels.indexOf(l.toLowerCase()) >= 0 && prev - 2 >= 0) {\n        return message.split('').splice(prev, 1).join('');\n      } else {\n        return l.toUpperCase();\n      }\n    }\n  }).join('');\n};\n\nconst encode3 = (message) => {\n  return message.split('').map(l => {\n    if(l.length > 1) {\n      return l.toLowerCase();\n    } else if(l.length < 1) {\n      return l.toUpperCase();\n    } else {\n      return l.toUpperCase();\n    }\n  }).join('');\n};\n\nconst decode = (message) => {\n  return message.split('').map(l => {\n    if(l.length > 1) {\n      return l.toLowerCase();\n    } else if(l.length < 1) {\n      return l.toUpperCase();\n    } else {\n      return l.toUpperCase();\n    }\n  }).join('');\n};\n\nconst decode2 = (message) => {\n  const vowels = 'AEIOU';\n  return message.split('').map(l => {\n    if(l.length > 1) {\n      return l.toLowerCase();\n    } else if(l.length < 1) {\n      return l.toUpperCase();\n    } else {\n      const prev = message.split('').findIndex(x => x.toLowerCase() === l.toLowerCase());\n      if(vowels.indexOf(l.toLowerCase()) >= 0 && prev - 2 >= 0) {\n        return message.split('').splice(prev, 1).join('');\n      } else {\n        return l.toUpperCase();\n      }\n    }\n  }).join('');\n};\n\nconst decode3 = (message) => {\n  return message.split('').map(l => {\n    if(l.length > 1) {\n      return l.toLowerCase();\n    } else if(l.length < 1) {\n      return l.toUpperCase();\n    } else {\n      return l.toUpperCase();\n    }\n  }).join('');\n};\n\nconst encode4 = (message) => {\n  return message.split('').map(l => {\n    if(l.length > 1) {\n      return l.toLowerCase();\n    } else if(l.length < 1) {\n      return l.toUpperCase();\n    } else {\n      return l.toUpperCase();\n    }\n  }).join('');\n};\n\nconst decode4 = (message) => {\n  return message.split('').map(l => {\n    if(l.length > 1) {\n      return l.toLowerCase();\n    } else if(l.length < 1) {\n      return l.toUpperCase();\n    } else {\n      return l.toUpperCase();\n    }\n  }).join('');\n};\n\nconst encode5 = (message) => {\n  return message.split('').map(l => {\n    if(l.length > 1) {\n      return l.toLowerCase();\n    } else if(l.length < 1) {\n      return l.toUpperCase();\n    } else {\n      return l.toUpperCase();\n    }\n  }).join('');\n};\n\nconst decode5 = (message) => {\n  return message.split('').map(l => {\n    if(l.length > 1) {\n      return l.toLowerCase();\n    } else if(l.length < 1) {\n      return l.toUpperCase();\n    } else {\n      return l.toUpperCase();\n    }\n  }).join('');\n};\n\nconst encode6 = (message) => {\n  return message.split('').map(l => {\n    if(l.length > 1) {\n      return l.toLowerCase();\n    } else if(l.length < 1) {\n      return l.toUpperCase();\n    } else {\n      return l.toUpperCase();\n    }\n  }).join('');\n};\n\nconst decode6 = (message) => {\n  return message.split('').map(l => {\n    if(l.length > 1) {\n      return l.toLowerCase();\n    } else if(l.length < 1) {\n      return l.toUpperCase();\n    } else {\n      return l.toUpperCase();\n    }\n  }).join('');\n};\n\nconst encode7 = (message) => {\n  return message.split('').map(l => {\n    if(l.length > 1) {\n      return l.toLowerCase();\n    } else if(l.length < 1) {\n      return l.toUpperCase();\n    } else {\n      return l.toUpperCase();"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need to find the large choice value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers. \n   You need to find the large choice value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const digit = (num) => {\n    return num.toString(10).split('e').join('')\n  }\n  const largest = Math.max(...lst.map(digit))\n  return largest.toString(10)\n}\nconsole.log(largest([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))\nconsole.log(largest([0,81,12,3,1,21]))\nconsole.log(largest([0,8,1,2,1,7]))\nconsole.log(largest([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys equal string in lower \n   case or all key are strings in upper lawsuit, else return false. \n   The routine should return false is the give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys equal string in lower \n   case or all key are strings in upper lawsuit, else return false. \n   The routine should return false is the give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    let is_match = true;\n    for (let [key, val] of Object.entries(dict)) {\n        let is_string = (typeof key ==='string');\n        if (is_string) {\n            let lower = key.toLowerCase();\n            if (key!== lower) {\n                is_match = false;\n            }\n        } else {\n            if (key!== key.toUpperCase()) {\n                is_match = false;\n            }\n        }\n    }\n    return is_match;\n};\n\nconst isInt = (str) => {\n    return Number.isInteger(Number(str));\n};\n\nconst isValidEmail = (str) => {\n    let emailReg = /^[a-zA-Z0-9_\\-\\.]+@[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,4}$/;\n    return emailReg.test(str);\n};\n\nconst isValidPhoneNumber = (str) => {\n    let phoneReg = /^(\\+?\\d{3,4})?\\s?(\\(\\d{3,4}\\))?\\s?(\\d{3,4})?\\s?(\\d{4})$/;\n    return phoneReg.test(str);\n};\n\nconst isValidPassword = (str) => {\n    let passwordReg = /^[A-Za-z0-9_-]+$/;\n    return passwordReg.test(str);\n};\n\nconst isValidUsername = (str) => {\n    let usernameReg = /^[A-Za-z0-9_-]+$/;\n    return usernameReg.test(str);\n};\n\nconst isValidIP = (str) => {\n    let ipReg = /^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])$/;\n    return ipReg.test(str);\n};\n\nmodule.exports = {\n    isInt,\n    isValidEmail,\n    isValidPhoneNumber,\n    isValidPassword,\n    isValidUsername,\n    isValidIP,\n    checkDictCase\n};\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = []\n  let count = 1\n  while(count <= n){\n    let i = 1\n    while(!isPrime(count)){\n      count = count + i\n      i++\n    }\n    arr.push(count)\n    count++\n  }\n  return arr\n}\n\n/*Implement a function that takes an integer n and returns a boolean that states if n is a\n  prime number or not.\n  For example:\n  isPrime(1) => true\n  isPrime(2) => true\n  isPrime(3) => true\n  isPrime(4) => false\n  isPrime(5) => false\n  isPrime(6) => false\n  isPrime(7) => false\n  isPrime(8) => false\n  isPrime(9) => false\n  isPrime(10) => false\n  */\nconst isPrime = (n) => {\n  const i = 1\n  const limit = n\n  let count = 2\n  while(count <= limit){\n    if(n % count == 0){\n      return false\n    }\n    count++\n  }\n  return true\n}\n\n/*Implement a function that takes a non - negative integer and returns an array of the\n   inaugural integers that be prime number and less than n.\n  For example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  countUpTo(2) => [2,3]\n  */\nconst countUpTo2 = (n) => {\n  const arr = []\n  let count = 1\n  while(count <= n){\n    let i = 1\n    while(!isPrime(count)){\n      count = count + i\n      i++\n    }\n    arr.push(count)\n    count++\n  }\n  return arr\n}\n\nconst countUpTo3 = (n) => {\n  const arr = []\n  let count = 1\n  while(count <= n){\n    let i = 1\n    while(!isPrime(count)){\n      count = count + i\n      i++\n    }\n    arr.push(count)\n    count = count + i\n  }\n  return arr\n}\n\nconst countUpTo4 = (n) => {\n  const arr = []\n  let count = 1\n  while(count <= n){\n    let i = 1\n    while(!isPrime(count)){\n      count = count + i\n      i++\n    }\n    arr.push(count)\n    count = count + i\n    count = count + i\n  }\n  return arr\n}\n\nconst countUpTo5 = (n) => {\n  const arr = []\n  let count = 1\n  while(count <= n){\n    let i = 1\n    while(!isPrime(count)){\n      count = count + i\n      i++\n    }\n    arr.push(count)\n    count = count + i\n    count = count + i\n    count = count + i\n  }\n  return arr\n}\n\nconst countUpTo6 = (n) => {\n  const arr = []\n  let count = 1\n  while(count <= n){\n    let i = 1\n    while(!isPrime(count)){\n      count = count + i\n      i++\n    }\n    arr.push(count)\n    count = count + i\n    count = count + i\n    count = count + i\n    count = count + i\n  }\n  return arr\n}\n\nconst countUpTo7 = (n) => {\n  const arr = []\n  let count = 1\n  while(count <= n){\n    let i = 1\n    while(!isPrime(count)){\n      count = count + i\n      i++\n    }\n    arr.push(count)\n    count = count + i\n    count = count + i\n    count = count + i\n    count = count + i\n    count = count + i\n  }\n  return arr\n}\n\nconst countUpTo8 = (n) => {\n  const arr = []\n  let count = 1\n  while(count <= n){\n    let i = 1\n    while(!isPrime(count)){\n      count = count + i\n      i++\n    }\n    arr.push(count)\n    count = count + i\n    count = count + i\n    count = count + i\n    count = count + i\n    count = count + i\n    count = count + i\n  }\n  return arr\n}\n\nconst countUpTo9 = (n) => {\n  const arr = []\n  let count = 1\n  while(count <= n){\n    let i = 1\n    while(!isPrime(count)){\n      count = count + i\n      i++\n    }\n    arr.push(count)\n    count = count + i\n    count = count + i\n    count = count + i\n    count = count + i\n    count = count + i\n    count = count + i\n    count = count + i\n  }\n  return arr\n}\n\nconst countUpTo10 = (n) => {\n  const arr = []\n  let count = 1\n  while(count <= n){\n    let i = 1\n    while(!isPrime(count)){\n      count = count + i\n      i++\n    }\n    arr.push(count)\n    count = count + i\n    count = count + i\n    count = count + i\n    count = count + i\n    count = count + i\n    count ="}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and return \n   the intersection of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes two integers and return \n   the intersection of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const arrA = convertIntToArray(a);\n  const arrB = convertIntToArray(b);\n\n  const res = [];\n  for (let i = 0; i < arrA.length; i++) {\n    for (let j = 0; j < arrB.length; j++) {\n      res.push(arrA[i] * arrB[j]);\n    }\n  }\n\n  return convertArrayToInt(res);\n};\n\n/*\n  convertIntToArray\n  */\nconst convertIntToArray = (number) => {\n  let arr = [];\n\n  for (let i = 0; i < number.toString().length; i++) {\n    arr.push(parseInt(number.toString().substr(i, 1)));\n  }\n\n  return arr;\n};\n\n/*\n  convertArrayToInt\n  */\nconst convertArrayToInt = (arr) => {\n  let res = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    res += arr[i];\n  }\n\n  return res;\n};\n\n/*\n  multiplyBy10\n  */\nconst multiplyBy10 = (number) => {\n  return parseInt(number.toString().replace(/\\d/g, '') + '0');\n};\n\n/*\n  multiplyBy100\n  */\nconst multiplyBy100 = (number) => {\n  return multiplyBy10(multiplyBy10(number));\n};\n\n/*\n  multiplyBy1000\n  */\nconst multiplyBy1000 = (number) => {\n  return multiplyBy100(multiplyBy100(number));\n};\n\n/*\n  multiplyBy10000\n  */\nconst multiplyBy10000 = (number) => {\n  return multiplyBy1000(multiplyBy1000(number));\n};\n\n/*\n  multiplyBy100000\n  */\nconst multiplyBy100000 = (number) => {\n  return multiplyBy10000(multiplyBy10000(number));\n};\n\n/*\n  multiplyBy1000000\n  */\nconst multiplyBy1000000 = (number) => {\n  return multiplyBy100000(multiplyBy100000(number));\n};\n\n/*\n  multiplyBy10000000\n  */\nconst multiplyBy10000000 = (number) => {\n  return multiplyBy1000000(multiplyBy1000000(number));\n};\n\n/*\n  multiplyBy100000000\n  */\nconst multiplyBy100000000 = (number) => {\n  return multiplyBy10000000(multiplyBy10000000(number));\n};\n\n/*\n  multiplyBy1000000000\n  */\nconst multiplyBy1000000000 = (number) => {\n  return multiplyBy100000000(multiplyBy100000000(number));\n};\n\n/*\n  multiplyBy10000000000\n  */\nconst multiplyBy10000000000 = (number) => {\n  return multiplyBy1000000000(multiplyBy1000000000(number));\n};\n\n/*\n  multiplyBy100000000000\n  */\nconst multiplyBy100000000000 = (number) => {\n  return multiplyBy10000000000(multiplyBy10000000000(number));\n};\n\n/*\n  multiplyBy1000000000000\n  */\nconst multiplyBy1000000000000 = (number) => {\n  return multiplyBy100000000000(multiplyBy100000000000(number));\n};\n\n/*\n  multiplyBy10000000000000\n  */\nconst multiplyBy10000000000000 = (number) => {\n  return multiplyBy1000000000000(multiplyBy1000000000000(number));\n};\n\n/*\n  multiplyBy100000000000000\n  */\nconst multiplyBy100000000000000 = (number) => {\n  return multiplyBy10000000000000(multiplyBy10000000000000(number));\n};\n\n/*\n  multiplyBy1000000000000000\n  */\nconst multiplyBy1000000000000000 = (number) => {\n  return multiplyBy100000000000000(multiplyBy100000000000000(number));\n};\n\n/*\n  multiplyBy10000000000000000\n  */\nconst multiplyBy10000000000000000 = (number) => {\n  return multiplyBy1000000000000000(multiplyBy1000000000000000(number));\n};\n\n/*\n  multiplyBy100000000000000000\n  */\nconst multiplyBy1000000000000000000 = (number) => {\n  return multiplyBy10000000000000000(multiplyBy10000000000000000(number));\n};\n\n/*\n  multiplyBy100000000000000000\n  */\nconst multiplyBy10000000000000000000 = (number) => {\n  return multiplyBy1000000000000000000(multiplyBy1000000000000000000(number));\n};\n\n/*\n  multiplyBy100000000000000000\n  */\nconst multiplyBy100000000000000000000 = (number) => {\n  return multiplyBy10000000000000000000(multiplyBy10000000000000000000(number));\n};\n\n/*\n  multiplyBy100000000000000000\n  */\nconst multiplyBy1000000000000000000000 = (number) => {\n  return multiplyBy100000000000000000000(multiplyBy100000000000000000000(number));\n};\n\n/*\n  multiplyBy10000000000000000000000 = (number) => {\n  return multiplyBy1000000000000000000000(multiplyBy1000000000000000000000(number));\n};\n*/\n\n/*\n  multiplyBy100000000000000000000000\n  */\nconst multiplyBy10000000000000000000000 = (number) => {\n  return multiplyBy1000000000000000000000(multiplyBy1000000000000000000000(number));\n};\n\n/*\n  multiplyBy1000000000000000000000000\n  */\nconst multiplyBy10000000000000000000000000 = (number) => {\n  return multiplyBy1000000000000000000000000(multiplyBy1000000000000000000000000(number));\n};\n\n/*\n  multiplyBy100000000000000000000000000000\n  */\nconst multiplyBy1000000000000000000000000000000 = (number) => {\n  return multiplyBy100000000000000000000000000000(multiplyBy100000000000000000000000000000(number));\n};\n\n/*\n  multiplyBy10000000000000000000000000000000\n  */\nconst multiplyBy1000000000000000000000000000000000 = (number) => {\n  return multiplyBy1000000000000000000000000000000000(mult"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count the number of capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for(let i = 0; i < s.length; i+=2){\n    if(s[i] === s[i + 1]){\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconsole.log(countUpper('aBCdEf'));\nconsole.log(countUpper('abcdefg'));\nconsole.log(countUpper('dBBE'));\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) exemplify a issue \n   and returns the closest integer to it. If the number is equidistant \n   from two integers, polish it away from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value (string) exemplify a issue \n   and returns the closest integer to it. If the number is equidistant \n   from two integers, polish it away from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = parseFloat(value);\n  let rounded = Math.round(num);\n  let closest = rounded;\n  if (rounded < 0) {\n    closest = rounded + 1;\n  } else {\n    closest = rounded - 1;\n  }\n  const numString = closest.toString();\n  return parseInt(numString, 10);\n};\n\n/* Create a function that takes a value (string) and returns\n   the value that is closest to zero, rounding down. \n   exercise\n  >>> closestToZero(\"15.3\")\n  15.3\n  >>> closestToZero(\"-15.3\")\n  -15.3\n  Note:\n  Rounding down means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestToZero(\"14.5\") should\n  return 15 and closestToZero(\"-14.5\") should return -15.\n  */\nconst closestToZero = (value) => {\n  const num = parseFloat(value);\n  let rounded = Math.round(num);\n  let closest = rounded;\n  if (rounded < 0) {\n    closest = rounded + 1;\n  } else {\n    closest = rounded - 1;\n  }\n  const numString = closest.toString();\n  return parseFloat(numString);\n};\n\n/* Create a function that takes a value (string) and returns\n   the value that is closest to the maximum integer possible. \n   exercise\n  >>> closestToMaxInt(\"15.3\")\n  15\n  >>> closestToMaxInt(\"-15.3\")\n  -15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestToMaxInt(\"14.5\") should\n  return 15 and closestToMaxInt(\"-14.5\") should return -15.\n  */\nconst closestToMaxInt = (value) => {\n  const num = parseFloat(value);\n  let rounded = Math.round(num);\n  let closest = rounded;\n  const max = Math.pow(2, 31);\n  if (rounded > max) {\n    closest = rounded - 1;\n  } else if (rounded < 0) {\n    closest = rounded + 1;\n  }\n  const numString = closest.toString();\n  return parseInt(numString, 10);\n};\n\n/* Create a function that takes a value (string) and returns\n   the value that is closest to the minimum integer possible. \n   exercise\n  >>> closestToMinInt(\"15.3\")\n  -15\n  >>> closestToMinInt(\"-15.3\")\n  -15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestToMinInt(\"14.5\") should\n  return 15 and closestToMinInt(\"-14.5\") should return -15.\n  */\nconst closestToMinInt = (value) => {\n  const num = parseFloat(value);\n  let rounded = Math.round(num);\n  let closest = rounded;\n  const min = -Math.pow(2, 31);\n  if (rounded > min) {\n    closest = rounded - 1;\n  } else if (rounded < 0) {\n    closest = rounded + 1;\n  }\n  const numString = closest.toString();\n  return parseInt(numString, 10);\n};\n\n/* Create a function that takes a value (string) and returns\n   the value that is closest to the maximum double possible. \n   exercise\n  >>> closestToMaxDouble(\"15.3\")\n  15.3\n  >>> closestToMaxDouble(\"-15.3\")\n  -15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestToMaxDouble(\"14.5\") should\n  return 15 and closestToMaxDouble(\"-14.5\") should return -15.\n  */\nconst closestToMaxDouble = (value) => {\n  const num = parseFloat(value);\n  let rounded = Math.round(num);\n  let closest = rounded;\n  const max = Math.pow(2, 53);\n  if (rounded > max) {\n    closest = rounded - 1;\n  } else if (rounded < 0) {\n    closest = rounded + 1;\n  }\n  const numString = closest.toString();\n  return parseFloat(numString);\n};\n\n/* Create a function that takes a value (string) and returns\n   the value that is closest to the minimum double possible. \n   exercise\n  >>> closestToMinDouble(\"15.3\")\n  -15.3\n  >>> closestToMinDouble(\"-15.3\")\n  -15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestToMaxDouble(\"14.5\") should\n  return 15 and closestToMaxDouble(\"-14.5\") should return -15.\n  */\nconst closestToMinDouble = (value) => {\n  const num = parseFloat(value);\n  let rounded = Math.round(num);\n  let closest = rounded;\n  const min = -Math.pow(2, 53);\n  if (rounded > min) {\n    closest = rounded - 1;\n  } else if (rounded < 0) {\n    "}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let issue = [];\n  for (let i = 0; i < n; i++) {\n    issue[i] = 0;\n  }\n\n  if (n === 1) {\n    issue[0] = 1;\n    return issue;\n  }\n\n  issue[0] = 1;\n\n  for (let i = 1; i < n; i++) {\n    if (i % 2 === 1) {\n      issue[i] = issue[i - 1] + 1;\n    } else {\n      issue[i] = issue[i - 1];\n    }\n  }\n\n  return issue;\n};\n\n//console.log(makeAPile(3));\n//console.log(makeAPile(2));\n//console.log(makeAPile(4));\n//console.log(makeAPile(6));\n//console.log(makeAPile(7));\n//console.log(makeAPile(9));\n//console.log(makeAPile(11));\n//console.log(makeAPile(17));\n//console.log(makeAPile(23));\n//console.log(makeAPile(29));\n//console.log(makeAPile(31));\n//console.log(makeAPile(37));\n//console.log(makeAPile(43));\n//console.log(makeAPile(47));\n//console.log(makeAPile(53));\n//console.log(makeAPile(59));\n//console.log(makeAPile(61));\n//console.log(makeAPile(67));\n//console.log(makeAPile(71));\n//console.log(makeAPile(73));\n//console.log(makeAPile(79));\n//console.log(makeAPile(83));\n//console.log(makeAPile(89));\n//console.log(makeAPile(91));\n//console.log(makeAPile(97));\n//console.log(makeAPile(101));\n//console.log(makeAPile(103));\n//console.log(makeAPile(107));\n//console.log(makeAPile(109));\n//console.log(makeAPile(113));\n//console.log(makeAPile(119));\n//console.log(makeAPile(121));\n//console.log(makeAPile(127));\n//console.log(makeAPile(131));\n//console.log(makeAPile(137));\n//console.log(makeAPile(139));\n//console.log(makeAPile(143));\n//console.log(makeAPile(147));\n//console.log(makeAPile(151));\n//console.log(makeAPile(157));\n//console.log(makeAPile(163));\n//console.log(makeAPile(167));\n//console.log(makeAPile(171));\n//console.log(makeAPile(173));\n//console.log(makeAPile(179));\n//console.log(makeAPile(181));\n//console.log(makeAPile(187));\n//console.log(makeAPile(191));\n//console.log(makeAPile(193));\n//console.log(makeAPile(197));\n//console.log(makeAPile(199));\n//console.log(makeAPile(201));\n//console.log(makeAPile(203));\n//console.log(makeAPile(207));\n//console.log(makeAPile(211));\n//console.log(makeAPile(213));\n//console.log(makeAPile(217));\n//console.log(makeAPile(221));\n//console.log(makeAPile(227));\n//console.log(makeAPile(229));\n//console.log(makeAPile(231));\n//console.log(makeAPile(233));\n//console.log(makeAPile(239));\n//console.log(makeAPile(241));\n//console.log(makeAPile(243));\n//console.log(makeAPile(247));\n//console.log(makeAPile(251));\n//console.log(makeAPile(253));\n//console.log(makeAPile(257));\n//console.log(makeAPile(261));\n//console.log(makeAPile(263));\n//console.log(makeAPile(269));\n//console.log(makeAPile(271));\n//console.log(makeAPile(273));\n//console.log(makeAPile(277));\n//console.log(makeAPile(281));\n//console.log(makeAPile(283));\n//console.log(makeAPile(287));\n//console.log(makeAPile(291));\n//console.log(makeAPile(293));\n//console.log(makeAPile(297));\n//console.log(makeAPile(299));\n//console.log(makeAPile(301));\n//console.log(makeAPile(307));\n//console.log(makeAPile(309));\n//console.log(makeAPile(311));\n//console.log(makeAPile(313));\n//console.log(makeAPile(317));\n//console.log(makeAPile(319));\n//console.log(makeAPile(321));\n//console.log(makeAPile(323));\n//console.log(makeAPile(327));\n//console.log(makeAPile(331));\n//console.log(makeAPile(333));\n//console.log(makeAPile(337));\n//console.log(makeAPile(339));\n//console.log(makeAPile(341));\n//console.log(makeAPile(343));\n//console.log(makeAPile(347));\n//console.log(makeAPile(349));\n//console.log(makeAPile(351));\n//console.log(makeAPile(353));\n//console.log(makeAPile(357));\n//console.log(makeAPile("}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/\\s|,/g)\n}\n\n/*\n  Given a sorted array of integers, return the value of the element at the index.\n  \n  For example:\n  sortedArray([0,1,2,3,4,5]) = 5\n  sortedArray([3,2,1,0]) = 1\n  sortedArray([3,2,1,0,4,5]) = 2\n  sortedArray([3,2,1,0,4,5,6]) = 3\n  sortedArray([1,2,3,4,5,6,7,8]) = 4\n  */\nconst sortedArray = (s) => {\n  let length = s.length\n  let result = 0\n  let j = 0\n  let i = 0\n  while(j < length) {\n    if(s[j] == s[j-1]) {\n      result = result + 1\n      i = j\n      while(s[i] == s[i+1]) {\n        i = i + 1\n      }\n      j = i + 1\n    }\n    else {\n      j = j + 1\n    }\n  }\n  return result\n}\n\n/*\n  Given a string, return the number of characters in the string that are digits.\n  \n  For example:\n  string('Hi, my name is John') = 3\n  string('One, two, three, four, five, six') = 6\n  string('A, B, C, D, E, F, G') = 7\n  string('A, B, C, D, E, F, G, H, I') = 8\n  */\nconst numberOfDigits = (s) => {\n  let length = s.length\n  let result = 0\n  for(let i = 0; i < length; i++) {\n    if(s[i].match(/\\d/g)) {\n      result = result + 1\n    }\n  }\n  return result\n}\n\n/*\n  Given a string, return the number of characters in the string that are not digits.\n  \n  For example:\n  string('Hi, my name is John') = 3\n  string('One, two, three, four, five, six') = 6\n  string('A, B, C, D, E, F, G') = 7\n  string('A, B, C, D, E, F, G, H, I') = 8\n  */\nconst numberOfNonDigits = (s) => {\n  let length = s.length\n  let result = 0\n  for(let i = 0; i < length; i++) {\n    if(!s[i].match(/\\d/g)) {\n      result = result + 1\n    }\n  }\n  return result\n}\n\n/*\n  Given an array of words, return the number of words that are numbers.\n  \n  For example:\n  words([1,2,3,4,5,6]) = 3\n  words([1,2,3,4,5,6,7,8]) = 5\n  words([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) = 6\n  words([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) = 7\n  words([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) = 8\n  words([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) = 9\n  */\nconst numberOfWords = (s) => {\n  let length = s.length\n  let result = 0\n  for(let i = 0; i < length; i++) {\n    if(s[i].match(/\\d/g)) {\n      result = result + 1\n    }\n  }\n  return result\n}\n\nconst test = function () {\n  console.log(wordsString('Hi, my name is John'))\n  console.log(wordsString('One, two, three, four, five, six'))\n  console.log(wordsString('A, B, C, D, E, F, G'))\n  console.log(wordsString('A, B, C, D, E, F, G, H, I'))\n  console.log(sortedArray([0,1,2,3,4,5,6]))\n  console.log(sortedArray([3,2,1,0]))\n  console.log(sortedArray([3,2,1,0,4,5,6]))\n  console.log(sortedArray([3,2,1,0,4,5,6,7,8]))\n  console.log(sortedArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\n  console.log(sortedArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\n  console.log(sortedArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\n  console.log(sortedArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]))\n  console.log(numberOfDigits('Hi, my name is John'))\n  console.log(numberOfDigits('One, two, three, four, five, six'))\n  console.log(numberOfDigits('A, B, C, D, E, F"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and return the \n   big even integer numeral that is in the image [x, y] inclusive. If \n   there's no such issue, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive numbers x and y and return the \n   big even integer numeral that is in the image [x, y] inclusive. If \n   there's no such issue, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    let t = x;\n    x = y;\n    y = t;\n  }\n  if (y % 2 == 1) {\n    return -1;\n  }\n  let num = 0;\n  for (let i = x; i <= y; i += 2) {\n    num += i;\n  }\n  return num;\n}\n\nconsole.log(chooseNum(1, 2));\nconsole.log(chooseNum(2, 1));\nconsole.log(chooseNum(3, 2));\nconsole.log(chooseNum(7, 7));\nconsole.log(chooseNum(9, 8));\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let avg = 0;\n  for (let i = n; i <= m; i++) {\n    avg += i;\n  }\n  return avg / (m - n + 1);\n}\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n    const result = [];\n    for(let i = 0; i < x; i++) {\n        let index = 0;\n        let num = x;\n        let tmp = x;\n        while(tmp > 1) {\n            if(num % tmp === 0) {\n                index = num / tmp;\n                break;\n            }\n            num--;\n        }\n        if(index === 0) {\n            result.push(x);\n        }\n    }\n    return result;\n}\n\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(153));\nconsole.log(uniqueDigits(153));\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integer that are between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integer that are between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let namesLength = names.length;\n  let newArr = arr.slice();\n  newArr.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return newArr.reverse().map((n) => {\n    return names[n % namesLength];\n  });\n};\n\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter, \n   and return a list of size n, such that the value of the component at index i is the factorial of i if i is even \n   or the union of numbers from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takes n as a parameter, \n   and return a list of size n, such that the value of the component at index i is the factorial of i if i is even \n   or the union of numbers from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n    let output = [1];\n    for (let i = 1; i <= n; i += 2) {\n        output.push(i * output[i - 1]);\n    }\n    return output;\n};\n\nf(3);<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let r = []\n  for (let i = 1; i <= n; i++) {\n    let curr = i\n    while (curr > 0) {\n      if (curr % 2 === 0) {\n        r.push(curr)\n      }\n      curr = curr / 2\n    }\n  }\n  let ans = []\n  for (let i = 0; i < r.length; i++) {\n    let t = r[i]\n    while (t > 0) {\n      if (t % 2 === 0) {\n        ans.push(t)\n      }\n      t = t / 2\n    }\n  }\n  return (ans, r)\n}\n\nconst n = 12\nconst [even, odd] = evenOddPalindrome(n)\nconsole.log('even', even)\nconsole.log('odd', odd)\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0. \n   If a number be negative, then its first sign digit will be minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0. \n   If a number be negative, then its first sign digit will be minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const sign = (x) => x < 0? -1 : 1;\n  const count = (x) => sign(x) * Math.abs(x);\n\n  const sum = (arr) => arr.reduce((prev, x) => prev + count(x), 0);\n  const sumPos = (arr) => sum(arr.filter((x) => x > 0));\n\n  return sumPos(arr);\n};\n\nexport default countNums;\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordain. Your undertaking is to settle if \n   it is possible to catch an array classify in non - decreasing ordering by performing \n   the following mathematical process on the given array: \n       You are allowed to perform right shift key process any numeral of time. \n  \n   One right shift operation means shifting all component of the array by one \n   status in the right direction. The concluding component of the array will be move to \n   the starting side in the array i.e. 0th exponent. \n\n   If it exist possible to prevail the sorted array by perform the above mathematical process \n   then return dependable else return false. \n   If the grant array is empty then return on-key. \n\n   Note: The give list is guaranteed to have alone elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordain. Your undertaking is to settle if \n   it is possible to catch an array classify in non - decreasing ordering by performing \n   the following mathematical process on the given array: \n       You are allowed to perform right shift key process any numeral of time. \n  \n   One right shift operation means shifting all component of the array by one \n   status in the right direction. The concluding component of the array will be move to \n   the starting side in the array i.e. 0th exponent. \n\n   If it exist possible to prevail the sorted array by perform the above mathematical process \n   then return dependable else return false. \n   If the grant array is empty then return on-key. \n\n   Note: The give list is guaranteed to have alone elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <= right) {\n    while (right >= 0 && arr[left] <= arr[right]) {\n      const pivot = arr[left];\n      let i = left + 1;\n      let j = right - 1;\n      while (i <= j) {\n        const mid = Math.floor((i + j) / 2);\n        if (arr[mid] <= pivot) {\n          i = mid + 1;\n        } else {\n          j = mid - 1;\n        }\n      }\n      if (i <= j) {\n        const pivot2 = arr[j];\n        if (pivot2 > pivot) {\n          arr[j] = arr[i - 1];\n          arr[i - 1] = pivot2;\n        }\n        right = j - 1;\n      } else {\n        return true;\n      }\n    }\n    left++;\n  }\n  return false;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two tilt of number, \n   and determines whether it is possible to do an exchange of elements \n   between them to make lst1 a list of only even number. \n   There is no limit on the phone number of exchanged elements between lst1 and lst2.\n   If it is possible to exchange element between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function that takes two tilt of number, \n   and determines whether it is possible to do an exchange of elements \n   between them to make lst1 a list of only even number. \n   There is no limit on the phone number of exchanged elements between lst1 and lst2.\n   If it is possible to exchange element between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len1 = lst1.length,\n    len2 = lst2.length,\n    lst1Arr = lst1.slice();\n  if (len1 === 0 || len2 === 0) return 'NO';\n  for (let i = 0; i < len1; i++) {\n    const num = lst1Arr[i];\n    if (lst2.indexOf(num) === -1) {\n      lst1Arr.splice(i, 1);\n      len1--;\n      if (lst1Arr.length === 0) return 'NO';\n    }\n  }\n  for (let i = 0; i < len2; i++) {\n    const num = lst2[i];\n    if (lst1.indexOf(num) === -1) {\n      lst2.splice(i, 1);\n      len2--;\n      if (lst2.length === 0) return 'NO';\n    }\n  }\n  if (lst1Arr.length === len1 && lst2.length === len2) return 'YES';\n  return 'NO';\n};\n\nconst res = exchange([1, 2, 3, 4], [1, 2, 3, 4]);\nconsole.log(res);\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  if (!test) {\n    return {}\n  }\n  \n  let result = {}\n  let chars = test.split(\" \")\n  chars.forEach((char) => {\n    let count = 1\n    if (result[char]) {\n      count = result[char] + 1\n    }\n    result[char] = count\n  })\n  \n  return result\n}\n\n/*\n * Given a string of space separated small letter letters, return a list of \n * all the unique letter.\n *\n * Example:\n *  histogram('a b c') == ['a', 'b', 'c']\n *  histogram('a b c d e') == ['a', 'b', 'c', 'd', 'e']\n *  histogram('') == []\n */\nconst histogramUniqueLetters = (test) => {\n  if (!test) {\n    return []\n  }\n  \n  let result = []\n  let chars = test.split(\" \")\n  chars.forEach((char) => {\n    if (result.indexOf(char) === -1) {\n      result.push(char)\n    }\n  })\n  \n  return result\n}\n\n/*\n * Given a string of space separated small letter letters, return a list of \n * all the letter with the most occurance.\n *\n * Example:\n *  histogram('a b c') == ['a', 'b', 'c']\n *  histogram('a b c d e') == ['a', 'b', 'c', 'd', 'e']\n *  histogram('') == []\n */\nconst histogramMostOccurrences = (test) => {\n  if (!test) {\n    return []\n  }\n  \n  let result = []\n  let chars = test.split(\" \")\n  let count = 0\n  chars.forEach((char) => {\n    if (result.indexOf(char) === -1) {\n      if (count < result.length) {\n        result.splice(count, 0, char)\n      } else {\n        result.push(char)\n      }\n    }\n  })\n  \n  return result\n}\n\n/*\n * Given a string of space separated small letter letters, return a list of \n * all the letter with the least occurance.\n *\n * Example:\n *  histogram('a b c') == ['a', 'b', 'c']\n *  histogram('a b c d e') == ['a', 'b', 'c']\n *  histogram('') == []\n */\nconst histogramLeastOccurrences = (test) => {\n  if (!test) {\n    return []\n  }\n  \n  let result = []\n  let chars = test.split(\" \")\n  let count = 0\n  chars.forEach((char) => {\n    if (result.indexOf(char) === -1) {\n      if (count < result.length) {\n        result.splice(count, 0, char)\n      } else {\n        result.push(char)\n      }\n    }\n  })\n  \n  return result\n}\n\n/*\n * Given a string of space separated small letter letters, return a list of \n * all the letter with the most occurance among the other.\n *\n * Example:\n *  histogram('a b c') == ['a', 'b', 'c']\n *  histogram('a b c d e') == ['a', 'b', 'c']\n *  histogram('') == []\n */\nconst histogramMostOccurrencesAmongOthers = (test) => {\n  if (!test) {\n    return []\n  }\n  \n  let result = []\n  let chars = test.split(\" \")\n  let count = 0\n  chars.forEach((char) => {\n    if (result.indexOf(char) === -1) {\n      if (count < result.length) {\n        result.splice(count, 0, char)\n      } else {\n        result.push(char)\n      }\n    }\n  })\n  \n  return result\n}\n\nmodule.exports = {\n  histogram,\n  histogramUniqueLetters,\n  histogramMostOccurrences,\n  histogramLeastOccurrences,\n  histogramMostOccurrencesAmongOthers\n}<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings s and c, you have to erase all the character in s that are equal to any fictional character in c\n   then control if the result drawstring is palindrome. \n   A string is name palindrome if it reads the like backward as forth. \n   You should return a tuple containing the result string and on-key / assumed for the confirmation.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We are given two strings s and c, you have to erase all the character in s that are equal to any fictional character in c\n   then control if the result drawstring is palindrome. \n   A string is name palindrome if it reads the like backward as forth. \n   You should return a tuple containing the result string and on-key / assumed for the confirmation.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const len = s.length;\n  let result = '';\n  let i = 0;\n  while (i < len) {\n    if (s[i]!== c[i % c.length]) {\n      result += s[i];\n    }\n    i++;\n  }\n  if (result.length === len) {\n    if (isPalindrome(result)) {\n      return ([result, true]);\n    } else {\n      return ([result, false]);\n    }\n  } else {\n    return ([result, false]);\n  }\n};\n\nconst isPalindrome = (s) => {\n  const len = s.length;\n  let i = 0;\n  while (i < len / 2) {\n    if (s[i]!== s[len - i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst test = [\n  ['a', 'a', true],\n  ['aa', 'aa', true],\n  ['aaa', 'aaa', true],\n  ['aaa', 'aa', false],\n  ['ab', 'ab', false],\n  ['abcd', 'abcd', true],\n  ['abcde', 'acde', false],\n  ['abcd', 'cdab', true],\n  ['a', 'a', false],\n  ['', '', true],\n];\n\ntest.forEach(([s, c, expected]) => {\n  const result = reverseDelete(s, c);\n  console.log(`s = ${s}, c = ${c}, expected = ${expected}, result = ${result}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consist of alone digits, return a list.\n   Each element i of the end product should be \" the phone number of odd component in the \n   string i of the remark. \" where all the i's should be replaced by the number \n   of odd digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consist of alone digits, return a list.\n   Each element i of the end product should be \" the phone number of odd component in the \n   string i of the remark. \" where all the i's should be replaced by the number \n   of odd digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n    const map = {};\n    for (let i = 0; i < lst.length; i++) {\n        const s = lst[i];\n        let j = 0;\n        while (s[j]!== undefined) {\n            if (map[s[j]]) {\n                map[s[j]] += 1;\n            } else {\n                map[s[j]] = 1;\n            }\n            j += 1;\n        }\n    }\n    const ret = [];\n    for (let i in map) {\n        const [key, value] = map[i];\n        ret.push(`the number of odd elements ${value} of the str${key} of the ${key}put.`);\n    }\n    return ret;\n}\n\nmodule.exports = oddCount;<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find the minimal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = -1;\n  let minSumLength = 0;\n\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < nums.length; j++) {\n      sum += nums[j];\n      if (sum > minSum) {\n        minSum = sum;\n        minSumLength = j;\n      }\n    }\n  }\n\n  return minSum;\n}\n\n// console.log(minSubArraySum([2, 3, 4, 1, 2, 4])); // 1\n// console.log(minSubArraySum([-1, -2, -3])); // -6<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row exemplify a individual well, \n   and each 1 in a course represents a single unit of water. \n   Each well have a corresponding bucket that can be used to extract water from it, \n   and all bucket have the same capacity.\n   Your task is to use the buckets to evacuate the well. \n   Output the act of time you necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells. Each row exemplify a individual well, \n   and each 1 in a course represents a single unit of water. \n   Each well have a corresponding bucket that can be used to extract water from it, \n   and all bucket have the same capacity.\n   Your task is to use the buckets to evacuate the well. \n   Output the act of time you necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const rows = grid.length\n  const cols = grid[0].length\n  let buckets = new Array(cols)\n\n  for (let i = 0; i < cols; i++) {\n    buckets[i] = new Array(rows)\n  }\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        buckets[j][i] = capacity\n      }\n    }\n  }\n\n  let used = 0\n  for (let i = 0; i < cols; i++) {\n    for (let j = 0; j < rows; j++) {\n      if (buckets[i][j] > 0) {\n        used += 1\n      }\n    }\n  }\n\n  return used\n}\n\nconst main = async () => {\n  const grid = [\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1]\n  ]\n  const capacity = 1\n  const expected = 6\n\n  let got = await maxFill(grid, capacity)\n\n  console.log(`The expected was: ${expected}`)\n  console.log(`The got was:   ${got}`)\n\n  if (got === expected) {\n    console.log(`The answer is correct`)\n  } else {\n    console.log(`The answer is wrong`)\n  }\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortNumber = (x) => x % 2\n  const sortDecimal = (x) => x / 2\n  const arrLength = arr.length\n  let temp = [0, 0]\n  let tempLength = 0\n  for (let i = 0; i < arrLength; i++) {\n    if (arr[i] === 0) {\n      tempLength++\n      temp[tempLength - 1] = i\n    }\n  }\n  tempLength++\n  for (let i = 1; i < tempLength; i++) {\n    if (sortNumber(arr[temp[i - 1]]) > sortNumber(arr[temp[i]])) {\n      arr[temp[i - 1]] = arr[temp[i]]\n      arr[temp[i]] = temp[i - 1]\n    }\n  }\n  tempLength--\n  while (tempLength > 0) {\n    let minNumber = temp[0]\n    let minPosition = 0\n    let minNumberIndex = temp[0]\n    for (let i = 1; i < tempLength; i++) {\n      if (sortDecimal(arr[temp[i]]) < sortDecimal(arr[minNumber])) {\n        minNumber = temp[i]\n        minPosition = i\n      }\n    }\n    arr[temp[minPosition]] = minNumber\n    temp.splice(minPosition, 1)\n    tempLength--\n  }\n  return arr\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tax to follow through \n   a function that returns a list of all word from string s that hold exactly \n   n consonant, in ordering these words appear in the chain s.\n   If the string s is empty then the function should return an empty list.\n   bill: you may assume the stimulation bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you have been tax to follow through \n   a function that returns a list of all word from string s that hold exactly \n   n consonant, in ordering these words appear in the chain s.\n   If the string s is empty then the function should return an empty list.\n   bill: you may assume the stimulation bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  let curr = [];\n  for (let i = 0; i < n; i++) {\n    curr = [...s.split('').filter(x => x ==='')];\n    if (!curr.length) {\n      res = [];\n      break;\n    }\n    res.push(curr);\n    s = s.replace(curr[0], '');\n  }\n  return res;\n};\n\n// console.log(selectWords(\"Mary had a little lamb\", 4));\n// console.log(selectWords(\"Mary had a little lamb\", 3));\n// console.log(selectWords(\"simple white space\", 2));\n// console.log(selectWords(\"Hello world\", 4));\n// console.log(selectWords(\"Uncle sam\", 3));\n\n/*\nGiven two strings s and t, write a function to determine if t is an anagram of s.\n\nFor example,\ns = \"anagram\", t = \"nagaram\", return true.\ns = \"rat\", t = \"car\", return false.\n\nNote:\nYou may assume the string contains only lowercase alphabets.\n*/\nconst isAnagram = (s, t) => {\n  if (!s ||!t) return false;\n  const map = new Map();\n  for (let i = 0; i < s.length; i++) {\n    map.set(s[i], true);\n  }\n  for (let i = 0; i < t.length; i++) {\n    if (map.has(t[i])) map.delete(t[i]);\n    else return false;\n  }\n  return map.size === 0;\n};\n\n// console.log(isAnagram(\"anagram\", \"nagaram\"));\n// console.log(isAnagram(\"rat\", \"car\"));\n// console.log(isAnagram(\"ab\", \"aa\"));\n// console.log(isAnagram(\"ab\", \"a\"));\n// console.log(isAnagram(\"ab\", \"ab\"));\n// console.log(isAnagram(\"ab\", \"ba\"));\n// console.log(isAnagram(\"a\", \"aa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n   two consonant from the good slope of the word (case sensible). \n  \n   vowel in the beginning and termination doesn't count. Return empty string if you didn't \n   find any vowel met the above condition. \n\n   You may bear that the given chain contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n   two consonant from the good slope of the word (case sensible). \n  \n   vowel in the beginning and termination doesn't count. Return empty string if you didn't \n   find any vowel met the above condition. \n\n   You may bear that the given chain contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n    if (word === '') return '';\n\n    const letters = word.split('');\n    let lastVowel = '';\n\n    for (let i = 0; i < letters.length - 1; i++) {\n        if (isVowel(letters[i]) && isVowel(letters[i + 1])) {\n            lastVowel = letters[i + 1];\n            break;\n        }\n    }\n\n    if (lastVowel === '') return '';\n\n    const firstVowel = letters[0];\n    const secondVowel = letters[1];\n    const distance = Math.abs(firstVowel.charCodeAt(0) - lastVowel.charCodeAt(0));\n    const closestVowel = lastVowel.charAt(0);\n\n    for (let i = 0; i < distance; i++) {\n        if (isVowel(closestVowel)) {\n            return closestVowel;\n        }\n        closestVowel = closestVowel.charAt(1);\n    }\n\n    return '';\n};\n\n/*\n  Given a string, find the longest substring that contains at least one vowel.\n  \n  Return empty string if you didn't find any vowel met the above condition. \n  \n  Example:\n  getLongestVowel(\"yogurt\") ==> \"ogurt\"\n  getLongestVowel(\"FULL\") ==> \"FULL\"\n  getLongestVowel(\"quick\") ==> \"quick\"\n  getLongestVowel(\"ab\") ==> \"ab\"\n  getLongestVowel(\"\") ==> \"\"\n  */\nconst getLongestVowel = (word) => {\n    if (word === '') return '';\n\n    let lastVowel = '';\n    let longestVowel = '';\n\n    for (let i = 0; i < word.length - 1; i++) {\n        if (isVowel(word.charAt(i)) && isVowel(word.charAt(i + 1))) {\n            lastVowel = word.charAt(i + 1);\n            longestVowel = word.substring(i, i + 2);\n        }\n    }\n\n    if (longestVowel === '') return '';\n\n    return longestVowel;\n};\n\n/*\n  Given a string, find the first vowel that stands between two consonants.\n  \n  Return empty string if you didn't find any vowel met the above condition. \n  \n  Example:\n  getFirstVowel(\"yogurt\") ==> \"o\"\n  getFirstVowel(\"FULL\") ==> \"f\"\n  getFirstVowel(\"quick\") ==> \"\"\n  getFirstVowel(\"ab\") ==> \"\"\n  getFirstVowel(\"\") ==> \"\"\n  */\nconst getFirstVowel = (word) => {\n    if (word === '') return '';\n\n    const letters = word.split('');\n    let lastVowel = '';\n\n    for (let i = 0; i < letters.length - 1; i++) {\n        if (isVowel(letters[i]) && isVowel(letters[i + 1])) {\n            lastVowel = letters[i + 1];\n            break;\n        }\n    }\n\n    if (lastVowel === '') return '';\n\n    const firstVowel = letters[0];\n    const secondVowel = letters[1];\n    const distance = Math.abs(firstVowel.charCodeAt(0) - lastVowel.charCodeAt(0));\n    const firstVowelIndex = letters.indexOf(firstVowel);\n    const secondVowelIndex = letters.indexOf(secondVowel);\n\n    for (let i = 0; i < distance; i++) {\n        if (isVowel(letters[firstVowelIndex + i + 1])) {\n            return letters[firstVowelIndex + i + 1];\n        }\n    }\n\n    return '';\n};\n\nmodule.exports = {\n    getClosestVowel,\n    getLongestVowel,\n    getFirstVowel\n};<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of capable \n   digression' (' or close parentheses')' merely. \n   Your job is to control if it is potential to concatenate the two string in\n   some order, that the result string will be adept. \n   A string S is considered to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings, both strings consist of capable \n   digression' (' or close parentheses')' merely. \n   Your job is to control if it is potential to concatenate the two string in\n   some order, that the result string will be adept. \n   A string S is considered to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n    const stack = []\n    const isGood = (p) => {\n        stack.push(p)\n        if (stack.length === 2) {\n            stack.pop()\n            return (stack.length === 1)\n        }\n        if (stack.length === 1) {\n            return (stack.pop() === ')')\n        }\n        return false\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] === '(') {\n            if (isGood(lst[i + 1])) {\n                lst.splice(i, 3, lst[i + 1])\n                i += 2\n            }\n        } else if (lst[i] === ')') {\n            if (isGood(lst[i - 1])) {\n                lst.splice(i, 3, lst[i - 1])\n                i -= 2\n            }\n        }\n    }\n    return lst.length === 1 && stack.length === 1 && stack[0] === ')'? 'Yes' : 'No'\n}\n\nconsole.log(matchParens([])); // No\nconsole.log(matchParens([])); // No\nconsole.log(matchParens(['(', ')', ')', '('])); // No\nconsole.log(matchParens(['(', ')', ')', '('])); // Yes\nconsole.log(matchParens([])); // No\nconsole.log(matchParens([])); // No\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of duration k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of duration k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    let index = 0\n    let max = arr[0]\n    for (let i = 1; i < k; i++) {\n        if (arr[i] > max) {\n            index = i\n            max = arr[i]\n        }\n    }\n    return arr.slice(0, index + 1)\n}\n\nmodule.exports = maximum\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in even military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in even military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let even = lst[i] % 2 === 0;\n    if (even) sum += lst[i];\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements2 = (arr, k) => {\n    let sum = 0\n    let i = 0\n    while (i < k) {\n        sum += arr[i]\n        i += 1\n    }\n    return sum\n}\n\nconst addElements3 = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements4 = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements5 = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements6 = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements7 = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements8 = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements9 = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements10 = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements11 = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements12 = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements13 = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements14 = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements15 = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements16 = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements17 = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements18 = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements19 = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements20 = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements21 = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements22 = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements23 = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements24 = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements25 = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements26 = (arr, k) => {\n    let sum = 0\n    for (let i = 0; i < k; i++) {\n        sum += arr[i]\n    }\n    return sum\n}\n\nconst addElements27 = (arr, k) => {\n"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that take the curious number in collatz sequence. \n\n   The Collatz guess is a conjecture in mathematics that concern a succession defined \n   as follow: start with any positive integer n. Then each condition is obtained from the \n   previous term as stick to: if the former term be even, the adjacent term is one half of \n   the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list classify in increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that take the curious number in collatz sequence. \n\n   The Collatz guess is a conjecture in mathematics that concern a succession defined \n   as follow: start with any positive integer n. Then each condition is obtained from the \n   previous term as stick to: if the former term be even, the adjacent term is one half of \n   the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list classify in increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  if(n < 1) return []\n  let curr = n\n  let res = []\n  while(curr > 1) {\n    if(curr % 2 === 0) {\n      curr = curr / 2\n    }else{\n      curr = 3 * curr + 1\n    }\n    res.push(curr)\n  }\n  return res\n}\n\nconsole.log(getOddCollatz(3))\nconsole.log(getOddCollatz(5))\nconsole.log(getOddCollatz(6))<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a grant date chain and \n   reappearance genuine if the date is valid differently false. \n   The date is valid if all of the following rule are satisfied: \n   1. The date string is not empty. \n   2. The issue of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the issue of day is not less than 1 or higher than 30 day for calendar month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. \n   3. The month should not be less than 1 or high than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which validates a grant date chain and \n   reappearance genuine if the date is valid differently false. \n   The date is valid if all of the following rule are satisfied: \n   1. The date string is not empty. \n   2. The issue of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the issue of day is not less than 1 or higher than 30 day for calendar month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. \n   3. The month should not be less than 1 or high than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const year = dateArray[2];\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[0], 10);\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day > 30) return false;\n  if (month === 2 && day > 29) return false;\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) return false;\n  }\n  if (month === 1 && year < 2000) return false;\n  if (month === 3 && year < 2000) return false;\n  if (month === 5 && year < 2000) return false;\n  if (month === 7 && year < 2000) return false;\n  if (month === 8 && year < 2000) return false;\n  if (month === 10 && year < 2000) return false;\n  if (month === 12 && year < 2000) return false;\n  if (day === 31) return false;\n  return true;\n};\n\n/*\n  Write a function to check whether a given string is an integer or not\n  */\nconst isInteger = (num) => {\n  const INT_PATTERN = /^\\d+$/;\n  return!!(num && INT_PATTERN.test(num));\n};\n\n/*\n  Write a function to check whether a given string is an alphanumeric or not\n  */\nconst isAlphaNumeric = (str) => {\n  return!!(str.match(/^[a-zA-Z0-9]+$/));\n};\n\nconst isValidDate = (date) => {\n  const dateArray = date.split('-');\n  const year = dateArray[2];\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[0], 10);\n  return (year < 3000 || year > 3000) && (month < 1 || month > 12) && (day < 1 || day > 31) && (month!== 2 || day > 29) && (month!== 4 || month!== 6 || month!== 9 || month!== 11) && (month!== 1 || day <= 30) && (month!== 3 || day <= 29) && (month!== 5 || day <= 30) && (month!== 7 || day <= 30) && (month!== 8 || day <= 30) && (month!== 10 || day <= 30) && (month!== 12 || day <= 30) && (day!== 31) && (year < 2000 || year > 2000) && (month < 1 || month > 12) && (day < 1 || day > 30) && (month!== 2 || day > 29) && (month!== 4 || month!== 6 || month!== 9 || month!== 11) && (month!== 1 || day <= 30) && (month!== 3 || day <= 29) && (month!== 5 || day <= 30) && (month!== 7 || day <= 30) && (month!== 8 || day <= 30) && (month!== 10 || day <= 30) && (month!== 12 || day <= 30) && (day!== 31) && (year < 2000 || year > 2000) && (month < 1 || month > 12) && (day < 1 || day > 30) && (month!== 2 || day > 29) && (month!== 4 || month!== 6 || month!== 9 || month!== 11) && (month!== 1 || day <= 30) && (month!== 3 || day <= 29) && (month!== 5 || day <= 30) && (month!== 7 || day <= 30) && (month!== 8 || day <= 30) && (month!== 10 || day <= 30) && (month!== 12 || day <= 30) && (day!== 31) && (year < 2000 || year > 2000) && (month < 1 || month > 12) && (day < 1 || day > 30) && (month!== 2 || day > 29) && (month!== 4 || month!== 6 || month!== 9 || month!== 11) && (month!== 1 || day <= 30) && (month!== 3 || day <= 29) && (month!== 5 || day <= 30) && (month!== 7 || day <= 30) && (month!== 8 || day <= 30) && (month!== 10 || day <= 30) && (month!== 12 || day <= 30) && (day!== 31) && (year < 2000 || year > 2000) && (month < 1 || month > 12) && (day < 1 || day > 30) && (month!== 2 || day > 29) && (month!== 4 || month!== 6 || month!== 9 || month!== 11) && (month!== 1 || day <= 30) && (month!== 3 || day <= 29) && (month!== 5 || day <= 30) && (month!== 7 || day <= 30) && (month!== 8 || day <= 30) && (month!== 10 || day <= 30) && (month!== 12 || day <= 30) && (day!== 31) && (year < 2000 || year > 2000) && (month < 1 || month > 12) && (day < 1 || day > 30) && (month!== 2 || day > 29) && (month!== 4 || month!== 6 || month!== 9 || month!== 11) && (month!== 1 || day <= 30) && (month!== 3"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const str = txt.trim().toLowerCase();\n  const parts = str.split(/\\s/);\n  const phone = str.replace(/[^a-z]/g, \"\").split(/\\s*\\,/);\n  const words = parts.concat(phone);\n  return words.filter(w => w.length > 0);\n};\n\n/* Given a list of strings, return a list of words with all words joined together.\n  Examples\n  joinWords([\"Hello\", \"world!\"]) ➞ \"Hello world!\"\n  joinWords([\"Hello\", \"world!\", \"Goodbye\"]) ➞ \"Hello world! Goodbye\"\n  joinWords([\"Hello\", \"world!\", \"Goodbye\", \"Ciao\"]) ➞ \"Hello world! Goodbye Ciao\"\n  joinWords([\"Hello\", \"world!\", \"Goodbye\", \"Ciao\", \"Salute\"]) ➞ \"Hello world! Goodbye Ciao Salute\"\n  joinWords([\"Hello\", \"world!\", \"Goodbye\", \"Ciao\", \"Salute\", \"Greetings\"]) ➞ \"Hello world! Goodbye Ciao Salute Greetings\"\n  */\nconst joinWords = (txt) => {\n  return txt.reduce((res, w) => {\n    if (w) {\n      res.push(w);\n    }\n    return res;\n  }, []);\n};\n\n/* Given a list of words, return the words with no repeating letters.\n  Examples\n  noRepeatingLetters([\"Hello\", \"world!\", \"Goodbye\", \"Ciao\", \"Salute\", \"Greetings\"]) ➞ [\"Hello\", \"world!\", \"Goodbye\", \"Ciao\", \"Salute\", \"Greetings\"]\n  noRepeatingLetters([\"Hello\", \"world!\", \"Goodbye\", \"Ciao\", \"Salute\"]) ➞ [\"Hello\", \"world!\", \"Goodbye\", \"Ciao\", \"Salute\"]\n  noRepeatingLetters([\"Hello\", \"world!\", \"Goodbye\", \"Ciao\"]) ➞ [\"Hello\", \"world!\", \"Goodbye\", \"Ciao\"]\n  noRepeatingLetters([\"Hello\", \"world!\", \"Goodbye\"]) ➞ [\"Hello\", \"world!\", \"Goodbye\"]\n  */\nconst noRepeatingLetters = (txt) => {\n  return txt.reduce((res, w) => {\n    if (res.indexOf(w) === -1) {\n      res.push(w);\n    }\n    return res;\n  }, []);\n};\n\n/* Given a list of strings, return the words that are less than 6 letters long.\n  Examples\n  shortWords([\"Hello\", \"world!\", \"Goodbye\", \"Ciao\", \"Salute\", \"Greetings\"]) ➞ [\"Hello\", \"world!\", \"Goodbye\", \"Ciao\", \"Salute\"]\n  shortWords([\"Hello\", \"world!\", \"Goodbye\", \"Ciao\", \"Salute\"]) ➞ [\"Hello\", \"world!\", \"Goodbye\", \"Ciao\", \"Salute\"]\n  shortWords([\"Hello\", \"world!\", \"Goodbye\"]) ➞ [\"Hello\", \"world!\", \"Goodbye\"]\n  shortWords([\"Hello\", \"world!\", \"Goodbye\", \"Ciao\"]) ➞ [\"Hello\", \"world!\", \"Goodbye\", \"Ciao\"]\n  shortWords([\"Hello\", \"world!\", \"Goodbye\", \"Ciao\", \"Salute\", \"Greetings\"]) ➞ [\"Hello\", \"world!\", \"Goodbye\", \"Ciao\", \"Salute\"]\n  */\nconst shortWords = (txt) => {\n  return txt.reduce((res, w) => {\n    if (w.length <= 6) {\n      res.push(w);\n    }\n    return res;\n  }, []);\n};\n\n/* Given a list of strings, return the words that are between 5 and 10 letters long.\n  Examples\n  wordsWithLength([\"Hello\", \"world!\", \"Goodbye\", \"Ciao\", \"Salute\", \"Greetings\"]) ➞ [\"Hello\", \"world!\", \"Goodbye\", \"Ciao\", \"Salute\"]\n  wordsWithLength([\"Hello\", \"world!\", \"Goodbye\", \"Ciao\", \"Salute\"]) ➞ [\"Hello\", \"world!\", \"Goodbye\", \"Ciao\", \"Salute\"]\n  wordsWithLength([\"Hello\", \"world!\", \"Goodbye\"]) ➞ [\"Hello\", \"world!\", \"Goodbye\"]\n  wordsWithLength([\"Hello\", \"world!\", \"Goodbye\", \"Ciao\"]) ➞ [\"Hello\", \"world!\", \"Goodbye\", \"Ciao\"]\n  wordsWithLength([\"Hello\", \"world!\", \"Goodbye\", \"Ciao\", \"Salute\", \"Greetings\"]) ➞ [\"Hello\", \"world!\", \"Goodbye\", \"Ciao\", \"Salute\"]\n  */\nconst wordsWithLength = (txt) => {\n  return txt.reduce((res, w) => {\n    if (w.length > 5 && w.length < 11) {\n      res.push(w);\n    }\n    return res;\n  }, []);\n};\n\n/* Given a string of words, return a string with the words joined together, but split on\n   the first appearance of an asterisk (*). The asterisk must be in the word.\n  Examples\n  withAsterisks(\"*Hello world!*\") ➞ \"Hello world!\"\n  withAsterisks(\"*Hello world!*Ciao\") ➞ \"Hello world!Ciao\"\n  withAsterisks(\"Hello world!Ciao*\") ➞ \"Hello world!Ciao\"\n  withAsterisks(\"Hello world!Ciao*Salute\") ➞ \"Hello world!CiaoSalute\"\n  withAsterisks(\"Hello world!Ciao*Salute*Greetings\") ➞ \"Hello world!CiaoSaluteGreetings\"\n  withAsterisks(\"Hello world!Ciao*Salute*Greetings*Salute"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted \n   in ascending decree. If list have more than 1 extra of the like \n   number, return false. simulate no minus numbers and alone integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are sorted \n   in ascending decree. If list have more than 1 extra of the like \n   number, return false. simulate no minus numbers and alone integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n    // if list is empty, return true\n    if(lst.length === 0) return true;\n    \n    // if list has only 1 item, return true\n    if(lst.length === 1) return true;\n    \n    // if list has 2 or more items, compare each item with the previous one\n    for(let i = 1; i < lst.length; i++) {\n        if(lst[i] < lst[i-1]) return false;\n    }\n    \n    // if list has more than 2 items, then all items are sorted\n    return true;\n};\n\n/*\nGiven a list of numbers, return the sum of all the numbers in the list\n*/\nconst sum = (lst) => {\n    let sum = 0;\n    \n    // for each item in the list, add it to the sum\n    for(let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n    }\n    \n    // return the sum\n    return sum;\n};\n\n/*\nGiven two lists, return a list of elements that appear only once in \nboth lists.\n*/\nconst union = (lstA, lstB) => {\n    // a list of all elements in the first list\n    let listA = new Array(lstA);\n    \n    // a list of all elements in the second list\n    let listB = new Array(lstB);\n    \n    // a list of all elements that are in both lists\n    let listC = new Array(lstA.length + lstB.length);\n    \n    // for each element in the first list\n    for(let i = 0; i < lstA.length; i++) {\n        // add the element to the list of unique elements in listA\n        listA[i] = lstA[i];\n        \n        // for each element in the second list\n        for(let j = 0; j < lstB.length; j++) {\n            // if the element is in both lists, add it to the list of unique elements\n            if(lstA[i] === lstB[j]) {\n                listC[i] = lstA[i];\n            }\n        }\n    }\n    \n    // return the list of unique elements\n    return listC;\n};\n\n/*\nGiven a list of numbers, return the maximum number in the list. If the list\nhas no items, return 0.\n*/\nconst max = (lst) => {\n    let max = lst[0];\n    \n    // for each item in the list\n    for(let i = 1; i < lst.length; i++) {\n        // if the item is greater than the current maximum, replace the maximum\n        if(lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    \n    // return the maximum\n    return max;\n};\n\n/*\nGiven two lists, return a list of the elements in the first list that are not in\nthe second list.\n*/\nconst difference = (lstA, lstB) => {\n    // a list of all elements in the first list\n    let listA = new Array(lstA);\n    \n    // a list of all elements in the second list\n    let listB = new Array(lstB);\n    \n    // a list of all elements in the first list\n    let listC = new Array(lstA.length);\n    \n    // for each element in the first list\n    for(let i = 0; i < lstA.length; i++) {\n        // if the element is in the second list, don't add it to the list of the difference\n        if(listB.indexOf(lstA[i]) === -1) {\n            listC[i] = lstA[i];\n        }\n    }\n    \n    // return the difference\n    return listC;\n};\n\n/*\nGiven two lists, return a list of the elements in the first list that are not in\nthe second list.\n*/\nconst intersection = (lstA, lstB) => {\n    // a list of all elements in the first list\n    let listA = new Array(lstA);\n    \n    // a list of all elements in the second list\n    let listB = new Array(lstB);\n    \n    // a list of all elements in the first list\n    let listC = new Array(lstA.length);\n    \n    // for each element in the first list\n    for(let i = 0; i < lstA.length; i++) {\n        // if the element is in the second list, add it to the list of the intersection\n        if(listB.indexOf(lstA[i])!== -1) {\n            listC[i] = lstA[i];\n        }\n    }\n    \n    // return the intersection\n    return listC;\n};\n\n/*\nGiven a list of numbers, return a list of the first N numbers in the list. If\nthe list has fewer than N items, return the entire list.\n*/\nconst firstN = (lst, n) => {\n    // if there are fewer than N items in the list, return the entire list\n    if(lst.length < n) {\n        return lst;\n    }\n    \n    // create a new list with the first N items\n    let listC = new Array(n);\n    \n    // for each item in the list\n    for(let i = 0; i < n; i++) {\n        // add the item to the list of"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval equal a couple of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval equal a couple of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let left = interval1[0];\n  let right = interval1[1];\n  let left2 = interval2[0];\n  let right2 = interval2[1];\n  if (left2 < left) {\n    let tmp = left2;\n    left2 = left;\n    left = tmp;\n  }\n  if (right2 > right) {\n    let tmp = right2;\n    right2 = right;\n    right = tmp;\n  }\n  if (left2 <= left || right2 >= right) {\n    return \"NO\";\n  }\n  let length = Math.abs(right2 - left2);\n  if (length % 2 === 1) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconsole.log(intersection((-1, 1), (0, 4)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-2, -2), (0, 0)));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n   union of magnitude of integer multiply by product of all signs \n   of each number in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need to return\n   union of magnitude of integer multiply by product of all signs \n   of each number in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let product = 1\n  let sum = 0\n  arr.forEach((num) => {\n    if (num === 0) return\n    if (num > 0) {\n      sum += num\n      product *= num\n    }\n    if (num < 0) {\n      sum -= num\n      product *= num\n    }\n  })\n  return sum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cell of the grid incorporate a value. Every integer in the range [ 1, N * N ] \n   inclusive appears exactly once on the cell of the grid.\n\n   You induce to find the minimum path of length k in the grid. You can begin \n   from any cell, and in each step you can move to any of the neighbor cells, \n   in early password, you can go to cell which partake an edge with you current \n   cell. \n   Please note that a path of duration k means travel to exactly k cells (not \n   inevitably discrete). \n   You CANNOT go off the grid.\n   A way A (of distance k) is considered less than a way barn (of length k) if \n   after have the arrange tilt of the values on the cell that A and B plump \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early son, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we consume \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the solution is unique. \n   Return an ordered list of the values on the cells that the minimum way move through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cell of the grid incorporate a value. Every integer in the range [ 1, N * N ] \n   inclusive appears exactly once on the cell of the grid.\n\n   You induce to find the minimum path of length k in the grid. You can begin \n   from any cell, and in each step you can move to any of the neighbor cells, \n   in early password, you can go to cell which partake an edge with you current \n   cell. \n   Please note that a path of duration k means travel to exactly k cells (not \n   inevitably discrete). \n   You CANNOT go off the grid.\n   A way A (of distance k) is considered less than a way barn (of length k) if \n   after have the arrange tilt of the values on the cell that A and B plump \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early son, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we consume \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the solution is unique. \n   Return an ordered list of the values on the cells that the minimum way move through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const len = grid.length;\n  const len2 = len*len;\n  const dp = new Array(len2);\n  const lst = new Array(len2);\n\n  for (let i = 0; i < len2; i++) {\n    dp[i] = Number.MAX_SAFE_INTEGER;\n  }\n  dp[0] = 0;\n\n  let cnt = 0;\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < len; j++) {\n      if (i == 0 || j == 0) {\n        dp[cnt++] = grid[i][j];\n      } else {\n        let cur = Math.min(dp[i-1], dp[j-1]);\n        if (grid[i][j] < grid[i-1][j-1]) {\n          cur = Math.min(cur, grid[i][j]);\n        }\n        dp[cnt++] = cur;\n      }\n    }\n  }\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < len2; i++) {\n    if (min > dp[i]) {\n      min = dp[i];\n    }\n  }\n  let cur = 0;\n  while (cur < k && min > 0) {\n    let lst_cur = [];\n    for (let i = 0; i < len; i++) {\n      for (let j = 0; j < len; j++) {\n        if (grid[i][j] > min) {\n          cur++;\n          lst_cur.push(grid[i][j]);\n          if (cur == k) {\n            break;\n          }\n        }\n      }\n    }\n    lst.push(lst_cur);\n    min = Number.MAX_SAFE_INTEGER;\n  }\n  return lst;\n};\n\n// @begin{test}\nconst grid = [\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n];\n\nconsole.log(minPath(grid, 3));\n// @end{test}\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied profoundly by mathematicians in \n   the final couple hundred. However, what people don't know is Tribonacci sequence. \n   Tribonacci succession is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is curious.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied profoundly by mathematicians in \n   the final couple hundred. However, what people don't know is Tribonacci sequence. \n   Tribonacci succession is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is curious.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = 1\n  let b = 3\n  let c = 1\n  while (c < n) {\n    b = a + b\n    c++\n    a = b\n  }\n  return [a, b, c]\n}\n\nconsole.log(tri(3))\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the leftover digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the leftover digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  return (Math.floor(n)%10 === 0)? 0 : n%10;\n};\n\n/**\n  Given a non-empty string s and a dictionary of words dict, determine if s can be segmented into a space-separated sequence of one or more dictionary words.\n  For example, given\n    s = \"leetcode\"\n    dict = [\"leet\", \"code\"]\n  return true.\n  */\nconst wordBreak = (s, wordDict) => {\n    let words = [];\n    for (let i = 0; i < s.length; i++) {\n        words = words.concat(dictWords(s[i], wordDict));\n    }\n    return words.every(word => {\n        return dictWords(word, wordDict).every(w => {\n            return (s.indexOf(w)!== -1);\n        });\n    });\n};\n\n/**\n  Given a dictionary of words, find all the words that can be formed by concatenating\n  at most R of the dictionary words.\n  For example,\n    dict = [\"leet\", \"code\", \"master\"]\n    R = 2,\n    return [\"leetcode\", \"mastercode\"].\n  */\nconst dictWords = (s, wordDict) => {\n    const set = new Set();\n    let words = [];\n    for (let i = 0; i < s.length; i++) {\n        for (let j = i; j < s.length; j++) {\n            if (wordDict.indexOf(s.slice(i, j + 1))!== -1) {\n                words.push(s.slice(i, j + 1));\n                set.add(s.slice(i, j + 1));\n            }\n        }\n    }\n    return Array.from(set);\n};\n\n/**\n  Given a list of words, return all groups of two or more same-worded words in the list.\n  For example,\n    words = [\"foo\", \"bar\", \"foo\", \"hello\", \"world\"]\n    return [[\"foo\", \"bar\"], [\"hello\", \"world\"]].\n  */\nconst twoWords = (words) => {\n    const set = new Set();\n    for (let i = 0; i < words.length - 1; i++) {\n        for (let j = i + 1; j < words.length; j++) {\n            if (words[i] === words[j]) {\n                set.add(words.slice(i, j + 1));\n            }\n        }\n    }\n    return [...set].filter(x => x.length > 1);\n};\n\n/**\n  Given a string s and a dictionary of words dict, return all the words in dict that can be formed\n  by rearranging the order of the characters in s.\n  For example, given s = \"code\", dict = [\"leet\", \"code\"]\n  return [\"codle\", \"leetcode\"].\n  */\nconst allWords = (s, wordDict) => {\n    const words = [];\n    for (let i = 0; i < s.length; i++) {\n        for (let j = i + 1; j <= s.length; j++) {\n            if (wordDict.indexOf(s.slice(i, j))!== -1) {\n                words.push(s.slice(i, j));\n            }\n        }\n    }\n    return words;\n};\n\nconst test = require('../_test.js');\n\nconst _test = {\n    'wordBreak': test.describe('wordBreak', wordBreak),\n    'allWords': test.describe('allWords', allWords),\n    'twoWords': test.describe('twoWords', twoWords),\n};\n\nmodule.exports = _test;\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ assumed \n   isNested('[]') ➞ assumed \n   isNested('[[][]]') ➞ dependable \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ assumed \n   isNested('[]') ➞ assumed \n   isNested('[[][]]') ➞ dependable \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n  let regex = /\\[\\[\\]\\]/\n  let re = new RegExp(regex)\n  let index = re.exec(string)\n  let brackets = 0\n  while(index!= null){\n    brackets += 1\n    index = re.exec(string)\n  }\n  if(brackets === 0){\n    return true\n  } else if(brackets === 1){\n    return false\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need to return the sum of squared numbers in the give list,\n   round each component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You need to return the sum of squared numbers in the give list,\n   round each component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr, i) => {\n    return prev + Math.pow(curr, 2);\n  }, 0);\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([1,4,9]));\nconsole.log(sumSquares([1,3,5,7]));\nconsole.log(sumSquares([1.4,4.2,0]));\nconsole.log(sumSquares([-2.4,1,1]));<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetical quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetical quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  txt = txt.trim();\n  let l = txt.length;\n  let c = txt[l - 1];\n  if (isALetter(c)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  Create a function that takes a string and returns a boolean that \n  indicates whether or not the string contains an alphabetical \n  character.\n  Examples:\n  containsALetter(\"apple pie\") ➞ false\n  containsALetter(\"apple pi e\") ➞ true\n  containsALetter(\"apple pi e \") ➞ true\n  containsALetter(\"apple pi e \") ➞ false\n  containsALetter(\"\") ➞ false\n  */\nconst containsALetter = (txt) => {\n  txt = txt.trim();\n  let l = txt.length;\n  for (let i = 0; i < l; i++) {\n    let c = txt[i];\n    if (isALetter(c)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Create a function that takes a string and returns a boolean that \n  indicates whether or not the string contains a number.\n  Examples:\n  containsANumber(\"1 2 3\") ➞ true\n  containsANumber(\"\") ➞ false\n  */\nconst containsANumber = (txt) => {\n  txt = txt.trim();\n  let l = txt.length;\n  for (let i = 0; i < l; i++) {\n    let c = txt[i];\n    if (isANumber(c)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Create a function that takes a string and returns a boolean that \n  indicates whether or not the string contains a word.\n  Examples:\n  containsAWord(\"apple pie\") ➞ false\n  containsAWord(\"apple pi e\") ➞ false\n  containsAWord(\"apple pi e \") ➞ false\n  containsAWord(\"apple pi e \") ➞ false\n  containsAWord(\"apple pi e\") ➞ true\n  containsAWord(\"apple pi e \") ➞ true\n  containsAWord(\"apple pie \") ➞ true\n  */\nconst containsAWord = (txt) => {\n  txt = txt.trim();\n  let l = txt.length;\n  for (let i = 0; i < l; i++) {\n    let c = txt[i];\n    if (isAWord(c)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Create a function that takes a string and returns a boolean that \n  indicates whether or not the string contains an alpha-numeric \n  character.\n  Examples:\n  containsAlphaNumeric(\"1 2 3\") ➞ false\n  containsAlphaNumeric(\"\") ➞ false\n  containsAlphaNumeric(\"1 2 3\") ➞ true\n  */\nconst containsAlphaNumeric = (txt) => {\n  txt = txt.trim();\n  let l = txt.length;\n  for (let i = 0; i < l; i++) {\n    let c = txt[i];\n    if (isAlphaNumeric(c)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Create a function that takes a string and returns a boolean that \n  indicates whether or not the string contains a space.\n  Examples:\n  containsASpace(\"1 2 3\") ➞ false\n  containsASpace(\"\") ➞ false\n  containsASpace(\"1 2 3\") ➞ true\n  */\nconst containsASpace = (txt) => {\n  txt = txt.trim();\n  let l = txt.length;\n  for (let i = 0; i < l; i++) {\n    let c = txt[i];\n    if (c === \" \") {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Create a function that takes a string and returns a boolean that \n  indicates whether or not the string contains a letter.\n  Examples:\n  containsALetter(\"1 2 3\") ➞ false\n  containsALetter(\"\") ➞ false\n  containsALetter(\"1 2 3\") ➞ true\n  */\nconst containsALetter = (txt) => {\n  txt = txt.trim();\n  let l = txt.length;\n  for (let i = 0; i < l; i++) {\n    let c = txt[i];\n    if (isALetter(c)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Create a function that takes a string and returns a boolean that \n  indicates whether or not the string contains a number.\n  Examples:\n  containsANumber(\"1 2 3\") ➞ false\n  containsANumber(\"\") ➞ false\n  containsANumber(\"1 2 3\") ➞ true\n  */\nconst containsANumber = (txt) => {\n  txt = txt.trim();\n  let l = txt.length;\n  for (let i = 0; i < l; i++) {\n    let c = txt[i];\n    if (isANumber(c)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Create a function that takes a string and returns a boolean that \n  indicates whether or not the string contains a word.\n  Examples:\n  containsAWord(\"apple pie\") ➞ false\n  containsAWord(\"apple pi e\") ➞ false\n  cont"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let result = -1;\n  let index = -1;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      if (index === -1 || arr[i] > arr[index]) {\n        result = i;\n        index = i;\n      }\n    }\n  }\n\n  return result;\n};\n\n/*\n  The first and last elements of the given array must be equal.\n  The array will not contain duplicate values.\n  The largest number that is a power of 2 is 2^30.\n  The largest number that is a power of 3 is 3^30.\n  The largest number that is a power of 5 is 5^30.\n  The largest number that is a power of 7 is 7^30.\n  The largest number that is a power of 11 is 11^30.\n  The largest number that is a power of 13 is 13^30.\n  The largest number that is a power of 17 is 17^30.\n  The largest number that is a power of 19 is 19^30.\n  The largest number that is a power of 23 is 23^30.\n  The largest number that is a power of 29 is 29^30.\n  The largest number that is a power of 31 is 31^30.\n  The largest number that is a power of 37 is 37^30.\n  The largest number that is a power of 41 is 41^30.\n  The largest number that is a power of 43 is 43^30.\n  The largest number that is a power of 47 is 47^30.\n  The largest number that is a power of 53 is 53^30.\n  The largest number that is a power of 59 is 59^30.\n  The largest number that is a power of 61 is 61^30.\n  The largest number that is a power of 67 is 67^30.\n  The largest number that is a power of 71 is 71^30.\n  The largest number that is a power of 73 is 73^30.\n  The largest number that is a power of 79 is 79^30.\n  The largest number that is a power of 83 is 83^30.\n  The largest number that is a power of 89 is 89^30.\n  The largest number that is a power of 97 is 97^30.\n  The largest number that is a power of 101 is 101^30.\n  The largest number that is a power of 103 is 103^30.\n  The largest number that is a power of 107 is 107^30.\n  The largest number that is a power of 109 is 109^30.\n  The largest number that is a power of 113 is 113^30.\n  The largest number that is a power of 127 is 127^30.\n  The largest number that is a power of 131 is 131^30.\n  The largest number that is a power of 137 is 137^30.\n  The largest number that is a power of 139 is 139^30.\n  The largest number that is a power of 149 is 149^30.\n  The largest number that is a power of 151 is 151^30.\n  The largest number that is a power of 157 is 157^30.\n  The largest number that is a power of 163 is 163^30.\n  The largest number that is a power of 167 is 167^30.\n  The largest number that is a power of 169 is 169^30.\n  The largest number that is a power of 173 is 173^30.\n  The largest number that is a power of 179 is 179^30.\n  The largest number that is a power of 181 is 181^30.\n  The largest number that is a power of 191 is 191^30.\n  The largest number that is a power of 193 is 193^30.\n  The largest number that is a power of 197 is 197^30.\n  The largest number that is a power of 199 is 199^30.\n  The largest number that is a power of 211 is 211^30.\n  The largest number that is a power of 223 is 223^30.\n  The largest number that is a power of 227 is 227^30.\n  The largest number that is a power of 229 is 229^30.\n  The largest number that is a power of 233 is 233^30.\n  The largest number that is a power of 239 is 239^30.\n  The largest number that is a power of 241 is 241^30.\n  The largest number that is a power of 251 is 251^30.\n  The largest number that is a power of 257 is 257^30.\n  The largest number that is a power of 263 is 263^30.\n  The largest number that is a power of 271 is 271^30.\n  The largest number that is a power of 277 is 277^30.\n  The largest number that is a power of 281 is 281^30.\n  The largest number that is a power of 283 is 283^30.\n  The largest number that is a power of 289 is 289^30.\n  The largest number that is a power of 299 is 299^30.\n  The largest number that is a power of 301 is 301^30.\n  The largest number that is a power of 307 is 307^30.\n  The largest number that is a power of 311 is 311^30.\n  The largest number that is a power of 313 is 313^30.\n  The largest number that is a power of 317 is 317^30.\n  The largest number that is a power of 331 is 331^30.\n  The largest number that is a power of 337 is 337^30.\n  The largest number that is a power of 347 is 347^30.\n  The largest number that is a power of 349 is 349^30.\n  The largest number that is a power of 353 is 353^30.\n  The largest number that is a power of 359 is 359^30.\n  The largest number that is a power of 367 is 367^30.\n  The largest number that is a power of 373 is 373^30.\n  The largest number that is a power of 379 is 379^30.\n  The largest number that is a power of 383 is 383^30.\n  The largest number that is a power of 389 is 389^30.\n  The largest number that is a power of 397 is 397^30.\n  The largest number that is a power of 409 is 409^30.\n  The largest number"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' equal \n   the big of damaging integer, and 'b' is the smallest \n   of positive integers in a list.\n   If there is no negative or plus integers, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tuple (a, b), where 'a' equal \n   the big of damaging integer, and 'b' is the smallest \n   of positive integers in a list.\n   If there is no negative or plus integers, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n    if (lst.length === 0) {\n        return (null, null);\n    }\n    let result = lst.slice();\n    let min = result[0];\n    let max = result[0];\n    for (let i = 1; i < result.length; i++) {\n        let n = result[i];\n        if (n < min) {\n            min = n;\n        }\n        if (n > max) {\n            max = n;\n        }\n    }\n    if (min === max) {\n        return (null, min);\n    }\n    return (min, max);\n};\n\nlargestSmallestIntegers([2, 4, 1, 3, 5, 7])\n   .then((a, b) => console.log(a, b));\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, float, or string representing \n   real issue, and returns the large variable in its give variable character. \n   Return null if the value are equal. \n   eminence: If a real number is represented as a string, the floating compass point might constitute. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes integers, float, or string representing \n   real issue, and returns the large variable in its give variable character. \n   Return null if the value are equal. \n   eminence: If a real number is represented as a string, the floating compass point might constitute. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    if(a < b){\n      return a;\n    }\n    return b;\n  }\n  if(a === b){\n    return null;\n  }\n  if(typeof a === \"string\" && typeof b === \"string\"){\n    return a + b;\n  }\n  return null;\n}\n \nconst compare = (a, b) = > {\n  return compareOne(a, b);\n}\n \nconst x = 3\n \n \n \n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the union of precisely 4 cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number n can be written as the union of precisely 4 cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let result = true;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*Evaluate whether the given number n can be written as the union of precisely 5 cocksure even numbers\n  Example\n  isEqualToSumEven(5) == false\n  isEqualToSumEven(7) == false\n  isEqualToSumEven(11) == true\n  isEqualToSumEven(13) == true\n  isEqualToSumEven(17) == true\n  */\nconst isEqualToSumEven2 = (n) => {\n  let result = true;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*Evaluate whether the given number n can be written as the union of precisely 5 cocksure even numbers\n  Example\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(12) == true\n  isEqualToSumEven(14) == true\n  isEqualToSumEven(18) == true\n  */\nconst isEqualToSumEven3 = (n) => {\n  let result = true;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*Evaluate whether the given number n can be written as the union of precisely 5 cocksure even numbers\n  Example\n  isEqualToSumEven(7) == false\n  isEqualToSumEven(9) == false\n  isEqualToSumEven(13) == true\n  isEqualToSumEven(15) == true\n  isEqualToSumEven(21) == true\n  */\nconst isEqualToSumEven4 = (n) => {\n  let result = true;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*Evaluate whether the given number n can be written as the union of precisely 5 cocksure even numbers\n  Example\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(16) == true\n  isEqualToSumEven(18) == true\n  isEqualToSumEven(24) == true\n  */\nconst isEqualToSumEven5 = (n) => {\n  let result = true;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*Evaluate whether the given number n can be written as the union of precisely 5 cocksure even numbers\n  Example\n  isEqualToSumEven(9) == false\n  isEqualToSumEven(11) == false\n  isEqualToSumEven(17) == true\n  isEqualToSumEven(19) == true\n  isEqualToSumEven(25) == true\n  */\nconst isEqualToSumEven6 = (n) => {\n  let result = true;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*Evaluate whether the given number n can be written as the union of precisely 5 cocksure even numbers\n  Example\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(22) == true\n  isEqualToSumEven(24) == true\n  isEqualToSumEven(32) == true\n  */\nconst isEqualToSumEven7 = (n) => {\n  let result = true;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*Evaluate whether the given number n can be written as the union of precisely 5 cocksure even numbers\n  Example\n  isEqualToSumEven(13) == false\n  isEqualToSumEven(15) == false\n  isEqualToSumEven(23) == true\n  isEqualToSumEven(25) == true\n  isEqualToSumEven(33) == true\n  */\nconst isEqualToSumEven8 = (n) => {\n  let result = true;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*Evaluate whether the given number n can be written as the union of precisely 5 cocksure even numbers\n  Example\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(16) == false\n  isEqualToSumEven(26) == true\n  isEqualToSumEven(28) == true\n  isEqualToSumEven(42) == true\n  */\nconst isEqualToSumEven9 = (n) => {\n  let result = true;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*Evaluate whether the given number n can be written as the union of precisely 5 cocksure even numbers\n  Example\n  isEqualToSumEven(15) == false\n  isEqualToSumEven(17"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if(n === 0) return 1\n  if(n === 1) return 1\n  if(n === 2) return 2\n  if(n === 3) return 6\n  if(n === 4) return 24\n  return (specialFactorial(n-1) * n)\n}\n\n/* The function will receive an integer as input and should return the sum of\n   its first n factorials.\n  */\nconst sumOfFactorials = (n) => {\n  if(n === 0) return 1\n  if(n === 1) return 1\n  if(n === 2) return 2\n  if(n === 3) return 6\n  if(n === 4) return 24\n  return (specialFactorial(n-1) * n) + (specialFactorial(n-2) * (n-1)) + (specialFactorial(n-3) * (n-2))\n}\n\n/* The function will receive an integer as input and should return the sum of\n   its first n terms of the fibonacci series.\n  */\nconst fibonacciSum = (n) => {\n  if(n === 0) return 0\n  if(n === 1) return 1\n  if(n === 2) return 1\n  if(n === 3) return 2\n  if(n === 4) return 3\n  return fibonacciSum(n-1) + fibonacciSum(n-2)\n}\n\n/* The function will receive an integer as input and should return the sum of\n   its first n terms of the fibonacci series multiplied by the first n terms of\n   the fibonacci series.\n  */\nconst fibonacciSumOfMultiplication = (n) => {\n  if(n === 0) return 0\n  if(n === 1) return 1\n  if(n === 2) return 1\n  if(n === 3) return 2\n  if(n === 4) return 3\n  return fibonacciSum(n-1) * fibonacciSum(n-2)\n}\n\n/* The function will receive an integer as input and should return the sum of\n   the first n terms of the fibonacci series raised to the power of n.\n  */\nconst fibonacciSumOfPower = (n) => {\n  if(n === 0) return 1\n  if(n === 1) return 1\n  if(n === 2) return 2\n  if(n === 3) return 8\n  if(n === 4) return 32\n  return fibonacciSumOfPower(n-1) * fibonacciSumOfPower(n-2)\n}\n\n/* The function will receive an integer as input and should return the sum of\n   the first n terms of the fibonacci series raised to the power of n.\n  */\nconst fibonacciSumOfPowerWithMultiplication = (n) => {\n  if(n === 0) return 1\n  if(n === 1) return 1\n  if(n === 2) return 2\n  if(n === 3) return 8\n  if(n === 4) return 32\n  return fibonacciSumOfPower(n-1) * fibonacciSumOfPower(n-2)\n}\n\n/* The function will receive an integer as input and should return the sum of\n   the first n terms of the fibonacci series raised to the power of n.\n  */\nconst fibonacciSumOfPowerWithMultiplicationWithPow = (n) => {\n  if(n === 0) return 1\n  if(n === 1) return 1\n  if(n === 2) return 2\n  if(n === 3) return 8\n  if(n === 4) return 32\n  return fibonacciSumOfPowerWithMultiplication(n-1) * fibonacciSumOfPowerWithMultiplication(n-2)\n}\n\n/* The function will receive an integer as input and should return the sum of\n   the first n terms of the fibonacci series raised to the power of n.\n  */\nconst fibonacciSumOfPowerWithMultiplicationWithPowWithMultiplication = (n) => {\n  if(n === 0) return 1\n  if(n === 1) return 1\n  if(n === 2) return 2\n  if(n === 3) return 8\n  if(n === 4) return 32\n  return fibonacciSumOfPowerWithMultiplicationWithPow(n-1) * fibonacciSumOfPowerWithMultiplicationWithPow(n-2)\n}\n\n/* The function will receive an integer as input and should return the sum of\n   the first n terms of the fibonacci series raised to the power of n.\n  */\nconst fibonacciSumOfPowerWithMultiplicationWithPowWithMultiplicationWithPow = (n) => {\n  if(n === 0) return 1\n  if(n === 1) return 1\n  if(n === 2) return 2\n  if(n === 3) return 8\n  if(n === 4) return 32\n  return fibonacciSumOfPowerWithMultiplicationWithPowWithMultiplication(n-1) * fibonacciSumOfPowerWithMultiplicationWithPowWithMultiplication(n-2)\n}\n\n/* The function will receive an integer as input and should return the sum of\n   the first n terms of the fibonacci series raised to the power of n.\n  */\nconst fibonacciSumOfPowerWithMultiplicationWithPowWithMultiplicationWithPowWithMultiplication = (n) => {\n  if(n === 0) return 1\n  if(n === 1) return 1\n  if(n === 2) return 2\n  if(n === 3) return 8\n  if(n === 4) return 32\n  return fibonacciSumOfPowerWithMultiplicationWithPowWithMultiplicationWithPow(n-1) * fibonacciSumOfPowerWithMultiplicationWithPowWithMultiplicationWithPow(n-2)\n}\n\n/* The function will receive an integer as input and should return the sum of\n   the first n terms of the fibonacci series raised to the power of n.\n  */\nconst fibonacciSumOfPowerWithMultiplicationWithPowWithMultipl"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  if (text.indexOf(\" \") === -1) return text;\n  let result = \"\";\n  let lastSpace = false;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] ==='') {\n      if (lastSpace) {\n        result += \"_-\";\n      }\n      lastSpace = true;\n    } else {\n      result += text[i];\n      lastSpace = false;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string text, replace all spaces with underscores, and if a bow\n   has more than 2 consecutive spaces, then replace all straight spaces with -\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"Example_2\"\n  fixSpaces(\" Example   3\") == \"Example_3\"\n  */\nconst fixSpaces2 = (text) => {\n  if (text.indexOf(\" \") === -1) return text;\n  let result = \"\";\n  let lastSpace = false;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] ==='') {\n      if (lastSpace) {\n        result += \"_\";\n      }\n      lastSpace = true;\n    } else {\n      result += text[i];\n      lastSpace = false;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string text, replace all spaces with underscores, and if a bow\n   has more than 2 consecutive spaces, then replace all straight spaces with -\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"Example_2\"\n  fixSpaces(\" Example   3\") == \"Example_3\"\n  */\nconst fixSpaces3 = (text) => {\n  if (text.indexOf(\" \") === -1) return text;\n  let result = \"\";\n  let lastSpace = false;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] ==='') {\n      if (lastSpace) {\n        result += \"-\";\n      }\n      lastSpace = true;\n    } else {\n      result += text[i];\n      lastSpace = false;\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  fixSpaces,\n  fixSpaces2,\n  fixSpaces3\n};<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string exemplify a file's name, and fall \n  ' Yes' if the the file's name is valid, and returns' No' differently. \n   A file's name is considered to be valid if and only if all the following condition \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains precisely one department of transportation'.' \n   - The substring before the department of transportation should not be empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a string exemplify a file's name, and fall \n 'Yes' if the the file's name is valid, and returns' No' differently. \n   A file's name is considered to be valid if and only if all the following condition \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains precisely one department of transportation'.' \n   - The substring before the department of transportation should not be empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n    // if (!file_name) {\n    //     return \"No\";\n    // }\n    const regex = /(?=.*\\.(?=[a-zA-Z]))(?![\\d])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*[a-zA-Z])(?=.*\\d)[\\w ]+$/;\n    return regex.test(file_name);\n}\n\nconst main = (args) => {\n    const options = {\n        'prompt': {\n            'inputType': 'text',\n           'message': 'Enter file name:'\n        },\n        'validate': {\n            'fileName': fileNameCheck\n        }\n    };\n    const result = inquirer.prompt(options);\n    console.log(`Result: ${JSON.stringify(result)}`);\n}\n\nmain(process.argv);\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n\n  const sum = lst.reduce((previous, current) => previous + current, 0);\n  const sumOfSquares = lst.reduce((previous, current) => previous + current * current, 0);\n  const squareSum = lst.reduce((previous, current) => previous + current * current, 0);\n\n  const result = sumOfSquares - sum * sum;\n\n  return result;\n};\n\nexport default sumSquares;\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n   the sentence contains some news separate by a space, \n   and you have to return a chain that contains the quarrel from the original sentence,\n   whose duration are choice numbers, \n   the order of the words in the new chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representing a sentence,\n   the sentence contains some news separate by a space, \n   and you have to return a chain that contains the quarrel from the original sentence,\n   whose duration are choice numbers, \n   the order of the words in the new chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(' ')\n    const count = words.length\n    if (count <= 1) {\n        return words[0]\n    }\n    const wordList = []\n    const newWords = []\n    for (let i = 0; i < count; i++) {\n        const word = words[i]\n        if (word.length > 1) {\n            wordList.push(word)\n        }\n    }\n    for (let i = 0; i < count; i++) {\n        const word = words[i]\n        if (word.length === 1) {\n            newWords.push(wordList.shift())\n        }\n    }\n    return newWords.join(' ')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression \n   x * n. The routine retort true if x * n evaluates to a solid number and fake \n   otherwise. Both x and n, are drawstring representation of a fraction, and have the follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive unharmed numbers. \n\n   You can wear that x, and n are valid fraction, and do not hold zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a function that will simplify the expression \n   x * n. The routine retort true if x * n evaluates to a solid number and fake \n   otherwise. Both x and n, are drawstring representation of a fraction, and have the follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive unharmed numbers. \n\n   You can wear that x, and n are valid fraction, and do not hold zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n   x = x.split(\"/\")\n   x[0] = x[0].trim()\n   x[1] = x[1].trim()\n   n = n.split(\"/\")\n   n[0] = n[0].trim()\n   n[1] = n[1].trim()\n   x[0] = Number(x[0])\n   x[1] = Number(x[1])\n   n[0] = Number(n[0])\n   n[1] = Number(n[1])\n   if (x[0] == 0 || x[1] == 0) return false\n   if (x[0] == 1) return false\n   if (n[0] == 1) return false\n   if (n[1] == 1) return false\n   return (x[0] * n[1] === x[1] * n[0])\n }\n */<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integer \n   in ascending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts the given list of integer \n   in ascending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n\n  const len = nums.length;\n  const sorted = nums.slice();\n  let p = 0;\n  let min = sorted[0];\n\n  for (let i = 0; i < len; i++) {\n    if (sorted[i] < min) {\n      p = i;\n      min = sorted[i];\n    }\n  }\n\n  return [...sorted.slice(0, p), sorted.slice(p).reverse(),...sorted.slice(p + 1).reverse()];\n};\n\n// Test cases\nconsole.log(orderByPoints([1, 11, -1, -11, -12])); // [-1, -11, 1, -12, 11]\nconsole.log(orderByPoints([])); // []\nconsole.log(orderByPoints([1, 2, 2, 3])); // [1, 2, 2, 3]\nconsole.log(orderByPoints([3, 2, 1, 2, 3])); // [1, 2, 2, 3, 3]\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numeral as stimulation and reappearance \n   the numeral of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an array of numeral as stimulation and reappearance \n   the numeral of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  return nums.filter(num => {\n    if (num < 10) {\n      return false;\n    }\n    if (num % 2 === 0) {\n      return false;\n    }\n    return true;\n  });\n};\n\nexport default specialFilter;<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to produce an integer array a of duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to produce an integer array a of duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let array = Array(n).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (array[i] + array[j] + array[k] % 3 === 0) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n};\n\nconst getMaxTriplesDemo = () => {\n  let array = Array(5).fill(0);\n  for (let i = 0; i < 5; i++) {\n    array[i] = i * i - i + 1;\n  }\n  return getMaxTriples(array);\n};\n\nexport { getMaxTriples, getMaxTriplesDemo };\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   equal Mercury, the future one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a function that takes two satellite name as string planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits are \n   settle between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun \n   equal Mercury, the future one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a function that takes two satellite name as string planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits are \n   settle between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n    const planet1s = planet1.split(' ');\n    const planet2s = planet2.split(' ');\n\n    let planet1x = 0;\n    let planet2x = 0;\n\n    for (let i = 0; i < planet1s.length; i++) {\n        if (planet1s[i] === 'Mercury') {\n            planet1x = planet1s[i];\n        } else if (planet1s[i] === 'Venus') {\n            planet1x = planet1s[i];\n        } else if (planet1s[i] === 'Earth') {\n            planet1x = planet1s[i];\n        } else if (planet1s[i] === 'Mars') {\n            planet1x = planet1s[i];\n        } else if (planet1s[i] === 'Jupiter') {\n            planet1x = planet1s[i];\n        } else if (planet1s[i] === 'Saturn') {\n            planet1x = planet1s[i];\n        } else if (planet1s[i] === 'Uranus') {\n            planet1x = planet1s[i];\n        } else if (planet1s[i] === 'Neptune') {\n            planet1x = planet1s[i];\n        }\n    }\n\n    for (let i = 0; i < planet2s.length; i++) {\n        if (planet2s[i] === 'Mercury') {\n            planet2x = planet2s[i];\n        } else if (planet2s[i] === 'Venus') {\n            planet2x = planet2s[i];\n        } else if (planet2s[i] === 'Earth') {\n            planet2x = planet2s[i];\n        } else if (planet2s[i] === 'Mars') {\n            planet2x = planet2s[i];\n        } else if (planet2s[i] === 'Jupiter') {\n            planet2x = planet2s[i];\n        } else if (planet2s[i] === 'Saturn') {\n            planet2x = planet2s[i];\n        } else if (planet2s[i] === 'Uranus') {\n            planet2x = planet2s[i];\n        } else if (planet2s[i] === 'Neptune') {\n            planet2x = planet2s[i];\n        }\n    }\n\n    return (\n        [...planet1s,...planet2s,...planet1x,...planet2x].sort(\n            (a, b) =>\n                Math.abs(\n                    Math.pow(\n                        Math.pow(\n                            Math.pow(a, 2) + Math.pow(b, 2),\n                            1 / 2\n                        ) - Math.pow(\n                            Math.pow(a, 2) + Math.pow(b, 2) -\n                            Math.pow(planet1x, 2) - Math.pow(planet2x, 2)\n                        )\n                    )\n                )\n        )\n    );\n};\n\nbf('Jupiter', 'Neptune') ==> ['Saturn', 'Uranus', 'Earth', 'Mars', 'Jupiter']\nbf('Earth', 'Mercury') ==> []\nbf('Mercury', 'Uranus') ==> ['Venus']\nbf('Mercury', 'Jupiter') ==> ['Venus']\nbf('Mercury', 'Saturn') ==> ['Venus']\nbf('Jupiter', 'Saturn') ==> ['Uranus']\nbf('Jupiter', 'Uranus') ==> ['Mercury']\nbf('Jupiter', 'Mars') ==> ['Mercury']\nbf('Mercury', 'Mars') ==> ['Venus']\nbf('Mercury', 'Earth') ==> ['Venus']\nbf('Mars', 'Jupiter') ==> ['Mercury']\nbf('Mars', 'Saturn') ==> ['Mercury']\nbf('Saturn', 'Jupiter') ==> ['Uranus', 'Mercury']\nbf('Saturn', 'Uranus') ==> ['Mercury']\nbf('Saturn', 'Mercury') ==> ['Venus']\nbf('Saturn', 'Earth') ==> ['Venus']\nbf('Saturn', 'Mars') ==> ['Venus']\nbf('Saturn', 'Uranus') ==> ['Mercury']\nbf('Saturn', 'Neptune') ==> ['Mercury']\nbf('Uranus', 'Mercury') ==> ['Venus']\nbf('Uranus', 'Jupiter') ==> ['Mercury']\nbf('Uranus', 'Saturn') ==> ['Mercury']\nbf('Uranus', 'Neptune') ==> ['Mercury']\nbf('Uranus', 'Earth') ==> ['Mercury']\nbf('Uranus', 'Mars') ==> ['Mercury']\nbf('Uranus', 'Saturn') ==> ['Mercury']\nbf('Uranus', 'Jupiter') ==> ['Mercury']\nbf('Neptune', 'Jupiter') ==> ['Mercury']\nbf('Neptune', 'Saturn') ==> ['Mercury']\nbf('Neptune', 'Uranus') ==> ['Mercury']\nbf('Neptune', 'Earth') ==> ['Mercury']\nbf('Neptune', 'Mars') ==> ['Mercury']\nbf('Neptune', 'Saturn') ==> ['Mercury']\nbf('Neptune', 'Jupiter') ==> ['Mercury']\nbf('Neptune', 'U"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a argument, \n   deletes the drawstring that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of strings in screen order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings as a argument, \n   deletes the drawstring that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of strings in screen order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  return lst.sort((a, b) => a.length - b.length);\n}\n\nconst list_sort = (lst) => {\n  return sortedListSum(lst).sort((a, b) => a - b);\n}\n\n/*\n  Write a function that accepts a list of integers as a argument, \n   deletes the drawstring that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of integers and never an array of strings, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of integers in screen order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_sort([1, 2, 3, 4]) => [1, 2, 3, 4]\n  assert list_sort([1, 2, 3, 4, 5]) => [1, 2, 3, 4, 5]\n  assert list_sort([2, 2, 2, 2, 2]) => [2, 2, 2, 2, 2]\n  */\nconst sortedListSum = (lst) => {\n  return lst.sort((a, b) => a - b);\n}\n\nconst list_sort = (lst) => {\n  return sortedListSum(lst).sort((a, b) => a - b);\n}\n\n/*\n  Write a function that takes a string as a argument, \n   deletes the drawstring that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of strings and never an array of integers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of strings in screen order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_sort(\"a b c\") => [\"a\", \"b\", \"c\"]\n  assert list_sort(\"a b c d\") => [\"a\", \"b\", \"c\", \"d\"]\n  assert list_sort(\"a b c d e\") => [\"a\", \"b\", \"c\", \"d\", \"e\"]\n  */\nconst list_sort = (str) => {\n  return str.toLowerCase().split(\" \").sort((a, b) => a.length - b.length).join(\" \");\n}\n\nconst list_sort = (str) => {\n  return str.toLowerCase().split(\" \").sort((a, b) => a.length - b.length).join(\" \");\n}\n\nconst list_sort = (str) => {\n  return str.toLowerCase().split(\" \").sort((a, b) => a.length - b.length).join(\" \");\n}\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*\n  In this program, a variable should be defined which is equal to the value of the\n  first choice number.\n\n  Examples:\n  for xOrY2(7, 34, 12) == 34\n  for xOrY2(15, 8, 5) == 5\n  \n  */\nconst xOrY2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*\n  In this program, a variable should be defined which is equal to the value of the\n  second choice number.\n\n  Examples:\n  for xOrY2(7, 34, 12) == 12\n  for xOrY2(15, 8, 5) == 5\n  \n  */\nconst xOrY3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*\n  In this program, a variable should be defined which is equal to the value of the\n  second choice number.\n\n  Examples:\n  for xOrY3(7, 34, 12) == 12\n  for xOrY3(15, 8, 5) == 5\n  \n  */\nconst xOrY4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*\n  In this program, a variable should be defined which is equal to the value of the\n  second choice number.\n\n  Examples:\n  for xOrY4(7, 34, 12) == 5\n  for xOrY4(15, 8, 5) == 5\n  \n  */\nconst xOrY5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrY25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   if (lst.size() == 0) {\n     return 0\n   }\n   sum = 0\n   for (i = 0; i < lst.size(); i++) {\n     if (lst[i] % 2!= 0) {\n       sum += lst[i] * lst[i]\n     }\n   }\n   return sum\n } \n * / \n * @param args\n */\npublic class DoubleTheDifference {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tdoubleTheDifference(new int[] {1, 3, 2, 0});\n\t}\n\t\n\tpublic static double doubleTheDifference(int[] arr) {\n\t\tdouble sum = 0;\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tif (arr[i] % 2!= 0) {\n\t\t\t\tsum += arr[i] * arr[i];\n\t\t\t}\n\t\t}\n\t\treturn sum;\n\t}\n\n}\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the solution of some long - expect \n   consequence is last known. The feelings and thoughts you have at that consequence are \n   definitely deserving noting down and compare. \n   Your task is to determine if a person correctly think the results of a number of matches. \n   You are feed two array of scores and guess of adequate length, where each index shows a match. \n   Return an array of the like length announce how far off each guess was. If they have estimate correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling when the solution of some long - expect \n   consequence is last known. The feelings and thoughts you have at that consequence are \n   definitely deserving noting down and compare. \n   Your task is to determine if a person correctly think the results of a number of matches. \n   You are feed two array of scores and guess of adequate length, where each index shows a match. \n   Return an array of the like length announce how far off each guess was. If they have estimate correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n    let correct = 0;\n    for (let i = 0; i < game.length; i++) {\n        if (game[i] === guess[i]) {\n            correct++;\n        }\n    }\n    let diff = 0;\n    for (let i = 0; i < game.length; i++) {\n        diff += Math.abs(game[i] - guess[i]);\n    }\n    return [correct, diff];\n};\n\nmodule.exports = compare;\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be use to load extra class to the course. The \n   strength of the extension is as follows: Let CAP equal the number of the capital \n   letters in the propagation's name, and let SM embody the number of lowercase letters \n   in the extension's name, the persuasiveness is give by the fraction CAP - SM. \n   You should discover the strong extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there embody two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be use to load extra class to the course. The \n   strength of the extension is as follows: Let CAP equal the number of the capital \n   letters in the propagation's name, and let SM embody the number of lowercase letters \n   in the extension's name, the persuasiveness is give by the fraction CAP - SM. \n   You should discover the strong extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there embody two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const CAP = class_name.length - class_name.replace(/\\W/g, '').length;\n  const SM = extensions.length - extensions.replace(/\\W/g, '').length;\n  let strong_extension = '.';\n  let strong_extension_name = 'None';\n  let strong_extension_strength = -1;\n  let strong_extension_strength_index = 0;\n  extensions.forEach((extension, index) => {\n    const strength = CAP - SM;\n    const extension_strength = strength - index;\n    if (extension_strength > strong_extension_strength) {\n      strong_extension = extension;\n      strong_extension_name = extension;\n      strong_extension_strength = extension_strength;\n      strong_extension_strength_index = index;\n    }\n  });\n  return class_name + '.' + strong_extension_name;\n};\n\nconst main = (number_of_tests) => {\n  for (let i = 0; i < number_of_tests; i++) {\n    const test_input = readline();\n    const test_output = strongestExtension(test_input, test_input.split(''));\n    console.log(`${test_input} = ${test_output}`);\n  }\n};\n\nmain(parseInt(process.argv[2], 10));\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > fake \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > fake \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n    let m = a.length\n    let n = b.length\n    if (m!= n) return false\n    let i = 0\n    while (i < m) {\n        if (a[i]!= b[i]) return false\n        i++\n    }\n    return true\n}\n\n\nconst cycpatternCheck = (a, b) = > {\n    let m = a.length\n    let n = b.length\n    let m2 = b.length\n    let m1 = a.length\n    if (m!= n) return false\n    if (m2!= m1) return false\n    let i = 0\n    while (i < m) {\n        if (a[i]!= b[i]) return false\n        i++\n    }\n    return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let even = 0;\n    let odd = 0;\n    for (let i = 0; i < num.toString().length; i++) {\n        if (num % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num = num / 10;\n    }\n    return (even, odd);\n};\n\nconst test = (actual, expected) => {\n    if (actual!== expected) {\n        console.log(`You're wrong. The answer is ${expected}`);\n    } else {\n        console.log(`Congratulations! The answer is ${expected}`);\n    }\n};\n\nconst runTest = (testNum) => {\n    let testObj = {};\n    const tests = [\n        {num: 0, expected: 0, test: testObj},\n        {num: 1, expected: 0, test: testObj},\n        {num: 2, expected: 1, test: testObj},\n        {num: 3, expected: 1, test: testObj},\n        {num: 4, expected: 1, test: testObj},\n        {num: 5, expected: 0, test: testObj},\n        {num: 6, expected: 1, test: testObj},\n        {num: 7, expected: 0, test: testObj},\n        {num: 8, expected: 1, test: testObj},\n        {num: 9, expected: 1, test: testObj},\n        {num: 10, expected: 0, test: testObj},\n        {num: 11, expected: 1, test: testObj},\n        {num: 12, expected: 1, test: testObj},\n        {num: 13, expected: 1, test: testObj},\n        {num: 14, expected: 0, test: testObj},\n        {num: 15, expected: 1, test: testObj},\n        {num: 16, expected: 1, test: testObj},\n        {num: 17, expected: 0, test: testObj},\n        {num: 18, expected: 1, test: testObj},\n        {num: 19, expected: 1, test: testObj},\n        {num: 20, expected: 1, test: testObj},\n        {num: 21, expected: 0, test: testObj},\n        {num: 22, expected: 1, test: testObj},\n        {num: 23, expected: 1, test: testObj},\n        {num: 24, expected: 0, test: testObj},\n        {num: 25, expected: 1, test: testObj},\n        {num: 26, expected: 1, test: testObj},\n        {num: 27, expected: 0, test: testObj},\n        {num: 28, expected: 1, test: testObj},\n        {num: 29, expected: 1, test: testObj},\n        {num: 30, expected: 1, test: testObj},\n        {num: 31, expected: 0, test: testObj},\n        {num: 32, expected: 1, test: testObj},\n        {num: 33, expected: 1, test: testObj},\n        {num: 34, expected: 1, test: testObj},\n        {num: 35, expected: 0, test: testObj},\n        {num: 36, expected: 1, test: testObj},\n        {num: 37, expected: 1, test: testObj},\n        {num: 38, expected: 0, test: testObj},\n        {num: 39, expected: 1, test: testObj},\n        {num: 40, expected: 1, test: testObj},\n        {num: 41, expected: 0, test: testObj},\n        {num: 42, expected: 1, test: testObj},\n        {num: 43, expected: 1, test: testObj},\n        {num: 44, expected: 1, test: testObj},\n        {num: 45, expected: 0, test: testObj},\n        {num: 46, expected: 1, test: testObj},\n        {num: 47, expected: 1, test: testObj},\n        {num: 48, expected: 1, test: testObj},\n        {num: 49, expected: 0, test: testObj},\n        {num: 50, expected: 1, test: testObj},\n        {num: 51, expected: 1, test: testObj},\n        {num: 52, expected: 0, test: testObj},\n        {num: 53, expected: 1, test: testObj},\n        {num: 54, expected: 1, test: testObj},\n        {num: 55, expected: 0, test: testObj},\n        {num: 56, expected: 1, test: testObj},\n        {num: 57, expected: 1, test: testObj},\n        {num: 58, expected: 1, test: testObj},\n        {num: 59, expected: 0, test: testObj},\n        {num: 60, expected: 1, test: testObj},\n        {num: 61, expected: 1, test: testObj},\n        {num: 62, expected: 0, test: testObj},\n        {num: 63, expected: 1, test: testObj},\n        {num: 64, expected: 1, test: testObj},\n        {num: 65, expected: 0, test: testObj},\n        {num: 66, expected: 1, test: testObj},\n        {num: 67, expected: 1, test: testObj},\n        {num: 68, expected: 0, test: testObj},\n        {num: 69, expected: 1, test: testObj},\n        {num: 70, expected: 1, test: testObj},\n        {num: 71, expected: 0, test: testObj},\n        {num: 72, expected: 1, test: testObj},\n        {num: 73, expected: 1, test: testObj},\n        {num: 74, expected: 0, test: testObj},\n        {num: 75, expected: 1, test: testObj},\n        {num: 76, expected: 1, test: testObj},\n        {num: 77, expected: 0, test: testObj},\n        {num: 78, expected: 1, test: testObj},\n        {num: 79, expected: 1, test: testObj},\n        {num: 80, expected:"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n    let roman = {\n        'i': 1,\n        'v': 5,\n        'x': 10,\n        'l': 50,\n        'c': 100,\n        'd': 500,\n       'm': 1000\n    };\n\n    let romanStr = '';\n    let index = 0;\n    let i = 1;\n\n    while (number > 0) {\n        if (number >= roman[i]) {\n            number -= roman[i];\n            romanStr += i;\n        } else {\n            i++;\n            index++;\n            if (index % 3 == 0) {\n                romanStr += ',';\n            }\n        }\n    }\n    return romanStr;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (Math.abs(Math.atan2(b - c, a - c)) < Math.PI / 2)\n}\n\n/*\n  Given the lengths of the three sides of a triangle. refund on-key if the triangle \n   is equilateral or not.\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n  return Math.abs(Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) === 0\n}\n\n/*\n Given the lengths of the three sides of a triangle. refund on-key if the triangle \n   is obtuse or not.\n  Example:\n  obtuseTriangle(3, 4, 5) == true\n  obtuseTriangle(1, 2, 3) == false\n  */\nconst obtuseTriangle = (a, b, c) => {\n  return a * b < c * c\n}\n\n/*\n  Given the lengths of the three sides of a triangle. refund on-key if the triangle \n   is acute or not.\n  Example:\n  acuteTriangle(3, 4, 5) == true\n  acuteTriangle(1, 2, 3) == false\n  */\nconst acuteTriangle = (a, b, c) => {\n  return a * b > c * c\n}\n\n/*\n Given the lengths of the three sides of a triangle. refund on-key if the triangle \n   is obtuse or not.\n  Example:\n  obtuseTriangle(3, 4, 5) == true\n  obtuseTriangle(1, 2, 3) == false\n  */\nconst obtuseTriangle = (a, b, c) => {\n  return a * b < c * c\n}\n\n/*\n  Given the lengths of the three sides of a triangle. refund on-key if the triangle \n   is right angle or not.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (Math.abs(Math.atan2(b - c, a - c)) > Math.PI / 2)\n}\n\n/*\n  Given the lengths of the three sides of a triangle. refund on-key if the triangle \n   is equilateral or not.\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n  return Math.abs(Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) === 0\n}\n\n/*\n  Given the lengths of the three sides of a triangle. refund on-key if the triangle \n   is obtuse or not.\n  Example:\n  obtuseTriangle(3, 4, 5) == true\n  obtuseTriangle(1, 2, 3) == false\n  */\nconst obtuseTriangle = (a, b, c) => {\n  return a * b < c * c\n}\n\n/*\n  Given the lengths of the three sides of a triangle. refund on-key if the triangle \n   is acute or not.\n  Example:\n  acuteTriangle(3, 4, 5) == true\n  acuteTriangle(1, 2, 3) == false\n  */\nconst acuteTriangle = (a, b, c) => {\n  return a * b > c * c\n}\n\nconst triangle = (a, b, c) => {\n  return (\n    equilateralTriangle(a, b, c) ||\n    obtuseTriangle(a, b, c) ||\n    acuteTriangle(a, b, c)\n  )\n}\n\n/*\n  Given the lengths of the three sides of a triangle. refund on-key if the triangle \n   is right angle or not.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (Math.abs(Math.atan2(b - c, a - c)) > Math.PI / 2)\n}\n\n/*\n  Given the lengths of the three sides of a triangle. refund on-key if the triangle \n   is equilateral or not.\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n  return Math.abs(Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) === 0\n}\n\n/*\n  Given the lengths of the three sides of a triangle. refund on-key if the triangle \n   is obtuse or not.\n  Example:\n  obtuseTriangle(3, 4, 5) == true\n  obtuseTriangle(1, 2, 3) == false\n  */\nconst obtuseTriangle = (a, b, c) => {\n  return a * b < c * c\n}\n\nconst triangle = (a, b, c) => {\n  return (\n    rightAngleTriangle(a, b, c) ||\n    equilateralTriangle(a, b, c) ||\n    obtuseTriangle(a, b, c)\n  )\n}\n\nconst print = (a, b, c) => {\n  console.log('Equilateral:', equilateralTriangle(a, b, c))\n  console.log('Obtuse:', obtuseTriangle"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings. \n   The list check unlike words. Return the news with maximum numeral \n   of unique quality. If multiple string have maximal number of alone \n   characters, return the one which comes foremost in lexicographical ordering. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings. \n   The list check unlike words. Return the news with maximum numeral \n   of unique quality. If multiple string have maximal number of alone \n   characters, return the one which comes foremost in lexicographical ordering. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   const {max} = words.sort((a, b) => a > b? 1 : -1)\n   return max\n }\n\n*/<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have corrode a sealed number of carrot, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [ total number of eat carrot after your meals, \n                                   the number of carrots left after your meals ] \n   if there exist not enough remaining carrots, you will eat all remaining carrots, but will still be athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have corrode a sealed number of carrot, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [ total number of eat carrot after your meals, \n                                   the number of carrots left after your meals ] \n   if there exist not enough remaining carrots, you will eat all remaining carrots, but will still be athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    if (number < need) {\n        return [need - number, remaining];\n    } else {\n        return [number, remaining];\n    }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operation, and \n   the second list be a list of integers. Use the two given lists to build up the algebric \n   formulation and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operation, and \n   the second list be a list of integers. Use the two given lists to build up the algebric \n   formulation and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const result = []\n  let operandIndex = 0\n  let operatorIndex = 0\n  while (operatorIndex < operator.length) {\n    let operand = operand[operandIndex]\n    let operator = operator[operatorIndex]\n    result.push(operand[0] * operator[0] + operand[1] * operator[1])\n    operandIndex++\n    operatorIndex++\n  }\n  return result\n}\n\nexport default doAlgebra<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  return s.split('').reverse().join('')\n}\n\n/*\n  function: isPalindrome\n  Check if the string is a palindrome or not\n  @param: string\n  @return: boolean\n  Example\n  isPalindrome(\"abcd\") = true\n  isPalindrome(\"aBcD\") = false\n  isPalindrome(\"Aa\") = false\n  isPalindrome(\"AA\") = true\n  isPalindrome(\"AaBb\") = false\n  isPalindrome(\"AaBbCcDd\") = true\n  isPalindrome(\"\") = false\n*/\nconst isPalindrome = (s) => {\n  return s.split('').reverse().join('') === s\n}\n\n/*\n  function: isPalindrome\n  Check if the string is a palindrome or not\n  @param: string\n  @return: boolean\n  Example\n  isPalindrome(\"abcd\") = true\n  isPalindrome(\"aBcD\") = false\n  isPalindrome(\"Aa\") = false\n  isPalindrome(\"AA\") = true\n  isPalindrome(\"AaBb\") = false\n  isPalindrome(\"AaBbCcDd\") = true\n  isPalindrome(\"\") = false\n*/\nconst isPalindrome2 = (s) => {\n  return s.split('').join('') === s.split('').reverse().join('')\n}\n\n/*\n  function: reverse\n  Reverse the string\n  @param: string\n  @return: string\n  Example\n  reverse(\"abcd\") = \"dcba\"\n  reverse(\"AaBbCcDd\") = \"ddccbbaA\"\n*/\nconst reverse = (s) => {\n  return s.split('').reverse().join('')\n}\n\n/*\n  function: rotate\n  Rotate the string by n times\n  @param: string\n  @param: int\n  @return: string\n  Example\n  rotate(\"abcd\", 3) = \"cdab\"\n  rotate(\"abcd\", -3) = \"abcd\"\n*/\nconst rotate = (s, n) => {\n  let result = \"\"\n  for (let i = 0; i < n; i++) {\n    result += s\n  }\n  return result\n}\n\n/*\n  function: rotate\n  Rotate the string by n times\n  @param: string\n  @param: int\n  @return: string\n  Example\n  rotate(\"abcd\", 3) = \"cdab\"\n  rotate(\"abcd\", -3) = \"abcd\"\n*/\nconst rotate2 = (s, n) => {\n  let result = \"\"\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < s.length; j++) {\n      result += s[j]\n    }\n  }\n  return result\n}\n\n/*\n  function: rotate\n  Rotate the string by n times\n  @param: string\n  @param: int\n  @return: string\n  Example\n  rotate(\"abcd\", 3) = \"cdab\"\n  rotate(\"abcd\", -3) = \"abcd\"\n*/\nconst rotate3 = (s, n) => {\n  let result = \"\"\n  let reversed = \"\"\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < s.length; j++) {\n      result += s[j]\n    }\n    reversed += s[s.length - 1]\n  }\n  return reversed\n}\n\n/*\n  function: rotate\n  Rotate the string by n times\n  @param: string\n  @param: int\n  @return: string\n  Example\n  rotate(\"abcd\", 3) = \"cdab\"\n  rotate(\"abcd\", -3) = \"abcd\"\n*/\nconst rotate4 = (s, n) => {\n  let result = \"\"\n  let reversed = \"\"\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < s.length / 2; j++) {\n      result += s[j]\n    }\n    reversed += s[s.length - 1 - j]\n  }\n  return reversed\n}\n\n/*\n  function: rotate\n  Rotate the string by n times\n  @param: string\n  @param: int\n  @return: string\n  Example\n  rotate(\"abcd\", 3) = \"cdab\"\n  rotate(\"abcd\", -3) = \"abcd\"\n*/\nconst rotate5 = (s, n) => {\n  let result = \"\"\n  let reversed = \"\"\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < s.length; j++) {\n      result += s[s.length - 1 - j]\n    }\n    reversed += s[j]\n  }\n  return reversed\n}\n\n/*\n  function: rotate\n  Rotate the string by n times\n  @param: string\n  @param: int\n  @return: string\n  Example\n  rotate(\"abcd\", 3) = \"cdab\"\n  rotate(\"abcd\", -3) = \"abcd\"\n*/\nconst rotate6 = (s, n) => {\n  let result = \"\"\n  let reversed = \"\"\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < s.length / 2; j++) {\n      result += s[j]\n    }\n    reversed += s[s.length - 1 - j]\n  }\n  return reversed\n}\n\n/*\n  function: rotate\n  Rotate the string by n times\n  @param: string\n  @param: int\n  @return: string\n  Example\n  rotate(\"ab"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world')"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even finger between a\n   and b, in ascend order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even finger between a\n   and b, in ascend order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let evenFinger = a\n  for (; evenFinger <= b; evenFinger += 2) {\n    yield evenFinger\n  }\n}\n\nconst generateEvenIntegers = (a, b) =>\n  generateIntegers(a, b).filter(evenFinger => evenFinger % 2 === 0)\n\nconst evenIntegers = generateEvenIntegers(1, 10)\n\nconsole.log(evenIntegers)\n<|endoftext|>"}
