{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const arr = Array.from(numbers);\n  const diffs = arr.map((x, i) => Math.abs(x - arr[(i + 1) % arr.length]));\n  return diffs.some((x, i) => x < threshold);\n};\n\nconst main = () => {\n  console.log(hasCloseElements([1.0, 2.0, 3.0], 0.5));\n  console.log(hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of cuddle parenthesis. Your finish is to \n   separate those group into separate strings and return the list of those. \n   disjoined groups are balanced (each open couple is properly closed) and not nest within each other \n   Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string containing multiple groups of cuddle parenthesis. Your finish is to \n   separate those group into separate strings and return the list of those. \n   disjoined groups are balanced (each open couple is properly closed) and not nest within each other \n   Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const result = [];\n  let current_paren_open = false;\n  let current_paren_close = false;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      if (current_paren_open) {\n        result.push(paren_string.substr(i + 1, paren_string.indexOf(')', i + 1) - i - 1));\n      }\n      else {\n        current_paren_open = true;\n      }\n    }\n    else if (paren_string[i] === ')') {\n      if (current_paren_close) {\n        result.push(paren_string.substr(i + 1, paren_string.indexOf('(', i + 1) - i - 1));\n      }\n      else {\n        current_paren_close = true;\n      }\n    }\n    else {\n      if (current_paren_open) {\n        result.push(paren_string.substr(i, paren_string.indexOf(')', i) - i));\n      }\n    }\n  }\n  if (current_paren_open) {\n    result.push(paren_string.substr(paren_string.indexOf(')', paren_string.length)));\n  }\n  return result;\n};\n\nconst separateParenGroups2 = (paren_string) => {\n  const result = [];\n  let current_paren_open = false;\n  let current_paren_close = false;\n  let current_cuddle = false;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      if (current_paren_open) {\n        result.push(paren_string.substr(i + 1, paren_string.indexOf(')', i + 1) - i - 1));\n      }\n      else {\n        current_paren_open = true;\n      }\n    }\n    else if (paren_string[i] === ')') {\n      if (current_paren_close) {\n        result.push(paren_string.substr(i + 1, paren_string.indexOf('(', i + 1) - i - 1));\n      }\n      else {\n        current_paren_close = true;\n      }\n    }\n    else if (paren_string[i] === ')') {\n      if (current_cuddle) {\n        result.push(paren_string.substr(i + 1, paren_string.indexOf(')', i + 1) - i - 1));\n        current_paren_close = true;\n      }\n      else {\n        current_cuddle = true;\n      }\n    }\n  }\n  if (current_paren_open) {\n    result.push(paren_string.substr(paren_string.indexOf(')', paren_string.length)));\n  }\n  return result;\n};\n\nconst separateParenGroups3 = (paren_string) => {\n  const result = [];\n  let current_paren_open = false;\n  let current_paren_close = false;\n  let current_cuddle = false;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      if (current_paren_open) {\n        result.push(paren_string.substr(i + 1, paren_string.indexOf(')', i + 1) - i - 1));\n      }\n      else {\n        current_paren_open = true;\n      }\n    }\n    else if (paren_string[i] === ')') {\n      if (current_paren_close) {\n        result.push(paren_string.substr(i + 1, paren_string.indexOf('(', i + 1) - i - 1));\n      }\n      else {\n        current_paren_close = true;\n      }\n    }\n    else if (paren_string[i] === ')') {\n      if (current_cuddle) {\n        result.push(paren_string.substr(i + 1, paren_string.indexOf(')', i + 1) - i - 1));\n        current_paren_close = true;\n      }\n      else {\n        current_cuddle = true;\n      }\n    }\n  }\n  if (current_paren_open) {\n    result.push(paren_string.substr(paren_string.indexOf(')', paren_string.length)));\n  }\n  return result;\n};\n\nconst separateParenGroups4 = (paren_string) => {\n  const result = [];\n  let current_paren_open = false;\n  let current_paren_close = false;\n  let current_cuddle = false;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      if (current_paren_open) {\n        result.push(paren_string.substr(i + 1, paren_string.indexOf(')', i + 1) - i - 1));\n      }\n      else {\n        current_paren_open = true;\n      }\n    }\n    else if (paren_string[i] === ')') {\n      if (current_paren_close) {\n        result.push(paren_string.substr(i + 1, paren_string.indexOf('(', i + 1) - i - 1));\n      }\n      else {\n        current_paren_close = true;\n      }\n    }\n    else if (paren_string[i] === ')') {\n      if (current_cuddle) {\n        result.push(paren_string.substr(i + 1, paren_string.indexOf(')', i"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  return Math.floor(number * 10) / 10;\n};\n\n/* \n   Given a decimal number, it can be disintegrated into and integer region \n   (largest integer smaller than given number) and decimals (leftover function \n   always little than 1).\n\n   Return the integer part of the number.\n  >>> truncateNumber(2.3)\n  2\n  */\nconst truncateDecimal = (number) => {\n  return Math.floor(number);\n};\n\nconst printNumber = (number) => {\n  const str = '' + number;\n  const decimal = number - truncateDecimal(number);\n\n  const maxLength = Math.max(str.length, 3);\n  const strWithDecimal = str + '.' + (decimal < 10? '0' : '') + truncateNumber(decimal);\n\n  if (strWithDecimal.length > maxLength) {\n    return '...' + strWithDecimal.substring(maxLength - 3);\n  }\n\n  return strWithDecimal;\n};\n\nconst printTable = (table, width) => {\n  const head = table[0].join('|');\n  const body = table.map(row => row.join('|')).join('\\n');\n\n  return `|${head}|\\n|${body}|`;\n};\n\nconst convertTable = (table, width) => {\n  const width2 = width - table[0].length;\n  const head = table[0].join('|');\n  const body = table.map(row => row.map(row => {\n    if (row.length > width2) {\n      return row.slice(0, width2) + '...';\n    }\n\n    return row;\n  }).join('|')).join('\\n');\n\n  return `|${head}|\\n|${body}|`;\n};\n\nconst convertTableByRows = (rows, width) => {\n  return rows.map(row => row.map(row => {\n    if (row.length > width) {\n      return row.slice(0, width) + '...';\n    }\n\n    return row;\n  }).join('|')).join('\\n');\n};\n\nconst getWidth = (rows) => {\n  return Math.max.apply(Math, rows.map(row => row.length).concat(1));\n};\n\nconst getTable = (rows) => {\n  return rows.map(row => row.map(row => row.length).concat(1)).join('\\n');\n};\n\nconst getTableByRows = (rows) => {\n  return rows.map(row => row.map(row => row.length).concat(1)).join('\\n');\n};\n\nconst getRows = (rows) => {\n  return rows.map(row => row.map(row => row.length).concat(1)).join('\\n');\n};\n\nconst getColumns = (rows) => {\n  return rows.map(row => row.map(row => row.length).concat(1)).join('\\n');\n};\n\nconst getColumnsByRows = (rows) => {\n  return rows.map(row => row.map(row => row.length).concat(1)).join('\\n');\n};\n\nconst getColumnsByLength = (rows, length) => {\n  return rows.map(row => row.map(row => row.length).concat(1)).join('\\n');\n};\n\nconst getLength = (rows) => {\n  return rows.map(row => row.length).concat(1);\n};\n\nconst getLengthByRows = (rows) => {\n  return rows.map(row => row.length).concat(1);\n};\n\nconst getLengthByColumns = (rows, length) => {\n  return rows.map(row => row.length).concat(1);\n};\n\nconst getRowsByColumns = (rows, length) => {\n  return rows.map(row => row.length).concat(1);\n};\n\nconst getRowsByLength = (rows, length) => {\n  return rows.map(row => row.length).concat(1);\n};\n\nconst getRowsByColumns = (rows, length) => {\n  return rows.map(row => row.length).concat(1);\n};\n\nconst getRowsByLength = (rows, length) => {\n  return rows.map(row => row.length).concat(1);\n};\n\nconst getRowsByLength = (rows, length) => {\n  return rows.map(row => row.length).concat(1);\n};\n\nconst getRowsByLength = (rows, length) => {\n  return rows.map(row => row.length).concat(1);\n};\n\nconst getRowsByLength = (rows, length) => {\n  return rows.map(row => row.length).concat(1);\n};\n\nconst getRowsByLength = (rows, length) => {\n  return rows.map(row => row.length).concat(1);\n};\n\nconst getRowsByLength = (rows, length) => {\n  return rows.map(row => row.length).concat(1);\n};\n\nconst getRowsByLength = (rows, length) => {\n  return rows.map(row => row.length).concat(1);\n};\n\nconst getRowsByLength = (rows, length) => {\n  return rows.map(row => row.length).concat(1);\n};\n\nconst getRowsByLength = (rows, length) => {\n  return rows.map(row => row.length).concat(1);\n};\n\nconst getRowsByLength = (rows, length) => {\n  return rows.map(row => row.length).concat(1);\n};\n\nconst getRowsByLength = (rows, length) => {\n  return rows.map(row => row.length).concat(1);\n};\n\nconst getRowsByLength = (rows, length) => {"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const operationsCopy = [...operations];\n  return operationsCopy.reduce((prev, curr) => {\n    if (curr === 0) {\n      return true;\n    }\n    const prevBalance = prev + curr;\n    if (prevBalance < 0) {\n      return true;\n    }\n    return false;\n  });\n};\n\nexport default belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute difference between each \n   element and a centerpoint (mean in this case ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute difference between each \n   element and a centerpoint (mean in this case ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let total = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    total += Math.abs(numbers[i] - mean(numbers));\n  }\n  return total / numbers.length;\n}\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0])\n  1.0\n  */\nconst meanAbsoluteDeviationOfList = (numbers) => {\n  let total = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    total += Math.abs(numbers[i] - mean(numbers));\n  }\n  return total / numbers.length;\n}\n\n/*\n  >>> meanAbsoluteDeviationOfList([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n  2.0\n  */\nconst meanAbsoluteDeviationOfListWithCenterpoint = (numbers, centerpoint) => {\n  let total = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    total += Math.abs(numbers[i] - centerpoint);\n  }\n  return total / numbers.length;\n}\n\nmodule.exports = {\n  meanAbsoluteDeviation,\n  meanAbsoluteDeviationOfList,\n  meanAbsoluteDeviationOfListWithCenterpoint\n}\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const list = numbers.slice()\n  const output = []\n  const i = 0\n  while (i < list.length) {\n    const index = i\n    if (i < list.length - 1) {\n      output.push(list[i])\n      i++\n    } else {\n      output.push(list[i])\n      output.push(delimeter)\n      i++\n    }\n  }\n  return output\n}\n\nexport default intersperse\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by space. \n   For each of the group, output the thick grade of nesting of digression. \n   E.g. (() ()) has maximum two levels of nesting while (( ()) ) receive three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by space. \n   For each of the group, output the thick grade of nesting of digression. \n   E.g. (() ()) has maximum two levels of nesting while (( ()) ) receive three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const len = paren_string.length\n  let level = 0\n  let current_level = 0\n  let current_index = 0\n  let prev_level = 0\n  let curr_level = 0\n  let prev_index = 0\n  let index = 0\n  const parse_stack = []\n  const stack_length = parse_stack.length\n\n  while (index < len) {\n    if (paren_string[index] === '(') {\n      parse_stack.push(current_level)\n      curr_level++\n    } else if (paren_string[index] === ')') {\n      curr_level--\n      if (curr_level < prev_level) {\n        while (parse_stack.length > stack_length) {\n          prev_level = parse_stack.pop()\n          prev_index = parse_stack.pop()\n          current_level = parse_stack.pop()\n          current_index = parse_stack.pop()\n          if (current_level!== prev_level) {\n            break\n          }\n          if (current_index!== prev_index) {\n            break\n          }\n        }\n      }\n    }\n    index++\n  }\n\n  return parse_stack\n}\n\nconst parseNestedParens = (paren_string) => {\n  const len = paren_string.length\n  let level = 0\n  let current_level = 0\n  let current_index = 0\n  let prev_level = 0\n  let curr_level = 0\n  let prev_index = 0\n  let index = 0\n  const parse_stack = []\n  const stack_length = parse_stack.length\n\n  while (index < len) {\n    if (paren_string[index] === '(') {\n      parse_stack.push(current_level)\n      curr_level++\n    } else if (paren_string[index] === ')') {\n      curr_level--\n      if (curr_level < prev_level) {\n        while (parse_stack.length > stack_length) {\n          prev_level = parse_stack.pop()\n          prev_index = parse_stack.pop()\n          current_level = parse_stack.pop()\n          current_index = parse_stack.pop()\n          if (current_level!== prev_level) {\n            break\n          }\n          if (current_index!== prev_index) {\n            break\n          }\n        }\n      }\n    }\n    index++\n  }\n\n  return parse_stack\n}\n\nconst parseNestedParens = (paren_string) => {\n  const len = paren_string.length\n  let level = 0\n  let current_level = 0\n  let current_index = 0\n  let prev_level = 0\n  let curr_level = 0\n  let prev_index = 0\n  let index = 0\n  const parse_stack = []\n  const stack_length = parse_stack.length\n\n  while (index < len) {\n    if (paren_string[index] === '(') {\n      parse_stack.push(current_level)\n      curr_level++\n    } else if (paren_string[index] === ')') {\n      curr_level--\n      if (curr_level < prev_level) {\n        while (parse_stack.length > stack_length) {\n          prev_level = parse_stack.pop()\n          prev_index = parse_stack.pop()\n          current_level = parse_stack.pop()\n          current_index = parse_stack.pop()\n          if (current_level!== prev_level) {\n            break\n          }\n          if (current_index!== prev_index) {\n            break\n          }\n        }\n      }\n    }\n    index++\n  }\n\n  return parse_stack\n}\n\nconst parseNestedParens = (paren_string) => {\n  const len = paren_string.length\n  let level = 0\n  let current_level = 0\n  let current_index = 0\n  let prev_level = 0\n  let curr_level = 0\n  let prev_index = 0\n  let index = 0\n  const parse_stack = []\n  const stack_length = parse_stack.length\n\n  while (index < len) {\n    if (paren_string[index] === '(') {\n      parse_stack.push(current_level)\n      curr_level++\n    } else if (paren_string[index] === ')') {\n      curr_level--\n      if (curr_level < prev_level) {\n        while (parse_stack.length > stack_length) {\n          prev_level = parse_stack.pop()\n          prev_index = parse_stack.pop()\n          current_level = parse_stack.pop()\n          current_index = parse_stack.pop()\n          if (current_level!== prev_level) {\n            break\n          }\n          if (current_index!== prev_index) {\n            break\n          }\n        }\n      }\n    }\n    index++\n  }\n\n  return parse_stack\n}\n\nexport default parseNestedParens\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain grant substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contain grant substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\nmodule.exports = filterBySubstring;\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const isEmptyKernel = (kernel, int) => kernel.length === 0 || kernel.includes(int);\n  const kernelSum = (kernel, int) => kernel.reduce((prev, curr) => prev + curr, 0);\n  const intersectionSum = (kernel, int) => numbers.filter(isEmptyKernel(kernel)? () => 1 : (kernel, int) => kernel.includes(int)? kernelSum(kernel, int) : 0).reduce((prev, curr) => prev + curr, 0);\n\n  return [intersectionSum(numbers, int), kernelSum(numbers, int)];\n};\n\nmodule.exports = sumProduct;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximal element determine until establish here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, generate a list of rolling maximal element determine until establish here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers.reduce((max, number) => Math.max(max, number), -Infinity);\n  const arr = numbers.slice(1);\n  const result = [];\n  let prevMax = max;\n  while (arr.length > 0) {\n    const currentMax = arr.reduce((max, number) => Math.max(max, number), -Infinity);\n    if (currentMax > prevMax) {\n      result.push(currentMax);\n      prevMax = currentMax;\n    }\n    arr.pop();\n  }\n  return result;\n};\n\n/*\n  # from a given list of numbers, determine the median\n  >>> median([1, 2, 3, 4, 5])\n  3\n  */\nconst median = (numbers) => {\n  const sorted = numbers.sort((a, b) => {\n    return a - b;\n  });\n  const half = sorted.length / 2;\n  if (sorted.length % 2 === 0) {\n    return (sorted[half - 1] + sorted[half]) / 2;\n  } else {\n    return sorted[half];\n  }\n};\n\nconst result = {\n  rollingMax: rollingMax,\n  median: median\n};\n\nmodule.exports = result;<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n    const tail = string.slice(0, -1);\n    const head = string.slice(-1);\n    return tail + head.split('').reverse().join('');\n};\n\n/* \n * Rule the beautiful string that ends with a prefix and \n   * the longest palindrome that begins with a postfix.\n  */\nconst makeLongestPalindrome = (string) => {\n    const postfix = string.slice(-1);\n    const prefix = string.slice(0, -1);\n    const postfixPalindrome = makePalindrome(postfix);\n    const prefixPalindrome = makePalindrome(prefix);\n    return postfixPalindrome + prefixPalindrome;\n};\n\nmodule.exports = {\n    isPalindrome,\n    makePalindrome,\n    makeLongestPalindrome\n};<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let aLength = a.length\n  let bLength = b.length\n  if (aLength!== bLength) {\n    throw new Error('Inputs a and b should be of same length')\n  }\n  let aStr = a\n  let bStr = b\n  let outputStr = ''\n  for (let i = 0; i < aLength; i++) {\n    outputStr += aStr[i] ^ bStr[i]\n  }\n  return outputStr\n}\n\nmodule.exports = stringXor\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the same duration. Return nothing in lawsuit the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the same duration. Return nothing in lawsuit the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  const min = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (min.length > strings[i].length) {\n      min = strings[i]\n    }\n  }\n  return min\n}\n\nexport default longest\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let result = b;\n  while (a) {\n    result = a;\n    a = a % b;\n  }\n  return result;\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the remark string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shortest to longest of the remark string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  for (let i = 0; i <= string.length; i++) {\n    const prefix = string.slice(0, i)\n    if (prefix.length > 0) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n// Return a list of all suffixes from longest to shortest of the remark string\nconst allSuffixes = (string) => {\n  const suffixes = []\n  for (let i = string.length; i >= 0; i--) {\n    const suffix = string.slice(i)\n    if (suffix.length > 0) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n// Returns the first word of the remark string\nconst firstWord = (string) => {\n  let index = string.indexOf(' ')\n  if (index === -1) {\n    index = string.length\n  }\n  return string.slice(0, index)\n}\n\n// Returns the last word of the remark string\nconst lastWord = (string) => {\n  let index = string.lastIndexOf(' ')\n  if (index === -1) {\n    index = string.length\n  }\n  return string.slice(index)\n}\n\n// Returns the first part of a remark string\nconst firstPart = (string) => {\n  const words = string.split(' ')\n  if (words.length === 1) {\n    return string\n  }\n  return firstWord(words[0])\n}\n\n// Returns the last part of a remark string\nconst lastPart = (string) => {\n  const words = string.split(' ')\n  if (words.length === 1) {\n    return string\n  }\n  return lastWord(words[words.length - 1])\n}\n\n// Returns a list of all word prefixes from the string\nconst allPrefixesOfWords = (string) => {\n  const words = string.split(' ')\n  const prefixes = []\n  for (let i = 0; i < words.length; i++) {\n    const prefix = firstWord(words[i])\n    if (prefix.length > 0) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n// Returns a list of all word suffixes from the string\nconst allSuffixesOfWords = (string) => {\n  const words = string.split(' ')\n  const suffixes = []\n  for (let i = words.length - 1; i >= 0; i--) {\n    const suffix = lastWord(words[i])\n    if (suffix.length > 0) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\nmodule.exports = {\n  allPrefixes,\n  allSuffixes,\n  firstWord,\n  lastWord,\n  firstPart,\n  lastPart,\n  allPrefixesOfWords,\n  allSuffixesOfWords\n}\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n    const string = '';\n    while (n > 0) {\n        string +='';\n        n--;\n    }\n    return string;\n};\n\nexport default stringSequence;\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const dictionary = new Set();\n  return string.split('').reduce((prev, curr) => {\n    const char = String.fromCodePoint(curr.charCodeAt(0));\n    if (dictionary.has(char)) {\n      dictionary.delete(char);\n    } else {\n      dictionary.add(char);\n    }\n    return prev + 1;\n  }, 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing melodious notes in a particular ASCII format. \n   Your task is to parse this string and return list of integers equate to how many beats does each \n   not concluding. \n\n   Here is a legend: \n  ' oxygen' - whole bill, lasts four beats \n  ' o|' - one-half bill, lasts two pulse \n  ' .|' - quater eminence, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string representing melodious notes in a particular ASCII format. \n   Your task is to parse this string and return list of integers equate to how many beats does each \n   not concluding. \n\n   Here is a legend: \n 'oxygen' - whole bill, lasts four beats \n 'o|' - one-half bill, lasts two pulse \n  '.|' - quater eminence, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  // Create an empty list to store the result\n  const result = [];\n\n  // Create a helper function to parse a single note in a string\n  const parseNote = (note_string) => {\n    // Parse the note, get the length and store it\n    const note = note_string.replace(/[\\(\\[\\]]/g, \"\");\n    const note_length = parseInt(note.length / 2);\n\n    // Return the result\n    return [note_length, note];\n  };\n\n  // Create a helper function to convert the string to array\n  const stringToArray = (string) => {\n    // Get the length of the string\n    const length = string.length;\n\n    // Create an array to store the result\n    const result = [];\n\n    // Iterate over each character\n    for (let i = 0; i < length; i++) {\n      // Create an array of note lengths\n      const notes = parseNote(string.substr(i, 2));\n\n      // Append the notes to the result array\n      result.push(...notes);\n    }\n\n    // Return the result\n    return result;\n  };\n\n  // Parse the string and return the result\n  return stringToArray(music_string);\n};\n\n// Test your code here\nparseMusic(\"o o|.| o| o|.|.|.|.| o o\");\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let len = string.length;\n  let count = 0;\n  let pos = 0;\n  let i = 0;\n  while (i < len) {\n    pos = string.indexOf(substring, i);\n    if (pos === -1) {\n      break;\n    }\n    count += 1;\n    i = pos + 1;\n  }\n  return count;\n};\n\n/* Find the index of a given substring in the original string. If the substring is not found, return -1.\n  >>> indexOf('a', 'a')\n  0\n  >>> indexOf('aaa', 'a')\n  2\n  >>> indexOf('aaaa', 'aa')\n  -1\n  */\nconst indexOf = (string, substring) => {\n  let i = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string.indexOf(substring, i) === 0) {\n      return i;\n    }\n    i += 1;\n  }\n  return -1;\n};\n\n/* Find the index of the first occurence of a given character in the original string. If the character is not found, return -1.\n  >>> indexOf('a', 'b')\n  -1\n  >>> indexOf('aaa', 'a')\n  1\n  >>> indexOf('aaaa', 'aa')\n  -1\n  */\nconst indexOfChar = (string, character) => {\n  let i = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string.charAt(i) === character) {\n      return i;\n    }\n    i += 1;\n  }\n  return -1;\n};\n\n/* Find the last occurence of a given character in the original string. If the character is not found, return -1.\n  >>> indexOf('a', 'b')\n  -1\n  >>> indexOf('aaa', 'a')\n  1\n  >>> indexOf('aaaa', 'aa')\n  -1\n  */\nconst lastIndexOfChar = (string, character) => {\n  let i = string.length - 1;\n  while (i >= 0) {\n    if (string.charAt(i) === character) {\n      return i;\n    }\n    i -= 1;\n  }\n  return -1;\n};\n\n/* Find the index of the last occurence of a given substring in the original string. If the substring is not found, return -1.\n  >>> indexOf('a', 'a')\n  0\n  >>> indexOf('aaa', 'a')\n  2\n  >>> indexOf('aaaa', 'aa')\n  -1\n  */\nconst lastIndexOf = (string, substring) => {\n  let i = string.length - 1;\n  while (i >= 0) {\n    if (string.indexOf(substring, i) === 0) {\n      return i;\n    }\n    i -= 1;\n  }\n  return -1;\n};\n\n/* Return a substring from the original string. If the index is out of bounds, return the empty string.\n  >>> substr('a', 0)\n  'a'\n  >>> substr('a', 1)\n  'a'\n  >>> substr('a', 2)\n  'a'\n  >>> substr('a', 3)\n  ''\n  >>> substr('a', 4)\n  ''\n  >>> substr('a', -1)\n  ''\n  >>> substr('a', -2)\n  ''\n  >>> substr('a', -3)\n  ''\n  >>> substr('a', -4)\n  ''\n  >>> substr('a', 1, 2)\n  ''\n  >>> substr('a', 1, 2, 2)\n  ''\n  >>> substr('a', 1, 2, 3)\n  ''\n  >>> substr('a', 1, 2, 4)\n  ''\n  */\nconst substr = (string, start, length = -1) => {\n  if (length === -1) {\n    length = string.length - start;\n  }\n  if (length < 0) {\n    return '';\n  }\n  return string.substr(start, length);\n};\n\n/* Return a substring from the original string. If the index is out of bounds, return the empty string.\n  >>> substr2('a', 0)\n  'a'\n  >>> substr2('a', 1)\n  'a'\n  >>> substr2('a', 2)\n  'a'\n  >>> substr2('a', 3)\n  ''\n  >>> substr2('a', 4)\n  ''\n  >>> substr2('a', -1)\n  ''\n  >>> substr2('a', -2)\n  ''\n  >>> substr2('a', -3)\n  ''\n  >>> substr2('a', -4)\n  ''\n  >>> substr2('a', 1, 2)\n  ''\n  >>> substr2('a', 1, 2, 2)\n  ''\n  >>> substr2('a', 1, 2, 3)\n  ''\n  >>> substr2('a', 1, 2, 4)\n  ''\n  */\nconst substr2 = (string, start, length = -1) => {\n  if (length === -1) {\n    length = string.length - start;\n  }\n  if (length < 0) {\n    return '';\n  }\n  return string.substr(start, length);\n};\n\nmodule.exports = {\n  indexOf,\n  indexOfChar,\n  lastIndexOf,\n  lastIndexOfChar,\n  substr,\n  substr2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   revert the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   revert the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberToNumber = (numbers) => {\n    let result = [];\n    numbers.split('').sort().forEach((c) => {\n      result.push(parseInt(c));\n    });\n    return result.join('');\n  };\n  return numberToNumber(numbers);\n};\n\n//Exercise 1\n/*\n   Write a program that asks the user for a string and then prints out the \n   string in reverse order.\n  >>> printReverse(input)\n  */\nconst printReverse = (input) => {\n  const stringToArray = (input) => {\n    let result = [];\n    input.split('').forEach((c) => {\n      result.push(c);\n    });\n    return result;\n  };\n  let result = stringToArray(input);\n  result.reverse();\n  console.log(result.join(''));\n};\n\n//Exercise 2\n/*\n   Given a number, reverse the number. For example, given input 14, output 56.\n  >>> reverseNumber(14)\n  */\nconst reverseNumber = (n) => {\n  let result = parseInt(n);\n  if(isNaN(result)){\n    return result;\n  }\n  let reversed = '';\n  while(result > 0){\n    reversed = reversed + result%10;\n    result = parseInt(result/10);\n  }\n  return reversed;\n};\n\n//Exercise 3\n/*\n   Write a program that prints the sum of the digits in the number 14.\n  >>> sumDigits(14)\n  */\nconst sumDigits = (n) => {\n  let result = parseInt(n);\n  let sum = 0;\n  while(result > 0){\n    sum += result%10;\n    result = parseInt(result/10);\n  }\n  return sum;\n};\n\n//Exercise 4\n/*\n   Given a number, return the number's last two digits in the reverse order. For example, given input 14, output 56.\n  >>> lastTwo(14)\n  */\nconst lastTwo = (n) => {\n  let result = parseInt(n);\n  if(isNaN(result)){\n    return result;\n  }\n  let reversed = '';\n  while(result > 0){\n    reversed = result%10 + reversed;\n    result = parseInt(result/10);\n  }\n  return reversed;\n};\n\n//Exercise 5\n/*\n   Given a string, return the string in reverse order.\n  >>> reverseString(input)\n  */\nconst reverseString = (input) => {\n  let result = [];\n  input.split('').reverse().forEach((c) => {\n    result.push(c);\n  });\n  return result.join('');\n};\n\n//Exercise 6\n/*\n   Given a string, return the string in reverse order. The string may contain \n   spaces.\n  >>> reverseStringSpaces(input)\n  */\nconst reverseStringSpaces = (input) => {\n  let result = [];\n  let spacePositions = [];\n  let lastSpacePosition = -1;\n  input.split('').reverse().forEach((c) => {\n    if(c ==''){\n      lastSpacePosition = result.length;\n    }\n    result.push(c);\n  });\n  spacePositions = spacePositions.concat(lastSpacePosition);\n  spacePositions.reverse();\n  for(let i = 0; i < spacePositions.length; i++){\n    result.splice(spacePositions[i], 1);\n  }\n  return result.join('');\n};\n\n//Exercise 7\n/*\n   Given a number, return the number's last two digits in the reverse order. \n   The number may contain spaces.\n  >>> lastTwoSpaces(input)\n  */\nconst lastTwoSpaces = (input) => {\n  let result = parseInt(input);\n  if(isNaN(result)){\n    return result;\n  }\n  let lastSpacePosition = -1;\n  let spacePositions = [];\n  while(result > 0){\n    lastSpacePosition = result%10 + lastSpacePosition;\n    result = parseInt(result/10);\n  }\n  spacePositions = spacePositions.concat(lastSpacePosition);\n  spacePositions.reverse();\n  return spacePositions.join('');\n};\n\n//Exercise 8\n/*\n   Given a number, return the number's last two digits in the reverse order. \n   The number may contain spaces.\n  >>> lastTwoSpaces(input)\n  */\nconst sumDigitsSpaces = (input) => {\n  let result = parseInt(input);\n  if(isNaN(result)){\n    return result;\n  }\n  let sum = 0;\n  let spacePositions = [];\n  while(result > 0){\n    sum += result%10;\n    result = parseInt(result/10);\n  }\n  spacePositions = spacePositions.concat(sum);\n  spacePositions.reverse();\n  return spacePositions.join('');\n};\n\n//Exercise 9\n/*\n   Given a string, return the number of times that the character 'e' appears in \n   the string.\n  >>> numberOfE(input)\n  */\nconst numberOfE = (input) => {\n  let result = 0;\n  for(let i = 0; i < input.length; i++){\n    if(input[i] == 'e'){\n      result++;\n    }\n  }\n  return result;\n};\n\n//Exercise 10\n/*\n   Given a number, return the number's last two digits in the reverse order. \n   The number may contain spaces.\n  >>> lastTwoSpaces(input)\n  */\nconst numberOfESpaces = (input) => {\n  let result = parseInt(input);\n  if(isNaN(result)){\n    return result;\n  }\n  let sum = 0;\n  let spacePositions = [];\n  while(result"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) blue-ribbon and return two that be the closest to each \n   other and return them in order (smaller number, larger phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) blue-ribbon and return two that be the closest to each \n   other and return them in order (smaller number, larger phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n    let blueRibbon = numbers.slice();\n    let blueRibbonLength = blueRibbon.length;\n    let closestBlueRibbon = [];\n    let closestBlueRibbonLength = 0;\n    let blueRibbonA, blueRibbonB;\n    while (blueRibbonLength > 2) {\n        let min = Infinity;\n        let minIndex = 0;\n        for (let i = 0; i < blueRibbonLength; i++) {\n            if (blueRibbon[i] < min) {\n                minIndex = i;\n                min = blueRibbon[i];\n            }\n        }\n        blueRibbonA = blueRibbon.slice();\n        blueRibbonB = blueRibbon.slice();\n        blueRibbonB.splice(minIndex, 1);\n        let blueRibbonAmin = findClosestElements(blueRibbonA);\n        let blueRibbonBmin = findClosestElements(blueRibbonB);\n        if (closestBlueRibbonLength === 0 || closestBlueRibbon[closestBlueRibbonLength - 1] > blueRibbonAmin[1]) {\n            closestBlueRibbon.push(blueRibbonAmin);\n            closestBlueRibbonLength++;\n        }\n        if (closestBlueRibbonLength === 0 || closestBlueRibbon[closestBlueRibbonLength - 1] > blueRibbonBmin[1]) {\n            closestBlueRibbon.push(blueRibbonBmin);\n            closestBlueRibbonLength++;\n        }\n        blueRibbon.splice(minIndex, 1);\n        blueRibbonLength--;\n    }\n    return closestBlueRibbon;\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  return [\n    (numbers[0] / numbers[1]),\n    (numbers[2] / numbers[3]),\n    (numbers[4] / numbers[5]),\n  ];\n};\n\nmodule.exports = rescaleToUnit;\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integer\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter given list of any python values only for integer\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((item) => {\n    return typeof item === 'number';\n  });\n};\n\n/**\n  * @function filterStrings\n  * @description\n  * @param {Array} values - list of values to filter\n  * @returns {Array} - list of values that are strings\n  *\n  * @example\n  * filterStrings([1, 2, 3, 'abc', {}, []])\n  * //[1, 2, 3, 'abc']\n  *\n  * @example\n  * filterStrings(['a', 3.14, 5])\n  * [5]\n  *\n  * @example\n  * filterStrings([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3, 'abc', {}, []]\n  */\nconst filterStrings = (values) => {\n  return values.filter((item) => {\n    return typeof item ==='string';\n  });\n};\n\n/**\n  * @function filterBooleans\n  * @description\n  * @param {Array} values - list of values to filter\n  * @returns {Array} - list of values that are booleans\n  *\n  * @example\n  * filterBooleans([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3, 'abc']\n  *\n  * @example\n  * filterBooleans([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3, 'abc']\n  */\nconst filterBooleans = (values) => {\n  return values.filter((item) => {\n    return typeof item === 'boolean';\n  });\n};\n\n/**\n  * @function filterArrays\n  * @description\n  * @param {Array} values - list of values to filter\n  * @returns {Array} - list of values that are arrays\n  *\n  * @example\n  * filterArrays([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3, 'abc']\n  *\n  * @example\n  * filterArrays([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3, 'abc']\n  */\nconst filterArrays = (values) => {\n  return values.filter((item) => {\n    return Array.isArray(item);\n  });\n};\n\n/**\n  * @function filterEmpty\n  * @description\n  * @param {Array} values - list of values to filter\n  * @returns {Array} - list of values that are not empty\n  *\n  * @example\n  * filterEmpty([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3, 'abc']\n  *\n  * @example\n  * filterEmpty([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3, 'abc']\n  */\nconst filterEmpty = (values) => {\n  return values.filter((item) => {\n    return!isEmpty(item);\n  });\n};\n\n/**\n  * @function filterNumbers\n  * @description\n  * @param {Array} values - list of values to filter\n  * @returns {Array} - list of values that are numbers\n  *\n  * @example\n  * filterNumbers([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3, 'abc']\n  *\n  * @example\n  * filterNumbers([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3, 'abc']\n  */\nconst filterNumbers = (values) => {\n  return values.filter((item) => {\n    return typeof item === 'number';\n  });\n};\n\n/**\n  * @function filterObjects\n  * @description\n  * @param {Array} values - list of values to filter\n  * @returns {Array} - list of values that are objects\n  *\n  * @example\n  * filterObjects([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3, 'abc']\n  *\n  * @example\n  * filterObjects([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3, 'abc']\n  */\nconst filterObjects = (values) => {\n  return values.filter((item) => {\n    return typeof item === 'object';\n  });\n};\n\nexport default {\n  filterIntegers,\n  filterStrings,\n  filterBooleans,\n  filterArrays,\n  filterEmpty,\n  filterNumbers,\n  filterObjects\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    let i = 0,\n        l = 0;\n\n    while (i < string.length) {\n        l++;\n        i += 1;\n    }\n\n    return l;\n};\n\n/**\n  * @description Return a random string of given length\n  * @param {string} string - String to be shortened\n  * @param {number} length - Desired string length\n  * @return {string} - Random string\n  * @example\n  * // Return a random string of length 8\n  * strrandom('123456789', 8);\n  * // -> '783026'\n  */\nconst strrandom = (string, length) => {\n    let rndStr = '';\n\n    for (let i = 0; i < length; i += 1) {\n        rndStr += string.charAt(Math.floor(Math.random() * string.length));\n    }\n\n    return rndStr;\n};\n\nmodule.exports = {\n    strlen,\n    strrandom\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest phone number that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find the largest phone number that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  if(!n) return 1;\n  const i = Math.floor(n / 2);\n  const j = largestDivisor(n - i);\n  return i * j;\n};\n\n/* Find the largest factor of a given number n\n  >>> largestFactor(10)\n  2\n  */\nconst largestFactor = (n) => {\n  if(!n) return 1;\n  const i = largestDivisor(n);\n  return largestFactor(n / i);\n};\n\n/* Find the largest product of two numbers n and m\n  >>> largestProduct(3, 7)\n  42\n  >>> largestProduct(4, 7)\n  28\n  */\nconst largestProduct = (n, m) => {\n  if(!n ||!m) return 1;\n  return largestProduct(n, largestProduct(m, n));\n};\n\nmodule.exports = {\n  largestDivisor, largestFactor, largestProduct\n};\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let result = [];\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      result.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n!== 1) {\n    result.push(n);\n  }\n  return result;\n};\n\nconsole.log(factorize(8));\nconsole.log(factorize(25));\nconsole.log(factorize(70));\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const nums = [];\n  const count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === undefined || count > 1) {\n      continue;\n    }\n    count++;\n    nums.push(numbers[i]);\n  }\n  return nums;\n};\n\nremoveDuplicates([1, 2, 3, 2, 4]);\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (ch) => {\n    return ch.toLowerCase();\n  });\n};\n\n/*\n  This function is the core of the algorithm.\n  It takes an input string, and a set of possible characters, and returns a set of characters that\n  are the \"best\" match for the given input string.\n  If the given input string has no valid matches, it will return an empty set.\n  It is assumed that the input string will contain only characters in the set of possible characters.\n  The \"best\" character set is a set of characters that are the \"best\" match for the given string.\n  */\nconst getBestCharacters = (inputString, possibleCharacters) => {\n  const validChars = possibleCharacters.filter(ch => {\n    return ch.toLowerCase() in flipCase(inputString);\n  });\n\n  if (validChars.length === 0) {\n    return [];\n  }\n\n  return validChars;\n};\n\n/*\n  Given a set of possible characters, create a set of character strings that will match\n  the given string. This set of strings is called the \"best\" set of strings.\n\n  This is the main algorithm for the algorithm.\n  */\nconst getBestStrings = (inputString, possibleCharacters) => {\n  const validChars = getBestCharacters(inputString, possibleCharacters);\n  const validStrings = validChars.map(ch => {\n    return inputString.replace(ch, '');\n  });\n  const validStringsSet = new Set(validStrings);\n\n  if (validStringsSet.size === 0) {\n    return [];\n  }\n\n  return validStringsSet.values();\n};\n\n/*\n  Given a string, determine whether it contains any of the given characters.\n  */\nconst stringContainsAny = (string, chars) => {\n  return chars.find(ch => {\n    return string.includes(ch);\n  });\n};\n\n/*\n  Given a string, determine whether it contains only the given characters.\n  */\nconst stringContainsOnly = (string, chars) => {\n  return string.split('').every(ch => {\n    return chars.indexOf(ch) > -1;\n  });\n};\n\n/*\n  Given a string, determine whether it contains all of the given characters.\n  */\nconst stringContainsAll = (string, chars) => {\n  return chars.every(ch => {\n    return string.includes(ch);\n  });\n};\n\n/*\n  Given a string, determine whether it contains any of the given characters.\n  */\nconst stringContainsAnyOf = (string, chars) => {\n  return chars.find(ch => {\n    return string.includes(ch);\n  });\n};\n\n/*\n  Given a string, determine whether it contains all of the given characters.\n  */\nconst stringContainsAllOf = (string, chars) => {\n  return string.split('').every(ch => {\n    return chars.indexOf(ch) > -1;\n  });\n};\n\n/*\n  Given a string, determine whether it contains all of the given characters.\n  */\nconst stringContainsAllBut = (string, chars) => {\n  return string.split('').every(ch => {\n    return chars.indexOf(ch) < 0;\n  });\n};\n\n/*\n  Given a string, determine whether it contains any of the given characters.\n  */\nconst stringContainsAnyBut = (string, chars) => {\n  return chars.find(ch => {\n    return string.includes(ch);\n  });\n};\n\n/*\n  Given a string, determine whether it contains all of the given characters.\n  */\nconst stringContainsAllButNot = (string, chars) => {\n  return string.split('').every(ch => {\n    return chars.indexOf(ch) < 0;\n  });\n};\n\n/*\n  Given a string, determine whether it contains all of the given characters.\n  */\nconst stringContainsAllBut = (string, chars) => {\n  return string.split('').every(ch => {\n    return chars.indexOf(ch) < 0;\n  });\n};\n\n/*\n  Given a string, determine whether it contains any of the given characters.\n  */\nconst stringContainsAnyBut = (string, chars) => {\n  return chars.find(ch => {\n    return string.includes(ch);\n  });\n};\n\n/*\n  Given a string, determine whether it contains only the given characters.\n  */\nconst stringContainsOnly = (string, chars) => {\n  return string.split('').every(ch => {\n    return chars.indexOf(ch) > -1;\n  });\n};\n\n/*\n  Given a string, determine whether it contains all of the given characters.\n  */\nconst stringContainsAll = (string, chars) => {\n  return string.split('').every(ch => {\n    return chars.indexOf(ch) > -1;\n  });\n};\n\n/*\n  Given a string, determine whether it contains any of the given characters.\n  */\nconst stringContainsAny = (string, chars) => {\n  return chars.find(ch => {\n    return string.includes(ch);\n  });\n};\n\n/*\n  Given a string, determine whether it contains any of the given characters.\n  */\nconst stringContainsAllBut = (string, chars) => {\n  return chars.find(ch => {\n    return string.includes(ch);\n  });\n};\n\n/*\n  Given a string, determine whether it contains any of the given characters.\n  */\nconst stringContainsAllBut = (string, chars) => {\n  return chars.find(ch => {\n    return string.includes(ch);\n  });\n};\n\n/*\n  Given a string, determine whether it contains all of the given characters.\n  */\nconst stringContainsAllButNot = (string, chars) => {\n  return chars.find(ch => {\n    return string.includes(ch);\n  });\n};\n\n/*\n  Given a string, determine whether it contains all of the given characters.\n  */\nconst stringContainsAllBut = (string, chars) => {\n  return chars.find(ch => {\n    return string.includes("}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/**\n  * Concatenate list of strings into a single string,\n  * adding a given separator between strings.\n  *\n  * @param separator string to be added between strings\n  * @param strings list of strings\n  *\n  * @return concatenated string\n  *\n  * @example\n  * Concatenate list of strings with a space separator\n  * >>> concatenate(['a', 'b', 'c'],'')\n  * 'a b c'\n  * */\nconst concatenateWithSeparator = (separator, strings) => {\n  return strings.reduce((acc, str) => acc + separator + str, '')\n}\n\n/**\n  * Return a list of the characters in the given string\n  *\n  * @param string string to be tokenized\n  *\n  * @return list of characters\n  *\n  * @example\n  * Split a string into tokens\n  * >>> split('a b c d')\n  * ['a', 'b', 'c', 'd']\n  * */\nconst split = (string) => {\n  return string.split('').filter(char => char.length > 0)\n}\n\nmodule.exports = {\n  concatenate,\n  concatenateWithSeparator,\n  split\n}\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a grant prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start with a grant prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n}\n\n/*\n  * Given a collection of strings, sort them in order of length.\n  *\n  * @param {Array} strings - An array of strings.\n  * @returns {Array} Sorted strings.\n  */\nconst sortByLength = (strings) => {\n  return strings.sort((a, b) => {\n    return a.length - b.length;\n  });\n}\n\nexport {\n  filterByPrefix,\n  sortByLength\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n}\n\nexport { getPositive }<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number equal choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number equal choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false\n  if (n % 2 === 0) return false\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*Return the largest prime number less than or equal to n.\n  >>> largestPrime(2)\n  2\n  >>> largestPrime(3)\n  2\n  >>> largestPrime(4)\n  3\n  >>> largestPrime(5)\n  5\n  >>> largestPrime(6)\n  5\n  >>> largestPrime(7)\n  7\n  >>> largestPrime(8)\n  7\n  >>> largestPrime(9)\n  7\n  >>> largestPrime(10)\n  7\n  >>> largestPrime(11)\n  7\n  >>> largestPrime(12)\n  7\n  >>> largestPrime(13)\n  7\n  >>> largestPrime(14)\n  7\n  >>> largestPrime(15)\n  7\n  >>> largestPrime(16)\n  7\n  >>> largestPrime(17)\n  7\n  >>> largestPrime(18)\n  7\n  >>> largestPrime(19)\n  7\n  >>> largestPrime(20)\n  7\n  >>> largestPrime(21)\n  7\n  >>> largestPrime(22)\n  7\n  >>> largestPrime(23)\n  7\n  >>> largestPrime(24)\n  7\n  >>> largestPrime(25)\n  7\n  >>> largestPrime(26)\n  7\n  >>> largestPrime(27)\n  7\n  >>> largestPrime(28)\n  7\n  >>> largestPrime(29)\n  7\n  >>> largestPrime(30)\n  7\n  >>> largestPrime(31)\n  7\n  >>> largestPrime(32)\n  7\n  >>> largestPrime(33)\n  7\n  >>> largestPrime(34)\n  7\n  >>> largestPrime(35)\n  7\n  >>> largestPrime(36)\n  7\n  >>> largestPrime(37)\n  7\n  >>> largestPrime(38)\n  7\n  >>> largestPrime(39)\n  7\n  >>> largestPrime(40)\n  7\n  >>> largestPrime(41)\n  7\n  >>> largestPrime(42)\n  7\n  >>> largestPrime(43)\n  7\n  >>> largestPrime(44)\n  7\n  >>> largestPrime(45)\n  7\n  >>> largestPrime(46)\n  7\n  >>> largestPrime(47)\n  7\n  >>> largestPrime(48)\n  7\n  >>> largestPrime(49)\n  7\n  >>> largestPrime(50)\n  7\n  >>> largestPrime(51)\n  7\n  >>> largestPrime(52)\n  7\n  >>> largestPrime(53)\n  7\n  >>> largestPrime(54)\n  7\n  >>> largestPrime(55)\n  7\n  >>> largestPrime(56)\n  7\n  >>> largestPrime(57)\n  7\n  >>> largestPrime(58)\n  7\n  >>> largestPrime(59)\n  7\n  >>> largestPrime(60)\n  7\n  >>> largestPrime(61)\n  7\n  >>> largestPrime(62)\n  7\n  >>> largestPrime(63)\n  7\n  >>> largestPrime(64)\n  7\n  >>> largestPrime(65)\n  7\n  >>> largestPrime(66)\n  7\n  >>> largestPrime(67)\n  7\n  >>> largestPrime(68)\n  7\n  >>> largestPrime(69)\n  7\n  >>> largestPrime(70)\n  7\n  >>> largestPrime(71)\n  7\n  >>> largestPrime(72)\n  7\n  >>> largestPrime(73)\n  7\n  >>> largestPrime(74)\n  7\n  >>> largestPrime(75)\n  7\n  >>> largestPrime(76)\n  7\n  >>> largestPrime(77)\n  7\n  >>> largestPrime(78)\n  7\n  >>> largestPrime(79)\n  7\n  >>> largestPrime(80)\n  7\n  >>> largestPrime(81)\n  7\n  >>> largestPrime(82)\n  7\n  >>> largestPrime(83)\n  7\n  >>> largestPrime(84)\n  7\n  >>> largestPrime(85)\n  7\n  >>> largestPrime(86)\n  7\n  >>> largestPrime(87)\n  7\n  >>> largestPrime(88)\n  7\n  >>> largestPrime(89)\n  7\n  >>> largestPrime(90)\n  7\n  >>> largestPrime(91)\n  7\n  >>> largestPrime(92)\n  7\n  >>> largestPrime(93)\n  7\n  >>> largestPrime(94)\n  7\n  >>> largestPrime(95)\n  7\n  >>> largestPrime(96)\n  7\n  >>> largestPrime(97)\n  7\n  >>> largestPrime(98)\n  7\n  >>> largestPrime(99)\n  7\n  >>> largestPrime(100)\n  7\n  >>> largestPrime(101)\n  7\n  >>> largestPrime(102)\n  7\n  >>> largestPrime(103)\n  7\n  >>> largestPrime(104)\n  7\n  >>> largestPrime(105)\n  7\n  >>> largestPrime(106)\n  7\n  >>> largestPrime(107)\n  7\n  >>> largestPrime(108)\n  7\n  >>> largestPrime(109)\n  7\n  >>> largestPrime(110)\n  7\n  >>> largestPrime(111)\n  7\n  >>> largestPrime(112)\n  7\n  >>> largestPrime(113)\n  7\n  >>> largestPrime(114)\n  7\n  >>> largestPrime(115)\n  7\n  >>> largestPrime(116)\n  7\n  >>> largestPrime(117)\n  7\n  >>> largestPrime(118)\n  7\n  >>> largestPrime(119)\n  7\n  >>> largestPrime(120)\n  7\n  >>> largestPrime(121)\n  7\n  >>> largestPrime(122)\n  7\n  >>> largestPrime(123)\n  7\n  >>> largestPrime(124)\n  7"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero recurrence only entirely zero point, even if there exist many. \n   Moreover, findZero only carry list xs having even number of coefficient \n   and largest non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero recurrence only entirely zero point, even if there exist many. \n   Moreover, findZero only carry list xs having even number of coefficient \n   and largest non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length\n  if (len <= 2) {\n    return 0\n  }\n  const poly = (xs, x) = > {\n    return xs.reduce((prev, item, index) = > {\n      return prev + item * Math.pow(x, index)\n    }, 0);\n  }\n  const lenX = xs.length\n  const x = xs[lenX - 1]\n  const polyX = poly(xs, x)\n  const polyX_minus_1 = poly(xs.slice(0, lenX - 1), x)\n  const y = polyX - polyX_minus_1\n  if (y === 0) {\n    return x\n  }\n  return findZero(xs.slice(0, lenX - 2))\n}\n\nfindZero([-6, 11, -6, 1])\nfindZero([-1, -1, 1])\nfindZero([-1, -1, -1, 1])\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by three, while its value at the indicies that are divisible by three are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by three, while its value at the indicies that are divisible by three are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let i, j;\n  let sorted = [],\n      temp = [];\n  for (i = 0; i < l.length; i++) {\n    temp.push(l[i]);\n  }\n  for (i = 0; i < temp.length - 1; i++) {\n    for (j = i + 1; j < temp.length; j++) {\n      if (temp[i] % 3 === 0 && temp[j] % 3 === 0) {\n        temp[i] = (temp[i] + temp[j]) / 2;\n        temp.splice(j, 1);\n      }\n    }\n  }\n  sorted = temp.concat(l);\n  return sorted;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by five, while its value at the indicies that are divisible by five are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 6, 8, 9, 5]\n  */\nconst sortFifth = (l) => {\n  let i, j;\n  let sorted = [],\n      temp = [];\n  for (i = 0; i < l.length; i++) {\n    temp.push(l[i]);\n  }\n  for (i = 0; i < temp.length - 1; i++) {\n    for (j = i + 1; j < temp.length; j++) {\n      if (temp[i] % 5 === 0 && temp[j] % 5 === 0) {\n        temp[i] = (temp[i] + temp[j]) / 2;\n        temp.splice(j, 1);\n      }\n    }\n  }\n  sorted = temp.concat(l);\n  return sorted;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by seven, while its value at the indicies that are divisible by seven are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortSeventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeventh([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 6, 8, 9, 5]\n  */\nconst sortSeventh = (l) => {\n  let i, j;\n  let sorted = [],\n      temp = [];\n  for (i = 0; i < l.length; i++) {\n    temp.push(l[i]);\n  }\n  for (i = 0; i < temp.length - 1; i++) {\n    for (j = i + 1; j < temp.length; j++) {\n      if (temp[i] % 7 === 0 && temp[j] % 7 === 0) {\n        temp[i] = (temp[i] + temp[j]) / 2;\n        temp.splice(j, 1);\n      }\n    }\n  }\n  sorted = temp.concat(l);\n  return sorted;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by eleven, while its value at the indicies that are divisible by eleven are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortEleven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEleven([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 6, 8, 9, 5]\n  */\nconst sortEleven = (l) => {\n  let i, j;\n  let sorted = [],\n      temp = [];\n  for (i = 0; i < l.length; i++) {\n    temp.push(l[i]);\n  }\n  for (i = 0; i < temp.length - 1; i++) {\n    for (j = i + 1; j < temp.length; j++) {\n      if (temp[i] % 11 === 0 && temp[j] % 11 === 0) {\n        temp[i] = (temp[i] + temp[j]) / 2;\n        temp.splice(j, 1);\n      }\n    }\n  }\n  sorted = temp.concat(l);\n  return sorted;\n};\n\nexport {\n  sortFirst,\n  sortSecond,\n  sortThird,\n  sortFifth,\n  sortSeventh,\n  sortEleven\n};\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let index = 0\n  let len = l.length\n  const sorted = l.slice()\n  sorted.sort((a, b) => a - b)\n\n  for (let i = 0; i < len; i++) {\n    if (sorted[i] === l[i]) {\n      continue\n    }\n    l[index] = l[i]\n    index++\n  }\n\n  l.length = index\n  return l\n}\n\nexport default unique\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let result = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > result) {\n      result = l[i];\n    }\n  }\n  return result;\n};\n\nmodule.exports = maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let a = 1, b = 1, c = 0;\n  while (a <= n) {\n    for (let i = 1; i <= a; i++) {\n      if (a % i === 0) {\n        c++;\n      }\n    }\n    a++;\n  }\n  return c;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the odd indicies, while its values at the even indicies constitute equal \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the odd indicies, while its values at the even indicies constitute equal \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l' = l.slice();\n  let len = l.length;\n  let i = 0;\n  let j = 0;\n  while (i < len - 1) {\n    if (l[i] % 2 === 1) {\n      l'[j] = l[i];\n      j++;\n    }\n    i++;\n  }\n  return l'.slice(0, j);\n}\n\n/*\n  >>> sortEven([3, 5, 3, 4])\n  [3, 5, 4]\n  >>> sortEven([5, 3, 4])\n  [3, 5, 4]\n  */\nconst sortOdd = (l) => {\n  let l' = l.slice();\n  let len = l.length;\n  let i = 0;\n  let j = 0;\n  while (i < len - 1) {\n    if (l[i] % 2 === 0) {\n      l'[j] = l[i];\n      j++;\n    }\n    i++;\n  }\n  return l'.slice(0, j);\n}\n\nmodule.exports = {\n  sortEven,\n  sortOdd\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   returns true if the string is a valid base64 encoded string, \n   and false otherwise. \n   * / \n const isBase64 = (s) = > { \n   s.match(/.{1,}=.{1,}/) \n } \n */\n\n/*\n   returns true if the string is a valid base64 encoded string, \n   and false otherwise. \n   * / \n const isBase64 = (s) = > { \n   s.match(/.{1,}=.{1,}/) \n } \n */\n\n/*\n   returns true if the string is a valid base64 encoded string, \n   and false otherwise. \n   * / \n const isBase64 = (s) = > { \n   s.match(/.{1,}=.{1,}/) \n } \n */\n\n/*\n   returns true if the string is a valid base64 encoded string, \n   and false otherwise. \n   * / \n const isBase64 = (s) = > { \n   s.match(/.{1,}=.{1,}/) \n } \n */\n\n/*\n   returns true if the string is a valid base64 encoded string, \n   and false otherwise. \n   * / \n const isBase64 = (s) = > { \n   s.match(/.{1,}=.{1,}/) \n } \n */\n\n/*\n   returns true if the string is a valid base64 encoded string, \n   and false otherwise. \n   * / \n const isBase64 = (s) = > { \n   s.match(/.{1,}=.{1,}/) \n } \n */\n\n/*\n   returns true if the string is a valid base64 encoded string, \n   and false otherwise. \n   * / \n const isBase64 = (s) = > { \n   s.match(/.{1,}=.{1,}/) \n } \n */\n\n/*\n   returns true if the string is a valid base64 encoded string, \n   and false otherwise. \n   * / \n const isBase64 = (s) = > { \n   s.match(/.{1,}=.{1,}/) \n } \n */\n\n/*\n   returns true if the string is a valid base64 encoded string, \n   and false otherwise. \n   * / \n const isBase64 = (s) = > { \n   s.match(/.{1,}=.{1,}/) \n } \n */\n\n/*\n   returns true if the string is a valid base64 encoded string, \n   and false otherwise. \n   * / \n const isBase64 = (s) = > { \n   s.match(/.{1,}=.{1,}/) \n } \n */\n\n/*\n   returns true if the string is a valid base64 encoded string, \n   and false otherwise. \n   * / \n const isBase64 = (s) = > { \n   s.match(/.{1,}=.{1,}/) \n } \n */\n\n/*\n   returns true if the string is a valid base64 encoded string, \n   and false otherwise. \n   * / \n const isBase64 = (s) = > { \n   s.match(/.{1,}=.{1,}/) \n } \n */\n\n/*\n   returns true if the string is a valid base64 encoded string, \n   and false otherwise. \n   * / \n const isBase64 = (s) = > { \n   s.match(/.{1,}=.{1,}/) \n } \n */\n\n/*\n   returns true if the string is a valid base64 encoded string, \n   and false otherwise. \n   * / \n const isBase64 = (s) = > { \n   s.match(/.{1,}=.{1,}/) \n } \n */\n\n/*\n   returns true if the string is a valid base64 encoded string, \n   and false otherwise. \n   * / \n const isBase64 = (s) = > { \n   s.match(/.{1,}=.{1,}/) \n } \n */\n\n/*\n   returns true if the string is a valid base64 encoded string, \n   and false otherwise. \n   * / \n const isBase64 = (s) = > { \n   s.match(/.{1,}=.{1,}/) \n } \n */\n\n/*\n   returns true if the string is a valid base64 encoded string, \n   and false otherwise. \n   * / \n const isBase64 = (s) = > { \n   s.match(/.{1,}=.{"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  const fib = [1, 2]\n  while (fib[1] < n) {\n    fib.push(fib[1] + fib[0])\n  }\n  return fib[n]\n}\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false\n  }\n  let i = 1\n  let sqrt = Math.sqrt(n)\n  while (i < sqrt) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 1\n  }\n  return true\n}\n\nconst primeSieve = (limit) => {\n  const isPrime = (n) => {\n    return isPrime(n)\n  }\n  const isPrimeSieve = (n) => {\n    if (n < 2) {\n      return true\n    }\n    let i = 2\n    while (i < n) {\n      if (isPrime(i) === false) {\n        return false\n      }\n      i += 1\n    }\n    return true\n  }\n  let n = limit\n  while (n < 2) {\n    n += 1\n  }\n  while (n < 2 * limit) {\n    let i = n\n    while (i < 2 * limit) {\n      i += n\n    }\n    n = i\n  }\n  while (n < limit) {\n    if (isPrimeSieve(n) === false) {\n      return false\n    }\n    n += 1\n  }\n  return true\n}\n\nmodule.exports = primeFib\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    if (l.length < 3) return false;\n    const first = l.shift();\n    const second = l.shift();\n    const third = l.shift();\n    return (first + second + third) === 0;\n};\n\n/*\n  partition takes a list of integers as an input.\n  it returns a list of 2-tuples, where each 2-tuple represents a pair of\n  distinct elements of the input list.\n  \n  >>> partition([1, 3, 5, 7, 0])\n  [[1, 3, 5, 7], [0]]\n  >>> partition([1, 2, 3, 4, 0])\n  [[1, 2, 3, 4], [0]]\n  >>> partition([1, 2, 3, 4, 0, 5])\n  [[1, 2, 3, 4], [5]]\n  \n  >>> partition([1, 2, 3, 4, 5, 6, 7])\n  [[1, 2, 3, 4, 5], [6, 7]]\n  \n  >>> partition([1, 2, 3, 4, 5, 6, 7, 8])\n  [[1, 2, 3, 4, 5], [6, 7, 8]]\n  \n  >>> partition([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [[1, 2, 3, 4, 5], [6, 7, 8, 9], [10]]\n  \n  >>> partition([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [[1, 2, 3, 4, 5], [6, 7, 8, 9], [10, 11]]\n  \n  >>> partition([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [[1, 2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12]]\n  \n  >>> partition([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [[1, 2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13]]\n  \n  >>> partition([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [[1, 2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13, 14]]\n  \n  >>> partition([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [[1, 2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13, 14], [15]]\n  \n  >>> partition([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [[1, 2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16]]\n  \n  >>> partition([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [[1, 2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17]]\n  \n  >>> partition([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [[1, 2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18]]\n  \n  >>> partition([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [[1, 2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]]\n  \n  >>> partition([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [[1, 2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20]]\n  \n  >>> partition([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [[1, 2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21]]\n  \n  >>> partition([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [[1, 2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21, 22]]\n  \n  >>> partition([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [[1, 2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20,"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly square boundlessly long line. \n   n car are drive exit to correctly;   simultaneously, a unlike set of n car \n   are drive right to left.    The two sets of cars start out be very far from \n   each early.   All cars motivate in the like amphetamine.   Two cars are said to clash \n   when a car that's move left to proper hit a car that's move good to left. \n   However, the cars are infinitely sturdy and hard; as a solution, they continue be active \n   in their trajectory as if they did not clash. \n\n   This function output the number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly square boundlessly long line. \n   n car are drive exit to correctly;   simultaneously, a unlike set of n car \n   are drive right to left.    The two sets of cars start out be very far from \n   each early.   All cars motivate in the like amphetamine.   Two cars are said to clash \n   when a car that's move left to proper hit a car that's move good to left. \n   However, the cars are infinitely sturdy and hard; as a solution, they continue be active \n   in their trajectory as if they did not clash. \n\n   This function output the number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n    const x0 = 0.0\n    const dx = 1.0\n    const y0 = 0.0\n    const dy = 1.0\n    const d = 2\n    const n = n\n    const distance = (d * (d + 1)) / 2\n    const time = (distance * n) / v\n    const carDistance = {\n        'left': d,\n        'right': d + 1\n    }\n    let collisions = 0\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (i!= j) {\n                let x1 = x0 + dx * time\n                let y1 = y0 + dy * time\n                let x2 = x0 + dx * time\n                let y2 = y0 - dy * time\n                if (carDistance[left[i]] >= carDistance[right[j]] && carDistance[right[i]] >= carDistance[left[j]]) {\n                    collisions += 1\n                }\n            }\n        }\n    }\n    return collisions\n}\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n    const length = l.length\n    const res = []\n    for (let i = 0; i < length; i++) {\n        res.push(l[i] + 1)\n    }\n    return res\n}\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nexport default incrList\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const isPairSumToZero = (a, b) => a + b === 0;\n  const countPairsSumToZero = (l) => l.filter(isPairSumToZero).length;\n  const hasPairSumToZero = (l) => countPairsSumToZero(l) > 0;\n\n  const allPairsSumToZero = (l) => l.filter(hasPairSumToZero);\n  const isAllPairsSumToZero = (l) => allPairsSumToZero(l).length === l.length;\n\n  const hasZeroSum = (l) => l.filter(isAllPairsSumToZero).length;\n  return hasZeroSum(l);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return drawstring theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return drawstring theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  const xString = x.toString();\n  const newDigits = [];\n  for (let i = 0; i < xString.length; i++) {\n    newDigits.push(digits[xString.charCodeAt(i) - base]);\n  }\n  const newX = newDigits.join('');\n  return newX;\n}\n\n/*\n  >>> changeBase(4, 2)\n  '0'\n  >>> changeBase(4, 3)\n  '2'\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst convertBase = (x, base) => {\n  const digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  const xString = x.toString();\n  const newDigits = [];\n  for (let i = 0; i < xString.length; i++) {\n    newDigits.push(digits[xString.charCodeAt(i) - base]);\n  }\n  const newX = newDigits.join('');\n  return newX;\n}\n\n/*\n  >>> changeBase(4, 2)\n  '0'\n  >>> changeBase(4, 3)\n  '2'\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst getBase = (x) => {\n  const digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  const xString = x.toString();\n  const base = xString.charCodeAt(0) - digits.indexOf(xString.slice(1, xString.length));\n  return base;\n}\n\n/*\n  >>> getBase(8)\n  6\n  >>> getBase(7)\n  5\n  >>> getBase(4)\n  2\n  >>> getBase(3)\n  1\n  >>> getBase(2)\n  0\n  >>> getBase(1)\n  1\n  >>> getBase(0)\n  0\n  >>> getBase(-1)\n  1\n  >>> getBase(-2)\n  2\n  >>> getBase(-3)\n  3\n  >>> getBase(-4)\n  4\n  >>> getBase(-5)\n  5\n  >>> getBase(-6)\n  6\n  >>> getBase(-7)\n  7\n  >>> getBase(-8)\n  8\n  >>> getBase(-9)\n  9\n  >>> getBase(-10)\n  10\n  >>> getBase(-11)\n  11\n  >>> getBase(-12)\n  12\n  >>> getBase(-13)\n  13\n  >>> getBase(-14)\n  14\n  >>> getBase(-15)\n  15\n  >>> getBase(-16)\n  16\n  >>> getBase(-17)\n  17\n  >>> getBase(-18)\n  18\n  >>> getBase(-19)\n  19\n  >>> getBase(-20)\n  20\n  >>> getBase(-21)\n  21\n  >>> getBase(-22)\n  22\n  >>> getBase(-23)\n  23\n  >>> getBase(-24)\n  24\n  >>> getBase(-25)\n  25\n  >>> getBase(-26)\n  26\n  >>> getBase(-27)\n  27\n  >>> getBase(-28)\n  28\n  >>> getBase(-29)\n  29\n  >>> getBase(-30)\n  30\n  >>> getBase(-31)\n  31\n  >>> getBase(-32)\n  32\n  >>> getBase(-33)\n  33\n  >>> getBase(-34)\n  34\n  >>> getBase(-35)\n  35\n  >>> getBase(-36)\n  36\n  >>> getBase(-37)\n  37\n  >>> getBase(-38)\n  38\n  >>> getBase(-39)\n  39\n  >>> getBase(-40)\n  40\n  >>> getBase(-41)\n  41\n  >>> getBase(-42)\n  42\n  >>> getBase(-43)\n  43\n  >>> getBase(-44)\n  44\n  >>> getBase(-45)\n  45\n  >>> getBase(-46)\n  46\n  >>> getBase(-47)\n  47\n  >>> getBase(-48)\n  48\n  >>> getBase(-49)\n  49\n  >>> getBase(-50)\n  50\n  >>> getBase(-51)\n  51\n  >>> getBase(-52)\n  52\n  >>> getBase(-53)\n  53\n  >>> getBase(-54)\n  54\n  >>> getBase(-55)\n  55\n  >>> getBase(-56)\n  56\n  >>> getBase(-57)\n  57\n  >>> getBase(-58)\n  58\n  >>> getBase(-59)\n  59\n  >>> getBase(-60)\n  60\n  >>> getBase(-61)\n  61\n  >>> getBase(-62)\n  62\n  >>> getBase(-63)\n  63\n  >>> getBase(-64)\n  64\n  >>> getBase(-65)\n  65\n  >>> getBase(-66)\n  66\n  >>> getBase(-67)\n  67\n  >>> getBase(-68)\n  68\n  >>> getBase(-69)\n  69\n  >>> getBase(-70)\n  70\n  >>> getBase(-71)\n  71\n  >>> getBase(-72)\n  72\n  >>> getBase(-73)\n  73\n  >>> getBase(-74)\n  74\n  >>> getBase(-75)\n  75\n  >>> getBase(-76)\n  76\n  >>> getBase(-77)\n  77\n  >>>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h / 2)\n}\n\n/**\n  * Given a triangle and a height return area of a triangle with high.\n  *\n  * @param {Number} sideA\n  * @param {Number} sideB\n  * @param {Number} h\n  * @return {Number}\n  * @example\n  * triangleArea(5, 3, 4)\n  * //=> 10\n  */\nconst triangleArea = (a, b, h) => {\n  return triangleArea(a, b) - triangleArea(b, a)\n}\n\n/**\n  * Given a triangle and a height return area of a triangle with high.\n  *\n  * @param {Number} sideA\n  * @param {Number} sideB\n  * @param {Number} h\n  * @return {Number}\n  * @example\n  * triangleArea(5, 3, 4)\n  * //=> 10\n  */\nconst triangleArea = (a, b, h) => {\n  return triangleArea(a, b) - triangleArea(b, a)\n}\n\n/**\n  * Given a triangle and a height return area of a triangle with high.\n  *\n  * @param {Number} sideA\n  * @param {Number} sideB\n  * @param {Number} h\n  * @return {Number}\n  * @example\n  * triangleArea(5, 3, 4)\n  * //=> 10\n  */\nconst triangleArea = (a, b, h) => {\n  return triangleArea(a, b) - triangleArea(b, a)\n}\n\n/**\n  * Given a triangle and a height return area of a triangle with high.\n  *\n  * @param {Number} sideA\n  * @param {Number} sideB\n  * @param {Number} h\n  * @return {Number}\n  * @example\n  * triangleArea(5, 3, 4)\n  * //=> 10\n  */\nconst triangleArea = (a, b, h) => {\n  return triangleArea(a, b) - triangleArea(b, a)\n}\n\n/**\n  * Given a triangle and a height return area of a triangle with high.\n  *\n  * @param {Number} sideA\n  * @param {Number} sideB\n  * @param {Number} h\n  * @return {Number}\n  * @example\n  * triangleArea(5, 3, 4)\n  * //=> 10\n  */\nconst triangleArea = (a, b, h) => {\n  return triangleArea(a, b) - triangleArea(b, a)\n}\n\n/**\n  * Given a triangle and a height return area of a triangle with high.\n  *\n  * @param {Number} sideA\n  * @param {Number} sideB\n  * @param {Number} h\n  * @return {Number}\n  * @example\n  * triangleArea(5, 3, 4)\n  * //=> 10\n  */\nconst triangleArea = (a, b, h) => {\n  return triangleArea(a, b) - triangleArea(b, a)\n}\n\n/**\n  * Given a triangle and a height return area of a triangle with high.\n  *\n  * @param {Number} sideA\n  * @param {Number} sideB\n  * @param {Number} h\n  * @return {Number}\n  * @example\n  * triangleArea(5, 3, 4)\n  * //=> 10\n  */\nconst triangleArea = (a, b, h) => {\n  return triangleArea(a, b) - triangleArea(b, a)\n}\n\n/**\n  * Given a triangle and a height return area of a triangle with high.\n  *\n  * @param {Number} sideA\n  * @param {Number} sideB\n  * @param {Number} h\n  * @return {Number}\n  * @example\n  * triangleArea(5, 3, 4)\n  * //=> 10\n  */\nconst triangleArea = (a, b, h) => {\n  return triangleArea(a, b) - triangleArea(b, a)\n}\n\n/**\n  * Given a triangle and a height return area of a triangle with high.\n  *\n  * @param {Number} sideA\n  * @param {Number} sideB\n  * @param {Number} h\n  * @return {Number}\n  * @example\n  * triangleArea(5, 3, 4)\n  * //=> 10\n  */\nconst triangleArea = (a, b, h) => {\n  return triangleArea(a, b) - triangleArea(b, a)\n}\n\n/**\n  * Given a triangle and a height return area of a triangle with high.\n  *\n  * @param {Number} sideA\n  * @param {Number} sideB\n  * @param {Number} h\n  * @return {Number}\n  * @example\n  * triangleArea(5, 3, 4)\n  * //=> 10\n  */\nconst triangleArea = (a, b, h) => {\n  return triangleArea(a, b) - triangleArea(b, a)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please publish a affair to efficiently calculate the n-th component of the fib4 phone number sequence.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please publish a affair to efficiently calculate the n-th component of the fib4 phone number sequence.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  let [n0, n1] = [fib4(n-1), fib4(n-2)];\n  return n1 + n0 + fib4(n-3) + fib4(n-4);\n}\n\nconst fib4Test = () => {\n  const n = 5;\n  const [n0, n1] = [fib4(n-1), fib4(n-2)];\n  console.log(n1 + n0 + fib4(n-3) + fib4(n-4));\n}\n\n// fib4Test();\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return undefined\n  const sorted = l.sort()\n  let middle = (sorted.length / 2)\n  return (sorted[middle] + sorted[middle - 1]) / 2\n}\n\nmodule.exports = median\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": false, "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (typeof text!=='string') {\n    return false;\n  }\n  return text.split('').reverse().join('') === text;\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (p === 1) return n % 1\n  if (n === 0) return 0\n  return (n % p) | 0\n}\n\n/**\n * Return an array of primes less than n, which are coprime with p.\n  >>> coprime(3, 5)\n  [3, 5]\n  >>> coprime(7, 5)\n  [7]\n  >>> coprime(5, 1)\n  []\n  >>> coprime(9, 11)\n  [3, 5, 7]\n  */\nconst coprime = (n, p) => {\n  let primes = []\n  for (let i = 0; i <= n; i++) {\n    if (modp(i, p) === 0) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\n/**\n * Return the number of integers in the range [a, b], which are coprime with p.\n  >>> coprime(3, 5)\n  2\n  >>> coprime(7, 5)\n  1\n  >>> coprime(5, 1)\n  0\n  >>> coprime(9, 11)\n  2\n  */\nconst coprimeCount = (a, b, p) => {\n  let count = 0\n  for (let i = a; i <= b; i++) {\n    if (modp(i, p) === 0) {\n      count++\n    }\n  }\n  return count\n}\n\n/**\n * Return the number of distinct integers in the range [a, b], which are coprime with p.\n  >>> coprimeCount(3, 5)\n  2\n  >>> coprimeCount(7, 5)\n  1\n  >>> coprimeCount(5, 1)\n  0\n  >>> coprimeCount(9, 11)\n  2\n  */\nconst coprimeDistinct = (a, b, p) => {\n  let distinctCount = 0\n  let distinct = []\n  for (let i = a; i <= b; i++) {\n    if (modp(i, p) === 0) {\n      distinct.push(i)\n      if (distinct.length === distinctCount + 1) {\n        distinctCount++\n      }\n    }\n  }\n  return distinctCount\n}\n\nexport {\n  modp,\n  coprime,\n  coprimeCount,\n  coprimeDistinct\n}\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes as remark string encode with encode_shift routine. return decoded string. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as remark string encode with encode_shift routine. return decoded string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n   ) ).join(\"\"); \n } \n\n\n /* \n   * Takes a string, returns an array of strings. Each string in the array\n   * is the encoding of the same string with the same quality levels.\n   * \n   * The quality levels are defined as follows:\n   * \n   * \n   * / *\n   * \n   *  Quality Levels:\n   *  \n   *  1. a (the most common character in the string)\n   *  2. b (the second most common character)\n   *  3. c (the third most common character)\n   *  4. d (the fourth most common character)\n   *  5. e (the fifth most common character)\n   *  6. f (the sixth most common character)\n   *  7. g (the seventh most common character)\n   *  8. h (the eighth most common character)\n   *  9. i (the ninth most common character)\n   *  10. j (the tenth most common character)\n   *  11. k (the eleventh most common character)\n   *  12. l (the twelfth most common character)\n   *  13. m (the thirteenth most common character)\n   *  14. n (the fourteenth most common character)\n   *  15. o (the fifteenth most common character)\n   *  16. p (the sixteenth most common character)\n   *  17. q (the seventeenth most common character)\n   *  18. r (the eighteenth most common character)\n   *  19. s (the nineteenth most common character)\n   *  20. t (the twentieth most common character)\n   *  21. u (the twenty-first most common character)\n   *  22. v (the twenty-second most common character)\n   *  23. w (the twenty-third most common character)\n   *  24. x (the twenty-fourth most common character)\n   *  25. y (the twenty-fifth most common character)\n   *  26. z (the twenty-sixth most common character)\n   *  \n   *  This array is also known as the radix sort. The radix sort uses\n   *  a radix sort to sort a string. \n   *  \n   *  * /\n \n const encode = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n   ) ).join(\"\"); \n } \n \n / * \n   * \n   * Takes a string, returns an array of strings. Each string in the array\n   * is the decoding of the same string with the same quality levels.\n   * \n   * The quality levels are defined as follows:\n   * \n   * \n   * / *\n   * \n   *  Quality Levels:\n   *  \n   *  1. a (the most common character in the string)\n   *  2. b (the second most common character)\n   *  3. c (the third most common character)\n   *  4. d (the fourth most common character)\n   *  5. e (the fifth most common character)\n   *  6. f (the sixth most common character)\n   *  7. g (the seventh most common character)\n   *  8. h (the eighth most common character)\n   *  9. i (the ninth most common character)\n   *  10. j (the tenth most common character)\n   *  11. k (the eleventh most common character)\n   *  12. l (the twelfth most common character)\n   *  13. m (the thirteenth most common character)\n   *  14. n (the fourteenth most common character)\n   *  15. o (the fifteenth most common character)\n   *  16. p (the sixteenth most common character)\n   *  17. q (the seventeenth most common character)\n   *  18. r (the eighteenth most common character)\n   *  19. s (the nineteenth most common character)\n   *  20. t (the twentieth most common character)\n   *  21. u (the twenty-first most common character)\n   *  22. v (the twenty-second most common character)\n   *  23. w (the twenty-third most common character)\n   *  24. x (the twenty-fourth most common character)\n   *  25. y (the twenty-fifth most common character)\n   *  26. z (the twenty-sixth most common character)\n   *  \n   *  This array is also known as the radix sort. The radix sort uses\n   *  a radix sort to sort a string. \n   *  \n   *  * /\n \n const decode = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n   ) ).join(\"\"); \n } \n\n\n/*************\n*  The main function\n*  /***********\n\nconst input = (s) = > encode(s);\n\nconst output = (s) = > decode(s);\n\nconsole.log(input, output);\n\n\n/*****************\n*  The main function\n*  /******************\n\nconst input = (s) = > encode(s);\n\nconst output = (s) = > decode(s);\n\nconsole.log(input, output);\n\n\n/*****************\n*  The main function\n*  /******************"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string and returns drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  text = text.toLowerCase();\n  return text.replace(/[a-z]/g, c => {\n    if (c!== 'a' && c!== 'e' && c!== 'i' && c!== 'o' && c!== 'u') {\n      return c;\n    }\n  });\n};\n\n/*\n  removePunctuations is a function that takes string and returns drawstring without punctuation.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuations('abcdef')\n  'abcdef'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'aBAA'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuations = (text) => {\n  text = text.toLowerCase();\n  return text.replace(/[a-zA-Z0-9\\-\\.,\\?\\!\\;]/g, c => {\n    if (c!== 'a' && c!== 'e' && c!== 'i' && c!== 'o' && c!== 'u' && c!== '\\'' && c!== ',' && c!== '\\.' && c!== '?' && c!== '!' && c!== ';') {\n      return c;\n    }\n  });\n};\n\n/*\n  normalize is a function that takes string and returns string without punctuation.\n  >>> normalize('')\n  ''\n  >>> normalize(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> normalize('abcdef')\n  'abcdef'\n  >>> normalize('aaaaa')\n  ''\n  >>> normalize('aaBAA')\n  'aaBAA'\n  >>> normalize('zbcd')\n  'zbcd'\n  */\nconst normalize = (text) => {\n  text = text.toLowerCase();\n  return text.replace(/[^a-z0-9\\-\\.,\\?\\!\\;]/g, c => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  returnText is a function that takes string and returns string.\n  >>> returnText('')\n  ''\n  >>> returnText(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> returnText('abcdef')\n  'abcdef'\n  >>> returnText('aaaaa')\n  ''\n  >>> returnText('aaBAA')\n  'aaBAA'\n  >>> returnText('zbcd')\n  'zbcd'\n  */\nconst returnText = (text) => {\n  text = text.toLowerCase();\n  return text.replace(/[^a-z0-9\\-\\.,\\?\\!\\;]/g, c => {\n    return c;\n  });\n};\n\n/*\n  normalize is a function that takes string and returns string.\n  >>> normalize('')\n  ''\n  >>> normalize(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> normalize('abcdef')\n  'abcdef'\n  >>> normalize('aaaaa')\n  ''\n  >>> normalize('aaBAA')\n  'aaBAA'\n  >>> normalize('zbcd')\n  'zbcd'\n  */\nconst normalize = (text) => {\n  text = text.toLowerCase();\n  return text.replace(/[^a-z0-9\\-\\.,\\?\\!\\;]/g, c => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  replaceWhitespace is a function that takes string and returns string.\n  >>> replaceWhitespace('')\n  ''\n  >>> replaceWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> replaceWhitespace('abcdef')\n  'abcdef'\n  >>> replaceWhitespace('aaaaa')\n  ''\n  >>> replaceWhitespace('aaBAA')\n  'aaBAA'\n  >>> replaceWhitespace('zbcd')\n  'zbcd'\n  */\nconst replaceWhitespace = (text) => {\n  text = text.toLowerCase();\n  return text.replace(/\\s/g,'');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'aaBAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  text = text.toLowerCase();\n  return text.replace(/\\s/g, '');\n};\n\nexport { removePunctuations, removeVowels, normalize, returnText, replaceWhitespace, removeWhitespace };\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": false, "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.reduce((acc, v) => acc && v <= t, true);\n}\n\nexport default belowThreshold;<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add2 = (x, y) => {\n  return x + y;\n};\n\nconst add3 = (x, y) => {\n  return x + y;\n};\n\nconst add4 = (x, y) => {\n  return x + y;\n};\n\nconst add5 = (x, y) => {\n  return x + y;\n};\n\nconst add6 = (x, y) => {\n  return x + y;\n};\n\nconst add7 = (x, y) => {\n  return x + y;\n};\n\nconst add8 = (x, y) => {\n  return x + y;\n};\n\nconst add9 = (x, y) => {\n  return x + y;\n};\n\nconst add10 = (x, y) => {\n  return x + y;\n};\n\nconst add11 = (x, y) => {\n  return x + y;\n};\n\nconst add12 = (x, y) => {\n  return x + y;\n};\n\nconst add13 = (x, y) => {\n  return x + y;\n};\n\nconst add14 = (x, y) => {\n  return x + y;\n};\n\nconst add15 = (x, y) => {\n  return x + y;\n};\n\nconst add16 = (x, y) => {\n  return x + y;\n};\n\nconst add17 = (x, y) => {\n  return x + y;\n};\n\nconst add18 = (x, y) => {\n  return x + y;\n};\n\nconst add19 = (x, y) => {\n  return x + y;\n};\n\nconst add20 = (x, y) => {\n  return x + y;\n};\n\nconst add21 = (x, y) => {\n  return x + y;\n};\n\nconst add22 = (x, y) => {\n  return x + y;\n};\n\nconst add23 = (x, y) => {\n  return x + y;\n};\n\nconst add24 = (x, y) => {\n  return x + y;\n};\n\nconst add25 = (x, y) => {\n  return x + y;\n};\n\nconst add26 = (x, y) => {\n  return x + y;\n};\n\nconst add27 = (x, y) => {\n  return x + y;\n};\n\nconst add28 = (x, y) => {\n  return x + y;\n};\n\nconst add29 = (x, y) => {\n  return x + y;\n};\n\nconst add30 = (x, y) => {\n  return x + y;\n};\n\nconst add31 = (x, y) => {\n  return x + y;\n};\n\nconst add32 = (x, y) => {\n  return x + y;\n};\n\nconst add33 = (x, y) => {\n  return x + y;\n};\n\nconst add34 = (x, y) => {\n  return x + y;\n};\n\nconst add35 = (x, y) => {\n  return x + y;\n};\n\nconst add36 = (x, y) => {\n  return x + y;\n};\n\nconst add37 = (x, y) => {\n  return x + y;\n};\n\nconst add38 = (x, y) => {\n  return x + y;\n};\n\nconst add39 = (x, y) => {\n  return x + y;\n};\n\nconst add40 = (x, y) => {\n  return x + y;\n};\n\nconst add41 = (x, y) => {\n  return x + y;\n};\n\nconst add42 = (x, y) => {\n  return x + y;\n};\n\nconst add43 = (x, y) => {\n  return x + y;\n};\n\nconst add44 = (x, y) => {\n  return x + y;\n};\n\nconst add45 = (x, y) => {\n  return x + y;\n};\n\nconst add46 = (x, y) => {\n  return x + y;\n};\n\nconst add47 = (x, y) => {\n  return x + y;\n};\n\nconst add48 = (x, y) => {\n  return x + y;\n};\n\nconst add49 = (x, y) => {\n  return x + y;\n};\n\nconst add50 = (x, y) => {\n  return x + y;\n};\n\nconst add51 = (x, y) => {\n  return x + y;\n};\n\nconst add52 = (x, y) => {\n  return x + y;\n};\n\nconst add53 = (x, y) => {\n  return x + y;\n};\n\nconst add54 = (x, y) => {\n  return x + y;\n};\n\nconst add55 = (x, y) => {\n  return x + y;\n};\n\nconst add56 = (x, y) => {\n  return x + y;\n};\n\nconst add57 = (x, y) => {\n  return x + y;\n};\n\nconst add58 = (x, y) => {\n  return x + y;\n};\n\nconst add59 = (x, y) => {\n  return x + y;\n};\n\nconst add60 = (x, y) => {\n  return x + y;\n};\n\nconst add61 = (x, y) => {\n  return x + y;\n};\n\nconst add62 = (x, y) => {\n  return x + y;\n};\n\nconst add63 = (x, y) => {\n  return x + y;\n};\n\nconst add64 = (x, y) => {\n  return x + y;\n};\n\nconst add65 = (x, y) => {\n  return x + y;\n};\n\nconst add66 = (x, y) => {\n  return x + y;\n};\n\nconst add67 = (x, y) => {\n  return x + y;\n};\n\nconst add68 = (x, y) => {\n  return x + y;\n};\n\nconst add69 = (x"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    let l = s0.length, r = s1.length;\n    if (l!== r) return false;\n    for (let i = 0; i < l; i++) {\n        if (s0[i]!== s1[i]) return false;\n    }\n    return true;\n};\n\n/*\n  Check if two words are anagrams.\n  >>> anagram('hello', 'olleh')\n  true\n  >>> anagram('hello', 'hellh')\n  false\n  >>> anagram('hello', 'hello')\n  true\n  >>> anagram('hellh', 'hello')\n  true\n  >>> anagram('hello', 'hell')\n  false\n  >>> anagram('hello', 'hello')\n  true\n  */\nconst anagram = (s0, s1) => {\n    if (s0 === s1) return true;\n    const arr = [];\n    for (let i = 0; i < s0.length; i++) {\n        if (arr.indexOf(s0[i]) === -1) {\n            arr.push(s0[i]);\n        }\n    }\n    let i = 0;\n    for (let j = 0; j < s1.length; j++) {\n        if (arr.indexOf(s1[j]) === -1) {\n            i = i + 1;\n        }\n    }\n    return i === s0.length;\n};\n\n/*\n  Check if two words are permutation of one another.\n  >>> permutation('a', 'a')\n  true\n  >>> permutation('a', 'b')\n  false\n  >>> permutation('a', 'bb')\n  false\n  >>> permutation('abcd', 'abcde')\n  true\n  >>> permutation('abcde', 'abcd')\n  false\n  >>> permutation('abcd', 'bbcda')\n  false\n  >>> permutation('abcd', 'abcd')\n  true\n  >>> permutation('abcdef', 'abcdef')\n  true\n  >>> permutation('abcdef', 'efcbad')\n  false\n  >>> permutation('abcdef', 'acbdef')\n  false\n  >>> permutation('abcdef', 'acbdff')\n  false\n  >>> permutation('abcdef', 'abcdef')\n  true\n  */\nconst permutation = (s0, s1) => {\n    if (s0 === s1) return true;\n    const arr = [];\n    for (let i = 0; i < s0.length; i++) {\n        if (arr.indexOf(s0[i]) === -1) {\n            arr.push(s0[i]);\n        }\n    }\n    const len = s0.length;\n    let i = 0;\n    for (let j = 0; j < s1.length; j++) {\n        if (arr.indexOf(s1[j]) === -1) {\n            i = i + 1;\n        }\n    }\n    return i === len;\n};\n\n/*\n  Check if two words are anagrams.\n  >>> anagram('hello', 'olleh')\n  true\n  >>> anagram('hello', 'hellh')\n  false\n  >>> anagram('hello', 'hello')\n  true\n  >>> anagram('hellh', 'hello')\n  true\n  >>> anagram('hello', 'hell')\n  false\n  >>> anagram('hello', 'hello')\n  true\n  */\nconst isAnagram = (s0, s1) => {\n    if (s0 === s1) return true;\n    const arr = [];\n    for (let i = 0; i < s0.length; i++) {\n        if (arr.indexOf(s0[i]) === -1) {\n            arr.push(s0[i]);\n        }\n    }\n    let i = 0;\n    for (let j = 0; j < s1.length; j++) {\n        if (arr.indexOf(s1[j]) === -1) {\n            i = i + 1;\n        }\n    }\n    return i === s0.length;\n};\n\nconst solution = (s0, s1) => {\n    if (s0 === s1) return true;\n    if (sameChars(s0, s1)) return true;\n    if (isAnagram(s0, s1)) return true;\n    if (permutation(s0, s1)) return true;\n    return false;\n};\n\n/*\n  Check if two words are anagrams.\n  >>> anagram('hello', 'olleh')\n  true\n  >>> anagram('hello', 'hellh')\n  false\n  >>> anagram('hello', 'hello')\n  true\n  >>> anagram('hellh', 'hello')\n  true\n  >>> anagram('hello', 'hell')\n  false\n  >>> anagram('hello', 'hello')\n  true\n  */\nconst test = () => {\n    console.log(solution('hello', 'hello'));\n    console.log(solution('hello', 'olleh'));\n    console.log(solution('hello', 'hello'));\n    console.log(solution('hello', 'hellh'));\n    console.log(solution('hello', 'hello'));\n    console.log(solution('hellh', 'hello'));\n    console.log(solution('hello', 'hell'));\n    console.log(solution('hello', 'hello'));\n    console.log(solution('hellh', 'hello'));\n    console.log(solution('hello', 'hell'));\n    console.log(solution('hello', 'hello'));\n    console.log(solution('abcdef', 'efcbad'));\n    console.log(solution"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n    let a = 1, b = 1, i;\n    for (i = 0; i < n; i++) {\n        b = a + b;\n        a = b - a;\n    }\n    return a;\n};\n\n/*\n  >>> fib(100)\n  687920\n  >>> fib(1000)\n  11284726666\n  */\nconst fib_n = (n) => {\n    let a = 1, b = 1, i;\n    for (i = 0; i < n; i++) {\n        b = a + b;\n        a = b - a;\n    }\n    return a;\n};\n\n/*\n  >>> fib_n(20)\n  10\n  >>> fib_n(100)\n  17\n  >>> fib_n(1000)\n  264726666\n  */\nconst fib_n_rec = (n) => {\n    let a = 1, b = 1, i;\n    for (i = 0; i < n; i++) {\n        b = a + b;\n        a = b - a;\n    }\n    return a;\n};\n\n/*\n  >>> fib_n_rec(10)\n  10\n  >>> fib_n_rec(20)\n  10\n  >>> fib_n_rec(100)\n  17\n  >>> fib_n_rec(1000)\n  264726666\n  */\nconst fib_n_iter = (n) => {\n    let a = 1, b = 1, i;\n    for (i = 0; i < n; i++) {\n        b = a + b;\n        a = b - a;\n    }\n    return a;\n};\n\n/*\n  >>> fib_n_iter(10)\n  10\n  >>> fib_n_iter(20)\n  10\n  >>> fib_n_iter(100)\n  17\n  >>> fib_n_iter(1000)\n  264726666\n  */\nconst fib_n_rec_iter = (n) => {\n    let a = 1, b = 1, i;\n    for (i = 0; i < n; i++) {\n        b = a + b;\n        a = b - a;\n    }\n    return a;\n};\n\n/*\n  >>> fib_n_rec_iter(10)\n  10\n  >>> fib_n_rec_iter(20)\n  10\n  >>> fib_n_rec_iter(100)\n  17\n  >>> fib_n_rec_iter(1000)\n  264726666\n  */\nconst fib_n_iter_rec = (n) => {\n    let a = 1, b = 1, i;\n    for (i = 0; i < n; i++) {\n        b = a + b;\n        a = b - a;\n    }\n    return a;\n};\n\n/*\n  >>> fib_n_iter_rec(10)\n  10\n  >>> fib_n_iter_rec(20)\n  10\n  >>> fib_n_iter_rec(100)\n  17\n  >>> fib_n_iter_rec(1000)\n  264726666\n  */\nconst fib_n_iter_rec_rec = (n) => {\n    let a = 1, b = 1, i;\n    for (i = 0; i < n; i++) {\n        b = a + b;\n        a = b - a;\n    }\n    return a;\n};\n\n/*\n  >>> fib_n_iter_rec_rec(10)\n  10\n  >>> fib_n_iter_rec_rec(20)\n  10\n  >>> fib_n_iter_rec_rec(100)\n  17\n  >>> fib_n_iter_rec_rec(1000)\n  264726666\n  */\nconst fib_n_iter_rec_rec_rec = (n) => {\n    let a = 1, b = 1, i;\n    for (i = 0; i < n; i++) {\n        b = a + b;\n        a = b - a;\n    }\n    return a;\n};\n\nconst tests = [\n    [fib, 10, fib_n, fib_n_rec, fib_n_iter, fib_n_rec_iter, fib_n_iter_rec, fib_n_iter_rec_rec, fib_n_iter_rec_rec_rec],\n    [fib, 100, fib_n, fib_n_rec, fib_n_iter, fib_n_rec_iter, fib_n_iter_rec, fib_n_iter_rec_rec, fib_n_iter_rec_rec_rec],\n    [fib, 1000, fib_n, fib_n_rec, fib_n_iter, fib_n_rec_iter, fib_n_iter_rec, fib_n_iter_rec_rec, fib_n_iter_rec_rec_rec],\n];\n\nfor (let [func, n, fn, fn_n, fn_n_rec, fn_n_iter, fn_n_rec_iter, fn_n_iter_rec, fn_n_iter_rec_rec, fn_n_iter_rec_rec_rec] of tests) {\n    let r = fn(n);\n    assert.equal(r, fn_n(n));\n    assert.equal(r, fn_n_rec(n));\n    assert.equal(r, fn_n_rec_iter(n));\n    assert.equal(r, fn_n_rec_iter_rec(n));\n    assert.equal(r, fn_n_rec_iter_rec_rec(n));\n    assert.equal(r, fn_n_iter_rec(n));\n    assert.equal(r, fn_n_iter_rec_rec(n));\n    assert.equal(r, fn_n_iter_rec_rec_rec(n));\n    assert.equal(r, fn_n_iter_rec_rec_rec_rec(n));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [],\n    stackLen = 0;\n\n  brackets.split(\" \").forEach((bracket) => {\n    let isOpening = bracket.startsWith(\"<\"),\n      isClosing = bracket.endsWith(\">\");\n\n    if (isOpening) {\n      stack.push(isClosing);\n    } else {\n      if (stackLen > 0 && stack[stackLen - 1] === isClosing) {\n        stack.pop();\n      }\n    }\n  });\n  return stack.length === 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const arr = l.sort();\n  let i = 1;\n  let j = 0;\n  while (i < arr.length) {\n    if (arr[i] === arr[j]) {\n      j += 1;\n      i += 1;\n    } else if (arr[i] < arr[j]) {\n      return false;\n    } else {\n      i += 1;\n    }\n  }\n  return true;\n};\n\nmodule.exports = monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const sorted = sortedUniq(l1).concat(sortedUniq(l2));\n  const seen = new Set(sorted);\n  return Array.from(seen);\n};\n\nexport default common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n % 2 == 0) {\n    return n;\n  }\n  const max = (n / 2) + 1;\n  for (let i = 3; i <= max; i += 2) {\n    if (n % i == 0) {\n      return i;\n    }\n  }\n  return n;\n};\n\nconsole.log(largestPrimeFactor(2048));\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": false, "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const result = 1;\n  for (let i = 1; i <= n; i++) {\n    result += i;\n  }\n  return result;\n};\n\nconst sumToN = (n) => {\n  return sumToN(n);\n};\n\nexport default sumToN;\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLength = brackets.length;\n  const bracketsStack = new Array(bracketsLength);\n  let bracketsStackSize = 0;\n\n  for (let i = 0; i < bracketsLength; i++) {\n    if (brackets[i] === '(') {\n      bracketsStack[bracketsStackSize] = ')';\n      bracketsStackSize++;\n    }\n    else {\n      bracketsStack[bracketsStackSize] = '(';\n      bracketsStackSize--;\n    }\n  }\n\n  while (bracketsStackSize > 0) {\n    if (bracketsStack[bracketsStackSize]!== bracketsStack[bracketsStackSize - 1]) {\n      return false;\n    }\n    bracketsStackSize--;\n  }\n  return true;\n}\n\n/*\n  given a bracketed string of \"(A(B)(C)(D))\", return the string with the brackets\n  replaced by the string \"A B C D\"\n  if there are mismatching brackets, return false\n  */\nconst replaceBrackets = (brackets) => {\n  const bracketsLength = brackets.length;\n  const bracketsStack = new Array(bracketsLength);\n  let bracketsStackSize = 0;\n\n  for (let i = 0; i < bracketsLength; i++) {\n    if (brackets[i] === '(') {\n      bracketsStack[bracketsStackSize] ='';\n      bracketsStackSize++;\n    }\n    else {\n      bracketsStack[bracketsStackSize] = ')';\n      bracketsStackSize--;\n    }\n  }\n\n  const bracketsStackLength = bracketsStackSize;\n  const bracketsStackString = new Array(bracketsStackLength);\n  for (let i = 0; i < bracketsStackLength; i++) {\n    bracketsStackString[i] = bracketsStack[i];\n  }\n  return bracketsStackString.join('');\n}\n\n/*\n  Given a string, return the string with brackets replaced by spaces.\n\n  If there are mismatching brackets, return false\n  */\nconst replaceBracketsInString = (str) => {\n  const brackets = str.match(/\\(.*?\\)/g);\n  const bracketsLength = brackets.length;\n  let replacedString = brackets[0];\n  for (let i = 1; i < bracketsLength; i++) {\n    if (brackets[i] === '(') {\n      replacedString +='';\n    }\n    else {\n      replacedString += ')';\n    }\n  }\n  return replacedString;\n}\n\n/*\n  Given a string, return the string with brackets replaced by spaces.\n\n  If there are mismatching brackets, return false\n  */\nconst replaceBracketsInString = (str) => {\n  const brackets = str.match(/\\(.*?\\)/g);\n  const bracketsLength = brackets.length;\n  let replacedString = brackets[0];\n  for (let i = 1; i < bracketsLength; i++) {\n    if (brackets[i] === '(') {\n      replacedString +='';\n    }\n    else {\n      replacedString += ')';\n    }\n  }\n  return replacedString;\n}\n\nconst replaceBracketsInString = (str) => {\n  const brackets = str.match(/\\(.*?\\)/g);\n  const bracketsLength = brackets.length;\n  let replacedString = brackets[0];\n  for (let i = 1; i < bracketsLength; i++) {\n    if (brackets[i] === '(') {\n      replacedString +='';\n    }\n    else {\n      replacedString += ')';\n    }\n  }\n  return replacedString;\n}\n\n/*\n  Given a string, return the string with brackets replaced by spaces.\n\n  If there are mismatching brackets, return false\n  */\nconst replaceBracketsInString = (str) => {\n  const brackets = str.match(/\\(.*?\\)/g);\n  const bracketsLength = brackets.length;\n  let replacedString = brackets[0];\n  for (let i = 1; i < bracketsLength; i++) {\n    if (brackets[i] === '(') {\n      replacedString +='';\n    }\n    else {\n      replacedString += ')';\n    }\n  }\n  return replacedString;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same mannequin.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same mannequin.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const res = [];\n  const n = xs.length;\n  let p = 1;\n  for (let i = n-1; i >= 0; i--) {\n    res[i] = p;\n    p = p * xs[i];\n  }\n  return res;\n};\n\n/**\n  * Find derivative of given function at given x-point\n  * @param f Function to be differentiated\n  * @param x Point at which to find derivative\n  * @return Derivative of f at given x-point\n  */\nconst derivativeOf = (f, x) => {\n  const fDeriv = derivative(f);\n  return fDeriv[fDeriv.indexOf(x)];\n};\n\nconst test = {\n  derivativeOf: (f, x) => derivativeOf(f, x),\n  derivative: (xs) => derivative(xs)\n};\n\nconst test_f = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f2 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f3 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f4 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f5 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f6 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f7 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f8 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f9 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f10 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f11 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f12 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f13 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f14 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f15 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f16 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f17 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f18 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f19 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f20 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f21 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f22 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f23 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f24 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f25 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f26 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f27 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f28 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f29 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f30 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f31 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f32 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f33 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f34 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f35 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f36 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f37 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f38 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f39 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f40 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f41 = (x) => {\n  return test.derivativeOf(x, x);\n};\n\nconst test_f42 = (x) => {\n  return test.derivativeOf(x,"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please publish a affair to efficiently calculate the n-th component of the fibfib phone number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please publish a affair to efficiently calculate the n-th component of the fibfib phone number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 0\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconsole.log(fibfib(1))\nconsole.log(fibfib(5))\nconsole.log(fibfib(8))\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n    let n = 0, i = 0;\n    while (i < s.length) {\n        if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'u' || s[i] === 'o') {\n            n++;\n            i++;\n        } else if (s[i] === 'y' && i === s.length - 1) {\n            n++;\n            i++;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n\n/*\n  Write a function that takes a string as input and returns the number of consonants\n  in the string. Here consonants are letters except for 'y' that occurs at the end of\n  the string.\n\n  exercise:\n  >>> consonantsCount(\"abcde\")\n  3\n  >>> consonantsCount(\"ACEDY\")\n  2\n  */\nconst consonantsCount = (s) => {\n    let n = 0, i = 0;\n    while (i < s.length) {\n        if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n            i++;\n        } else {\n            n++;\n            i++;\n        }\n    }\n    return n;\n}\n\n/*\n  Write a function that takes a string as input and returns the number of consonants\n  and vowels in the string.\n\n  exercise:\n  >>> consonantsAndVowelsCount(\"abcde\")\n  4\n  >>> consonantsAndVowelsCount(\"ACEDY\")\n  3\n  */\nconst consonantsAndVowelsCount = (s) => {\n    let n = 0, i = 0;\n    while (i < s.length) {\n        if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n            n++;\n            i++;\n        } else if (s[i] === 'y' && i === s.length - 1) {\n            n++;\n            i++;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n\nconst words = [\"hello\", \"world\", \"this\", \"is\", \"a\", \"test\", \"for\", \"consonants\", \"and\", \"vowels\", \"and\", \"consonants\", \"and\", \"vowels\"];\n\nconsole.log(vowelsCount(words[0]));\nconsole.log(vowelsCount(words[1]));\nconsole.log(vowelsCount(words[2]));\nconsole.log(vowelsCount(words[3]));\nconsole.log(vowelsCount(words[4]));\nconsole.log(vowelsCount(words[5]));\nconsole.log(vowelsCount(words[6]));\nconsole.log(vowelsCount(words[7]));\nconsole.log(vowelsCount(words[8]));\nconsole.log(vowelsCount(words[9]));\nconsole.log(vowelsCount(words[10]));\nconsole.log(vowelsCount(words[11]));\nconsole.log(vowelsCount(words[12]));\nconsole.log(vowelsCount(words[13]));\nconsole.log(vowelsCount(words[14]));\nconsole.log(vowelsCount(words[15]));\nconsole.log(vowelsCount(words[16]));\nconsole.log(vowelsCount(words[17]));\nconsole.log(vowelsCount(words[18]));\nconsole.log(vowelsCount(words[19]));\nconsole.log(vowelsCount(words[20]));\nconsole.log(vowelsCount(words[21]));\nconsole.log(vowelsCount(words[22]));\nconsole.log(vowelsCount(words[23]));\nconsole.log(vowelsCount(words[24]));\nconsole.log(vowelsCount(words[25]));\nconsole.log(vowelsCount(words[26]));\nconsole.log(vowelsCount(words[27]));\nconsole.log(vowelsCount(words[28]));\nconsole.log(vowelsCount(words[29]));\nconsole.log(vowelsCount(words[30]));\nconsole.log(vowelsCount(words[31]));\nconsole.log(vowelsCount(words[32]));\nconsole.log(vowelsCount(words[33]));\nconsole.log(vowelsCount(words[34]));\nconsole.log(vowelsCount(words[35]));\nconsole.log(vowelsCount(words[36]));\nconsole.log(vowelsCount(words[37]));\nconsole.log(vowelsCount(words[38]));\nconsole.log(vowelsCount(words[39]));\nconsole.log(vowelsCount(words[40]));\nconsole.log(vowelsCount(words[41]));\nconsole.log(vowelsCount(words[42]));\nconsole.log(vowelsCount(words[43]));\nconsole.log(vowelsCount(words[44]));\nconsole.log(vowelsCount(words[45]));\nconsole.log(vowelsCount(words[46]));\nconsole.log(vowelsCount(words[47]));\nconsole.log(vowelsCount(words[48]));\nconsole.log(vowelsCount(words[49]));\nconsole.log(vowelsCount(words[50]));\nconsole.log(vowelsCount(words[51]));\nconsole.log("}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits veracious by shift\n   and return the resultant role as a bowed stringed instrument. \n   If shift > numeral of digits, return finger reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits veracious by shift\n   and return the resultant role as a bowed stringed instrument. \n   If shift > numeral of digits, return finger reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  return Array.from(x).map((x, i) => (x << shift) | (x >>> (32 - shift))).join(\"\")\n}\n\n/**\n   *  Given a rotated integer, return the original integer.\n   *  Rotate the integer x by k positions.\n  >>> rotate(12, 1)\n  12\n  >>> rotate(12, 2)\n  16\n  >>> rotate(12, 3)\n  23\n  */\nconst rotate = (x, k) => {\n  return x + (x << k) | (x >>> (32 - k))\n}\n\n/**\n   *  Given two integers, return their sum.\n   *  Return 0 if the sum is not possible.\n  >>> sum(12, 22)\n  34\n  >>> sum(12, -22)\n  -10\n  >>> sum(12, 12)\n  24\n  */\nconst sum = (x, y) => {\n  let xl = x.toString().length,\n    yl = y.toString().length,\n    s = 0\n  \n  if (xl < yl) {\n    s += x << (yl - xl)\n  } else if (yl < xl) {\n    s += y << (xl - yl)\n  } else {\n    s += x\n  }\n  \n  return s\n}\n\n/**\n   *  Given two integers, return their difference.\n   *  Return 0 if the difference is not possible.\n  >>> difference(12, 22)\n  -2\n  >>> difference(12, -22)\n  22\n  >>> difference(12, 12)\n  0\n  */\nconst difference = (x, y) => {\n  let xl = x.toString().length,\n    yl = y.toString().length,\n    d = 0\n  \n  if (xl < yl) {\n    d += x << (yl - xl)\n  } else if (yl < xl) {\n    d += y << (xl - yl)\n  }\n  \n  return d\n}\n\n/**\n   *  Given two integers, return their product.\n   *  Return 0 if the product is not possible.\n  >>> product(12, 22)\n  0\n  >>> product(12, -22)\n  0\n  >>> product(12, 12)\n  72\n  */\nconst product = (x, y) => {\n  let xl = x.toString().length,\n    yl = y.toString().length,\n    p = 1\n  \n  for (let i = 0; i < xl; i++) {\n    p *= xl\n  }\n  \n  for (let i = 0; i < yl; i++) {\n    p *= yl\n  }\n  \n  return p\n}\n\n/**\n   *  Given two integers, return their product.\n   *  Return 0 if the product is not possible.\n  >>> product(12, 22)\n  0\n  >>> product(12, -22)\n  0\n  >>> product(12, 12)\n  72\n  */\nconst mod = (x, y) => {\n  let xl = x.toString().length,\n    yl = y.toString().length,\n    p = 1\n  \n  for (let i = 0; i < xl; i++) {\n    p *= xl\n  }\n  \n  for (let i = 0; i < yl; i++) {\n    p *= yl\n  }\n  \n  return p % (x * y)\n}\n\nmodule.exports = {\n  circularShift,\n  rotate,\n  sum,\n  difference,\n  product,\n  mod\n}\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  let sLength = s.length\n  for (let i = 0; i < sLength; i++) {\n    sum += parseInt(s.charAt(i))\n  }\n  return sum\n}\n\n// console.log(digitSum(\"\"))\n// console.log(digitSum(\"abAB\"))\n// console.log(digitSum(\"abcCd\"))\n// console.log(digitSum(\"helloE\"))\n// console.log(digitSum(\"woArBld\"))\n// console.log(digitSum(\"aAaaaXa\"))\n\nmodule.exports = digitSum<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a phone number of apple and oranges \n   that are distributed in a basket of fruit this basket contains \n   apples, orange, and mango yield. Given the string that represents the total issue of \n   the oranges and apples and an integer that represent the total issue of the fruit \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a string that represents a phone number of apple and oranges \n   that are distributed in a basket of fruit this basket contains \n   apples, orange, and mango yield. Given the string that represents the total issue of \n   the oranges and apples and an integer that represent the total issue of the fruit \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n     let total = 0,\n         apples = 0,\n         oranges = 0,\n         mangoes = 0,\n         i = 0,\n         c = s.length,\n         e = 0,\n         e1 = 0,\n         e2 = 0,\n         e3 = 0,\n         e4 = 0,\n         e5 = 0,\n         e6 = 0,\n         e7 = 0,\n         e8 = 0,\n         e9 = 0,\n         e10 = 0,\n         e11 = 0,\n         e12 = 0,\n         e13 = 0,\n         e14 = 0,\n         e15 = 0,\n         e16 = 0,\n         e17 = 0,\n         e18 = 0,\n         e19 = 0,\n         e20 = 0,\n         e21 = 0,\n         e22 = 0,\n         e23 = 0,\n         e24 = 0,\n         e25 = 0,\n         e26 = 0,\n         e27 = 0,\n         e28 = 0,\n         e29 = 0,\n         e30 = 0,\n         e31 = 0,\n         e32 = 0,\n         e33 = 0,\n         e34 = 0,\n         e35 = 0,\n         e36 = 0,\n         e37 = 0,\n         e38 = 0,\n         e39 = 0,\n         e40 = 0,\n         e41 = 0,\n         e42 = 0,\n         e43 = 0,\n         e44 = 0,\n         e45 = 0,\n         e46 = 0,\n         e47 = 0,\n         e48 = 0,\n         e49 = 0,\n         e50 = 0,\n         e51 = 0,\n         e52 = 0,\n         e53 = 0,\n         e54 = 0,\n         e55 = 0,\n         e56 = 0,\n         e57 = 0,\n         e58 = 0,\n         e59 = 0,\n         e60 = 0,\n         e61 = 0,\n         e62 = 0,\n         e63 = 0,\n         e64 = 0,\n         e65 = 0,\n         e66 = 0,\n         e67 = 0,\n         e68 = 0,\n         e69 = 0,\n         e70 = 0,\n         e71 = 0,\n         e72 = 0,\n         e73 = 0,\n         e74 = 0,\n         e75 = 0,\n         e76 = 0,\n         e77 = 0,\n         e78 = 0,\n         e79 = 0,\n         e80 = 0,\n         e81 = 0,\n         e82 = 0,\n         e83 = 0,\n         e84 = 0,\n         e85 = 0,\n         e86 = 0,\n         e87 = 0,\n         e88 = 0,\n         e89 = 0,\n         e90 = 0,\n         e91 = 0,\n         e92 = 0,\n         e93 = 0,\n         e94 = 0,\n         e95 = 0,\n         e96 = 0,\n         e97 = 0,\n         e98 = 0,\n         e99 = 0,\n         e100 = 0,\n         e101 = 0,\n         e102 = 0,\n         e103 = 0,\n         e104 = 0,\n         e105 = 0,\n         e106 = 0,\n         e107 = 0,\n         e108 = 0,\n         e109 = 0,\n         e110 = 0,\n         e111 = 0,\n         e112 = 0,\n         e113 = 0,\n         e114 = 0,\n         e115 = 0,\n         e116 = 0,\n         e117 = 0,\n         e118 = 0,\n         e119 = 0,\n         e120 = 0,\n         e121 = 0,\n         e122 = 0,\n         e123 = 0,\n         e124 = 0,\n         e125 = 0,\n         e126 = 0,\n         e127 = 0,\n         e128 = 0,\n         e129 = 0,\n         e130 = 0,\n         e131 = 0,\n         e132 = 0,\n         e133 = 0,\n         e134 = 0,\n         e135 = 0,\n         e136 = 0,\n         e137 = 0,\n         e138 = 0,\n         e139 = 0,\n         e140 = 0,\n         e141 = 0,\n         e142 = 0,\n         e143 = 0,\n         e144 = 0,\n         e145 = 0,\n         e146 = 0,\n         e147 = 0,\n         e148 = 0,\n         e149 = 0,\n         e150 = 0,\n         e151 = 0,\n         e152 = 0,\n         e153 = 0,\n         e154 = 0,\n         e155 = 0,\n         e156 = 0,\n         e157 = 0,\n         e158 = 0,\n         e159 = 0,\n         e160 = 0,\n         e161 = 0,\n         e162 = 0,\n         e163 = 0,\n         e164 = 0,\n         e165 = 0,\n         e166 = 0,\n         e167 = 0,\n         e168 = 0,\n         e169 = 0,\n         e170 = 0,\n         e171 = 0,\n         e172 = 0,\n         e173 = 0,\n         e174 = 0,\n         e175 = 0,\n         e176 = 0,\n         e177 = 0,\n         e178 = 0,\n         e179 = 0,\n         e180 = 0,\n         e181 = 0,\n         e182 = 0"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch of a tree that has non - negative integer nodes \n   your task is to pluck one of the nodes and return it. \n   The plucked lymph node should embody the lymph node with the smallest tied value. \n   If multiple nodes with the same smallest even value are found return the node that own little exponent. \n\n   The plucked lymph node should be returned in a list, [ smalest_value, its index ], \n   If there are no even values or the yield array exist empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" Given an array representing a branch of a tree that has non - negative integer nodes \n   your task is to pluck one of the nodes and return it. \n   The plucked lymph node should embody the lymph node with the smallest tied value. \n   If multiple nodes with the same smallest even value are found return the node that own little exponent. \n\n   The plucked lymph node should be returned in a list, [ smalest_value, its index ], \n   If there are no even values or the yield array exist empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (!arr.length) return [];\n  const first = arr.slice(0, 1);\n  const even = first.filter(el => el % 2 === 0);\n  if (even.length) {\n    return [\n      Math.min(...even),\n      even.indexOf(Math.min(...even))\n    ];\n  }\n  return [\n    Math.min(...arr.slice(1)),\n    arr.indexOf(Math.min(...arr.slice(1)))\n  ];\n};\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n    const dict = {};\n    for (let i = 0; i < lst.length; i++) {\n        dict[lst[i]] = i;\n    }\n    let index = 0;\n    while (true) {\n        if (dict[index] === undefined) {\n            return index;\n        }\n        index++;\n    }\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1])); // 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nconsole.log(search([5, 5, 4, 4, 4])); // -1<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   foreign sorting, is when you start with the minimum value, \n   then maximum of the remaining integers, then minimum and indeed on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   foreign sorting, is when you start with the minimum value, \n   then maximum of the remaining integers, then minimum and indeed on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (!lst) {\n    return lst\n  }\n\n  const sort = (a, b) => a - b\n  const sortArray = lst.slice().sort(sort)\n\n  if (lst.length === 1) {\n    return lst\n  }\n\n  const odd = lst.slice(1, lst.length - 1)\n  const even = lst.slice(0, lst.length - 1)\n\n  const oddMax = odd.reduce((prev, curr) => prev + curr, 0)\n  const evenMax = even.reduce((prev, curr) => prev + curr, 0)\n\n  return [...(sortArray.slice(0, odd.length - 1).reverse()), oddMax, evenMax,...sortArray.slice(odd.length - 1).reverse()]\n}\n\nmodule.exports = strangeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let s = (a + b + c) / 2;\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst main = () => {\n  const a = triangleArea(3, 4, 5);\n  const b = triangleArea(1, 2, 10);\n  console.log(`The area of triangle is ${a}`);\n  console.log(`The area of triangle is ${b}`);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the aim q will fly, and assumed differently. \n   The aim q will vanish if it's balanced (it is a palindromic list) and the union of its elements equal less than or equal the maximum possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true if the aim q will fly, and assumed differently. \n   The aim q will vanish if it's balanced (it is a palindromic list) and the union of its elements equal less than or equal the maximum possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const length = q.length\n  if (length === 0) return true\n  const last = q[length - 1]\n  const left = q[0]\n  const right = q[length - 2]\n  const max = Math.max(w, last)\n  const sum = left + right + last\n  return (left <= max && right <= max && sum <= max)\n}\n\nexport {\n  willItFly\n}\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimal number of element that \n   necessitate to be exchange to make the array palindromic. A palindromic array is an array that \n   is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find the minimal number of element that \n   necessitate to be exchange to make the array palindromic. A palindromic array is an array that \n   is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let result = 0;\n  let min = Infinity;\n  for (let i = 0; i < arr.length; i++) {\n    let index = 0;\n    let curr = arr[i];\n    while (arr[i + index]!== curr) {\n      if (arr[i + index] < curr) {\n        min = Math.min(min, arr[i + index] - curr);\n      }\n      index++;\n    }\n    if (min > 0) {\n      arr[i] = arr[i] + min;\n      min = Infinity;\n    }\n  }\n  return result;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2])); // 0\nconsole.log(smallestChange([1, 2, 3, 2, 1])); // 0\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2])); // 1\nconsole.log(smallestChange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511])\n    console.log(smallestChange([1, 2, 3, 2, 1])); // 1\n};\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of string and retort the list that has \n   total number of char in the all strings of the list less than the early list.\n\n   if the two lists hold the like number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of string and retort the list that has \n   total number of char in the all strings of the list less than the early list.\n\n   if the two lists hold the like number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const allMatch = [...lst1,...lst2];\n  const len = allMatch.reduce((a, b) => a + b);\n  const minLst = allMatch.findIndex((x, i) => allMatch[i].length < x.length);\n  return allMatch[minLst];\n};\n\nexport default totalMatch;<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns dependable if the feed number is the generation of 3 prime numbers \n   and false otherwise. \n   know that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns dependable if the feed number is the generation of 3 prime numbers \n   and false otherwise. \n   know that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n    let res = false;\n    let primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n    let i = 0;\n    while (primes[i] <= a && res == false) {\n        let k = 0;\n        while (primes[k] <= Math.sqrt(a)) {\n            if (a % primes[k] == 0) {\n                res = true;\n                break;\n            }\n            k++;\n        }\n        i++;\n    }\n    return res;\n};\nconsole.log(isMultiplyPrime(30));<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  return n % 1 === 0 && x % n === 0;\n}\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and return on-key \n   if this ingeger is a block of some integer number. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integer a and return on-key \n   if this ingeger is a block of some integer number. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  // use binary search\n  const lo = 1, hi = a - 1, mid = Math.floor((lo + hi) / 2);\n  return hi - lo <= 1 && mid % 3 === 0;\n}\n\nconst test = [\n  { a: 1, result: true },\n  { a: 2, result: false },\n  { a: 64, result: true },\n  { a: 180, result: false },\n];\n\nconsole.log('Test:');\ntest.forEach((t) => {\n  console.log(`iscube(${t.a}) == ${t.result}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives \n   a hexadecimal number as a chain and count the number of hexadecimal \n   digits that are primes (flower number=== or a prime=== is a lifelike issue \n   greater than 1 that be not a product of two smaller lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime act are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you get to specify a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== five hundred (= decimal 13). \n   Note: you may wear the stimulation is always right or empty string=== \n   and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a function that receives \n   a hexadecimal number as a chain and count the number of hexadecimal \n   digits that are primes (flower number=== or a prime=== is a lifelike issue \n   greater than 1 that be not a product of two smaller lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime act are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you get to specify a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== five hundred (= decimal 13). \n   Note: you may wear the stimulation is always right or empty string=== \n   and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const numArray = num.split(\"\");\n  const sum = numArray.reduce((a, b) => a + b);\n  let result = sum / 2;\n  let count = 1;\n  for (let i = 1; i < sum; i++) {\n    if (result % 2 === 0) {\n      count++;\n    }\n    result = result + 1;\n  }\n  return count;\n}\n\nconsole.log(hexKey(\"AB\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task equal to commute it to \n   binary format. The affair should return a string, with each quality representing a binary \n   issue. Each quality in the string will be' 0' or' 1'. \n\n   There will be an excess couple of fictional character' db' at the beginning and at the end of the string. \n   The excess character are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal form and your task equal to commute it to \n   binary format. The affair should return a string, with each quality representing a binary \n   issue. Each quality in the string will be' 0' or' 1'. \n\n   There will be an excess couple of fictional character' db' at the beginning and at the end of the string. \n   The excess character are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  //console.log(\"decimal to binary:\", decimal);\n  let binary = \"\";\n  let length = decimal.toString().length;\n  let value = decimal;\n  for (let i = length - 1; i >= 0; i--) {\n    if (decimal % 2 === 0) {\n      binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal = decimal / 2;\n  }\n  if (value!== 0) {\n    binary = \"db\" + binary;\n  }\n  return binary;\n};\n\nmodule.exports = decimalToBinary;<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task is to check if the drawstring is glad or not. \n   A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   Your task is to check if the drawstring is glad or not. \n   A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let i = 0,\n    n = s.length - 1,\n    h = 0,\n    res = 0;\n\n  while (i <= n) {\n    res += s[i++] === 'x'? 1 : 0;\n    h += res > 3? 0 : 1;\n  }\n  return h > 3;\n}\n\nconst test = isHappy(\"abcd\");\nconsole.log(test);\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to pass the grades\n   to student. The teacher has been making her own algorithm for grading. \n   The alone problem is, she has lose the code she used for grading. \n   She has given you a list of grade point average for some students and you experience to write \n   a function that can output a list of letter grades use the following mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 speed of light \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher has to pass the grades\n   to student. The teacher has been making her own algorithm for grading. \n   The alone problem is, she has lose the code she used for grading. \n   She has given you a list of grade point average for some students and you experience to write \n   a function that can output a list of letter grades use the following mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 speed of light \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = grades.map(function(item) {\n    const point = parseFloat(item);\n    const grade = (point >= 4.0)? 'A+' : (point >= 3.7)? 'A' : (point >= 3.3)? 'A-' : (point >= 3.0)? 'B+' : (point >= 2.7)? 'B' : (point >= 2.3)? 'B-' : (point >= 2.0)? 'C+' : (point >= 1.7)?'speed of light' : (point >= 1.3)? 'C-' : (point >= 1.0)? 'D+' : 'D';\n    return grade;\n  });\n\n  return letterGrade;\n};\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]));\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = 1\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      prime = false\n      break\n    }\n  }\n  return prime\n}\n\nconst primeFactors = (number) => {\n  let primeFactors = []\n  for (let i = 1; i < number; i++) {\n    if (number % i === 0) {\n      primeFactors.push(i)\n    }\n  }\n  return primeFactors\n}\n\nconst primeSieve = (number) => {\n  let isPrime = true\n  let i = 1\n  while (i * i <= number) {\n    if (number % i === 0) {\n      isPrime = false\n      break\n    }\n    i++\n  }\n  if (isPrime) {\n    let primeFactors = primeFactors(number)\n    let prime = []\n    for (let i = 0; i < primeFactors.length; i++) {\n      prime.push(primeFactors[i])\n    }\n    return prime\n  }\n  return []\n}\n\nmodule.exports = {\n  primeLength,\n  primeFactors,\n  primeSieve\n}\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numeral of n-digit\n   convinced integers that begin or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numeral of n-digit\n   convinced integers that begin or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n   *   n = 1\n   *   return 1\n   *   }\n   *   else if (n <= 2) {\n   *     return 1\n   *   }\n   *   else {\n   *     return n\n   *   }\n   * }\n\nconst endsOneStarts = (n) = > {\n   *   n = 1\n   *   return 1\n   *   }\n   *   else if (n <= 2) {\n   *     return 1\n   *   }\n   *   else {\n   *     return n\n   *   }\n   * }\n\nconst countStarts = (n) = > {\n   *   if (n = 1) {\n   *     return 1\n   *   }\n   *   else {\n   *     return startsOneEnds(n - 1) + endsOneStarts(n)\n   *   }\n   * }\n\nexport default countStarts(n)<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total union of its digit in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return the total union of its digit in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  if (N <= 0) return \"0\";\n  const sum = (N - 1) % 2 === 0? N : N + 1;\n  const result = '';\n  for (let i = 0; i < sum; i += 2) {\n    result += (i % 2 === 0? '0' : '1') +'';\n  }\n  return result.substr(0, result.length - 1);\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(1500));\nconsole.log(solve(3000));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconsole.log(add([4, 2, 6, 7]));<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and return an coherent version of it. \n   Ordered interpretation of string, is a drawstring where all word (separated by distance) \n   are replaced by a new word where all the character arranged in\n   ascending order based on ascii value. \n   bill: You should keep the decree of word and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string and return an coherent version of it. \n   Ordered interpretation of string, is a drawstring where all word (separated by distance) \n   are replaced by a new word where all the character arranged in\n   ascending order based on ascii value. \n   bill: You should keep the decree of word and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let a = s.split(' ')\n  let result = ''\n  for(let i=0; i < a.length; i++) {\n    let c = a[i].charCodeAt(0)\n    let s = c\n    if(c > 57 && c < 91) {\n      s = String.fromCharCode(s + 39)\n    }\n    result += String.fromCharCode(s)\n  }\n  return result\n}\n\nmodule.exports = antiShuffle\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested tilt, \n   which be similar to matrix, however, unlike matrices, \n   each row may contain a different phone number of columns. \n   hold lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (quarrel, columns), starting with 0. \n   Sort coordinate initially by row in ascend holy order. \n   Also, sort coordinates of the row by columns in descend order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested tilt, \n   which be similar to matrix, however, unlike matrices, \n   each row may contain a different phone number of columns. \n   hold lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (quarrel, columns), starting with 0. \n   Sort coordinate initially by row in ascend holy order. \n   Also, sort coordinates of the row by columns in descend order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  // sort by row\n  const sorted = lst.slice().sort((a, b) => a[x] - b[x]);\n  const cols = lst.length;\n  const [row, columns] = sorted[0];\n  const result = [];\n  for (let i = 0; i < columns; i++) {\n    result.push([row[i], i]);\n  }\n  return result;\n};\n\n// find first coordinates that contain x\nconst find = (lst, x) => {\n  const row = lst.findIndex((el) => el[x]);\n  if (row === -1) {\n    return [];\n  }\n  const cols = lst[row].length;\n  const result = [];\n  for (let i = 0; i < cols; i++) {\n    result.push([row, i]);\n  }\n  return result;\n};\n\nconst isValid = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const [row, column] = find(lst, x);\n    if (row!== undefined && column!== undefined) {\n      result.push([row, column]);\n    }\n  }\n  return result;\n};\n\n// [ (row, column), (row, column)... ]\nconst get = (lst, x) => {\n  const result = [];\n  const [row, column] = find(lst, x);\n  if (row!== undefined && column!== undefined) {\n    result.push([row, column]);\n  }\n  return result;\n};\n\nconst main = () => {\n  const [row, column] = getRow(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get(get"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integer, return a copy of the give array after screen, \n   you will screen the given array in ascend order if the union (first exponent value, concluding index value) exist odd, \n   or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n   Note: \n   * don't change the yield array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non - negative integer, return a copy of the give array after screen, \n   you will screen the given array in ascend order if the union (first exponent value, concluding index value) exist odd, \n   or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n   Note: \n   * don't change the yield array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let index = 0;\n  let result = [];\n  let sum = 0;\n\n  while (index < array.length) {\n    sum = array[index];\n    result.push(sum);\n    index++;\n\n    if (index < array.length) {\n      while (index < array.length && array[index] < sum) {\n        if (sum % 2 === 0) {\n          index++;\n          sum += array[index];\n          result.push(sum);\n        } else {\n          index++;\n        }\n      }\n    }\n  }\n\n  return result;\n};\n\nconst array = [5, 4, 3, 0, 1, 5, 6];\nconsole.log(sortArray(array));\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argumentation and \n   retort a string encrypted with the rudiment being rotated. \n   The alphabet should be rotated in a manner such that the letter \n   switch down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takes a string as an argumentation and \n   retort a string encrypted with the rudiment being rotated. \n   The alphabet should be rotated in a manner such that the letter \n   switch down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let s1 = \"\";\n  let s2 = \"\";\n  let s3 = \"\";\n  let s4 = \"\";\n  let rot = 2;\n  for (i = 0; i < s.length; i++) {\n    s1 += s.charAt(i);\n    rot -= 2;\n  }\n  s2 = s.charAt(0);\n  rot = rot % 26;\n  for (j = 0; j < s1.length; j++) {\n    s3 += s1.charAt(j);\n    rot -= 2;\n  }\n  s4 = s.charAt(s.length - 1);\n  rot = rot % 26;\n  for (k = 0; k < s3.length; k++) {\n    s4 += s3.charAt(k);\n    rot -= 2;\n  }\n  return s4;\n};\n\nconsole.log(encrypt(\"hi\")); // returns 'lm'\nconsole.log(encrypt(\"asdfghjkl\")); // returns 'ewhjklnop'\nconsole.log(encrypt(\"gf\")); // returns 'kj'\nconsole.log(encrypt(\"et\")); // returns 'ix'\n\n/*\n  Create a function encrypt that takes a string as an argumentation and \n   retort a string encrypted with the rudiment being rotated. \n   The alphabet should be rotated in a manner such that the letter \n   switch down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let rot = 0;\n  let s1 = \"\";\n  let s2 = \"\";\n  let s3 = \"\";\n  let s4 = \"\";\n  rot = 2;\n  for (i = 0; i < s.length; i++) {\n    s1 += s.charAt(i);\n    rot -= 2;\n  }\n  rot = rot % 26;\n  s2 = s.charAt(0);\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot % 26;\n  rot = rot %"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write a function nextSmallest() that return the second smallest component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   Write a function nextSmallest() that return the second smallest component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n  if (lst.length < 2) return null\n  var min = 0\n  for (var i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i+1]) {\n      min = i\n      break\n    }\n  }\n  return lst[min+1]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ');\n  let boredom = 0;\n  words.forEach((item) => {\n    if (item.startsWith('I ')) {\n      bored++;\n    }\n  });\n  return boredom;\n};\n\nmodule.exports = isBored;\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return x > 0? x + y >= z : y + z >= x\n}\n\n/*\n  Create a function that takes a number, and returns the sum of the digits. \n  restitution fake in any other cases.\n  Examples\n  sumDigits(12) ➞ 3\n  sumDigits(12.6) ➞ 7.6\n  sumDigits(12.7) ➞ 12\n  sumDigits(12.5) ➞ 13\n  sumDigits(12.2) ➞ 13\n  sumDigits(12.1) ➞ 12\n  sumDigits(0) ➞ 0\n  sumDigits(-3) ➞ -3\n  sumDigits(-4) ➞ -4\n  sumDigits(-4.2) ➞ -4.2\n  sumDigits(-4.2) ➞ -4.2\n  sumDigits(-4.2) ➞ -4.2\n  sumDigits(-4.2) ➞ -4.2\n  sumDigits(0.2) ➞ 0\n  sumDigits(-0.2) ➞ 0\n  sumDigits(3.2) ➞ 3.2\n  sumDigits(3.2) ➞ 3.2\n  sumDigits(-3.2) ➞ -3.2\n  sumDigits(3.3) ➞ 3\n  sumDigits(3.5) ➞ 5\n  sumDigits(3.5) ➞ 5\n  sumDigits(3.7) ➞ 7\n  sumDigits(3.8) ➞ 8\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits(3.9) ➞ 9\n  sumDigits("}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a message, and encodes in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    const encoded = '';\n    const vowels = ['A', 'E', 'I', 'O', 'U'];\n    const message = message.toUpperCase();\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (vowels.includes(letter)) {\n            encoded += message[i + 2];\n            i += 1;\n        } else {\n            encoded += letter;\n        }\n    }\n    return encoded;\n};\n\nconst decode = (message) => {\n    const decoded = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter.length > 1) {\n            decoded += letter[1];\n        } else {\n            decoded += letter;\n        }\n    }\n    return decoded;\n};\n\nconst main = () => {\n    const message = 'This is a message';\n    console.log(encode(message));\n    console.log(decode(encode(message)));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need to find the large choice value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers. \n   You need to find the large choice value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const max = Math.max(...lst);\n  const maxDigits = max.toString(10).length;\n  return maxDigits.toString();\n};\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys equal string in lower \n   case or all key are strings in upper lawsuit, else return false. \n   The routine should return false is the give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys equal string in lower \n   case or all key are strings in upper lawsuit, else return false. \n   The routine should return false is the give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  for(var key in dict) {\n    if(!dict[key].toLowerCase().includes(key.toLowerCase())) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Return true if all keys of dictionary are strings\nconst checkDictKeys = (dict) => {\n  for(var key in dict) {\n    if(typeof dict[key]!== \"string\") {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Return true if dictionary is an object\nconst checkDictObject = (dict) => {\n  return typeof dict === \"object\"\n}\n\n// Return true if dictionary is an array\nconst checkDictArray = (dict) => {\n  return Object.prototype.toString.call(dict) === \"[object Array]\"\n}\n\n// Return true if dictionary is a function\nconst checkDictFunction = (dict) => {\n  return typeof dict === \"function\"\n}\n\nconst isEmptyDict = (dict) => {\n  return!checkDictKeys(dict) &&!checkDictObject(dict) &&!checkDictArray(dict) &&!checkDictFunction(dict)\n}\n\nmodule.exports = {\n  checkDictCase,\n  checkDictKeys,\n  checkDictObject,\n  checkDictArray,\n  checkDictFunction,\n  isEmptyDict\n}\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nexport default countUpTo\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and return \n   the intersection of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes two integers and return \n   the intersection of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const result = a.toString().split('').reduce((carry, digit) => {\n    return carry + (b.toString().split('').reduce((carry, digit) => {\n      return carry + (digit * result).toString().charAt(digit.length - 1);\n    }) % 10);\n  }, 0);\n\n  if (result % 10 === 0) {\n    return result / 10;\n  } else {\n    return result;\n  }\n};\n\n// complete the function below.\nconst multiply2 = (a, b) => {\n  const result = a.toString().split('').reduce((carry, digit) => {\n    return carry + (b.toString().split('').reduce((carry, digit) => {\n      return carry + (digit * result).toString().charAt(digit.length - 1);\n    }) % 10);\n  }, 0);\n\n  return result;\n};\n\nconsole.log(multiply(148, 412));\nconsole.log(multiply(19, 28));\nconsole.log(multiply(2020, 1851));\nconsole.log(multiply(14, -15));\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count the number of capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let upperCount = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      upperCount++\n    }\n  }\n  return upperCount\n}\n\n// TEST\ndescribe('countUpper', () => {\n  it('should return 0 for empty string', () => {\n    expect(countUpper('')).toEqual(0)\n  })\n\n  it('should return 0 for string with all upper case letters', () => {\n    expect(countUpper('ABCDEF')).toEqual(0)\n  })\n\n  it('should return 1 for string with one upper case letter', () => {\n    expect(countUpper('B')).toEqual(1)\n  })\n\n  it('should return 1 for string with two upper case letters', () => {\n    expect(countUpper('BC')).toEqual(1)\n  })\n\n  it('should return 2 for string with three upper case letters', () => {\n    expect(countUpper('ABC')).toEqual(2)\n  })\n})\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) exemplify a issue \n   and returns the closest integer to it. If the number is equidistant \n   from two integers, polish it away from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value (string) exemplify a issue \n   and returns the closest integer to it. If the number is equidistant \n   from two integers, polish it away from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseInt(value);\n  const n = Math.abs(number);\n  let n_1 = n - 1;\n  let n_2 = n + 1;\n  let diff = Math.abs(number - n_1);\n  let diff_2 = Math.abs(number - n_2);\n  if (diff < diff_2) {\n    return n_1;\n  } else {\n    return n_2;\n  }\n};\n\nexports.closestInteger = closestInteger;<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = []\n\n  for (let i = 1; i <= n; i++) {\n    result.push(n % 2? (n + 1) : n)\n    n = Math.floor(n / 2)\n  }\n\n  return result\n}\n\n// Your MakeAPile object will be instantiated and called as such:\n// var obj = Object.create(MakeAPile).create(n)\n// var param_1 = obj.get(n)\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  if (words.length === 1 && words[0] === \"\") {\n    return [];\n  }\n  return words;\n}\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and return the \n   big even integer numeral that is in the image [x, y] inclusive. If \n   there's no such issue, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive numbers x and y and return the \n   big even integer numeral that is in the image [x, y] inclusive. If \n   there's no such issue, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x % 2 === 0) {\n    if (x === y) {\n      return x\n    }\n    return (x + y) / 2\n  } else {\n    return (x + y) / 2\n  }\n}\n\n// console.log(chooseNum(12, 15))\n// console.log(chooseNum(13, 12))\n\n// console.log(chooseNum(13, 13))\n\n// console.log(chooseNum(15, 15))\n// console.log(chooseNum(20, 15))\n\n// console.log(chooseNum(21, 15))\n// console.log(chooseNum(15, 21))\n\n// console.log(chooseNum(15, 22))\n// console.log(chooseNum(15, 23))\n\n// console.log(chooseNum(15, 24))\n// console.log(chooseNum(15, 25))\n\n// console.log(chooseNum(15, 26))\n// console.log(chooseNum(15, 27))\n\n// console.log(chooseNum(15, 28))\n// console.log(chooseNum(15, 29))\n\n// console.log(chooseNum(15, 30))\n// console.log(chooseNum(15, 31))\n\n// console.log(chooseNum(15, 32))\n// console.log(chooseNum(15, 33))\n\n// console.log(chooseNum(15, 34))\n// console.log(chooseNum(15, 35))\n\n// console.log(chooseNum(15, 36))\n// console.log(chooseNum(15, 37))\n\n// console.log(chooseNum(15, 38))\n// console.log(chooseNum(15, 39))\n\n// console.log(chooseNum(15, 40))\n// console.log(chooseNum(15, 41))\n\n// console.log(chooseNum(15, 42))\n// console.log(chooseNum(15, 43))\n\n// console.log(chooseNum(15, 44))\n// console.log(chooseNum(15, 45))\n\n// console.log(chooseNum(15, 46))\n// console.log(chooseNum(15, 47))\n\n// console.log(chooseNum(15, 48))\n// console.log(chooseNum(15, 49))\n\n// console.log(chooseNum(15, 50))\n// console.log(chooseNum(15, 51))\n\n// console.log(chooseNum(15, 52))\n// console.log(chooseNum(15, 53))\n\n// console.log(chooseNum(15, 54))\n// console.log(chooseNum(15, 55))\n\n// console.log(chooseNum(15, 56))\n// console.log(chooseNum(15, 57))\n\n// console.log(chooseNum(15, 58))\n// console.log(chooseNum(15, 59))\n\n// console.log(chooseNum(15, 60))\n// console.log(chooseNum(15, 61))\n\n// console.log(chooseNum(15, 62))\n// console.log(chooseNum(15, 63))\n\n// console.log(chooseNum(15, 64))\n// console.log(chooseNum(15, 65))\n\n// console.log(chooseNum(15, 66))\n// console.log(chooseNum(15, 67))\n\n// console.log(chooseNum(15, 68))\n// console.log(chooseNum(15, 69))\n\n// console.log(chooseNum(15, 70))\n// console.log(chooseNum(15, 71))\n\n// console.log(chooseNum(15, 72))\n// console.log(chooseNum(15, 73))\n\n// console.log(chooseNum(15, 74))\n// console.log(chooseNum(15, 75))\n\n// console.log(chooseNum(15, 76))\n// console.log(chooseNum(15, 77))\n\n// console.log(chooseNum(15, 78))\n// console.log(chooseNum(15, 79))\n\n// console.log(chooseNum(15, 80))\n// console.log(chooseNum(15, 81))\n\n// console.log(chooseNum(15, 82))\n// console.log(chooseNum(15, 83))\n\n// console.log(chooseNum(15, 84))\n// console.log(chooseNum(15, 85))\n\n// console.log(chooseNum(15, 86))\n// console.log(chooseNum(15, 87))\n\n// console.log(chooseNum(15, 88))\n// console.log(chooseNum(15, 89))\n\n// console.log(chooseNum(15, 90))\n// console.log(chooseNum(15, 91))\n\n// console.log(chooseNum(15, 92))\n// console.log(chooseNum(15, 93))\n\n// console.log(chooseNum(15, 94))\n// console.log(chooseNum(15, 95))\n\n// console.log(chooseNum(15, 96))\n// console.log(chooseNum(15, 97))\n\n// console.log(chooseNum(15, 98))\n// console.log(chooseNum(15, 99))\n\n// console.log(chooseNum(15, 100))\n// console.log(chooseNum(15, 101))\n\n// console.log(chooseNum(15, 102))\n// console.log(chooseNum(15, 103))\n\n// console.log(chooseNum(15, 104))\n// console.log(chooseNum(15, 105))\n\n// console.log(chooseNum(15, 106))\n// console.log(chooseNum(15, 107))\n\n// console.log(chooseNum(15, 108))\n//"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2;\n  const floor = Math.floor(avg);\n  const ceil = Math.ceil(avg);\n  const isBangUp = ceil > n;\n\n  return (isBangUp? -1 : ceil) + 'b' + roundedAvg(ceil, m);\n};\n\nconst average = (n, m) => {\n  const avg = (n + m) / 2;\n  const floor = Math.floor(avg);\n  const ceil = Math.ceil(avg);\n  const isBangUp = ceil > n;\n\n  return isBangUp? -1 : ceil + 'b' + average(ceil, m);\n};\n\nconst test = [\n  [1, 5],\n  [7, 5],\n  [10, 20],\n  [20, 33],\n];\n\ntest.forEach(\n  (input) => {\n    const actual = roundedAvg(...input);\n    const expected = average(...input);\n\n    console.log(`${actual} == ${expected}`);\n  },\n);\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  if(x.length === 1) {\n    return x;\n  }\n  \n  // If there are no ties, it should return the sorted list.\n  if(x.reduce((a, b) => a === b, x.slice(1)) === x[0]) {\n    return x.slice(1);\n  }\n\n  // If there are ties, it should return a list of sorted list.\n  let sortedList = uniqueDigits(x.slice(1));\n  let lastElement = sortedList[sortedList.length - 1];\n  let x1 = lastElement;\n  let x2 = sortedList[0];\n  while(x1!== x2) {\n    sortedList.push(x1);\n    x1 = sortedList[sortedList.length - 1];\n    x2 = sortedList[0];\n  }\n  \n  return sortedList;\n}\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integer that are between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integer that are between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let result = [];\n  arr.forEach( (digit, index) => {\n    let length = arr.length - index;\n    if (digit >= 1 && digit <= 9) {\n      result.push(`${digit}`);\n    }\n    if (digit === 0) {\n      result.push(\"Zero\");\n    }\n    if (digit === -1) {\n      result.push(\"Minus\");\n    }\n    if (length > 1) {\n      result.push(`${length}`);\n    }\n  });\n  arr = result.reverse();\n  return arr.join(\" \");\n};\n\n/*\n  Sort the given array, then return a sorted array with the given length.\n\n  arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n          -> return length = 5\n    return = [\"One\", \"Two\", \"Two\", \"Three\", \"Four\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return = []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [1, -1, 55]\n          -> return length = 3\n    return = [\"One\", \"Minus\", \"55\"]\n  */\nconst byLengthAndReverse = (arr, length) => {\n  let result = [];\n  arr.forEach( (digit, index) => {\n    let length = arr.length - index;\n    if (digit >= 1 && digit <= 9) {\n      result.push(`${digit}`);\n    }\n    if (digit === 0) {\n      result.push(\"Zero\");\n    }\n    if (digit === -1) {\n      result.push(\"Minus\");\n    }\n    if (length === length && length > 0) {\n      result.push(`${length}`);\n    }\n  });\n  return result.reverse();\n};\n\n/*\n  Given an array of integers, sort the integer that are between 1 and 9 inclusive, \n   reverse the resulting array, and then return the length of the resulting array.\n   \n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return = 5\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return = 0\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [1, -1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = 3\n  */\nconst byLengthAndReverseLength = (arr) => {\n  let result = [];\n  arr.forEach( (digit, index) => {\n    let length = arr.length - index;\n    if (digit >= 1 && digit <= 9) {\n      result.push(`${digit}`);\n    }\n    if (digit === 0) {\n      result.push(\"Zero\");\n    }\n    if (digit === -1) {\n      result.push(\"Minus\");\n    }\n    if (length > 1) {\n      result.push(`${length}`);\n    }\n  });\n  return result.length;\n};\n\nmodule.exports = {\n  byLength,\n  byLengthAndReverse,\n  byLengthAndReverseLength\n};\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter, \n   and return a list of size n, such that the value of the component at index i is the factorial of i if i is even \n   or the union of numbers from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takes n as a parameter, \n   and return a list of size n, such that the value of the component at index i is the factorial of i if i is even \n   or the union of numbers from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let a = [];\n  for(let i = 1; i <= n; i += 2) {\n    let factorial = 1;\n    while(i > 0) {\n      factorial *= i;\n      i--;\n    }\n    a.push(factorial);\n  }\n  return a;\n};\n\nconsole.log(f(5));<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    let odd = [], even = [];\n    let evenCount = 0;\n    for (let i = 1; i < n; i++) {\n        let num = i;\n        while (num > 0) {\n            let sum = num % 10;\n            num = num / 10;\n            if (sum % 2 === 1) {\n                odd.unshift(num);\n            } else {\n                even.unshift(num);\n                evenCount++;\n            }\n        }\n    }\n    return [evenCount, odd.reverse().sort().join('')];\n}\n\nconst evenOddPalindrome2 = (n) => {\n    let even = [], odd = [];\n    let max = Math.floor(n / 2);\n    for (let i = 1; i < max; i++) {\n        let num = i;\n        while (num > 0) {\n            let sum = num % 10;\n            num = num / 10;\n            if (sum % 2 === 1) {\n                odd.unshift(num);\n            } else {\n                even.unshift(num);\n            }\n        }\n    }\n    return [even.reverse().sort().join(''), odd.reverse().sort().join('')];\n}\n\nconst evenOddPalindrome3 = (n) => {\n    let even = [], odd = [];\n    let max = Math.floor(n / 2);\n    for (let i = 1; i <= max; i++) {\n        let num = i;\n        while (num > 0) {\n            let sum = num % 10;\n            num = num / 10;\n            if (sum % 2 === 1) {\n                odd.unshift(num);\n            } else {\n                even.unshift(num);\n            }\n        }\n    }\n    return [even.reverse().sort().join(''), odd.reverse().sort().join('')];\n}\n\nconst evenOddPalindrome4 = (n) => {\n    let even = [], odd = [];\n    let max = Math.floor(n / 2);\n    for (let i = 1; i <= max; i++) {\n        let num = i;\n        while (num > 0) {\n            let sum = num % 10;\n            num = num / 10;\n            if (sum % 2 === 1) {\n                odd.unshift(num);\n            } else {\n                even.unshift(num);\n            }\n        }\n    }\n    let i = max + 1;\n    while (i <= n) {\n        let sum = i % 10;\n        i = i / 10;\n        if (sum % 2 === 1) {\n            odd.unshift(i);\n        } else {\n            even.unshift(i);\n        }\n    }\n    return [even.reverse().sort().join(''), odd.reverse().sort().join('')];\n}\n\nconst evenOddPalindrome5 = (n) => {\n    let even = [], odd = [];\n    let max = Math.floor(n / 2);\n    for (let i = 1; i <= max; i++) {\n        let num = i;\n        while (num > 0) {\n            let sum = num % 10;\n            num = num / 10;\n            if (sum % 2 === 1) {\n                odd.unshift(num);\n            } else {\n                even.unshift(num);\n            }\n        }\n    }\n    let i = max + 1;\n    while (i <= n) {\n        let sum = i % 10;\n        i = i / 10;\n        if (sum % 2 === 1) {\n            odd.unshift(i);\n        } else {\n            even.unshift(i);\n        }\n    }\n    return [even.reverse().sort().join(''), odd.reverse().sort().join('')];\n}\n\nconst evenOddPalindrome6 = (n) => {\n    let even = [], odd = [];\n    let max = Math.floor(n / 2);\n    for (let i = 1; i <= max; i++) {\n        let num = i;\n        while (num > 0) {\n            let sum = num % 10;\n            num = num / 10;\n            if (sum % 2 === 1) {\n                odd.unshift(num);\n            } else {\n                even.unshift(num);\n            }\n        }\n    }\n    let i = max + 1;\n    while (i <= n) {\n        let sum = i % 10;\n        i = i / 10;\n        if (sum % 2 === 1) {\n            odd.unshift(i);\n        } else {\n            even.unshift(i);\n        }\n    }\n    return [even.reverse().sort().join(''), odd.reverse().sort().join('')];\n}\n\nconst evenOddPalindrome7 = (n) => {\n    let even = [], odd = [];\n    let max = Math.floor(n / 2);\n    for (let i = 1; i <= max; i++) {\n        let num = i;\n        while (num > 0) {\n            let sum = num % 10;\n            num = num / 10;\n            if (sum % 2 === 1) {\n                odd.unshift(num);\n            } else {\n                even.unshift(num);\n            }\n        }\n    }\n    let i = max + 1;\n    while (i <= n) {\n        let sum = i % 10;\n        i = i / 10;\n        if (sum % 2 === 1) {\n"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0. \n   If a number be negative, then its first sign digit will be minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0. \n   If a number be negative, then its first sign digit will be minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let num = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      num++;\n    }\n  }\n  return num;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([-1, 1, -1, 1, -1]));\nconsole.log(countNums([-1, 1, -1, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordain. Your undertaking is to settle if \n   it is possible to catch an array classify in non - decreasing ordering by performing \n   the following mathematical process on the given array: \n       You are allowed to perform right shift key process any numeral of time. \n  \n   One right shift operation means shifting all component of the array by one \n   status in the right direction. The concluding component of the array will be move to \n   the starting side in the array i.e. 0th exponent. \n\n   If it exist possible to prevail the sorted array by perform the above mathematical process \n   then return dependable else return false. \n   If the grant array is empty then return on-key. \n\n   Note: The give list is guaranteed to have alone elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordain. Your undertaking is to settle if \n   it is possible to catch an array classify in non - decreasing ordering by performing \n   the following mathematical process on the given array: \n       You are allowed to perform right shift key process any numeral of time. \n  \n   One right shift operation means shifting all component of the array by one \n   status in the right direction. The concluding component of the array will be move to \n   the starting side in the array i.e. 0th exponent. \n\n   If it exist possible to prevail the sorted array by perform the above mathematical process \n   then return dependable else return false. \n   If the grant array is empty then return on-key. \n\n   Note: The give list is guaranteed to have alone elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    let i = 0\n    while(i < arr.length) {\n        let j = 0\n        while(j < arr.length) {\n            let k = j\n            while(k < arr.length) {\n                arr[k] = arr[k] + arr[k+1]\n                k = k + 1\n            }\n            j = j + 1\n        }\n        i = i + 1\n    }\n    return arr.every(x => x > 0)\n}\n\nconst moveOneBall1 = (arr) => {\n    let i = 0\n    while(i < arr.length) {\n        let j = i\n        while(j < arr.length) {\n            let k = j\n            while(k < arr.length) {\n                arr[k] = arr[k] + arr[k+1]\n                k = k + 1\n            }\n            j = j + 1\n        }\n        i = i + 1\n    }\n    return arr.every(x => x > 0)\n}\n\nconst moveOneBall2 = (arr) => {\n    let i = 0\n    while(i < arr.length) {\n        let j = i\n        while(j < arr.length) {\n            let k = j\n            while(k < arr.length) {\n                if(arr[k] < arr[k+1]) {\n                    arr[k] = arr[k] + arr[k+1]\n                    arr[k+1] = arr[k] - arr[k+1]\n                    arr[k] = arr[k] + arr[k+1]\n                    j = j + 1\n                } else {\n                    break\n                }\n            }\n            j = j + 1\n        }\n        i = i + 1\n    }\n    return arr.every(x => x > 0)\n}\n\nconst moveOneBall3 = (arr) => {\n    let i = 0\n    while(i < arr.length) {\n        let j = i\n        while(j < arr.length) {\n            let k = j\n            while(k < arr.length) {\n                if(arr[k] > arr[k+1]) {\n                    arr[k] = arr[k] + arr[k+1]\n                    arr[k+1] = arr[k] - arr[k+1]\n                    arr[k] = arr[k] + arr[k+1]\n                    j = j + 1\n                } else {\n                    break\n                }\n            }\n            j = j + 1\n        }\n        i = i + 1\n    }\n    return arr.every(x => x > 0)\n}\n\nconst moveOneBall4 = (arr) => {\n    let i = 0\n    while(i < arr.length) {\n        let j = i\n        while(j < arr.length) {\n            let k = j\n            while(k < arr.length) {\n                if(arr[k] < arr[k+1]) {\n                    arr[k] = arr[k] + arr[k+1]\n                    arr[k+1] = arr[k] - arr[k+1]\n                    arr[k] = arr[k] + arr[k+1]\n                    j = j + 1\n                } else {\n                    break\n                }\n            }\n            j = j + 1\n        }\n        i = i + 1\n    }\n    return arr.every(x => x > 0)\n}\n\nconst moveOneBall5 = (arr) => {\n    let i = 0\n    while(i < arr.length) {\n        let j = i\n        while(j < arr.length) {\n            let k = j\n            while(k < arr.length) {\n                if(arr[k] > arr[k+1]) {\n                    arr[k] = arr[k] + arr[k+1]\n                    arr[k+1] = arr[k] - arr[k+1]\n                    arr[k] = arr[k] + arr[k+1]\n                    j = j + 1\n                } else {\n                    break\n                }\n            }\n            j = j + 1\n        }\n        i = i + 1\n    }\n    return arr.every(x => x > 0)\n}\n\nconst moveOneBall6 = (arr) => {\n    let i = 0\n    while(i < arr.length) {\n        let j = i\n        while(j < arr.length) {\n            let k = j\n            while(k < arr.length) {\n                if(arr[k] < arr[k+1]) {\n                    arr[k] = arr[k] + arr[k+1]\n                    arr[k+1] = arr[k] - arr[k+1]\n                    arr[k] = arr[k] + arr[k+1]\n                    j = j + 1\n                } else {\n                    break\n                }\n            }\n            j = j + 1\n        }\n        i = i + 1\n    }\n    return arr.every(x => x > 0)\n}\n\nconst moveOne"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two tilt of number, \n   and determines whether it is possible to do an exchange of elements \n   between them to make lst1 a list of only even number. \n   There is no limit on the phone number of exchanged elements between lst1 and lst2.\n   If it is possible to exchange element between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function that takes two tilt of number, \n   and determines whether it is possible to do an exchange of elements \n   between them to make lst1 a list of only even number. \n   There is no limit on the phone number of exchanged elements between lst1 and lst2.\n   If it is possible to exchange element between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let lst1length = lst1.length;\n  let lst2length = lst2.length;\n  if(lst1length!== lst2length) return \"NO\";\n  let min = Math.min(lst1length, lst2length);\n  for(let i = 0; i < min; i++){\n    if(lst1[i]!== lst2[i]) return \"NO\";\n  }\n  return \"YES\";\n}\n\nexchange([1, 2, 3, 4], [1, 2, 3, 4]);\nexchange([1, 2, 3, 4], [1, 5, 3, 4]);\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  // If there is no test, return an empty dictionary.\n  if (!test) return {};\n  const letters = test.split(' ');\n  const dictionary = {};\n  // Iterate through the test, collecting letter frequency.\n  for (const letter of letters) {\n    if (!dictionary[letter]) {\n      dictionary[letter] = 1;\n    } else {\n      dictionary[letter]++;\n    }\n  }\n  // Sort the dictionary by the count, descending.\n  return dictionary;\n};\n\nconsole.log(histogram('a b c'));\nconsole.log(histogram('a b b a'));\nconsole.log(histogram('b b b b a'));\nconsole.log(histogram(''));\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings s and c, you have to erase all the character in s that are equal to any fictional character in c\n   then control if the result drawstring is palindrome. \n   A string is name palindrome if it reads the like backward as forth. \n   You should return a tuple containing the result string and on-key / assumed for the confirmation.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We are given two strings s and c, you have to erase all the character in s that are equal to any fictional character in c\n   then control if the result drawstring is palindrome. \n   A string is name palindrome if it reads the like backward as forth. \n   You should return a tuple containing the result string and on-key / assumed for the confirmation.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n    if (s.length === 0) {\n        return [s, false];\n    }\n    const chars = c.split('');\n    for (let i = 0; i < chars.length; i++) {\n        let j = s.lastIndexOf(chars[i]);\n        if (j === -1) {\n            return [s, false];\n        }\n        s = s.substr(0, j) + s.substr(j + 1);\n    }\n    return [s, true];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consist of alone digits, return a list.\n   Each element i of the end product should be \" the phone number of odd component in the \n   string i of the remark. \" where all the i's should be replaced by the number \n   of odd digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consist of alone digits, return a list.\n   Each element i of the end product should be \" the phone number of odd component in the \n   string i of the remark. \" where all the i's should be replaced by the number \n   of odd digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const lstLength = lst.length;\n  const lstOdd = [];\n  const lstEven = [];\n  for (let i = 0; i < lstLength; i++) {\n    let current = lst[i];\n    let currentCount = 0;\n    while (current!== undefined) {\n      currentCount++;\n      current = parseInt(current);\n    }\n    if (currentCount % 2 === 0) {\n      lstEven.push(lst[i]);\n    } else {\n      lstOdd.push(lst[i]);\n    }\n  }\n  return [lstOdd, lstEven];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find the minimal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n    let maxSum = 0;\n    let minSum = 0;\n    let result = [];\n    for (let i = 0; i < nums.length; i++) {\n        let sum = 0;\n        for (let j = i; j < nums.length; j++) {\n            sum += nums[j];\n            if (sum > maxSum) {\n                maxSum = sum;\n                result = [i, j];\n            }\n            if (sum < minSum) {\n                minSum = sum;\n            }\n        }\n    }\n    return result;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row exemplify a individual well, \n   and each 1 in a course represents a single unit of water. \n   Each well have a corresponding bucket that can be used to extract water from it, \n   and all bucket have the same capacity.\n   Your task is to use the buckets to evacuate the well. \n   Output the act of time you necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells. Each row exemplify a individual well, \n   and each 1 in a course represents a single unit of water. \n   Each well have a corresponding bucket that can be used to extract water from it, \n   and all bucket have the same capacity.\n   Your task is to use the buckets to evacuate the well. \n   Output the act of time you necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    // init\n    const fill = [0, 0, 0];\n    const fill_array = [fill[0], fill[1], fill[2]];\n    const grid_length = grid.length;\n    const grid_width = grid[0].length;\n    const fill_count = grid_length * grid_width;\n    //\n    const fill_array_array = grid_length.map((_, i) => grid_width.map(j => fill[i * grid_width + j] || 0));\n    const fill_array_array_copy = fill_array_array.slice();\n    //\n    // fill_array_array = [[fill_array_array[0][0], fill_array_array[0][1], fill_array_array[0][2]],..., [fill_array_array[grid_length - 1][0], fill_array_array[grid_length - 1][1], fill_array_array[grid_length - 1][2]]];\n    // fill_array_array = [fill_array_array[0][0], fill_array_array[0][1], fill_array_array[0][2],..., fill_array_array[grid_length - 1][0], fill_array_array[grid_length - 1][1], fill_array_array[grid_length - 1][2]];\n    // fill_array_array = fill_array_array.map(x => x);\n    // fill_array_array = fill_array_array.reduce( (a, b) => a.concat(b), []);\n    // fill_array_array = fill_array_array.slice(0, fill_count);\n    // fill_array_array = fill_array_array.map(x => x.slice(0, capacity));\n    // fill_array_array = fill_array_array.concat(fill_array_array.slice(fill_count - capacity));\n    // fill_array_array = fill_array_array.slice(0, fill_count - capacity);\n    //\n    // fill_array_array = [[fill_array_array[0][0], fill_array_array[0][1], fill_array_array[0][2]],..., [fill_array_array[grid_length - 1][0], fill_array_array[grid_length - 1][1], fill_array_array[grid_length - 1][2]]];\n    // fill_array_array = [fill_array_array[0][0], fill_array_array[0][1], fill_array_array[0][2],..., fill_array_array[grid_length - 1][0], fill_array_array[grid_length - 1][1], fill_array_array[grid_length - 1][2]];\n    // fill_array_array = fill_array_array.map(x => x);\n    // fill_array_array = fill_array_array.reduce( (a, b) => a.concat(b), []);\n    // fill_array_array = fill_array_array.slice(0, fill_count);\n    // fill_array_array = fill_array_array.map(x => x.slice(0, capacity));\n    // fill_array_array = fill_array_array.concat(fill_array_array.slice(fill_count - capacity));\n    // fill_array_array = fill_array_array.slice(0, fill_count - capacity);\n    //\n    // fill_array_array = [[fill_array_array[0][0], fill_array_array[0][1], fill_array_array[0][2]],..., [fill_array_array[grid_length - 1][0], fill_array_array[grid_length - 1][1], fill_array_array[grid_length - 1][2]]];\n    // fill_array_array = [fill_array_array[0][0], fill_array_array[0][1], fill_array_array[0][2],..., fill_array_array[grid_length - 1][0], fill_array_array[grid_length - 1][1], fill_array_array[grid_length - 1][2]];\n    // fill_array_array = fill_array_array.map(x => x);\n    // fill_array_array = fill_array_array.reduce( (a, b) => a.concat(b), []);\n    // fill_array_array = fill_array_array.slice(0, fill_count);\n    // fill_array_array = fill_array_array.map(x => x.slice(0, capacity));\n    // fill_array_array = fill_array_array.concat(fill_array_array.slice(fill_count - capacity));\n    // fill_array_array = fill_array_array.slice(0, fill_count - capacity);\n    //\n    // fill_array_array = [[fill_array_array[0][0], fill_array_array[0][1], fill_array_array[0][2]],..., [fill_array_array[grid_"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  return arr.sort((a, b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n}\n\n/*\n  In this Kata, you have to add and subtract two numbers.\n   It must be implemented like this:\n  >>> add(1, 1) == 2\n  >>> add(2, 1) == 3\n  >>> add(-1, 1) == 0\n  >>> subtract(2, 1) == 1\n  >>> subtract(3, 2) == 1\n  >>> subtract(3, 3) == 0\n  */\nconst add = (a, b) => {\n  return a + b\n}\n\nconst subtract = (a, b) => {\n  return a - b\n}\n\n/*\n  In this Kata, you have to multiply two numbers.\n   It must be implemented like this:\n  >>> multiply(2, 2) == 4\n  >>> multiply(3, 3) == 9\n  >>> multiply(4, 2) == 8\n  >>> multiply(3, 4) == 12\n  */\nconst multiply = (a, b) => {\n  return a * b\n}\n\n/*\n  In this Kata, you have to multiply two numbers and return result.\n   It must be implemented like this:\n  >>> multiply(2, 2) == 4\n  >>> multiply(3, 3) == 9\n  >>> multiply(4, 2) == 8\n  >>> multiply(3, 4) == 12\n  >>> multiply(2, 4) == 8\n  */\nconst multiply2 = (a, b) => {\n  return a * b\n}\n\n/*\n  In this Kata, you have to find largest common divisor of two numbers.\n   It must be implemented like this:\n  >>> gcd(2, 3) == 1\n  >>> gcd(2, 4) == 2\n  >>> gcd(4, 2) == 2\n  >>> gcd(3, 4) == 1\n  >>> gcd(3, 3) == 1\n  */\nconst gcd = (a, b) => {\n  return b === 0? a : gcd(b, a % b)\n}\n\n/*\n  In this Kata, you have to add and subtract two numbers.\n   It must be implemented like this:\n  >>> add(1, 1) == 2\n  >>> add(2, 1) == 3\n  >>> add(-1, 1) == 0\n  >>> subtract(2, 1) == 1\n  >>> subtract(3, 2) == 1\n  >>> subtract(3, 3) == 0\n  */\nconst compare = (a, b) => {\n  return a - b\n}\n\n/*\n  In this Kata, you have to calculate number of digits in an integer.\n   It must be implemented like this:\n  >>> digit(10) == 1\n  >>> digit(9) == 1\n  >>> digit(8) == 1\n  >>> digit(7) == 1\n  >>> digit(6) == 1\n  >>> digit(5) == 0\n  >>> digit(4) == 1\n  >>> digit(3) == 1\n  >>> digit(2) == 1\n  >>> digit(1) == 0\n  >>> digit(0) == 1\n  */\nconst digit = (n) => {\n  return n === 0? 1 : Math.floor(Math.log(n) / Math.log(10))\n}\n\n/*\n  In this Kata, you have to find the maximum of two numbers.\n   It must be implemented like this:\n  >>> max(1, 2) == 2\n  >>> max(2, 1) == 2\n  >>> max(2, 2) == 2\n  >>> max(3, 2) == 3\n  >>> max(3, 4) == 4\n  */\nconst max = (a, b) => {\n  return a > b? a : b\n}\n\n/*\n  In this Kata, you have to find the minimum of two numbers.\n   It must be implemented like this:\n  >>> min(1, 2) == 1\n  >>> min(2, 1) == 1\n  >>> min(2, 2) == 2\n  >>> min(3, 2) == 2\n  >>> min(3, 4) == 2\n  */\nconst min = (a, b) => {\n  return a < b? a : b\n}\n\nconst sortArray = (arr) => {\n  return arr.sort((a, b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n}\n\nconst add = (a, b) => {\n  return a + b\n}\n\nconst subtract = (a, b) => {\n  return a - b\n}\n\nconst multiply = (a, b) => {\n  return a * b\n}\n\nconst multiply2 = (a, b) => {\n  return a * b\n}\n\nconst gcd = (a, b) => {\n  return b === 0? a : gcd(b, a % b)\n}\n\nconst compare = (a, b) => {\n  return a - b\n}\n\nconst digit = (n) => {\n  return n === 0? 1 : Math.floor(Math.log(n) / Math.log(10))\n}\n\nconst max = (a, b) => {\n  return a > b? a : b\n}\n\nconst min = (a, b) => {\n  return a < b? a : b\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray(["}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tax to follow through \n   a function that returns a list of all word from string s that hold exactly \n   n consonant, in ordering these words appear in the chain s.\n   If the string s is empty then the function should return an empty list.\n   bill: you may assume the stimulation bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you have been tax to follow through \n   a function that returns a list of all word from string s that hold exactly \n   n consonant, in ordering these words appear in the chain s.\n   If the string s is empty then the function should return an empty list.\n   bill: you may assume the stimulation bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const dict = {};\n  let curr = 0;\n  let word = \"\";\n  let words = [];\n  while (curr < s.length) {\n    let char = s.charAt(curr);\n    if (char!== \" \") {\n      if (!dict.hasOwnProperty(char)) {\n        dict[char] = 1;\n        curr += 1;\n      }\n    } else {\n      if (word!== \"\") {\n        words.push(word);\n      }\n      curr += 1;\n      word = \"\";\n    }\n  }\n  if (word!== \"\") {\n    words.push(word);\n  }\n  let next = 0;\n  while (next < words.length) {\n    let len = words[next].length;\n    if (len === n) {\n      return words[next];\n    } else {\n      next += 1;\n    }\n  }\n  return [];\n};\n\n// console.log(selectWords(\"Hello world\", 2));\n// console.log(selectWords(\"Hello world\", 3));\n// console.log(selectWords(\"Hello world\", 4));\n// console.log(selectWords(\"Hello world\", 5));\n// console.log(selectWords(\"Hello world\", 6));\n// console.log(selectWords(\"Hello world\", 7));\n// console.log(selectWords(\"Hello world\", 8));\n// console.log(selectWords(\"Hello world\", 9));\n// console.log(selectWords(\"Hello world\", 10));\n// console.log(selectWords(\"Hello world\", 11));\n// console.log(selectWords(\"Hello world\", 12));\n// console.log(selectWords(\"Hello world\", 13));\n// console.log(selectWords(\"Hello world\", 14));\n// console.log(selectWords(\"Hello world\", 15));\n// console.log(selectWords(\"Hello world\", 16));\n// console.log(selectWords(\"Hello world\", 17));\n// console.log(selectWords(\"Hello world\", 18));\n// console.log(selectWords(\"Hello world\", 19));\n// console.log(selectWords(\"Hello world\", 20));\n// console.log(selectWords(\"Hello world\", 21));\n// console.log(selectWords(\"Hello world\", 22));\n// console.log(selectWords(\"Hello world\", 23));\n// console.log(selectWords(\"Hello world\", 24));\n// console.log(selectWords(\"Hello world\", 25));\n// console.log(selectWords(\"Hello world\", 26));\n// console.log(selectWords(\"Hello world\", 27));\n// console.log(selectWords(\"Hello world\", 28));\n// console.log(selectWords(\"Hello world\", 29));\n// console.log(selectWords(\"Hello world\", 30));\n// console.log(selectWords(\"Hello world\", 31));\n// console.log(selectWords(\"Hello world\", 32));\n// console.log(selectWords(\"Hello world\", 33));\n// console.log(selectWords(\"Hello world\", 34));\n// console.log(selectWords(\"Hello world\", 35));\n// console.log(selectWords(\"Hello world\", 36));\n// console.log(selectWords(\"Hello world\", 37));\n// console.log(selectWords(\"Hello world\", 38));\n// console.log(selectWords(\"Hello world\", 39));\n// console.log(selectWords(\"Hello world\", 40));\n// console.log(selectWords(\"Hello world\", 41));\n// console.log(selectWords(\"Hello world\", 42));\n// console.log(selectWords(\"Hello world\", 43));\n// console.log(selectWords(\"Hello world\", 44));\n// console.log(selectWords(\"Hello world\", 45));\n// console.log(selectWords(\"Hello world\", 46));\n// console.log(selectWords(\"Hello world\", 47));\n// console.log(selectWords(\"Hello world\", 48));\n// console.log(selectWords(\"Hello world\", 49));\n// console.log(selectWords(\"Hello world\", 50));\n// console.log(selectWords(\"Hello world\", 51));\n// console.log(selectWords(\"Hello world\", 52));\n// console.log(selectWords(\"Hello world\", 53));\n// console.log(selectWords(\"Hello world\", 54));\n// console.log(selectWords(\"Hello world\", 55));\n// console.log(selectWords(\"Hello world\", 56));\n// console.log(selectWords(\"Hello world\", 57));\n// console.log(selectWords(\"Hello world\", 58));\n// console.log(selectWords(\"Hello world\", 59));\n// console.log(selectWords(\"Hello world\", 60));\n// console.log(selectWords(\"Hello world\", 61));\n// console.log(selectWords(\"Hello world\", 62));\n// console.log(selectWords(\"Hello world\", 63));\n// console.log(selectWords(\"Hello world\", 64));\n// console.log(selectWords(\"Hello world\", 65));\n// console.log(selectWords(\"Hello world\", 66));\n// console.log(selectWords(\"Hello world\", 67));\n// console.log(selectWords(\"Hello world\", 68));\n// console.log(selectWords(\"Hello world\", 69));\n// console.log(selectWords(\"Hello world\", 70));\n// console.log(selectWords(\"Hello world\", 71));\n// console.log(selectWords(\"Hello world\", 72));\n// console.log(selectWords(\"Hello world\", 73));\n// console.log(selectWords(\"Hello world\", 74));\n// console.log(selectWords(\"Hello world\", 75));\n// console.log(selectWords(\"Hello world\", 76));\n// console.log(selectWords(\"Hello world\", 77));\n// console.log(selectWords(\"Hello world\", 78));\n// console.log(selectWords(\"Hello world\", 79));\n// console.log(selectWords(\"Hello world\", 80));\n// console.log(selectWords(\""}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n   two consonant from the good slope of the word (case sensible). \n  \n   vowel in the beginning and termination doesn't count. Return empty string if you didn't \n   find any vowel met the above condition. \n\n   You may bear that the given chain contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n   two consonant from the good slope of the word (case sensible). \n  \n   vowel in the beginning and termination doesn't count. Return empty string if you didn't \n   find any vowel met the above condition. \n\n   You may bear that the given chain contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowel = '',\n    isConsonant = false,\n    vowelIndex = 0,\n    consonantIndex = 0,\n    wordLength = word.length;\n\n  for (let i = 0; i < wordLength; i++) {\n    if (isVowel(word[i])) {\n      if (isConsonant) {\n        vowel = word[i];\n        break;\n      }\n      consonantIndex++;\n    } else {\n      if (!isConsonant) {\n        isConsonant = true;\n        consonantIndex++;\n      }\n    }\n  }\n\n  if (vowel &&!isConsonant) {\n    return vowel;\n  }\n  return '';\n};\n\n/*\n  * Function: isVowel\n  *\n  * Check whether the character is vowel.\n  *\n  * Parameters:\n  *   char - Character\n  *\n  * Return:\n  *   Boolean\n  * */\nconst isVowel = (char) => {\n  return (\n    [\n      'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'\n    ].indexOf(char)!= -1\n  );\n};\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of capable \n   digression' (' or close parentheses')' merely. \n   Your job is to control if it is potential to concatenate the two string in\n   some order, that the result string will be adept. \n   A string S is considered to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings, both strings consist of capable \n   digression' (' or close parentheses')' merely. \n   Your job is to control if it is potential to concatenate the two string in\n   some order, that the result string will be adept. \n   A string S is considered to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = [];\n  let cur = 0;\n  let prev = 0;\n  let paren = 1;\n  while (cur < lst.length) {\n    if (lst[cur] === '(') {\n      paren++;\n      if (paren === 2) {\n        res.push(lst.substr(prev, cur - prev));\n        cur++;\n      }\n    } else if (lst[cur] === ')') {\n      paren--;\n      if (paren === 1) {\n        res.push(lst.substr(prev, cur - prev));\n        cur++;\n      }\n    } else if (paren === 0) {\n      res.push(lst.substr(prev, cur - prev));\n      cur++;\n    } else {\n      cur++;\n    }\n    prev = cur;\n  }\n  return res.length === 1 && res[0] === ''? 'No' : 'Yes';\n};\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of duration k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of duration k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let output = [];\n  let max = 0;\n\n  for (let i = 0; i < k; i++) {\n    const cur = arr[i];\n    if (output.length === 0) {\n      output.push(cur);\n    } else {\n      if (cur > max) {\n        output.push(cur);\n        max = cur;\n      }\n    }\n  }\n\n  return output;\n};\n\nconst maximumTest = [\n  [-3, -4, 5],\n  [4, -4, 4],\n  [-3, 2, 1, 2, -1, -2, 1],\n];\n\nfor (let [_, arr, k] of maximumTest) {\n  console.log(maximum(arr, k));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in even military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in even military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1, 9, 3, 3, 3, 3, 3, 3, 3]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = arr[0]\n  const carry = 0\n  for (let i = 1; i < k; i++) {\n    sum += arr[i]\n    carry = (sum % 10) + (carry * 10)\n    sum = (sum / 10) + carry\n  }\n  return sum\n}\n\nmodule.exports = addElements\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that take the curious number in collatz sequence. \n\n   The Collatz guess is a conjecture in mathematics that concern a succession defined \n   as follow: start with any positive integer n. Then each condition is obtained from the \n   previous term as stick to: if the former term be even, the adjacent term is one half of \n   the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list classify in increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that take the curious number in collatz sequence. \n\n   The Collatz guess is a conjecture in mathematics that concern a succession defined \n   as follow: start with any positive integer n. Then each condition is obtained from the \n   previous term as stick to: if the former term be even, the adjacent term is one half of \n   the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list classify in increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let list = [];\n  while (n > 0) {\n    if (n % 2 === 1) {\n      list.push(n);\n      n = Math.floor(n / 2);\n    } else {\n      n = n / 3;\n    }\n  }\n  return list;\n};\n\nconsole.log(getOddCollatz(5));\nconsole.log(getOddCollatz(11));\nconsole.log(getOddCollatz(1));\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a grant date chain and \n   reappearance genuine if the date is valid differently false. \n   The date is valid if all of the following rule are satisfied: \n   1. The date string is not empty. \n   2. The issue of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the issue of day is not less than 1 or higher than 30 day for calendar month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. \n   3. The month should not be less than 1 or high than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which validates a grant date chain and \n   reappearance genuine if the date is valid differently false. \n   The date is valid if all of the following rule are satisfied: \n   1. The date string is not empty. \n   2. The issue of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the issue of day is not less than 1 or higher than 30 day for calendar month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. \n   3. The month should not be less than 1 or high than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if(!date || date.length === 0)\n    return false;\n  const dateParts = date.split('-');\n  const year = parseInt(dateParts[2], 10);\n  const month = parseInt(dateParts[1], 10);\n  const day = parseInt(dateParts[0], 10);\n  if(month < 1 || month > 12)\n    return false;\n  if(day < 1 || day > 31)\n    return false;\n  const calendarMonth = new Date(year, month - 1, 0);\n  const daysInMonth = calendarMonth.getDate();\n  if(month === 2 && day > daysInMonth)\n    return false;\n  if(month === 4 || month === 6 || month === 8 || month === 10 || month === 12)\n    if(day > 30)\n      return false;\n  if(month === 3)\n    if(day > 29)\n      return false;\n  return true;\n}\n\nconst isValidDate = (date) => {\n  if(!date || date.length === 0)\n    return false;\n  const dateParts = date.split('-');\n  const year = parseInt(dateParts[2], 10);\n  const month = parseInt(dateParts[1], 10);\n  const day = parseInt(dateParts[0], 10);\n  if(month < 1 || month > 12)\n    return false;\n  if(day < 1 || day > 31)\n    return false;\n  const calendarMonth = new Date(year, month - 1, 0);\n  const daysInMonth = calendarMonth.getDate();\n  if(month === 2 && day > daysInMonth)\n    return false;\n  if(month === 4 || month === 6 || month === 8 || month === 10 || month === 12)\n    if(day > 30)\n      return false;\n  if(month === 3)\n    if(day > 29)\n      return false;\n  return true;\n}\n\nconst isDateValid = (date) => {\n  if(!date || date.length === 0)\n    return false;\n  const dateParts = date.split('-');\n  const year = parseInt(dateParts[2], 10);\n  const month = parseInt(dateParts[1], 10);\n  const day = parseInt(dateParts[0], 10);\n  if(month < 1 || month > 12)\n    return false;\n  if(day < 1 || day > 31)\n    return false;\n  const calendarMonth = new Date(year, month - 1, 0);\n  const daysInMonth = calendarMonth.getDate();\n  if(month === 2 && day > daysInMonth)\n    return false;\n  if(month === 4 || month === 6 || month === 8 || month === 10 || month === 12)\n    if(day > 30)\n      return false;\n  if(month === 3)\n    if(day > 29)\n      return false;\n  return true;\n}\n\nconst getValidDate = (date) => {\n  if(!date || date.length === 0)\n    return '';\n  const dateParts = date.split('-');\n  const year = parseInt(dateParts[2], 10);\n  const month = parseInt(dateParts[1], 10);\n  const day = parseInt(dateParts[0], 10);\n  const dateString = (year + '-' + month + '-' + day).replace(/ /g, '');\n  return dateString;\n}\n\nconst isDateInValidRange = (date) => {\n  if(!date || date.length === 0)\n    return false;\n  const dateParts = date.split('-');\n  const year = parseInt(dateParts[2], 10);\n  const month = parseInt(dateParts[1], 10);\n  const day = parseInt(dateParts[0], 10);\n  const calendarMonth = new Date(year, month - 1, 0);\n  const daysInMonth = calendarMonth.getDate();\n  if(month === 2 && day > daysInMonth)\n    return false;\n  if(month === 4 || month === 6 || month === 8 || month === 10 || month === 12)\n    if(day > 30)\n      return false;\n  if(month === 3)\n    if(day > 29)\n      return false;\n  return true;\n}\n\nconst isDateValid = (date) => {\n  if(!date || date.length === 0)\n    return false;\n  const dateParts = date.split('-');\n  const year = parseInt(dateParts[2], 10);\n  const month = parseInt(dateParts[1], 10);\n  const day = parseInt(dateParts[0], 10);\n  if(month < 1 || month > 12)\n    return false;\n  if(day < 1 || day > 31)\n    return false;\n  const calendarMonth = new Date(year, month - 1, 0);\n  const daysInMonth = calendarMonth.getDate();\n  if(month === 2 && day > daysInMonth)\n    return false;\n  if(month === 4 || month === 6 || month === 8 || month === 10 || month === 12)\n    if(day > 30)\n      return false;\n  if(month === 3)\n    if(day > 29)\n      return false;\n  return true;\n}\n\nconst getValidDate = (date) => {\n  if(!date"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  var words = [];\n  var letter = 'a';\n  var i = 0;\n  var letterIndex = 0;\n  while (letterIndex < txt.length) {\n    letter = txt[letterIndex];\n    if (letter ==='') {\n      words.push(txt.substring(i, letterIndex));\n      i = letterIndex;\n    } else if (letter === ',') {\n      words.push(txt.substring(i, letterIndex));\n      i = letterIndex;\n    } else {\n      letterIndex++;\n    }\n  }\n  if (txt.length > i) {\n    words.push(txt.substring(i, txt.length));\n  }\n  return words;\n};\n\n/*\n  Given a string, return the string in lowercase\n  Examples\n  lowerCase(\"Hello\") ➞ \"hello\"\n  lowerCase(\"Hellow\") ➞ \"hellow\"\n  lowerCase(\"Hello World\") ➞ \"hello world\"\n  lowerCase(\"Hello world!\") ➞ \"hello world!\"\n*/\nconst lowerCase = (txt) => {\n  return txt.toLowerCase();\n};\n\n/*\n  Given a string, return a list of strings separated by commas\n  Examples\n  delimited(\"Hello, world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello, world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n*/\nconst delimited = (txt) => {\n  return splitWords(txt).map((word) => {\n    return lowerCase(word);\n  });\n};\n\n/*\n  Given a string, return a list of strings separated by spaces\n  Examples\n  delimited(\"Hello, world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello, world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n*/\nconst spaced = (txt) => {\n  return splitWords(txt).map((word) => {\n    return word.split(' ').join(' ');\n  });\n};\n\n/*\n  Given a string, return a list of strings separated by whitespace\n  Examples\n  delimited(\"Hello, world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello, world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n*/\nconst whitespaced = (txt) => {\n  return splitWords(txt).map((word) => {\n    return word.split('').join('');\n  });\n};\n\n/*\n  Given a string, return a list of strings separated by commas and spaced\n  Examples\n  delimited(\"Hello, world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello, world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n*/\nconst commaspaced = (txt) => {\n  return spaced(delimited(txt));\n};\n\n/*\n  Given a string, return a list of strings separated by whitespace and spaced\n  Examples\n  delimited(\"Hello, world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello, world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n*/\nconst whitespacedcomma = (txt) => {\n  return commaspaced(whitespaced(txt));\n};\n\n/*\n  Given a string, return a list of strings separated by commas and spaced\n  Examples\n  delimited(\"Hello, world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello, world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n*/\nconst spacedcomma = (txt) => {\n  return whitespacedcomma(delimited(txt));\n};\n\n/*\n  Given a string, return a list of strings separated by whitespace and commas\n  Examples\n  delimited(\"Hello, world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello, world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  delimited(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n*/\nconst whitespacedcomma = (txt) => {\n  return spacedcomma(whitespaced(txt));\n};\n\n/*"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted \n   in ascending decree. If list have more than 1 extra of the like \n   number, return false. simulate no minus numbers and alone integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are sorted \n   in ascending decree. If list have more than 1 extra of the like \n   number, return false. simulate no minus numbers and alone integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if(lst.length === 1) {\n    return true;\n  }\n\n  let last = lst[0];\n  for(let i = 1; i < lst.length; i++) {\n    if(lst[i] < last) {\n      return false;\n    }\n    last = lst[i];\n  }\n\n  return true;\n};\n\nexport default isSorted;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval equal a couple of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval equal a couple of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > start2) {\n    return intersection(interval2, interval1);\n  }\n  if (end1 > end2) {\n    return intersection(interval1, interval2);\n  }\n  const length = end1 - start1;\n  const length2 = end2 - start2;\n  if (length === length2) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nexport default intersection;\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n   union of magnitude of integer multiply by product of all signs \n   of each number in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need to return\n   union of magnitude of integer multiply by product of all signs \n   of each number in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n    let sum = 0;\n    let sumSign = 0;\n    arr.forEach(item => {\n        let num = item.toString();\n        let sign = Number(item) > 0? 1 : Number(item) < 0? -1 : 0;\n        sum = sum + (Math.pow(Math.abs(item), 2)) * sign;\n        sumSign = sumSign + sign;\n    });\n    return sumSign * sum;\n};\n\nconst arr = [1, 2, 2, -4];\nconsole.log(prodSigns(arr));\n\n/*\n  Given an array arr of strings and you need to return\n   union of characters of all elements of array.\n   act by '' for empty arr.\n\n   model:\n  >>> concatSigns(['a', 'b', 'c', 'd']) == 'abcd'\n  >>> concatSigns([]) == null\n  >>> concatSigns(['', 'a', 'b', 'c']) == 'abc'\n  */\nconst concatSigns = (arr) => {\n    let sum = '';\n    arr.forEach(item => {\n        sum = sum + item;\n    });\n    return sum;\n};\n\nconst arr2 = ['', 'a', 'b', 'c'];\nconsole.log(concatSigns(arr2));\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cell of the grid incorporate a value. Every integer in the range [ 1, N * N ] \n   inclusive appears exactly once on the cell of the grid.\n\n   You induce to find the minimum path of length k in the grid. You can begin \n   from any cell, and in each step you can move to any of the neighbor cells, \n   in early password, you can go to cell which partake an edge with you current \n   cell. \n   Please note that a path of duration k means travel to exactly k cells (not \n   inevitably discrete). \n   You CANNOT go off the grid.\n   A way A (of distance k) is considered less than a way barn (of length k) if \n   after have the arrange tilt of the values on the cell that A and B plump \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early son, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we consume \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the solution is unique. \n   Return an ordered list of the values on the cells that the minimum way move through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cell of the grid incorporate a value. Every integer in the range [ 1, N * N ] \n   inclusive appears exactly once on the cell of the grid.\n\n   You induce to find the minimum path of length k in the grid. You can begin \n   from any cell, and in each step you can move to any of the neighbor cells, \n   in early password, you can go to cell which partake an edge with you current \n   cell. \n   Please note that a path of duration k means travel to exactly k cells (not \n   inevitably discrete). \n   You CANNOT go off the grid.\n   A way A (of distance k) is considered less than a way barn (of length k) if \n   after have the arrange tilt of the values on the cell that A and B plump \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early son, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we consume \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the solution is unique. \n   Return an ordered list of the values on the cells that the minimum way move through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  if (grid.length < 3) {\n    return [1];\n  }\n  if (k > grid.length * (grid.length - 1)) {\n    return [grid[0][0]];\n  }\n  return grid.map((row, i) => {\n    if (i === 0) {\n      return row.slice(1, row.length - 1);\n    }\n    return row.slice(1, row.length - 1).concat(minPath(grid, k - row.length));\n  }).reduce((a, b) => {\n    return a.concat(b);\n  });\n};\n\nexport default minPath;<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied profoundly by mathematicians in \n   the final couple hundred. However, what people don't know is Tribonacci sequence. \n   Tribonacci succession is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is curious.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied profoundly by mathematicians in \n   the final couple hundred. However, what people don't know is Tribonacci sequence. \n   Tribonacci succession is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is curious.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let ret = [1]\n  for (let i = 2; i <= n; i++) {\n    ret.push(ret[i - 1] + ret[i - 2] + ret[i + 1])\n  }\n  return ret\n}\n\nconsole.log(tri(9))\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the leftover digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the leftover digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let total = 1;\n  for (let i = 1; i <= n; i++) {\n    total *= i;\n  }\n  return total;\n};\n\nconst isEven = (x) => x % 2 === 0;\nconst getLeft = (n) => n % 10;\nconst getRight = (n) => n % 100;\nconst getTail = (n) => n % 1000;\n\nconst isPositive = (n) => n > 0;\nconst isNegative = (n) => n < 0;\n\nconst sum = (x) => x + 1;\nconst add = (x, y) => x + y;\nconst mult = (x, y) => x * y;\nconst sub = (x, y) => x - y;\nconst pow = (x, y) => x * x * x;\n\nconst div = (x, y) => x / y;\nconst mod = (x, y) => x % y;\n\nconst inc = (n) => n + 1;\nconst dec = (n) => n - 1;\n\nconst isOdd = (x) => x % 2!== 0;\nconst isEven = (x) => x % 2 === 0;\n\nconst gcd = (x, y) => (x % y === 0)? y : gcd(y, x % y);\nconst lcm = (x, y) => x * y / gcd(x, y);\n\nconst divs = (n) => {\n  const divs = [];\n  const x = 1;\n  const y = n;\n  while (y!== 0) {\n    const remainder = y % x;\n    const term = x;\n    x = y;\n    y = remainder;\n    divs.push(term);\n  }\n  return divs;\n};\n\nconst primes = (n) => {\n  const primes = [];\n  const x = 2;\n  const i = 0;\n  while (x <= n) {\n    if (isEven(x)) {\n      x = x + 1;\n      continue;\n    }\n    primes.push(x);\n    x = x + 2;\n    i++;\n  }\n  return primes;\n};\n\nconst sumOfPrimes = (n) => {\n  const x = 0;\n  const sum = 0;\n  for (let i = 0; i <= n; i++) {\n    if (isEven(i)) {\n      x = x + 1;\n      continue;\n    }\n    if (x === 0) {\n      sum = sum + i;\n      x = i + 1;\n    } else {\n      x = x + 1;\n    }\n  }\n  return sum;\n};\n\nconst isPrime = (n) => {\n  let x = 2;\n  while (x <= n) {\n    if (n % x === 0) {\n      return false;\n    }\n    x = x + 1;\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  const str = n.toString();\n  const rev = str.split('').reverse().join('');\n  return n === rev;\n};\n\nconst isEvenOdd = (n) => isEven(n) || isOdd(n);\n\nconst isEvenOdd2 = (n) => {\n  let x = n;\n  if (isEven(x)) {\n    return true;\n  }\n  x = x + 1;\n  return isEven(x);\n};\n\nconst isEvenOdd3 = (n) => {\n  let x = n;\n  if (isOdd(x)) {\n    return true;\n  }\n  x = x + 1;\n  return isOdd(x);\n};\n\nconst isPrimeAndEvenOdd = (n) => isPrime(n) && isEvenOdd(n);\n\nconst isPrimeAndOdd = (n) => isPrime(n) &&!isEven(n);\n\nconst isPrimeAndEven = (n) => isPrime(n) &&!isOdd(n);\n\nconst isPrimeAndOdd2 = (n) => isPrime(n) && isEvenOdd2(n);\n\nconst isPrimeAndOdd3 = (n) => isPrime(n) && isEvenOdd3(n);\n\nconst isPrimeAndOdd4 = (n) => isPrime(n) && isEvenOdd3(n);\n\nconst isPrimeAndOdd5 = (n) => isPrime(n) && isEvenOdd3(n);\n\nconst isPrimeAndOdd6 = (n) => isPrime(n) && isEvenOdd2(n);\n\nconst isPrimeAndOdd7 = (n) => isPrime(n) && isEvenOdd2(n);\n\nconst isPrimeAndOdd8 = (n) => isPrime(n) && isEvenOdd3(n);\n\nconst isPrimeAndOdd9 = (n) => isPrime(n) && isEvenOdd3(n);\n\nconst isPrimeAndOdd10 = (n) => isPrime(n) && isEvenOdd2(n);\n\nconst isPrimeAndOdd11 = (n) => isPrime(n) && isEvenOdd3(n);\n\nconst isPrimeAndOdd12 = (n) => isPrime(n) && isEvenOdd3(n);\n\nconst isPrimeAndOdd13 = (n) => isPrime(n) && isEvenOdd3(n);\n\nconst isPrimeAndOdd14 = (n) => isPrime(n) && isEvenOdd2(n);\n\nconst isPrimeAndOdd15 = (n) => isPrime(n) && isEvenOdd2(n);\n\nconst isPrimeAndOdd16 = (n) => isPrime(n) && isEvenOdd2(n);\n\nconst isPrimeAndOdd17 = (n) => isPrime(n) && isEvenOdd3(n);\n\nconst isPrimeAndOdd18 = (n) => isPrime(n) && isEvenOdd3(n);\n\nconst isPrimeAndOdd19 = (n) => isPrime"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ assumed \n   isNested('[]') ➞ assumed \n   isNested('[[][]]') ➞ dependable \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ assumed \n   isNested('[]') ➞ assumed \n   isNested('[[][]]') ➞ dependable \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n   const stack = new Array();\n   const result = new Array();\n   const isNested = (string) = > {\n     const stack = new Array();\n     const result = new Array();\n     for (const char character of string) {\n       if (character === '[') {\n         stack.push(character);\n       } else if (character === ']') {\n         const bracket = stack.pop();\n         const nestedBrackets = stack.length;\n         if (bracket === '[' && nestedBrackets > 0) {\n           result.push(true);\n         } else {\n           result.push(false);\n         }\n       }\n     }\n     return result;\n   };\n   return isNested('[[]]');\n }\n */\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need to return the sum of squared numbers in the give list,\n   round each component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You need to return the sum of squared numbers in the give list,\n   round each component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const max = Math.ceil(Math.max(...lst));\n  return (lst.map((e) => Math.round(e * e))).reduce((a, b) => a + b);\n};\n\nconst sumSquares1 = (lst) => {\n  return lst.reduce((a, b) => a + b);\n};\n\nconst sumSquares2 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares3 = (lst) => {\n  const max = Math.ceil(Math.max(...lst));\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares4 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares5 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares6 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares7 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares8 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares9 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares10 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares11 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares12 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares13 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares14 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares15 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares16 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares17 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares18 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares19 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares20 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares21 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares22 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares23 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares24 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares25 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares26 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares27 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares28 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares29 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares30 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares31 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares32 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares33 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares34 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares35 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares36 = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n};\n\nconst sumSquares37 = ("}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetical quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetical quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const splitTxt = txt.split(\" \");\n  const lastChar = splitTxt[splitTxt.length - 1];\n  const isALetter = (lastChar) => \n    (typeof lastChar === \"string\") && \n    (lastChar.length === 1) &&\n    (lastChar.match(/[A-Za-z]+/));\n  const isNotALetter = (lastChar) => \n    (typeof lastChar === \"string\") && \n    (lastChar.length === 1) &&\n    (lastChar.match(/[0-9]+/));\n  return isALetter(lastChar) || isNotALetter(lastChar);\n};\n\nconst isASentence = (txt) => \n  (typeof txt === \"string\") && \n  (txt.length > 0) &&\n  (txt.split(\" \").every(checkIfLastCharIsALetter));\n\nconst getNumberOfWords = (txt) => {\n  const splitTxt = txt.split(\" \");\n  return splitTxt.length;\n};\n\nconst extractWords = (txt) => {\n  const splitTxt = txt.split(\" \");\n  return splitTxt.filter(isASentence);\n};\n\nconst getWordLength = (txt) => {\n  const splitTxt = txt.split(\" \");\n  return splitTxt.map(w => w.length);\n};\n\nconst getWordOccurrences = (txt) => {\n  const splitTxt = txt.split(\" \");\n  const wordOccurrences = splitTxt.filter(w => w.length > 0);\n  return wordOccurrences.length;\n};\n\nconst getWordsWithLength = (txt) => {\n  const splitTxt = txt.split(\" \");\n  return splitTxt.map(w => [w, getWordLength(w)]);\n};\n\nconst getWordsWithLengthAndOccurrences = (txt) => {\n  const splitTxt = txt.split(\" \");\n  return splitTxt.map(w => [w, getWordLength(w), getWordOccurrences(w)]);\n};\n\nconst getWordsWithLengthAndOccurrencesAndWords = (txt) => {\n  const splitTxt = txt.split(\" \");\n  return splitTxt.map(w => [w, getWordLength(w), getWordOccurrences(w), getWordsWithLength(w)]);\n};\n\nconst getWordsWithLengthAndOccurrencesAndWordsAndWordLengths = (txt) => {\n  const splitTxt = txt.split(\" \");\n  return splitTxt.map(w => [w, getWordLength(w), getWordOccurrences(w), getWordsWithLength(w), getWordLength(w)]);\n};\n\nconst getWordsWithLengthAndOccurrencesAndWordsAndWordLengthsAndWordOccurrences = (txt) => {\n  const splitTxt = txt.split(\" \");\n  return splitTxt.map(w => [w, getWordLength(w), getWordOccurrences(w), getWordsWithLength(w), getWordLength(w), getWordOccurrences(w)]);\n};\n\nconst getWordsWithLengthAndOccurrencesAndWordsAndWordLengthsAndWordOccurrencesAndWords = (txt) => {\n  const splitTxt = txt.split(\" \");\n  return splitTxt.map(w => [w, getWordLength(w), getWordOccurrences(w), getWordsWithLength(w), getWordLength(w), getWordOccurrences(w), getWordsWithLength(w), getWordLength(w), getWordOccurrences(w)]);\n};\n\nconst getWordsWithLengthAndOccurrencesAndWordsAndWordLengthsAndWordOccurrencesAndWordsAndWordLengths = (txt) => {\n  const splitTxt = txt.split(\" \");\n  return splitTxt.map(w => [w, getWordLength(w), getWordOccurrences(w), getWordsWithLength(w), getWordLength(w), getWordOccurrences(w), getWordsWithLength(w), getWordLength(w), getWordOccurrences(w)]);\n};\n\nconst getWordsWithLengthAndOccurrencesAndWordsAndWordLengthsAndWordOccurrencesAndWordsAndWordLengths = (txt) => {\n  const splitTxt = txt.split(\" \");\n  return splitTxt.map(w => [w, getWordLength(w), getWordOccurrences(w), getWordsWithLength(w), getWordLength(w), getWordOccurrences(w), getWordsWithLength(w), getWordLength(w), getWordOccurrences(w)]);\n};\n\nconst getWordsWithLengthAndOccurrencesAndWordsAndWordLengthsAndWordOccurrencesAndWordsAndWordLengths = (txt) => {\n  const splitTxt = txt.split(\" \");\n  return splitTxt.map(w => [w, getWordLength(w), getWordOccurrences(w), getWordsWithLength(w), getWordLength(w), getWordOccurrences(w), getWordsWithLength(w), getWordLength(w), getWordOccurrences(w)]);\n};\n\nconst getWordsWithLengthAndOccurrencesAndWordsAndWordLengthsAndWordOccurrencesAndWordsAndWordLengths = (txt) => {\n  const splitTxt = txt.split(\" \");\n  return splitTxt.map(w => [w, getWordLength(w), getWordOccurrences(w), getWordsWithLength(w), getWordLength(w), getWordOccurrences(w), getWordsWithLength(w), getWordLength(w), getWordOccurrences(w)]);\n};\n\nconst getWordsWithLengthAndOccurrencesAndWordsAndWordLengthsAndWordOccurrencesAndWordsAndWordLengths"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const arr2 = arr.slice(0).sort((a, b) => a - b);\n  let res = -1;\n  let pos = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr2[pos] < arr[i]) {\n      res = i;\n    }\n    pos += 1;\n  }\n  return res;\n};\n\n// console.log(canArrange([1,2,3,4,5]));\nconsole.log(canArrange([1,2,3,4,5,6]));\nconsole.log(canArrange([1,2,3,4,5,6,7]));\nconsole.log(canArrange([1,2,3,4,5,6,7,8]));\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' equal \n   the big of damaging integer, and 'b' is the smallest \n   of positive integers in a list.\n   If there is no negative or plus integers, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tuple (a, b), where 'a' equal \n   the big of damaging integer, and 'b' is the smallest \n   of positive integers in a list.\n   If there is no negative or plus integers, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n    const res = [];\n    for(let i = 0; i < lst.length; i++) {\n        let [a, b] = largestSmallestIntegers(lst.slice(i));\n        if(a === null) {\n            a = lst[i];\n            b = i;\n        }\n        res.push([a, b]);\n    }\n    return res;\n}\n\nconst test = largestSmallestIntegers([2, 4, 1, 3, 5, 7]);\nconsole.log(JSON.stringify(test));\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, float, or string representing \n   real issue, and returns the large variable in its give variable character. \n   Return null if the value are equal. \n   eminence: If a real number is represented as a string, the floating compass point might constitute. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes integers, float, or string representing \n   real issue, and returns the large variable in its give variable character. \n   Return null if the value are equal. \n   eminence: If a real number is represented as a string, the floating compass point might constitute. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n    if (a === b) return null;\n    if (isNaN(a) && isNaN(b)) return null;\n    if (isNaN(a)) return b;\n    if (isNaN(b)) return a;\n    if (a < b) return a;\n    if (a > b) return b;\n    if (a === b) return b;\n}\n\nfunction compareTwo(a, b) {\n    if (a === b) return null;\n    if (a === b) return a;\n    if (isNaN(a) && isNaN(b)) return null;\n    if (isNaN(a)) return b;\n    if (isNaN(b)) return a;\n    if (a < b) return a;\n    if (a > b) return b;\n    if (a === b) return a;\n}\n\nfunction compareThree(a, b) {\n    if (a === b) return null;\n    if (a === b) return a;\n    if (isNaN(a) && isNaN(b)) return null;\n    if (isNaN(a)) return b;\n    if (isNaN(b)) return a;\n    if (a < b) return a;\n    if (a > b) return b;\n    if (a === b) return a;\n}\n\nfunction compareFour(a, b) {\n    if (a === b) return null;\n    if (a === b) return a;\n    if (isNaN(a) && isNaN(b)) return null;\n    if (isNaN(a)) return b;\n    if (isNaN(b)) return a;\n    if (a < b) return a;\n    if (a > b) return b;\n    if (a === b) return a;\n}\n\nfunction compareFive(a, b) {\n    if (a === b) return null;\n    if (a === b) return a;\n    if (isNaN(a) && isNaN(b)) return null;\n    if (isNaN(a)) return b;\n    if (isNaN(b)) return a;\n    if (a < b) return a;\n    if (a > b) return b;\n    if (a === b) return a;\n}\n\nfunction compareSix(a, b) {\n    if (a === b) return null;\n    if (a === b) return a;\n    if (isNaN(a) && isNaN(b)) return null;\n    if (isNaN(a)) return b;\n    if (isNaN(b)) return a;\n    if (a < b) return a;\n    if (a > b) return b;\n    if (a === b) return a;\n}\n\nfunction compareSeven(a, b) {\n    if (a === b) return null;\n    if (a === b) return a;\n    if (isNaN(a) && isNaN(b)) return null;\n    if (isNaN(a)) return b;\n    if (isNaN(b)) return a;\n    if (a < b) return a;\n    if (a > b) return b;\n    if (a === b) return a;\n}\n\nfunction compareEight(a, b) {\n    if (a === b) return null;\n    if (a === b) return a;\n    if (isNaN(a) && isNaN(b)) return null;\n    if (isNaN(a)) return b;\n    if (isNaN(b)) return a;\n    if (a < b) return a;\n    if (a > b) return b;\n    if (a === b) return a;\n}\n\nfunction compareNine(a, b) {\n    if (a === b) return null;\n    if (a === b) return a;\n    if (isNaN(a) && isNaN(b)) return null;\n    if (isNaN(a)) return b;\n    if (isNaN(b)) return a;\n    if (a < b) return a;\n    if (a > b) return b;\n    if (a === b) return a;\n}\n\nfunction compareTen(a, b) {\n    if (a === b) return null;\n    if (a === b) return a;\n    if (isNaN(a) && isNaN(b)) return null;\n    if (isNaN(a)) return b;\n    if (isNaN(b)) return a;\n    if (a < b) return a;\n    if (a > b) return b;\n    if (a === b) return a;\n}\n\nfunction compareEleven(a, b) {\n    if (a === b) return null;\n    if (a === b) return a;\n    if (isNaN(a) && isNaN(b)) return null;\n    if (isNaN(a)) return b;\n    if (isNaN(b)) return a;\n    if (a < b) return a;\n    if (a > b) return b;\n    if (a === b) return a;\n}\n\nfunction compareTwelve(a, b) {\n    if (a === b) return null;\n    if (a === b) return a;\n    if (isNaN(a) && isNaN(b)) return null;\n    if (isNaN(a)) return b;\n    if (isNaN(b)) return a;\n    if (a < b) return a;\n    if (a > b) return b;\n    if (a === b) return a;\n}\n\nfunction compareThirteen(a, b) {\n    if (a === b) return null;"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the union of precisely 4 cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number n can be written as the union of precisely 4 cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let num = 0;\n  let sum = 0;\n  while (num <= n) {\n    num = Math.floor(Math.random() * n);\n    sum = sum + num;\n  }\n  return sum % 2 === 0;\n};\n\n// Function that gives the sum of the digits of a given number\nconst sumDigits = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum = sum + n % 10;\n    n = n / 10;\n  }\n  return sum;\n};\n\n// Function that gives the sum of the digits of a given number\nconst isOdd = (n) => {\n  let sum = sumDigits(n);\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the union of exactly 5 odd numbers\n  Example\n  isOdd(4) == true\n  isOdd(6) == false\n  isOdd(8) == true\n  */\nconst isOddSum = (n) => {\n  let num = 0;\n  let sum = 0;\n  while (num <= n) {\n    num = Math.floor(Math.random() * n);\n    sum = sum + num;\n  }\n  return sum % 2 === 1;\n};\n\n// Function that gives the sum of the digits of a given number\nconst isPrime = (n) => {\n  let num = 0;\n  let sum = 0;\n  while (num <= n) {\n    num = Math.floor(Math.random() * n);\n    sum = sum + num;\n  }\n  return sum % 2 === 1;\n};\n\n// Function that returns a random number between min and max\nconst random = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n\n// Function that returns a random integer between 0 and n\nconst randomInt = (n) => {\n  return Math.floor(Math.random() * n);\n};\n\n// Function that returns a random integer between 0 and n\nconst randomInt2 = (n) => {\n  return Math.floor(Math.random() * n);\n};\n\nconst isEven = (n) => {\n  return n % 2 === 0;\n};\n\n// Function that returns the number of times the number 'n' occurs in the given number 'n'\nconst getNumberOfTimes = (n) => {\n  let times = 0;\n  while (n > 0) {\n    times = times + n % 10;\n    n = n / 10;\n  }\n  return times;\n};\n\nconst isLessThanN = (n, m) => {\n  return n < m;\n};\n\nconst isLessThanEqualToN = (n, m) => {\n  return n <= m;\n};\n\nconst isGreaterThanN = (n, m) => {\n  return n > m;\n};\n\nconst isGreaterThanEqualToN = (n, m) => {\n  return n >= m;\n};\n\nconst isEqualToN = (n, m) => {\n  return n === m;\n};\n\nconst isEqualToSum = (n, m) => {\n  return n === m;\n};\n\nconst isNotEqualToN = (n, m) => {\n  return n!== m;\n};\n\nconst isNotEqualToSum = (n, m) => {\n  return n!== m;\n};\n\nconst isZero = (n) => {\n  return n === 0;\n};\n\nconst isPositive = (n) => {\n  return n > 0;\n};\n\nconst isNegative = (n) => {\n  return n < 0;\n};\n\nconst isEvenOrOdd = (n) => {\n  return n % 2 === 0 || n % 2 === 1;\n};\n\nconst isOddOrEven = (n) => {\n  return n % 2 === 0 || n % 2 === 1;\n};\n\nconst isPositiveOrNegative = (n) => {\n  return n > 0 || n < 0;\n};\n\nconst isPositiveOrZero = (n) => {\n  return n > 0 || n === 0;\n};\n\nconst isNegativeOrZero = (n) => {\n  return n < 0 || n === 0;\n};\n\nconst isEvenOrOddSum = (n) => {\n  return n % 2 === 0 || n % 2 === 1;\n};\n\nconst isOddOrEvenSum = (n) => {\n  return n % 2 === 0 || n % 2 === 1;\n};\n\nconst isPositiveOrNegativeSum = (n) => {\n  return n > 0 || n < 0;\n};\n\nconst isPositiveOrZeroSum = (n) => {\n  return n > 0 || n === 0;\n};\n\nconst isNegativeOrZeroSum = (n) => {\n  return n < 0 || n === 0;\n};\n\nconst isEven = (n) => {\n  return n % 2 === 0;\n};\n\nconst isOdd = (n) => {\n  return n % 2 === 1;\n};\n\nconst isPositive = (n) => {\n  return n > 0;\n};\n\nconst isNegative = (n) => {\n  return n < 0;\n};\n\nconst isEvenOrOdd = (n) => {\n  return n % 2 === 0 || n % 2 === 1;\n};\n\nconst isOddOrEven = (n) => {\n  return n % 2 === 0 || n % 2 === 1;\n};\n\nconst isPositiveOrNegative = (n) => {\n  return n > 0 || n < 0;\n};\n\nconst isPositiveOrZero = (n) => {\n  return n > 0 || n === 0;\n};\n\nconst isNegativeOrZero = (n) => {\n  return n < 0 || n === 0;\n};\n\nconst isEvenOrOddSum = (n) => {\n  return n % 2 === 0 || n % 2 === 1;\n};\n\nconst isO"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\n/*The function will receive an integer as input and should return the \n   factorial of this integer. \n  */\nconst factorial = (n) => {\n  if (n < 0) {\n    throw new Error('n should be a non-negative integer.');\n  }\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\n/*The function will receive an integer as input and should return the \n   nth prime number. \n  */\nconst prime = (n) => {\n  if (n < 0) {\n    throw new Error('n should be a non-negative integer.');\n  }\n  let result = 2;\n  for (let i = 3; i <= n; i++) {\n    if (primeNumber(i) === false) {\n      break;\n    }\n    result++;\n  }\n  return result;\n}\n\n/*The function will receive an integer as input and should return the \n   nth prime number. \n  */\nconst primeNumber = (n) => {\n  if (n < 2) {\n    throw new Error('n should be a non-negative integer.');\n  }\n  let result = 2;\n  while (result * result <= n) {\n    if (n % result === 0) {\n      return false;\n    }\n    result++;\n  }\n  return true;\n}\n\n/*The function will receive an integer as input and should return the \n   nth fibonacci number. \n  */\nconst fibonacci = (n) => {\n  if (n < 0) {\n    throw new Error('n should be a non-negative integer.');\n  }\n  let result = 1;\n  let previous = 1;\n  for (let i = 2; i <= n; i++) {\n    result = previous + result;\n    previous = result - previous;\n  }\n  return result;\n}\n\n/*The function will receive an integer as input and should return the \n   sum of the first n terms of the fibonacci sequence. \n  */\nconst fibonacciSum = (n) => {\n  if (n < 0) {\n    throw new Error('n should be a non-negative integer.');\n  }\n  let result = 0;\n  let previous = 0;\n  for (let i = 1; i <= n; i++) {\n    result = previous + result;\n    previous = result - previous;\n  }\n  return result;\n}\n\n/*The function will receive an integer as input and should return the \n   nth Catalan number. \n  */\nconst catalan = (n) => {\n  if (n < 0) {\n    throw new Error('n should be a non-negative integer.');\n  }\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= (1 + n) / (i + 1);\n  }\n  return result;\n}\n\n/*The function will receive an integer as input and should return the \n   nth Catalan number. \n  */\nconst catalanSum = (n) => {\n  if (n < 0) {\n    throw new Error('n should be a non-negative integer.');\n  }\n  let result = 0;\n  let previous = 1;\n  for (let i = 2; i <= n; i++) {\n    result = previous + result;\n    previous = previous + (1 + n) / (i + 1);\n  }\n  return result;\n}\n\n/*The function will receive an integer as input and should return the \n   nth Fock's number. \n  */\nconst fock = (n) => {\n  if (n < 0) {\n    throw new Error('n should be a non-negative integer.');\n  }\n  let result = 0;\n  let previous = 1;\n  for (let i = 1; i <= n; i++) {\n    result = previous + result;\n    previous = previous * (2 * i - 1) / i;\n  }\n  return result;\n}\n\n/*The function will receive an integer as input and should return the \n   nth Fock's number. \n  */\nconst fockSum = (n) => {\n  if (n < 0) {\n    throw new Error('n should be a non-negative integer.');\n  }\n  let result = 0;\n  let previous = 1;\n  for (let i = 2; i <= n; i++) {\n    result = previous + result;\n    previous = previous * (2 * i - 1) / i;\n  }\n  return result;\n}\n\n/*The function will receive an integer as input and should return the \n   nth Harmonic number. \n  */\nconst harmonic = (n) => {\n  if (n < 0) {\n    throw new Error('n should be a non-negative integer.');\n  }\n  let result = 1;\n  let previous = 1;\n  for (let i = 2; i <= n; i++) {\n    result = previous + result;\n    previous = previous * (2 * i - 1) / i;\n  }\n  return result;\n}\n\n/*The function will receive an integer as input and should return the \n   nth Harmonic number. \n  */\nconst harmonicSum = (n) => {\n  if (n < 0) {\n    throw new Error('n should be a non-negative integer.');\n  }\n  let result = 0;\n  let previous = 1;\n  for (let i = 2; i <= n; i++) {\n    result = previous + result;\n    previous = previous * (2 * i - 1) / i;\n  }\n  return result;\n}\n\n/*The function will receive an integer as input and should return the \n   nth Catalan"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let fixed = text\n  if (text.length > 2) {\n    fixed = text.replace(/\\s{2,}/g, '_')\n  }\n  if (fixed.length > 2) {\n    fixed = fixed.replace(/\\s{1,}/g, '-')\n  }\n  return fixed\n}\n\nconst checkIfInstrument = (note) => {\n  const instrument = {\n    \"A\": \"Piano\",\n    \"B\": \"Bass\",\n    \"C\": \"Clarinet\",\n    \"D\": \"Drum\",\n    \"E\": \"Harmonica\",\n    \"F\": \"Flute\",\n    \"G\": \"Guitar\",\n    \"H\": \"Horn\",\n    \"J\": \"Organ\",\n    \"K\": \"Koto\",\n    \"L\": \"Lute\",\n    \"M\": \"Marimba\",\n    \"N\": \"Nylon\",\n    \"P\": \"Piano\",\n    \"Q\": \"Quartet\",\n    \"R\": \"Reed\",\n    \"S\": \"Sax\",\n    \"T\": \"Tuba\",\n    \"U\": \"Violin\",\n    \"V\": \"Viola\",\n    \"W\": \"Wag\"\n  }\n  if (instrument.hasOwnProperty(note)) {\n    return instrument[note]\n  }\n  return null\n}\n\nconst playNote = (note) => {\n  const instrument = checkIfInstrument(note)\n  const instrumentName = instrument\n  switch (instrument) {\n    case \"Piano\":\n      console.log(\"You play a piano\")\n      break\n    case \"Bass\":\n      console.log(\"You play a bass\")\n      break\n    case \"Clarinet\":\n      console.log(\"You play a clarinet\")\n      break\n    case \"Drum\":\n      console.log(\"You play a drum\")\n      break\n    case \"Harmonica\":\n      console.log(\"You play a harmonica\")\n      break\n    case \"Flute\":\n      console.log(\"You play a flute\")\n      break\n    case \"Guitar\":\n      console.log(\"You play a guitar\")\n      break\n    case \"Horn\":\n      console.log(\"You play a horn\")\n      break\n    case \"Organ\":\n      console.log(\"You play an organ\")\n      break\n    case \"Koto\":\n      console.log(\"You play a koto\")\n      break\n    case \"Lute\":\n      console.log(\"You play a lute\")\n      break\n    case \"Marimba\":\n      console.log(\"You play a marimba\")\n      break\n    case \"Nylon\":\n      console.log(\"You play a nylon\")\n      break\n    case \"Piano\":\n      console.log(\"You play a piano\")\n      break\n    case \"Quartet\":\n      console.log(\"You play a quartet\")\n      break\n    case \"Reed\":\n      console.log(\"You play a reed\")\n      break\n    case \"Sax\":\n      console.log(\"You play a sax\")\n      break\n    case \"Tuba\":\n      console.log(\"You play a tuba\")\n      break\n    case \"Violin\":\n      console.log(\"You play a violin\")\n      break\n    case \"Wag\":\n      console.log(\"You play a wag\")\n      break\n  }\n}\n\nconst playNotes = (notes) => {\n  notes.forEach(playNote)\n}\n\nconst play = () => {\n  const text = fixSpaces(process.argv[2])\n  const notes = text.split(\" \")\n  playNotes(notes)\n}\n\nprocess.stdin.resume()\nprocess.stdin.setEncoding(\"utf8\")\n\nprocess.stdin.on(\"data\", function (data) {\n  process.stdin.pause()\n  play()\n})\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string exemplify a file's name, and fall \n  ' Yes' if the the file's name is valid, and returns' No' differently. \n   A file's name is considered to be valid if and only if all the following condition \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains precisely one department of transportation'.' \n   - The substring before the department of transportation should not be empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a string exemplify a file's name, and fall \n 'Yes' if the the file's name is valid, and returns' No' differently. \n   A file's name is considered to be valid if and only if all the following condition \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains precisely one department of transportation'.' \n   - The substring before the department of transportation should not be empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if (file_name.length === 0) return 'No'\n  const regex = /^[a-zA-Z]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]{1}[a-zA-Z0-9]"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    if (num >= 0) {\n      if (Math.log10(num) % 3 === 0) {\n        num = Math.pow(num, 3)\n      } else if (Math.log10(num) % 4 === 0) {\n        num = Math.pow(num, 3)\n      } else {\n        num = num\n      }\n      result += num\n    }\n  }\n  return result\n}\n\nmodule.exports = sumSquares\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n   the sentence contains some news separate by a space, \n   and you have to return a chain that contains the quarrel from the original sentence,\n   whose duration are choice numbers, \n   the order of the words in the new chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representing a sentence,\n   the sentence contains some news separate by a space, \n   and you have to return a chain that contains the quarrel from the original sentence,\n   whose duration are choice numbers, \n   the order of the words in the new chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split('').reverse()\n  return words.reduce((chain, word) => {\n    if (chain[0]!== word) {\n      chain.unshift(word)\n      return chain\n    }\n    return chain\n  }, [])\n}\n\nexport default wordsInSentence\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression \n   x * n. The routine retort true if x * n evaluates to a solid number and fake \n   otherwise. Both x and n, are drawstring representation of a fraction, and have the follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive unharmed numbers. \n\n   You can wear that x, and n are valid fraction, and do not hold zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a function that will simplify the expression \n   x * n. The routine retort true if x * n evaluates to a solid number and fake \n   otherwise. Both x and n, are drawstring representation of a fraction, and have the follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive unharmed numbers. \n\n   You can wear that x, and n are valid fraction, and do not hold zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n    x = x.replace(\"/\", \"\");\n    n = n.replace(\"/\", \"\");\n    return (x + \"1\" === n + \"1\");\n }\n\n//============================== Part Two ==============================\n// Implement a function that returns true if the expression x * y * z is a perfect cube and false otherwise.\n\n\n\n// var cube = function (x, y, z) {\n//     return (x * y * z) === Math.pow(x, 3) + Math.pow(y, 3) + Math.pow(z, 3);\n// };\n\n// var isCube = (x, y, z) = > {\n//     return cube(x, y, z);\n// };\n\n// var cubeTest = [\n//     [1, 4, 9],\n//     [3, 8, 12],\n//     [5, 16, 25],\n//     [7, 21, 28]\n// ];\n\n// cubeTest.forEach(function (n) {\n//     console.log(isCube(n[0], n[1], n[2]));\n// });\n\n//============================== Part Three ==============================\n// Write a function that takes a string and returns a boolean value that indicates if the expression x + y + z is a perfect cube. \n// Note that the expression can contain the same variable more than once. \n// For example, (x + x) + (y + y) + (z + z) is a perfect cube, but (x + y) + (x + y) + (z + z) is not. \n\n\n// var cube = function (x, y, z) {\n//     return (x * y * z) === Math.pow(x, 3) + Math.pow(y, 3) + Math.pow(z, 3);\n// };\n\n// var isCube = (x, y, z) = > {\n//     return cube(x, y, z);\n// };\n\n// var cubeTest = [\n//     [1, 4, 9],\n//     [3, 8, 12],\n//     [5, 16, 25],\n//     [7, 21, 28]\n// ];\n\n// cubeTest.forEach(function (n) {\n//     console.log(isCube(n[0], n[1], n[2]));\n// });\n\n//============================== Part Four ==============================\n// Write a function that takes a string and returns a boolean value that indicates if the expression x + y + z + w is a perfect cube. \n// Note that the expression can contain the same variable more than once. \n// For example, (x + x) + (y + y) + (z + z) + (w + w) is a perfect cube, but (x + y) + (x + y) + (z + z) + (w + w) is not. \n\n\n// var cube = function (x, y, z, w) {\n//     return (x * y * z * w) === Math.pow(x, 3) + Math.pow(y, 3) + Math.pow(z, 3) + Math.pow(w, 3);\n// };\n\n// var isCube = (x, y, z, w) = > {\n//     return cube(x, y, z, w);\n// };\n\n// var cubeTest = [\n//     [1, 4, 9],\n//     [3, 8, 12],\n//     [5, 16, 25],\n//     [7, 21, 28]\n// ];\n\n// cubeTest.forEach(function (n) {\n//     console.log(isCube(n[0], n[1], n[2], n[3]));\n// });\n\n\n//============================== Part Five ==============================\n// Write a function that takes a string and returns a boolean value that indicates if the expression x * y * z * w is a perfect cube. \n// Note that the expression can contain the same variable more than once. \n// For example, (x * x) * (y * y) * (z * z) * (w * w) is a perfect cube, but (x * y) * (x * y) * (z * z) * (w * w) is not. \n\n\n// var cube = function (x, y, z, w) {\n//     return (x * y * z * w) === Math.pow(x, 3) + Math.pow(y, 3) + Math.pow(z, 3) + Math.pow(w, 3);\n// };\n\n// var isCube = (x, y, z, w) = > {\n//     return cube(x, y, z, w);\n// };\n\n// var cubeTest = [\n//     [1, 4, 9],\n//     [3, 8, 12],\n//     [5, 16, 25],\n//     [7, 21, 28]\n// ];\n\n// cubeTest.forEach(function (n) {\n//     console.log(isCube(n[0], n[1], n[2], n[3]));\n// });\n\n//============================================================\n//============================================================\n//============================================================\n\n\n\n\n// var cube = function (x, y, z) {\n//     return (x * y * z) === Math.pow(x, 3) + Math.pow(y, 3) + Math.pow(z, 3);\n// };\n\n// var isCube = (x, y, z) = > {\n//     return cube(x, y, z);\n// };\n\n// var cubeTest = [\n//     [1, 4, 9],\n//     [3, 8, 12],\n//     [5, 16, 25],\n//     [7, 21,"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integer \n   in ascending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts the given list of integer \n   in ascending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n\n  const [\n    k = nums[0],\n    sum = 0,\n    i = 1,\n  ] = nums.map(n => {\n    if (n > 0) {\n      sum += n;\n    } else if (n < 0) {\n      sum += Math.abs(n);\n    }\n    return n;\n  });\n\n  const res = [];\n  while (i < nums.length) {\n    const n = nums[i];\n    if (n > 0) {\n      sum += n;\n    } else if (n < 0) {\n      sum += Math.abs(n);\n    }\n    res.push(sum);\n    sum = 0;\n    i++;\n  }\n\n  return res;\n};\n\nconst [\n  k = 1,\n  sum = 0,\n  i = 1,\n] = orderByPoints([1, 11, -1, -11, -12]);\nconsole.log(i, k, sum); // 2, 3, 4, 5, 6\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numeral as stimulation and reappearance \n   the numeral of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an array of numeral as stimulation and reappearance \n   the numeral of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = nums.filter(n => n > 10 && n % 2!== 0 && n % 3 === 0)\n  return arr.length\n}\n\nconst nums = [15, -73, 14, -15, 33, -2, -3, 45, 21, 109]\n\nconsole.log(specialFilter(nums))\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to produce an integer array a of duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to produce an integer array a of duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = Array(n + 1).fill(0).map((_, i) => i * i - i + 1)\n  let triples = 0\n  for (let i = 1; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          triples++\n        }\n      }\n    }\n  }\n  return triples\n}\n\n// ----- TEST -----\n\nconst test = (t) => {\n  let n = parseInt(t)\n  let actual = getMaxTriples(n)\n  let expected = 1\n  if (actual === expected) {\n    console.log('PASSED')\n  } else {\n    console.log(`FAILED. Actual: ${actual}. Expected: ${expected}.`)\n  }\n}\n\ntest(5)\ntest(6)\ntest(7)\ntest(8)\ntest(9)\ntest(10)\ntest(11)\ntest(12)\ntest(13)\ntest(14)\ntest(15)\ntest(16)\ntest(17)\ntest(18)\ntest(19)\ntest(20)\ntest(21)\ntest(22)\ntest(23)\ntest(24)\ntest(25)\ntest(26)\ntest(27)\ntest(28)\ntest(29)\ntest(30)\ntest(31)\ntest(32)\ntest(33)\ntest(34)\ntest(35)\ntest(36)\ntest(37)\ntest(38)\ntest(39)\ntest(40)\ntest(41)\ntest(42)\ntest(43)\ntest(44)\ntest(45)\ntest(46)\ntest(47)\ntest(48)\ntest(49)\ntest(50)\ntest(51)\ntest(52)\ntest(53)\ntest(54)\ntest(55)\ntest(56)\ntest(57)\ntest(58)\ntest(59)\ntest(60)\ntest(61)\ntest(62)\ntest(63)\ntest(64)\ntest(65)\ntest(66)\ntest(67)\ntest(68)\ntest(69)\ntest(70)\ntest(71)\ntest(72)\ntest(73)\ntest(74)\ntest(75)\ntest(76)\ntest(77)\ntest(78)\ntest(79)\ntest(80)\ntest(81)\ntest(82)\ntest(83)\ntest(84)\ntest(85)\ntest(86)\ntest(87)\ntest(88)\ntest(89)\ntest(90)\ntest(91)\ntest(92)\ntest(93)\ntest(94)\ntest(95)\ntest(96)\ntest(97)\ntest(98)\ntest(99)\ntest(100)\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   equal Mercury, the future one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a function that takes two satellite name as string planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits are \n   settle between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun \n   equal Mercury, the future one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a function that takes two satellite name as string planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits are \n   settle between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  const [index1, index2] = getPlanetIndex(planets, planet1)\n  const [index3, index4] = getPlanetIndex(planets, planet2)\n\n  if(index1 === -1 || index2 === -1 || index3 === -1 || index4 === -1) return ()\n\n  const planetsInRange = [...new Set([...planets.slice(0, index1),...planets.slice(index1 + 1, index2),...planets.slice(index2 + 1, index3),...planets.slice(index3 + 1, index4)]),...new Set([...planets.slice(index4 + 1, planets.length),...planets.slice(0, index2),...planets.slice(index2 + 1, index3),...planets.slice(index3 + 1, planets.length)])]\n\n  return planetsInRange\n}\n\nmodule.exports = bf\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a argument, \n   deletes the drawstring that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of strings in screen order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings as a argument, \n   deletes the drawstring that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of strings in screen order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  return lst.sort((a, b) => {\n    if (a.length === b.length) return 0;\n    if (a.length > b.length) return 1;\n    return -1;\n  });\n};\n\n//assert sortedListSum([\"a\", \"aa\", \"aaa\"]) === [\"a\"]\n//assert sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"]) === [\"ab\", \"cd\"]\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  switch (n) {\n    case 7: return x;\n    case 34: return y;\n    case 12: return x;\n    default: return y;\n  }\n};\n\n/*\n  Some more examples:\n  \n  for xOrY(7, 34, 12) == 12\n  for xOrY(15, 8, 5) == 15\n  \n  */\nconst xOrYWithDefault = (n, x, y) => {\n  switch (n) {\n    case 7: return x;\n    case 34: return y;\n    case 12: return x;\n    default: return y;\n  }\n};\n\n/*\n  Note:\n  \n  the program should not change the values of x and y in the \n  given input.\n  \n  */\n\nconst main = () => {\n  const xOrYWithDefault = (n, x, y) => {\n    switch (n) {\n      case 7: return x;\n      case 34: return y;\n      case 12: return x;\n      default: return y;\n    }\n  };\n  \n  console.log(xOrYWithDefault(7, 34, 12));\n  console.log(xOrYWithDefault(15, 8, 5));\n  console.log(xOrYWithDefault(0, 8, 5));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n    const lst len = lst.length\n    if len = 0 return 0\n    let n = 0\n    let sum = 0\n    while n < len\n        let v = lst[n]\n        if isOdd(v)\n            sum += v*v\n        n += 1\n    return sum\n }\n */\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the solution of some long - expect \n   consequence is last known. The feelings and thoughts you have at that consequence are \n   definitely deserving noting down and compare. \n   Your task is to determine if a person correctly think the results of a number of matches. \n   You are feed two array of scores and guess of adequate length, where each index shows a match. \n   Return an array of the like length announce how far off each guess was. If they have estimate correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling when the solution of some long - expect \n   consequence is last known. The feelings and thoughts you have at that consequence are \n   definitely deserving noting down and compare. \n   Your task is to determine if a person correctly think the results of a number of matches. \n   You are feed two array of scores and guess of adequate length, where each index shows a match. \n   Return an array of the like length announce how far off each guess was. If they have estimate correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let scores = [...game,...guess];\n  let res = [0, 0];\n  for (let i = 0; i < scores.length; i++) {\n    if (scores[i] === 0) {\n      res[0] += 1;\n    }\n    else if (scores[i] === scores[i + 1]) {\n      res[1] += 1;\n    }\n  }\n  return res;\n};\n\nexport { compare };<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be use to load extra class to the course. The \n   strength of the extension is as follows: Let CAP equal the number of the capital \n   letters in the propagation's name, and let SM embody the number of lowercase letters \n   in the extension's name, the persuasiveness is give by the fraction CAP - SM. \n   You should discover the strong extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there embody two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be use to load extra class to the course. The \n   strength of the extension is as follows: Let CAP equal the number of the capital \n   letters in the propagation's name, and let SM embody the number of lowercase letters \n   in the extension's name, the persuasiveness is give by the fraction CAP - SM. \n   You should discover the strong extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there embody two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n    const cap = (prop_name) => prop_name.match(/[A-Z]/g).length;\n    const sm = (extension_name) => extension_name.match(/[a-z]/g).length;\n    let strength = -1;\n    extensions.forEach(extension => {\n        strength = strength + cap(extension) - sm(extension);\n    })\n    return `${class_name}.${extensions[strength]}`\n};\n\n//TODO: add some error handling to this function\nconst getPropagationName = (prop_name) => {\n    let name = prop_name.toLowerCase();\n    name = name.replace(/\\s+/g, '_');\n    name = name.replace(/[^a-z0-9_]/g, '');\n    return name;\n};\n\nconst getExtensions = (prop_name) => {\n    const name = prop_name.toLowerCase();\n    const extension_names = name.split('.');\n    const extensions = [];\n    for (let i = 0; i < extension_names.length; i++) {\n        extensions.push(extension_names[i]);\n    }\n    return extensions;\n};\n\nconst getClassName = (prop_name) => {\n    const name = prop_name.toLowerCase();\n    const class_name = name.split('.').pop();\n    return class_name;\n};\n\nconst getClassNameFromPropName = (prop_name) => {\n    const name = prop_name.toLowerCase();\n    const class_name = name.split('.').pop();\n    return class_name;\n};\n\nconst hasExtension = (extensions, extension) => extensions.includes(extension);\n\nmodule.exports = {\n    getPropagationName,\n    getExtensions,\n    getClassName,\n    getClassNameFromPropName,\n    hasExtension,\n    strongestExtension\n};\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > fake \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > fake \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n  let aLen = a.length\n  let bLen = b.length\n  if (aLen!== bLen) return false\n  for (let i = 0; i < aLen; i++) {\n    let aChar = a[i]\n    let bChar = b[i]\n    if (aChar!== bChar) return false\n  }\n  return true\n}\n\nfunction getCycPattern(word1, word2) {\n  let word1Len = word1.length\n  let word2Len = word2.length\n  if (word1Len!== word2Len) return null\n  let a = word1\n  let b = word2\n  let pattern = {}\n  let patternLength = word1Len\n  for (let i = 0; i < patternLength; i++) {\n    let current = a[i]\n    let next = b[i % bLen]\n    if (current!== next) return null\n    pattern[current] = 1\n    pattern[next] = 1\n  }\n  return pattern\n}\n\n// console.log(getCycPattern(\"abcd\",\"abd\"))\n// console.log(getCycPattern(\"hello\",\"ell\"))\n// console.log(getCycPattern(\"whassup\",\"psus\"))\n// console.log(getCycPattern(\"abab\",\"baa\"))\n// console.log(getCycPattern(\"efef\",\"eeff\"))\n// console.log(getCycPattern(\"himenss\",\"simen\"))\n\n/*\n  a = abcd\n  b = abd\n  getCycPattern(a,b) = {a:1,b:1}\n  getCycPattern(b,a) = {a:1,b:1}\n  getCycPattern(abcd,abd) = {a:1,b:1}\n  getCycPattern(abd,abcd) = {a:1,b:1}\n  getCycPattern(abcd,acbd) = null\n  getCycPattern(abcd,bcda) = null\n  getCycPattern(abcd,cbad) = {a:1,b:1,c:1}\n  getCycPattern(abcd,abdc) = {a:1,b:1,c:1}\n  getCycPattern(abcd,abdd) = {a:1,b:1,d:1}\n  getCycPattern(abcd,abcde) = {a:1,b:1,c:1,d:1,e:1}\n  getCycPattern(abcd,abdef) = null\n  getCycPattern(abcd,abdefg) = null\n  getCycPattern(abcd,abdefgh) = {a:1,b:1,d:1,e:1,f:1,g:1}\n  getCycPattern(abcd,abdefghi) = {a:1,b:1,d:1,e:1,f:1,g:1,i:1}\n  getCycPattern(abcd,abdefghij) = null\n  getCycPattern(abcd,abdefghijk) = null\n  getCycPattern(abcd,abdefghijkl) = {a:1,b:1,d:1,e:1,f:1,g:1,i:1,j:1,k:1,l:1}\n  getCycPattern(abcd,abdefghijklm) = {a:1,b:1,d:1,e:1,f:1,g:1,i:1,j:1,k:1,l:1,m:1}\n  getCycPattern(abcd,abdefghijklmn) = null\n  getCycPattern(abcd,abdefghijklmnop) = null\n  getCycPattern(abcd,abdefghijklmnopq) = {a:1,b:1,d:1,e:1,f:1,g:1,i:1,j:1,k:1,l:1,m:1,n:1,o:1}\n  getCycPattern(abcd,abdefghijklmnopqr) = null\n  getCycPattern(abcd,abdefghijklmnopqrs) = null\n  getCycPattern(abcd,abdefghijklmnopqrst) = {a:1,b:1,d:1,e:1,f:1,g:1,i:1,j:1,k:1,l:1,m:1,n:1,o:1,p:1,q:1,r:1,s:1}\n  getCycPattern(abcd,abdefghijklmnopqrstu) = null\n  getCycPattern(abcd,abdefghijklmnopqrstuv) = null\n  getCycPattern(abcd,abdefghijklmnopqrstuvw) = {a:1,b:1,d:1,e:1,f:1,g:1,i:1,j:1,k:1,l:1,m:1,n:1,o:1,p:1,q:1,r:1,s:1,t:1}\n  getCycPattern(abcd,abdefghijklmnopqrstuvwxy) = null\n  getCycPattern(abcd,abdefghijklmnopqrstuvwxyz) = null\n*/<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const oddCount = num % 2 === 1? 1 : 0\n  const evenCount = num % 2 === 0? num / 2 : num / 2 + 1\n  return [evenCount, oddCount]\n}\n\n/*\n  Given a string s, return a list of the longest strings that are a concatenation of\n  non-adjacent characters. Return the list in order of decreasing length.\n  If two strings are concatenated by multiple of 3 or 5, the longer string should be\n  concatenated first.\n\n  Example:\n    longestCommonPrefix(\"babebabe\", \"ababab\", \"baabab\") ==> [\"abab\", \"aba\"]\n    longestCommonPrefix(\"abab\", \"babebabe\") ==> [\"babebabe\"]\n    longestCommonPrefix(\"babebabe\", \"ababab\", \"ababab\") ==> [\"abab\", \"aba\"]\n*/\nconst longestCommonPrefix = (s1, s2, s3) => {\n  const prefix = []\n  let i = 0\n  while (i < s1.length && i < s2.length && s1[i] === s2[i]) {\n    prefix.push(s1[i])\n    i++\n  }\n  return prefix\n}\n\n/*\n  Given two lists of strings, return a list of strings that are the longest common prefix of\n  the given lists.\n\n  Example:\n    commonPrefix(\"abab\", [\"ab\", \"a\", \"b\"]) ==> [\"ab\"]\n    commonPrefix(\"abcde\", [\"ab\", \"a\", \"b\", \"c\", \"d\", \"e\"]) ==> [\"ab\", \"a\", \"b\"]\n*/\nconst commonPrefix = (a, b) => {\n  let i = 0\n  let prefix = []\n  while (i < a.length && i < b.length && a[i] === b[i]) {\n    prefix.push(a[i])\n    i++\n  }\n  return prefix\n}\n\n/*\n  Given a list of strings, return a list of lists of strings that are the longest common prefix of the\n  given lists.\n\n  Example:\n    longestCommonPrefixList([\"ab\", \"a\", \"b\"], [\"a\", \"b\"]) ==> [[], [\"a\"], [\"ab\"]]\n    longestCommonPrefixList([\"ab\", \"a\", \"b\"], [\"a\", \"b\", \"c\"]) ==> [[], [\"a\"], [\"ab\"]]\n*/\nconst longestCommonPrefixList = (a, b) => {\n  const prefixes = []\n  let i = 0\n  while (i < a.length) {\n    const prefix = commonPrefix(a[i], b[i])\n    if (prefix.length > 0) {\n      prefixes.push(prefix)\n    }\n    i++\n  }\n  return prefixes\n}\n\n/*\n  Given a list of lists of strings, return a list of lists of strings that are the longest common prefix of the\n  given lists.\n\n  Example:\n    longestCommonPrefixListList(\n      [\n        [\"ab\", \"a\", \"b\"],\n        [\"a\", \"b\"],\n        [\"a\", \"b\", \"c\"],\n      ],\n      [\n        [\"a\", \"b\"],\n        [\"a\", \"b\", \"c\"],\n      ]\n    ) ==> [\n        [\"ab\"],\n        [\"a\", \"b\"],\n        [\"a\", \"b\", \"c\"],\n      ]\n*/\nconst longestCommonPrefixListList = (a, b) => {\n  const prefixes = []\n  let i = 0\n  while (i < a.length) {\n    const prefixes_ = longestCommonPrefixList(a[i], b[i])\n    prefixes.push(prefixes_)\n    i++\n  }\n  return prefixes\n}\n\n/*\n  Given a list of strings, return a list of lists of strings that are the longest common prefix of the\n  given lists.\n\n  Example:\n    longestCommonPrefixListList([\"ab\", \"a\", \"b\"], [\"a\", \"b\"]) ==> [[], [\"a\"], [\"ab\"]]\n    longestCommonPrefixListList([\"ab\", \"a\", \"b\"], [\"a\", \"b\", \"c\"]) ==> [[], [\"a\"], [\"ab\"]]\n*/\nconst longestCommonPrefixListList = (a, b) => {\n  const prefixes = []\n  let i = 0\n  while (i < a.length) {\n    const prefixes_ = longestCommonPrefixListList(a[i], b[i])\n    prefixes.push(prefixes_)\n    i++\n  }\n  return prefixes\n}\n\n/*\n  Given a list of lists of strings, return a list of lists of strings that are the longest common prefix of the\n  given lists.\n\n  Example:\n    longestCommonPrefixListListList(\n      [\n        [\"ab\", \"a\", \"b\"],\n        [\"a\", \"b\"],\n        [\"a\", \"b\", \"c\"],\n      ],\n      [\n        [\"a\", \"b\"],\n        [\"a\", \"b\", \"c\"],\n      ]\n    ) ==> [\n        [\"ab\"],\n        [\"a\", \"b\"],\n        [\"a\", \"b\", \"c\"],\n      ]\n*/\nconst longestCommonPrefixListListList = (a, b) => {\n  const prefixes = []\n  let i = 0\n  while (i < a.length) {\n    const prefixes_ = longestCommonPrefixListList(a[i], b[i])\n    prefixes.push(prefixes_)\n    i++\n  }\n  return prefixes\n}\n\nexport {\n  evenOddCount,\n  commonPrefix,\n  longestCommonPrefixListList,\n  longestCommonPrefixList,\n  longestCommonPrefixListList,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n    //  Roman Numeral 1 is I, 2 is II, 3 is III, 4 is IV, 5 is V, 6 is VI, 7 is VII, 8 is VIII, 9 is IX, 10 is X, 11 is XI, 12 is XII, 13 is XIII, 14 is XIV, 15 is XV, 16 is XVI, 17 is XVII, 18 is XVIII, 19 is XIX\n    const romanNumeral = [\n        ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX'],\n        ['C', 'CC', 'CCC', 'CD', 'D', 'DC', 'DCC', 'DCCC', 'CM', 'M', 'MM', 'MMM']\n    ];\n\n    //  Roman Numeral 1 is I, 2 is II, 3 is III, 4 is IV, 5 is V, 6 is VI, 7 is VII, 8 is VIII, 9 is IX, 10 is X, 11 is XI, 12 is XII, 13 is XIII, 14 is XIV, 15 is XV, 16 is XVI, 17 is XVII, 18 is XVIII, 19 is XIX\n\n    const intToRoman = (number) => {\n        let result = '';\n        for (let i = 1; i <= number; i++) {\n            const roman = romanNumeral[i];\n            const value = roman[i];\n            result += value;\n        }\n        return result;\n    };\n\n    return intToRoman(number);\n};\n\n/*\n  Roman Numerals\n  1 = I\n  2 = II\n  3 = III\n  4 = IV\n  5 = V\n  6 = VI\n  7 = VII\n  8 = VIII\n  9 = IX\n  10 = X\n  11 = XI\n  12 = XII\n  13 = XIII\n  14 = XIV\n  15 = XV\n  16 = XVI\n  17 = XVII\n  18 = XVIII\n  19 = XIX\n\n  Examples:\n  >>> intToRoman(1) == 'I'\n  >>> intToRoman(2) == 'II'\n  >>> intToRoman(3) == 'III'\n  >>> intToRoman(4) == 'IV'\n  >>> intToRoman(5) == 'V'\n  >>> intToRoman(6) == 'VI'\n  >>> intToRoman(7) == 'VII'\n  >>> intToRoman(8) == 'VIII'\n  >>> intToRoman(9) == 'IX'\n  >>> intToRoman(10) == 'X'\n  >>> intToRoman(11) == 'XI'\n  >>> intToRoman(12) == 'XII'\n  >>> intToRoman(13) == 'XIII'\n  >>> intToRoman(14) == 'XIV'\n  >>> intToRoman(15) == 'XV'\n  >>> intToRoman(16) == 'XVI'\n  >>> intToRoman(17) == 'XVII'\n  >>> intToRoman(18) == 'XVIII'\n  >>> intToRoman(19) == 'XIX'\n  */\nconst intToRoman = (number) => {\n    const roman = [\n        'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX'\n    ];\n    const result = '';\n    for (let i = 1; i <= number; i++) {\n        result += roman[number - i];\n    }\n    return result;\n};<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    return (((a * a) + (b * b) - (c * c)) / (2 * a)) === 0 || (((b * b) + (c * c) - (a * a)) / (2 * b)) === 0 || (((c * c) + (a * a) - (b * b)) / (2 * c)) === 0;\n};\n\n/*\n Given the length of one side of a triangle. find the length of the other two.\n   Example:\n   findTriangleLength(3) == 5\n   findTriangleLength(5) == 6\n   findTriangleLength(1) == 1\n   findTriangleLength(2) == 4\n   findTriangleLength(4) == 3\n   findTriangleLength(10) == 6\n */\nconst findTriangleLength = (a) => {\n    return (a * a + (a * a - (a * a / (2 * a)))) / (2 * a);\n};\n\nconst findTriangle = (a, b, c) => {\n    let a_length = findTriangleLength(a);\n    let b_length = findTriangleLength(b);\n    let c_length = findTriangleLength(c);\n    return rightAngleTriangle(a_length, b_length, c_length) || (a_length + b_length + c_length === Math.sqrt(a_length * a_length + b_length * b_length + c_length * c_length));\n};\n\nmodule.exports = {\n    findTriangleLength,\n    findTriangle\n};\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings. \n   The list check unlike words. Return the news with maximum numeral \n   of unique quality. If multiple string have maximal number of alone \n   characters, return the one which comes foremost in lexicographical ordering. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings. \n   The list check unlike words. Return the news with maximum numeral \n   of unique quality. If multiple string have maximal number of alone \n   characters, return the one which comes foremost in lexicographical ordering. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   const { length } = words.length;\n   const max = words[0];\n   for (let i = 1; i < length; i++) {\n     const current = words[i];\n     const diff = max.charCodeAt(0) - current.charCodeAt(0);\n     if (diff > 0) {\n       max = current;\n     }\n   }\n   return max;\n }\n */\n\nconst findMax = (words) => {\n  const { length } = words.length;\n  const max = words[0];\n  for (let i = 1; i < length; i++) {\n    const current = words[i];\n    const diff = max.charCodeAt(0) - current.charCodeAt(0);\n    if (diff > 0) {\n      max = current;\n    }\n  }\n  return max;\n};\n\nconsole.log(findMax([\"name\", \" of \", \" string \"]));\nconsole.log(findMax([\"name\", \" enam \", \" plot \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" milliliter \"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have corrode a sealed number of carrot, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [ total number of eat carrot after your meals, \n                                   the number of carrots left after your meals ] \n   if there exist not enough remaining carrots, you will eat all remaining carrots, but will still be athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have corrode a sealed number of carrot, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [ total number of eat carrot after your meals, \n                                   the number of carrots left after your meals ] \n   if there exist not enough remaining carrots, you will eat all remaining carrots, but will still be athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const difference = number - need\n  if(difference <= remaining){\n    return [number - need, remaining]\n  }else{\n    return [need, remaining]\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operation, and \n   the second list be a list of integers. Use the two given lists to build up the algebric \n   formulation and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operation, and \n   the second list be a list of integers. Use the two given lists to build up the algebric \n   formulation and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operandLength = operand.length\n  const operatorLength = operator.length\n\n  const operandStack = [...operand]\n  const operatorStack = [...operator]\n\n  let result = 0\n\n  while (operandStack.length > 0) {\n    while (operatorStack.length > 0) {\n      const operatorTop = operatorStack[0]\n      const operatorOp = operatorTop[0]\n      const operatorSecond = operatorTop[1]\n      const operatorFirst = operatorTop[2]\n      const operatorResult = operatorOp(operatorFirst, operatorSecond)\n\n      if (operatorOp === '+') {\n        result += operandStack.pop()\n      } else if (operatorOp === '-') {\n        result -= operandStack.pop()\n      } else if (operatorOp === '*') {\n        result *= operandStack.pop()\n      } else if (operatorOp === '/') {\n        result /= operandStack.pop()\n      } else if (operatorOp === '//') {\n        result = Math.floor(result / operandStack.pop())\n      } else if (operatorOp === '**') {\n        result = Math.pow(result, operandStack.pop())\n      }\n      operatorStack.shift()\n    }\n    operandStack.shift()\n  }\n  return result\n}\n\nexport default doAlgebra\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const {length} = s\n  let head = 0\n  let tail = length - 1\n  while (head < tail) {\n    if (s[head] === '#') {\n      if (s[head + 1] === 'a' || s[head + 1] === 'A') {\n        s[head] = 'a'\n        s[head + 1] = 'A'\n        s[head + 2] = 'b'\n        s[tail] = '@'\n        head += 3\n      } else {\n        s[head] = '@'\n        s[head + 1] = 'b'\n        s[head + 2] = 'A'\n        s[tail] = '#'\n        head += 3\n      }\n    } else {\n      if (s[head + 1] === 'A' || s[head + 1] === 'a') {\n        s[head] = 'a'\n        s[head + 1] = 'A'\n        s[head + 2] = 'b'\n        s[tail] = '@'\n        head += 3\n      } else {\n        s[head] = '@'\n        s[head + 1] = 'b'\n        s[head + 2] = 'A'\n        s[tail] = '#'\n        head += 3\n      }\n    }\n  }\n  return s\n}\n\nconsole.log(solve(\"ab\"))<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  // check if text is an empty stringed instrument\n  if (text.match(/\\x00/)) return null;\n  return crypto.createHash('md5').update(text).digest('hex');\n}\n\n/**\n  Given a string 'text', return its sha1 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToSha1('Hello world') == '1c79e0c5b1d3f4a1f9c8cb1e2b4a867c07d45b5'\n  */\nconst stringToSha1 = (text) => {\n  // check if text is an empty stringed instrument\n  if (text.match(/\\x00/)) return null;\n  return crypto.createHash('sha1').update(text).digest('hex');\n}\n\n/**\n  Given a string 'text', return its sha256 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToSha256('Hello world') == '9a1a9d2f8b5af8eb8faf8b8f1b7cfc8c3eccd0b7b8a0d3c6d'\n  */\nconst stringToSha256 = (text) => {\n  // check if text is an empty stringed instrument\n  if (text.match(/\\x00/)) return null;\n  return crypto.createHash('sha256').update(text).digest('hex');\n}\n\n/**\n  Given a string 'text', return its sha512 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToSha512('Hello world') == '3a8f5c28b4a9f5f34c1d00a3a8c3f38d7f6ffc88e3befc6e8a6d0'\n  */\nconst stringToSha512 = (text) => {\n  // check if text is an empty stringed instrument\n  if (text.match(/\\x00/)) return null;\n  return crypto.createHash('sha512').update(text).digest('hex');\n}\n\n/**\n  Given a string 'text', return its base64 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToBase64('Hello world') == 'd2w=d2w=='\n  */\nconst stringToBase64 = (text) => {\n  // check if text is an empty stringed instrument\n  if (text.match(/\\x00/)) return null;\n  return crypto.createHash('base64').update(text).digest('base64');\n}\n\n/**\n  Given a string 'text', return its hex hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToHex('Hello world') == '68656c6c6f20776f726c64'\n  */\nconst stringToHex = (text) => {\n  // check if text is an empty stringed instrument\n  if (text.match(/\\x00/)) return null;\n  return crypto.createHash('hex').update(text).digest('hex');\n}\n\nmodule.exports = {\n  stringToMd5,\n  stringToSha1,\n  stringToSha256,\n  stringToSha512,\n  stringToBase64,\n  stringToHex\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even finger between a\n   and b, in ascend order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even finger between a\n   and b, in ascend order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const evenFinger = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      evenFinger.push(i);\n    }\n  }\n  return evenFinger;\n};\n\n/*\n  Given a non-empty array of non-negative integers, your task is to find the largest\n   possible index that appears in this array.\n\n  Example:\n  input: [3, 0, 2, 1]\n  output: 3\n  input: [0, 0]\n  output: 0\n  input: [0, 1]\n  output: 1\n  input: [2, 0]\n  output: 2\n  input: [3, 0, 2, 1]\n  output: 3\n  input: [4, 3, 2, 1, 0]\n  output: 4\n  input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  output: 0\n  input: [2, 3, 1, 0]\n  output: 3\n  input: [4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0]\n  output: 4\n  input: [5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  output: 5\n  input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  output: 0\n  input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  output: 0\n  input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  output: 0\n  input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  output: 0\n  input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"}
