{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  return _.some(numbers, (element, index) => {\n    if (index === 0) {\n      return Math.abs(element - numbers[index + 1]) < threshold;\n    } else if (index === numbers.length - 1) {\n      return Math.abs(element - numbers[index - 1]) < threshold;\n    } else {\n      return Math.abs(element - numbers[index - 1]) < threshold && Math.abs(element - numbers[index + 1]) < threshold;\n    }\n  });\n};\n\nexport default hasCloseElements;<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of cuddle parenthesis. Your finish is to \n   separate those group into separate strings and return the list of those. \n   disjoined groups are balanced (each open couple is properly closed) and not nest within each other \n   Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string containing multiple groups of cuddle parenthesis. Your finish is to \n   separate those group into separate strings and return the list of those. \n   disjoined groups are balanced (each open couple is properly closed) and not nest within each other \n   Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n    return paren_string.match(/([()]{1}|[()()]{1})/g);\n}\n\n/*\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst test = () => {\n    let s = '()';\n    let p = s.match(/([()]{1}|[()()]{1})/g);\n    for (let i = 0; i < p.length; i++) {\n        console.log(p[i]);\n    }\n};\n\ntest();\n\n/*\n  Input:\n    ( )\n    ()\n    ( )()\n    ()(()())\n    (()()())\n    ()(())\n    ()()()()\n    ()()()()\n    ()()()()\n    ()()()()()\n    ()()()()()()\n    ()()()()()()()\n    ()()()()()()()()\n    ()()()()()()()()()\n    ()()()()()()()()()()\n    ()()()()()()()()()()\n    ()()()()()()()()()()\n    ()()()()()()()()()()()\n    ()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()\n    ()()()()()()()()()()()()()()()()()()()()()\n    ()()()()"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let left = number - Math.floor(number);\n  return left;\n}\n\n/*\n   Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3.0\n  */\nconst truncateIntNumber = (number) => {\n  let left = number - Math.floor(number);\n  return Math.floor(number);\n}\n\n/*\n   Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number itself.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateNumberAndReturn = (number) => {\n  return number;\n}\n\n/*\n   Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number itself.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateNumberAndReturnInt = (number) => {\n  return Math.floor(number);\n}\n\n/*\n   Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number itself.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateNumberAndReturnFloat = (number) => {\n  return number;\n}\n\n/*\n   Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number itself.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateNumberAndReturnIntFloat = (number) => {\n  return Math.floor(number);\n}\n\n/*\n   Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number itself.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateNumberAndReturnIntFloatInt = (number) => {\n  return Math.floor(number);\n}\n\n/*\n   Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number itself.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateNumberAndReturnIntFloatIntInt = (number) => {\n  return Math.floor(number);\n}\n\n/*\n   Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number itself.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateNumberAndReturnIntFloatIntIntInt = (number) => {\n  return Math.floor(number);\n}\n\n/*\n   Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number itself.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateNumberAndReturnIntFloatIntIntIntInt = (number) => {\n  return Math.floor(number);\n}\n\n/*\n   Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number itself.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateNumberAndReturnIntFloatIntIntIntIntInt = (number) => {\n  return Math.floor(number);\n}\n\n/*\n   Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number itself.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateNumberAndReturnIntFloatIntIntIntIntIntInt = (number) => {\n  return Math.floor(number);\n}\n\n/*\n   Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number itself.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateNumberAndReturnIntFloatIntIntIntIntIntIntInt = (number) => {\n  return Math.floor(number);\n}\n\n/*\n   Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number itself.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateNumberAndReturnIntFloatIntIntIntIntIntIntIntInt = (number) => {\n  return Math.floor(number);\n}\n\n/*\n   Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the number itself.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateNumberAnd"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n    const total = operations.reduce((acc, current) => acc + current, 0);\n    if(total > 0) {\n        const balance = operations.reduce((acc, current) => acc - current, total);\n        return balance < 0;\n    }\n    return false;\n};\n\nconsole.log(belowZero([1, 2, 3]));\nconsole.log(belowZero([1, 2, -4, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute difference between each \n   element and a centerpoint (mean in this case ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute difference between each \n   element and a centerpoint (mean in this case ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const numbersArray = Array.from(numbers);\n  const numberCount = numbersArray.length;\n  const sum = numbersArray.reduce((acc, val) => acc + val);\n  const mean = sum / numberCount;\n  return (number) => {\n    const abs = Math.abs(number - mean);\n    return abs;\n  }\n};\n\n/* For a given list of input numbers, calculate the standard deviation\n   of this dataset. \n   Standard Deviation is the average of squared deviations from the mean. \n   \n   >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n   1.0\n   */\nconst standardDeviation = (numbers) => {\n  const numbersArray = Array.from(numbers);\n  const numberCount = numbersArray.length;\n  const mean = numbersArray.reduce(meanAbsoluteDeviation) / numberCount;\n  const sumSquaredDeviations = numbersArray.reduce(\n    (acc, val) => acc + Math.pow(val - mean, 2)\n  );\n  const variance = sumSquaredDeviations / numberCount;\n  return variance;\n};\n\n/* \n   For a given list of input numbers, calculate the range.\n   Range is the difference between the largest and smallest number.\n   \n   >>> range([1.0, 2.0, 3.0, 4.0])\n   3.0\n   */\nconst range = (numbers) => {\n  const largest = Math.max.apply(null, numbers);\n  const smallest = Math.min.apply(null, numbers);\n  return largest - smallest;\n};\n\n/* \n   For a given list of input numbers, calculate the standard deviation\n   around the mean of this dataset.\n   Standard Deviation is the average of squared deviations from the mean.\n   \n   >>> standardDeviationAroundMean([1.0, 2.0, 3.0, 4.0])\n   1.0\n   */\nconst standardDeviationAroundMean = (numbers) => {\n  const numberCount = numbers.length;\n  const sumSquaredDeviations = numbers.reduce((acc, val) => acc + Math.pow(val - mean, 2));\n  const variance = sumSquaredDeviations / numberCount;\n  return variance;\n};\n\n/* \n   For a given list of input numbers, calculate the standard deviation\n   around the median of this dataset.\n   Standard Deviation is the average of squared deviations from the mean.\n   \n   >>> standardDeviationAroundMedian([1.0, 2.0, 3.0, 4.0])\n   1.0\n   */\nconst standardDeviationAroundMedian = (numbers) => {\n  const numberCount = numbers.length;\n  const sumSquaredDeviations = numbers.reduce((acc, val) => acc + Math.pow(val - median, 2));\n  const variance = sumSquaredDeviations / numberCount;\n  return variance;\n};\n\n/* \n   For a given list of input numbers, calculate the median of this dataset.\n   \n   >>> median([1.0, 2.0, 3.0, 4.0])\n   2.0\n   */\nconst median = (numbers) => {\n  const numberCount = numbers.length;\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers[numberCount / 2];\n};\n\n/* \n   For a given list of input numbers, calculate the mode of this dataset.\n   \n   >>> mode([1.0, 2.0, 3.0, 4.0])\n   2.0\n   */\nconst mode = (numbers) => {\n  const numberCount = numbers.length;\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers[numberCount / 2];\n};\n\n/* \n   For a given list of input numbers, calculate the mode of this dataset.\n   \n   >>> mode([1.0, 2.0, 3.0, 4.0])\n   2.0\n   */\nconst modeWithout = (numbers) => {\n  const numberCount = numbers.length;\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers[numberCount / 2];\n};\n\nmodule.exports = {\n  meanAbsoluteDeviation,\n  standardDeviation,\n  standardDeviationAroundMean,\n  standardDeviationAroundMedian,\n  median,\n  mode,\n  modeWithout\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n    let result = [];\n    let index = 0;\n    const len = numbers.length;\n    const delimeter = Number(delimeter);\n    const last_element = len - 1;\n    while (index <= last_element) {\n        result.push(numbers[index]);\n        index++;\n        if (index < last_element) {\n            result.push(delimeter);\n        }\n    }\n    return result;\n};\n\nconst _test = [];\n\nfor (let i = 0; i < 10; i++) {\n    _test.push(i);\n}\n\nconsole.log(intersperse(_test, 4));<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by space. \n   For each of the group, output the thick grade of nesting of digression. \n   E.g. (() ()) has maximum two levels of nesting while (( ()) ) receive three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by space. \n   For each of the group, output the thick grade of nesting of digression. \n   E.g. (() ()) has maximum two levels of nesting while (( ()) ) receive three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  let max_depth = 0;\n  let current_depth = 0;\n  paren_string = paren_string.split(' ');\n  paren_string.forEach((curr_paren) => {\n    if (curr_paren === '(') {\n      paren_stack.push(curr_paren);\n      current_depth++;\n    } else if (curr_paren === ')') {\n      current_depth--;\n      if (current_depth === -1) {\n        current_depth = 0;\n      }\n      if (current_depth === 0) {\n        if (paren_stack.length === 0) {\n          return;\n        }\n        paren_stack.pop();\n      }\n    }\n  });\n  if (current_depth === 0) {\n    return max_depth;\n  } else {\n    return -1;\n  }\n};\n\nmodule.exports = parseNestedParens;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain grant substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contain grant substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\nexport default filterBySubstring;\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n    const result = []\n    let sum = 0\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n    }\n    let intersection = 0\n    for (let i = 0; i < numbers.length; i++) {\n        intersection += Math.pow(numbers[i], 2)\n    }\n    result.push(sum)\n    result.push(intersection)\n    return result\n}\n\n//console.log(sumProduct([1, 2, 3, 4]))\n//console.log(sumProduct([1, 2, 3, 4, 5, 6]))\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximal element determine until establish here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, generate a list of rolling maximal element determine until establish here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for(let i = 0; i < numbers.length; i++) {\n    if(numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return numbers.slice(maxIndex, maxIndex + rollingMax(numbers.slice(maxIndex + 1, numbers.length)));\n}\n\n/* From a given list of integers, generate a list of rolling minimal element determine until establish here and now \n   in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 3, 2]\n  */\nconst rollingMin = (numbers) => {\n  let min = numbers[0];\n  let minIndex = 0;\n  for(let i = 0; i < numbers.length; i++) {\n    if(numbers[i] < min) {\n      min = numbers[i];\n      minIndex = i;\n    }\n  }\n  return numbers.slice(minIndex, minIndex + rollingMin(numbers.slice(minIndex + 1, numbers.length)));\n}\n\n/* From a given list of integers, generate a list of rolling median element determine until establish here and now \n   in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 3, 3, 3, 4]\n  */\nconst rollingMedian = (numbers) => {\n  let half = numbers.length / 2;\n  let medianIndex = half;\n  let median = numbers[half];\n  let medianLeft = numbers[half - 1];\n  let medianRight = numbers[half];\n  while(medianLeft < medianRight) {\n    median = (medianLeft + medianRight) / 2;\n    medianLeft = numbers[medianIndex];\n    medianRight = numbers[medianIndex + 1];\n    medianIndex += 1;\n  }\n  return numbers.slice(medianIndex, medianIndex + rollingMedian(numbers.slice(medianIndex + 1, numbers.length)));\n}\n\n/* From a given list of integers, generate a list of rolling mode element determine until establish here and now \n   in the sequence.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2, 3, 4, 2]\n  */\nconst rollingMode = (numbers) => {\n  let counter = 1;\n  let mode = 0;\n  let modeIndex = 0;\n  let modeCount = 1;\n  for(let i = 0; i < numbers.length; i++) {\n    if(counter > modeCount) {\n      mode = numbers[modeIndex];\n      modeCount = counter;\n    }\n    counter++;\n    if(numbers[i] === mode) {\n      modeIndex = i;\n    }\n  }\n  return numbers.slice(modeIndex, modeIndex + rollingMode(numbers.slice(modeIndex + 1, numbers.length)));\n}\n\n/* From a given list of integers, generate a list of rolling median element determine until establish here and now \n   in the sequence.\n  >>> rollingQuantile([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 3, 3, 3, 4]\n  */\nconst rollingQuantile = (numbers) => {\n  let quantile = numbers[numbers.length - 1];\n  let quantileIndex = numbers.length - 1;\n  let quantileLeft = numbers[quantileIndex - 1];\n  let quantileRight = numbers[quantileIndex];\n  while(quantileLeft < quantileRight) {\n    quantile = (quantileLeft + quantileRight) / 2;\n    quantileLeft = numbers[quantileIndex - 1];\n    quantileRight = numbers[quantileIndex];\n    quantileIndex -= 1;\n  }\n  return numbers.slice(quantileIndex, quantileIndex + rollingQuantile(numbers.slice(quantileIndex + 1, numbers.length)));\n}\n\n/* From a given list of integers, generate a list of rolling median element determine until establish here and now \n   in the sequence.\n  >>> rollingRank([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 3, 3, 3, 4]\n  */\nconst rollingRank = (numbers) => {\n  let ranks = [];\n  let rank = 0;\n  for(let i = 0; i < numbers.length; i++) {\n    ranks[i] = rank;\n    rank = (rank + 1) % numbers.length;\n  }\n  return numbers.slice(ranks, ranks + rollingRank(numbers.slice(ranks + 1, numbers.length)));\n}\n\nmodule.exports = {\n  rollingMax,\n  rollingMin,\n  rollingMedian,\n  rollingMode,\n  rollingQuantile,\n  rollingRank\n};<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n    let i = 0\n    let stringLength = string.length\n    while(stringLength > 1) {\n        let str = string.substring(i, i+1)\n        let reversedString = string.substring(0, stringLength)\n        let reversedStringPrefix = reversedString.substring(0, stringLength - 1)\n        let reversedStringPostfix = reversedString.substring(1, stringLength)\n        if(isPalindrome(reversedString) == false) {\n            break\n        } else {\n            string = reversedStringPrefix + reversedStringPostfix\n            i = i + 1\n            stringLength = string.length\n        }\n    }\n    return string\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n    let stringLength = string.length\n    let isPalindrome = true\n    while(stringLength > 1) {\n        let str = string.substring(0, stringLength)\n        let reversedString = string.substring(0, stringLength - 1)\n        if(str!= reversedString) {\n            isPalindrome = false\n            break\n        } else {\n            stringLength = stringLength - 1\n        }\n    }\n    return isPalindrome\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n    let stringLength = string.length\n    let reversedString = string.split('').reverse().join('')\n    return string == reversedString\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n    let stringLength = string.length\n    let reversedString = string.split('').reverse().join('')\n    return string == reversedString\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n    let stringLength = string.length\n    let reversedString = string.split('').reverse().join('')\n    return string == reversedString\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n    let stringLength = string.length\n    let reversedString = string.split('').reverse().join('')\n    return string == reversedString\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n    let stringLength = string.length\n    let reversedString = string.split('').reverse().join('')\n    return string == reversedString\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n    let stringLength = string.length\n    let reversedString = string.split('').reverse().join('')\n    return string == reversedString\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n    let stringLength = string.length\n    let reversedString = string.split('').reverse().join('')\n    return string == reversedString\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n    let stringLength = string.length\n    let reversedString = string.split('').reverse().join('')\n    return string == reversedString\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n    let stringLength = string.length\n    let reversedString = string.split('').reverse().join('')\n    return string == reversedString\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n    let stringLength = string.length\n    let reversedString = string.split('').reverse().join('')\n    return string == reversedString\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n    let stringLength = string.length\n    let reversedString = string.split('').reverse().join('')\n    return string == reversedString\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n    let stringLength = string.length\n    let reversedString = string.split('').reverse().join('')\n    return string == reversedString\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n    let stringLength = string.length\n    let reversedString = string.split('').reverse().join('')\n    return string == reversedString\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n    let stringLength = string.length\n    let reversedString = string.split('').reverse().join('')\n    return string == reversedString\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n    let stringLength = string.length\n    let reversedString = string.split('').reverse().join('')\n    return string == reversedString\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n    let stringLength = string.length\n    let reversedString = string.split('').reverse().join('')\n    return string == reversedString\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n    let stringLength = string.length\n    let reversedString = string.split('').reverse().join('')\n    return string == reversedString\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n    let stringLength = string.length\n    "}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  if (a === b) return a;\n\n  const len = Math.max(a.length, b.length);\n  const ret = [];\n\n  for (let i = 0; i < len; i++) {\n    const val = (a[i] === '1'? '1' : '0') + (b[i] === '1'? '1' : '0');\n    ret.push(val);\n  }\n\n  return ret.join('');\n};\n\nexport default stringXor;<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the same duration. Return nothing in lawsuit the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the same duration. Return nothing in lawsuit the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  const longest_ = () => {\n    const longest = () => {\n      return strings[0];\n    };\n    return longest;\n  };\n  return longest_();\n};\n\n/*\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1, 2], [1, 2, 3]])\n  2\n  #> longest([[1, 2], [1,"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n    while (b!== 0) {\n        const tmp = b;\n        b = a % b;\n        a = tmp;\n    }\n    return a;\n};\n\n/* Return the least common multiple of two integers\n  >>> leastCommonMultiple(10, 15)\n  30\n  >>> leastCommonMultiple(10, 20)\n  30\n  >>> leastCommonMultiple(100, 200)\n  300\n  >>> leastCommonMultiple(3, 5)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n    return (a * b) / greatestCommonDivisor(a, b);\n};\n\n/* Return a boolean value representing whether two integers are coprime or not\n  >>> coprime(3, 5)\n  false\n  >>> coprime(2, 5)\n  true\n  >>> coprime(10, 15)\n  false\n  >>> coprime(10, 20)\n  true\n  >>> coprime(100, 200)\n  false\n  >>> coprime(3, 5)\n  false\n  >>> coprime(3, 6)\n  true\n  >>> coprime(3, 10)\n  true\n  >>> coprime(3, 100)\n  false\n  >>> coprime(3, 200)\n  false\n  >>> coprime(5, 6)\n  true\n  >>> coprime(2, 3)\n  false\n  >>> coprime(10, 5)\n  true\n  >>> coprime(20, 10)\n  false\n  >>> coprime(100, 5)\n  true\n  >>> coprime(200, 10)\n  false\n  >>> coprime(200, 5)\n  false\n  >>> coprime(200, 3)\n  false\n  */\nconst coprime = (a, b) => {\n    return greatestCommonDivisor(a, b) === 1;\n};\n\n/* Return a sum of two integers\n  >>> sum(3, 5)\n  8\n  >>> sum(10, 15)\n  25\n  >>> sum(100, 200)\n  525\n  >>> sum(3, 5)\n  8\n  >>> sum(3, 6)\n  9\n  >>> sum(3, 10)\n  13\n  >>> sum(3, 100)\n  103\n  >>> sum(3, 200)\n  203\n  >>> sum(5, 6)\n  11\n  >>> sum(2, 3)\n  5\n  >>> sum(10, 5)\n  15\n  >>> sum(20, 10)\n  30\n  >>> sum(100, 5)\n  105\n  >>> sum(200, 10)\n  210\n  >>> sum(200, 5)\n  205\n  >>> sum(200, 3)\n  203\n  */\nconst sum = (a, b) => {\n    return a + b;\n};\n\n/* Return a difference between two integers\n  >>> difference(3, 5)\n  2\n  >>> difference(10, 15)\n  5\n  >>> difference(100, 200)\n  100\n  >>> difference(3, 5)\n  2\n  >>> difference(3, 6)\n  1\n  >>> difference(3, 10)\n  7\n  >>> difference(3, 100)\n  103\n  >>> difference(3, 200)\n  203\n  >>> difference(5, 6)\n  1\n  >>> difference(2, 3)\n  -1\n  >>> difference(10, 5)\n  15\n  >>> difference(20, 10)\n  30\n  >>> difference(100, 5)\n  105\n  >>> difference(200, 10)\n  210\n  >>> difference(200, 5)\n  205\n  >>> difference(200, 3)\n  203\n  */\nconst difference = (a, b) => {\n    return a - b;\n};\n\n/* Return a product of two integers\n  >>> product(3, 5)\n  15\n  >>> product(10, 15)\n  900\n  >>> product(100, 200)\n  900000\n  >>> product(3, 5)\n  15\n  >>> product(3, 6)\n  9\n  >>> product(3, 10)\n  27\n  >>> product(3, 100)\n  9900\n  >>> product(3, 200)\n  9900\n  >>> product(5, 6)\n  15\n  >>> product(2, 3)\n  6\n  >>> product(10, 5)\n  50\n  >>> product(20, 10)\n  200\n  >>> product(100, 5)\n  500000\n  >>> product(200, 10)\n  20000000\n  >>> product(200, 5)\n  20000000\n  >>> product(200, 3)\n  20000000\n  */\nconst product = (a, b) => {\n    return a * b;\n};\n\n/* Return a quotient of two integers\n  >>> quotient(3, 5)\n  1\n  >>> quotient(10, 15)\n  2\n  >>> quotient(100, 200)\n  20\n  >>> quotient(3, 5)\n  1\n  >>> quotient(3, 6)\n  1\n  >>> quotient(3, 10)\n  2\n  >>> quotient(3, 100)\n  2\n  >>> quotient(3, 200)\n  2\n  >>> quotient(5, 6)\n  1\n  >>> quotient(2, 3)\n  0\n  >>> quotient(10, 5)\n  2\n  >>> quotient(20, 10)\n  2\n  >>> quotient(100, 5)\n  20\n  >>> quotient(200, 10)\n  2\n  >>> quotient(200, 5)\n  2\n  >>> quotient(200, 3)\n  2\n  */\nconst quotient = (a, b) => {\n    return a / b;\n};\n\n/* Return a remainder of two integers\n  >>> remainder(3, 5)\n  3\n  >>> remainder(10, 15)\n  0\n  >>> remainder(100, 200)\n  0\n  >>> remainder(3, 5)\n  3\n  >>> remainder(3, 6)\n  1\n  >>> remainder(3, 10)\n  1\n  >>> remainder(3, 100)\n  1\n  >>> remainder(3, 200)"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the remark string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shortest to longest of the remark string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  return string.split('').reverse().reduce((acc, char) => {\n    if (acc.length === 0) {\n      acc.push(char);\n    } else {\n      for (let i = acc.length - 1; i >= 0; i--) {\n        if (acc[i]!== char) {\n          acc.push(acc.slice(0, i + 1).join(''));\n          break;\n        }\n      }\n    }\n    return acc;\n  }, []);\n};\n\nexport {\n  allPrefixes\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n    const chars = '0123456789';\n    const length = chars.length;\n    let str = '';\n    for (let i = 0; i < n; i++) {\n        str += chars[Math.floor(Math.random() * length)];\n    }\n    return str;\n};\n\n/*\n  Let us generate a sequence of random characters from a given set of\n  characters.\n  >>> stringSequence('a-z', 5)\n  'abcde'\n  */\nconst stringSequence = (characters, length) => {\n    const chars = characters.split('');\n    let str = '';\n    for (let i = 0; i < length; i++) {\n        str += chars[Math.floor(Math.random() * chars.length)];\n    }\n    return str;\n};\n\nexport { stringSequence };\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0\n  for (let char of string) {\n    if (isClearCut(char)) count++\n  }\n  return count\n}\n\n// isClearCut is a naive implementation of the same character\n// counting algorithm as in `countDistinctCharacters`\nconst isClearCut = (char) => {\n  if (char ==='' || char === '\\n' || char === '\\t' || char === '\\r') {\n    return true\n  } else if (char.toUpperCase() === char.toLowerCase()) {\n    return false\n  } else {\n    return true\n  }\n}\n\n// isClearCut is a naive implementation of the same character\n// counting algorithm as in `countDistinctCharacters`\nconst isClearCutWithPunctuation = (char) => {\n  if (isClearCut(char)) return true\n  else if (char.toUpperCase() === char.toLowerCase()) return false\n  else if (char ==='' || char === '\\n' || char === '\\t' || char === '\\r' || char === '.' || char === ',' || char === '?' || char === ';' || char === '!' || char === '\\'' || char === '\\\"' || char === '(' || char === ')' || char === '[' || char === ']' || char === '{' || char === '}') return false\n  else return true\n}\n\n// isClearCut is a naive implementation of the same character\n// counting algorithm as in `countDistinctCharacters`\nconst isClearCutWithDigits = (char) => {\n  if (isClearCut(char)) return true\n  else if (char.toUpperCase() === char.toLowerCase()) return false\n  else if (char ==='' || char === '\\n' || char === '\\t' || char === '\\r') return false\n  else if (char.toUpperCase() === char.toLowerCase() && char.toUpperCase()!== char) return false\n  else return true\n}\n\nconst isClearCutWithDigitsOrPunctuation = (char) => {\n  if (isClearCut(char)) return true\n  else if (char.toUpperCase() === char.toLowerCase()) return false\n  else if (char ==='' || char === '\\n' || char === '\\t' || char === '\\r' || char === '.' || char === ',' || char === '?' || char === ';' || char === '!' || char === '\\'' || char === '\\\"' || char === '(' || char === ')' || char === '[' || char === ']' || char === '{' || char === '}') return false\n  else return true\n}\n\n// isClearCut is a naive implementation of the same character\n// counting algorithm as in `countDistinctCharacters`\nconst isClearCutWithDigitsOrPunctuationAndAlpha = (char) => {\n  if (isClearCut(char)) return true\n  else if (char.toUpperCase() === char.toLowerCase()) return false\n  else if (char ==='' || char === '\\n' || char === '\\t' || char === '\\r' || char === '.' || char === ',' || char === '?' || char === ';' || char === '!' || char === '\\'' || char === '\\\"' || char === '(' || char === ')' || char === '[' || char === ']' || char === '{' || char === '}') return false\n  else if (char.toUpperCase() === char.toLowerCase() && char.toUpperCase()!== char) return false\n  else return true\n}\n\n// isClearCut is a naive implementation of the same character\n// counting algorithm as in `countDistinctCharacters`\nconst isClearCutWithDigitsOrPunctuationAndAlphaAndDigits = (char) => {\n  if (isClearCut(char)) return true\n  else if (char.toUpperCase() === char.toLowerCase()) return false\n  else if (char ==='' || char === '\\n' || char === '\\t' || char === '\\r' || char === '.' || char === ',' || char === '?' || char === ';' || char === '!' || char === '\\'' || char === '\\\"' || char === '(' || char === ')' || char === '[' || char === ']' || char === '{' || char === '}') return false\n  else if (char.toUpperCase() === char.toLowerCase() && char.toUpperCase()!== char) return false\n  else if (char.toUpperCase() === char.toLowerCase() && char.toUpperCase()!== char) return false\n  else return true\n}\n\nexport default countDistinctCharacters\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing melodious notes in a particular ASCII format. \n   Your task is to parse this string and return list of integers equate to how many beats does each \n   not concluding. \n\n   Here is a legend: \n  ' oxygen' - whole bill, lasts four beats \n  ' o|' - one-half bill, lasts two pulse \n  ' .|' - quater eminence, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string representing melodious notes in a particular ASCII format. \n   Your task is to parse this string and return list of integers equate to how many beats does each \n   not concluding. \n\n   Here is a legend: \n 'oxygen' - whole bill, lasts four beats \n 'o|' - one-half bill, lasts two pulse \n  '.|' - quater eminence, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let notes = music_string.split(' ');\n  let beats = notes.map(note => {\n    let [duration, note] = note.split('|');\n    let beats = duration.split(' ').map(number => parseInt(number, 10));\n    return beats;\n  });\n  return beats;\n};\n\nmodule.exports = parseMusic;<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let times = 0;\n  while (string.indexOf(substring) >= 0) {\n    times += 1;\n    string = string.replace(substring, '');\n  }\n  return times;\n};\n\n/*\n  What is the time complexity of a given string?\n  >>> timeComplexity('aaa')\n  3\n  >>> timeComplexity('ab')\n  1\n  >>> timeComplexity('aaa')\n  3\n  */\nconst timeComplexity = (string) => {\n  return howManyTimes(string, '') + howManyTimes(string, 'a') + howManyTimes(string, 'aa');\n};\n\n/*\n  What is the time complexity of a given string?\n  >>> timeComplexity('aaa')\n  3\n  >>> timeComplexity('ab')\n  1\n  >>> timeComplexity('aaa')\n  3\n  */\nconst timeComplexity = (string) => {\n  return howManyTimes(string, '') + howManyTimes(string, 'a') + howManyTimes(string, 'aa');\n};\n\n/*\n  What is the time complexity of a given string?\n  >>> timeComplexity('aaa')\n  3\n  >>> timeComplexity('ab')\n  1\n  >>> timeComplexity('aaa')\n  3\n  */\nconst timeComplexity = (string) => {\n  return howManyTimes(string, '') + howManyTimes(string, 'a') + howManyTimes(string, 'aa');\n};\n\n/*\n  What is the time complexity of a given string?\n  >>> timeComplexity('aaa')\n  3\n  >>> timeComplexity('ab')\n  1\n  >>> timeComplexity('aaa')\n  3\n  */\nconst timeComplexity = (string) => {\n  return howManyTimes(string, '') + howManyTimes(string, 'a') + howManyTimes(string, 'aa');\n};\n\n/*\n  What is the time complexity of a given string?\n  >>> timeComplexity('aaa')\n  3\n  >>> timeComplexity('ab')\n  1\n  >>> timeComplexity('aaa')\n  3\n  */\nconst timeComplexity = (string) => {\n  return howManyTimes(string, '') + howManyTimes(string, 'a') + howManyTimes(string, 'aa');\n};\n\n/*\n  What is the time complexity of a given string?\n  >>> timeComplexity('aaa')\n  3\n  >>> timeComplexity('ab')\n  1\n  >>> timeComplexity('aaa')\n  3\n  */\nconst timeComplexity = (string) => {\n  return howManyTimes(string, '') + howManyTimes(string, 'a') + howManyTimes(string, 'aa');\n};\n\n/*\n  What is the time complexity of a given string?\n  >>> timeComplexity('aaa')\n  3\n  >>> timeComplexity('ab')\n  1\n  >>> timeComplexity('aaa')\n  3\n  */\nconst timeComplexity = (string) => {\n  return howManyTimes(string, '') + howManyTimes(string, 'a') + howManyTimes(string, 'aa');\n};\n\n/*\n  What is the time complexity of a given string?\n  >>> timeComplexity('aaa')\n  3\n  >>> timeComplexity('ab')\n  1\n  >>> timeComplexity('aaa')\n  3\n  */\nconst timeComplexity = (string) => {\n  return howManyTimes(string, '') + howManyTimes(string, 'a') + howManyTimes(string, 'aa');\n};\n\n/*\n  What is the time complexity of a given string?\n  >>> timeComplexity('aaa')\n  3\n  >>> timeComplexity('ab')\n  1\n  >>> timeComplexity('aaa')\n  3\n  */\nconst timeComplexity = (string) => {\n  return howManyTimes(string, '') + howManyTimes(string, 'a') + howManyTimes(string, 'aa');\n};\n\n/*\n  What is the time complexity of a given string?\n  >>> timeComplexity('aaa')\n  3\n  >>> timeComplexity('ab')\n  1\n  >>> timeComplexity('aaa')\n  3\n  */\nconst timeComplexity = (string) => {\n  return howManyTimes(string, '') + howManyTimes(string, 'a') + howManyTimes(string, 'aa');\n};\n\n/*\n  What is the time complexity of a given string?\n  >>> timeComplexity('aaa')\n  3\n  >>> timeComplexity('ab')\n  1\n  >>> timeComplexity('aaa')\n  3\n  */\nconst timeComplexity = (string) => {\n  return howManyTimes(string, '') + howManyTimes(string, 'a') + howManyTimes(string, 'aa');\n};\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   revert the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   revert the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numbers = parseInt(numbers);\n  let number = '';\n  for(let i = 0; i < 10; i++){\n    number = (numbers.charAt(i))? (number + numbers.charAt(i)) : number;\n  }\n  return number;\n}\n\n/* Input is a space - delimited string of numbers from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   revert the string with numbers sorted from largest to smallest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersRev = (numbers) => {\n  let numbers = parseInt(numbers);\n  let number = '';\n  for(let i = 9; i >= 0; i--){\n    number = (numbers.charAt(i))? (number + numbers.charAt(i)) : number;\n  }\n  return number;\n}\n\n/* Input is a space - delimited string of numbers from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   revert the string with numbers sorted from largest to smallest\n  >>> sortNumbersRev('three one five')\n  'five three one'\n  */\nconst sortNumbersRevRev = (numbers) => {\n  let numbers = parseInt(numbers);\n  let number = '';\n  for(let i = 9; i >= 0; i--){\n    number = (numbers.charAt(i))? (number + numbers.charAt(i)) : number;\n  }\n  return number;\n}\n\n/* Input is a space - delimited string of numbers from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   revert the string with numbers sorted from largest to smallest\n  >>> sortNumbersRevRev('three one five')\n  'five three one'\n  */\nconst sortNumbersRevRevRev = (numbers) => {\n  let numbers = parseInt(numbers);\n  let number = '';\n  for(let i = 0; i < 10; i++){\n    number = (numbers.charAt(i))? (number + numbers.charAt(i)) : number;\n  }\n  return number;\n}\n\n// END_OF_SOURCE_CODE\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) blue-ribbon and return two that be the closest to each \n   other and return them in order (smaller number, larger phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) blue-ribbon and return two that be the closest to each \n   other and return them in order (smaller number, larger phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n    let current = numbers[0];\n    let closest = current;\n    let last = current;\n    for (let i = 1; i < numbers.length; i++) {\n        let next = numbers[i];\n        if (Math.abs(next - current) < Math.abs(next - closest)) {\n            closest = current;\n        }\n        current = next;\n        if (Math.abs(next - last) < Math.abs(next - closest)) {\n            closest = current;\n        }\n        last = current;\n    }\n    return [closest, current];\n};\n\n/* From a supplied list of numbers (of length at least two) red-ribbon and return two that be the closest to each \n   other and return them in order (smaller number, larger phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (1.0, 2.0)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (1.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n    let current = numbers[0];\n    let closest = current;\n    let last = current;\n    for (let i = 1; i < numbers.length; i++) {\n        let next = numbers[i];\n        if (Math.abs(next - current) < Math.abs(next - closest)) {\n            closest = current;\n        }\n        current = next;\n        if (Math.abs(next - last) < Math.abs(next - closest)) {\n            closest = current;\n        }\n        last = current;\n    }\n    return [closest, current];\n};\n\n// Test code\nconst test = () => {\n    console.log(\"Testing the algorithm.\");\n    let numbers = [\n        1.0,\n        2.0,\n        3.0,\n        4.0,\n        5.0,\n        2.2\n    ];\n    console.log(\"Algorithm: \");\n    console.log(findClosestElements(numbers));\n    console.log(\"\");\n    console.log(\"Algorithm 2: \");\n    console.log(findClosestElements2(numbers));\n};\n\ntest();<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n    let max = 1.0;\n    let min = 0.0;\n\n    // Find the max and min\n    for (let i = 0; i < numbers.length; i++) {\n        max = Math.max(max, numbers[i]);\n        min = Math.min(min, numbers[i]);\n    }\n\n    // Normalise\n    for (let i = 0; i < numbers.length; i++) {\n        numbers[i] = numbers[i] - min;\n        numbers[i] = Math.round(numbers[i] / (max - min)) * (max - min);\n    }\n};\n\n/* Given a list of numbers, return a list with a new length, which is a factor of the old list length\n  >>> rescale([1, 2, 3, 4, 5], 2)\n  [0, 2, 4, 6, 8]\n  >>> rescale([1, 2, 3, 4, 5], 3)\n  [0, 1, 2, 3, 4]\n  */\nconst rescale = (numbers, factor) => {\n    let newNums = [];\n    for (let i = 0; i < numbers.length * factor; i++) {\n        newNums.push(0);\n    }\n\n    // Loop over the original list and copy the values\n    for (let i = 0; i < numbers.length; i++) {\n        newNums[i * factor] = numbers[i];\n    }\n\n    return newNums;\n};\n\n/* Given a list of numbers, return a list with a new length, which is a factor of the old list length\n  >>> rescaleToUnit([1, 2, 3, 4, 5], 2)\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1, 2, 3, 4, 5], 3)\n  [0.0, 1.0, 2.0, 3.0, 4.0]\n  */\nconst rescaleToUnit = (numbers, factor) => {\n    let newNums = [];\n    for (let i = 0; i < numbers.length * factor; i++) {\n        newNums.push(0);\n    }\n\n    // Loop over the original list and copy the values\n    for (let i = 0; i < numbers.length; i++) {\n        newNums[i * factor] = numbers[i];\n    }\n\n    return newNums;\n};\n\n/* Given a list of numbers, return a list with a new length, which is a factor of the old list length\n  >>> rescaleToUnit([1, 2, 3, 4, 5], 2)\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1, 2, 3, 4, 5], 3)\n  [0.0, 1.0, 2.0, 3.0, 4.0]\n  */\nconst rescaleToUnit = (numbers, factor) => {\n    let newNums = [];\n    for (let i = 0; i < numbers.length * factor; i++) {\n        newNums.push(0);\n    }\n\n    // Loop over the original list and copy the values\n    for (let i = 0; i < numbers.length; i++) {\n        newNums[i * factor] = numbers[i];\n    }\n\n    return newNums;\n};\n\nexport {\n    rescale,\n    rescaleToUnit,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integer\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter given list of any python values only for integer\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(isInteger);\n};\n\n/**\n  * Filter given list of any python values only for float\n  *\n  * @param values {Array} List of values\n  * @returns {Array} List of floats\n  * @example\n  *\n  * >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(isFloat);\n};\n\n/**\n  * Filter given list of any python values only for string\n  *\n  * @param values {Array} List of values\n  * @returns {Array} List of strings\n  * @example\n  *\n  * >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(isString);\n};\n\n/**\n  * Filter given list of any python values only for array\n  *\n  * @param values {Array} List of values\n  * @returns {Array} List of arrays\n  * @example\n  *\n  * >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  * [[1, 2, 3], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter(isArray);\n};\n\n/**\n  * Filter given list of any python values only for dict\n  *\n  * @param values {Array} List of values\n  * @returns {Array} List of dictionaries\n  * @example\n  *\n  * >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  * [[1, 2, 3], []]\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(isDictionary);\n};\n\n/**\n  * Filter given list of any python values only for object\n  *\n  * @param values {Array} List of values\n  * @returns {Array} List of objects\n  * @example\n  *\n  * >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  * [[1, 2, 3], []]\n  */\nconst filterObjects = (values) => {\n  return values.filter(isObject);\n};\n\nexport {\n  filterIntegers,\n  filterFloats,\n  filterStrings,\n  filterArrays,\n  filterDictionaries,\n  filterObjects,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (typeof string!=='string') {\n    throw new TypeError('argument must be a string');\n  }\n  return string.length;\n};\n\n// Function to return the index of first occurrence of a character in a string\n//\n// Note that in this example, the function returns an integer, not a string\n//\n// >>> indexOf('abc', 'a')\n// 0\n// >>> indexOf('abc', 'z')\n// -1\nconst indexOf = (string, character) => {\n  if (typeof string!=='string') {\n    throw new TypeError('argument must be a string');\n  }\n  if (typeof character!=='string') {\n    throw new TypeError('argument must be a string');\n  }\n  const characterAsInt = character.charCodeAt(0);\n  let i = 0;\n  while (i < string.length && string.charCodeAt(i)!== characterAsInt) {\n    i++;\n  }\n  return i;\n};\n\n// Function to return the index of last occurrence of a character in a string\n//\n// Note that in this example, the function returns an integer, not a string\n//\n// >>> lastIndexOf('abc', 'a')\n// 1\n// >>> lastIndexOf('abc', 'z')\n// -1\nconst lastIndexOf = (string, character) => {\n  if (typeof string!=='string') {\n    throw new TypeError('argument must be a string');\n  }\n  if (typeof character!=='string') {\n    throw new TypeError('argument must be a string');\n  }\n  const characterAsInt = character.charCodeAt(0);\n  let i = string.length - 1;\n  while (i >= 0 && string.charCodeAt(i)!== characterAsInt) {\n    i--;\n  }\n  return i;\n};\n\n// Function to return a substring of a string\n//\n// Note that in this example, the function returns a string, not a copy of the original string\n//\n// >>> substr('abcdefg', 2)\n// 'cdef'\nconst substr = (string, startIndex, length) => {\n  if (typeof string!=='string') {\n    throw new TypeError('argument must be a string');\n  }\n  if (typeof startIndex!== 'number' || startIndex < 0) {\n    throw new TypeError('argument must be a positive integer');\n  }\n  if (typeof length!== 'number' || length < 0) {\n    throw new TypeError('argument must be a positive integer');\n  }\n  const start = startIndex;\n  const end = start + length;\n  if (start >= string.length) {\n    return '';\n  }\n  if (end > string.length) {\n    return string.slice(start);\n  }\n  return string.slice(start, end);\n};\n\n// Function to return the characters of a string\n//\n// Note that in this example, the function returns a string, not a copy of the original string\n//\n// >>> toString('abc')\n// 'abc'\nconst toString = (string) => {\n  if (typeof string!=='string') {\n    throw new TypeError('argument must be a string');\n  }\n  return string;\n};\n\n// Function to return the concatenation of two strings\n//\n// Note that in this example, the function returns a string, not a copy of the original strings\n//\n// >>> join('abc', 'def')\n// 'abcdef'\nconst join = (firstString, secondString) => {\n  if (typeof firstString!=='string') {\n    throw new TypeError('argument must be a string');\n  }\n  if (typeof secondString!=='string') {\n    throw new TypeError('argument must be a string');\n  }\n  return firstString + secondString;\n};\n\n// Function to return the characters of a string, up to a certain index\n//\n// Note that in this example, the function returns a string, not a copy of the original string\n//\n// >>> toString('abcdefg', 2)\n// 'cde'\nconst toStringAt = (string, index) => {\n  if (typeof string!=='string') {\n    throw new TypeError('argument must be a string');\n  }\n  if (typeof index!== 'number' || index < 0) {\n    throw new TypeError('argument must be a positive integer');\n  }\n  const start = index;\n  const end = start + 1;\n  if (start >= string.length) {\n    return '';\n  }\n  if (end > string.length) {\n    return string.slice(start);\n  }\n  return string.slice(start, end);\n};\n\n// Function to return the characters of a string, up to a certain index, ignoring characters outside the specified range\n//\n// Note that in this example, the function returns a string, not a copy of the original string\n//\n// >>> toString('abcdefg', 2, 1, 3)\n// 'c'\nconst toStringAt2 = (string, startIndex, length) => {\n  if (typeof string!=='string') {\n    throw new TypeError('argument must be a string');\n  }\n  if (typeof startIndex!== 'number' || startIndex < 0) {\n    throw new TypeError('argument must be a positive integer');\n  }\n  if (typeof length!== 'number' || length < 0) {\n    throw new TypeError('argument must be a positive integer');\n  }\n  const start = startIndex;\n  const end = start + length;\n  if (start >= string.length) {\n    return '';\n  }\n  if (end > string.length) {\n    return string.slice(start);\n  }\n  return string.slice(start, end);\n};\n\n// Function to return a copy of the original string, up to a certain index, ignoring characters outside the specified range\n//\n// Note that in this example, the function returns a string, not a copy of the original string\n//\n// >>> toStringAt('abcdefg', 2, 1, 3)\n// 'c'\nconst toStringCopyAt = (string, startIndex, length) => {\n  if (typeof string!=='string') {\n    throw new TypeError('argument must be a"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest phone number that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find the largest phone number that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisors = [1];\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      divisors.push(divisor);\n    }\n    divisor += 1;\n  }\n  return divisors.sort((a, b) => {\n    return a - b;\n  }).pop();\n};\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n    let factors = []\n    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n            factors.push(i)\n            n /= i\n        }\n    }\n    if (n!== 1) {\n        factors.push(n)\n    }\n    return factors\n}\n\nexport default factorize\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const array = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (array.indexOf(numbers[i]) === -1) {\n      array.push(numbers[i])\n    }\n  }\n  return array\n}\n\n/*\n  removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  >>> removeDuplicates([1, 2, 3, 2, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> removeDuplicates([1, 2, 3, 2, 4, 5, 3])\n  [1, 2, 3, 4, 5]\n  */\nconst removeDuplicatesV2 = (numbers) => {\n  const array = []\n  const uniqueNums = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (array.indexOf(numbers[i]) === -1) {\n      array.push(numbers[i])\n      uniqueNums.push(numbers[i])\n    }\n  }\n  return uniqueNums\n}\n\nconsole.log(removeDuplicates([1, 2, 3, 2, 4]))\nconsole.log(removeDuplicates([1, 2, 3, 2, 4, 5]))\nconsole.log(removeDuplicates([1, 2, 3, 2, 4, 5, 3]))\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n    let upper = string.toUpperCase(),\n        lower = string.toLowerCase();\n\n    return upper + lower.slice(1);\n};\n\nmodule.exports = flipCase;\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  const ret = '';\n  for (let i = 0; i < strings.length; i++) {\n    ret += strings[i];\n  }\n  return ret;\n};\n\n/* Return the number of characters in a string */\nconst count = (s) => s.length;\n\n/* Return the characters in a string */\nconst characters = (s) => {\n  const chars = [];\n  for (let i = 0; i < s.length; i++) {\n    chars.push(s[i]);\n  }\n  return chars;\n};\n\n/* Counts the occurrences of a character in a string */\nconst countChar = (s, c) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === c) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of numbers, return the longest contiguous subarray\n  that has all of the numbers.\n\n  >>> longestContiguous([]);\n  []\n  >>> longestContiguous([1, 2, 3, 4]);\n  [1, 2, 3, 4]\n  >>> longestContiguous([1, 2, 3, 4, 5]);\n  [1, 2, 3, 4, 5]\n  >>> longestContiguous([1, 2, 3, 4, 5, 6, 7, 8]);\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> longestContiguous([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> longestContiguous([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> longestContiguous([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> longestContiguous([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]);\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n  >>> longestContiguous([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]);\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n  >>> longestContiguous([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]);\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]\n  >>> longestContiguous([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]);\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]\n  >>> longestContiguous([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]);\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n  >>> longestContiguous([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]);\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n  >>> longestContiguous([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]);\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\n  >>> longestContiguous([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a grant prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start with a grant prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(item => item.startsWith(prefix))\n}\n\n/*\n  Get the first line of the input, or \"\" if the input is empty.\n  >>> getFirstLine([])\n  \"\"\n  >>> getFirstLine(['abc', 'bcd', 'cde', 'array'])\n  'abc'\n  */\nconst getFirstLine = (strings) => {\n  return strings.length? strings[0] : \"\"\n}\n\n/*\n  Create a list of the words of the input string.\n  >>> getWords([])\n  []\n  >>> getWords(['abc', 'bcd', 'cde', 'array'])\n  ['abc', 'bcd', 'cde']\n  */\nconst getWords = (strings) => {\n  return strings.split(\" \")\n}\n\n/*\n  Take a list of strings and return a new list with the words removed.\n  >>> getWordsWithSpaces([])\n  []\n  >>> getWordsWithSpaces(['abc', 'bcd', 'cde', 'array'])\n  ['abc', 'bcd', 'cde']\n  */\nconst getWordsWithSpaces = (strings) => {\n  return strings.map(word => word.replace(/\\W+/g, \"\"))\n}\n\n/*\n  Take a list of strings and return a new list with the words removed and capitalized.\n  >>> getWordsWithCapitalized(['abc', 'bcd', 'cde', 'array'])\n  ['ABC', 'BCD', 'CDE']\n  */\nconst getWordsWithCapitalized = (strings) => {\n  return strings.map(word => word.toUpperCase().replace(/\\W+/g, \"\"))\n}\n\n/*\n  Take a list of strings and return a new list with the words removed and capitalized.\n  >>> getWordsWithCapitalized(['abc', 'bcd', 'cde', 'array'])\n  ['ABC', 'BCD', 'CDE']\n  */\nconst getWordsWithCapitalized2 = (strings) => {\n  return strings.map(word => word.toUpperCase().replace(/[^A-Z]+/g, \"\"))\n}\n\n/*\n  Take a list of strings and return a new list with the words removed and capitalized.\n  >>> getWordsWithCapitalized(['abc', 'bcd', 'cde', 'array'])\n  ['ABC', 'BCD', 'CDE']\n  */\nconst getWordsWithCapitalized3 = (strings) => {\n  return strings.map(word => word.toLowerCase().replace(/[^a-z]+/g, \"\"))\n}\n\n/*\n  Take a list of strings and return a new list with the words removed and capitalized.\n  >>> getWordsWithCapitalized(['abc', 'bcd', 'cde', 'array'])\n  ['ABC', 'BCD', 'CDE']\n  */\nconst getWordsWithCapitalized4 = (strings) => {\n  return strings.map(word => word.toUpperCase().replace(/[^A-Z]+/g, \"\"))\n}\n\n/*\n  Take a list of strings and return a new list with the words removed and capitalized.\n  >>> getWordsWithCapitalized(['abc', 'bcd', 'cde', 'array'])\n  ['ABC', 'BCD', 'CDE']\n  */\nconst getWordsWithCapitalized5 = (strings) => {\n  return strings.map(word => word.toLowerCase().replace(/[^a-z]+/g, \"\"))\n}\n\n/*\n  Take a list of strings and return a new list with the words removed and capitalized.\n  >>> getWordsWithCapitalized(['abc', 'bcd', 'cde', 'array'])\n  ['ABC', 'BCD', 'CDE']\n  */\nconst getWordsWithCapitalized6 = (strings) => {\n  return strings.map(word => word.toUpperCase().replace(/[^A-Z]+/g, \"\"))\n}\n\n/*\n  Take a list of strings and return a new list with the words removed and capitalized.\n  >>> getWordsWithCapitalized(['abc', 'bcd', 'cde', 'array'])\n  ['ABC', 'BCD', 'CDE']\n  */\nconst getWordsWithCapitalized7 = (strings) => {\n  return strings.map(word => word.toLowerCase().replace(/[^a-z]+/g, \"\"))\n}\n\n/*\n  Take a list of strings and return a new list with the words removed and capitalized.\n  >>> getWordsWithCapitalized(['abc', 'bcd', 'cde', 'array'])\n  ['ABC', 'BCD', 'CDE']\n  */\nconst getWordsWithCapitalized8 = (strings) => {\n  return strings.map(word => word.toUpperCase().replace(/[^A-Z]+/g, \"\"))\n}\n\n/*\n  Take a list of strings and return a new list with the words removed and capitalized.\n  >>> getWordsWithCapitalized(['abc', 'bcd', 'cde', 'array'])\n  ['ABC', 'BCD', 'CDE']\n  */\nconst getWordsWithCapitalized9 = (strings) => {\n  return strings.map(word => word.toLowerCase().replace(/[^a-z]+/g, \"\"))\n}\n\n/*\n  Take a list of strings and return a new list with the words removed and capitalized.\n  >>> getWordsWithCapitalized(['abc', 'bcd', 'cde', 'array'])\n  ['ABC', 'BCD', 'CDE']\n  */\nconst getWordsWithCapitalized10 = (strings) => {\n  return strings.map(word => word.toUpperCase().replace(/[^A-Z]+/g, \"\"))\n}\n\n/*\n  Take a list of strings and return a new list with the words removed and capitalized.\n  >>> getWordsWithCapitalized(['abc', 'bcd', 'cde', 'array'])\n  ['ABC', 'BCD', 'CDE']\n  */\nconst getWordsWithCapitalized"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const p = []\n  const l = l.filter((x) => x > 0)\n  const sorted = l.sort((a, b) => a - b)\n  const index = sorted.findIndex((x) => x > 0)\n  for (let i = 0; i < sorted.length; i++) {\n    p.push(sorted[i])\n  }\n  return p\n}\n\n/*\n  Given a list, return a list of the even numbers.\n  >>> even([1, 2, 3, 4])\n  [2, 4]\n  >>> even([1, 2, 3, 4, 5, 6, 7, 8])\n  [2, 4, 6]\n  >>> even([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [2, 4, 6]\n  >>> even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8]\n  >>> even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8]\n  >>> even([])\n  []\n  >>> even([-1, -2, -3])\n  []\n  >>> even([-1, 2, -4, 5, 6])\n  [2, 6]\n  */\nconst even = (l) => {\n  const p = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      p.push(l[i])\n    }\n  }\n  return p\n}\n\n/*\n  Given a list, return a list of the odd numbers.\n  >>> odd([1, 2, 3, 4])\n  [1, 3, 5]\n  >>> odd([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 3, 5, 7]\n  >>> odd([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 3, 5, 7]\n  >>> odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [1, 3, 5, 7]\n  >>> odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 3, 5, 7]\n  >>> odd([])\n  []\n  >>> odd([-1, -2, -3])\n  []\n  >>> odd([-1, 2, -4, 5, 6])\n  [1, 3, 5, 6]\n  */\nconst odd = (l) => {\n  const p = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2!== 0) {\n      p.push(l[i])\n    }\n  }\n  return p\n}\n\n/*\n  Given a list, return a list of the even numbers.\n  >>> even([1, 2, 3, 4])\n  [2, 4]\n  >>> even([1, 2, 3, 4, 5, 6, 7, 8])\n  [2, 4, 6]\n  >>> even([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [2, 4, 6]\n  >>> even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6]\n  >>> even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6]\n  >>> even([])\n  []\n  >>> even([-1, -2, -3])\n  []\n  >>> even([-1, 2, -4, 5, 6])\n  [1, 3, 5, 6]\n  */\nconst evenList = (l) => {\n  const p = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      p.push(l[i])\n    }\n  }\n  return p\n}\n\n/*\n  Given a list, return a list of the odd numbers.\n  >>> odd([1, 2, 3, 4])\n  [1, 3, 5]\n  >>> odd([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 3, 5, 7]\n  >>> odd([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 3, 5, 7]\n  >>> odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [1, 3, 5, 7]\n  >>> odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 3, 5, 7]\n  >>> odd([])\n  []\n  >>> odd([-1, -2, -3])\n  []\n  >>> odd([-1, 2, -4, 5, 6])\n  [1, 3, 5, 6]\n  */\nconst oddList = (l) => {\n  const p = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2!== 0) {\n      p.push(l[i])\n    }\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number equal choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number equal choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1 || n === 0) return false\n  else if (n % 2 === 0) return false\n  else if (n < 2) return false\n  else if (n === 2) return true\n  else if (n % 3 === 0) return false\n  else if (n < 9) return true\n  else if (n % 5 === 0) return false\n  else if (n < 25) return true\n  else if (n % 7 === 0) return false\n  else if (n < 67) return true\n  else if (n % 11 === 0) return false\n  else if (n < 139) return true\n  else if (n % 13 === 0) return false\n  else if (n < 17) return true\n  else if (n % 17 === 0) return false\n  else if (n < 19) return true\n  else if (n % 19 === 0) return false\n  else if (n < 23) return true\n  else if (n % 23 === 0) return false\n  else if (n < 29) return true\n  else if (n % 29 === 0) return false\n  else if (n < 31) return true\n  else if (n % 31 === 0) return false\n  else if (n < 37) return true\n  else if (n % 37 === 0) return false\n  else if (n < 41) return true\n  else if (n % 41 === 0) return false\n  else if (n < 43) return true\n  else if (n % 43 === 0) return false\n  else if (n < 47) return true\n  else if (n % 47 === 0) return false\n  else if (n < 53) return true\n  else if (n % 53 === 0) return false\n  else if (n < 59) return true\n  else if (n % 59 === 0) return false\n  else if (n < 61) return true\n  else if (n % 61 === 0) return false\n  else if (n < 67) return true\n  else if (n % 67 === 0) return false\n  else if (n < 71) return true\n  else if (n % 71 === 0) return false\n  else if (n < 73) return true\n  else if (n % 73 === 0) return false\n  else if (n < 79) return true\n  else if (n % 79 === 0) return false\n  else if (n < 83) return true\n  else if (n % 83 === 0) return false\n  else if (n < 89) return true\n  else if (n % 89 === 0) return false\n  else if (n < 97) return true\n  else if (n % 97 === 0) return false\n  else if (n < 101) return true\n  else if (n % 101 === 0) return false\n  else if (n < 103) return true\n  else if (n % 103 === 0) return false\n  else if (n < 107) return true\n  else if (n % 107 === 0) return false\n  else if (n < 109) return true\n  else if (n % 109 === 0) return false\n  else if (n < 113) return true\n  else if (n % 113 === 0) return false\n  else if (n < 127) return true\n  else if (n % 127 === 0) return false\n  else if (n < 131) return true\n  else if (n % 131 === 0) return false\n  else if (n < 137) return true\n  else if (n % 137 === 0) return false\n  else if (n < 139) return true\n  else if (n % 139 === 0) return false\n  else if (n < 149) return true\n  else if (n % 149 === 0) return false\n  else if (n < 151) return true\n  else if (n % 151 === 0) return false\n  else if (n < 157) return true\n  else if (n % 157 === 0) return false\n  else if (n < 161) return true\n  else if (n % 161 === 0) return false\n  else if (n < 163) return true\n  else if (n % 163 === 0) return false\n  else if (n < 167) return true\n  else if (n % 167 === 0) return false\n  else if (n < 169) return true\n  else if (n % 169 === 0) return false\n  else if (n < 173) return true\n  else if (n % 173 === 0) return false\n  else if (n < 179) return true\n  else if (n % 179 === 0) return false\n  else if (n < 181) return true\n  else if (n % 181 === 0) return false\n  else if (n < 187) return true\n  else if (n % 187 === 0) return false\n  else if (n < 191) return true\n  else if (n % 191 === 0) return false\n  else if (n < 193) return true\n  else if (n % 193 === 0) return false\n  else if (n < 197) return true\n  else if (n % 197 === 0) return false\n  else if (n < 199) return true\n  else if (n % 199 === 0) return false\n  else if (n < 207) return true\n  else if (n % 207 === 0) return false\n  else if (n < 209) return true\n  else if (n % 209 === 0) return false\n  else if (n < 211) return true\n  else if (n % 211 === 0) return false\n  else if (n < 223) return true\n  else if (n % 223 === 0) return false\n  else if (n < 227) return true\n  else if (n % 227 === 0) return false\n  else if (n < 229) return true\n  else if (n % 229 === 0) return false\n  else if (n < 233) return true\n  else if (n % 233 === 0) return false\n  else if (n < 239) return true\n  else if (n % 239 === 0) return false\n  else if (n < 241) return true\n  else if (n % 241 === 0) return false\n  else if (n < 251) return true\n  else if (n % 251 === 0) return false\n"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero recurrence only entirely zero point, even if there exist many. \n   Moreover, findZero only carry list xs having even number of coefficient \n   and largest non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero recurrence only entirely zero point, even if there exist many. \n   Moreover, findZero only carry list xs having even number of coefficient \n   and largest non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if (xs.length === 1) return xs[0];\n  const n = xs.length - 1;\n  const a = xs[0];\n  const b = xs[n];\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return findZero(xs.slice(1, n)) - findZero(xs.slice(0, n));\n};\n\nconsole.log(findZero([1, 2, 3]));\nconsole.log(findZero([-6, 11, -6, 1]));\nconsole.log(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]));\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by three, while its value at the indicies that are divisible by three are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by three, while its value at the indicies that are divisible by three are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    const sorted = [...l];\n    for (let i = 0; i < sorted.length - 1; i += 3) {\n        if (sorted[i] % 3!== 0) {\n            sorted[i + 1] = sorted[i];\n            sorted[i] = sorted[i + 2];\n            sorted[i + 2] = sorted[i + 1];\n        }\n    }\n    return sorted;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const result = []\n  let uniqueIdx = 0\n  let idx = 0\n  let element = 0\n  while (idx < l.length) {\n    element = l[idx]\n    if (result.indexOf(element) === -1) {\n      result.push(element)\n    }\n    idx += 1\n  }\n  return result\n}\n\nexport default unique\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nexport default maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const fizz = () => {\n    return (n % 3 === 0)? 'Fizz' : '';\n  };\n  const buzz = () => {\n    return (n % 5 === 0)? 'Buzz' : '';\n  };\n  return n + fizz() + buzz();\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the odd indicies, while its values at the even indicies constitute equal \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the odd indicies, while its values at the even indicies constitute equal \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  return l.slice().sort((a, b) => {\n    if (a % 2 === 0 && b % 2 === 1) {\n      return b;\n    } else if (a % 2 === 1 && b % 2 === 0) {\n      return a;\n    } else {\n      return a;\n    }\n  });\n};\n\nconsole.log(sortEven([1, 2, 3]));\nconsole.log(sortEven([5, 6, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n   volt-ampere groups = [ ], groups2 = [ ];\n   for (const group of s.split('')) {\n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\nconst encode = (s) = > encode_cyclic(s);\n\nconst decode = (s) = > decode_cyclic(s);\n\n*/\n\nconst decode = (s) = > decode_cyclic(s);\n\nconsole.log('input ='+ encode(s));\nconsole.log('output ='+ decode(s));\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  let prev = 1;\n  let curr = 2;\n  while (curr < n) {\n    if (curr % 2 === 0) {\n      curr = primeFib(n - curr);\n      prev = primeFib(prev);\n    } else {\n      curr = primeFib(prev);\n    }\n  }\n  return curr;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const l = Array.from(l);\n    const seen = new Set();\n    const found = new Set();\n    const count = (num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        if (found.has(num)) {\n            return;\n        }\n        found.add(num);\n        if (l.reduce((pre, curr) => {\n            if (num + curr === 0) {\n                return true;\n            }\n            return pre;\n        }, false)) {\n            return true;\n        }\n    };\n    return l.reduce((pre, curr) => {\n        if (curr === 0) {\n            return true;\n        }\n        if (count(curr)) {\n            return false;\n        }\n        return pre;\n    }, true);\n};\n\n/*\n  triplesSumToOne takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to one, and false differently.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n    const l = Array.from(l);\n    const seen = new Set();\n    const found = new Set();\n    const count = (num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        if (found.has(num)) {\n            return;\n        }\n        found.add(num);\n        if (l.reduce((pre, curr) => {\n            if (num + curr === 1) {\n                return true;\n            }\n            return pre;\n        }, false)) {\n            return true;\n        }\n    };\n    return l.reduce((pre, curr) => {\n        if (curr === 1) {\n            return true;\n        }\n        if (count(curr)) {\n            return false;\n        }\n        return pre;\n    }, true);\n};\n\nmodule.exports = {\n    triplesSumToZero,\n    triplesSumToOne\n};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly square boundlessly long line. \n   n car are drive exit to correctly;   simultaneously, a unlike set of n car \n   are drive right to left.    The two sets of cars start out be very far from \n   each early.   All cars motivate in the like amphetamine.   Two cars are said to clash \n   when a car that's move left to proper hit a car that's move good to left. \n   However, the cars are infinitely sturdy and hard; as a solution, they continue be active \n   in their trajectory as if they did not clash. \n\n   This function output the number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly square boundlessly long line. \n   n car are drive exit to correctly;   simultaneously, a unlike set of n car \n   are drive right to left.    The two sets of cars start out be very far from \n   each early.   All cars motivate in the like amphetamine.   Two cars are said to clash \n   when a car that's move left to proper hit a car that's move good to left. \n   However, the cars are infinitely sturdy and hard; as a solution, they continue be active \n   in their trajectory as if they did not clash. \n\n   This function output the number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n  // init\n  int[] a = new int[n];\n  int[] b = new int[n];\n  int result = 0;\n  int count = 0;\n\n  // find the index of the first different\n  for (int i = 0; i < n; i++) {\n    if (a[i] == b[i]) {\n      continue;\n    } else {\n      // find the index of the second different\n      int j = i + 1;\n      for (; j < n; j++) {\n        if (a[i] == b[j]) {\n          break;\n        }\n      }\n      // find the index of the third different\n      int k = j + 1;\n      for (; k < n; k++) {\n        if (a[i] == b[k] || a[j] == b[k]) {\n          break;\n        }\n      }\n      // output\n      result = result + 1;\n      count = count + 2;\n    }\n  }\n  return count;\n}\n*/\npublic class Solution {\n    public int findCollision(int n) {\n        if (n < 3) {\n            return 0;\n        }\n        int[] a = new int[n];\n        int[] b = new int[n];\n        int result = 0;\n        int count = 0;\n\n        for (int i = 0; i < n; i++) {\n            a[i] = (i + 1) * (i + 1);\n        }\n        for (int i = 0; i < n; i++) {\n            b[i] = (i + 1) * (i + 1) + 1;\n        }\n\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (a[i] == b[j]) {\n                    result = result + 1;\n                    count = count + 2;\n                }\n            }\n        }\n        return count;\n    }\n}<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i, len;\n  let arr = l.slice(0);\n  len = arr.length;\n  for (i = 0; i < len; i++) {\n    arr[i]++;\n  }\n  return arr;\n};\n\n/**\n  * @method decrList\n  * @param {Array} l list\n  * @return {Array}\n  * Return list with elements decremented by 1.\n  *\n  * Return list with elements decremented by 1.\n  *\n  * @example\n  * //return list with elements decremented by 1.\n  * >>> decrList([1, 2, 3])\n  * [0, 1, 2]\n  * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  * [5, 3, 5, 2, 3, 3, 8, 1, 122]\n  *\n  * @example\n  * //return list with elements decremented by 1.\n  * >>> decrList([1, 2, 3])\n  * [2, 3, 4]\n  * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  *\n  */\nconst decrList = (l) => {\n  let i, len;\n  let arr = l.slice(0);\n  len = arr.length;\n  for (i = 0; i < len; i++) {\n    arr[i]--;\n  }\n  return arr;\n};\n\n/**\n  * @method sum\n  * @param {Array} l list\n  * @return {Number}\n  * Return sum of all elements in list.\n  *\n  * Return sum of all elements in list.\n  *\n  * @example\n  * //return sum of all elements in list.\n  * >>> sum([1, 2, 3])\n  * 6\n  * >>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  * 127\n  */\nconst sum = (l) => {\n  let i, len, sum;\n  sum = 0;\n  for (i = 0, len = l.length; i < len; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\nexport {\n  incrList,\n  decrList,\n  sum,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    const result = [];\n    for (let i = 0; i < l.length - 1; i++) {\n        const x = l[i];\n        const y = l[i + 1];\n        if (x === 0) {\n            if (y!== 0) {\n                result.push([x, y]);\n            }\n        }\n        if (y === 0) {\n            if (x!== 0) {\n                result.push([x, y]);\n            }\n        }\n    }\n    return result.length > 0;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return drawstring theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return drawstring theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base === 10) return x\n  if (x < 10) return x\n  let x = x.toString()\n  let y = \"\"\n  for (let i = x.length - 1; i >= 0; i--) {\n    y += x[i]\n    if (x[i]!== 0) break\n  }\n  let z = parseInt(y, base)\n  if (z === NaN) return \"\"\n  return z\n}\n\nconst findBase = (x) => {\n  for (let i = 2; i <= 10; i++) {\n    if (changeBase(x, i) === x) return i\n  }\n  return null\n}\n\nconst convert = (number, base) => {\n  if (base === 10) return number\n  if (base === 0) return \"\"\n  if (base === 1) return \"\"\n  let x = findBase(number)\n  if (x === null) return \"\"\n  if (x === base) return \"\"\n  let y = \"\"\n  while (number > 0) {\n    y = changeBase(number % x, base) + y\n    number = Math.floor(number / x)\n  }\n  return y\n}\n\nmodule.exports = convert\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * Math.sqrt(a * (a - h) * (a + h))) / 3;\n}\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst areaOfTriangle = (a, h) => {\n  return triangleArea(a, h) * a;\n}\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst areaOfSphere = (a, h) => {\n  return Math.pow(a * a - h * h, 1.0 / 3);\n}\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst volumeOfSphere = (a, h) => {\n  return a * a * a - a * a * h + a * h * h - h * h * h;\n}\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst surfaceAreaOfSphere = (a, h) => {\n  return 2 * (a * a - a * h + h * h);\n}\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst volumeOfCube = (a, h) => {\n  return a * a * a * a - a * a * a * h + a * a * h * h - a * h * h * h;\n}\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst volumeOfTetrahedron = (a, h) => {\n  return areaOfSphere(a, h) + areaOfSphere(h, a) + areaOfSphere(h, h);\n}\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst volumeOfCube = (a, h) => {\n  return a * a * a * a - a * a * a * h + a * a * h * h - a * h * h * h;\n}\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst volumeOfTetrahedron = (a, h) => {\n  return areaOfSphere(a, h) + areaOfSphere(h, a) + areaOfSphere(h, h);\n}\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst surfaceAreaOfTetrahedron = (a, h) => {\n  return 2 * (areaOfSphere(a, h) + areaOfSphere(h, a) + areaOfSphere(h, h));\n}\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst surfaceAreaOfCube = (a, h) => {\n  return 2 * (areaOfSphere(a, h) + areaOfSphere(h, a) + areaOfSphere(h, h));\n}\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst surfaceAreaOfSphere = (a, h) => {\n  return Math.pow(a * a - h * h, 1.0 / 3);\n}\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst surfaceAreaOfCube = (a, h) => {\n  return Math.pow(a * a * a - a * a * h + a * h * h - h * h * h, 1.0 / 3);\n}\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst volumeOfSphere = (a, h) => {\n  return a * a * a * a - a * a * a * h + a * a * h * h - a * h * h * h;\n}\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst surfaceAreaOfSphere = (a, h) => {\n  return 2 * (a * a - a * h + h * h);\n}\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst volumeOfCube = (a, h) => {\n  return a * a * a * a - a * a * a * h + a * a * h * h - a * h * h * h;\n}\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst surfaceAreaOfCube = (a, h) => {\n  return 2 * (a * a * a - a * a * h + a * h * h);\n}\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst volumeOfTetrahedron = (a, h) => {\n  return a * a * a * a - a * a * a * h + a * a * h * h - a * h * h * h;\n}\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst surfaceAreaOfTetrahedron = (a, h) => {\n  return 2 * (areaOfSphere(a, h) + areaOfSphere(h, a) + areaOfSphere(h, h));\n}\n\n/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst surfaceAreaOfCube ="}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please publish a affair to efficiently calculate the n-th component of the fib4 phone number sequence.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please publish a affair to efficiently calculate the n-th component of the fib4 phone number sequence.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) {\n    return n;\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n  }\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 1) {\n    return l[0];\n  }\n  let mid = Math.floor(l.length / 2);\n  return (l[mid] + l[l.length - mid]) / 2;\n};\n\n/*\n  Return sum of all elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  50\n  */\nconst sum = (l) => {\n  return l.reduce((a, b) => a + b);\n};\n\n/*\n  Return average of elements in the list l.\n  >>> average([3, 1, 2, 4, 5])\n  3.0\n  >>> average([-10, 4, 6, 1000, 10, 20])\n  10.0\n  */\nconst average = (l) => {\n  return sum(l) / l.length;\n};\n\n/*\n  Return list of all elements that are not equal to a given element.\n  >>> difference([3, 1, 2, 4, 5], 3)\n  [4, 5]\n  >>> difference([3, 1, 2, 4, 5], 5)\n  [3, 4]\n  >>> difference([3, 1, 2, 4, 5], 4)\n  [3, 5]\n  >>> difference([3, 1, 2, 4, 5], 2)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 1)\n  [3, 2, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], -10)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], -4)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], -3)\n  [4, 5]\n  >>> difference([3, 1, 2, 4, 5], -2)\n  [4, 5]\n  >>> difference([3, 1, 2, 4, 5], -1)\n  [4, 5]\n  >>> difference([3, 1, 2, 4, 5], -0)\n  [4, 5]\n  >>> difference([3, 1, 2, 4, 5], 0)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 1)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 2)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 3)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 4)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 5)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 6)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 7)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 8)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 9)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 10)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 11)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 12)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 13)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 14)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 15)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 16)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 17)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 18)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 19)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 20)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 21)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 22)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 23)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 24)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 25)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 26)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 27)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 28)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 29)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 30)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 31)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 32)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 33)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 34)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4, 5], 35)\n  [3, 4, 5]\n  >>> difference([3, 1, 2, 4"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": false, "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let str = text.split('');\n  if(str.length === 1) return true;\n  if(str.length === 2) return str[0] === str[1];\n  let mid = Math.floor(str.length/2);\n  return str[0] === str[str.length-1] && str[0] === str[mid] && isPalindrome(str.slice(1,str.length-1));\n};\n\nexport default isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  n = n % p\n  while (n < 0) {\n    n += p\n  }\n  return n\n}\n\n/**\n * Returns a random integer that is less than or equal to `max`.\n *\n * @param {Number} max - The maximum integer.\n * @returns {Number} A random integer that is less than or equal to `max`.\n */\nconst randomInt = (max) => {\n  const i = Math.floor(Math.random() * max)\n  return i\n}\n\n/**\n * Returns a random integer that is greater than or equal to `min`.\n *\n * @param {Number} min - The minimum integer.\n * @returns {Number} A random integer that is greater than or equal to `min`.\n */\nconst randomIntGT = (min) => {\n  const i = Math.floor(Math.random() * (min - 1)) + min\n  return i\n}\n\n/**\n * Returns a random integer that is less than or equal to `max`.\n *\n * @param {Number} max - The maximum integer.\n * @returns {Number} A random integer that is less than or equal to `max`.\n */\nconst randomIntLT = (max) => {\n  const i = Math.floor(Math.random() * max)\n  return i\n}\n\n/**\n * Returns a random integer that is greater than or equal to `min`.\n *\n * @param {Number} min - The minimum integer.\n * @returns {Number} A random integer that is greater than or equal to `min`.\n */\nconst randomIntGT = (min) => {\n  const i = Math.floor(Math.random() * (min - 1)) + min\n  return i\n}\n\n/**\n * Return a random integer that is greater than or equal to `min` and less than\n * or equal to `max`.\n *\n * @param {Number} min - The minimum integer.\n * @param {Number} max - The maximum integer.\n * @returns {Number} A random integer that is greater than or equal to `min` and\n *     less than or equal to `max`.\n */\nconst randomIntLT = (min, max) => {\n  const i = Math.floor(Math.random() * (max - min)) + min\n  return i\n}\n\n/**\n * Returns a random integer that is greater than or equal to `min` and less than\n * or equal to `max`.\n *\n * @param {Number} min - The minimum integer.\n * @param {Number} max - The maximum integer.\n * @returns {Number} A random integer that is greater than or equal to `min` and\n *     less than or equal to `max`.\n */\nconst randomIntGT = (min, max) => {\n  const i = Math.floor(Math.random() * (max - min)) + min\n  return i\n}\n\n/**\n * Return a random integer that is less than or equal to `max` and greater than\n * or equal to `min`.\n *\n * @param {Number} min - The minimum integer.\n * @param {Number} max - The maximum integer.\n * @returns {Number} A random integer that is less than or equal to `max` and\n *     greater than or equal to `min`.\n */\nconst randomIntLTGT = (min, max) => {\n  const i = Math.floor(Math.random() * (max - min)) + min\n  return i\n}\n\n/**\n * Returns a random integer that is greater than or equal to `min` and less than\n * or equal to `max`.\n *\n * @param {Number} min - The minimum integer.\n * @param {Number} max - The maximum integer.\n * @returns {Number} A random integer that is greater than or equal to `min` and\n *     less than or equal to `max`.\n */\nconst randomIntGT = (min, max) => {\n  const i = Math.floor(Math.random() * (max - min)) + min\n  return i\n}\n\nmodule.exports = {\n  modp,\n  randomInt,\n  randomIntGT,\n  randomIntLT,\n  randomIntLTGT,\n  randomIntGT\n}\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes as remark string encode with encode_shift routine. return decoded string. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as remark string encode with encode_shift routine. return decoded string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     (ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n   ).join(\"\"); \n }\n\n*/\n\n//TODO: add to the class a way to know if the code is valid\n//TODO: add a check if the code is correct\n\n//TODO: add a method to change the quality\n\nfunction encodeShift(str) {\n  return str.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) ) % 26) + \" a\".charCodeAt(0)\n  )).join(\" \");\n}\n\nfunction decodeShift(str) {\n  return str.split(\" \").map(ch => String.fromCharCode(\n    (ch.charCodeAt(0) - \" a\".charCodeAt(0) ) % 26) + \" a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n//TODO: add a method to change the quality\n\n//TODO: add a method to check if the code is valid\n\nfunction encode(str) {\n  return encodeShift(str);\n}\n\nfunction decode(str) {\n  return decodeShift(str);\n}\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add a method to check if the code is valid\n\n//TODO: add"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string and returns drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  text = text.toLowerCase();\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'á', 'é', 'í', 'ó', 'ú'];\n  let result = text;\n  for (let i = 0; i < vowels.length; i++) {\n    result = result.replace(new RegExp(`[${vowels[i]}]`, 'g'), '');\n  }\n  return result;\n};\n\nconst drawstring = (text, string) => {\n  if (string === undefined) {\n    string = 'abcdefghijklmnopqrstuvwxyz';\n  }\n  return text.split('').map(character => {\n    const index = string.indexOf(character);\n    return index > -1? string.charAt(index) : character;\n  }).join('');\n};\n\nconst wordCount = (text) => {\n  let counter = 0;\n  text = removeVowels(text);\n  text = drawstring(text, '0123456789');\n  while (text.length > 0) {\n    counter++;\n    text = text.slice(1);\n  }\n  return counter;\n};\n\nconsole.log(wordCount('a')); //1\nconsole.log(wordCount('aa')); //1\nconsole.log(wordCount('aaa')); //1\nconsole.log(wordCount('aaaa')); //1\nconsole.log(wordCount('aaaaa')); //2\nconsole.log(wordCount('aaaaaa')); //2\nconsole.log(wordCount('aaaaaaa')); //2\nconsole.log(wordCount('aaaaaaaa')); //2\nconsole.log(wordCount('aaaaaaaaa')); //3\nconsole.log(wordCount('aaaaaaaaaa')); //3\nconsole.log(wordCount('aaaaaaaaaaa')); //3\nconsole.log(wordCount('aaaaaaaaaaaa')); //3\nconsole.log(wordCount('aaaaaaaaaaaaa')); //4\nconsole.log(wordCount('aaaaaaaaaaaaaa')); //4\nconsole.log(wordCount('aaaaaaaaaaaaaaa')); //4\nconsole.log(wordCount('aaaaaaaaaaaaaaaa')); //4\nconsole.log(wordCount('aaaaaaaaaaaaaaaaa')); //5\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaa')); //5\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaa')); //5\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaa')); //5\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaa')); //6\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaa')); //6\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaa')); //6\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaa')); //6\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaa')); //7\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaa')); //7\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaa')); //7\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //7\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //8\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //8\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //8\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //8\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //9\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //9\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //9\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //9\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //10\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //10\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //10\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //10\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //11\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //11\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //11\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //11\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //12\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //12\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //12\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //12\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //13\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //13\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //13\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //13\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //14\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //14\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //14\nconsole.log(wordCount('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')); //14\nconsole.log(wordCount('aaaaaaaaaaaa"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": false, "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const sorted = l.sort((a, b) => a - b);\n  const min = sorted[0];\n  return min <= t;\n};\n\n/*\n  Return the index of the minimum number in the list l.\n  >>> minIndex([1, 2, 3])\n  0\n  >>> minIndex([1, 2, 3, 4])\n  3\n  >>> minIndex([1, 2, 3, 4, 5])\n  2\n  >>> minIndex([1, 2, 3, 4, 5, 6])\n  5\n  */\nconst minIndex = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  return sorted.indexOf(sorted[0]);\n};\n\n/*\n  Return the index of the maximum number in the list l.\n  >>> maxIndex([1, 2, 3])\n  0\n  >>> maxIndex([1, 2, 3, 4])\n  1\n  >>> maxIndex([1, 2, 3, 4, 5])\n  2\n  >>> maxIndex([1, 2, 3, 4, 5, 6])\n  5\n  */\nconst maxIndex = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  return sorted.indexOf(sorted[sorted.length - 1]);\n};\n\n/*\n  Return the sum of all the numbers in the list l.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, 3, 4])\n  10\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5, 6])\n  21\n  */\nconst sum = (l) => {\n  return l.reduce((a, b) => a + b);\n};\n\n/*\n  Return the number of all the numbers in the list l.\n  >>> count([1, 2, 3])\n  3\n  >>> count([1, 2, 3, 4])\n  4\n  >>> count([1, 2, 3, 4, 5])\n  5\n  >>> count([1, 2, 3, 4, 5, 6])\n  6\n  */\nconst count = (l) => {\n  return l.length;\n};\n\n/*\n  Return the median number in the list l.\n  >>> median([1, 2, 3])\n  2.5\n  >>> median([1, 2, 3, 4])\n  3\n  >>> median([1, 2, 3, 4, 5])\n  3.5\n  >>> median([1, 2, 3, 4, 5, 6])\n  4.0\n  */\nconst median = (l) => {\n  const len = l.length;\n  if (len === 0) {\n    return NaN;\n  }\n  const middle = len / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  if (len % 2 === 1) {\n    return middle + (left[middle] - right[middle]);\n  } else {\n    return (left[middle - 1] + right[middle]) / 2;\n  }\n};\n\n/*\n  Return the mean number in the list l.\n  >>> mean([1, 2, 3])\n  2.0\n  >>> mean([1, 2, 3, 4])\n  2.5\n  >>> mean([1, 2, 3, 4, 5])\n  3.0\n  >>> mean([1, 2, 3, 4, 5, 6])\n  3.5\n  */\nconst mean = (l) => {\n  const sum = sum(l);\n  return sum / count(l);\n};\n\n/*\n  Return the standard deviation of the list l.\n  >>> std([1, 2, 3, 4, 5, 6])\n  2.72222\n  >>> std([1, 2, 3, 4, 5, 6, 7])\n  3.54721\n  >>> std([1, 2, 3, 4, 5, 6, 7, 8])\n  4.06965\n  */\nconst std = (l) => {\n  const mean = mean(l);\n  const sum = sum(l) - mean * count(l);\n  return Math.sqrt(sum / count(l));\n};\n\nmodule.exports = {\n  min,\n  max,\n  minIndex,\n  maxIndex,\n  sum,\n  count,\n  median,\n  mean,\n  std,\n  belowThreshold,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  if(x === 0) {\n    return y\n  }\n  if(y === 0) {\n    return x\n  }\n  return x + y\n}\n\n/*Add two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  if(x === 0) {\n    return -y\n  }\n  if(y === 0) {\n    return x\n  }\n  return x - y\n}\n\n/*Add two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  if(x === 0) {\n    return 0\n  }\n  if(y === 0) {\n    return 0\n  }\n  return x * y\n}\n\n/*Add two numbers x and y\n  >>> divide(2, 3)\n  0\n  >>> divide(5, 7)\n  2\n  */\nconst divide = (x, y) => {\n  if(x === 0) {\n    return 0\n  }\n  if(y === 0) {\n    return 0\n  }\n  if(y === 1) {\n    return x\n  }\n  return x / y\n}\n\n/*Add two numbers x and y\n  >>> mod(2, 3)\n  1\n  >>> mod(5, 7)\n  4\n  */\nconst mod = (x, y) => {\n  if(x === 0) {\n    return 0\n  }\n  if(y === 0) {\n    return 0\n  }\n  return x % y\n}\n\n/*Add two numbers x and y\n  >>> gcd(2, 3)\n  1\n  >>> gcd(5, 7)\n  1\n  */\nconst gcd = (x, y) => {\n  if(x === 0) {\n    return y\n  }\n  if(y === 0) {\n    return x\n  }\n  return gcd(y, x % y)\n}\n\n/*Add two numbers x and y\n  >>> lcm(2, 3)\n  6\n  >>> lcm(5, 7)\n  35\n  */\nconst lcm = (x, y) => {\n  if(x === 0) {\n    return y\n  }\n  if(y === 0) {\n    return x\n  }\n  return x * y / gcd(x, y)\n}\n\nexport { add, subtract, multiply, divide, mod, gcd, lcm }\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const len = Math.min(s0.length, s1.length);\n    for (let i = 0; i < len; i++) {\n        if (s0.charCodeAt(i)!= s1.charCodeAt(i)) {\n            return false;\n        }\n    }\n    return true;\n};\n\nexport { sameChars };\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 0, b = 1, c;\n  for (; n > 0; n--) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};\n\nmodule.exports = fib;\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketsLeft = brackets.length;\n  let currentChar = '';\n  let bracketsClosed = bracketsLeft;\n  while (bracketsLeft--) {\n    currentChar = brackets[bracketsLeft];\n    if (currentChar === '>') {\n      bracketsClosed--;\n    }\n    if (currentChar === '<' && bracketsClosed === 0) {\n      return false;\n    }\n  }\n  return bracketsLeft === 0;\n};\n\n//  given a string of \" < \" and \" > \" brackets, return the string with brackets removed.\nconst removeBrackets = (brackets) => {\n  let bracketsLeft = brackets.length;\n  let currentChar = '';\n  let bracketsClosed = bracketsLeft;\n  let result = '';\n  while (bracketsLeft--) {\n    currentChar = brackets[bracketsLeft];\n    if (currentChar === '>') {\n      bracketsClosed--;\n      if (bracketsClosed === 0) {\n        result += '>';\n      }\n    }\n    if (currentChar === '<') {\n      bracketsClosed++;\n      if (bracketsClosed === bracketsLeft) {\n        result += '<';\n      }\n    }\n  }\n  return result;\n};\n\n//  given a string, return the string without any spaces\nconst removeSpaces = (string) => {\n  return string.replace(/\\s/g, '');\n};\n\nconst toCapitalizedString = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nconst toLowerCaseString = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\nconst toUpperCaseString = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nconst toNumber = (string) => {\n  return parseInt(string, 10);\n};\n\nconst toString = (number) => {\n  return number.toString();\n};\n\nconst toInteger = (string) => {\n  return parseInt(string, 10);\n};\n\nconst toFloat = (string) => {\n  return parseFloat(string);\n};\n\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n//  return a string with the string in reverse\nconst reverse = (string) => {\n  return string.split('').reverse().join('');\n};\n\nconst isInteger = (string) => {\n  return toInteger(string) === string;\n};\n\nconst isFloat = (string) => {\n  return toFloat(string) === string;\n};\n\nconst containsOnly = (string, allowed) => {\n  return string.split('').every(allowed);\n};\n\nconst containsOnlyUpper = (string) => {\n  return containsOnly(string, 'A-Z');\n};\n\nconst containsOnlyLower = (string) => {\n  return containsOnly(string, 'a-z');\n};\n\nconst containsOnlyNumbers = (string) => {\n  return containsOnly(string, '0-9');\n};\n\nconst containsOnlySpaces = (string) => {\n  return containsOnly(string,'');\n};\n\nconst containsOnlyChars = (string) => {\n  return containsOnly(string, 'A-Za-z');\n};\n\nconst containsOnlyCharsUpper = (string) => {\n  return containsOnlyChars(string) && containsOnlyUpper(string);\n};\n\nconst containsOnlyCharsLower = (string) => {\n  return containsOnlyChars(string) && containsOnlyLower(string);\n};\n\nconst containsOnlyCharsNumbers = (string) => {\n  return containsOnlyChars(string) && containsOnlyNumbers(string);\n};\n\nconst containsOnlyCharsSpaces = (string) => {\n  return containsOnlyChars(string) && containsOnlySpaces(string);\n};\n\nconst containsOnlyPunctuation = (string) => {\n  return containsOnlyChars(string) && containsOnlyPunctuation(string);\n};\n\nconst containsOnlyPunctuationUpper = (string) => {\n  return containsOnlyPunctuation(string) && containsOnlyUpper(string);\n};\n\nconst containsOnlyPunctuationLower = (string) => {\n  return containsOnlyPunctuation(string) && containsOnlyLower(string);\n};\n\nconst containsOnlyPunctuationNumbers = (string) => {\n  return containsOnlyPunctuation(string) && containsOnlyNumbers(string);\n};\n\nconst containsOnlyPunctuationSpaces = (string) => {\n  return containsOnlyPunctuation(string) && containsOnlySpaces(string);\n};\n\nconst containsOnlyPunctuationChars = (string) => {\n  return containsOnlyPunctuation(string) && containsOnlyChars(string);\n};\n\nconst containsOnlyPunctuationCharsUpper = (string) => {\n  return containsOnlyPunctuationChars(string) && containsOnlyUpper(string);\n};\n\nconst containsOnlyPunctuationCharsLower = (string) => {\n  return containsOnlyPunctuationChars(string) && containsOnlyLower(string);\n};\n\nconst containsOnlyPunctuationCharsNumbers = (string) => {\n  return containsOnlyPunctuationChars(string) && containsOnlyNumbers(string);\n};\n\nconst containsOnlyPunctuationCharsSpaces = (string) => {\n  return containsOnlyPunctuationChars(string) && containsOnlySpaces(string);\n};\n\nconst containsOnlyPunctuationPunctuation = (string) => {\n  return containsOnlyPunctuation(string) && containsOnlyPunctuation(string);\n};\n\nconst containsOnlyPunctuationPunctuationUpper = (string) => {\n  return containsOnlyPunctuationPunctuation(string) && containsOnlyUpper(string);\n};\n\nconst containsOnlyPunctuationPunctuationLower ="}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let a = l.slice();\n  a.sort();\n  return a.every((x, i) => x < a[i + 1]) || a.every((x, i) => x > a[i - 1]);\n};\n\nexport default monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  // convert to arrays\n  l1 = [...l1];\n  l2 = [...l2];\n  // sort l1\n  l1 = l1.sort((a, b) => a - b);\n  // sort l2\n  l2 = l2.sort((a, b) => a - b);\n  // for each element in l1\n  for (let i = 0; i < l1.length; i++) {\n    // for each element in l2\n    for (let j = 0; j < l2.length; j++) {\n      // if they are equal\n      if (l1[i] === l2[j]) {\n        // add them to the result\n        return [l1[i], l2[j]];\n      }\n    }\n  }\n  // no common elements\n  return [];\n};\n\n/*\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  []\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  []\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const factor = 2\n  let prime = 3\n\n  while (prime * prime < n) {\n    while (n % prime === 0) {\n      n /= prime\n      if (n === 1) return prime\n    }\n    prime += 2\n  }\n\n  if (n > 1) return n\n}\n\n// Return largest prime factor of n. Assume n > 1 and is not a flower.\nconst largestPrimeFactor_ = (n) => {\n  const factor = 2\n  let prime = 3\n\n  while (prime * prime < n) {\n    while (n % prime === 0) {\n      n /= prime\n      if (n === 1) return prime\n    }\n    prime += 2\n  }\n\n  if (n > 1) return n\n}\n\n// Return largest prime factor of n. Assume n > 1 and is not a flower.\nconst largestPrimeFactor2 = (n) => {\n  const factor = 2\n  let prime = 3\n\n  while (prime * prime < n) {\n    while (n % prime === 0) {\n      n /= prime\n      if (n === 1) return prime\n    }\n    prime += 2\n  }\n\n  if (n > 1) return n\n}\n\nconst largestPrimeFactor_2 = (n) => {\n  const factor = 2\n  let prime = 3\n\n  while (prime * prime < n) {\n    while (n % prime === 0) {\n      n /= prime\n      if (n === 1) return prime\n    }\n    prime += 2\n  }\n\n  if (n > 1) return n\n}\n\nconsole.log(largestPrimeFactor(13195))\nconsole.log(largestPrimeFactor(2048))\nconsole.log(largestPrimeFactor(4))\nconsole.log(largestPrimeFactor(2))\nconsole.log(largestPrimeFactor(3))\nconsole.log(largestPrimeFactor(9))\nconsole.log(largestPrimeFactor(10))\nconsole.log(largestPrimeFactor(13))\nconsole.log(largestPrimeFactor(29))\n\nconsole.log(largestPrimeFactor_(13195))\nconsole.log(largestPrimeFactor_(2048))\nconsole.log(largestPrimeFactor_(4))\nconsole.log(largestPrimeFactor_(2))\nconsole.log(largestPrimeFactor_(3))\nconsole.log(largestPrimeFactor_(9))\nconsole.log(largestPrimeFactor_(10))\nconsole.log(largestPrimeFactor_(13))\nconsole.log(largestPrimeFactor_(29))\n\nconsole.log(largestPrimeFactor2(13195))\nconsole.log(largestPrimeFactor2(2048))\nconsole.log(largestPrimeFactor2(4))\nconsole.log(largestPrimeFactor2(2))\nconsole.log(largestPrimeFactor2(3))\nconsole.log(largestPrimeFactor2(9))\nconsole.log(largestPrimeFactor2(10))\nconsole.log(largestPrimeFactor2(13))\nconsole.log(largestPrimeFactor2(29))\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": false, "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconsole.log(sumToN(10));\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const count = brackets.length\n  let opening = 1\n  let openingIndex = 0\n  let closing = 1\n  let closingIndex = 0\n  while (openingIndex < count && closingIndex < count) {\n    const openingBracket = brackets[openingIndex]\n    const closingBracket = brackets[closingIndex]\n    if (openingBracket === \"(\" && closingBracket === \")\") {\n      openingIndex++\n      closingIndex++\n    } else if (openingBracket === \")\" && closingBracket === \"(\") {\n      openingIndex--\n      closingIndex--\n    } else if (openingBracket === \"(\" && closingBracket === \")\") {\n      closingIndex++\n    } else if (openingBracket === \")\" && closingBracket === \"(\") {\n      openingIndex--\n    }\n    if (openingIndex < 0 || closingIndex < 0) {\n      return false\n    }\n  }\n  return openingIndex === 0 && closingIndex === 0\n}\n\n/*\n  removeComments removes all the comments from the given string\n  \n  >>> removeComments(\"Hello World! // comment\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment #2\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment #2 // comment\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment // comment\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! /* comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! /* comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! /* comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n  Hello World!\n  >>> removeComments(\"Hello World! // comment /* comment */\")\n"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same mannequin.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same mannequin.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let n = xs.length;\n  if (n === 0) {\n    return [1]\n  } else if (n === 1) {\n    return [2]\n  } else if (n === 2) {\n    return [3]\n  } else {\n    let [x, y] = xs;\n    let d = [];\n    let m = 2 * n - 1;\n    for (let i = 0; i < n; i++) {\n      d[i] = m * xs[i] + n * xs[i + 1];\n    }\n    return d;\n  }\n}\n\n/*\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 4, 12, 20, 28, 36, 44, 52]\n  */\n\nconst euler = (xs) => {\n  let n = xs.length;\n  let a = [];\n  let b = [];\n  let m = 1;\n  let t = 1;\n  for (let i = 0; i < n; i++) {\n    a[i] = 1;\n    b[i] = 0;\n  }\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d[i] = m * xs[i];\n  }\n  for (let i = n - 1; i > 0; i--) {\n    let ai = a[i];\n    let bi = b[i];\n    for (let j = i; j > 0; j--) {\n      a[j] = a[j - 1] - d[j];\n      b[j] = b[j - 1] + d[j];\n    }\n    a[0] = t * ai - bi;\n    b[0] = bi + t * ai;\n    t = 1 / ai;\n  }\n  return b;\n}\n\n/*\n  >>> euler([1, 2, 3])\n  [1, 4, 12, 20]\n  >>> euler([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> euler([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 4, 12, 20, 28, 36, 44, 52]\n  */\n\nconst eulerDerivative = (xs) => {\n  let n = xs.length;\n  let a = [];\n  let b = [];\n  let m = 1;\n  let t = 1;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    a[i] = 1;\n    b[i] = 0;\n  }\n  for (let i = n - 1; i > 0; i--) {\n    let ai = a[i];\n    let bi = b[i];\n    for (let j = i; j > 0; j--) {\n      a[j] = a[j - 1] - m * xs[j];\n      b[j] = b[j - 1] + m * xs[j];\n    }\n    a[0] = t * ai - bi;\n    b[0] = bi + t * ai;\n    t = 1 / ai;\n    m = m * (n - i);\n  }\n  return b;\n}\n\nconst eulerDerivative2 = (xs) => {\n  let n = xs.length;\n  let a = [];\n  let b = [];\n  let m = 1;\n  let t = 1;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    a[i] = 1;\n    b[i] = 0;\n  }\n  for (let i = n - 1; i > 0; i--) {\n    let ai = a[i];\n    let bi = b[i];\n    for (let j = i; j > 0; j--) {\n      a[j] = a[j - 1] - m * xs[j];\n      b[j] = b[j - 1] + m * xs[j];\n    }\n    a[0] = t * ai - bi;\n    b[0] = bi + t * ai;\n    t = 1 / ai;\n    m = m * (n - i);\n  }\n  return b;\n}\n\n/*\n  >>> euler([1, 2, 3, 4, 5])\n  [1, 4, 12, 20]\n  >>> euler([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> euler([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 4, 12, 20, 28, 36, 44, 52]\n  */\n\n/*\n  >>> eulerDerivative([1, 2, 3])\n  [1, 2, 3]\n  >>> eulerDerivative([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> eulerDerivative([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  */\n\nconst eulerIntegral = (xs) => {\n  let n = xs.length;\n  let a = [];\n  let b = [];\n  let m = 1;\n  let t = 1;\n  for (let i = 0; i < n; i++) {\n    a[i] = 1;\n    b[i] = 0;\n  }\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d[i] = m * x"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please publish a affair to efficiently calculate the n-th component of the fibfib phone number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please publish a affair to efficiently calculate the n-th component of the fibfib phone number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if(n === 1) return 0\n  else if(n === 2) return 1\n  else return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconsole.log(fibfib(10))\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const result = 0\n\n  for (let i = 0; i < s.length - 1; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      result += 1\n    }\n  }\n  if (vowels.indexOf(s[s.length - 1]) > -1) {\n    result += 1\n  }\n\n  return result\n}\n\n/*Write a function wordsCount which takes a string word, return the number of \n  words in the drawstring. Words are delimited by any non-alphabetic character. \n\n   exercise:\n  >>> wordsCount(\"abcde\")\n  1\n  >>> wordsCount(\"abcdeabc\")\n  2\n  >>> wordsCount(\"AceBc\")\n  2\n  */\nconst wordsCount = (s) => {\n  const result = 0\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/i)) {\n      result += 1\n    }\n  }\n\n  return result\n}\n\n/*Write a function wordsCount which takes a string word, return the number of \n  words in the drawstring. Words are delimited by any non-alphabetic character. \n\n   exercise:\n  >>> wordsCount(\"abcde\")\n  1\n  >>> wordsCount(\"abcdeabc\")\n  2\n  >>> wordsCount(\"AceBc\")\n  2\n  */\nconst lettersCount = (s) => {\n  const result = 0\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-zA-Z]/i)) {\n      result += 1\n    }\n  }\n\n  return result\n}\n\n/*Write a function wordsCount which takes a string word, return the number of \n  words in the drawstring. Words are delimited by any non-alphabetic character. \n\n   exercise:\n  >>> wordsCount(\"abcde\")\n  1\n  >>> wordsCount(\"abcdeabc\")\n  2\n  >>> wordsCount(\"AceBc\")\n  2\n  */\nconst numbersCount = (s) => {\n  const result = 0\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[0-9]/i)) {\n      result += 1\n    }\n  }\n\n  return result\n}\n\n/*Write a function wordsCount which takes a string word, return the number of \n  words in the drawstring. Words are delimited by any non-alphabetic character. \n\n   exercise:\n  >>> wordsCount(\"abcde\")\n  1\n  >>> wordsCount(\"abcdeabc\")\n  2\n  >>> wordsCount(\"AceBc\")\n  2\n  */\nconst allCount = (s) => {\n  const result = 0\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[0-9a-zA-Z]/i)) {\n      result += 1\n    }\n  }\n\n  return result\n}\n\nmodule.exports = {\n  vowelsCount,\n  wordsCount,\n  lettersCount,\n  numbersCount,\n  allCount\n}\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits veracious by shift\n   and return the resultant role as a bowed stringed instrument. \n   If shift > numeral of digits, return finger reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits veracious by shift\n   and return the resultant role as a bowed stringed instrument. \n   If shift > numeral of digits, return finger reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n    const newNumber = parseInt(x, 10);\n    if (newNumber < 0) {\n        return -1;\n    }\n\n    const newDigits = [];\n    let result = '';\n    for (let i = 0; i < newNumber.toString().length; i++) {\n        const shifted = parseInt(newNumber.toString().charAt(i), 10) + shift;\n        const newDigit = parseInt(shifted.toString().charAt(0), 10);\n        newDigits.push(newDigit);\n        result += newDigit;\n    }\n\n    return result;\n};\n\n/*\n  >>> circularShift(21, 1)\n  \"21\"\n  >>> circularShift(21, 2)\n  \"12\"\n  */\nconst circularShift2 = (x, shift) => {\n    const newDigits = parseInt(x, 10);\n    if (newDigits < 0) {\n        return -1;\n    }\n\n    const result = parseInt(newDigits.toString().charAt(0), 10) + shift;\n    const newDigits2 = parseInt(result.toString().charAt(0), 10);\n    return newDigits2;\n};\n\nmodule.exports = {\n    circularShift,\n    circularShift2,\n};<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n    let a = 0, b = 0, c = 0;\n    let i = 0;\n    for (i = 0; i < s.length; i++) {\n        if (s[i].length > 1) {\n            a = a + parseInt(s[i][0]);\n            b = b + parseInt(s[i][1]);\n            c = c + parseInt(s[i][2]);\n        } else {\n            a = a + parseInt(s[i]);\n        }\n    }\n    return a + b + c;\n}\n\nconst main = () => {\n    const res = digitSum(\"woArBld\");\n    console.log(`the sum of the string ${res} is ${res}`);\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a phone number of apple and oranges \n   that are distributed in a basket of fruit this basket contains \n   apples, orange, and mango yield. Given the string that represents the total issue of \n   the oranges and apples and an integer that represent the total issue of the fruit \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a string that represents a phone number of apple and oranges \n   that are distributed in a basket of fruit this basket contains \n   apples, orange, and mango yield. Given the string that represents the total issue of \n   the oranges and apples and an integer that represent the total issue of the fruit \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n   let result = 0\n   for (let i = 0; i < s.length; i++) {\n      let current = n\n      for (let j = 0; j < s[i].length; j++) {\n         if (s[i][j] === 'a') {\n            current--\n         } else if (s[i][j] === 'o') {\n            current--\n         } else if (s[i][j] ==='m') {\n            result++\n         }\n      }\n      n = current\n   }\n   return result\n }\n */<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch of a tree that has non - negative integer nodes \n   your task is to pluck one of the nodes and return it. \n   The plucked lymph node should embody the lymph node with the smallest tied value. \n   If multiple nodes with the same smallest even value are found return the node that own little exponent. \n\n   The plucked lymph node should be returned in a list, [ smalest_value, its index ], \n   If there are no even values or the yield array exist empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" Given an array representing a branch of a tree that has non - negative integer nodes \n   your task is to pluck one of the nodes and return it. \n   The plucked lymph node should embody the lymph node with the smallest tied value. \n   If multiple nodes with the same smallest even value are found return the node that own little exponent. \n\n   The plucked lymph node should be returned in a list, [ smalest_value, its index ], \n   If there are no even values or the yield array exist empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) return []\n  let min_exp = Number.MAX_SAFE_INTEGER\n  let min_index = -1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      let exp = arr[i]\n      if (exp < min_exp) {\n        min_exp = exp\n        min_index = i\n      }\n    }\n  }\n  if (min_exp === Number.MAX_SAFE_INTEGER) {\n    return [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]\n  }\n  return [arr[min_index], min_index]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const result = {};\n  for (let [index, number] of lst) {\n    if (number === 0) return -1;\n    if (!result[number]) {\n      result[number] = index;\n    }\n    if (index!== result[number]) {\n      return number;\n    }\n  }\n  return -1;\n}\n\n/*\n  You are given a non - empty list of non - increasing integers. Return the maximum integer that is less than \n   zero, and has a frequency less than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([3, 4, 2, 3, 1, 4, 3, 4, 4])) == -1\n      search([2, 3, 3, 3, 2, 3, 4, 4, 5, 6, 6, 6, 6, 5, 6, 6])) == -1\n  */\nconst search2 = (lst) => {\n  const result = {};\n  for (let [index, number] of lst) {\n    if (number === 0) return -1;\n    if (!result[number]) {\n      result[number] = index;\n    }\n    if (index!== result[number]) {\n      return number;\n    }\n  }\n  return -1;\n}\n\nexport {\n  search,\n  search2\n};<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   foreign sorting, is when you start with the minimum value, \n   then maximum of the remaining integers, then minimum and indeed on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   foreign sorting, is when you start with the minimum value, \n   then maximum of the remaining integers, then minimum and indeed on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let min = lst[0],\n    max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  lst.sort((a, b) => {\n    if (a < min) {\n      return 1;\n    }\n    if (b < min) {\n      return -1;\n    }\n    if (a > max) {\n      return 1;\n    }\n    if (b > max) {\n      return -1;\n    }\n    return 0;\n  });\n  return lst;\n};\n\nconsole.log(strangeSortList([1, 2, 3, 4]));\nconsole.log(strangeSortList([5, 5, 5, 5]));\nconsole.log(strangeSortList([]));\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n    // triangle area formula:\n    //     |a|b|c|\n    //  Area = |      |\n    //         |  (a+b+c)   |\n    //         |  /2         |\n    //         | /2          |\n    //         |/2           |\n    //  This is a triangle, but not a rectangle\n    if (a + b > c && b + c > a && c + a > b) {\n        return Math.sqrt(a * b * c) / 2;\n    } else {\n        return -1;\n    }\n};\n\nconst triangleArea1 = (a, b, c) => {\n    // triangle area formula:\n    //     |a|b|c|\n    //  Area = |      |\n    //         |  (a+b+c)   |\n    //         |  /2         |\n    //         | /2          |\n    //         |/2           |\n    //  This is a triangle, but not a rectangle\n    if (a + b > c && b + c > a && c + a > b) {\n        return Math.sqrt(a * b * c) / 2;\n    } else {\n        return -1;\n    }\n};\n\nconst triangleArea2 = (a, b, c) => {\n    // triangle area formula:\n    //     |a|b|c|\n    //  Area = |      |\n    //         |  (a+b+c)   |\n    //         |  /2         |\n    //         | /2          |\n    //         |/2           |\n    //  This is a triangle, but not a rectangle\n    if (a + b > c && b + c > a && c + a > b) {\n        return Math.sqrt(a * b * c) / 2;\n    } else {\n        return -1;\n    }\n};\n\nconst triangleArea3 = (a, b, c) => {\n    // triangle area formula:\n    //     |a|b|c|\n    //  Area = |      |\n    //         |  (a+b+c)   |\n    //         |  /2         |\n    //         | /2          |\n    //         |/2           |\n    //  This is a triangle, but not a rectangle\n    if (a + b > c && b + c > a && c + a > b) {\n        return Math.sqrt(a * b * c) / 2;\n    } else {\n        return -1;\n    }\n};\n\nconst triangleArea4 = (a, b, c) => {\n    // triangle area formula:\n    //     |a|b|c|\n    //  Area = |      |\n    //         |  (a+b+c)   |\n    //         |  /2         |\n    //         | /2          |\n    //         |/2           |\n    //  This is a triangle, but not a rectangle\n    if (a + b > c && b + c > a && c + a > b) {\n        return Math.sqrt(a * b * c) / 2;\n    } else {\n        return -1;\n    }\n};\n\nconst triangleArea5 = (a, b, c) => {\n    // triangle area formula:\n    //     |a|b|c|\n    //  Area = |      |\n    //         |  (a+b+c)   |\n    //         |  /2         |\n    //         | /2          |\n    //         |/2           |\n    //  This is a triangle, but not a rectangle\n    if (a + b > c && b + c > a && c + a > b) {\n        return Math.sqrt(a * b * c) / 2;\n    } else {\n        return -1;\n    }\n};\n\nconst triangleArea6 = (a, b, c) => {\n    // triangle area formula:\n    //     |a|b|c|\n    //  Area = |      |\n    //         |  (a+b+c)   |\n    //         |  /2         |\n    //         | /2          |\n    //         |/2           |\n    //  This is a triangle, but not a rectangle\n    if (a + b > c && b + c > a && c + a > b) {\n        return Math.sqrt(a * b * c) / 2;\n    } else {\n        return -1;\n    }\n};\n\nconst triangleArea7 = (a, b, c) => {\n    // triangle area formula:\n    //     |a|b|c|\n    //  Area = |      |\n    //         |  (a+b+c)   |\n    //         |  /2         |\n    //         | /2          |\n    //         |/2           |\n    //  This is a triangle, but not a rectangle\n    if (a + b > c && b + c > a && c + a > b) {\n        return Math.sqrt(a * b * c) / 2;\n    } else {\n        return -1;\n    }\n};\n\nconst triangleArea8 = (a, b, c) => {\n    // triangle area formula:\n    //     |a|b|c|\n    //  Area = |      |\n    //         |  (a+b+c)   |\n    //         |  /2         |\n    //         | /2          |\n    //         |/2           |\n    //  This is a triangle, but not a rectangle\n    if (a + b > c && b + c > a && c + a > b) {\n        return Math.sqrt(a * b * c) / 2;\n    } else {\n        return -1;\n    }\n};\n\nconst triangleArea9 = (a, b, c) => {\n    // triangle area formula:\n    //     |a|"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the aim q will fly, and assumed differently. \n   The aim q will vanish if it's balanced (it is a palindromic list) and the union of its elements equal less than or equal the maximum possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true if the aim q will fly, and assumed differently. \n   The aim q will vanish if it's balanced (it is a palindromic list) and the union of its elements equal less than or equal the maximum possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let a = [...q].sort();\n  let b = [...q].reverse().sort();\n  let c = a.concat(b);\n  return c.reduce((sum, n) => sum + n <= w, 0)\n};\n\nconsole.log(willItFly([1, 2], 5));\nconsole.log(willItFly([3, 2, 3], 1));\nconsole.log(willItFly([3], 5));\nconsole.log(willItFly([1], 5));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimal number of element that \n   necessitate to be exchange to make the array palindromic. A palindromic array is an array that \n   is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find the minimal number of element that \n   necessitate to be exchange to make the array palindromic. A palindromic array is an array that \n   is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length - 1; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i]!= arr[j] && arr[i] < arr[j]) {\n        result++;\n      }\n    }\n  }\n  return result;\n}\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2,"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of string and retort the list that has \n   total number of char in the all strings of the list less than the early list.\n\n   if the two lists hold the like number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of string and retort the list that has \n   total number of char in the all strings of the list less than the early list.\n\n   if the two lists hold the like number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const diff = lst2.length - lst1.length;\n  if (diff < 0) {\n    return lst1;\n  }\n  return lst2.length < lst1.length? lst1 : lst2;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns dependable if the feed number is the generation of 3 prime numbers \n   and false otherwise. \n   know that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns dependable if the feed number is the generation of 3 prime numbers \n   and false otherwise. \n   know that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return a % 2 === 1 && isPrime(a)\n  }\n  let i = 3\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  return (x % n === 0) && (x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n))));\n}\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and return on-key \n   if this ingeger is a block of some integer number. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integer a and return on-key \n   if this ingeger is a block of some integer number. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n    let [n,d] = a.toString().split('.');\n    let nn = parseInt(n);\n    let dd = parseInt(d);\n    let m = (nn + dd) / 2;\n    return m % 2 == 1;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives \n   a hexadecimal number as a chain and count the number of hexadecimal \n   digits that are primes (flower number=== or a prime=== is a lifelike issue \n   greater than 1 that be not a product of two smaller lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime act are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you get to specify a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== five hundred (= decimal 13). \n   Note: you may wear the stimulation is always right or empty string=== \n   and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a function that receives \n   a hexadecimal number as a chain and count the number of hexadecimal \n   digits that are primes (flower number=== or a prime=== is a lifelike issue \n   greater than 1 that be not a product of two smaller lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime act are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you get to specify a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== five hundred (= decimal 13). \n   Note: you may wear the stimulation is always right or empty string=== \n   and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n    var hexKey = \"\";\n    var n = parseInt(num, 16);\n    if (isNaN(n)) {\n        return 0;\n    }\n    var nDigits = num.length;\n    var numDigits = 0;\n    for (var i = 0; i < nDigits; i++) {\n        var nDigit = n % 16;\n        if (nDigit === 0) {\n            nDigit = 0;\n        } else {\n            nDigit = nDigit + 48;\n        }\n        hexKey += nDigit;\n        n = n / 16;\n        numDigits++;\n    }\n    return numDigits;\n}\nconst hexKey_2 = (num) => {\n    var hexKey = \"\";\n    var n = parseInt(num, 16);\n    if (isNaN(n)) {\n        return 0;\n    }\n    var nDigits = num.length;\n    var numDigits = 0;\n    for (var i = 0; i < nDigits; i++) {\n        var nDigit = n % 16;\n        if (nDigit === 0) {\n            nDigit = 0;\n        } else {\n            nDigit = nDigit + 48;\n        }\n        hexKey += nDigit;\n        n = n / 16;\n        numDigits++;\n    }\n    return numDigits;\n}\nconst isPrime = (num) => {\n    var n = parseInt(num, 16);\n    if (isNaN(n)) {\n        return 0;\n    }\n    var nDigits = num.length;\n    var nDigits_2 = num.length;\n    var sum = 0;\n    for (var i = 0; i < nDigits; i++) {\n        sum += Math.pow(n, nDigits - 1 - i);\n    }\n    if (sum === n) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\nconst primeNumbers = (num) => {\n    var n = parseInt(num, 16);\n    if (isNaN(n)) {\n        return 0;\n    }\n    var nDigits = num.length;\n    var nDigits_2 = num.length;\n    var sum = 0;\n    for (var i = 0; i < nDigits; i++) {\n        sum += Math.pow(n, nDigits - 1 - i);\n    }\n    if (sum === n) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\nconst hexToDecimal = (num) => {\n    var n = parseInt(num, 16);\n    if (isNaN(n)) {\n        return 0;\n    }\n    var nDigits = num.length;\n    var numDigits = 0;\n    for (var i = 0; i < nDigits; i++) {\n        numDigits += Math.pow(n, nDigits - 1 - i) * nDigits;\n    }\n    return numDigits;\n}\n\nconsole.log(hexKey(\"AB\"));\nconsole.log(hexKey_2(\"1077E\"));\nconsole.log(isPrime(\"AB\"));\nconsole.log(primeNumbers(\"AB\"));\nconsole.log(hexToDecimal(\"1077E\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task equal to commute it to \n   binary format. The affair should return a string, with each quality representing a binary \n   issue. Each quality in the string will be' 0' or' 1'. \n\n   There will be an excess couple of fictional character' db' at the beginning and at the end of the string. \n   The excess character are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal form and your task equal to commute it to \n   binary format. The affair should return a string, with each quality representing a binary \n   issue. Each quality in the string will be' 0' or' 1'. \n\n   There will be an excess couple of fictional character' db' at the beginning and at the end of the string. \n   The excess character are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = ''\n  const base = 2\n  let decimalNumber = 0\n  for (let i = 0; i < decimal.length; i++) {\n    decimalNumber = (decimalNumber * base) + parseInt(decimal[i])\n  }\n  while (decimalNumber > 0) {\n    const currentBit = decimalNumber % base\n    decimalNumber = decimalNumber / base\n    binary = currentBit + binary\n  }\n  binary = 'db' + binary\n  binary = 'db' + binary\n  return binary\n}\n\n/*\n  Input:\n  1)\n  \n  Output:\n  \"1111011010011\"\n  \n  2)\n  \n  Output:\n  \"0111100101101\"\n  \n  3)\n  \n  Output:\n  \"1011011110111\"\n  \n  4)\n  \n  Output:\n  \"1110110110111\"\n  \n  5)\n  \n  Output:\n  \"0111011011011\"\n  \n  6)\n  \n  Output:\n  \"1011011011011\"\n  \n  7)\n  \n  Output:\n  \"1110110110111\"\n  \n  8)\n  \n  Output:\n  \"0111011011011\"\n  \n  9)\n  \n  Output:\n  \"1011011011011\"\n  \n  10)\n  \n  Output:\n  \"1110110110111\"\n  \n  11)\n  \n  Output:\n  \"0111011011011\"\n  \n  12)\n  \n  Output:\n  \"1011011011011\"\n  \n  13)\n  \n  Output:\n  \"1110110110111\"\n  \n  14)\n  \n  Output:\n  \"0111011011011\"\n  \n  15)\n  \n  Output:\n  \"1011011011011\"\n  \n  16)\n  \n  Output:\n  \"1110110110111\"\n  \n  17)\n  \n  Output:\n  \"0111011011011\"\n  \n  18)\n  \n  Output:\n  \"1011011011011\"\n  \n  19)\n  \n  Output:\n  \"1110110110111\"\n  \n  20)\n  \n  Output:\n  \"0111011011011\"\n*/\nconst reverseBinary = (binary) => {\n  const reversedBinary = []\n  for (let i = 0; i < binary.length; i++) {\n    reversedBinary.push(binary[binary.length - 1 - i])\n  }\n  return reversedBinary.join('')\n}\n\n// export {decimalToBinary, reverseBinary}\n\n/*\n  TODO: \n  1)\n  \n  Output:\n  \"1111011010011\"\n  \n  2)\n  \n  Output:\n  \"0111100101101\"\n  \n  3)\n  \n  Output:\n  \"1011011110111\"\n  \n  4)\n  \n  Output:\n  \"1110110110111\"\n  \n  5)\n  \n  Output:\n  \"0111011011011\"\n  \n  6)\n  \n  Output:\n  \"1011011011011\"\n  \n  7)\n  \n  Output:\n  \"1110110110111\"\n  \n  8)\n  \n  Output:\n  \"0111011011011\"\n  \n  9)\n  \n  Output:\n  \"1011011011011\"\n  \n  10)\n  \n  Output:\n  \"1110110110111\"\n  \n  11)\n  \n  Output:\n  \"0111011011011\"\n  \n  12)\n  \n  Output:\n  \"1011011011011\"\n  \n  13)\n  \n  Output:\n  \"1110110110111\"\n  \n  14)\n  \n  Output:\n  \"0111011011011\"\n  \n  15)\n  \n  Output:\n  \"1011011011011\"\n  \n  16)\n  \n  Output:\n  \"1110110110111\"\n  \n  17)\n  \n  Output:\n  \"0111011011011\"\n  \n  18)\n  \n  Output:\n  \"1011011011011\"\n  \n  19)\n  \n  Output:\n  \"1110110110111\"\n  \n  20)\n  \n  Output:\n  \"0111011011011\"\n*/\nconst reverseString = (binary) => {\n  const reversedBinary = reverseBinary(binary)\n  const reversedString = ''\n  for (let i = 0; i < reversedBinary.length; i++) {\n    reversedString = reversedString + reversedBinary[reversedBinary.length - 1 - i]\n  }\n  return reversedString\n}\n\n/*\n  TODO:\n  1)\n  \n  Output:\n  \"1111011010011\"\n  \n  2)\n  \n  Output:\n  \"0111100101101\"\n  \n  3)\n  \n  Output:\n  \"1011011110111\"\n  \n  4)\n  \n  Output:\n  \"1110110110111\"\n  \n  5)\n  \n  Output:\n  \"0111011011011\"\n  \n  6)\n  \n  Output:\n  \"1011011011011\"\n  \n  7)\n  \n  Output:\n  \"1110110110111\"\n  \n  8)\n  \n  Output:\n  \"0111011011011\"\n  \n  9)\n  \n  Output:\n  \"1011011011011\"\n  \n  10)\n  \n  Output:\n  "}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task is to check if the drawstring is glad or not. \n   A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   Your task is to check if the drawstring is glad or not. \n   A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (!s ||!s.length) return false;\n  let res = s.split('').reduce((sum, c) => sum + (isVowel(c)? 3 : 1), 0);\n  return res >= 3 && res % 3 === 0;\n};\n\n/*\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\n\n// testcase\nconsole.assert(isHappy('a'));\nconsole.assert(isHappy('aa'));\nconsole.assert(isHappy('abcd'));\nconsole.assert(isHappy('aabb'));\nconsole.assert(isHappy('adb'));\nconsole.assert(isHappy('xyy'));\nconsole.assert(!isHappy('aaa'));\nconsole.assert(!isHappy('aaa'));\nconsole.assert(!isHappy('aaa'));\nconsole.assert(!isHappy('xyz'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to pass the grades\n   to student. The teacher has been making her own algorithm for grading. \n   The alone problem is, she has lose the code she used for grading. \n   She has given you a list of grade point average for some students and you experience to write \n   a function that can output a list of letter grades use the following mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 speed of light \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher has to pass the grades\n   to student. The teacher has been making her own algorithm for grading. \n   The alone problem is, she has lose the code she used for grading. \n   She has given you a list of grade point average for some students and you experience to write \n   a function that can output a list of letter grades use the following mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 speed of light \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const num = grades.reduce((acc, val) => {\n    if (val < 3.7) {\n      acc = 'A';\n    } else if (val < 3.3) {\n      acc = 'B';\n    } else if (val < 3.0) {\n      acc = 'C-';\n    } else if (val < 2.7) {\n      acc = 'D';\n    } else if (val < 2.3) {\n      acc = 'E';\n    } else {\n      acc = 'F';\n    }\n    return acc;\n  }, 'A');\n  return ['A+', 'B', 'C-', 'C', 'A-'].filter((val, index) => num.indexOf(val) === index);\n};\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]));<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const num = string.length\n  const i = 2\n  const isPrime = (number) => {\n    if (number > 1) {\n      let j = 2\n      while (j < number) {\n        if (number % j === 0) {\n          return false\n        }\n        j += 1\n      }\n    }\n    return true\n  }\n  for (; i < num; i++) {\n    if (!isPrime(i)) {\n      return false\n    }\n  }\n  return true\n}\n\nmodule.exports = primeLength\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numeral of n-digit\n   convinced integers that begin or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numeral of n-digit\n   convinced integers that begin or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n  let sum = 0,\n    i = 0;\n  for (; i < n; i++) {\n    sum += n - i;\n  }\n  return sum;\n}\n\n// __________________________________________\n// Problem #5: Determine if a number is prime\n//\n// The prime function is defined as:\n// \n// function isPrime(n) {\n//   if (n < 2) return false;\n//   if (n == 2) return true;\n//   if (n == 3) return true;\n//   if (n % 2 == 0) return false;\n//   return (n * Math.floor(Math.sqrt(n)) == n);\n// }\n\n// __________________________________________\n// Problem #6: Determine the last ten digits of NNNNNN\n//\n// Given an integer NNNNNN, return the last ten digits of NNNNNN.\n// __________________________________________\n// Problem #7: Determine if a number is a palindrome\n//\n// The palindrome function is defined as:\n// \n// function isPalindrome(n) {\n//   return (n + '').split('').reverse().join('') == n;\n// }\n\n// __________________________________________\n// Problem #8: Determine the difference between the sum of the \n// square of the digits of a number and the number itself\n//\n// The difference function is defined as:\n// \n// function difference(n) {\n//   return (n * Math.floor(Math.sqrt(n))).toString().split('').reduce((a, b) => a + b, 0);\n// }\n\n// __________________________________________\n// Problem #9: Determine the largest prime number smaller than a \n// certain number}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total union of its digit in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return the total union of its digit in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let total = 0;\n  let star = [];\n  while (N > 0) {\n    star.unshift(N % 2);\n    total += star.pop();\n    N = Math.floor(N / 2);\n  }\n  return total;\n};\n\nconst main = () => {\n  let test = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100];\n  console.log(solve(test[0]));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const odd = lst.find((item) => item % 2!== 0);\n  const even = lst.find((item) => item % 2 === 0);\n  if (odd === undefined && even === undefined) {\n    return lst;\n  }\n  return [odd, even].concat(lst.filter((item) => item % 2 === 0));\n};\n\nexport default add;\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and return an coherent version of it. \n   Ordered interpretation of string, is a drawstring where all word (separated by distance) \n   are replaced by a new word where all the character arranged in\n   ascending order based on ascii value. \n   bill: You should keep the decree of word and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string and return an coherent version of it. \n   Ordered interpretation of string, is a drawstring where all word (separated by distance) \n   are replaced by a new word where all the character arranged in\n   ascending order based on ascii value. \n   bill: You should keep the decree of word and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n    const map = new Map()\n    const arr = s.split(' ')\n    for (let i = 0; i < arr.length; i++) {\n        let word = arr[i]\n        let arrWord = word.split('')\n        for (let j = 0; j < arrWord.length; j++) {\n            if (map.has(arrWord[j])) {\n                map.set(arrWord[j], map.get(arrWord[j]) + 1)\n            } else {\n                map.set(arrWord[j], 1)\n            }\n        }\n    }\n    let result = ''\n    for (let i = 0; i < arr.length; i++) {\n        let word = arr[i]\n        let arrWord = word.split('')\n        let sum = 0\n        for (let j = 0; j < arrWord.length; j++) {\n            sum += map.get(arrWord[j])\n        }\n        let a = Math.floor(sum / arrWord.length)\n        let b = sum % arrWord.length\n        let char = arrWord[Math.floor(a)].toUpperCase()\n        let newChar = arrWord[Math.floor(b)].toUpperCase()\n        result += char + newChar\n    }\n    return result\n}\n\nconsole.log(antiShuffle('Hi') === 'Hi')\nconsole.log(antiShuffle('hello') === 'ehllo')\nconsole.log(antiShuffle('Hello World!!!') === 'Hello!!!Wdlor')\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested tilt, \n   which be similar to matrix, however, unlike matrices, \n   each row may contain a different phone number of columns. \n   hold lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (quarrel, columns), starting with 0. \n   Sort coordinate initially by row in ascend holy order. \n   Also, sort coordinates of the row by columns in descend order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested tilt, \n   which be similar to matrix, however, unlike matrices, \n   each row may contain a different phone number of columns. \n   hold lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (quarrel, columns), starting with 0. \n   Sort coordinate initially by row in ascend holy order. \n   Also, sort coordinates of the row by columns in descend order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  // Sort row and columns by rows in ascending order\n  lst.sort((a, b) => a[0] - b[0]);\n  \n  // Sort coordinate by columns in descending order\n  const row = lst.map((el, rowIdx) => {\n    const cols = [...lst.slice(rowIdx + 1, lst.length - 1)];\n    cols.sort((a, b) => b - a);\n    return [x,...cols];\n  });\n  \n  return row;\n};\n\nexport default getRow;\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integer, return a copy of the give array after screen, \n   you will screen the given array in ascend order if the union (first exponent value, concluding index value) exist odd, \n   or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n   Note: \n   * don't change the yield array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non - negative integer, return a copy of the give array after screen, \n   you will screen the given array in ascend order if the union (first exponent value, concluding index value) exist odd, \n   or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n   Note: \n   * don't change the yield array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n    if (array.length === 0) return array;\n    let sortedArray = array.slice(0);\n    let len = sortedArray.length;\n    if (len > 2) {\n        let begin = 0;\n        let end = len - 1;\n        while (begin < end) {\n            let mid = (begin + end) / 2;\n            if (sortedArray[mid] % 2 === 1) {\n                end = mid;\n            } else {\n                begin = mid + 1;\n            }\n        }\n        if (sortedArray[end] % 2 === 0) {\n            sortedArray.sort((a, b) => b - a);\n        } else {\n            sortedArray.sort((a, b) => a - b);\n        }\n    }\n    return sortedArray;\n};\n\nmodule.exports = sortArray;<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argumentation and \n   retort a string encrypted with the rudiment being rotated. \n   The alphabet should be rotated in a manner such that the letter \n   switch down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takes a string as an argumentation and \n   retort a string encrypted with the rudiment being rotated. \n   The alphabet should be rotated in a manner such that the letter \n   switch down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let str = s.split('').map(char => char.charCodeAt(0)).sort().join('')\n  let strLen = str.length\n  let i = strLen\n  let j = 0\n  let k = 0\n  let n = strLen - 1\n  let rot = 1\n  let rotated = []\n  while (i < strLen) {\n    rotated[j] = str[i]\n    rotated[j] = str[i + rot]\n    rot = rot * 2\n    i = i + rot\n    j = j + 1\n  }\n  return rotated.join('')\n}\n\nconsole.log(encrypt('hi'))\nconsole.log(encrypt('asdfghjkl'))\nconsole.log(encrypt('gf'))\nconsole.log(encrypt('et'))\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write a function nextSmallest() that return the second smallest component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   Write a function nextSmallest() that return the second smallest component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n  const min = Math.min\n  const sort = (a, b) = > a - b\n  let n = lst.length\n  return (n <= 1)? null : lst[1]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let isBored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      isBored++;\n    }\n  }\n  return isBored;\n};\n\nconsole.log(isBored(\"Hello world\")); // 0\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather\")); // 1\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const xInt = Number(x);\n  const yInt = Number(y);\n  const zInt = Number(z);\n  const intSum = xInt + yInt + zInt;\n  return intSum > 0 && intSum % 1 === 0;\n};\n\n/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntInRange = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max && nInt % 1 === 0;\n};\n\nconst anyIntInRange2 = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max;\n};\n\n/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntInRange3 = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max;\n};\n\nconst anyIntInRange4 = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max;\n};\n\nconst anyIntInRange5 = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max;\n};\n\nconst anyIntInRange6 = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max;\n};\n\nconst anyIntInRange7 = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max;\n};\n\nconst anyIntInRange8 = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max;\n};\n\nconst anyIntInRange9 = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max;\n};\n\nconst anyIntInRange10 = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max;\n};\n\nconst anyIntInRange11 = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max;\n};\n\nconst anyIntInRange12 = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max;\n};\n\nconst anyIntInRange13 = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max;\n};\n\nconst anyIntInRange14 = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max;\n};\n\nconst anyIntInRange15 = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max;\n};\n\nconst anyIntInRange16 = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max;\n};\n\nconst anyIntInRange17 = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max;\n};\n\nconst anyIntInRange18 = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max;\n};\n\nconst anyIntInRange19 = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max;\n};\n\nconst anyIntInRange20 = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max;\n};\n\nconst anyIntInRange21 = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max;\n};\n\nconst anyIntInRange22 = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max;\n};\n\nconst anyIntInRange23 = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max;\n};\n\nconst anyIntInRange24 = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max;\n};\n\nconst anyIntInRange25 = (min, max, n) => {\n  const nInt = Number(n);\n  return nInt >= min && nInt <= max;\n};\n\nconst anyIntInRange26 = (min, max, n) =>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a message, and encodes in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const encoded = message.split('');\n  for (let i = 0; i < encoded.length; i++) {\n    if (isVowel(encoded[i])) {\n      if (i + 2 < encoded.length && isVowel(encoded[i + 2])) {\n        encoded[i] = encoded[i + 2];\n      }\n    }\n  }\n  return encoded.join('');\n};\n\n/*\n  Write a function that takes a message, and decodes it in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> decode('TGST')\n  'test'\n  >>> decode('This is a message')\n  'this is a message'\n  */\nconst decode = (message) => {\n  const encoded = message.split('');\n  let decoded = '';\n  for (let i = 0; i < encoded.length; i++) {\n    if (isVowel(encoded[i])) {\n      if (i + 2 < encoded.length && isVowel(encoded[i + 2])) {\n        decoded += encoded[i] + encoded[i + 2];\n      } else {\n        decoded += encoded[i];\n      }\n    } else {\n      decoded += encoded[i];\n    }\n  }\n  return decoded;\n};\n\nmodule.exports = {\n  encode,\n  decode\n};\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need to find the large choice value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers. \n   You need to find the large choice value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let largest = 0,\n        sum = 0;\n    lst.forEach((e) => {\n        if (largest < e) {\n            largest = e;\n        }\n    });\n    for (let i = largest; i >= 1; i--) {\n        let c = 0;\n        for (let j = largest; j >= 1; j--) {\n            if (lst.indexOf(j) > -1) {\n                c += (j / i).toString().charAt(0);\n            }\n        }\n        sum += parseInt(c);\n    }\n    return sum;\n}\n\nconst test_cases = [\n    [\n        [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3], 10\n    ],\n    [\n        [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1], 25\n    ],\n    [\n        [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3], 13\n    ],\n    [\n        [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6], 11\n    ],\n    [\n        [0, 81, 12, 3, 1, 21], 3\n    ],\n    [\n        [0, 8, 1, 2, 1, 7], 7\n    ]\n];\n\ntest_cases.forEach(t => {\n    console.log(`Test case: ${t[0].join(', ')}`);\n    console.log(`Answer: ${skjkasdkd(t[0])}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys equal string in lower \n   case or all key are strings in upper lawsuit, else return false. \n   The routine should return false is the give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys equal string in lower \n   case or all key are strings in upper lawsuit, else return false. \n   The routine should return false is the give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const lowerCaseKeys = keys.map(key => key.toLowerCase())\n  const upperCaseKeys = keys.map(key => key.toUpperCase())\n  return lowerCaseKeys.every(key => {\n    return dict[key] === key || dict[key] === key.toUpperCase()\n  }) || upperCaseKeys.every(key => {\n    return dict[key] === key || dict[key] === key.toLowerCase()\n  })\n}\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict)\n  return keys.every(key => {\n    return dict[key] === key || dict[key] === key.toUpperCase()\n  })\n}\n\nmodule.exports = {\n  checkDictCase,\n  checkDict\n}\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n <= 0) {\n    return [];\n  }\n\n  const array = [];\n  let count = 1;\n  while (count <= n) {\n    if (isPrime(count)) {\n      array.push(count);\n    }\n    count++;\n  }\n  return array;\n};\n\n/*Implement a function that takes an non - negative integer and returns the sum of the squares of the\n  digits of the number.\n  for example:\n  sumOfSquares(3) => 9\n  sumOfSquares(8) => 64\n  sumOfSquares(10) => 3628\n  sumOfSquares(20) => 93864\n  sumOfSquares(100) => 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and return \n   the intersection of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes two integers and return \n   the intersection of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let [ a_int, a_dec ] = parseInt(a);\n  let [ b_int, b_dec ] = parseInt(b);\n  let a_dec_digit = a_dec.charAt(0);\n  let b_dec_digit = b_dec.charAt(0);\n  let new_digit = a_dec_digit + b_dec_digit;\n  let new_int = a_int * b_int;\n  if (new_int === 0) {\n    return 0;\n  }\n  else if (new_int === 9999) {\n    return 9999;\n  }\n  else {\n    return new_int + new_digit;\n  }\n}\n\nconst sum = (a, b) => {\n  return a + b;\n}\n\nconst subtract = (a, b) => {\n  return a - b;\n}\n\nconst multiply_with_zero = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_one = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_two = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_three = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_four = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_five = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_six = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_seven = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_eight = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_nine = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_ten = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_eleven = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_twelve = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_thirteen = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_fourteen = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_fifteen = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_sixteen = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_seventeen = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_eighteen = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_nineteen = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_twenty = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_twentyone = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_twentytwo = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_twentythree = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_twentyfour = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_twentyfive = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_twentysix = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_twentyseven = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_twentyeight = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_twentynine = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_thirty = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_thirtyone = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_thirtytwo = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_thirtythree = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_thirtyfour = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_thirtyfive = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_thirtysix = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_thirtyseven = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_thirtyeight = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_thirtynine = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_forty = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_fortyone = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with_fortytwo = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply_with"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count the number of capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let result = 0;\n  \n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i]) {\n      result += 1;\n    }\n  }\n  \n  return result;\n}\n\n//# sourceMappingURL=countUpper.js.map<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) exemplify a issue \n   and returns the closest integer to it. If the number is equidistant \n   from two integers, polish it away from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value (string) exemplify a issue \n   and returns the closest integer to it. If the number is equidistant \n   from two integers, polish it away from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  // Your code here\n  var closest = 0;\n  var distance = value - closest;\n  if (distance < 0) {\n    closest = Math.abs(value);\n  } else if (distance > 0) {\n    closest = closest + 1;\n  }\n  return closest;\n};\n\n/*\n  Find the nth prime number, where n is given as an input.\n  exercise\n  >>> nthPrime(0)\n  2\n  >>> nthPrime(1)\n  3\n  >>> nthPrime(2)\n  5\n  >>> nthPrime(3)\n  7\n  >>> nthPrime(4)\n  11\n  >>> nthPrime(5)\n  13\n  >>> nthPrime(6)\n  17\n  >>> nthPrime(7)\n  19\n  >>> nthPrime(8)\n  23\n  >>> nthPrime(9)\n  29\n  >>> nthPrime(10)\n  31\n  >>> nthPrime(11)\n  37\n  >>> nthPrime(12)\n  41\n  >>> nthPrime(13)\n  43\n  >>> nthPrime(14)\n  47\n  >>> nthPrime(15)\n  49\n  >>> nthPrime(16)\n  53\n  >>> nthPrime(17)\n  59\n  >>> nthPrime(18)\n  61\n  >>> nthPrime(19)\n  67\n  >>> nthPrime(20)\n  71\n  >>> nthPrime(21)\n  73\n  >>> nthPrime(22)\n  79\n  >>> nthPrime(23)\n  83\n  >>> nthPrime(24)\n  89\n  >>> nthPrime(25)\n  97\n  >>> nthPrime(26)\n  101\n  >>> nthPrime(27)\n  103\n  >>> nthPrime(28)\n  107\n  >>> nthPrime(29)\n  109\n  >>> nthPrime(30)\n  113\n  >>> nthPrime(31)\n  127\n  >>> nthPrime(32)\n  131\n  >>> nthPrime(33)\n  137\n  >>> nthPrime(34)\n  139\n  >>> nthPrime(35)\n  143\n  >>> nthPrime(36)\n  147\n  >>> nthPrime(37)\n  151\n  >>> nthPrime(38)\n  157\n  >>> nthPrime(39)\n  163\n  >>> nthPrime(40)\n  167\n  >>> nthPrime(41)\n  173\n  >>> nthPrime(42)\n  179\n  >>> nthPrime(43)\n  181\n  >>> nthPrime(44)\n  191\n  >>> nthPrime(45)\n  193\n  >>> nthPrime(46)\n  197\n  >>> nthPrime(47)\n  199\n  >>> nthPrime(48)\n  211\n  >>> nthPrime(49)\n  223\n  >>> nthPrime(50)\n  227\n  >>> nthPrime(51)\n  229\n  >>> nthPrime(52)\n  233\n  >>> nthPrime(53)\n  239\n  >>> nthPrime(54)\n  251\n  >>> nthPrime(55)\n  257\n  >>> nthPrime(56)\n  263\n  >>> nthPrime(57)\n  269\n  >>> nthPrime(58)\n  271\n  >>> nthPrime(59)\n  277\n  >>> nthPrime(60)\n  281\n  >>> nthPrime(61)\n  283\n  >>> nthPrime(62)\n  293\n  >>> nthPrime(63)\n  307\n  >>> nthPrime(64)\n  311\n  >>> nthPrime(65)\n  313\n  >>> nthPrime(66)\n  317\n  >>> nthPrime(67)\n  331\n  >>> nthPrime(68)\n  337\n  >>> nthPrime(69)\n  347\n  >>> nthPrime(70)\n  349\n  >>> nthPrime(71)\n  353\n  >>> nthPrime(72)\n  359\n  >>> nthPrime(73)\n  367\n  >>> nthPrime(74)\n  373\n  >>> nthPrime(75)\n  379\n  >>> nthPrime(76)\n  383\n  >>> nthPrime(77)\n  389\n  >>> nthPrime(78)\n  397\n  >>> nthPrime(79)\n  401\n  >>> nthPrime(80)\n  409\n  >>> nthPrime(81)\n  419\n  >>> nthPrime(82)\n  421\n  >>> nthPrime(83)\n  431\n  >>> nthPrime(84)\n  433\n  >>> nthPrime(85)\n  439\n  >>> nthPrime(86)\n  443\n  >>> nthPrime(87)\n  449\n  >>> nthPrime(88)\n  457\n  >>> nthPrime(89)\n  461\n  >>> nthPrime(90)\n  463\n  >>> nthPrime(91)\n  467\n  >>> nthPrime(92)\n  471\n  >>> nthPrime(93)\n  479\n  >>> nthPrime(94)\n  487\n  >>> nthPrime(95)\n  491\n  >>> nthPrime(96)\n  499\n  >>> nthPrime(97)\n  503\n  >>> nthPrime(98)\n  509\n  >>> nthPrime(99)\n  521\n  >>> nthPrime(100)\n  523\n  >>> nthPrime(101)\n  541\n  >>> nthPrime(102)\n  547\n  >>> nthPrime(103)\n  557\n  >>> nthPrime(104)\n  563\n  >>> nthPrime(105)\n  569"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const odd = (n) => {\n    return n % 2 === 1? n + 1 : n;\n  }\n\n  const even = (n) => {\n    return n % 2 === 0? n + 1 : n;\n  }\n\n  const num = even(n);\n\n  const levels = []\n\n  for (let i = 0; i < num; i++) {\n    levels.push(odd(i));\n  }\n\n  for (let i = num; i < n; i++) {\n    levels.push(even(i));\n  }\n\n  return levels;\n};\n\nconsole.log(makeAPile(4));\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/(\\s|,)/)\n  return words.map(s => s.replace(/\\s/g, ''))\n}\n\nconsole.log(wordsString('One, two, three, four, five, six'))\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and return the \n   big even integer numeral that is in the image [x, y] inclusive. If \n   there's no such issue, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive numbers x and y and return the \n   big even integer numeral that is in the image [x, y] inclusive. If \n   there's no such issue, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x\n  }\n  return Math.min(x, y) + Math.max(x, y) + 1\n}\n\nconst checkOverlap = (x1, y1, x2, y2) => {\n  if (x1 <= x2) {\n    return x2 < y1 || x2 < y2\n  } else {\n    return x1 < y1 || x1 < y2\n  }\n}\n\nconst checkOverlapAndInclude = (x1, y1, x2, y2, include) => {\n  if (checkOverlap(x1, y1, x2, y2)) {\n    return (include && x1 <= x2) || (!include && x1 < x2)\n  } else {\n    return false\n  }\n}\n\nconst chooseNumAndInclude = (x, y, include) => {\n  let num = chooseNum(x, y)\n  if (num < 0) {\n    return -1\n  } else {\n    return checkOverlapAndInclude(x, y, num, y, include)\n  }\n}\n\nconst check = (num, include) => {\n  return checkOverlapAndInclude(num, 0, num, 10, include)\n}\n\nconst isValid = (num) => {\n  return check(num, true)\n}\n\nconst isNotValid = (num) => {\n  return!isValid(num)\n}\n\nconsole.log(isValid(chooseNum(3, 7)))\nconsole.log(isValid(chooseNum(5, 6)))\nconsole.log(isNotValid(chooseNum(7, 5)))\nconsole.log(isNotValid(chooseNum(8, 5)))\nconsole.log(isNotValid(chooseNum(4, 8)))\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) return -1;\n  const sum = n + m;\n  const avg = sum / 2;\n  const result = Math.round(avg);\n  return result.toString(2);\n};\n\nmodule.exports = roundedAvg;<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n    const unique = []\n    let count = 0\n    for (let i = 0; i < x.length; i++) {\n        let a = x[i]\n        let b = unique[count]\n        if (a!== b) {\n            unique.push(a)\n        }\n        count++\n    }\n    return unique\n}\n\nconsole.log(uniqueDigits([15, 33, 1422, 1, 1, 10, 152, 323]))\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integer that are between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integer that are between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  return arr.map((x) => {\n    return (x % 10 === 1 && x!== 1)? 'One' : (x % 10 === 2 && x!== 2)? 'Two' : (x % 10 === 3 && x!== 3)? 'Three' : (x % 10 === 4 && x!== 4)? 'Four' : (x % 10 === 5 && x!== 5)? 'Five' : (x % 10 === 6 && x!== 6)? 'Six' : (x % 10 === 7 && x!== 7)? 'Seven' : (x % 10 === 8 && x!== 8)? 'Eight' : (x % 10 === 9 && x!== 9)? 'Nine' : x;\n  });\n}\n\nconst byLengthReverse = (arr) => {\n  return arr.map((x) => {\n    return (x % 10 === 1 && x!== 1)? 'One' : (x % 10 === 2 && x!== 2)? 'Two' : (x % 10 === 3 && x!== 3)? 'Three' : (x % 10 === 4 && x!== 4)? 'Four' : (x % 10 === 5 && x!== 5)? 'Five' : (x % 10 === 6 && x!== 6)? 'Six' : (x % 10 === 7 && x!== 7)? 'Seven' : (x % 10 === 8 && x!== 8)? 'Eight' : (x % 10 === 9 && x!== 9)? 'Nine' : x;\n  }).reverse();\n}\n\nconst byLengthReversed = (arr) => {\n  return arr.map((x) => {\n    return (x % 10 === 1 && x!== 1)? 'One' : (x % 10 === 2 && x!== 2)? 'Two' : (x % 10 === 3 && x!== 3)? 'Three' : (x % 10 === 4 && x!== 4)? 'Four' : (x % 10 === 5 && x!== 5)? 'Five' : (x % 10 === 6 && x!== 6)? 'Six' : (x % 10 === 7 && x!== 7)? 'Seven' : (x % 10 === 8 && x!== 8)? 'Eight' : (x % 10 === 9 && x!== 9)? 'Nine' : x;\n  }).reverse();\n}\n\nconst byLengthReverseReversed = (arr) => {\n  return arr.map((x) => {\n    return (x % 10 === 1 && x!== 1)? 'One' : (x % 10 === 2 && x!== 2)? 'Two' : (x % 10 === 3 && x!== 3)? 'Three' : (x % 10 === 4 && x!== 4)? 'Four' : (x % 10 === 5 && x!== 5)? 'Five' : (x % 10 === 6 && x!== 6)? 'Six' : (x % 10 === 7 && x!== 7)? 'Seven' : (x % 10 === 8 && x!== 8)? 'Eight' : (x % 10 === 9 && x!== 9)? 'Nine' : x;\n  }).reverse();\n}\n\nconst sortArr = (arr) => {\n  return arr.sort((x, y) => {\n    if (x > y) {\n      return 1;\n    } else if (x < y) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n}\n\nconst sortArrReverse = (arr) => {\n  return arr.sort((x, y) => {\n    if (x < y) {\n      return 1;\n    } else if (x > y) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n}\n\nconst sortArrReversed = (arr) => {\n  return arr.sort((x, y) => {\n    if (x < y) {\n      return 1;\n    } else if (x > y) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n}\n\nconst sortArrReverseReversed = (arr) => {\n  return arr.sort((x, y) => {\n    if (x > y) {\n      return 1;\n    } else if (x < y) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n}\n\nconst sortArrReverseReversedReverse = (arr) => {\n  return arr.sort((x, y) => {\n    if (x < y) {\n      return 1;\n    } else if (x > y) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n}\n\nconst byLengthSorted = (arr) => {\n  return byLength(sortArr(arr));\n}\n\nconst byLengthSortedReverse = (arr) => {\n  return byLengthReverse(sortArrReverse(arr));\n}\n\nconst byLengthSortedReversed = (arr) => {\n  return byLengthReverseReversed(sortArrReversed(arr));\n}\n\nconst byLengthSortedReverseReversed = (arr) => {\n  return byLengthRever"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter, \n   and return a list of size n, such that the value of the component at index i is the factorial of i if i is even \n   or the union of numbers from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takes n as a parameter, \n   and return a list of size n, such that the value of the component at index i is the factorial of i if i is even \n   or the union of numbers from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factors = new Array(n)\n  for (let i = 1; i < n; i++) {\n    for (let j = i; j < n; j += i) {\n      factors[j] = factors[j - i] + i\n    }\n  }\n  return factors\n}\n\n//console.log(f(5))\n//console.log(f(10))<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const start = 1;\n  const end = Math.pow(10, 3) - 1;\n  const nums = [];\n  for (let i = start; i < end; i++) {\n    nums.push(i);\n  }\n\n  let even = 0;\n  let odd = 0;\n  let sum = 0;\n\n  for (let i = 0; i < nums.length; i++) {\n    let k = nums[i];\n    let num = parseInt(k, 10);\n    if (num % 2 === 0) {\n      sum += k;\n      even += k;\n    } else {\n      sum += k * k;\n      odd += k * k;\n    }\n  }\n\n  return {\n    even,\n    odd,\n    sum\n  }\n}\n\nexport default evenOddPalindrome;<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0. \n   If a number be negative, then its first sign digit will be minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0. \n   If a number be negative, then its first sign digit will be minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const arrLen = arr.length;\n  let count = 0;\n\n  for (let i = 0; i < arrLen; i++) {\n    let currentSum = 0;\n    for (let j = i; j < arrLen; j++) {\n      currentSum += arr[j];\n    }\n\n    if (currentSum > 0) {\n      count++;\n    }\n  }\n\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordain. Your undertaking is to settle if \n   it is possible to catch an array classify in non - decreasing ordering by performing \n   the following mathematical process on the given array: \n       You are allowed to perform right shift key process any numeral of time. \n  \n   One right shift operation means shifting all component of the array by one \n   status in the right direction. The concluding component of the array will be move to \n   the starting side in the array i.e. 0th exponent. \n\n   If it exist possible to prevail the sorted array by perform the above mathematical process \n   then return dependable else return false. \n   If the grant array is empty then return on-key. \n\n   Note: The give list is guaranteed to have alone elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordain. Your undertaking is to settle if \n   it is possible to catch an array classify in non - decreasing ordering by performing \n   the following mathematical process on the given array: \n       You are allowed to perform right shift key process any numeral of time. \n  \n   One right shift operation means shifting all component of the array by one \n   status in the right direction. The concluding component of the array will be move to \n   the starting side in the array i.e. 0th exponent. \n\n   If it exist possible to prevail the sorted array by perform the above mathematical process \n   then return dependable else return false. \n   If the grant array is empty then return on-key. \n\n   Note: The give list is guaranteed to have alone elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    // Your code here.\n    const num = arr.length;\n    if (num === 1) return true;\n    let arr_copy = arr.slice(0);\n    let max = arr_copy.pop();\n    while (arr_copy.length > 1) {\n        const i = arr_copy.length - 1;\n        const j = i - 1;\n        if (arr_copy[j] > max) {\n            max = arr_copy[j];\n            arr_copy[j] = arr_copy[i];\n            arr_copy[i] = max;\n        }\n        arr_copy.pop();\n    }\n    return arr_copy.length === 1;\n};\n\nconsole.log(moveOneBall([3, 4, 5, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two tilt of number, \n   and determines whether it is possible to do an exchange of elements \n   between them to make lst1 a list of only even number. \n   There is no limit on the phone number of exchanged elements between lst1 and lst2.\n   If it is possible to exchange element between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function that takes two tilt of number, \n   and determines whether it is possible to do an exchange of elements \n   between them to make lst1 a list of only even number. \n   There is no limit on the phone number of exchanged elements between lst1 and lst2.\n   If it is possible to exchange element between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n    let exchangeList = [];\n    let lst1Iter = lst1.next();\n    let lst2Iter = lst2.next();\n\n    while (lst1Iter && lst2Iter) {\n        exchangeList.push(lst1Iter.value);\n        if (lst1Iter.value === lst2Iter.value) {\n            lst1Iter.value = lst2Iter.value;\n            lst2Iter.value = lst1Iter.value;\n        }\n        lst1Iter.value = lst1Iter.value + 1;\n        lst2Iter.value = lst2Iter.value + 1;\n        lst1Iter = lst1.next();\n        lst2Iter = lst2.next();\n    }\n\n    return (lst1Iter && lst2Iter)? \"NO\" : \"YES\";\n};\n\nexport default exchange;<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let count = 0\n  let dict = {}\n  let chars = test.split(' ')\n  for (let i = 0; i < chars.length; i++) {\n    count += chars[i].length\n    if (dict[chars[i]] === undefined) {\n      dict[chars[i]] = 1\n    } else {\n      dict[chars[i]]++\n    }\n  }\n  return dict\n}\n\nexport default histogram\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings s and c, you have to erase all the character in s that are equal to any fictional character in c\n   then control if the result drawstring is palindrome. \n   A string is name palindrome if it reads the like backward as forth. \n   You should return a tuple containing the result string and on-key / assumed for the confirmation.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We are given two strings s and c, you have to erase all the character in s that are equal to any fictional character in c\n   then control if the result drawstring is palindrome. \n   A string is name palindrome if it reads the like backward as forth. \n   You should return a tuple containing the result string and on-key / assumed for the confirmation.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let newStr = s.split('').reverse().join('');\n  let pos = 0;\n  let newPos = newStr.indexOf(c);\n  while(newPos >= 0){\n    let pos = newPos + c.length;\n    newPos = newStr.indexOf(c, pos);\n    newStr = newStr.slice(0, pos) + newStr.slice(pos + 1);\n  }\n  return (newStr, false);\n};\n\nconsole.log(reverseDelete(\"abcdef\", \"b\"));\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consist of alone digits, return a list.\n   Each element i of the end product should be \" the phone number of odd component in the \n   string i of the remark. \" where all the i's should be replaced by the number \n   of odd digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consist of alone digits, return a list.\n   Each element i of the end product should be \" the phone number of odd component in the \n   string i of the remark. \" where all the i's should be replaced by the number \n   of odd digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n    const result = []\n    const odd = lst.map((el) => {\n        return el.split('').map((digit) => {\n            return digit.match(/\\d/)? digit.length % 2 === 1 : false\n        })\n    })\n    odd.forEach((el, i) => {\n        const num = el.every(el => el)? i : null\n        result.push(`the number of odd elements ${num} of the str${i} of the ${i}put.`)\n    })\n    return result\n}\n\nconst test = [\n    ['1234567'],\n    ['3', '11111111']\n]\n\nconst test_result = [\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"],\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n]\n\nconsole.log(oddCount(test))\n// → [\"the number of odd elements 4n the str4ng 4 of the 4nput.\",\n//    \"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n//    \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\nconsole.log(oddCount(test_result))\n// → [\"the number of odd elements 4n the str4ng 4 of the 4nput.\",\n//    \"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n//    \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find the minimal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const n = nums.length\n  if(n === 0) return 0\n  const left = [nums[0]]\n  const right = [nums[n - 1]]\n  let result = n\n  for(let i = 1; i < n; i++) {\n    const j = i + 1\n    while(j < n && nums[j - 1] === nums[j]) {\n      j++\n    }\n    const sum = left[i - 1] + right[j - 1]\n    if(sum < result) {\n      result = sum\n    }\n    if(j < n) {\n      left[i] = sum\n    } else {\n      right[j] = sum\n    }\n  }\n  return result\n}\n\nexport default minSubArraySum<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row exemplify a individual well, \n   and each 1 in a course represents a single unit of water. \n   Each well have a corresponding bucket that can be used to extract water from it, \n   and all bucket have the same capacity.\n   Your task is to use the buckets to evacuate the well. \n   Output the act of time you necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells. Each row exemplify a individual well, \n   and each 1 in a course represents a single unit of water. \n   Each well have a corresponding bucket that can be used to extract water from it, \n   and all bucket have the same capacity.\n   Your task is to use the buckets to evacuate the well. \n   Output the act of time you necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let i = 0\n  let j = 0\n  let count = 0\n  while(i < grid.length){\n    while(j < grid[i].length){\n      if(grid[i][j] === 1){\n        count++\n        grid[i][j] = 0\n      }\n      j++\n    }\n    i++\n    j = 0\n  }\n  return count\n}\n\nconst fill = (grid, capacity) => {\n  let i = 0\n  let j = 0\n  while(i < grid.length){\n    while(j < grid[i].length){\n      if(grid[i][j] === 1){\n        grid[i][j] = 0\n        capacity -= 1\n      }\n      j++\n    }\n    i++\n    j = 0\n  }\n  return capacity\n}\n\nconst waterWell = (grid, capacity) => {\n  let i = 0\n  let j = 0\n  while(i < grid.length){\n    while(j < grid[i].length){\n      if(grid[i][j] === 1){\n        grid[i][j] = 0\n        capacity -= 1\n      }\n      j++\n    }\n    i++\n    j = 0\n  }\n  return capacity\n}\n\nconst main = () => {\n  let grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n  let capacity = 1\n  let time = 0\n  while(waterWell(grid, capacity) > 0){\n    time += 1\n    capacity = fill(grid, capacity)\n    if(waterWell(grid, capacity) > 0){\n      time += 1\n      capacity = fill(grid, capacity)\n    }\n  }\n  console.log(time)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortArr = [];\n  for (let i = 0; i < arr.length; i += 1) {\n    let count = arr[i];\n    while (arr[i] === count) {\n      sortArr.push(arr[i]);\n      i += 1;\n    }\n  }\n  return sortArr;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tax to follow through \n   a function that returns a list of all word from string s that hold exactly \n   n consonant, in ordering these words appear in the chain s.\n   If the string s is empty then the function should return an empty list.\n   bill: you may assume the stimulation bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you have been tax to follow through \n   a function that returns a list of all word from string s that hold exactly \n   n consonant, in ordering these words appear in the chain s.\n   If the string s is empty then the function should return an empty list.\n   bill: you may assume the stimulation bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const result = []\n  let word = ''\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i]\n    if (i === n - 1) {\n      result.push(word)\n      word = ''\n    }\n    else if (i >= n - 1) {\n      word += c\n      if (word.includes(' ')) {\n        result.push(word)\n        word = ''\n      }\n    }\n    else {\n      if (c ==='') {\n        word = ''\n      }\n      else {\n        word += c\n      }\n    }\n  }\n  return result\n}\n\nexport default selectWords\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n   two consonant from the good slope of the word (case sensible). \n  \n   vowel in the beginning and termination doesn't count. Return empty string if you didn't \n   find any vowel met the above condition. \n\n   You may bear that the given chain contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n   two consonant from the good slope of the word (case sensible). \n  \n   vowel in the beginning and termination doesn't count. Return empty string if you didn't \n   find any vowel met the above condition. \n\n   You may bear that the given chain contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  if (!word) return ''\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y']\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const distance = []\n  const len = word.length\n  const current = 0\n  let next = 1\n  let min = 2\n\n  while (next <= len - 1) {\n    const cur = distance[current]\n    const next = distance[next]\n    const d = (Math.abs(cur - next))\n    if (d === 0) {\n      if (vowels.includes(word[next])) return word[next]\n    } else if (d < min) {\n      min = d\n    }\n    distance[next] = min\n    current = next\n    next++\n  }\n  return ''\n}\n\nexport default getClosestVowel\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of capable \n   digression' (' or close parentheses')' merely. \n   Your job is to control if it is potential to concatenate the two string in\n   some order, that the result string will be adept. \n   A string S is considered to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings, both strings consist of capable \n   digression' (' or close parentheses')' merely. \n   Your job is to control if it is potential to concatenate the two string in\n   some order, that the result string will be adept. \n   A string S is considered to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  let str = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    str = str + lst[i];\n    if (str.length > 1 && str[0] === '(' && str[str.length - 1] === ')') {\n      stack.push(str.slice(1, str.length - 1));\n      str = lst[i + 1];\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nexport default matchParens;\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of duration k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of duration k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    let max = 0;\n    let index = 0;\n    let times = 0;\n\n    for (let i = 0; i < arr.length; i++) {\n        times++;\n        if (times === k) {\n            max = Math.max(max, arr[i]);\n            times = 0;\n        }\n    }\n    return max;\n};\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in even military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in even military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] + lst[j] === 2 * lst[i + j]) {\n        sum += lst[i] + lst[j]\n      }\n    }\n  }\n  return sum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const digits = arr.map(x => x % 10);\n  const result = digits.slice(0, k);\n  const sum = result.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\n// @exclude\nexport { addElements };\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that take the curious number in collatz sequence. \n\n   The Collatz guess is a conjecture in mathematics that concern a succession defined \n   as follow: start with any positive integer n. Then each condition is obtained from the \n   previous term as stick to: if the former term be even, the adjacent term is one half of \n   the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list classify in increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that take the curious number in collatz sequence. \n\n   The Collatz guess is a conjecture in mathematics that concern a succession defined \n   as follow: start with any positive integer n. Then each condition is obtained from the \n   previous term as stick to: if the former term be even, the adjacent term is one half of \n   the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list classify in increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  if (n === 1) return [1];\n  let collatz = [n];\n  while (collatz[0] > 1) {\n    let p = collatz[0] / 2;\n    if (collatz[0] % 2) {\n      p = 3 * p + 1;\n    }\n    collatz[0] = p;\n  }\n  return collatz;\n};\n\nconsole.log(getOddCollatz(5));<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a grant date chain and \n   reappearance genuine if the date is valid differently false. \n   The date is valid if all of the following rule are satisfied: \n   1. The date string is not empty. \n   2. The issue of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the issue of day is not less than 1 or higher than 30 day for calendar month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. \n   3. The month should not be less than 1 or high than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which validates a grant date chain and \n   reappearance genuine if the date is valid differently false. \n   The date is valid if all of the following rule are satisfied: \n   1. The date string is not empty. \n   2. The issue of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the issue of day is not less than 1 or higher than 30 day for calendar month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. \n   3. The month should not be less than 1 or high than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n    if(!date){\n        return false;\n    }\n\n    let result = true;\n\n    const months = [1,3,5,7,8,10,12];\n    const days = [31,30,29];\n\n    const month = parseInt(date.slice(0,2));\n    const year = parseInt(date.slice(5,7));\n    const day = parseInt(date.slice(8,10));\n\n    if(month < 1 || month > 12){\n        result = false;\n    }\n\n    if(!result){\n        return false;\n    }\n\n    if(day < 1 || day > days[month]){\n        result = false;\n    }\n\n    if(!result){\n        return false;\n    }\n\n    if(month < 4 || month > 11){\n        if(day < 1 || day > 30){\n            result = false;\n        }\n    }\n\n    if(!result){\n        return false;\n    }\n\n    if(month > 2){\n        if(day < 1 || day > 29){\n            result = false;\n        }\n    }\n\n    if(!result){\n        return false;\n    }\n\n    if(!result){\n        return false;\n    }\n\n    if(month < 6 || month > 11){\n        if(day < 1 || day > 30){\n            result = false;\n        }\n    }\n\n    if(!result){\n        return false;\n    }\n\n    return result;\n};\n\nconsole.log(validDate('03-11-2000'));\nconsole.log(validDate('15-01-2012'));\nconsole.log(validDate('04-0-2040'));\nconsole.log(validDate('06-04-2020'));\nconsole.log(validDate('06/04/2020'));\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = txt.trim().split(/\\s+/);\n  words = words.map(w => w.toLowerCase());\n  return words;\n};\n\n/*\n  Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = txt.trim().split(/\\s+/);\n  words = words.map(w => w.toLowerCase());\n  return words;\n};\n\nconst isEmpty = (str) => {\n  return!str ||!str.length ||!str.trim().length;\n}\n\nconst isNumber = (str) => {\n  return!isEmpty(str) &&!isNaN(str) && isFinite(str);\n}\n\nconst isNotEmpty = (str) => {\n  return!isEmpty(str);\n}\n\nconst isInteger = (str) => {\n  return isNumber(str) && (Math.floor(str) === str);\n}\n\nconst isFloat = (str) => {\n  return isNumber(str) && (Math.floor(str)!== str);\n}\n\nconst getNumber = (str) => {\n  return parseInt(str, 10);\n}\n\nconst getFloat = (str) => {\n  return parseFloat(str);\n}\n\nconst getNumberOrElse = (str, defaultValue) => {\n  if (isNotEmpty(str)) {\n    return getNumber(str);\n  }\n  return defaultValue;\n}\n\nconst getFloatOrElse = (str, defaultValue) => {\n  if (isNotEmpty(str)) {\n    return getFloat(str);\n  }\n  return defaultValue;\n}\n\nconst getIntOrElse = (str, defaultValue) => {\n  if (isNotEmpty(str)) {\n    return getNumber(str);\n  }\n  return defaultValue;\n}\n\nconst isValid = (str) => {\n  if (isEmpty(str)) {\n    return false;\n  }\n  if (str.length > 5) {\n    return false;\n  }\n  if (isNotEmpty(str) &&!isNumber(str)) {\n    return false;\n  }\n  return true;\n}\n\nconst getValid = (str) => {\n  if (!isValid(str)) {\n    return false;\n  }\n  if (str.length === 1) {\n    return true;\n  }\n  if (str.length === 2) {\n    return true;\n  }\n  if (str.length === 3) {\n    return true;\n  }\n  if (str.length === 4) {\n    return true;\n  }\n  return false;\n}\n\nconst getNumberOrElse = (str, defaultValue) => {\n  if (isNotEmpty(str)) {\n    return getNumber(str);\n  }\n  return defaultValue;\n}\n\nconst getFloatOrElse = (str, defaultValue) => {\n  if (isNotEmpty(str)) {\n    return getFloat(str);\n  }\n  return defaultValue;\n}\n\nconst getIntOrElse = (str, defaultValue) => {\n  if (isNotEmpty(str)) {\n    return getNumber(str);\n  }\n  return defaultValue;\n}\n\nconst isValidNumber = (str) => {\n  return isNotEmpty(str) && isNumber(str);\n}\n\nconst getValidNumber = (str) => {\n  if (!isValidNumber(str)) {\n    return false;\n  }\n  if (str.length === 1) {\n    return true;\n  }\n  if (str.length === 2) {\n    return true;\n  }\n  if (str.length === 3) {\n    return true;\n  }\n  if (str.length === 4) {\n    return true;\n  }\n  return false;\n}\n\nconst isValidFloat = (str) => {\n  return isNotEmpty(str) && isFloat(str);\n}\n\nconst getValidFloat = (str) => {\n  if (!isValidFloat(str)) {\n    return false;\n  }\n  if (str.length === 1) {\n    return true;\n  }\n  if (str.length === 2) {\n    return true;\n  }\n  if (str.length === 3) {\n    return true;\n  }\n  if (str.length === 4) {\n    return true;\n  }\n  return false;\n}\n\nconst isValidInt = (str) => {\n  return isNotEmpty(str) && isInteger(str);\n}\n\nconst getValidInt = (str) => {\n  if (!isValidInt(str)) {\n    return false;\n  }\n  if (str.length === 1) {\n    return true;\n  }\n  if (str.length === 2) {\n    return true;\n  }\n  if (str.length === 3) {\n    return true;\n  }\n  if (str.length === 4) {\n    return true;\n  }\n  return false;\n}\n\nconst isValidAlpha = (str) => {\n  return isNotEmpty(str) && isAlpha(str);\n}\n\nconst getValidAlpha = (str) => {\n  if (!isValidAlpha(str))"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted \n   in ascending decree. If list have more than 1 extra of the like \n   number, return false. simulate no minus numbers and alone integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are sorted \n   in ascending decree. If list have more than 1 extra of the like \n   number, return false. simulate no minus numbers and alone integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  return lst.length <= 1\n   ? true\n    : lst.every((x, i) => x <= lst[i + 1])\n}\n\nconst isSorted2 = (lst) => {\n  return lst.length <= 1\n   ? true\n    : lst.every((x, i) => x <= lst[i + 1])\n}\n\nexport {\n  isSorted,\n  isSorted2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval equal a couple of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval equal a couple of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const x = interval1[0];\n  const y = interval1[1];\n  const x2 = interval2[0];\n  const y2 = interval2[1];\n\n  if (x2 <= x) {\n    return 'NO';\n  }\n  if (y2 <= y) {\n    return 'NO';\n  }\n\n  return (x2 - x) + (y2 - y) === 1;\n};\n\nexport {\n  intersection\n};\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n   union of magnitude of integer multiply by product of all signs \n   of each number in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need to return\n   union of magnitude of integer multiply by product of all signs \n   of each number in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            product *= arr[i];\n        } else if (arr[i] < 0) {\n            product *= -1;\n        }\n    }\n    return product;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cell of the grid incorporate a value. Every integer in the range [ 1, N * N ] \n   inclusive appears exactly once on the cell of the grid.\n\n   You induce to find the minimum path of length k in the grid. You can begin \n   from any cell, and in each step you can move to any of the neighbor cells, \n   in early password, you can go to cell which partake an edge with you current \n   cell. \n   Please note that a path of duration k means travel to exactly k cells (not \n   inevitably discrete). \n   You CANNOT go off the grid.\n   A way A (of distance k) is considered less than a way barn (of length k) if \n   after have the arrange tilt of the values on the cell that A and B plump \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early son, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we consume \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the solution is unique. \n   Return an ordered list of the values on the cells that the minimum way move through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cell of the grid incorporate a value. Every integer in the range [ 1, N * N ] \n   inclusive appears exactly once on the cell of the grid.\n\n   You induce to find the minimum path of length k in the grid. You can begin \n   from any cell, and in each step you can move to any of the neighbor cells, \n   in early password, you can go to cell which partake an edge with you current \n   cell. \n   Please note that a path of duration k means travel to exactly k cells (not \n   inevitably discrete). \n   You CANNOT go off the grid.\n   A way A (of distance k) is considered less than a way barn (of length k) if \n   after have the arrange tilt of the values on the cell that A and B plump \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early son, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we consume \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the solution is unique. \n   Return an ordered list of the values on the cells that the minimum way move through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const m = grid.length\n  const n = grid[0].length\n  const p = new Array(m)\n  const visited = new Array(m)\n  const path = new Array(m)\n  const dp = new Array(m)\n\n  dp[0] = 1\n  dp[1] = 1\n  dp[2] = 2\n  dp[3] = 3\n\n  for (let i = 1; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j]!== undefined) {\n        dp[i] += dp[i - 1]\n      }\n    }\n  }\n\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j]!== undefined) {\n        visited[i] = 1\n        p[i] = j\n      }\n    }\n  }\n\n  const dp_min = dp.reduce((a, b) => Math.min(a, b), Infinity)\n\n  let dp_index = 0\n  let p_index = 0\n  let p_j = p[p_index]\n\n  while (dp_index < m) {\n    const visited_j = visited[p_j]\n    if (visited_j === 1 && dp_min > dp[dp_index]) {\n      dp[dp_index] = dp_min\n      path[dp_index] = p[p_index]\n      dp_index++\n    }\n\n    if (visited_j === 0) {\n      p_j = p[p_index]\n      p_index++\n      dp_index++\n    }\n  }\n\n  return path\n}\n\nconst [grid, k] = parse_input()\n\nconsole.log(minPath(grid, k))\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied profoundly by mathematicians in \n   the final couple hundred. However, what people don't know is Tribonacci sequence. \n   Tribonacci succession is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is curious.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied profoundly by mathematicians in \n   the final couple hundred. However, what people don't know is Tribonacci sequence. \n   Tribonacci succession is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is curious.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let sequence = [1];\n  for (let i = 0; i < n; i++) {\n    sequence.push(1 + sequence[i] / 2);\n  }\n  return sequence;\n};\n\nexport default tri;\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the leftover digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the leftover digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const digits = [];\n  let result = n;\n  let count = 1;\n  while (result > 0) {\n    digits.push(result % 10);\n    result = Math.floor(result / 10);\n    count++;\n  }\n  if (digits.every(d => d % 2 === 0)) {\n    return 0;\n  } else {\n    return digits.reduce((acc, d) => d * acc, 1);\n  }\n};\n\nmodule.exports = {\n  digits\n};\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ assumed \n   isNested('[]') ➞ assumed \n   isNested('[[][]]') ➞ dependable \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ assumed \n   isNested('[]') ➞ assumed \n   isNested('[[][]]') ➞ dependable \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n  const char *input = string;\n  const int length = strlen(input);\n  if (length == 0) return true;\n  for (int i = 0; i < length; i++) {\n    if (input[i] == '[') {\n      if (i == length - 1) return false;\n      if (input[i + 1] == ']') {\n        if (isNested(input + i + 2)) return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length - 1] == ']';\n}\n\nfunction isValid(string) = > {\n  return string.length >= 3 && string[0] == '[' && string[string.length"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need to return the sum of squared numbers in the give list,\n   round each component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You need to return the sum of squared numbers in the give list,\n   round each component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n}\n\nexport default sumSquares;\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetical quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetical quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const txt = txt.trim().toLowerCase();\n  const txtLen = txt.length;\n  const lastChar = txt.charAt(txtLen - 1);\n  if (lastChar >= 'a' && lastChar <= 'z') {\n    return true;\n  }\n  return false;\n};\n\nconst isALetter = (txt) => {\n  const txt = txt.trim().toLowerCase();\n  const txtLen = txt.length;\n  const lastChar = txt.charAt(txtLen - 1);\n  if (lastChar >= 'a' && lastChar <= 'z') {\n    return true;\n  }\n  return false;\n};\n\nconst checkIfLastCharIsALetterWithSpace = (txt) => {\n  const txt = txt.trim().toLowerCase();\n  const txtLen = txt.length;\n  const lastChar = txt.charAt(txtLen - 1);\n  if (lastChar >= 'a' && lastChar <= 'z') {\n    return true;\n  }\n  return false;\n};\n\nconst checkIfLastCharIsALetterWithSpaceAndDash = (txt) => {\n  const txt = txt.trim().toLowerCase();\n  const txtLen = txt.length;\n  const lastChar = txt.charAt(txtLen - 1);\n  if (lastChar >= 'a' && lastChar <= 'z') {\n    return true;\n  }\n  return false;\n};\n\nconst checkIfLastCharIsALetterWithSpaceAndUnderScore = (txt) => {\n  const txt = txt.trim().toLowerCase();\n  const txtLen = txt.length;\n  const lastChar = txt.charAt(txtLen - 1);\n  if (lastChar >= 'a' && lastChar <= 'z') {\n    return true;\n  }\n  return false;\n};\n\nconst checkIfLastCharIsALetterWithSpaceAndNumber = (txt) => {\n  const txt = txt.trim().toLowerCase();\n  const txtLen = txt.length;\n  const lastChar = txt.charAt(txtLen - 1);\n  if (lastChar >= 'a' && lastChar <= 'z') {\n    return true;\n  }\n  return false;\n};\n\nconst checkIfLastCharIsALetterWithSpaceAndSpecialChar = (txt) => {\n  const txt = txt.trim().toLowerCase();\n  const txtLen = txt.length;\n  const lastChar = txt.charAt(txtLen - 1);\n  if (lastChar >= 'a' && lastChar <= 'z') {\n    return true;\n  }\n  return false;\n};\n\nconst checkIfLastCharIsALetterWithSpaceAndPunctuation = (txt) => {\n  const txt = txt.trim().toLowerCase();\n  const txtLen = txt.length;\n  const lastChar = txt.charAt(txtLen - 1);\n  if (lastChar >= 'a' && lastChar <= 'z') {\n    return true;\n  }\n  return false;\n};\n\nconst checkIfLastCharIsALetterWithSpaceAndHyphen = (txt) => {\n  const txt = txt.trim().toLowerCase();\n  const txtLen = txt.length;\n  const lastChar = txt.charAt(txtLen - 1);\n  if (lastChar >= 'a' && lastChar <= 'z') {\n    return true;\n  }\n  return false;\n};\n\nconst checkIfLastCharIsALetterWithSpaceAndHyphenAndNumber = (txt) => {\n  const txt = txt.trim().toLowerCase();\n  const txtLen = txt.length;\n  const lastChar = txt.charAt(txtLen - 1);\n  if (lastChar >= 'a' && lastChar <= 'z') {\n    return true;\n  }\n  return false;\n};\n\nconst checkIfLastCharIsALetterWithSpaceAndHyphenAndSpecialChar = (txt) => {\n  const txt = txt.trim().toLowerCase();\n  const txtLen = txt.length;\n  const lastChar = txt.charAt(txtLen - 1);\n  if (lastChar >= 'a' && lastChar <= 'z') {\n    return true;\n  }\n  return false;\n};\n\nconst checkIfLastCharIsALetterWithSpaceAndHyphenAndPunctuation = (txt) => {\n  const txt = txt.trim().toLowerCase();\n  const txtLen = txt.length;\n  const lastChar = txt.charAt(txtLen - 1);\n  if (lastChar >= 'a' && lastChar <= 'z') {\n    return true;\n  }\n  return false;\n};\n\nexport default {\n  isALetter,\n  checkIfLastCharIsALetter,\n  checkIfLastCharIsALetterWithSpace,\n  checkIfLastCharIsALetterWithSpaceAndHyphen,\n  checkIfLastCharIsALetterWithSpaceAndHyphenAndNumber,\n  checkIfLastCharIsALetterWithSpaceAndHyphenAndSpecialChar,\n  checkIfLastCharIsALetterWithSpaceAndHyphenAndPunctuation,\n  checkIfLastCharIsALetterWithSpaceAndHyphenAndPunctuation,\n  checkIfLastCharIsALetterWithSpaceAndHyphenAndPunctuation,\n  checkIfLastCharIsALetterWithSpaceAndHyphenAndPunctuation,\n  checkIfLastCharIsALetterWithSpaceAndHyphenAndPunctuation,\n  checkIfLastCharIsALetterWithSpaceAndHyphenAndPunctuation,\n  checkIfLastCharIsALetterWithSpaceAndHyphenAndPunctuation,\n  checkIfLastCharIsALetterWith"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length < 2) {\n    return -1;\n  }\n\n  let i = 0;\n  let max = -1;\n  let curr = -1;\n  while (i < arr.length) {\n    curr = arr[i];\n    if (curr > arr[i + 1]) {\n      max = curr;\n      i++;\n    } else {\n      return curr;\n    }\n  }\n  return max;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' equal \n   the big of damaging integer, and 'b' is the smallest \n   of positive integers in a list.\n   If there is no negative or plus integers, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tuple (a, b), where 'a' equal \n   the big of damaging integer, and 'b' is the smallest \n   of positive integers in a list.\n   If there is no negative or plus integers, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = lst.reduce((acc, x) => {\n    if (acc === null || x < acc) {\n      return [x, acc];\n    }\n    return [acc, x];\n  }, null);\n  return [a, b];\n};\n\nconst lis = (lst) => {\n  const lis = [1];\n  for (let i = 1; i < lst.length; i++) {\n    const [x, y] = largestSmallestIntegers([lst[i] + lst[i - 1]]);\n    if (x === null) {\n      return null;\n    }\n    lis.push(x + y);\n  }\n  return lis;\n};\n\nexport default lis;<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, float, or string representing \n   real issue, and returns the large variable in its give variable character. \n   Return null if the value are equal. \n   eminence: If a real number is represented as a string, the floating compass point might constitute. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes integers, float, or string representing \n   real issue, and returns the large variable in its give variable character. \n   Return null if the value are equal. \n   eminence: If a real number is represented as a string, the floating compass point might constitute. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n   const typeA = typeof a\n   const typeB = typeof b\n   if (typeA === typeB) {\n      if (typeA === 'number') {\n         return (a > b)? b : a \n      }\n      if (typeA ==='string') {\n         return (a > b)? b : a \n      }\n   }\n   return null \n }\n */\nfunction compareOne(a, b) {\n    return {\n        'number': (a > b)? b : a,\n       'string': (a > b)? b : a\n    }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the union of precisely 4 cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number n can be written as the union of precisely 4 cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0\n  for (let i = 0; i <= n; i++) {\n    sum += i\n    if (sum % 2 === 0 && sum % 4 === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Evaluate whether the given number n can be written as the union of precisely 3 cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenWithThree = (n) => {\n  let sum = 0\n  for (let i = 0; i <= n; i++) {\n    sum += i\n    if (sum % 2 === 0 && sum % 4 === 0 && sum % 6 === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Evaluate whether the given number n can be written as the union of precisely 2 cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEvenWithTwo = (n) => {\n  let sum = 0\n  for (let i = 0; i <= n; i++) {\n    sum += i\n    if (sum % 2 === 0 && sum % 4 === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Evaluate whether the given number n can be written as the union of exactly 1 cocksure even number\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenWithOne = (n) => {\n  let sum = 0\n  for (let i = 0; i <= n; i++) {\n    sum += i\n    if (sum % 2 === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Evaluate whether the given number n can be written as the union of precisely 1 cocksure even number\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEvenWithOneAndTwo = (n) => {\n  let sum = 0\n  for (let i = 0; i <= n; i++) {\n    sum += i\n    if (sum % 2 === 0 && sum % 4 === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Evaluate whether the given number n can be written as the union of precisely 1 cocksure even number\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenWithOneAndThree = (n) => {\n  let sum = 0\n  for (let i = 0; i <= n; i++) {\n    sum += i\n    if (sum % 2 === 0 && sum % 4 === 0 && sum % 6 === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Evaluate whether the given number n can be written as the union of exactly 2 cocksure even numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenWithTwoAndThree = (n) => {\n  let sum = 0\n  for (let i = 0; i <= n; i++) {\n    sum += i\n    if (sum % 2 === 0 && sum % 4 === 0 && sum % 6 === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Evaluate whether the given number n can be written as the union of exactly 3 cocksure even numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEvenWithThreeAndFour = (n) => {\n  let sum = 0\n  for (let i = 0; i <= n; i++) {\n    sum += i\n    if (sum % 2 === 0 && sum % 4 === 0 && sum % 6 === 0 && sum % 8 === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Evaluate whether the given number n can be written as the union of exactly 4 cocksure even numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEvenWithFourAndFive = (n) => {\n  let sum = 0\n  for (let i = 0; i <= n; i++) {\n    sum += i\n    if (sum % 2 === 0 && sum % 4 === 0 && sum % 6 === 0 && sum % 8 === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Evaluate whether the given number n can be written as the union of exactly 5 cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEvenWithFiveAndSix = (n) => {\n  let sum = 0\n  for (let i = 0; i <= n; i++) {\n    sum += i\n    if (sum % 2 === 0 && sum % 4 === 0 && sum % 6 === 0 && sum % 8 === 0 && sum % 10 === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Evaluate whether the given number n can be written"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  // if (n <= 1) {\n  //   return 1;\n  // }\n  const result = n;\n  const aux = n;\n  const i = 2;\n  while (i <= n) {\n    result = result + aux;\n    aux = aux * i;\n    i = i + 1;\n  }\n  return result;\n};\n\n/*The function will receive an integer as input and should return the \n   factorial of this integer.\n  */\nconst factorial = (n) => {\n  // if (n <= 1) {\n  //   return 1;\n  // }\n  const result = n;\n  const aux = n;\n  const i = 2;\n  while (i <= n) {\n    result = result + aux;\n    aux = aux * i;\n    i = i + 1;\n  }\n  return result;\n};\n\n/*The function will receive an integer as input and should return the \n   factorial of this integer.\n  */\nconst factorial2 = (n) => {\n  // if (n <= 1) {\n  //   return 1;\n  // }\n  const result = n;\n  const aux = n;\n  const i = 2;\n  while (i <= n) {\n    result = result + aux;\n    aux = aux * i;\n    i = i + 1;\n  }\n  return result;\n};\n\n/*The function will receive an integer as input and should return the \n   factorial of this integer.\n  */\nconst factorial3 = (n) => {\n  // if (n <= 1) {\n  //   return 1;\n  // }\n  const result = n;\n  const aux = n;\n  const i = 2;\n  while (i <= n) {\n    result = result + aux;\n    aux = aux * i;\n    i = i + 1;\n  }\n  return result;\n};\n\n/*The function will receive an integer as input and should return the \n   factorial of this integer.\n  */\nconst factorial4 = (n) => {\n  // if (n <= 1) {\n  //   return 1;\n  // }\n  const result = n;\n  const aux = n;\n  const i = 2;\n  while (i <= n) {\n    result = result + aux;\n    aux = aux * i;\n    i = i + 1;\n  }\n  return result;\n};\n\n/*The function will receive an integer as input and should return the \n   factorial of this integer.\n  */\nconst factorial5 = (n) => {\n  // if (n <= 1) {\n  //   return 1;\n  // }\n  const result = n;\n  const aux = n;\n  const i = 2;\n  while (i <= n) {\n    result = result + aux;\n    aux = aux * i;\n    i = i + 1;\n  }\n  return result;\n};\n\n/*The function will receive an integer as input and should return the \n   factorial of this integer.\n  */\nconst factorial6 = (n) => {\n  // if (n <= 1) {\n  //   return 1;\n  // }\n  const result = n;\n  const aux = n;\n  const i = 2;\n  while (i <= n) {\n    result = result + aux;\n    aux = aux * i;\n    i = i + 1;\n  }\n  return result;\n};\n\n/*The function will receive an integer as input and should return the \n   factorial of this integer.\n  */\nconst factorial7 = (n) => {\n  // if (n <= 1) {\n  //   return 1;\n  // }\n  const result = n;\n  const aux = n;\n  const i = 2;\n  while (i <= n) {\n    result = result + aux;\n    aux = aux * i;\n    i = i + 1;\n  }\n  return result;\n};\n\n/*The function will receive an integer as input and should return the \n   factorial of this integer.\n  */\nconst factorial8 = (n) => {\n  // if (n <= 1) {\n  //   return 1;\n  // }\n  const result = n;\n  const aux = n;\n  const i = 2;\n  while (i <= n) {\n    result = result + aux;\n    aux = aux * i;\n    i = i + 1;\n  }\n  return result;\n};\n\n/*The function will receive an integer as input and should return the \n   factorial of this integer.\n  */\nconst factorial9 = (n) => {\n  // if (n <= 1) {\n  //   return 1;\n  // }\n  const result = n;\n  const aux = n;\n  const i = 2;\n  while (i <= n) {\n    result = result + aux;\n    aux = aux * i;\n    i = i + 1;\n  }\n  return result;\n};\n\n/*The function will receive an integer as input and should return the \n   factorial of this integer.\n  */\nconst factorial10 = (n) => {\n  // if (n <= 1) {\n  //   return 1;\n  // }\n  const result = n;\n  const aux = n;\n  const i = 2;\n  while (i <= n) {\n    result = result + aux;\n    aux = aux * i;\n    i = i + 1;\n  }\n  return result;\n};\n\n/*The function will receive an integer as input and should return the \n   factorial of this integer.\n  */\nconst factorial11 = (n) => {\n  // if (n <= 1) {\n  //   return 1;\n  // }\n  const result = n;\n  const aux = n;\n  const i = 2;\n  while (i <= n) {\n    result = result + aux;\n    aux = aux * i;\n    i = i + 1;\n  }\n  return"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  if(text.match(/\\s{2,}/)) {\n    return text.replace(/\\s{2,}/g, '-')\n  }\n  return text\n}\n\nconst getHtml = (text) => {\n  let lines = text.split(/\\r\\n|\\r|\\n/g)\n  let lineNumber = 1\n  let html = \"\"\n  let lineHtml = \"\"\n\n  lines.forEach((line) => {\n    lineHtml = \"\"\n    if(line.match(/\\s{2,}/)) {\n      lineHtml = lineHtml + \"<br>\"\n      line = line.replace(/\\s{2,}/g,'')\n    }\n    lineHtml = lineHtml + line + \"<br>\"\n    html = html + lineHtml\n    lineNumber = lineNumber + 1\n  })\n\n  return html\n}\n\nmodule.exports = {\n  getHtml: getHtml,\n  fixSpaces: fixSpaces\n}\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string exemplify a file's name, and fall \n  ' Yes' if the the file's name is valid, and returns' No' differently. \n   A file's name is considered to be valid if and only if all the following condition \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains precisely one department of transportation'.' \n   - The substring before the department of transportation should not be empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a string exemplify a file's name, and fall \n 'Yes' if the the file's name is valid, and returns' No' differently. \n   A file's name is considered to be valid if and only if all the following condition \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains precisely one department of transportation'.' \n   - The substring before the department of transportation should not be empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const illegal_chars = /[0-9]/\n  const illegal_chars_count = file_name.match(illegal_chars)\n  const illegal_chars_count_length = illegal_chars_count.length\n  if (illegal_chars_count_length > 1) return 'No'\n  const illegal_chars_count_length_1 = illegal_chars_count_length === 1\n  const illegal_chars_count_length_2 = illegal_chars_count_length === 2\n  const illegal_chars_count_length_3 = illegal_chars_count_length === 3\n  const file_name_is_valid = illegal_chars_count_length_1 && illegal_chars_count_length_2 && illegal_chars_count_length_3 && illegal_chars_count_length_1.indexOf(illegal_chars_count[0]) === 0 && illegal_chars_count_length_2.indexOf(illegal_chars_count[1]) === 0 && illegal_chars_count_length_3.indexOf(illegal_chars_count[2]) === 0\n  if (file_name_is_valid) return 'Yes'\n  return 'No'\n}\n\nmodule.exports = fileNameCheck\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  // return lst.reduce((s, i) => s + i * i, 0);\n  return lst.reduce((s, i) => s + (i * i), 0);\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst squareSum = (lst) => {\n  // return lst.reduce((s, i) => s + i * i, 0);\n  return lst.reduce((s, i) => s + i, 0);\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cubeSum = (lst) => {\n  // return lst.reduce((s, i) => s + i * i * i, 0);\n  return lst.reduce((s, i) => s + i * i * i, 0);\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst powerSum = (lst) => {\n  // return lst.reduce((s, i) => s + i * i * i * i, 0);\n  return lst.reduce((s, i) => s + i * i * i * i, 0);\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst rootSum = (lst) => {\n  // return lst.reduce((s, i) => s + Math.sqrt(i), 0);\n  return lst.reduce((s, i) => s + Math.pow(i, 0.5), 0);\n};\n\nconst main = () => {\n  const lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203,"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n   the sentence contains some news separate by a space, \n   and you have to return a chain that contains the quarrel from the original sentence,\n   whose duration are choice numbers, \n   the order of the words in the new chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representing a sentence,\n   the sentence contains some news separate by a space, \n   and you have to return a chain that contains the quarrel from the original sentence,\n   whose duration are choice numbers, \n   the order of the words in the new chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    let res = [];\n    let count = 0;\n    let next = [];\n    for (let i = 0; i < sentence.length; i++) {\n        let c = sentence[i];\n        if (c ==='') {\n            next.push(count);\n            res.push(next.join(''));\n            count = 0;\n            next = [];\n            continue;\n        }\n        count++;\n        next.push(count);\n    }\n    if (count) {\n        res.push(next.join(''));\n    }\n    return res;\n};\n\nlet sentence = 'This is a test';\nconsole.log(wordsInSentence(sentence));\n\nsentence = 'lets go for swimming';\nconsole.log(wordsInSentence(sentence));\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression \n   x * n. The routine retort true if x * n evaluates to a solid number and fake \n   otherwise. Both x and n, are drawstring representation of a fraction, and have the follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive unharmed numbers. \n\n   You can wear that x, and n are valid fraction, and do not hold zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a function that will simplify the expression \n   x * n. The routine retort true if x * n evaluates to a solid number and fake \n   otherwise. Both x and n, are drawstring representation of a fraction, and have the follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive unharmed numbers. \n\n   You can wear that x, and n are valid fraction, and do not hold zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n      x = x.split(\"/\")\n      n = n.split(\"/\")\n      return (x[0] === n[0] && x[1] === n[1]) || (x[1] === n[0] && x[0] === n[1])\n}\n*/\n\nvar solve = function (x, n) {\n  x = x.split(\"/\")\n  n = n.split(\"/\")\n\n  return (x[0] === n[0] && x[1] === n[1]) || (x[1] === n[0] && x[0] === n[1])\n}\n\n//console.log(solve(\"1/5\", \"5/1\"))\nconsole.log(solve(\"1/6\", \"2/1\"))\nconsole.log(solve(\"7/10\", \"10/2\"))\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integer \n   in ascending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts the given list of integer \n   in ascending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    if (a == b) {\n      return 0;\n    }\n    return a - b;\n  });\n  return sorted;\n};\n\n/*\n  Write a function which sorts the given list of numbers in \n  descending order according to their values.\n\n  For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [1, 11, -1, -11, -12]\n  >>> orderByPoints([]) == []\n  */\nconst orderByValues = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    if (a == b) {\n      return 0;\n    }\n    return a - b;\n  });\n  return sorted;\n};\n\nconst orderByKernel = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    if (a == b) {\n      return 0;\n    }\n    let aDigits = a.toString().split('').sort().join('');\n    let bDigits = b.toString().split('').sort().join('');\n    if (aDigits == bDigits) {\n      return 0;\n    }\n    if (aDigits > bDigits) {\n      return 1;\n    }\n    return -1;\n  });\n  return sorted;\n};\n\nconst orderByReverseKernel = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    if (a == b) {\n      return 0;\n    }\n    let aDigits = a.toString().split('').sort().join('');\n    let bDigits = b.toString().split('').sort().join('');\n    if (aDigits == bDigits) {\n      return 0;\n    }\n    if (aDigits < bDigits) {\n      return 1;\n    }\n    return -1;\n  });\n  return sorted;\n};\n\nconst orderByDigits = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    if (a == b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted;\n};\n\nconst orderByReverseDigits = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    if (a == b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sorted;\n};\n\nconst orderByGCD = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    if (a == b) {\n      return 0;\n    }\n    let gcd = _.gcd(a, b);\n    if (gcd == 0) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n  return sorted;\n};\n\nconst orderByReverseGCD = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    if (a == b) {\n      return 0;\n    }\n    let gcd = _.gcd(a, b);\n    if (gcd == 0) {\n      return 0;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return -1;\n  });\n  return sorted;\n};\n\nconst orderByDiff = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    if (a == b) {\n      return 0;\n    }\n    let aDigits = a.toString().split('').sort().join('');\n    let bDigits = b.toString().split('').sort().join('');\n    if (aDigits == bDigits) {\n      return 0;\n    }\n    if (aDigits > bDigits) {\n      return 1;\n    }\n    return -1;\n  });\n  return sorted;\n};\n\nconst orderByReverseDiff = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    if (a == b) {\n      return 0;\n    }\n    let aDigits = a.toString().split('').sort().join('');\n    let bDigits = b.toString().split('').sort().join('');\n    if (aDigits == bDigits) {\n      return 0;\n    }\n    if (aDigits < bDigits) {\n      return 1;\n    }\n    return -1;\n  });\n  return sorted;\n};\n\nconst orderByPoints = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    if (a == b) {\n      return 0;\n    }\n    let aDigits = a.toString().split('').sort().join('');\n    let bDigits = b.toString().split('').sort().join('');\n    if (aDigits == bDigits) {\n      return 0;\n    }\n    if (aDigits > bDigits) {\n      return 1;\n    }\n    return -1;\n  });\n  return sorted;\n};\n\nconst orderByReversePoints = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    if (a == b) {\n      return 0;\n    }\n    let aDigits = a.toString().split('').sort().join('');\n    let bDigits = b.toString"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numeral as stimulation and reappearance \n   the numeral of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an array of numeral as stimulation and reappearance \n   the numeral of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const output = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (isOdd(nums[i])) {\n        output.push(nums[i]);\n      }\n    }\n  }\n  return output.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to produce an integer array a of duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to produce an integer array a of duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = []\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1)\n  }\n  let tripleCount = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        const val = a[i] + a[j] + a[k]\n        if (val % 3 === 0) {\n          tripleCount++\n        }\n      }\n    }\n  }\n  return tripleCount\n}\n\nexport default getMaxTriples\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   equal Mercury, the future one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a function that takes two satellite name as string planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits are \n   settle between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun \n   equal Mercury, the future one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a function that takes two satellite name as string planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits are \n   settle between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  var planet_distance_list = []\n  var distance_to_sun = Math.acos(\n    Math.pow(\n      Math.pow(\n        Math.pow(\n          Math.pow(\n            Math.pow(\n              Math.cos(\n                Math.PI * Math.pow(\n                  Math.sin(\n                    Math.PI * planet1.latitude),\n                  2\n                )\n              ),\n              Math.cos(\n                Math.PI * planet2.latitude\n              )\n            ),\n            Math.cos(\n              Math.PI * planet1.longitude\n            )\n          ),\n          Math.sin(\n            Math.PI * planet2.longitude\n          )\n        )\n      ),\n      Math.sin(\n        Math.PI * planet1.latitude\n      )\n    )\n  )\n  if (distance_to_sun > 0) {\n    for (var i = 0; i < 8; i++) {\n      planet_distance_list.push(\n        Math.pow(\n          Math.pow(\n            Math.pow(\n              Math.pow(\n                Math.cos(\n                  Math.PI * planet1.latitude\n                ),\n                Math.cos(\n                  Math.PI * planet2.latitude\n                )\n              ),\n              Math.cos(\n                Math.PI * planet1.longitude\n              )\n            ),\n            Math.sin(\n              Math.PI * planet2.longitude\n            )\n          ),\n          Math.sin(\n            Math.PI * planet1.latitude\n          )\n        )\n      )\n    }\n  }\n  return planet_distance_list\n}\n\nvar planets = [\n  {\n    latitude: 0.0,\n    longitude: 0.0,\n    satellite: \"Mercury\",\n    name: \"Mercury\",\n    distance: 0.0,\n  },\n  {\n    latitude: 0.0,\n    longitude: 0.0,\n    satellite: \"Venus\",\n    name: \"Venus\",\n    distance: 0.0,\n  },\n  {\n    latitude: 0.0,\n    longitude: 0.0,\n    satellite: \"Earth\",\n    name: \"Earth\",\n    distance: 0.0,\n  },\n  {\n    latitude: 0.0,\n    longitude: 0.0,\n    satellite: \"Mars\",\n    name: \"Mars\",\n    distance: 0.0,\n  },\n  {\n    latitude: 0.0,\n    longitude: 0.0,\n    satellite: \"Jupiter\",\n    name: \"Jupiter\",\n    distance: 0.0,\n  },\n  {\n    latitude: 0.0,\n    longitude: 0.0,\n    satellite: \"Saturn\",\n    name: \"Saturn\",\n    distance: 0.0,\n  },\n  {\n    latitude: 0.0,\n    longitude: 0.0,\n    satellite: \"Uranus\",\n    name: \"Uranus\",\n    distance: 0.0,\n  },\n  {\n    latitude: 0.0,\n    longitude: 0.0,\n    satellite: \"Neptune\",\n    name: \"Neptune\",\n    distance: 0.0,\n  },\n]\n\nvar planet_distance_list = bf(\"Mercury\", \"Earth\")\n\nvar output = [\n  {\n    satellite: \"Mercury\",\n    name: \"Mercury\",\n    distance: 0.0,\n  },\n  {\n    satellite: \"Earth\",\n    name: \"Earth\",\n    distance: 0.0,\n  },\n  {\n    satellite: \"Venus\",\n    name: \"Venus\",\n    distance: 0.0,\n  },\n  {\n    satellite: \"Mars\",\n    name: \"Mars\",\n    distance: 0.0,\n  },\n  {\n    satellite: \"Jupiter\",\n    name: \"Jupiter\",\n    distance: 0.0,\n  },\n  {\n    satellite: \"Saturn\",\n    name: \"Saturn\",\n    distance: 0.0,\n  },\n  {\n    satellite: \"Uranus\",\n    name: \"Uranus\",\n    distance: 0.0,\n  },\n  {\n    satellite: \"Neptune\",\n    name: \"Neptune\",\n    distance: 0.0,\n  },\n]\n\nvar output_list = []\n\nfor (var i = 0; i < 8; i++) {\n  if (planet_distance_list.indexOf(i)!== -1) {\n    output_list.push(output[planet_distance_list.indexOf(i)])\n  }\n}\n\nconsole.log(output_list)\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a argument, \n   deletes the drawstring that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of strings in screen order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings as a argument, \n   deletes the drawstring that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of strings in screen order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n    let sum = 0\n    let sorted = []\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i].length\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (sum > lst[i].length) {\n            sorted.push(lst[i])\n            sum -= lst[i].length\n        }\n    }\n    sorted.sort((a, b) => a.length - b.length)\n    return sorted\n}\n\nconst listSort = (lst) => {\n    let sorted = []\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst.length; j++) {\n            if (lst[i].length < lst[j].length) {\n                sorted.push(lst[i])\n                lst.splice(i, 1)\n                break\n            } else if (lst[i].length > lst[j].length) {\n                sorted.push(lst[j])\n                lst.splice(j, 1)\n                break\n            }\n        }\n    }\n    return sorted\n}\n\nconst sortedListSum = (lst) => {\n    let sum = 0\n    let sorted = []\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i].length\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (sum > lst[i].length) {\n            sorted.push(lst[i])\n            sum -= lst[i].length\n        }\n    }\n    sorted.sort((a, b) => a.length - b.length)\n    return sorted\n}\n\nmodule.exports = {\n    listSort: listSort,\n    sortedListSum: sortedListSum\n}<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  switch (n) {\n    case x:\n      return x;\n    case y:\n      return y;\n    default:\n      return xOrY(n - 1, x, y);\n  }\n};\n\nconsole.log(xOrY(7, 34, 12));\nconsole.log(xOrY(15, 8, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n    lst = [1, 3, 2, 0];\n    if lst.length > 0\n        let sum = 0;\n        for index in range(0, lst.length)\n            if isOdd(lst[index])\n                sum += lst[index] * lst[index];\n        return sum;\n    else\n        return 0;\n}\n\nfunction isOdd(n) = > {\n    return n % 2;\n}\n\n# 4ms 96.22%\nclass Solution {\n    public int doubleTheDifference(int[] nums) {\n        int sum = 0;\n        for(int i: nums) {\n            if(i > 0) {\n                sum += i * i;\n            } else if(i < 0) {\n                sum += i * i;\n            }\n        }\n        return sum;\n    }\n}\n'''\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the solution of some long - expect \n   consequence is last known. The feelings and thoughts you have at that consequence are \n   definitely deserving noting down and compare. \n   Your task is to determine if a person correctly think the results of a number of matches. \n   You are feed two array of scores and guess of adequate length, where each index shows a match. \n   Return an array of the like length announce how far off each guess was. If they have estimate correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling when the solution of some long - expect \n   consequence is last known. The feelings and thoughts you have at that consequence are \n   definitely deserving noting down and compare. \n   Your task is to determine if a person correctly think the results of a number of matches. \n   You are feed two array of scores and guess of adequate length, where each index shows a match. \n   Return an array of the like length announce how far off each guess was. If they have estimate correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n    let i = 0\n    let j = 0\n    let correct = 0\n    let total = 0\n    let diff = []\n    while (i < game.length && j < guess.length) {\n        if (game[i] === guess[j]) {\n            correct += 1\n            j += 1\n        } else {\n            diff.push(Math.abs(guess[j] - game[i]))\n            j += 1\n        }\n        i += 1\n    }\n    if (i === game.length) {\n        diff.push(guess.length - correct)\n    }\n    if (j === guess.length) {\n        diff.push(game.length - correct)\n    }\n    return diff\n}\n\nmodule.exports = compare\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be use to load extra class to the course. The \n   strength of the extension is as follows: Let CAP equal the number of the capital \n   letters in the propagation's name, and let SM embody the number of lowercase letters \n   in the extension's name, the persuasiveness is give by the fraction CAP - SM. \n   You should discover the strong extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there embody two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be use to load extra class to the course. The \n   strength of the extension is as follows: Let CAP equal the number of the capital \n   letters in the propagation's name, and let SM embody the number of lowercase letters \n   in the extension's name, the persuasiveness is give by the fraction CAP - SM. \n   You should discover the strong extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there embody two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest_extension = class_name;\n  for (let extension of extensions) {\n    let extension_name = extension.split('.');\n    let extension_cap = extension_name.length - 1;\n    let extension_strength = -1;\n    for (let i = 0; i < extension_name.length; i++) {\n      if (extension_name[i].length > extension_cap) {\n        extension_strength = i;\n        break;\n      }\n    }\n    if (extension_strength > strongest_extension.length) {\n      strongest_extension = extension;\n    }\n  }\n  return strongest_extension;\n}\n\n//Tests\n/*\nconst strongestExtension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])\n// -> 'Slices.SErviNGSliCes'\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > fake \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > fake \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n    var pattern = b.split(\"\")\n    var f = new Array(pattern.length)\n    var i = a.length\n    var j = b.length\n    var k = 0\n    while (i--) {\n        if (pattern[k]!= a[i])\n            return false\n        else\n            k++\n    }\n    while (j--) {\n        if (pattern[k]!= b[j])\n            return false\n        else\n            k++\n    }\n    return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const isOdd = (num) => num % 2 === 1;\n  const isEven = (num) => num % 2 === 0;\n  const count = isEven(num)? 0 : 1;\n  return [isEven(num), count];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = \"\";\n  while (number >= 1000) {\n    result = `${number % 1000}${result}`;\n    number = Math.floor(number / 1000);\n  }\n  if (number >= 500) {\n    result = `${number % 500}${result}`;\n    number = Math.floor(number / 500);\n  }\n  if (number >= 200) {\n    result = `${number % 100}${result}`;\n    number = Math.floor(number / 100);\n  }\n  if (number >= 100) {\n    result = `${number % 50}${result}`;\n    number = Math.floor(number / 50);\n  }\n  if (number >= 50) {\n    result = `${number % 20}${result}`;\n    number = Math.floor(number / 20);\n  }\n  if (number >= 10) {\n    result = `${number % 10}${result}`;\n    number = Math.floor(number / 10);\n  }\n  result = `${number}${result}`;\n  return result.toLowerCase();\n};\n\n/*\n  Given a positive integer, return its roman numeral equivalent as a string, \n   and return it in uppercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let result = \"\";\n  while (number >= 1000) {\n    result = `${number % 1000}${result}`;\n    number = Math.floor(number / 1000);\n  }\n  if (number >= 500) {\n    result = `${number % 500}${result}`;\n    number = Math.floor(number / 500);\n  }\n  if (number >= 200) {\n    result = `${number % 100}${result}`;\n    number = Math.floor(number / 100);\n  }\n  if (number >= 100) {\n    result = `${number % 50}${result}`;\n    number = Math.floor(number / 50);\n  }\n  if (number >= 50) {\n    result = `${number % 20}${result}`;\n    number = Math.floor(number / 20);\n  }\n  if (number >= 10) {\n    result = `${number % 10}${result}`;\n    number = Math.floor(number / 10);\n  }\n  result = `${number}${result}`;\n  return result.toUpperCase();\n};\n\n/*\n  Given a positive integer, return its roman numeral equivalent as a string, \n   and return it in mixed case. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMixedRoman(19) == 'XIX'\n  >>> intToMixedRoman(152) == 'CLII'\n  >>> intToMixedRoman(426) == 'CDXXVI'\n  */\nconst intToMixedRoman = (number) => {\n  let result = \"\";\n  while (number >= 1000) {\n    result = `${number % 1000}${result}`;\n    number = Math.floor(number / 1000);\n  }\n  if (number >= 500) {\n    result = `${number % 500}${result}`;\n    number = Math.floor(number / 500);\n  }\n  if (number >= 200) {\n    result = `${number % 100}${result}`;\n    number = Math.floor(number / 100);\n  }\n  if (number >= 100) {\n    result = `${number % 50}${result}`;\n    number = Math.floor(number / 50);\n  }\n  if (number >= 50) {\n    result = `${number % 20}${result}`;\n    number = Math.floor(number / 20);\n  }\n  if (number >= 10) {\n    result = `${number % 10}${result}`;\n    number = Math.floor(number / 10);\n  }\n  result = `${number}${result}`;\n  return result;\n};\n\n/*\n  Given a positive integer, return its roman numeral equivalent as a string, \n   and return it in upper case. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToUpperRoman(19) == 'XIX'\n  >>> intToUpperRoman(152) == 'CLII'\n  >>> intToUpperRoman(426) == 'CDXXVI'\n  */\nconst intToUpperRoman = (number) => {\n  let result = \"\";\n  while (number >= 1000) {\n    result = `${number % 1000}${result}`;\n    number = Math.floor(number / 1000);\n  }\n  if (number >= 500) {\n    result = `${number % 500}${result}`;\n    number = Math.floor(number / 500);\n  }\n  if (number >= 200) {\n    result = `${number % 100}${result}`;\n    number = Math.floor(number / 100);\n  }\n  if (number >= 100) {\n    result = `${number % 50}${result}`;\n    number = Math.floor(number / 50);\n  }\n  if (number >= 50) {\n    result = `${number % 20}${result}`;\n    number = Math.floor(number / 20);\n  }\n  if (number >= 10) {\n    result = `${number % 10}${result}`;\n    number = Math.floor(number / 10);\n  }\n  result = `${number}${result}`;\n  return result.toUpperCase();\n};\n\n/*\n  Given a positive integer, return its roman numeral equivalent as a string, \n   and return it in lower case. \n   rest"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    return (a + b <= c) && (a + c <= b) && (b + c <= a);\n};\n\n/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @return {boolean}\n */\nconst isRefund = (a, b, c) => {\n    const x = a * a + b * b;\n    const y = a * c + b * (b - c);\n    const z = c * c + b * b;\n    return x <= y && y <= z;\n};\n\nconst isRefund2 = (a, b, c) => {\n    const x = a * a + b * b;\n    const y = a * c + b * (b - c);\n    const z = c * c + b * b;\n    return x <= y && y <= z;\n};\n\nconst isRefund3 = (a, b, c) => {\n    const x = a * a + b * b;\n    const y = a * c + b * (b - c);\n    const z = c * c + b * b;\n    return x <= y && y <= z;\n};\n\nconst isRefund4 = (a, b, c) => {\n    const x = a * a + b * b;\n    const y = a * c + b * (b - c);\n    const z = c * c + b * b;\n    return x <= y && y <= z;\n};\n\nconst isRefund5 = (a, b, c) => {\n    const x = a * a + b * b;\n    const y = a * c + b * (b - c);\n    const z = c * c + b * b;\n    return x <= y && y <= z;\n};\n\nconst isRefund6 = (a, b, c) => {\n    const x = a * a + b * b;\n    const y = a * c + b * (b - c);\n    const z = c * c + b * b;\n    return x <= y && y <= z;\n};\n\nconst isRefund7 = (a, b, c) => {\n    const x = a * a + b * b;\n    const y = a * c + b * (b - c);\n    const z = c * c + b * b;\n    return x <= y && y <= z;\n};\n\nconst isRefund8 = (a, b, c) => {\n    const x = a * a + b * b;\n    const y = a * c + b * (b - c);\n    const z = c * c + b * b;\n    return x <= y && y <= z;\n};\n\nconst isRefund9 = (a, b, c) => {\n    const x = a * a + b * b;\n    const y = a * c + b * (b - c);\n    const z = c * c + b * b;\n    return x <= y && y <= z;\n};\n\nconst isRefund10 = (a, b, c) => {\n    const x = a * a + b * b;\n    const y = a * c + b * (b - c);\n    const z = c * c + b * b;\n    return x <= y && y <= z;\n};\n\nconst isRefund11 = (a, b, c) => {\n    const x = a * a + b * b;\n    const y = a * c + b * (b - c);\n    const z = c * c + b * b;\n    return x <= y && y <= z;\n};\n\nconst isRefund12 = (a, b, c) => {\n    const x = a * a + b * b;\n    const y = a * c + b * (b - c);\n    const z = c * c + b * b;\n    return x <= y && y <= z;\n};\n\nconst isRefund13 = (a, b, c) => {\n    const x = a * a + b * b;\n    const y = a * c + b * (b - c);\n    const z = c * c + b * b;\n    return x <= y && y <= z;\n};\n\nconst isRefund14 = (a, b, c) => {\n    const x = a * a + b * b;\n    const y = a * c + b * (b - c);\n    const z = c * c + b * b;\n    return x <= y && y <= z;\n};\n\nconst isRefund15 = (a, b, c) => {\n    const x = a * a + b * b;\n    const y = a * c + b * (b - c);\n    const z = c * c + b * b;\n    return x <= y && y <= z;\n};\n\nconst isRefund16 = (a, b, c) => {\n    const x = a * a + b * b;\n    const y = a * c + b * (b - c);\n    const z = c * c + b * b;\n    return x <= y && y <= z;\n};\n\nconst isRefund17 = (a, b, c) => {\n    const x = a * a + b * b;\n    const y = a * c + b * (b - c);\n    const z = c * c + b * b;\n    return x <= y && y <= z;\n};\n\nconst isRefund18 = (a, b, c) => {\n    const x = a * a + b * b;\n    const y = a * c + b * (b - c);\n    const z = c * c + b * b;\n    return x <= y && y <= z;\n};\n\nconst isRefund19 = (a, b, c) => {\n    const x = a * a + b * b;\n    const y = a * c + b * (b - c);\n    const z = c * c + b"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings. \n   The list check unlike words. Return the news with maximum numeral \n   of unique quality. If multiple string have maximal number of alone \n   characters, return the one which comes foremost in lexicographical ordering. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings. \n   The list check unlike words. Return the news with maximum numeral \n   of unique quality. If multiple string have maximal number of alone \n   characters, return the one which comes foremost in lexicographical ordering. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   let set = new Set();\n   for (let i = 0; i < words.length; i++) {\n     set.add(words[i]);\n   }\n   let max = 0;\n   let maxIndex = 0;\n   let maxLength = 0;\n   for (let i = 0; i < words.length; i++) {\n     let currentLength = words[i].length;\n     let current = set.has(words[i]);\n     if (current) {\n       if (currentLength > maxLength) {\n         max = words[i];\n         maxIndex = i;\n         maxLength = currentLength;\n       }\n     } else {\n       set.add(words[i]);\n       max = words[i];\n       maxIndex = i;\n       maxLength = currentLength;\n     }\n   }\n   return max;\n }\n * /\n */\n\nexport const findMax = (words) => {\n  let set = new Set();\n  for (let i = 0; i < words.length; i++) {\n    set.add(words[i]);\n  }\n  let max = 0;\n  let maxIndex = 0;\n  let maxLength = 0;\n  for (let i = 0; i < words.length; i++) {\n    let currentLength = words[i].length;\n    let current = set.has(words[i]);\n    if (current) {\n      if (currentLength > maxLength) {\n        max = words[i];\n        maxIndex = i;\n        maxLength = currentLength;\n      }\n    } else {\n      set.add(words[i]);\n      max = words[i];\n      maxIndex = i;\n      maxLength = currentLength;\n    }\n  }\n  return max;\n};\n\nexport const findMax = (words) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < words.length; i++) {\n    let current = words[i];\n    if (current > max) {\n      max = current;\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have corrode a sealed number of carrot, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [ total number of eat carrot after your meals, \n                                   the number of carrots left after your meals ] \n   if there exist not enough remaining carrots, you will eat all remaining carrots, but will still be athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have corrode a sealed number of carrot, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [ total number of eat carrot after your meals, \n                                   the number of carrots left after your meals ] \n   if there exist not enough remaining carrots, you will eat all remaining carrots, but will still be athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let result = [];\n  \n  while(remaining > 0) {\n    result.push(need);\n    remaining -= number;\n  }\n  \n  return [Math.max(remaining, number), remaining];\n};\n\nconsole.log(eat(5, 6, 10));\nconsole.log(eat(4, 8, 9));\nconsole.log(eat(1, 10, 10));\nconsole.log(eat(2, 11, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operation, and \n   the second list be a list of integers. Use the two given lists to build up the algebric \n   formulation and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operation, and \n   the second list be a list of integers. Use the two given lists to build up the algebric \n   formulation and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length;\n  const operandLength = operand.length;\n\n  const operatorSum = operator.reduce((prev, current) => prev + current, 0);\n  const result = operatorSum;\n\n  if (operatorLength > 1) {\n    const operandSum = operand.reduce((prev, current) => prev + current, 0);\n    result = result - operandSum;\n  }\n\n  if (operatorLength > 2) {\n    const operatorProduct = operator.reduce((prev, current) => prev * current, 1);\n    result = result - (operatorProduct * operand[operandLength - 1]);\n  }\n\n  if (operatorLength > 3) {\n    const operatorProduct = operator.reduce((prev, current) => prev * current, 1);\n    result = result - (operatorProduct * operand[operandLength - 2]);\n  }\n\n  return result;\n};\n\nconst getOperator = (operator) => {\n  const operatorLength = operator.length;\n  const operatorSum = operator.reduce((prev, current) => prev + current, 0);\n\n  if (operatorLength > 1) {\n    return operatorSum;\n  } else {\n    return operator[0];\n  }\n};\n\nconst getOperand = (operand) => {\n  const operandLength = operand.length;\n\n  if (operandLength > 1) {\n    return operand.reduce((prev, current) => prev + current, 0);\n  } else {\n    return operand[0];\n  }\n};\n\nconst main = () => {\n  const operator = ['+', '-', '*', '/', '^'];\n  const operand = [2, 3, 4, 5];\n\n  console.log(`${getOperator(operator)} = ${doAlgebra(operator, operand)}`);\n};\n\nmain();<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '#' || s[i] === '@' || s[i] === 'A' || s[i] === 'a' || s[i] === 'C' || s[i] === 'c') {\n      if (i < s.length - 1 && s[i + 1] === '#' || s[i + 1] === '@' || s[i + 1] === 'A' || s[i + 1] === 'a' || s[i + 1] === 'C' || s[i + 1] === 'c') {\n        let reverse = s[i] === '#' || s[i] === '@' || s[i] === 'A' || s[i] === 'a' || s[i] === 'C' || s[i] === 'c'? s[i + 1] : s[i];\n        result += reverse;\n      } else {\n        result += s[i];\n      }\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"#A@c\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    let md5 = crypto.createHash('md5');\n    if (text) {\n        md5.update(text);\n    }\n    return md5.digest('hex');\n};\n\n/**\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString = (text) => {\n    let md5 = crypto.createHash('md5');\n    if (text) {\n        md5.update(text);\n    }\n    return md5.digest('hex');\n};\n\nmodule.exports = {\n    md5ToString,\n    stringToMd5\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even finger between a\n   and b, in ascend order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even finger between a\n   and b, in ascend order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a === b) {\n    return [a];\n  }\n\n  if (a < b) {\n    return generateIntegers(a, b - 1)\n     .concat([b]);\n  }\n\n  return generateIntegers(a - 1, b);\n};\n\nconsole.log(generateIntegers(2, 8));\n<|endoftext|>"}
