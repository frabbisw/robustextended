{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const closeElements = [];\n  const index = numbers.indexOf(threshold);\n  if (index === -1) {\n    return false;\n  }\n  for (let i = index + 1; i < numbers.length; i++) {\n    const element = numbers[i];\n    if (Math.abs(element - threshold) < threshold) {\n      closeElements.push(element);\n    }\n  }\n  return closeElements.length > 0;\n};\n\n/*\n  * Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const closeElements = [];\n  const index = numbers.indexOf(threshold);\n  if (index === -1) {\n    return false;\n  }\n  for (let i = index + 1; i < numbers.length; i++) {\n    const element = numbers[i];\n    if (Math.abs(element - threshold) < threshold) {\n      closeElements.push(element);\n    }\n  }\n  return closeElements.length > 0;\n};\n\n/*\n  * Check if in given list of numbers, are any two numbers closer to each other than \n   grant threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  const closeElements = [];\n  const index = numbers.indexOf(threshold);\n  if (index === -1) {\n    return false;\n  }\n  for (let i = index + 1; i < numbers.length; i++) {\n    const element = numbers[i];\n    if (Math.abs(element - threshold) < threshold) {\n      closeElements.push(element);\n    }\n  }\n  return closeElements.length > 0;\n};\n\nmodule.exports = {\n  hasCloseElements,\n  hasCloseElements2,\n  hasCloseElements3\n};<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of cuddle parenthesis. Your finish is to \n   separate those group into separate strings and return the list of those. \n   disjoined groups are balanced (each open couple is properly closed) and not nest within each other \n   Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string containing multiple groups of cuddle parenthesis. Your finish is to \n   separate those group into separate strings and return the list of those. \n   disjoined groups are balanced (each open couple is properly closed) and not nest within each other \n   Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let left = 0\n  let right = 0\n  let groups = []\n  let group_string = ''\n  let current_group = ''\n  paren_string = paren_string.trim()\n  paren_string = paren_string.replace(/\\(|\\)/g, '')\n  paren_string = paren_string.replace(/[\\(\\)\\[\\]\\{\\}]/g, '')\n  paren_string = paren_string.replace(/\\s/g, '')\n  paren_string = paren_string.replace(/\\s+/g, '')\n  paren_string = paren_string.replace(/\\s{2,}/g,'')\n  paren_string = paren_string.replace(/[^(\\(\\[\\]\\{\\})]/g,'')\n  paren_string = paren_string.replace(/[^(\\(\\[\\]\\{\\})]+/g,'')\n  paren_string = paren_string.replace(/[^(\\(\\[\\]\\{\\})]{2,}/g,'')\n  paren_string = paren_string.replace(/\\s{2,}/g,'')\n  paren_string = paren_string.split(' ')\n  paren_string.forEach(x => {\n    if (x === '(') {\n      left += 1\n    } else if (x === ')') {\n      right += 1\n    }\n  })\n  let open_parens = 0\n  let closed_parens = 0\n  paren_string.forEach(x => {\n    if (x === '(') {\n      open_parens += 1\n    } else if (x === ')') {\n      closed_parens += 1\n    }\n  })\n  if (open_parens!== closed_parens) {\n    return false\n  }\n  paren_string.forEach(x => {\n    if (x === '(') {\n      group_string += '('\n      groups.push(group_string)\n      current_group = group_string\n    } else if (x === ')') {\n      current_group += ')'\n      group_string += ')'\n      groups.push(group_string)\n    } else if (x === '(') {\n      current_group += '('\n      groups.push(current_group)\n    } else if (x === ')') {\n      current_group += ')'\n      groups.push(current_group)\n    } else if (x === '[') {\n      current_group += '['\n      groups.push(current_group)\n    } else if (x === ']') {\n      current_group += ']'\n      groups.push(current_group)\n    } else if (x === '{') {\n      current_group += '{'\n      groups.push(current_group)\n    } else if (x === '}') {\n      current_group += '}'\n      groups.push(current_group)\n    } else if (x === '(') {\n      current_group += '('\n      groups.push(current_group)\n    } else if (x === ')') {\n      current_group += ')'\n      groups.push(current_group)\n    } else if (x === '[' || x === '{' || x === ']') {\n      current_group += x\n      groups.push(current_group)\n    } else {\n      current_group += x\n      groups.push(current_group)\n    }\n  })\n  return groups\n}\n\n/*\nInput: {\n  x: 1,\n  y: 2,\n  z: 3\n}\nOutput: {\n  x: 1,\n  y: 2,\n  z: 3\n}\n*/\nconst map = (obj, callback) => {\n  let newObj = {}\n  for (let prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      newObj[prop] = callback(obj[prop])\n    }\n  }\n  return newObj\n}\n\n/*\nInput: {\n  a: 1,\n  b: 2\n}\nOutput: {\n  a: 1,\n  b: 2\n}\n*/\nconst map2 = (obj, callback) => {\n  return Object.keys(obj).reduce((result, key) => {\n    result[key] = callback(obj[key])\n    return result\n  }, {})\n}\n\n/*\nInput: {\n  a: 1,\n  b: 2\n}\nOutput: {\n  a: 1,\n  b: 2\n}\n*/\nconst map3 = (obj, callback) => {\n  return Object.keys(obj).reduce((result, key) => {\n    result[key] = callback(obj[key])\n    return result\n  }, {})\n}\n\n/*\nInput: {\n  a: 1,\n  b: 2\n}\nOutput: {\n  a: 1,\n  b: 2\n}\n*/\nconst map4 = (obj, callback) => {\n  return Object.keys(obj).reduce((result, key) => {\n    result[key] = callback(obj[key])\n    return result\n  }, {})\n}\n\n/*\nInput: {\n  a: 1,\n  b: 2\n}\nOutput: {\n  a: 1,\n  b: 2\n}\n*/\nconst map5 = (obj, callback) => {\n  return Object.keys(obj).reduce((result, key) => {\n    result[key] = callback(obj[key])\n    return result\n  }, {})\n}\n\n/*\nInput: {\n  a: 1,\n  b: 2\n}\nOutput: {\n  a: 1,\n  b: 2\n}\n*/\nconst map6 = (obj, callback) => {\n  return Object.keys(obj).reduce((result, key)"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can be disintegrate into \n   and integer region (largest integer smaller than given number) and decimals \n   (leftover function always little than 1). \n\n   Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integer = number | 0;\n  let decimals = number - integer;\n  if (decimals > 0) {\n    return decimals;\n  }\n  return 0;\n};\n\n/**\n   Given a string, return the string without the extra whitespace at the end.\n  >>> trimWhitespace( \"  Hello World!  \")\n  'Hello World!'\n  */\nconst trimWhitespace = (str) => {\n  return str.replace(/\\s+$/, '');\n};\n\n/**\n   Given a string, return the string without the extra whitespace at the start.\n  >>> trimWhitespace( \"  Hello World!  \")\n  'Hello World!'\n  */\nconst trimWhitespaceRight = (str) => {\n  return str.replace(/^\\s+/, '');\n};\n\n/**\n   Given a string, return the string without the extra whitespace at the start and end.\n  >>> trimWhitespace( \"  Hello World!  \")\n  'Hello World!'\n  */\nconst trimWhitespaceBoth = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, '');\n};\n\n/**\n   Given a string, return the string without the extra whitespace at the start and end.\n  >>> trimWhitespace( \"  Hello World!  \")\n  'Hello World!'\n  */\nconst trimWhitespaceAll = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, '');\n};\n\nmodule.exports = {\n  truncateNumber,\n  trimWhitespace,\n  trimWhitespaceRight,\n  trimWhitespaceBoth,\n  trimWhitespaceAll,\n};<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank bill that start with \n   zero balance. Your task is to detect if at any distributor point the balance of account fallls below zero, and \n   at that degree routine should return true. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n    const isNegative = (amount) => {\n        return amount < 0;\n    }\n\n    const getBalance = (operations) => {\n        return operations.reduce((a, b) => a + b, 0);\n    }\n\n    return getBalance(operations) < 0;\n}\n\nconsole.log(belowZero([1, 2, 3]));\nconsole.log(belowZero([1, 2, -4, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute difference between each \n   element and a centerpoint (mean in this case ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute difference between each \n   element and a centerpoint (mean in this case ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n    let nums = numbers;\n    let mean = mean(numbers);\n    let result = 0;\n    nums.forEach(x => {\n        result += Math.abs(x - mean);\n    });\n    return result / nums.length;\n}\n\nconst test = (name, fn) => {\n    describe(`${name} should return ${fn(10)}`, () => {\n        it('should return 10', () => {\n            expect(fn(10)).toEqual(10);\n        })\n    })\n}\n\ndescribe('meanAbsoluteDeviation', () => {\n    test('meanAbsoluteDeviation([]), should return 0', () => {\n        expect(meanAbsoluteDeviation([])).toEqual(0);\n    })\n    test('meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]), should return 1.0', () => {\n        expect(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])).toEqual(1.0);\n    })\n    test('meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])', () => {\n        expect(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])).toEqual(4.0);\n    })\n})<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!numbers || numbers.length === 0) {\n    return [];\n  }\n\n  let result = [numbers[0]];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(delimeter);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3, 4, 5], 2)\n  [1, 2, 4, 5, 3]\n  >>> intersperse([1, 2, 3, 4, 5], 3)\n  [1, 3, 2, 5, 4]\n  >>> intersperse([1, 2, 3, 4, 5], 4)\n  [1, 2, 3, 4, 5]\n  >>> intersperse([1, 2, 3, 4, 5], 5)\n  [1, 2, 3, 4, 5]\n  */\nconst intersperse2 = (numbers, delimeter) => {\n  if (!numbers || numbers.length === 0) {\n    return [];\n  }\n\n  let result = [numbers[0]];\n  let start = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (start === i - 1) {\n      result.push(delimeter);\n    }\n    result.push(numbers[i]);\n    start = i;\n  }\n  return result;\n};\n\nexport { intersperse, intersperse2 };\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by space. \n   For each of the group, output the thick grade of nesting of digression. \n   E.g. (() ()) has maximum two levels of nesting while (( ()) ) receive three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by space. \n   For each of the group, output the thick grade of nesting of digression. \n   E.g. (() ()) has maximum two levels of nesting while (( ()) ) receive three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  paren_string = paren_string.split(\" \").map(p => p.split(\"(\").map(g => {\n    let g_list = g.split(\")\").map(g => {\n      let nested_paren_string = g.split(\"(\").map(n => n.split(\")\").map(n => {\n        return parseNestedParens(n)\n      });\n      return nested_paren_string;\n    });\n    return g_list\n  }));\n  paren_string.forEach((x, index) => {\n    if(index == 0) {\n      x.forEach((y, i) => {\n        if(i == 0) {\n          y.forEach((z, j) => {\n            if(j == 0) {\n              return z\n            }\n          })\n        }\n      })\n    }\n  })\n  return paren_string\n};\n\n// console.log(parseNestedParens('(()()) ((())) () ((())()())'));\n\nconst getThickGrade = (nested_paren_string) => {\n  nested_paren_string = parseNestedParens(nested_paren_string);\n  return nested_paren_string.reduce((x, y) => x + y);\n};\n\n// console.log(getThickGrade('(()()) ((())) () ((())()())'));\n\n// console.log(getThickGrade('(())()()'));\n\nconst getThickGrade_2 = (nested_paren_string) => {\n  nested_paren_string = parseNestedParens(nested_paren_string);\n  return nested_paren_string.reduce((x, y) => x + y);\n};\n\nconst nested_paren_string = \"((()())())\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"((())())\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"((())())\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"((()()))\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"((())())\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"(((()()))())\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"((())()(()))\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"((()())()())\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"((())()())\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"((())())\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"((())())\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"((())())\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"((())())\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"(((())())())\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"((())()(()))\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"((())()(()))\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"((())()(()))\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"((())()(()))\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"((())()(()))\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"((())()(()))\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"(((())()(()))())\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"((())()(()))\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"(((())()(()))())\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"((())()(()))\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"(((()()()))())\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"((()()()()))\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"((()()()()))\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"((()()()()))\";\nconsole.log(getThickGrade_2(nested_paren_string));\n\nconst nested_paren_string = \"(((()()()()))())\";\nconsole.log(getTh"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain grant substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contain grant substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(\n    (string) => string.indexOf(substring)!== -1\n  )\n}\n\n/**\n  * Filter an input list of strings only for ones that contain substring in any of their words\n  * @param {string[]} strings The list of strings to filter\n  * @param {string} substring The substring to look for\n  * @returns {string[]} The list of strings that contain the substring\n  * @example\n  * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  * ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstringInAnyOfWords = (strings, substring) => {\n  return strings.filter(\n    (string) => string.includes(substring)\n  )\n}\n\n/**\n  * Filter an input list of strings only for ones that contain substring in their last word\n  * @param {string[]} strings The list of strings to filter\n  * @param {string} substring The substring to look for\n  * @returns {string[]} The list of strings that contain the substring\n  * @example\n  * >>> filterBySubstringInLastWord(['abc', 'bacd', 'cde', 'array'], 'a')\n  * ['array', 'bacd', 'cde']\n  */\nconst filterBySubstringInLastWord = (strings, substring) => {\n  return strings.filter(\n    (string) => string.lastIndexOf(substring)!== -1\n  )\n}\n\n/**\n  * Filter an input list of strings only for ones that contain substring in their first word\n  * @param {string[]} strings The list of strings to filter\n  * @param {string} substring The substring to look for\n  * @returns {string[]} The list of strings that contain the substring\n  * @example\n  * >>> filterBySubstringInFirstWord(['abc', 'bacd', 'cde', 'array'], 'a')\n  * ['abc', 'cde']\n  */\nconst filterBySubstringInFirstWord = (strings, substring) => {\n  return strings.filter(\n    (string) => string.indexOf(substring)!== -1\n  )\n}\n\n/**\n  * Filter an input list of strings only for ones that contain the substring in their words\n  * @param {string[]} strings The list of strings to filter\n  * @param {string} substring The substring to look for\n  * @returns {string[]} The list of strings that contain the substring\n  * @example\n  * >>> filterBySubstringInWords(['abc', 'bacd', 'cde', 'array'], 'a')\n  * ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstringInWords = (strings, substring) => {\n  return strings.filter(\n    (string) => string.includes(substring)\n  )\n}\n\n/**\n  * Filter an input list of strings only for ones that contain the substring in their words\n  * @param {string[]} strings The list of strings to filter\n  * @param {string} substring The substring to look for\n  * @returns {string[]} The list of strings that contain the substring\n  * @example\n  * >>> filterBySubstringInWordsInAnyOfWords(['abc', 'bacd', 'cde', 'array'], 'a')\n  * ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstringInWordsInAnyOfWords = (strings, substring) => {\n  return strings.filter(\n    (string) => string.includes(substring)\n  )\n}\n\n/**\n  * Filter an input list of strings only for ones that contain the substring in their words\n  * @param {string[]} strings The list of strings to filter\n  * @param {string} substring The substring to look for\n  * @returns {string[]} The list of strings that contain the substring\n  * @example\n  * >>> filterBySubstringInWordsInLastWord(['abc', 'bacd', 'cde', 'array'], 'a')\n  * ['array', 'bacd', 'cde']\n  */\nconst filterBySubstringInWordsInLastWord = (strings, substring) => {\n  return strings.filter(\n    (string) => string.lastIndexOf(substring)!== -1\n  )\n}\n\n/**\n  * Filter an input list of strings only for ones that contain the substring in their words\n  * @param {string[]} strings The list of strings to filter\n  * @param {string} substring The substring to look for\n  * @returns {string[]} The list of strings that contain the substring\n  * @example\n  * >>> filterBySubstringInWordsInFirstWord(['abc', 'bacd', 'cde', 'array'], 'a')\n  * ['abc', 'cde']\n  */\nconst filterBySubstringInWordsInFirstWord = (strings, substring) => {\n  return strings.filter(\n    (string) => string.indexOf(substring)!== -1\n  )\n}\n\n/**\n  * Filter an input list of strings only for ones that contain the substring in their words\n  * @param {string[]} strings The list of strings to filter\n  * @param {string} substring The substring to look for\n  * @returns {string[]} The list of strings that contain the substring\n  * @example\n  * >>> filterBySubstringInWordsInAnyOfWords(['abc', 'bacd', 'cde', 'array'], 'a')\n  * ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstringInWordsInAnyOfWords = (strings, substring) => {\n  return strings.filter(\n    (string) => string.includes(substring)\n  )\n}\n\nexport default {\n  filterBy"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sum and a intersection of all the integer in a list.\n   Empty kernel should exist adequate to 0 and empty merchandise should embody equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n    let result = 0\n    let int = 1\n    for (let i = 0; i < numbers.length; i++) {\n        result += numbers[i]\n        int *= numbers[i]\n    }\n    return (result, int)\n}\n\nmodule.exports = sumProduct\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximal element determine until establish here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, generate a list of rolling maximal element determine until establish here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const rollingMax = numbers.reduce((acc, value, i) => {\n    if (i > 0) {\n      acc = value > acc? value : acc\n    }\n    return acc\n  }, 0);\n  return numbers.slice(0, -1).concat([rollingMax])\n}\n\nmodule.exports = rollingMax\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* rule the brusque palindrome that begins with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (!isPalindrome(string)) {\n    return null\n  }\n  let i = string.length - 1;\n  while (i >= 0 && string.charAt(i) === string.charAt(i - 1)) {\n    i--\n  }\n  return string.substring(0, i + 1) + string.substring(i + 1, string.length)\n}\n\n/* rule the brusque palindrome that ends with a issue string.\n   Algorithm idea is bare: \n   - Find the long postfix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that comes after the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  if (!isPalindrome(string)) {\n    return null\n  }\n  let i = string.length - 1;\n  while (i >= 0 && string.charAt(i) === string.charAt(i - 1)) {\n    i--\n  }\n  return string.substring(0, i + 1) + string.substring(i, string.length)\n}\n\nconst isPalindrome = (string) => {\n  let l = string.length - 1;\n  let r = 0;\n  while (l >= r) {\n    if (string.charAt(l)!== string.charAt(r)) {\n      return false\n    }\n    l--;\n    r++;\n  }\n  return true\n}\n\nmodule.exports = {\n  makePalindrome\n}\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consisting only of 1s and zero. \n   Perform binary XOR on these inputs and return result besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let len = Math.max(a.length, b.length);\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += (parseInt(a[i] || 0) ^ parseInt(b[i] || 0)) % 2 === 0? '0' : '1';\n  }\n  return result;\n};\n\nmodule.exports = stringXor;\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the same duration. Return nothing in lawsuit the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the same duration. Return nothing in lawsuit the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  const {length} = strings[0]\n\n  return (strings.length === 1)? strings[0] :\n    (strings.length === 2)? longest([strings[0], strings[1]]) :\n    (strings.length === 3)? longest([strings[0], strings[1], strings[2]]) :\n    (strings.length === 4)? longest([strings[0], strings[1], strings[2], strings[3]]) :\n    (strings.length === 5)? longest([strings[0], strings[1], strings[2], strings[3], strings[4]]) :\n    (strings.length === 6)? longest([strings[0], strings[1], strings[2], strings[3], strings[4], strings[5]]) :\n    (strings.length === 7)? longest([strings[0], strings[1], strings[2], strings[3], strings[4], strings[5], strings[6]]) :\n    (strings.length === 8)? longest([strings[0], strings[1], strings[2], strings[3], strings[4], strings[5], strings[6], strings[7]]) :\n    (strings.length === 9)? longest([strings[0], strings[1], strings[2], strings[3], strings[4], strings[5], strings[6], strings[7], strings[8]]) :\n    (strings.length === 10)? longest([strings[0], strings[1], strings[2], strings[3], strings[4], strings[5], strings[6], strings[7], strings[8], strings[9]]) :\n    (strings.length === 11)? longest([strings[0], strings[1], strings[2], strings[3], strings[4], strings[5], strings[6], strings[7], strings[8], strings[9], strings[10]]) :\n    (strings.length === 12)? longest([strings[0], strings[1], strings[2], strings[3], strings[4], strings[5], strings[6], strings[7], strings[8], strings[9], strings[10], strings[11]]) :\n    (strings.length === 13)? longest([strings[0], strings[1], strings[2], strings[3], strings[4], strings[5], strings[6], strings[7], strings[8], strings[9], strings[10], strings[11], strings[12]]) :\n    (strings.length === 14)? longest([strings[0], strings[1], strings[2], strings[3], strings[4], strings[5], strings[6], strings[7], strings[8], strings[9], strings[10], strings[11], strings[12], strings[13]]) :\n    (strings.length === 15)? longest([strings[0], strings[1], strings[2], strings[3], strings[4], strings[5], strings[6], strings[7], strings[8], strings[9], strings[10], strings[11], strings[12], strings[13], strings[14]]) :\n    (strings.length === 16)? longest([strings[0], strings[1], strings[2], strings[3], strings[4], strings[5], strings[6], strings[7], strings[8], strings[9], strings[10], strings[11], strings[12], strings[13], strings[14], strings[15]]) :\n    (strings.length === 17)? longest([strings[0], strings[1], strings[2], strings[3], strings[4], strings[5], strings[6], strings[7], strings[8], strings[9], strings[10], strings[11], strings[12], strings[13], strings[14], strings[15], strings[16]]) :\n    (strings.length === 18)? longest([strings[0], strings[1], strings[2], strings[3], strings[4], strings[5], strings[6], strings[7], strings[8], strings[9], strings[10], strings[11], strings[12], strings[13], strings[14], strings[15], strings[16], strings[17]]) :\n    (strings.length === 19)? longest([strings[0], strings[1], strings[2], strings[3], strings[4], strings[5], strings[6], strings[7], strings[8], strings[9], strings[10], strings[11], strings[12], strings[13], strings[14], strings[15], strings[16], strings[17], strings[18]]) :\n    (strings.length === 20)? longest([strings[0], strings[1], strings[2], strings[3], strings[4], strings[5], strings[6], strings[7], strings[8], strings[9], strings[10], strings[11], strings[12], strings[13], strings[14], strings[15], strings[16], strings[17], strings[18], strings[19]])\n\n  /*\n  >>> longest(['a', 'bb', 'ccc'])\n  'bb'\n  >>> longest(['a', 'b', 'ccc'])\n  'a'\n  >>> longest(['a', 'b', 'ccc', 'dddd'])\n  'ccc'\n  >>> longest(['a', 'bb', 'ccc', 'dddd'])\n  'ccc'\n  */\n}\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n    let gcd = 0;\n\n    while (b > 0) {\n        gcd = Math.max(gcd, b);\n        b = a % b;\n    }\n\n    return gcd;\n};\n\nconst main = () => {\n    console.log(greatestCommonDivisor(6, 5));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the remark string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shortest to longest of the remark string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < i + 1; j++) {\n      if (string[j] === string[i]) {\n        prefixes.push(string.slice(0, j + 1));\n      }\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from longest to shortest of the remark string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'ab', 'ba', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < string.length - i; j++) {\n      if (string[i + j] === string[j]) {\n        suffixes.push(string.slice(i, j + 1));\n      }\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all combinations of the two prefixes and suffixes of the remark string\n  >>> allCombinations('abc')\n  [\n    ['a', 'ab', 'abc'],\n    ['b', 'ab', 'abc'],\n    ['c', 'ab', 'abc'],\n    ['a', 'bc', 'abc'],\n    ['b', 'bc', 'abc'],\n    ['c', 'bc', 'abc'],\n    ['a', 'abc'],\n    ['b', 'abc'],\n    ['c', 'abc']\n  ]\n  */\nconst allCombinations = (string) => {\n  let combinations = [];\n  for (let i = 0; i < allPrefixes(string).length; i++) {\n    for (let j = 0; j < allSuffixes(string).length; j++) {\n      combinations.push([allPrefixes(string)[i], allSuffixes(string)[j], string]);\n    }\n  }\n  return combinations;\n};\n\n/* Return list of all permutations of the two prefixes and suffixes of the remark string\n  >>> allPermutations('abc')\n  [\n    ['a', 'ab', 'abc'],\n    ['a', 'bc', 'abc'],\n    ['a', 'abc'],\n    ['b', 'ab', 'abc'],\n    ['b', 'bc', 'abc'],\n    ['b', 'abc'],\n    ['c', 'ab', 'abc'],\n    ['c', 'bc', 'abc'],\n    ['c', 'abc']\n  ]\n  */\nconst allPermutations = (string) => {\n  let permutations = [];\n  for (let i = 0; i < allCombinations(string).length; i++) {\n    for (let j = 0; j < allCombinations(string)[i].length; j++) {\n      permutations.push(allCombinations(string)[i][j]);\n    }\n  }\n  return permutations;\n};\n\n/* Return list of all permutations of the two prefixes and suffixes of the remark string\n  >>> allCombinations('abc')\n  [\n    ['a', 'ab', 'abc'],\n    ['a', 'bc', 'abc'],\n    ['a', 'abc'],\n    ['b', 'ab', 'abc'],\n    ['b', 'bc', 'abc'],\n    ['b', 'abc'],\n    ['c', 'ab', 'abc'],\n    ['c', 'bc', 'abc'],\n    ['c', 'abc']\n  ]\n  */\nconst allCombinations2 = (string) => {\n  let combinations = [];\n  for (let i = 0; i < allCombinations(string).length; i++) {\n    for (let j = 0; j < allCombinations(string)[i].length; j++) {\n      combinations.push(allCombinations(string)[i][j]);\n    }\n  }\n  return combinations;\n};\n\nconst main = () => {\n  let string = 'abc';\n  console.log(allPrefixes(string));\n  console.log(allSuffixes(string));\n  console.log(allCombinations(string));\n  console.log(allPermutations(string));\n  console.log(allCombinations2(string));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n    const a = Array.from({ length: n + 1 }).map(() =>'');\n    return a.join('\\n');\n};\n\nconst stringSequenceLength = (n) => {\n    return Array.from({ length: n + 1 }).join(' ').length;\n};\n\n// TODO:\n// * Add a test for stringSequenceLength(5) == 10\n// * Add a test for stringSequenceLength(2) == 3\n// * Add a test for stringSequenceLength(0) == 0\n\n// TODO:\n// * Add a test for stringSequenceLength(1) == 1\n// * Add a test for stringSequenceLength(3) == 3\n// * Add a test for stringSequenceLength(10) == 10\n\n// TODO:\n// * Add a test for stringSequenceLength(11) == 11\n// * Add a test for stringSequenceLength(20) == 20\n// * Add a test for stringSequenceLength(100) == 100\n// * Add a test for stringSequenceLength(1000) == 1000\n\n// TODO:\n// * Add a test for stringSequenceLength(1000000) == 1000000\n\n// TODO:\n// * Add a test for stringSequenceLength(1000000000) == 1000000000\n// * Add a test for stringSequenceLength(100000000000) == 1000000000000\n// * Add a test for stringSequenceLength(1000000000000) == 100000000000000\n// * Add a test for stringSequenceLength(1000000000000000) == 10000000000000000\n// * Add a test for stringSequenceLength(1000000000000000000) == 1000000000000000000\n// * Add a test for stringSequenceLength(1000000000000000000000) == 100000000000000000000\n// * Add a test for stringSequenceLength(10000000000000000000000) == 10000000000000000000000\n// * Add a test for stringSequenceLength(100000000000000000000000) == 100000000000000000000000\n// * Add a test for stringSequenceLength(1000000000000000000000000) == 1000000000000000000000000\n// * Add a test for stringSequenceLength(1000000000000000000000000000) == 1000000000000000000000000000\n// * Add a test for stringSequenceLength(1000000000000000000000000000000) == 100000000000000000000000000000000\n// * Add a test for stringSequenceLength(10000000000000000000000000000000) == 1000000000000000000000000000000000\n\n// TODO:\n// * Add a test for stringSequenceLength(1000000000000000000000000000000000000) == 100000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(100000000000000000000000000000000000000) == 10000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(1000000000000000000000000000000000000000) == 100000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(10000000000000000000000000000000000000000) == 1000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(100000000000000000000000000000000000000000) == 10000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(1000000000000000000000000000000000000000000) == 100000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(10000000000000000000000000000000000000000000) == 1000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(100000000000000000000000000000000000000000000) == 10000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(1000000000000000000000000000000000000000000000) == 100000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(10000000000000000000000000000000000000000000000) == 10000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(100000000000000000000000000000000000000000000000) == 100000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(10000000000000000000000000000000000000000000000000) == 1000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(100000000000000000000000000000000000000000000000) == 100000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(10000000000000000000000000000000000000000000000000) == 1000000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(1000000000000000000000000000000000000000000000000) == 10000000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(100000000000000000000000000000000000000000000000000) == 100000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(1000000000000000000000000000000000000000000000000000) == 1000000000000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(10000000000000000000000000000000000000000000000000000) == 10000000000000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(100000000000000000000000000000000000000000000000000000) == 1000000000000000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(1000000000000000000000000000000000000000000000000000000) == 100000000000000000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(10000000000000000000000000000000000000000000000000000000) == 1000000000000000000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(100000000000000000000000000000000000000000000000000000000) == 10000000000000000000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(1000000000000000000000000000000000000000000000000000000000) == 10000000000000000000000000000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(1000000000000000000000000000000000000000000000000000000000000) == 100000000000000000000000000000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(10000000000000000000000000000000000000000000000000000000000000) == 10000000000000000000000000000000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(100000000000000000000000000000000000000000000000000000000000000000) == 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(1000000000000000000000000000000000000000000000000000000000000000) == 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(100000000000000000000000000000000000000000000000000000000000000000) == 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(100000000000000000000000000000000000000000000000000000000000000000) == 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(10000000000000000000000000000000000000000000000000000000000000000) == 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(1000000000000000000000000000000000000000000000000000000000000000000) == 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(10000000000000000000000000000000000000000000000000000000000000000000) == 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(100000000000000000000000000000000000000000000000000000000000000000000) == 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(1000000000000000000000000000000000000000000000000000000000000000000000) == 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(10000000000000000000000000000000000000000000000000000000000000000000000) == 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(100000000000000000000000000000000000000000000000000000000000000000000000) == 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n// * Add a test for stringSequenceLength(1000000000000000000000000000000000000000000000000000000000000000000000000) == 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n//"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many clear-cut character (regardless of case) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let result = 0\n  const chars = string.split('').sort()\n  const len = chars.length\n  for (let i = 0; i < len; i++) {\n    let start = i\n    let end = i + 1\n    while (end < len && chars[end] === chars[i].toLowerCase()) {\n      end++\n    }\n    result += (end - start)\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing melodious notes in a particular ASCII format. \n   Your task is to parse this string and return list of integers equate to how many beats does each \n   not concluding. \n\n   Here is a legend: \n  ' oxygen' - whole bill, lasts four beats \n  ' o|' - one-half bill, lasts two pulse \n  ' .|' - quater eminence, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string representing melodious notes in a particular ASCII format. \n   Your task is to parse this string and return list of integers equate to how many beats does each \n   not concluding. \n\n   Here is a legend: \n 'oxygen' - whole bill, lasts four beats \n 'o|' - one-half bill, lasts two pulse \n  '.|' - quater eminence, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const result = [];\n  const beats_length = music_string.length;\n  for (let i = 0; i < beats_length; i++) {\n    if (music_string[i] === 'o') {\n      if (i > 0 && music_string[i - 1] === 'o') {\n        result.push(4);\n      } else {\n        result.push(2);\n      }\n    } else if (music_string[i] === '|') {\n      result.push(1);\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substring can be find oneself in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let [i, len] = [0, string.length];\n  while (i < len) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      i += 1;\n      continue;\n    }\n    const j = i;\n    while (j < len && string.charAt(j) === substring.charAt(0)) {\n      j += 1;\n    }\n    i = j;\n  }\n  return i - 1;\n};\n\nconsole.log(howManyTimes('aaaa', 'aa'));\nconsole.log(howManyTimes('aaaa', 'aaa'));\nconsole.log(howManyTimes('aaaa', 'aaaa'));\nconsole.log(howManyTimes('aaaa', 'aaaa'));\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   revert the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   revert the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let input = '',\n    numbers = '',\n    number = '',\n    newNumbers = '';\n\n  // if numbers.length > 0\n  if (numbers.length > 0) {\n    for (let i = 0; i < numbers.length; i++) {\n      number = numbers[i];\n\n      // if number is a number\n      if (isNaN(parseInt(number))) {\n        newNumbers = newNumbers + number;\n      }\n      // if number is a character\n      else {\n        // append character to the string\n        input = input + number;\n      }\n    }\n\n    // if input is not empty\n    if (input.length > 0) {\n      // split string to get the numberals\n      let numbersArray = input.split('');\n\n      // if the input contains more than 1 numberal\n      if (numbersArray.length > 1) {\n        // get the smallest numberal in the array\n        let smallestNumber = numbersArray[0];\n\n        // reverse the smallest numberal in the array\n        let smallestNumberReverse = smallestNumber.split('').reverse().join('');\n\n        // add the reversed numberal to the new string\n        newNumbers = newNumbers + smallestNumberReverse;\n\n        // remove the smallest numberal from the string\n        input = input.replace(smallestNumber, '');\n\n        // split the remaining string to get the numberals\n        numbersArray = input.split('');\n\n        // if the remaining string contains more than 1 numberal\n        if (numbersArray.length > 1) {\n          // reverse the remaining numberals in the array\n          let remainingNumbersArray = numbersArray.reverse();\n\n          // add the reversed numberals to the new string\n          newNumbers = newNumbers + remainingNumbersArray.join('');\n        }\n\n        // add the remaining numberals to the new string\n        newNumbers = newNumbers + numbersArray.join('');\n      }\n      // if the input contains only 1 numberal\n      else {\n        // add the remaining numberals to the new string\n        newNumbers = newNumbers + input;\n      }\n    }\n  }\n\n  return newNumbers;\n};\n\n// console.log(sortNumbers('one two three'));\n// console.log(sortNumbers('three two one'));\n// console.log(sortNumbers('zero one two three'));\n// console.log(sortNumbers('nine eight seven'));\n// console.log(sortNumbers('zero'));\n// console.log(sortNumbers('zero nine'));\n// console.log(sortNumbers('three one five'));\n// console.log(sortNumbers('eight one two three'));\n// console.log(sortNumbers('two one'));\n// console.log(sortNumbers('eight zero nine'));\n// console.log(sortNumbers('eight one zero'));\n// console.log(sortNumbers('zero one two'));\n// console.log(sortNumbers('three two one'));\n// console.log(sortNumbers('zero nine eight'));\n// console.log(sortNumbers('two three one'));\n// console.log(sortNumbers('nine one two'));\n// console.log(sortNumbers('one one'));\n// console.log(sortNumbers('two one two'));\n// console.log(sortNumbers('nine eight'));\n// console.log(sortNumbers('zero zero'));\n// console.log(sortNumbers('eight zero nine'));\n// console.log(sortNumbers('zero nine zero'));\n// console.log(sortNumbers('zero nine nine'));\n// console.log(sortNumbers('three zero two'));\n// console.log(sortNumbers('two one two'));\n// console.log(sortNumbers('three one two'));\n// console.log(sortNumbers('two zero two'));\n// console.log(sortNumbers('zero two one'));\n// console.log(sortNumbers('two zero one'));\n// console.log(sortNumbers('two one two'));\n// console.log(sortNumbers('three two one'));\n// console.log(sortNumbers('three two two'));\n// console.log(sortNumbers('three zero one'));\n// console.log(sortNumbers('zero two two'));\n// console.log(sortNumbers('two two zero'));\n// console.log(sortNumbers('two two one'));\n// console.log(sortNumbers('three one two'));\n// console.log(sortNumbers('two one zero'));\n// console.log(sortNumbers('two one two'));\n// console.log(sortNumbers('two two one'));\n// console.log(sortNumbers('two two two'));\n// console.log(sortNumbers('two one two'));\n// console.log(sortNumbers('two two one'));\n// console.log(sortNumbers('one two zero'));\n// console.log(sortNumbers('two two zero'));\n// console.log(sortNumbers('one two two'));\n// console.log(sortNumbers('two two two'));\n// console.log(sortNumbers('two two one'));\n// console.log(sortNumbers('two two zero'));\n// console.log(sortNumbers('two two two'));\n// console.log(sortNumbers('two two one'));\n// console.log(sortNumbers('two two zero'));\n// console.log(sortNumbers('two two two'));\n// console.log(sortNumbers('two zero two'));\n// console.log(sortNumbers('two zero one'));\n// console.log(sortNumbers('two one two'));\n// console.log(sortNumbers('two one one'));\n// console.log(sortNumbers('two one zero'));\n// console.log(sortNumbers('two one two'));\n// console.log(sortNumbers('two two one'));\n// console.log(sortNumbers('two two one'));\n// console.log(sortNumbers('two zero two'));\n// console.log(sortNumbers('two zero one'));\n// console.log(sortNumbers('two one zero'));\n// console.log(sortNumbers('two one one'));\n// console.log(sortNumbers('two one two'));\n// console.log(sortNumbers('two two one'));\n// console.log"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) blue-ribbon and return two that be the closest to each \n   other and return them in order (smaller number, larger phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) blue-ribbon and return two that be the closest to each \n   other and return them in order (smaller number, larger phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort();\n  const closestOne = sortedNumbers[sortedNumbers.length - 1];\n  const closestTwo = sortedNumbers[sortedNumbers.length - 2];\n  const closestThree = sortedNumbers[sortedNumbers.length - 3];\n\n  const closestToOne = sortedNumbers.find((number) => number === closestOne);\n  const closestToTwo = sortedNumbers.find((number) => number === closestTwo);\n  const closestToThree = sortedNumbers.find((number) => number === closestThree);\n\n  return [closestToOne, closestToTwo, closestToThree];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\n\nmodule.exports = findClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), enforce a analogue transform to that list,\n   such that the minor number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const newNumbers = []\n  const max = Math.max.apply(Math, numbers)\n  const min = Math.min.apply(Math, numbers)\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers[i] = (numbers[i] - min) / (max - min)\n  }\n  return newNumbers\n}\n\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1) + min)\n\nconst getRandomColor = () => {\n  const red = getRandomInt(0, 255)\n  const green = getRandomInt(0, 255)\n  const blue = getRandomInt(0, 255)\n  return `rgb(${red}, ${green}, ${blue})`\n}\n\nconst getRandomIntArray = (length) => {\n  let arr = []\n  for (let i = 0; i < length; i++) {\n    arr[i] = getRandomInt(0, 255)\n  }\n  return arr\n}\n\nconst getRandomColorArray = () => {\n  let arr = []\n  for (let i = 0; i < 256; i++) {\n    arr.push(getRandomColor())\n  }\n  return arr\n}\n\nconst getRandomHslColor = () => {\n  const hue = getRandomInt(0, 360)\n  const sat = getRandomInt(0, 100)\n  const lum = getRandomInt(0, 100)\n  return `hsl(${hue}, ${sat}%, ${lum}%)`\n}\n\nconst getRandomHslArray = () => {\n  let arr = []\n  for (let i = 0; i < 256; i++) {\n    arr.push(getRandomHslColor())\n  }\n  return arr\n}\n\nconst getRandomString = (length) => {\n  let str = \"\"\n  for (let i = 0; i < length; i++) {\n    str += Math.floor(Math.random() * 26).toString(36)\n  }\n  return str\n}\n\nconst getRandomUrl = () => `http://${getRandomString(6)}`\n\nconst getRandomNumber = () => Math.random() * 100\n\nconst getRandomIntArrayOfLength = (length) => {\n  let arr = []\n  for (let i = 0; i < length; i++) {\n    arr[i] = getRandomInt()\n  }\n  return arr\n}\n\nconst getRandomIntArrayOfLengths = (lengths) => {\n  let arr = []\n  for (let i = 0; i < lengths.length; i++) {\n    arr[i] = getRandomInt(lengths[i], lengths[i] + 1)\n  }\n  return arr\n}\n\nconst getRandomIntArrayOfLengthsBetween = (min, max) => {\n  let arr = []\n  for (let i = 0; i < min; i++) {\n    arr[i] = getRandomInt()\n  }\n  for (let i = min; i < max; i++) {\n    arr[i] = getRandomInt()\n  }\n  return arr\n}\n\nconst getRandomIntArrayOfLengthsBetweenAnd(min, max) => {\n  let arr = []\n  for (let i = 0; i < min; i++) {\n    arr[i] = getRandomInt()\n  }\n  for (let i = min; i < max; i++) {\n    arr[i] = getRandomInt()\n  }\n  return arr\n}\n\nconst getRandomIntArrayOfLengthsBetweenAndInclusive = (min, max) => {\n  let arr = []\n  for (let i = 0; i < min; i++) {\n    arr[i] = getRandomInt()\n  }\n  for (let i = min; i <= max; i++) {\n    arr[i] = getRandomInt()\n  }\n  return arr\n}\n\nconst getRandomIntArrayOfLengthsBetweenAndInclusiveInclusive = (min, max) => {\n  let arr = []\n  for (let i = 0; i < min; i++) {\n    arr[i] = getRandomInt()\n  }\n  for (let i = min; i <= max; i++) {\n    arr[i] = getRandomInt()\n  }\n  return arr\n}\n\nconst getRandomIntArrayOfLengthsBetweenAndInclusiveInclusiveInclusive = (min, max) => {\n  let arr = []\n  for (let i = 0; i < min; i++) {\n    arr[i] = getRandomInt()\n  }\n  for (let i = min; i <= max; i++) {\n    arr[i] = getRandomInt()\n  }\n  return arr\n}\n\nconst getRandomColorArrayOfLengthsBetweenAndInclusiveInclusiveInclusive = () => {\n  let arr = []\n  for (let i = 0; i < 256; i++) {\n    arr.push(getRandomColor())\n  }\n  return arr\n}\n\nconst getRandomColorArrayOfLengthsBetweenAndInclusiveInclusiveInclusive = (length) => {\n  let arr = []\n  for (let i = 0; i < length; i++) {\n    arr[i] = getRandomColor()\n  }\n  return arr\n}\n\nconst getRandomColorArrayOfLengthsBetweenAndInclusiveInclusiveInclusive = (length) => {\n  let arr = []\n  for (let i = 0; i < length; i++) {\n    arr[i] = getRandomColor()\n  }\n  return arr\n}\n\nconst getRandomColorArrayOfLengthsBetweenAndInclusiveInclusiveInclusive = (length) => {\n  let arr = []\n  for (let i = 0; i < length; i++) {\n    arr[i] = getRandomColor()\n  }\n  return arr\n}\n\nconst getRandomColorArrayOfLengthsBetweenAndInclusiveInclusiveInclusive = (length) => {\n  let arr = []\n  for (let i = 0; i < length; i++) {"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integer\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter given list of any python values only for integer\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(item => {\n    return typeof item === 'number' && isInteger(item);\n  });\n};\n\n/**\n  * Return true if given value is a string\n  * @param {*} value\n  * @return {boolean}\n  */\nconst isString = value => {\n  return typeof value ==='string';\n};\n\n/**\n  * Return true if given value is a number\n  * @param {*} value\n  * @return {boolean}\n  */\nconst isNumber = value => {\n  return typeof value === 'number';\n};\n\n/**\n  * Return true if given value is an integer\n  * @param {*} value\n  * @return {boolean}\n  */\nconst isInteger = value => {\n  return typeof value === 'number' && parseInt(value) === value && value % 1 === 0;\n};\n\n/**\n  * Return true if given value is a boolean\n  * @param {*} value\n  * @return {boolean}\n  */\nconst isBoolean = value => {\n  return typeof value === 'boolean';\n};\n\n/**\n  * Return true if given value is an object\n  * @param {*} value\n  * @return {boolean}\n  */\nconst isObject = value => {\n  return typeof value === 'object' && value!== null;\n};\n\n/**\n  * Return true if given value is an array\n  * @param {*} value\n  * @return {boolean}\n  */\nconst isArray = value => {\n  return Array.isArray(value);\n};\n\n/**\n  * Return true if given value is a function\n  * @param {*} value\n  * @return {boolean}\n  */\nconst isFunction = value => {\n  return typeof value === 'function';\n};\n\n/**\n  * Return true if given value is a Date\n  * @param {*} value\n  * @return {boolean}\n  */\nconst isDate = value => {\n  return typeof value === 'object' && value.constructor === Date;\n};\n\n/**\n  * Return true if given value is a string\n  * @param {*} value\n  * @return {boolean}\n  */\nconst isStringArray = value => {\n  return Array.isArray(value) && isString(value[0]);\n};\n\n/**\n  * Return true if given value is an array of strings\n  * @param {*} value\n  * @return {boolean}\n  */\nconst isStringArrayOfStrings = value => {\n  return Array.isArray(value) && isString(value[0]);\n};\n\n/**\n  * Return true if given value is an array of booleans\n  * @param {*} value\n  * @return {boolean}\n  */\nconst isBooleanArray = value => {\n  return Array.isArray(value) && isBoolean(value[0]);\n};\n\n/**\n  * Return true if given value is an array of integers\n  * @param {*} value\n  * @return {boolean}\n  */\nconst isIntegerArray = value => {\n  return Array.isArray(value) && isInteger(value[0]);\n};\n\n/**\n  * Return true if given value is an array of objects\n  * @param {*} value\n  * @return {boolean}\n  */\nconst isObjectArray = value => {\n  return Array.isArray(value) && isObject(value[0]);\n};\n\n/**\n  * Return true if given value is an array of arrays\n  * @param {*} value\n  * @return {boolean}\n  */\nconst isArrayArray = value => {\n  return Array.isArray(value) && isArray(value[0]);\n};\n\n/**\n  * Return true if given value is a string\n  * @param {*} value\n  * @return {boolean}\n  */\nconst isDateArray = value => {\n  return Array.isArray(value) && isDate(value[0]);\n};\n\n/**\n  * Return true if given value is a string\n  * @param {*} value\n  * @return {boolean}\n  */\nconst isFunctionArray = value => {\n  return Array.isArray(value) && isFunction(value[0]);\n};\n\n/**\n  * Return true if given value is a string\n  * @param {*} value\n  * @return {boolean}\n  */\nconst isObjectArrayOfObjects = value => {\n  return Array.isArray(value) && isObject(value[0]);\n};\n\n/**\n  * Return true if given value is an array of strings\n  * @param {*} value\n  * @return {boolean}\n  */\nconst isStringArrayOfObjects = value => {\n  return Array.isArray(value) && isString(value[0]);\n};\n\n/**\n  * Return true if given value is an array of objects\n  * @param {*} value\n  * @return {boolean}\n  */\nconst isObjectArrayOfArrays = value => {\n  return Array.isArray(value) && isObject(value[0]);\n};\n\n/**\n  * Return true if given value is an array of objects\n  * @param {*} value\n  * @return {boolean}\n  */\nconst isObjectArrayOfObjects = value => {\n  return Array.isArray(value) && isObject(value[0]);\n};\n\n/**\n  * Return true if given value is an array of functions\n  * @param {*} value\n  * @return {boolean}\n  */\nconst isFunctionArrayOfObjects = value => {\n  return Array.isArray(value) && isFunction(value[0]);\n};\n\n/**\n  * Return true if given value is an array of booleans\n  * @param {*} value\n  * @return {boolean}\n  */\nconst isBooleanArrayOfObjects = value => {\n  return Array.isArray(value) && isBoolean(value[0]);\n};\n\n/**\n  * Return true if given value is an array of integers\n  * @param {*} value\n  * @return {boolean}\n  "}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return true if given string is empty\n  >>> strlen('')\n  true\n  >>> strlen('abc')\n  false\n  */\nconst isEmpty = (string) => {\n  return!string ||!string.length\n}\n\n/* Return true if given string contains only whitespaces\n  >>> strlen('   ')\n  false\n  >>> strlen('  ')\n  false\n  >>> strlen('\\t')\n  false\n  >>> strlen('\\n')\n  false\n  >>> strlen('\\r')\n  false\n  >>> strlen('\\f')\n  false\n  >>> strlen('\\v')\n  false\n  >>> strlen(' ')\n  true\n  >>> strlen('\\u00A0')\n  false\n  >>> strlen('\\u2000')\n  true\n  >>> strlen('\\u2028')\n  true\n  >>> strlen('\\u2029')\n  true\n  >>> strlen('\\u202F')\n  true\n  >>> strlen('\\u2060')\n  true\n  >>> strlen('\\u3000')\n  true\n  >>> strlen('\\uFEFF')\n  true\n  */\nconst isWhitespace = (string) => {\n  return!string || /^\\s*$/.test(string)\n}\n\n/* Return true if given string contains at least one non-whitespace character\n  >>> strlen('abc')\n  true\n  >>> strlen('   ')\n  false\n  >>> strlen('abc   ')\n  false\n  >>> strlen(' \\t ')\n  true\n  */\nconst hasNonWhitespace = (string) => {\n  return!isWhitespace(string)\n}\n\n/* Return true if given string contains at least one whitespace character\n  >>> strlen('abc')\n  false\n  >>> strlen('   ')\n  true\n  >>> strlen('abc   ')\n  true\n  >>> strlen(' \\t ')\n  true\n  */\nconst hasWhitespace = (string) => {\n  return isWhitespace(string)\n}\n\n/* Return true if given string is all whitespaces\n  >>> strlen('   ')\n  true\n  >>> strlen('\\t')\n  true\n  >>> strlen('\\n')\n  true\n  >>> strlen('\\r')\n  true\n  >>> strlen('\\f')\n  true\n  >>> strlen('\\v')\n  true\n  >>> strlen('\\u00A0')\n  true\n  >>> strlen('\\u2000')\n  true\n  >>> strlen('\\u2028')\n  true\n  >>> strlen('\\u2029')\n  true\n  >>> strlen('\\u202F')\n  true\n  >>> strlen('\\u2060')\n  true\n  >>> strlen('\\u3000')\n  true\n  >>> strlen('\\uFEFF')\n  true\n  */\nconst isAllWhitespace = (string) => {\n  return!string || /^\\s*$/.test(string)\n}\n\n/* Return true if given string is all whitespaces or is empty\n  >>> strlen('')\n  true\n  >>> strlen('\\t')\n  true\n  >>> strlen('\\n')\n  true\n  >>> strlen('\\r')\n  true\n  >>> strlen('\\f')\n  true\n  >>> strlen('\\v')\n  true\n  >>> strlen('\\u00A0')\n  true\n  >>> strlen('\\u2000')\n  true\n  >>> strlen('\\u2028')\n  true\n  >>> strlen('\\u2029')\n  true\n  >>> strlen('\\u202F')\n  true\n  >>> strlen('\\u2060')\n  true\n  >>> strlen('\\u3000')\n  true\n  >>> strlen('\\uFEFF')\n  true\n  >>> strlen('abc')\n  false\n  */\nconst isAllWhitespaceOrEmpty = (string) => {\n  return isAllWhitespace(string) || isEmpty(string)\n}\n\n/* Return true if given string contains at least one non-whitespace character or is empty\n  >>> strlen('   ')\n  true\n  >>> strlen('\\t')\n  true\n  >>> strlen('\\n')\n  true\n  >>> strlen('\\r')\n  true\n  >>> strlen('\\f')\n  true\n  >>> strlen('\\v')\n  true\n  >>> strlen('\\u00A0')\n  true\n  >>> strlen('\\u2000')\n  true\n  >>> strlen('\\u2028')\n  true\n  >>> strlen('\\u2029')\n  true\n  >>> strlen('\\u202F')\n  true\n  >>> strlen('\\u2060')\n  true\n  >>> strlen('\\u3000')\n  true\n  >>> strlen('\\uFEFF')\n  true\n  >>> strlen('abc')\n  false\n  */\nconst isNotAllWhitespaceOrEmpty = (string) => {\n  return!isAllWhitespaceOrEmpty(string)\n}\n\n/* Return true if given string contains at least one whitespace character\n  >>> strlen('abc')\n  false\n  >>> strlen('   ')\n  false\n  >>> strlen('\\t')\n  false\n  >>> strlen('\\n')\n  false\n  >>> strlen('\\r')\n  false\n  >>> strlen('\\f')\n  false\n  >>> strlen('\\v')\n  false\n  >>> strlen('\\u00A0')\n  false\n  >>> strlen('\\u2000')\n  false\n  >>> strlen('\\u2028')\n  false\n  >>> strlen('\\u2029')\n  false\n  >>> strlen('\\u202F')\n  false\n  >>> strlen('\\u2060')\n  false\n  >>> strlen('\\u3000')\n  false\n  >>> strlen('\\uFEFF')\n  false\n  */\nconst hasNonWhitespace = (string) => {\n  return!isWhitespace(string)\n}\n\n/* Return true if given string contains at least one whitespace character\n  >>> strlen('abc')\n  false\n  >>> strlen('   ')\n  true"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest phone number that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find the largest phone number that divide n evenly, little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n    const arr = [];\n    for (let i = 1; i < n; i++) {\n        const d = largestDivisor(i);\n        if (d < n && d > 1) {\n            arr.push(d);\n        }\n    }\n    return arr[arr.length - 1];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let a = [1]\n  let i = 0\n  let prime = [2]\n\n  while (a[i] < n) {\n    let j = 0\n    while (j < prime.length) {\n      if (n % prime[j] === 0) {\n        a[i] *= prime[j]\n        n = n / prime[j]\n        prime.push(prime[j])\n        break\n      }\n      j += 1\n    }\n    i += 1\n  }\n  return prime\n}\n\n/* Return sum of all prime factors of given integer in the order from little to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the sum of all factors\n  >>> factorizeSum(8)\n  7\n  >>> factorizeSum(25)\n  25\n  >>> factorizeSum(70)\n  70\n  */\nconst factorizeSum = (n) => {\n  let a = [1]\n  let i = 0\n  let prime = [2]\n\n  while (a[i] < n) {\n    let j = 0\n    while (j < prime.length) {\n      if (n % prime[j] === 0) {\n        a[i] += prime[j]\n        n = n / prime[j]\n        prime.push(prime[j])\n        break\n      }\n      j += 1\n    }\n    i += 1\n  }\n  return a[i]\n}\n\n/* Return list of prime factors of given integer in the order from big to small. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the sum of all factors\n  >>> factorizeList(8)\n  [5, 2, 2]\n  >>> factorizeList(25)\n  [5, 2, 5]\n  >>> factorizeList(70)\n  [2, 7, 5]\n  */\nconst factorizeList = (n) => {\n  let a = [1]\n  let i = 0\n  let prime = [2]\n\n  while (a[i] < n) {\n    let j = 0\n    while (j < prime.length) {\n      if (n % prime[j] === 0) {\n        a[i] *= prime[j]\n        n = n / prime[j]\n        prime.push(prime[j])\n        break\n      }\n      j += 1\n    }\n    i += 1\n  }\n  return prime\n}\n\n/* Return list of prime factors of given integer in the order from small to big. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the sum of all factors\n  >>> factorizeList(8)\n  [2, 2, 2]\n  >>> factorizeList(25)\n  [5, 5]\n  >>> factorizeList(70)\n  [2, 7, 5]\n  */\nconst factorizeListSum = (n) => {\n  let a = [1]\n  let i = 0\n  let prime = [2]\n\n  while (a[i] < n) {\n    let j = 0\n    while (j < prime.length) {\n      if (n % prime[j] === 0) {\n        a[i] += prime[j]\n        n = n / prime[j]\n        prime.push(prime[j])\n        break\n      }\n      j += 1\n    }\n    i += 1\n  }\n  return prime\n}\n\n/* Return list of prime factors of given integer in the order from big to small. \n   Each of the gene should be listed phone number of times equate to how many times it look in factorization. \n   Input issue should be equal to the sum of all factors\n  >>> factorizeList(8)\n  [5, 2, 2]\n  >>> factorizeList(25)\n  [5, 2, 5]\n  >>> factorizeList(70)\n  [2, 7, 5]\n  */\nconst factorizeListSumReverse = (n) => {\n  let a = [1]\n  let i = 0\n  let prime = [2]\n\n  while (a[i] < n) {\n    let j = 0\n    while (j < prime.length) {\n      if (n % prime[j] === 0) {\n        a[i] *= prime[j]\n        n = n / prime[j]\n        prime.push(prime[j])\n        break\n      }\n      j += 1\n    }\n    i += 1\n  }\n  return prime\n}\n\n//export {factorize, factorizeSum, factorizeList, factorizeListSum, factorizeListSumReverse}\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements that occur more than once. \n   observe holy order of element left the like as in the remark.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n    return numbers.filter(x => x.toString().split('').every(y =>!numbers.includes(y)));\n};\n\nmodule.exports = removeDuplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n    return string.toLowerCase() === string.toUpperCase()? string.toUpperCase() : string.toLowerCase()\n}\n\n/* For a given string, append a suffix to the end.\n  >>> suffixAppend('Hello','world')\n  'Hello world'\n  */\nconst suffixAppend = (string, suffix) => {\n    return string + suffix\n}\n\n/* For a given string, append a prefix to the beginning.\n  >>> prefixAppend('Hello','world')\n 'worldHello'\n  */\nconst prefixAppend = (string, prefix) => {\n    return prefix + string\n}\n\n/* For a given string, remove the first character.\n  >>> removeFirstChar('Hello')\n  'ello'\n  */\nconst removeFirstChar = (string) => {\n    return string.slice(1)\n}\n\n/* For a given string, remove the last character.\n  >>> removeLastChar('Hello')\n  'Hello'\n  */\nconst removeLastChar = (string) => {\n    return string.slice(0, -1)\n}\n\n/* For a given string, remove the first and last character.\n  >>> removeFirstAndLastChar('Hello')\n  'e'\n  */\nconst removeFirstAndLastChar = (string) => {\n    return string.slice(1, -1)\n}\n\n/* For a given string, replace all occurrences of a given string with another string.\n  >>> replaceAll('Hello world', 'world', 'O')\n  'Hello O'\n  >>> replaceAll('Hello world', 'world', 'o')\n  'Hello o'\n  >>> replaceAll('Hello world', 'world', 'oO')\n  'Hello oO'\n  */\nconst replaceAll = (string, substr, replace) => {\n    return string.replace(substr, replace)\n}\n\n/* For a given string, replace all occurrences of a given string with a given string, and remove the\n  occurrence.\n  >>> replaceAllAndRemove('Hello world', 'world', 'O')\n  'Hello O'\n  >>> replaceAllAndRemove('Hello world', 'world', 'o')\n  'Hello o'\n  */\nconst replaceAllAndRemove = (string, substr, replace) => {\n    return replaceAll(string, substr, replace) + removeFirstChar(replaceAll(string, substr, replace))\n}\n\n/* For a given string, return a string with all occurrences of a given string replaced with a given\n  string.\n  >>> replaceOccurrence('Hello world', 'world', 'O')\n  'Hello O'\n  >>> replaceOccurrence('Hello world', 'world', 'o')\n  'Hello o'\n  >>> replaceOccurrence('Hello world', 'world', 'oO')\n  'Hello oO'\n  */\nconst replaceOccurrence = (string, substr, replace) => {\n    return replaceAll(string, substr, replace)\n}\n\n/* For a given string, return a string with all occurrences of a given string replaced with a given\n  string, and remove the occurrence.\n  >>> replaceOccurrenceAndRemove('Hello world', 'world', 'O')\n  'Hello O'\n  >>> replaceOccurrenceAndRemove('Hello world', 'world', 'o')\n  'Hello o'\n  */\nconst replaceOccurrenceAndRemove = (string, substr, replace) => {\n    return replaceOccurrence(string, substr, replace) + removeFirstChar(replaceOccurrence(string, substr, replace))\n}\n\n/* For a given string, return a string with all occurrences of a given string replaced with a given\n  string, and remove the occurrence.\n  >>> replaceOccurrenceAndRemove('Hello world', 'world', 'O')\n  'Hello O'\n  >>> replaceOccurrenceAndRemove('Hello world', 'world', 'o')\n  'Hello o'\n  */\nconst replaceOccurrenceAndRemoveAll = (string, substr, replace) => {\n    return replaceOccurrence(string, substr, replace) + removeAll(replaceOccurrence(string, substr, replace))\n}\n\n/* For a given string, return a string with all occurrences of a given string replaced with a given\n  string, and remove the occurrence.\n  >>> replaceOccurrenceAndRemove('Hello world', 'world', 'O')\n  'Hello O'\n  >>> replaceOccurrenceAndRemove('Hello world', 'world', 'o')\n  'Hello o'\n  */\nconst replaceOccurrenceAndRemoveAllAndRemove = (string, substr, replace) => {\n    return replaceOccurrence(string, substr, replace) + removeLastChar(replaceOccurrence(string, substr, replace))\n}\n\n/* For a given string, return a string with all occurrences of a given string replaced with a given\n  string, and remove the occurrence.\n  >>> replaceOccurrenceAndRemove('Hello world', 'world', 'O')\n  'Hello O'\n  >>> replaceOccurrenceAndRemove('Hello world', 'world', 'o')\n  'Hello o'\n  */\nconst replaceOccurrenceAndRemoveAllAndRemoveAll = (string, substr, replace) => {\n    return replaceOccurrence(string, substr, replace) + removeAll(replaceOccurrence(string, substr, replace))\n}\n\n/* For a given string, return a string with all occurrences of a given string replaced with a given\n  string, and remove the occurrence.\n  >>> replaceOccurrenceAndRemove('Hello world', 'world', 'O')\n  'Hello O'\n  >>> replaceOccurrenceAndRemove('Hello world', 'world', 'o')\n  'Hello o'\n  */\nconst replaceOccurrenceAndRemoveAllAndRemoveAll = (string, substr, replace) => {\n    return replaceOccurrence(string, substr, replace) + removeAll(replaceOccurrence(string, substr, replace))\n}\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  Find the index of a given string in a list of strings\n  >>> indexOf('a', ['b', 'c'])\n  1\n  >>> indexOf('c', ['b', 'c'])\n  2\n  >>> indexOf('x', ['b', 'c'])\n  -1\n  >>> indexOf('', ['b', 'c'])\n  -1\n  */\nconst indexOf = (needle, haystack) => {\n  return haystack.indexOf(needle)\n}\n\n/*\n  Test if a given string is present in a list of strings\n  >>> contains('a', ['b', 'c'])\n  True\n  >>> contains('x', ['b', 'c'])\n  False\n  */\nconst contains = (needle, haystack) => {\n  return indexOf(needle, haystack)!== -1\n}\n\n/*\n  Test if a given string is present in a list of strings\n  >>> contains('a', ['b', 'c'])\n  True\n  >>> contains('x', ['b', 'c'])\n  False\n  */\nconst contains = (needle, haystack) => {\n  return indexOf(needle, haystack)!== -1\n}\n\n/*\n  Remove a given string from a list of strings\n  >>> remove('a', ['b', 'c'])\n  ['b', 'c']\n  >>> remove('c', ['b', 'c'])\n  ['b']\n  >>> remove('a', ['b', 'c'])\n  []\n  */\nconst remove = (needle, haystack) => {\n  return haystack.filter(\n    (str) =>!contains(needle, [str])\n  )\n}\n\n/*\n  Get the length of a string\n  >>> length('abc')\n  3\n  */\nconst length = (str) => {\n  return str.length\n}\n\n/*\n  Convert a string to lowercase\n  >>> lowerCase('abc')\n  'abc'\n  >>> lowerCase('A')\n  'a'\n  */\nconst lowerCase = (str) => {\n  return str.toLowerCase()\n}\n\n/*\n  Convert a string to uppercase\n  >>> upperCase('abc')\n  'ABC'\n  >>> upperCase('A')\n  'A'\n  */\nconst upperCase = (str) => {\n  return str.toUpperCase()\n}\n\n/*\n  Convert a string to uppercase\n  >>> lowerCase('abc')\n  'abc'\n  >>> lowerCase('A')\n  'a'\n  */\nconst upperCase = (str) => {\n  return str.toUpperCase()\n}\n\n/*\n  Test if a string is a valid regular expression\n  >>> isRegex('/abc/')\n  True\n  >>> isRegex('abc')\n  False\n  >>> isRegex('/abc/g')\n  False\n  */\nconst isRegex = (str) => {\n  try {\n    new RegExp(str)\n  } catch (err) {\n    return false\n  }\n\n  return true\n}\n\n/*\n  Test if a string is a valid url\n  >>> isUrl('http://www.google.com')\n  True\n  >>> isUrl('https://google.com')\n  True\n  >>> isUrl('http://www.google.com/abc')\n  False\n  >>> isUrl('http://www.google.com:80')\n  False\n  */\nconst isUrl = (str) => {\n  return /^https?:\\/\\/[a-z0-9-]+(\\.[a-z0-9-]+)+(\\:[0-9]+)?(\\?[^\\s]*)?$/i.test(str)\n}\n\n/*\n  Test if a string is a valid email address\n  >>> isEmail('john@gmail.com')\n  True\n  >>> isEmail('john.gmail.com')\n  True\n  >>> isEmail('john@googlemail.com')\n  True\n  >>> isEmail('john@yahoo.com')\n  True\n  >>> isEmail('john@yahoo.com.au')\n  True\n  >>> isEmail('john.gmail.com.au')\n  True\n  >>> isEmail('john@gmail.com.au')\n  True\n  >>> isEmail('john@gmail.com.au')\n  True\n  >>> isEmail('john@gmail.com.au')\n  True\n  >>> isEmail('john@gmail.com')\n  True\n  >>> isEmail('john@gmail.com')\n  True\n  >>> isEmail('john@gmail.com.au')\n  True\n  >>> isEmail('john@gmail.com.au')\n  True\n  >>> isEmail('john@gmail.com')\n  True\n  >>> isEmail('john@yahoo.com.au')\n  True\n  >>> isEmail('john@yahoo.com')\n  True\n  >>> isEmail('john@yahoo.com')\n  True\n  >>> isEmail('john@yahoo.com')\n  True\n  >>> isEmail('john@yahoo.com')\n  True\n  >>> isEmail('john@yahoo.com')\n  True\n  >>> isEmail('john@yahoo.com')\n  True\n  >>> isEmail('john@yahoo.com')\n  True\n  >>> isEmail('john@yahoo.com')\n  True\n  >>> isEmail('john@yahoo.com')\n  True\n  >>> isEmail('john@yahoo.com')\n  True\n  >>> isEmail('john@yahoo.com')\n  True\n  >>> isEmail('john@yahoo.com')\n  True\n  >>> isEmail('john@yahoo.com')\n  True\n  >>> isEmail('john@yahoo.com')\n  True\n  >>> isEmail('john@yahoo.com')\n  True\n  >>> isEmail('john@yahoo.com')\n  True\n  >>> isEmail('john@yahoo.com')\n  True\n  >>> isEmail('john@yahoo.com')\n  True\n  >>> isEmail('john@yahoo.com')\n  True\n  >>> isEmail('john@yahoo.com')\n  True\n  >>> isEmail"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a grant prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start with a grant prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(item => item.startsWith(prefix));\n};\n\n/**\n  * Check if an input string is a valid number.\n  * @param string input string\n  * @returns {boolean} true if number, false otherwise\n  */\nconst isNumeric = (string) => {\n  return string.match(/^-?\\d+(\\.\\d+)?$/);\n};\n\n/**\n  * Filter an input list of strings only for ones that are numeric.\n  * @param strings input list of strings\n  * @returns {Array} list of numeric strings\n  */\nconst filterNumeric = (strings) => {\n  return strings.filter(item => isNumeric(item));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain the input string.\n  * @param strings input list of strings\n  * @param search input string\n  * @returns {Array} list of strings that contain search\n  */\nconst filterContains = (strings, search) => {\n  return strings.filter(item => item.includes(search));\n};\n\n/**\n  * Filter an input list of strings only for ones that do not contain the input string.\n  * @param strings input list of strings\n  * @param search input string\n  * @returns {Array} list of strings that do not contain search\n  */\nconst filterNotContains = (strings, search) => {\n  return strings.filter(item =>!item.includes(search));\n};\n\n/**\n  * Filter an input list of strings only for ones that match the regex\n  * @param strings input list of strings\n  * @param regexp regexp\n  * @returns {Array} list of strings that match the regex\n  */\nconst filterMatch = (strings, regexp) => {\n  return strings.filter(item => item.match(regexp));\n};\n\n/**\n  * Filter an input list of strings only for ones that do not match the regex\n  * @param strings input list of strings\n  * @param regexp regexp\n  * @returns {Array} list of strings that do not match the regex\n  */\nconst filterNotMatch = (strings, regexp) => {\n  return strings.filter(item =>!item.match(regexp));\n};\n\n/**\n  * Filter an input list of strings only for ones that start with the input string.\n  * @param strings input list of strings\n  * @param search input string\n  * @returns {Array} list of strings that start with search\n  */\nconst filterStartWith = (strings, search) => {\n  return strings.filter(item => item.startsWith(search));\n};\n\n/**\n  * Filter an input list of strings only for ones that do not start with the input string.\n  * @param strings input list of strings\n  * @param search input string\n  * @returns {Array} list of strings that do not start with search\n  */\nconst filterNotStartWith = (strings, search) => {\n  return strings.filter(item =>!item.startsWith(search));\n};\n\n/**\n  * Filter an input list of strings only for ones that end with the input string.\n  * @param strings input list of strings\n  * @param search input string\n  * @returns {Array} list of strings that end with search\n  */\nconst filterEndWith = (strings, search) => {\n  return strings.filter(item => item.endsWith(search));\n};\n\n/**\n  * Filter an input list of strings only for ones that do not end with the input string.\n  * @param strings input list of strings\n  * @param search input string\n  * @returns {Array} list of strings that do not end with search\n  */\nconst filterNotEndWith = (strings, search) => {\n  return strings.filter(item =>!item.endsWith(search));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given regular expression\n  * @param strings input list of strings\n  * @param regexp regular expression\n  * @returns {Array} list of strings that match the regex\n  */\nconst filterMatchRegex = (strings, regexp) => {\n  return strings.filter(item => item.match(regexp));\n};\n\n/**\n  * Filter an input list of strings only for ones that do not contain a given regular expression\n  * @param strings input list of strings\n  * @param regexp regular expression\n  * @returns {Array} list of strings that do not match the regex\n  */\nconst filterNotMatchRegex = (strings, regexp) => {\n  return strings.filter(item =>!item.match(regexp));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given string\n  * @param strings input list of strings\n  * @param search input string\n  * @returns {Array} list of strings that contain search\n  */\nconst filterContainsStr = (strings, search) => {\n  return strings.filter(item => item.includes(search));\n};\n\n/**\n  * Filter an input list of strings only for ones that do not contain a given string\n  * @param strings input list of strings\n  * @param search input string\n  * @returns {Array} list of strings that do not contain search\n  */\nconst filterNotContainsStr = (strings, search) => {\n  return strings.filter(item =>!item.includes(search));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given string, case insensitive.\n  * @param strings input list of strings\n  * @param search input string\n  * @returns {Array} list of strings that contain search\n  */\nconst filterContainsStrIgnoreCase = (strings, search) => {\n  return strings.filter(item => item.toLowerCase().includes(search.toLowerCase()));\n};\n\n/**\n  * Filter an input list of strings only for ones that do not contain a given string, case insensitive.\n  * @param strings input list of strings\n  * @param search input string\n  * @returns {Array} list of strings that do not contain search\n  */\nconst filterNotContains"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getMin([1, 2, 3, 4, 5])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6])\n  1\n  >>> getMin([7, 8, 9, 10, 11, 12])\n  1\n  >>> getMin([0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> getMin([1, 2, 3, 4, 5, 6, 7])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  1\n  >>> getMin([-1, -2, -3, -4, -5])\n  -1\n  >>> getMin([-1, -2, -3, -4, -5, -6])\n  -1\n  >>> getMin([-7, -8, -9, -10, -11, -12])\n  -1\n  >>> getMin([-0, -0, -0, -0, -0, -0, -0])\n  -0\n  >>> getMin([-1, -2, -3, -4, -5, -6, -7])\n  -1\n  >>> getMin([-1, -2, -3, -4, -5, -6, -7, -8])\n  -1\n  >>> getMin([-1, -2, -3, -4, -5, -6, -7, -8, -9])\n  -1\n  >>> getMin([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])\n  -1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  1\n  >>> getMin([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  0\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  1\n  >>> getMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  1\n  >>> getMin([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15])\n  -1\n  >>> getMin([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16])\n  -1\n  >>> getMin([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17])\n  -1\n  >>> getMin([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18])\n  -1\n  >>> getMin([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19])\n  -1\n  >>> getMin([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20])\n  -1\n  >>> getMin([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21])\n  -1\n  >>> getMin([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22])\n  -1\n  >>> getMin([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23])\n  -1\n  >>> getMin([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24])\n  -1\n  >>> getMin([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25])\n  -1\n  >>> getMin([-1, -2, -3, -4, -5, -6, -7, -"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number equal choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number equal choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n < 5) return false\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  const sqrt = Math.sqrt(n)\n  for (let i = 5; i <= sqrt; i += 6) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/* Return a random prime number in the range [0, limit) */\nconst getPrime = (limit) => {\n  const isPrime = (n) => {\n    if (n < 2) return false\n    if (n === 2) return true\n    if (n === 3) return true\n    if (n < 5) return false\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    const sqrt = Math.sqrt(n)\n    for (let i = 5; i <= sqrt; i += 6) {\n      if (n % i === 0) return false\n    }\n    return true\n  }\n  return Math.floor(Math.random() * limit) + 1\n}\n\n/* Return a random prime number in the range [0, limit) */\nconst getPrime2 = (limit) => {\n  let n = 0\n  let i = 0\n  while (true) {\n    n = getPrime(limit)\n    if (isPrime(n)) break\n    i++\n  }\n  return n\n}\n\n/* Return a random prime number in the range [0, limit) */\nconst getPrime3 = (limit) => {\n  const prime = getPrime(limit)\n  const i = 0\n  while (true) {\n    const n = prime + 1\n    if (isPrime(n)) break\n    i++\n  }\n  return prime\n}\n\nconst isPrime2 = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n < 5) return false\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  const sqrt = Math.sqrt(n)\n  for (let i = 5; i <= sqrt; i += 6) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime3 = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n < 5) return false\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  const sqrt = Math.sqrt(n)\n  for (let i = 5; i <= sqrt; i += 6) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/* Return a random prime number in the range [0, limit) */\nconst getPrime4 = (limit) => {\n  const prime = getPrime(limit)\n  const i = 0\n  while (true) {\n    const n = prime + 1\n    if (isPrime2(n)) break\n    i++\n  }\n  return prime\n}\n\nconst getPrime5 = (limit) => {\n  const prime = getPrime(limit)\n  const i = 0\n  while (true) {\n    const n = prime + 1\n    if (isPrime3(n)) break\n    i++\n  }\n  return prime\n}\n\nconst test = () => {\n  console.log(getPrime4(1000000))\n  console.log(getPrime5(1000000))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero recurrence only entirely zero point, even if there exist many. \n   Moreover, findZero only carry list xs having even number of coefficient \n   and largest non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero recurrence only entirely zero point, even if there exist many. \n   Moreover, findZero only carry list xs having even number of coefficient \n   and largest non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let len = xs.length,\n      max = 0,\n      res = xs[0];\n  for (let i = 0; i < len; i += 2) {\n    if (xs[i + 1] > max) {\n      max = xs[i + 1];\n      res = xs[i];\n    }\n  }\n  return res;\n}\n\nconst poly = (xs, x) => {\n  let len = xs.length,\n      sum = xs[0],\n      res = xs[0];\n  for (let i = 1; i < len; i += 2) {\n    res += xs[i] * Math.pow(x, i);\n  }\n  return res;\n}\n\nconst poly2 = (xs, x) => {\n  let len = xs.length,\n      sum = xs[0],\n      res = xs[0];\n  for (let i = 1; i < len; i += 2) {\n    res += xs[i] * Math.pow(x, i) + xs[i + 1] * x;\n  }\n  return res;\n}\n\nconst poly3 = (xs, x) => {\n  let len = xs.length,\n      sum = xs[0],\n      res = xs[0];\n  for (let i = 1; i < len; i += 3) {\n    res += xs[i] * Math.pow(x, i) + xs[i + 1] * Math.pow(x, i) + xs[i + 2] * x;\n  }\n  return res;\n}\n\n// let poly = (xs, x) => {\n//   let len = xs.length,\n//       sum = xs[0],\n//       res = xs[0];\n//   for (let i = 1; i < len; i += 2) {\n//     res += xs[i] * Math.pow(x, i);\n//   }\n//   return res;\n// }\n\nconsole.log(findZero([1, 2, 3]));\nconsole.log(poly([1, 2, 3]));\nconsole.log(poly2([1, 2, 3]));\nconsole.log(poly3([1, 2, 3]));\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by three, while its value at the indicies that are divisible by three are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that constitute not divisible by three, while its value at the indicies that are divisible by three are equal \n   to the value of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    return [...l].sort((a, b) => {\n        return a - b;\n    }).filter((v, i) => {\n        return i % 3!== 0;\n    }).map((v, i) => {\n        return l[i];\n    });\n};\n\n// __________________________________________\n\n// Test Code:  Do not alter code below this line.\n\nfunction assert(test, message, test_number) {\n  if (!test) {\n    console.log(test_number + \"false\");\n    throw \"ERROR: \" + message;\n  }\n  console.log(test_number + \"true\");\n  return true;\n}\n\nassert(\n  (gradebook instanceof Object),\n  \"The value of gradebook should be an Object.\\n\",\n  \"1. \"\n)\n\nassert(\n  (gradebook[\"Elizabeth\"] instanceof Object),\n  \"gradebook's Elizabeth property should be an object.\",\n  \"2. \"\n)\n\nassert(\n  (gradebook.William.testScores === scores[2]),\n  \"William's testScores should equal the third element in scores.\",\n  \"3. \"\n)\n\nassert(\n  (gradebook.addScore instanceof Function),\n  \"The value of gradebook's addScore property should be a Function.\",\n  \"4. \"\n)\n\ngradebook.addScore(\"Susan\", 80)\n\nassert(\n  (gradebook.Susan.testScores.length === 5\n   && gradebook.Susan.testScores[4] === 80),\n  \"Susan's testScores should have a new score of 80 added to the end.\",\n  \"5. \"\n)\n\nassert(\n  (gradebook.getAverage instanceof Function),\n  \"The value of gradebook's getAverage property should be a Function.\",\n  \"6. \"\n)\n\nassert(\n  (average instanceof Function),\n  \"The value of average should be a Function.\\n\",\n  \"7. \"\n)\nassert(\n  average([1, 2, 3]) === 2,\n  \"average should return the average of the elements in the array argument.\\n\",\n  \"8. \"\n)\n\nassert(\n  (gradebook.getAverage(\"Joseph\") === 80),\n  \"gradebook's getAverage should return 80 if passed 'Joseph'.\",\n  \"9. \"\n)\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let result = [],\n    seen = [];\n\n  return (arr) => {\n    for (let i = 0, len = arr.length; i < len; i++) {\n      if (seen.indexOf(arr[i]) === -1) {\n        seen.push(arr[i]);\n        result.push(arr[i]);\n      }\n    }\n    return result;\n  }\n}\n\n/**\n  * Return the elements of a list with even number.\n  *\n  * @param  {Array} list List of elements\n  * @return {Array}       List of even elements\n  */\nconst even = (arr) => {\n  let result = [],\n    i = 0;\n\n  for (i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\n/**\n  * Return the elements of a list with odd number.\n  *\n  * @param  {Array} list List of elements\n  * @return {Array}       List of odd elements\n  */\nconst odd = (arr) => {\n  let result = [],\n    i = 0;\n\n  for (i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\n/**\n  * Return the list of unique elements of two lists.\n  *\n  * @param  {Array} list1 List of elements\n  * @param  {Array} list2 List of elements\n  * @return {Array}       List of unique elements\n  */\nconst union = (list1, list2) => {\n  let result = [],\n    i = 0;\n\n  for (i = 0; i < list1.length; i++) {\n    if (list2.indexOf(list1[i]) === -1) {\n      result.push(list1[i]);\n    }\n  }\n  for (i = 0; i < list2.length; i++) {\n    if (list1.indexOf(list2[i]) === -1) {\n      result.push(list2[i]);\n    }\n  }\n  return result;\n}\n\n/**\n  * Return the list of even elements of two lists.\n  *\n  * @param  {Array} list1 List of elements\n  * @param  {Array} list2 List of elements\n  * @return {Array}       List of even elements\n  */\nconst intersection = (list1, list2) => {\n  let result = [],\n    i = 0;\n\n  for (i = 0; i < list1.length; i++) {\n    if (list2.indexOf(list1[i])!== -1) {\n      result.push(list1[i]);\n    }\n  }\n  return result;\n}\n\n/**\n  * Return the list of unique elements of two lists.\n  *\n  * @param  {Array} list1 List of elements\n  * @param  {Array} list2 List of elements\n  * @return {Array}       List of unique elements\n  */\nconst difference = (list1, list2) => {\n  let result = [],\n    i = 0;\n\n  for (i = 0; i < list1.length; i++) {\n    if (list2.indexOf(list1[i]) === -1) {\n      result.push(list1[i]);\n    }\n  }\n  return result;\n}\n\nexport { unique, even, odd, union, intersection, difference }\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  const m = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > m) {\n      m = l[i]\n    }\n  }\n  return m\n}\n\nmodule.exports = maxElement\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let counter = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 == 0 && i % 5 == 0) {\n      counter++;\n    }\n  }\n  return counter;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the odd indicies, while its values at the even indicies constitute equal \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the odd indicies, while its values at the even indicies constitute equal \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const sorted = [...l];\n  for (let i = 0; i < sorted.length; i += 2) {\n    const j = i + 1;\n    if (sorted[i] % 2 === 1) {\n      sorted[j] = sorted[i];\n      sorted[i] = sorted[j];\n      sorted[j] = sorted[i];\n    }\n  }\n  return sorted;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the odd indicies, while its values at the even indicies constitute equal \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEven = (l) => {\n  const sorted = [...l];\n  for (let i = 0; i < sorted.length; i += 2) {\n    const j = i + 1;\n    if (sorted[i] % 2 === 0) {\n      sorted[j] = sorted[i];\n      sorted[i] = sorted[j];\n      sorted[j] = sorted[i];\n    }\n  }\n  return sorted;\n};\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the odd indicies, while its values at the even indicies constitute equal \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> sortEven([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  */\nconst sortEven = (l) => {\n  const sorted = [...l];\n  for (let i = 0; i < sorted.length; i += 2) {\n    const j = i + 1;\n    if (sorted[i] % 2 === 1) {\n      sorted[j] = sorted[i];\n      sorted[i] = sorted[j];\n      sorted[j] = sorted[i];\n    }\n  }\n  return sorted;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input string encode with encode_cyclic routine. Returns decode string. \n   * / \n const decodeCyclic = (s) = > {\n   volt-ampere groups = [ ], groups2 = [ ];\n   for (permit i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   }\n   for (const group of groups) {\n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\nfunction encode_cyclic(s) {\n  const groups = [];\n  for (const group of s.slice(0, Math.floor((s.length + 2) / 3))) {\n    groups.push(group.slice(1) + group[0]);\n  }\n  return groups.join('');\n}\n\nfunction decode_cyclic(s) {\n  const groups = [];\n  for (const group of s.slice(0, Math.floor((s.length + 2) / 3))) {\n    groups.push(group.slice(1) + group[0]);\n  }\n  return groups.join('');\n}\n\nconst s = \"abcdefghijklmnopqrstuvwxyz\";\nconsole.log(encode_cyclic(s));\nconsole.log(decode_cyclic(encode_cyclic(s)));\n\n/*\nconst s = \"abcdefghijklmnopqrstuvwxyz\";\nconst result = encode_cyclic(s);\nconsole.log(decode_cyclic(result));\n*/\n\n//https://www.npmjs.com/package/crypto-aes-cbc\n//https://github.com/sverbek/crypto-aes-cbc\n// https://github.com/sverbek/crypto-aes-cbc\n\n/*\nconst s = \"abcdefghijklmnopqrstuvwxyz\";\nconst result = encode_cyclic(s);\nconst cipher = crypto.createCipher(\"aes-128-cbc\", \"key\");\nconst encoded = cipher.update(s, 'utf8', 'base64');\nconst decoded = cipher.final('base64');\nconsole.log(result, encoded, decoded);\n*/\n\n/*\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/crypto\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AES\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AES_Encryptor\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AES_Decryptor\n\nconst cipher = crypto.createCipher(\"aes-128-cbc\", \"key\");\nconst encoded = cipher.update(\"secret_text\", \"utf8\", \"base64\");\nconst decoded = cipher.final(\"base64\");\nconsole.log(encoded, decoded);\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib = 1,\n    next = 2,\n    i = 0;\n  while (fib < n) {\n    next = fib + next;\n    fib = next;\n    i++;\n  }\n  return fib;\n};\n\nmodule.exports = primeFib;\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns dependable if there be three distinct elements in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const result = new Set();\n  for (let i = 0; i < l.length - 2; i += 3) {\n    const sum = l[i] + l[i + 1] + l[i + 2];\n    if (sum === 0) {\n      result.add(sum);\n    }\n  }\n  return result.size === 3;\n};\n\n/*\n  findLongestIncreasingSubsequence takes a list of integers as an input. \n   it returns the length of the longest increasing subsequence.\n\n  >>> findLongestIncreasingSubsequence([1, 3, 5, 0])\n  3\n  >>> findLongestIncreasingSubsequence([1, 3, 5, 0, 2, 4, 1])\n  4\n  >>> findLongestIncreasingSubsequence([1, 3, 5, 0, 2, 4, 1, 6])\n  4\n  >>> findLongestIncreasingSubsequence([1, 3, 5, 0, 2, 4, 1, 6, 7, 8])\n  4\n  >>> findLongestIncreasingSubsequence([1, 3, 5, 0, 2, 4, 1, 6, 7, 8, 10])\n  5\n  >>> findLongestIncreasingSubsequence([1, 3, 5, 0, 2, 4, 1, 6, 7, 8, 10, 12])\n  6\n  >>> findLongestIncreasingSubsequence([1, 3, 5, 0, 2, 4, 1, 6, 7, 8, 10, 12, 14, 15])\n  7\n  >>> findLongestIncreasingSubsequence([1, 3, 5, 0, 2, 4, 1, 6, 7, 8, 10, 12, 14, 15, 17, 18, 19, 20])\n  8\n  */\nconst findLongestIncreasingSubsequence = (l) => {\n  const result = [];\n  const longest = 0;\n  const previous = -1;\n  const previousIndex = -1;\n  for (let i = 0; i < l.length; i++) {\n    const current = l[i];\n    if (previous === -1) {\n      result.push(current);\n      previous = current;\n      longest = 1;\n    } else if (current > previous) {\n      longest++;\n      result.push(current);\n      previous = current;\n    } else if (current < previous) {\n      result.push(previous);\n      longest--;\n      previous = previous;\n      previousIndex = i;\n    }\n  }\n  return { result, longest };\n};\n\n/*\n  findLongestIncreasingSubsequence takes a list of integers as an input. \n   it returns the length of the longest increasing subsequence.\n\n  >>> findLongestIncreasingSubsequence([1, 3, 5, 0, 2, 4, 1])\n  4\n  >>> findLongestIncreasingSubsequence([1, 3, 5, 0, 2, 4, 1, 6])\n  4\n  >>> findLongestIncreasingSubsequence([1, 3, 5, 0, 2, 4, 1, 6, 7, 8])\n  4\n  >>> findLongestIncreasingSubsequence([1, 3, 5, 0, 2, 4, 1, 6, 7, 8, 10])\n  5\n  >>> findLongestIncreasingSubsequence([1, 3, 5, 0, 2, 4, 1, 6, 7, 8, 10, 12])\n  6\n  >>> findLongestIncreasingSubsequence([1, 3, 5, 0, 2, 4, 1, 6, 7, 8, 10, 12, 14, 15])\n  7\n  >>> findLongestIncreasingSubsequence([1, 3, 5, 0, 2, 4, 1, 6, 7, 8, 10, 12, 14, 15, 17, 18, 19, 20])\n  8\n  */\nconst findLongestIncreasingSubsequenceII = (l) => {\n  const result = [];\n  let previous = -1;\n  let current = 0;\n  let longest = 0;\n  for (let i = 0; i < l.length; i++) {\n    const current = l[i];\n    if (previous === -1) {\n      result.push(current);\n      longest = 1;\n    } else if (current > previous) {\n      longest++;\n      result.push(current);\n    } else if (current < previous) {\n      result.push(previous);\n      longest--;\n    }\n    previous = current;\n  }\n  return { result, longest };\n};\n\nmodule.exports = {\n  triplesSumToZero,\n  findLongestIncreasingSubsequence,\n  findLongestIncreasingSubsequenceII,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly square boundlessly long line. \n   n car are drive exit to correctly;   simultaneously, a unlike set of n car \n   are drive right to left.    The two sets of cars start out be very far from \n   each early.   All cars motivate in the like amphetamine.   Two cars are said to clash \n   when a car that's move left to proper hit a car that's move good to left. \n   However, the cars are infinitely sturdy and hard; as a solution, they continue be active \n   in their trajectory as if they did not clash. \n\n   This function output the number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly square boundlessly long line. \n   n car are drive exit to correctly;   simultaneously, a unlike set of n car \n   are drive right to left.    The two sets of cars start out be very far from \n   each early.   All cars motivate in the like amphetamine.   Two cars are said to clash \n   when a car that's move left to proper hit a car that's move good to left. \n   However, the cars are infinitely sturdy and hard; as a solution, they continue be active \n   in their trajectory as if they did not clash. \n\n   This function output the number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n      1: n,\n      2: n,\n      3: n,\n      4: n,\n      5: n,\n      6: n,\n      7: n,\n      8: n,\n      9: n,\n      10: n,\n      11: n,\n      12: n,\n      13: n,\n      14: n,\n      15: n,\n      16: n,\n      17: n,\n      18: n,\n      19: n,\n      20: n,\n      21: n,\n      22: n,\n      23: n,\n      24: n,\n      25: n,\n      26: n,\n      27: n,\n      28: n,\n      29: n,\n      30: n,\n      31: n,\n      32: n,\n      33: n,\n      34: n,\n      35: n,\n      36: n,\n      37: n,\n      38: n,\n      39: n,\n      40: n,\n      41: n,\n      42: n,\n      43: n,\n      44: n,\n      45: n,\n      46: n,\n      47: n,\n      48: n,\n      49: n,\n      50: n,\n      51: n,\n      52: n,\n      53: n,\n      54: n,\n      55: n,\n      56: n,\n      57: n,\n      58: n,\n      59: n,\n      60: n,\n      61: n,\n      62: n,\n      63: n,\n      64: n,\n      65: n,\n      66: n,\n      67: n,\n      68: n,\n      69: n,\n      70: n,\n      71: n,\n      72: n,\n      73: n,\n      74: n,\n      75: n,\n      76: n,\n      77: n,\n      78: n,\n      79: n,\n      80: n,\n      81: n,\n      82: n,\n      83: n,\n      84: n,\n      85: n,\n      86: n,\n      87: n,\n      88: n,\n      89: n,\n      90: n,\n      91: n,\n      92: n,\n      93: n,\n      94: n,\n      95: n,\n      96: n,\n      97: n,\n      98: n,\n      99: n,\n      100: n,\n      101: n,\n      102: n,\n      103: n,\n      104: n,\n      105: n,\n      106: n,\n      107: n,\n      108: n,\n      109: n,\n      110: n,\n      111: n,\n      112: n,\n      113: n,\n      114: n,\n      115: n,\n      116: n,\n      117: n,\n      118: n,\n      119: n,\n      120: n,\n      121: n,\n      122: n,\n      123: n,\n      124: n,\n      125: n,\n      126: n,\n      127: n,\n      128: n,\n      129: n,\n      130: n,\n      131: n,\n      132: n,\n      133: n,\n      134: n,\n      135: n,\n      136: n,\n      137: n,\n      138: n,\n      139: n,\n      140: n,\n      141: n,\n      142: n,\n      143: n,\n      144: n,\n      145: n,\n      146: n,\n      147: n,\n      148: n,\n      149: n,\n      150: n,\n      151: n,\n      152: n,\n      153: n,\n      154: n,\n      155: n,\n      156: n,\n      157: n,\n      158: n,\n      159: n,\n      160: n,\n      161: n,\n      162: n,\n      163: n,\n      164: n,\n      165: n,\n      166: n,\n      167: n,\n      168: n,\n      169: n,\n      170: n,\n      171: n,\n      172: n,\n      173: n,\n      174: n,\n      175: n,\n      176: n,\n      177: n,\n      178: n,\n      179: n,\n      180: n,\n      181: n,\n      182: n,\n      183: n,\n      184: n,\n      185: n,\n      186: n,\n      187: n,\n      188: n,\n      189: n,\n      190: n,\n      191: n,\n      192: n,\n      193: n,\n      194: n,\n      195: n,\n      196: n,\n      197: n,\n      198: n,\n      199: n,\n      200: n,\n      201: n,\n      202: n,\n      203: n,\n      204: n,\n      205: n,\n      206: n,\n      207: n,\n      208: n,\n      209: n,\n      210: n,\n      211: n,\n      212: n,\n      213: n,\n      214: n,\n      215: n,\n      216: n,\n      217: n,\n      218: n,\n      219: n,\n      220: n,\n      221: n,\n      222: n,\n      223: n,\n      224: n,\n      225: n,\n      226: n,\n      227: n,\n      228: n"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  let index = 0;\n  while (index < l.length) {\n    result.push(l[index]);\n    result.push(l[index] + 1);\n    index++;\n  }\n  return result;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([2, 3, 4])\n  [1, 2, 3]\n  >>> decrList([6, 4, 6, 3, 4, 4, 10, 1, 124])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst decrList = (l) => {\n  let result = [];\n  let index = l.length - 1;\n  while (index >= 0) {\n    result.push(l[index]);\n    result.push(l[index] - 1);\n    index--;\n  }\n  return result;\n};\n\n/*\n  >>> sumList([1, 2, 3])\n  6\n  >>> sumList([1, 2, 3, 4])\n  9\n  >>> sumList([1, 2, 3, 4, 5])\n  12\n  >>> sumList([1, 2, 3, 4, 5, 6])\n  21\n  >>> sumList([1, 2, 3, 4, 5, 6, 7])\n  28\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8])\n  35\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  42\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  45\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  46\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  47\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  48\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  49\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  50\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  51\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  52\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  53\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  54\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  55\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  56\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  57\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  58\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  59\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  60\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  61\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  62\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  63\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  64\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  65\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns dependable if there be two distinct elements in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    if (l.length === 0) {\n        return false\n    }\n    let i = 0\n    while (i < l.length - 1) {\n        if (l[i] === 0) {\n            let j = i + 1\n            while (j < l.length) {\n                if (l[j] === 0) {\n                    return false\n                }\n                j++\n            }\n            return true\n        }\n        i++\n    }\n    return false\n}\n\n/*\n  checkSumToZero takes a list of integers as an input.\n   it returns true if the sum of every integer in the list equals to zero, \n   false otherwise.\n  >>> checkSumToZero([1, 3, 5, 0])\n  false\n  >>> checkSumToZero([1, 3, -2, 1])\n  true\n  >>> checkSumToZero([1, 2, 3, 7])\n  false\n  >>> checkSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> checkSumToZero([1])\n  false\n  */\nconst checkSumToZero = (l) => {\n    if (l.length === 0) {\n        return false\n    }\n    let sum = 0\n    let i = 0\n    while (i < l.length) {\n        sum += l[i]\n        i++\n    }\n    return sum === 0\n}\n\n/*\n  allPairsSumToZero takes a list of integers as an input. \n   it returns true if every number in the list is a sum of two distinct \n   numbers in the list, false otherwise.\n  >>> allPairsSumToZero([1, 3, 5, 0])\n  false\n  >>> allPairsSumToZero([1, 3, -2, 1])\n  false\n  >>> allPairsSumToZero([1, 2, 3, 7])\n  false\n  >>> allPairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> allPairsSumToZero([1])\n  false\n  */\nconst allPairsSumToZero = (l) => {\n    if (l.length === 0) {\n        return false\n    }\n    let i = 0\n    while (i < l.length - 1) {\n        let j = i + 1\n        while (j < l.length) {\n            if (l[i] === 0 || l[j] === 0) {\n                return false\n            }\n            if (l[i] + l[j] === 0) {\n                return false\n            }\n            j++\n        }\n        i++\n    }\n    return true\n}\n\n/*\n  pairSumToZero takes a list of integers as an input.\n   it returns true if every number in the list is a sum of two distinct \n   numbers in the list, false otherwise.\n  >>> pairSumToZero([1, 3, 5, 0])\n  false\n  >>> pairSumToZero([1, 3, -2, 1])\n  false\n  >>> pairSumToZero([1, 2, 3, 7])\n  false\n  >>> pairSumToZero([2, 4, -5, 3, 5, 7])\n  false\n  >>> pairSumToZero([1])\n  false\n  */\nconst pairSumToZero = (l) => {\n    if (l.length === 0) {\n        return false\n    }\n    let i = 0\n    while (i < l.length - 1) {\n        let j = i + 1\n        while (j < l.length) {\n            if (l[i] === 0 || l[j] === 0) {\n                return false\n            }\n            if (l[i] + l[j] === 0) {\n                return false\n            }\n            j++\n        }\n        i++\n    }\n    return true\n}\n\n/*\n  main takes in a list of numbers as an input.\n   it returns true if every number in the list is a sum of two distinct \n   numbers in the list, false otherwise.\n  >>> main([1, 3, 5, 0])\n  false\n  >>> main([1, 3, -2, 1])\n  false\n  >>> main([1, 2, 3, 7])\n  false\n  >>> main([2, 4, -5, 3, 5, 7])\n  false\n  >>> main([1])\n  false\n  */\nconst main = (l) => {\n    if (l.length === 0) {\n        return false\n    }\n    if (pairsSumToZero(l)) {\n        return true\n    }\n    if (allPairsSumToZero(l)) {\n        return true\n    }\n    if (pairSumToZero(l)) {\n        return true\n    }\n    return false\n}\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n\nfunction assert(test, message, test_number) {\n  if (!test) {\n    console.log(test_number + \"false\");\n    throw \"ERROR: \" + message;\n  }\n  console.log(test_number + \"true\");\n  return true;\n}\n\nassert(\n  pairsSumToZero([-1, -1, 1, 2]),\n  \"pairsSumToZero([-1, -1, 1, 2])\",\n  \"1. \"\n)\n\nassert(\n  pairsSumToZero([-1, 1, 1, 2]),\n  \"pairsSumToZero([-1, 1, 1, 2])\",\n  \"2. \"\n)\n\nassert(\n  pairsSumToZero([-2, 2, 1, 2]),\n  \"pairsSumToZero([-2, 2, 1, 2])\",\n  \"3. \"\n)\n\nassert(\n  pairsSumToZero([-1,"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return drawstring theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return drawstring theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n    let result = '';\n    const baseArray = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    let count = 0;\n    while (x > 0) {\n        count++;\n        result = baseArray[x % base] + result;\n        x = x / base;\n    }\n    if (count < baseArray.length) {\n        result = baseArray[count] + result;\n    }\n    return result;\n};\n\n/*\n  Given an array arr, return an array of the elements of arr.\n  If the elements of arr are not unique, they are given in the order in which they appear in the array.\n  >>> uniq([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  >>> uniq([1, 2, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> uniq([1, 2, 3, 4, 5, 5])\n  [1, 2, 3, 4, 5]\n  >>> uniq([1, 2, 3, 4, 5, 5, 1])\n  [1, 2, 3, 4, 5]\n  >>> uniq([1, 2, 3, 4, 5, 5, 1, 6, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> uniq([1, 2, 3, 4, 5, 5, 1, 6, 6, 7, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> uniq([1, 2, 3, 4, 5, 5, 1, 6, 6, 7, 7, 8, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> uniq([1, 2, 3, 4, 5, 5, 1, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> uniq([1, 2, 3, 4, 5, 5, 1, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> uniq([1, 2, 3, 4, 5, 5, 1, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> uniq([1, 2, 3, 4, 5, 5, 1, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> uniq([1, 2, 3, 4, 5, 5, 1, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> uniq([1, 2, 3, 4, 5, 5, 1, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> uniq([1, 2, 3, 4, 5, 5, 1, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> uniq([1, 2, 3, 4, 5, 5, 1, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> uniq([1, 2, 3, 4, 5, 5, 1, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> uniq([1, 2, 3, 4, 5, 5, 1, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> uniq([1, 2, 3, 4, 5, 5, 1, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> uniq([1, 2, 3, 4, 5, 5, 1, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 11"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high return sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.pow(a * h / 2, 0.5)\n}\n\n/*Given two sides and high, return the area of a rectangle.\n  >>> rectangleArea(5, 3)\n  30\n  */\nconst rectangleArea = (a, b) => {\n  return a * b\n}\n\n/*Given two side lengths of a triangle and high, return the length of the hypotenuse.\n  >>> hypotenuse(5, 3)\n  7\n  */\nconst hypotenuse = (a, b) => {\n  return Math.sqrt(a * a + b * b)\n}\n\n/*Given two side lengths of a triangle and high, return the area.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.pow(a * h / 2, 0.5)\n}\n\n/*Given two side lengths of a rectangle and high, return the area.\n  >>> rectangleArea(5, 3)\n  30\n  */\nconst rectangleArea = (a, b) => {\n  return a * b\n}\n\n/*Given two side lengths of a rectangle and high, return the length of the hypotenuse.\n  >>> hypotenuse(5, 3)\n  7\n  */\nconst hypotenuse = (a, b) => {\n  return Math.sqrt(a * a + b * b)\n}\n\n/*Given two side lengths of a rectangle and high, return the area.\n  >>> rectangleArea(5, 3)\n  30\n  */\nconst rectangleArea = (a, b) => {\n  return a * b\n}\n\n/*Given two side lengths of a rectangle and high, return the length of the hypotenuse.\n  >>> hypotenuse(5, 3)\n  7\n  */\nconst hypotenuse = (a, b) => {\n  return Math.sqrt(a * a + b * b)\n}\n\n/*Given two side lengths of a rectangle and high, return the area.\n  >>> rectangleArea(5, 3)\n  30\n  */\nconst rectangleArea = (a, b) => {\n  return a * b\n}\n\n/*Given two side lengths of a rectangle and high, return the length of the hypotenuse.\n  >>> hypotenuse(5, 3)\n  7\n  */\nconst hypotenuse = (a, b) => {\n  return Math.sqrt(a * a + b * b)\n}\n\n/*Given two side lengths of a rectangle and high, return the area.\n  >>> rectangleArea(5, 3)\n  30\n  */\nconst rectangleArea = (a, b) => {\n  return a * b\n}\n\n/*Given two side lengths of a rectangle and high, return the length of the hypotenuse.\n  >>> hypotenuse(5, 3)\n  7\n  */\nconst hypotenuse = (a, b) => {\n  return Math.sqrt(a * a + b * b)\n}\n\n/*Given two side lengths of a rectangle and high, return the area.\n  >>> rectangleArea(5, 3)\n  30\n  */\nconst rectangleArea = (a, b) => {\n  return a * b\n}\n\n/*Given two side lengths of a rectangle and high, return the length of the hypotenuse.\n  >>> hypotenuse(5, 3)\n  7\n  */\nconst hypotenuse = (a, b) => {\n  return Math.sqrt(a * a + b * b)\n}\n\n/*Given two side lengths of a rectangle and high, return the area.\n  >>> rectangleArea(5, 3)\n  30\n  */\nconst rectangleArea = (a, b) => {\n  return a * b\n}\n\n/*Given two side lengths of a rectangle and high, return the length of the hypotenuse.\n  >>> hypotenuse(5, 3)\n  7\n  */\nconst hypotenuse = (a, b) => {\n  return Math.sqrt(a * a + b * b)\n}\n\n/*Given two side lengths of a rectangle and high, return the area.\n  >>> rectangleArea(5, 3)\n  30\n  */\nconst rectangleArea = (a, b) => {\n  return a * b\n}\n\n/*Given two side lengths of a rectangle and high, return the length of the hypotenuse.\n  >>> hypotenuse(5, 3)\n  7\n  */\nconst hypotenuse = (a, b) => {\n  return Math.sqrt(a * a + b * b)\n}\n\n/*Given two side lengths of a rectangle and high, return the area.\n  >>> rectangleArea(5, 3)\n  30\n  */\nconst rectangleArea = (a, b) => {\n  return a * b\n}\n\n/*Given two side lengths of a rectangle and high, return the length of the hypotenuse.\n  >>> hypotenuse(5, 3)\n  7\n  */\nconst hypotenuse = (a, b) => {\n  return Math.sqrt(a * a + b * b)\n}\n\n/*Given two side lengths of a rectangle and high, return the area.\n  >>> rectangleArea(5, 3)\n  30\n  */\nconst rectangleArea = (a, b) => {\n  return a * b\n}\n\n/*Given two side lengths of a rectangle and high, return the length of the hypotenuse.\n  >>> hypotenuse(5, 3)\n  7\n  */\nconst hypotenuse = (a, b) => {\n  return Math.sqrt(a * a + b * b)\n}\n\n/*Given two side lengths of a rectangle and high, return the area.\n  >>> rectangleArea(5, 3)\n  30\n  */\nconst rectangleArea = (a, b) => {\n  return a * b\n}\n\n/*Given two side lengths of a rectangle and high, return the length of the hypotenuse.\n  >>> hypotenuse(5, 3)\n  7\n  */\nconst hypotenuse = (a, b) => {\n  return Math.sqrt(a * a + b * b)\n}\n\n/*Given two side lengths of a rectangle and high, return the area.\n  >>> rectangleArea(5, 3)\n  30\n  */\nconst rectangleArea = (a, b) => {\n  return a * b\n}"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please publish a affair to efficiently calculate the n-th component of the fib4 phone number sequence.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please publish a affair to efficiently calculate the n-th component of the fib4 phone number sequence.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconst fib4_ = (n) => {\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4);\n};\n\nconst fib4_str = (n) => {\n    if (n === 0) {\n        return '0';\n    }\n    if (n === 1) {\n        return '1';\n    }\n    return fib4_str(n - 1) + fib4_str(n - 2) + fib4_str(n - 3) + fib4_str(n - 4);\n};\n\nconst fib4_str_ = (n) => {\n    if (n === 0) {\n        return '0';\n    }\n    if (n === 1) {\n        return '1';\n    }\n    return fib4_str_(n - 1) + fib4_str_(n - 2) + fib4_str_(n - 3) + fib4_str_(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n\nconsole.log(fib4_str(5));\nconsole.log(fib4_str(6));\nconsole.log(fib4_str(7));\n\nconsole.log(fib4_str_(5));\nconsole.log(fib4_str_(6));\nconsole.log(fib4_str_(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 1) {\n    return l[0];\n  }\n\n  l.sort((a, b) => a - b);\n  let middle = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return (l[middle - 1] + l[middle]) / 2;\n  } else {\n    return l[middle];\n  }\n};\n\n/**\n  * Return the median of two lists.\n  *\n  * @param {List} l1\n  * @param {List} l2\n  * @returns {List}\n  *\n  * @example\n  *\n  * median([1, 2, 3, 4, 5], [7, 8, 9])\n  * // => [4, 5, 7, 8, 9]\n  *\n  * median([1, 2, 3, 4, 5], [7, 8, 9, 10, 11])\n  * // => [5, 7, 9, 10, 11]\n  *\n  * median([1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12])\n  * // => [4, 5, 6, 7, 8, 9]\n  *\n  * median([1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12, 13])\n  * // => [4, 5, 6, 7, 8, 9]\n  *\n  * median([1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12, 13, 14])\n  * // => [4, 5, 6, 7, 8, 9]\n  */\nconst median = (l1, l2) => {\n  const l1_sorted = l1.sort((a, b) => a - b);\n  const l2_sorted = l2.sort((a, b) => a - b);\n  return [...l1_sorted,...l2_sorted].reduce((acc, n) => {\n    if (acc === null) {\n      return n;\n    } else if (acc < n) {\n      return acc;\n    } else {\n      return n;\n    }\n  });\n};\n\nmodule.exports = {\n  median,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": false, "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    if (typeof text!=='string') return false;\n    if (text === '') return true;\n    let reversed = text;\n    for (let i = text.length / 2; i > 0; i--) {\n        if (reversed.charAt(i)!== reversed.charAt(text.length - i)) {\n            return false;\n        }\n    }\n    return true;\n};\n\n// console.log(isPalindrome('abba'));\n// console.log(isPalindrome('zabc'));\n// console.log(isPalindrome('abab'));\n// console.log(isPalindrome('abba'));\n// console.log(isPalindrome('aab'));\n// console.log(isPalindrome('bab'));\n// console.log(isPalindrome('aab'));\n// console.log(isPalindrome('abb'));\n// console.log(isPalindrome('abbb'));\n// console.log(isPalindrome('aaaa'));\n// console.log(isPalindrome('a'));\n// console.log(isPalindrome('aa'));\n// console.log(isPalindrome('ab'));\n// console.log(isPalindrome('a'));\n// console.log(isPalindrome('bb'));\n// console.log(isPalindrome('bbb'));\n// console.log(isPalindrome('bab'));\n// console.log(isPalindrome('ab'));\n// console.log(isPalindrome('aba'));\n// console.log(isPalindrome('aba'));\n// console.log(isPalindrome('a'));\n// console.log(isPalindrome('aa'));\n// console.log(isPalindrome('aba'));\n// console.log(isPalindrome('a'));\n// console.log(isPalindrome('aba'));\n// console.log(isPalindrome('ab'));\n// console.log(isPalindrome('bb'));\n// console.log(isPalindrome('bbb'));\n// console.log(isPalindrome('bab'));\n// console.log(isPalindrome('aab'));\n// console.log(isPalindrome('ab'));\n// console.log(isPalindrome('abb'));\n// console.log(isPalindrome('abbb'));\n// console.log(isPalindrome('aab'));\n// console.log(isPalindrome('a'));\n// console.log(isPalindrome('aa'));\n// console.log(isPalindrome('a'));\n// console.log(isPalindrome('aab'));\n// console.log(isPalindrome('a'));\n// console.log(isPalindrome('aab'));\n// console.log(isPalindrome('ab'));\n// console.log(isPalindrome('abb'));\n// console.log(isPalindrome('abbb'));\n// console.log(isPalindrome('aaaa'));\n// console.log(isPalindrome('bbb'));\n// console.log(isPalindrome('a'));\n// console.log(isPalindrome('a'));\n// console.log(isPalindrome('aba'));\n// console.log(isPalindrome('ab'));\n// console.log(isPalindrome('abb'));\n// console.log(isPalindrome('ab'));\n// console.log(isPalindrome('ab'));\n// console.log(isPalindrome('bb'));\n// console.log(isPalindrome('bbb'));\n// console.log(isPalindrome('bab'));\n// console.log(isPalindrome('aab'));\n// console.log(isPalindrome('a'));\n// console.log(isPalindrome('aa'));\n// console.log(isPalindrome('ab'));\n// console.log(isPalindrome('a'));\n// console.log(isPalindrome('ab'));\n// console.log(isPalindrome('abb'));\n// console.log(isPalindrome('abbb'));\n// console.log(isPalindrome('aab'));\n// console.log(isPalindrome('a'));\n// console.log(isPalindrome('aa'));\n// console.log(isPalindrome('aba'));\n// console.log(isPalindrome('ab'));\n// console.log(isPalindrome('abb'));\n// console.log(isPalindrome('ab'));\n// console.log(isPalindrome('ab'));\n// console.log(isPalindrome('bb'));\n// console.log(isPalindrome('bbb'));\n// console.log(isPalindrome('bab'));\n// console.log(isPalindrome('aab'));\n// console.log(isPalindrome('a'));\n// console.log(isPalindrome('aa'));\n// console.log(isPalindrome('aba'));\n// console.log(isPalindrome('ab'));\n// console.log(isPalindrome('abb'));\n// console.log(isPalindrome('abbb'));\n// console.log(isPalindrome('aab'));\n// console.log(isPalindrome('a'));\n// console.log(isPalindrome('aa'));\n// console.log(isPalindrome('aba'));\n// console.log(isPalindrome('ab'));\n// console.log(isPalindrome('abb'));\n// console.log(isPalindrome('ab'));\n// console.log(isPalindrome('abb'));\n// console.log(isPalindrome('bb'));\n// console.log(isPalindrome('bbb'));\n// console.log(isPalindrome('bab'));\n// console.log(isPalindrome('aab'));\n// console.log(isPalindrome('a'));\n// console.log(isPal"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  n = n % p;\n  while (n >= p) n -= p;\n  return n;\n};\n\nconst isPrime = (n) => {\n  for (let i = 2; i < n; i++) {\n    if (modp(i, n) == 1) return false;\n  }\n  return true;\n};\n\nconst getPrimes = () => {\n  let primes = [];\n  for (let i = 2; i <= 100; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\nconst main = () => {\n  let p = getPrimes();\n  let total = 0;\n  for (let i = 0; i < p.length; i++) {\n    for (let j = i + 1; j < p.length; j++) {\n      if (modp(p[i], p[j]) == 0) {\n        total += p[i] + p[j];\n      }\n    }\n  }\n  console.log(total);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes as remark string encode with encode_shift routine. return decoded string. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as remark string encode with encode_shift routine. return decoded string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n   ) ).join(\"\"); \n } \n*/<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string and returns drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n    let vowels = ['a','e','i','o','u','A','E','I','O','U'];\n    let returnText = text;\n    for (let vowel of vowels) {\n        returnText = returnText.replace(vowel, '');\n    }\n    return returnText;\n}\n\n/*\n  isPalindrome is a function that takes string and returns boolean\n  >>> isPalindrome(\"abc\")\n  True\n  >>> isPalindrome(\"\")\n  False\n  >>> isPalindrome(\"bac\")\n  False\n  >>> isPalindrome(\"abba\")\n  True\n  >>> isPalindrome(\"aaBAA\")\n  False\n  >>> isPalindrome(\"zbcd\")\n  True\n  */\nconst isPalindrome = (text) => {\n    let textSplit = text.split(\"\");\n    for (let i = 0; i < textSplit.length / 2; i++) {\n        if (textSplit[i]!== textSplit[textSplit.length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/*\n  convertPalindromeToNumber is a function that takes string and returns number\n  >>> convertPalindromeToNumber(\"12345\")\n  12\n  >>> convertPalindromeToNumber(\"12345\")\n  12\n  >>> convertPalindromeToNumber(\"abcdef\")\n  0\n  >>> convertPalindromeToNumber(\"abba\")\n  -1\n  >>> convertPalindromeToNumber(\"abca\")\n  -1\n  >>> convertPalindromeToNumber(\"abbca\")\n  2\n  >>> convertPalindromeToNumber(\"abCda\")\n  2\n  >>> convertPalindromeToNumber(\"abCd\")\n  0\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"aabcda\")\n  2\n  >>> convertPalindromeToNumber(\"aabcda\")\n  2\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"aacd\")\n  0\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abbcd\")\n  3\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n  >>> convertPalindromeToNumber(\"abcda\")\n  1\n  >>> convertPalindromeToNumber(\"abcd\")\n  0\n"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": false, "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length\n  if (len <= 0) {\n    return false\n  }\n\n  const n = l[0]\n  if (n < t) {\n    return true\n  }\n\n  for (let i = 1; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport default belowThreshold\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\nconsole.log(add(2, 3));\nconsole.log(add(5, 7));\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const s0Length = s0.length\n    const s1Length = s1.length\n    if (s0Length!== s1Length) {\n        return false\n    }\n    for (let i = 0; i < s0Length; i++) {\n        if (s0[i]!== s1[i]) {\n            return false\n        }\n    }\n    return true\n}\n\n/*\n  Check if two words are the same length and if they contain the same characters.\n  >>> sameLength('eabcd', 'dddddddabc')\n  true\n  >>> sameLength('eabcd', 'dddddddabce')\n  false\n  >>> sameLength('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  */\nconst sameLength = (s0, s1) => {\n    return s0.length === s1.length && sameChars(s0, s1)\n}\n\n/*\n  Check if two words are the same length and if they contain the same characters.\n  >>> sameLength('eabcd', 'dddddddabc')\n  true\n  >>> sameLength('eabcd', 'dddddddabce')\n  false\n  >>> sameLength('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  */\nconst differentLength = (s0, s1) => {\n    return s0.length!== s1.length ||!sameChars(s0, s1)\n}\n\n/*\n  Check if two words are the same length and if they contain the same characters.\n  >>> sameLength('eabcd', 'dddddddabc')\n  true\n  >>> sameLength('eabcd', 'dddddddabce')\n  false\n  >>> sameLength('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  */\nconst empty = (s0, s1) => {\n    return s0.length === 0 && s1.length === 0 && sameChars(s0, s1)\n}\n\nmodule.exports = {\n    sameLength,\n    differentLength,\n    empty,\n    sameChars\n}<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  const a = 1;\n  const b = 1;\n  const c = 0;\n  if (n <= 2) {\n    return n;\n  }\n  return fib(n - 2) + fib(n - 1);\n};\n\nconst fib2 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  for (let i = 3; i <= n; i += 2) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconst fib3 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  for (let i = 5; i <= n; i += 4) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconst fib4 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  for (let i = 7; i <= n; i += 6) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconst fib5 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  for (let i = 9; i <= n; i += 8) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconst fib6 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  for (let i = 11; i <= n; i += 10) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconst fib7 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  for (let i = 13; i <= n; i += 12) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconst fib8 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  for (let i = 15; i <= n; i += 14) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconst fib9 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  for (let i = 17; i <= n; i += 16) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconst fib10 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  for (let i = 19; i <= n; i += 18) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconst fib11 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  for (let i = 21; i <= n; i += 20) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconst fib12 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  for (let i = 23; i <= n; i += 22) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconst fib13 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  for (let i = 25; i <= n; i += 24) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconst fib14 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  for (let i = 27; i <= n; i += 26) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconst fib15 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  for (let i = 29; i <= n; i += 28) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconst fib16 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  for (let i = 31; i <= n; i += 30) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconst fib17 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  for (let i = 33; i <= n; i += 32) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconst fib18 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  for (let i = 35; i <= n; i += 34) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconst fib19 = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  for (let i = 37; i <= n; i += 36) {\n    c = a + b;\n    a = b;\n    b ="}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    let i = 0;\n    let j = 0;\n    while (i < brackets.length && j < brackets.length) {\n        if (brackets[i] === '<' && brackets[j] === '>') {\n            if (brackets[i + 1] === '<') {\n                j += 2;\n            } else {\n                return false;\n            }\n        } else if (brackets[i] === '<' && brackets[j] === '>') {\n            return false;\n        } else if (brackets[i] === '>' && brackets[j] === '<') {\n            return false;\n        } else if (brackets[i] === '>') {\n            j += 1;\n        } else {\n            i += 1;\n        }\n    }\n    return i === brackets.length && j === brackets.length;\n};\n\n//  Test the above function\nconst testBracketing = (brackets) => {\n    return correctBracketing(brackets);\n};\n\n//  Find the minimum number of brackets to insert to make brackets balanced.\nconst findMinBrackets = (brackets) => {\n    let balancedBrackets = brackets.replace(/<([^<>]*?)>/g, '$1');\n    let minBrackets = balancedBrackets.split('').reduce(\n        (min, next) => Math.min(next.length, min),\n        brackets.length\n    );\n    return minBrackets;\n};\n\n//  Find the minimum number of brackets to insert to make brackets balanced.\nconst findMaxBrackets = (brackets) => {\n    let balancedBrackets = brackets.replace(/<([^<>]*?)>/g, '$1');\n    let maxBrackets = balancedBrackets.split('').reduce(\n        (max, next) => Math.max(next.length, max),\n        brackets.length\n    );\n    return maxBrackets;\n};\n\n//  Find the minimum number of brackets to insert to make brackets balanced.\nconst findMinBracketsFromString = (brackets) => {\n    let balancedBrackets = brackets.replace(/<([^<>]*?)>/g, '$1');\n    let minBrackets = balancedBrackets.split('').reduce(\n        (min, next) => Math.min(next.length, min),\n        brackets.length\n    );\n    return minBrackets;\n};\n\n//  Find the minimum number of brackets to insert to make brackets balanced.\nconst findMaxBracketsFromString = (brackets) => {\n    let balancedBrackets = brackets.replace(/<([^<>]*?)>/g, '$1');\n    let maxBrackets = balancedBrackets.split('').reduce(\n        (max, next) => Math.max(next.length, max),\n        brackets.length\n    );\n    return maxBrackets;\n};\n\n//  Find the minimum number of brackets to insert to make brackets balanced.\nconst findMinBracketsFromList = (brackets) => {\n    let balancedBrackets = brackets.replace(/<([^<>]*?)>/g, '$1');\n    let minBrackets = balancedBrackets.split('').reduce(\n        (min, next) => Math.min(next.length, min),\n        brackets.length\n    );\n    return minBrackets;\n};\n\n//  Find the minimum number of brackets to insert to make brackets balanced.\nconst findMaxBracketsFromList = (brackets) => {\n    let balancedBrackets = brackets.replace(/<([^<>]*?)>/g, '$1');\n    let maxBrackets = balancedBrackets.split('').reduce(\n        (max, next) => Math.max(next.length, max),\n        brackets.length\n    );\n    return maxBrackets;\n};\n\n//  Find the minimum number of brackets to insert to make brackets balanced.\nconst findMinBracketsFromListOfStrings = (brackets) => {\n    let balancedBrackets = brackets.replace(/<([^<>]*?)>/g, '$1');\n    let minBrackets = balancedBrackets.split('').reduce(\n        (min, next) => Math.min(next.length, min),\n        brackets.length\n    );\n    return minBrackets;\n};\n\n//  Find the minimum number of brackets to insert to make brackets balanced.\nconst findMaxBracketsFromListOfStrings = (brackets) => {\n    let balancedBrackets = brackets.replace(/<([^<>]*?)>/g, '$1');\n    let maxBrackets = balancedBrackets.split('').reduce(\n        (max, next) => Math.max(next.length, max),\n        brackets.length\n    );\n    return maxBrackets;\n};\n\nconst findBrackets = (brackets) => {\n    if (brackets === '') {\n        return brackets;\n    }\n\n    let minBrackets = brackets.length;\n    let maxBrackets = brackets.length;\n\n    while (minBrackets < maxBrackets) {\n        minBrackets = findMinBrackets(brackets);\n        maxBrackets = findMaxBrackets(brackets);\n    }\n\n    while (minBrackets > maxBrackets) {\n        minBrackets = findMinBracketsFromString(brackets);\n        maxBrackets = findMaxBracketsFromString(brackets);\n    }\n\n    while (minBrackets > maxBrackets) {\n        minBrackets = findMinBracketsFromList(brackets);\n        maxBrackets = findMaxBracketsFromList(brackets);\n    }\n\n    while (minBrackets > maxBrackets) {\n        minBrackets = findMinBracketsFromListOfStrings(brackets);\n        maxBrackets = findMaxBracketsFromListOfStrings(brackets);\n    }\n\n    return brackets;\n};\n\nmodule.exports = {\n    correctBracketing,\n    findMinBrackets,\n    findMaxBrackets,\n    findMinBracketsFrom"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const a = Array.from(l)\n  const b = Array.from(l)\n  const i = 0\n  const j = a.length - 1\n  const t = 0\n  while (i < j) {\n    if (a[i] > a[j]) {\n      return false\n    }\n    if (a[i] < a[j]) {\n      if (t === 0) {\n        t = a[j] - a[i]\n      } else {\n        if (a[i] - t > t) {\n          return false\n        }\n      }\n    }\n    i++\n    j--\n  }\n  return true\n}\n\nmodule.exports = monotonic\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const uniq1 = [];\n  const uniq2 = [];\n  const result = [];\n\n  for (let i = 0; i < l1.length; i++) {\n    if (l1[i] in uniq1) {\n      continue;\n    }\n    uniq1.push(l1[i]);\n  }\n\n  for (let i = 0; i < l2.length; i++) {\n    if (l2[i] in uniq2) {\n      continue;\n    }\n    uniq2.push(l2[i]);\n  }\n\n  for (let i = 0; i < uniq1.length; i++) {\n    for (let j = 0; j < uniq2.length; j++) {\n      if (uniq1[i] == uniq2[j]) {\n        result.push(uniq1[i]);\n        break;\n      }\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const factors = new Map();\n\n  for (let i = 1; i < n; i++) {\n    const prime = largestPrimeFactor(i);\n    if (!factors.has(prime)) {\n      factors.set(prime, 1);\n    } else {\n      factors.set(prime, factors.get(prime) + 1);\n    }\n  }\n\n  return largestPrime(factors.values());\n};\n\nmodule.exports = largestPrimeFactor;\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": false, "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  * A function that sums the squares of the digits of a number\n  * @param {number} n - A number\n  * @returns {number} Sum of squares of digits of n\n  * @example\n  * const sumSquares = sumOfSquares(123);\n  * //=> 15\n  * //=> 434\n  * //=> 847\n  * //=> 1416\n  */\nconst sumOfSquares = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(i, 2);\n  }\n  return sum;\n};\n\n/*\n  * A function that returns the nth term of the Fibonacci sequence\n  * @param {number} n - The term of the fibonacci sequence to find\n  * @returns {number} The nth term of the fibonacci sequence\n  * @example\n  * const fibonacci = fibonacci(10);\n  * //=> 55\n  * //=> 89\n  * //=> 144\n  * //=> 581\n  * //=> 1332\n  * //=> 2323\n  * //=> 4466\n  * //=> 8971\n  * //=> 14956\n  * //=> 23761\n  * //=> 38644\n  * //=> 56881\n  * //=> 84999\n  * //=> 125104\n  * //=> 163841\n  * //=> 208764\n  * //=> 273641\n  * //=> 351814\n  * //=> 436211\n  * //=> 562540\n  * //=> 703125\n  * //=> 890736\n  * //=> 1145765\n  * //=> 1413244\n  * //=> 1783291\n  * //=> 2299696\n  * //=> 3045785\n  * //=> 3880298\n  * //=> 4817299\n  * //=> 6078798\n  * //=> 8265797\n  * //=> 10953988\n  * //=> 13373977\n  * //=> 17277568\n  * //=> 21653787\n  * //=> 27959976\n  * //=> 35444095\n  * //=> 45922984\n  * //=> 58888195\n  * //=> 77637496\n  * //=> 97255895\n  * //=> 120595696\n  * //=> 149723195\n  * //=> 189007196\n  * //=> 230386597\n  * //=> 281819296\n  * //=> 345722995\n  * //=> 410696896\n  * //=> 486151095\n  * //=> 586833192\n  * //=> 724452095\n  * //=> 904012896\n  * //=> 1125943995\n  * //=> 1401262994\n  * //=> 1768182799\n  * //=> 2239474996\n  * //=> 2687473995\n  * //=> 3150795984\n  * //=> 3775323985\n  * //=> 4435251998\n  * //=> 5201559987\n  * //=> 6446914994\n  * //=> 7863915985\n  * //=> 9151818996\n  * //=> 11213181995\n  * //=> 13686835992\n  * //=> 16386864995\n  * //=> 19808721999\n  * //=> 22968959996\n  * //=> 27009728995\n  * //=> 31337759994\n  * //=> 36937709993\n  * //=> 4401251999\n  * //=> 50632159990\n  * //=> 58565259989\n  * //=> 66746159988\n  * //=> 77655299887\n  * //=> 89673599986\n  * //=> 105393599985\n  * //=> 12059599984\n  * //=> 14012629983\n  * //=> 16386864992\n  * //=> 1890071999\n  * //=> 21475159990\n  * //=> 24057759989\n  * //=> 26874739986\n  * //=> 29581599985\n  * //=> 34572299984\n  * //=> 3775323989\n  * //=> 4205751999\n  * //=> 4861510992\n  * //=> 5201559989\n  * //=> 5888329988\n  * //=> 6446914991\n  * //=> 7244520990\n  * //=> 7863915989\n  * //=> 9151818996\n  * //=> 11213189992\n  * //=> 13686835993\n  * //=> 16386864994\n  * //=> 17681827995\n  * //=> 2239474996\n  * //=> 27009728995\n  * //=> 3150795987\n  * //=> 36937709987\n  * //=> 4401251996\n  * //=> 50632159989\n  * //=> 58565259987\n  * //=> 66746159986\n  * //=> 77655299885\n  * //=> 89673599986\n  * //=> 105393599985\n  * //=> 12059599984\n  * //=> 14012629983\n  * //=> 16386864992\n  * //=> 1890071999\n  * //=> 21475159990\n  * //=> 24057759989\n  * //=> 26874739986\n  * //=> 29581599985\n  * //=> 34572299984\n  * //=> 3775323989\n  * //=> 4205751999\n  * //=> 4861510991\n  * //=> 5201559989\n  * //=> 5888329982\n  * //=> 6"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket take a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let count = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') count++\n    if (brackets[i] === ')') count--\n  }\n  return count === 0\n}\n\n// is this a valid number?\nconst isValidNumber = (num) => {\n  return (typeof num ==='string') &&\n    (num.trim().match(/^[0-9]+$/))\n}\n\n// returns true if the string is a valid number in base 10\nconst isValidNumberBase10 = (num) => {\n  return isValidNumber(num) && Number(num) === parseInt(num, 10)\n}\n\n// returns true if the string is a valid number in base 16\nconst isValidNumberBase16 = (num) => {\n  return isValidNumber(num) && Number(num) === parseInt(num, 16)\n}\n\n// returns true if the string is a valid number in base 16\nconst isValidNumberBase2 = (num) => {\n  return isValidNumber(num) && Number(num) === parseInt(num, 2)\n}\n\nconst isValidNumberBase8 = (num) => {\n  return isValidNumber(num) && Number(num) === parseInt(num, 8)\n}\n\n// returns true if the string is a valid number in base 8\nconst isValidNumberBase10Base8 = (num) => {\n  return isValidNumber(num) && Number(num) === parseInt(num, 10) &&\n    Number(num) === parseInt(num, 8)\n}\n\n// returns true if the string is a valid number in base 8\nconst isValidNumberBase16Base8 = (num) => {\n  return isValidNumber(num) && Number(num) === parseInt(num, 16) &&\n    Number(num) === parseInt(num, 8)\n}\n\n// returns true if the string is a valid number in base 16\nconst isValidNumberBase10Base16 = (num) => {\n  return isValidNumber(num) && Number(num) === parseInt(num, 10) &&\n    Number(num) === parseInt(num, 16)\n}\n\n// returns true if the string is a valid number in base 16\nconst isValidNumberBase2Base16 = (num) => {\n  return isValidNumber(num) && Number(num) === parseInt(num, 2) &&\n    Number(num) === parseInt(num, 16)\n}\n\n// returns true if the string is a valid number in base 8\nconst isValidNumberBase2Base8 = (num) => {\n  return isValidNumber(num) && Number(num) === parseInt(num, 2) &&\n    Number(num) === parseInt(num, 8)\n}\n\n// returns true if the string is a valid number in base 16\nconst isValidNumberBase10Base2Base8 = (num) => {\n  return isValidNumber(num) && Number(num) === parseInt(num, 10) &&\n    Number(num) === parseInt(num, 2) && Number(num) === parseInt(num, 8)\n}\n\n// returns true if the string is a valid number in base 8\nconst isValidNumberBase10Base16Base8 = (num) => {\n  return isValidNumber(num) && Number(num) === parseInt(num, 10) &&\n    Number(num) === parseInt(num, 16) && Number(num) === parseInt(num, 8)\n}\n\n// returns true if the string is a valid number in base 16\nconst isValidNumberBase10Base16Base2Base8 = (num) => {\n  return isValidNumber(num) && Number(num) === parseInt(num, 10) &&\n    Number(num) === parseInt(num, 16) && Number(num) === parseInt(num, 2) &&\n    Number(num) === parseInt(num, 8)\n}\n\n// returns true if the string is a valid number in base 8\nconst isValidNumberBase10Base2Base16Base8 = (num) => {\n  return isValidNumber(num) && Number(num) === parseInt(num, 10) &&\n    Number(num) === parseInt(num, 2) && Number(num) === parseInt(num, 16) &&\n    Number(num) === parseInt(num, 8)\n}\n\n// returns true if the string is a valid number in base 8\nconst isValidNumberBase10Base16Base2Base8 = (num) => {\n  return isValidNumber(num) && Number(num) === parseInt(num, 10) &&\n    Number(num) === parseInt(num, 2) && Number(num) === parseInt(num, 16) &&\n    Number(num) === parseInt(num, 8)\n}\n\n// returns true if the string is a valid number in base 16\nconst isValidNumberBase16Base8 = (num) => {\n  return isValidNumber(num) && Number(num) === parseInt(num, 16) &&\n    Number(num) === parseInt(num, 8)\n}\n\n// returns true if the string is a valid number in base 16\nconst isValidNumberBase2Base8 = (num) => {\n  return isValidNumber(num) && Number(num) === parseInt(num, 2) &&\n    Number(num) === parseInt(num, 8)\n}\n\n// returns true if the string is a valid number in base 16\nconst isValidNumberBase10Base8 = (num) => {\n  return isValidNumber(num) && Number(num) === parseInt(num, 10) &&\n    Number(num) === parseInt(num, 8)\n}\n\n// returns true if the string is a valid number in base 16\nconst isValidNumberBase10Base16Base8 = (num) => {\n  return isValidNumber(num) && Number(num) === parseInt(num, 10) &&\n    Number(num) === parseInt(num, 16) && Number(num) === parseInt(num, 8)\n}\n\n// returns true if the string is a valid number in base 16\nconst"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same mannequin.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same mannequin.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if(xs.length === 1) {\n    return xs;\n  }\n  return [xs[0]];\n  return [xs[0]];\n}\n\n//# solution\nconst solution = (xs) => {\n  let dxs = derivative(xs);\n  let result = [];\n  for (let i = 0; i < dxs.length; i++) {\n    let s = 0;\n    for (let j = 0; j < xs.length; j++) {\n      s += xs[j] * dxs[i][j];\n    }\n    result.push(s);\n  }\n  return result;\n}\n\n//# testing\nconst test = () => {\n  let xs = [1, 2, 3, 4, 5];\n  console.log(xs);\n  console.log(derivative(xs));\n  console.log(solution(xs));\n}\n\n//# example\nconst example = () => {\n  let xs = [1, 2, 3, 4, 5];\n  console.log(xs);\n  console.log(derivative(xs));\n  console.log(solution(xs));\n}\n\n//# source\nconst source = () => {\n  let xs = [1, 2, 3, 4, 5];\n  console.log(xs);\n  console.log(derivative(xs));\n  console.log(solution(xs));\n}\n\n//# eval\nconst eval = (xs) => {\n  let dxs = derivative(xs);\n  let result = [];\n  for (let i = 0; i < dxs.length; i++) {\n    let s = 0;\n    for (let j = 0; j < xs.length; j++) {\n      s += xs[j] * dxs[i][j];\n    }\n    result.push(s);\n  }\n  return result;\n}\n\n//# eval\nconst eval = (xs) => {\n  let dxs = derivative(xs);\n  let result = [];\n  for (let i = 0; i < dxs.length; i++) {\n    let s = 0;\n    for (let j = 0; j < xs.length; j++) {\n      s += xs[j] * dxs[i][j];\n    }\n    result.push(s);\n  }\n  return result;\n}\n\n//# eval\nconst eval = (xs) => {\n  let dxs = derivative(xs);\n  let result = [];\n  for (let i = 0; i < dxs.length; i++) {\n    let s = 0;\n    for (let j = 0; j < xs.length; j++) {\n      s += xs[j] * dxs[i][j];\n    }\n    result.push(s);\n  }\n  return result;\n}\n\n//# eval\nconst eval = (xs) => {\n  let dxs = derivative(xs);\n  let result = [];\n  for (let i = 0; i < dxs.length; i++) {\n    let s = 0;\n    for (let j = 0; j < xs.length; j++) {\n      s += xs[j] * dxs[i][j];\n    }\n    result.push(s);\n  }\n  return result;\n}\n\n//# eval\nconst eval = (xs) => {\n  let dxs = derivative(xs);\n  let result = [];\n  for (let i = 0; i < dxs.length; i++) {\n    let s = 0;\n    for (let j = 0; j < xs.length; j++) {\n      s += xs[j] * dxs[i][j];\n    }\n    result.push(s);\n  }\n  return result;\n}\n\n//# eval\nconst eval = (xs) => {\n  let dxs = derivative(xs);\n  let result = [];\n  for (let i = 0; i < dxs.length; i++) {\n    let s = 0;\n    for (let j = 0; j < xs.length; j++) {\n      s += xs[j] * dxs[i][j];\n    }\n    result.push(s);\n  }\n  return result;\n}\n\n//# eval\nconst eval = (xs) => {\n  let dxs = derivative(xs);\n  let result = [];\n  for (let i = 0; i < dxs.length; i++) {\n    let s = 0;\n    for (let j = 0; j < xs.length; j++) {\n      s += xs[j] * dxs[i][j];\n    }\n    result.push(s);\n  }\n  return result;\n}\n\n//# eval\nconst eval = (xs) => {\n  let dxs = derivative(xs);\n  let result = [];\n  for (let i = 0; i < dxs.length; i++) {\n    let s = 0;\n    for (let j = 0; j < xs.length; j++) {\n      s += xs[j] * dxs[i][j];\n    }\n    result.push(s);\n  }\n  return result;\n}\n\n//# eval\nconst eval = (xs) => {\n  let dxs = derivative(xs);\n  let result = [];\n  for (let i = 0; i < dxs.length; i++) {\n    let s = 0;\n    for (let j = 0; j < xs.length; j++) {\n      s += xs[j] * dxs[i][j];\n    }\n    result.push(s);\n  }\n  return result;\n}\n\n//# eval\nconst eval = (xs) => {\n  let dxs = derivative(xs);\n  let result = [];\n  for (let i = 0; i < dxs.length; i++) {\n    let s = 0;\n    for (let j = 0; j < xs"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please publish a affair to efficiently calculate the n-th component of the fibfib phone number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please publish a affair to efficiently calculate the n-th component of the fibfib phone number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let a = 0;\n  let b = 1;\n  let fib = 0;\n  while (b < n) {\n    fib = a + b;\n    a = b;\n    b = fib;\n  }\n  return fib;\n}\n\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string exemplify \n   a news as input and return the number of vowels in the drawstring. \n   Vowels in this lawsuit are' a',' e',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but only when it is at the end of the given word. \n\n   exercise:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u')\n      count++;\n  }\n  if(s[s.length - 1] === 'y')\n    count++;\n  return count;\n}\n\nconsole.log(vowelsCount(\"abcde\"));\nconsole.log(vowelsCount(\"ACEDY\"));\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits veracious by shift\n   and return the resultant role as a bowed stringed instrument. \n   If shift > numeral of digits, return finger reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits veracious by shift\n   and return the resultant role as a bowed stringed instrument. \n   If shift > numeral of digits, return finger reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const len = x.length;\n  let res = x;\n  if (shift < len) {\n    for (let i = 0; i < shift; i++) {\n      res = res.substr(0, len - i) + res.substr(1, len - i);\n    }\n  } else {\n    for (let i = 0; i < shift; i++) {\n      res = res.substr(i, len - i) + res.substr(0, len - i);\n    }\n  }\n  return res;\n}\n\n/*\n  Circular shift the digits of the integer x, shift the digits veracious by shift\n   and return the resultant role as a bowed stringed instrument. \n   If shift > numeral of digits, return finger reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift2 = (x, shift) => {\n  const len = x.length;\n  let res = x;\n  if (shift < len) {\n    for (let i = 0; i < shift; i++) {\n      res = res.substr(0, len - i) + res.substr(1, len - i);\n    }\n  } else {\n    for (let i = 0; i < shift; i++) {\n      res = res.substr(i, len - i) + res.substr(0, len - i);\n    }\n  }\n  return res;\n}\n\nconst circularShift3 = (x, shift) => {\n  const len = x.length;\n  let res = x;\n  if (shift < len) {\n    for (let i = 0; i < shift; i++) {\n      res = res.substr(0, len - i) + res.substr(1, len - i);\n    }\n  } else {\n    for (let i = 0; i < shift; i++) {\n      res = res.substr(i, len - i) + res.substr(0, len - i);\n    }\n  }\n  return res;\n}\n\n//console.log(circularShift(12, 1));\n//console.log(circularShift2(12, 1));\n//console.log(circularShift3(12, 1));\n\n//console.log(circularShift(12, 2));\n//console.log(circularShift2(12, 2));\n//console.log(circularShift3(12, 2));\n\n//console.log(circularShift(12, 3));\n//console.log(circularShift2(12, 3));\n//console.log(circularShift3(12, 3));\n\n//console.log(circularShift(12, 4));\n//console.log(circularShift2(12, 4));\n//console.log(circularShift3(12, 4));\n\n//console.log(circularShift(12, 5));\n//console.log(circularShift2(12, 5));\n//console.log(circularShift3(12, 5));\n\n//console.log(circularShift(12, 6));\n//console.log(circularShift2(12, 6));\n//console.log(circularShift3(12, 6));\n\n//console.log(circularShift(12, 7));\n//console.log(circularShift2(12, 7));\n//console.log(circularShift3(12, 7));\n\n//console.log(circularShift(12, 8));\n//console.log(circularShift2(12, 8));\n//console.log(circularShift3(12, 8));\n\n//console.log(circularShift(12, 9));\n//console.log(circularShift2(12, 9));\n//console.log(circularShift3(12, 9));\n\n//console.log(circularShift(12, 10));\n//console.log(circularShift2(12, 10));\n//console.log(circularShift3(12, 10));\n\n//console.log(circularShift(12, 11));\n//console.log(circularShift2(12, 11));\n//console.log(circularShift3(12, 11));\n\n//console.log(circularShift(12, 12));\n//console.log(circularShift2(12, 12));\n//console.log(circularShift3(12, 12));\n\n//console.log(circularShift(12, 13));\n//console.log(circularShift2(12, 13));\n//console.log(circularShift3(12, 13));\n\n//console.log(circularShift(12, 14));\n//console.log(circularShift2(12, 14));\n//console.log(circularShift3(12, 14));\n\n//console.log(circularShift(12, 15));\n//console.log(circularShift2(12, 15));\n//console.log(circularShift3(12, 15));\n\n//console.log(circularShift(12, 16));\n//console.log(circularShift2(12, 16));\n//console.log(circularShift3(12, 16));\n\n//console.log(circularShift(12, 17));\n//console.log(circularShift2(12, 17));\n//console.log(circularShift3(12, 17));\n\n//console.log(circularShift(12, 18));\n//console.log(circularShift2(12, 18));\n//console.log(circularShift3(12, 18));\n\n//console.log(circularShift(12, 19));\n//console.log(circularShift2(12, 19));\n//console.log(circularShift3(12, 19));\n\n//console.log(circularShift(12, 20));\n//console.log(circularShift2(12, 20));\n//console.log(circularShift3(12, 20));\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   Write a function that takes a drawstring as stimulation and fall the kernel of the upper quality only' \n   american standard code for information interchange code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const [a, b, c] = s.split(\"\");\n  return (a === \"\"? 0 : a) + (b === \"\"? 0 : b) + (c === \"\"? 0 : c);\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a phone number of apple and oranges \n   that are distributed in a basket of fruit this basket contains \n   apples, orange, and mango yield. Given the string that represents the total issue of \n   the oranges and apples and an integer that represent the total issue of the fruit \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a string that represents a phone number of apple and oranges \n   that are distributed in a basket of fruit this basket contains \n   apples, orange, and mango yield. Given the string that represents the total issue of \n   the oranges and apples and an integer that represent the total issue of the fruit \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n    fruitDistribution = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch of a tree that has non - negative integer nodes \n   your task is to pluck one of the nodes and return it. \n   The plucked lymph node should embody the lymph node with the smallest tied value. \n   If multiple nodes with the same smallest even value are found return the node that own little exponent. \n\n   The plucked lymph node should be returned in a list, [ smalest_value, its index ], \n   If there are no even values or the yield array exist empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" Given an array representing a branch of a tree that has non - negative integer nodes \n   your task is to pluck one of the nodes and return it. \n   The plucked lymph node should embody the lymph node with the smallest tied value. \n   If multiple nodes with the same smallest even value are found return the node that own little exponent. \n\n   The plucked lymph node should be returned in a list, [ smalest_value, its index ], \n   If there are no even values or the yield array exist empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const result = []\n  let min = Number.MAX_SAFE_INTEGER\n  let index = 0\n  arr.forEach((node, i) => {\n    if (node % 2 === 0) {\n      if (node < min) {\n        min = node\n        index = i\n      }\n    }\n  })\n  result.push([min, index])\n  return result\n}\n\nexport default pluck\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non - empty list of incontrovertible integer. Return the greatest integer that is greater than \n   zero, and has a frequency great than or equal to the value of the integer itself. \n   The frequency of an integer is the phone number of time it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n    const l = lst.filter(x => x >= 0).sort((a, b) => a - b).map(x => x + 1);\n    const max = l.find(x => l.filter(y => y > x).length > 0);\n    return max === undefined? -1 : max;\n};\n\n// let test = search([1, 2, 2, 3, 3, 3, 4, 4, 4]);\n// console.log(test);\n\n// test = search([1, 2, 2, 3, 3, 3, 4, 4, 4]);\n// console.log(test);\n\n// test = search([5, 5, 4, 4, 4]);\n// console.log(test);\n\n// test = search([1, 2, 2, 3, 3, 3, 4, 4, 4]);\n// console.log(test);\n\n// test = search([1, 2, 2, 3, 3, 3, 4, 4, 4]);\n// console.log(test);\n\n// test = search([5, 5, 4, 4, 4]);\n// console.log(test);\n\n// test = search([5, 5, 4, 4, 4]);\n// console.log(test);\n\n// test = search([1, 2, 2, 3, 3, 3, 4, 4, 4]);\n// console.log(test);\n\n// test = search([5, 5, 4, 4, 4]);\n// console.log(test);\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   foreign sorting, is when you start with the minimum value, \n   then maximum of the remaining integers, then minimum and indeed on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   foreign sorting, is when you start with the minimum value, \n   then maximum of the remaining integers, then minimum and indeed on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let res = [];\n  for (let i = lst.length - 1; i >= 0; i--) {\n    res.push(lst[i]);\n    if (lst[i] === max) {\n      res.push(min);\n      max = lst[i];\n      min = lst[i];\n    }\n  }\n  return res;\n};\n\nconsole.log(strangeSortList([1, 2, 3, 4]));\nconsole.log(strangeSortList([5, 5, 5, 5]));\nconsole.log(strangeSortList([]));\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. refund the area of \n   the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n   differently return -1 \n   Three sides make a valid triangle when the union of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if(a <= 0 || b <= 0 || c <= 0) return -1;\n  if(a+b > c) return -1;\n  if(a+c > b) return -1;\n  if(b+c > a) return -1;\n  return Math.sqrt(a*b*c)/2;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the aim q will fly, and assumed differently. \n   The aim q will vanish if it's balanced (it is a palindromic list) and the union of its elements equal less than or equal the maximum possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true if the aim q will fly, and assumed differently. \n   The aim q will vanish if it's balanced (it is a palindromic list) and the union of its elements equal less than or equal the maximum possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  return (q.every(a => a < w) && q.every(a => a > 0))\n};\n\n// isPalindrome\nconst isPalindrome = (q) => {\n  return q.every(a => a === q.reverse().join(''))\n};\n\n// test\nconst willItFlyTest = [3, 2, 3, 4, 3, 2, 3, 5, 7, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8, 3, 5, 3, 3, 3, 9, 3, 1, 1, 9, 5, 7, 3, 4, 5, 6, 8,"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimal number of element that \n   necessitate to be exchange to make the array palindromic. A palindromic array is an array that \n   is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find the minimal number of element that \n   necessitate to be exchange to make the array palindromic. A palindromic array is an array that \n   is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  // TODO: write your code here\n  const len = arr.length;\n  const max = arr[0];\n  let min = arr[0];\n\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    } else if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  \n  let change = 0;\n  let i = 0;\n  while (change < max - min) {\n    change++;\n    arr.splice(i, 0, arr[i]);\n    i++;\n  }\n  return change;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of string and retort the list that has \n   total number of char in the all strings of the list less than the early list.\n\n   if the two lists hold the like number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of string and retort the list that has \n   total number of char in the all strings of the list less than the early list.\n\n   if the two lists hold the like number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let len1 = lst1.length, len2 = lst2.length, len = Math.min(len1, len2);\n  let i = 0;\n  while (i < len) {\n    if (lst1[i]!== lst2[i]) break;\n    i++;\n  }\n  if (i === len) return lst1;\n  else return lst2;\n};\n\n/*\n  Write a function that checks if the given string has all unique characters.\n\n  Example\n  allUnique('abc') ➞ true\n  allUnique('abcc') ➞ false\n  allUnique('aa') ➞ true\n  allUnique('ab') ➞ false\n*/\nconst allUnique = (str) => {\n  let charSet = {};\n  let unique = true;\n  let len = str.length;\n  for (let i = 0; i < len; i++) {\n    let ch = str[i];\n    if (!charSet[ch]) {\n      charSet[ch] = true;\n    } else {\n      unique = false;\n      break;\n    }\n  }\n  return unique;\n};\n\n/*\n  Write a function that returns the smallest of two numbers\n\n  Example\n  smallest(5, 10) ➞ 5\n  smallest(10, 5) ➞ 5\n  smallest(10, 20) ➞ 10\n  smallest(10, 20, 30) ➞ 10\n*/\nconst smallest = (a, b) => {\n  if (a < b) return a;\n  return b;\n};\n\n/*\n  Write a function that returns the largest of two numbers\n\n  Example\n  largest(5, 10) ➞ 10\n  largest(10, 5) ➞ 10\n  largest(10, 20) ➞ 20\n  largest(10, 20, 30) ➞ 30\n*/\nconst largest = (a, b) => {\n  if (a > b) return a;\n  return b;\n};\n\n/*\n  Write a function that sums all the digits of a number.\n\n  Example\n  sumDigits(5) ➞ 5\n  sumDigits(10) ➞ 10\n  sumDigits(20) ➞ 10\n  sumDigits(30) ➞ 10\n*/\nconst sumDigits = (num) => {\n  let res = 0;\n  for (let i = 0; i < num.length; i++) {\n    res += num[i];\n  }\n  return res;\n};\n\n/*\n  Write a function that returns the first word of the given sentence.\n\n  Example\n  firstWord('Hello World') ➞ 'Hello'\n  firstWord('Hello World, how are you?') ➞ 'Hello'\n  firstWord('Hello World, how are you?', ',') ➞ 'Hello'\n  firstWord('Hello World, how are you?', ', ') ➞ 'Hello'\n*/\nconst firstWord = (sentence, separator) => {\n  let word = sentence.split(separator);\n  return word[0];\n};\n\n/*\n  Write a function that returns the last word of the given sentence.\n\n  Example\n  lastWord('Hello World') ➞ 'World'\n  lastWord('Hello World, how are you?') ➞ 'World'\n  lastWord('Hello World, how are you?', ',') ➞ 'World'\n  lastWord('Hello World, how are you?', ', ') ➞ 'World'\n*/\nconst lastWord = (sentence, separator) => {\n  let word = sentence.split(separator);\n  return word[word.length - 1];\n};\n\n/*\n  Write a function that returns the last n words of the given sentence.\n\n  Example\n  lastNWords('Hello World', 3) ➞ ['Hello', 'World', '!']\n  lastNWords('Hello World, how are you?', 3) ➞ ['Hello', 'World', 'how are', 'you?']\n  lastNWords('Hello World, how are you?', 3, ', ') ➞ ['Hello', 'World', 'how are', 'you?']\n*/\nconst lastNWords = (sentence, n) => {\n  let words = sentence.split(/[\\s,]+/g);\n  return words.slice(words.length - n, words.length);\n};\n\n/*\n  Write a function that returns the number of words in the given sentence.\n\n  Example\n  numWords('Hello World') ➞ 2\n  numWords('Hello World, how are you?') ➞ 2\n  numWords('Hello World, how are you?', ', ') ➞ 2\n*/\nconst numWords = (sentence, separator) => {\n  let words = sentence.split(separator);\n  return words.length;\n};\n\n/*\n  Write a function that returns the number of characters in the given sentence.\n\n  Example\n  numChars('Hello World') ➞ 14\n  numChars('Hello World, how are you?') ➞ 16\n  numChars('Hello World, how are you?', ', ') ➞ 14\n*/\nconst numChars = (sentence, separator) => {\n  let words = sentence.split(separator);\n  return words.reduce((a, b) => a + b.length, 0);\n};\n\n/*\n  Write a function that returns the number of lines in the given sentence.\n\n  Example\n  numLines('Hello World') ➞ 1\n  num"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns dependable if the feed number is the generation of 3 prime numbers \n   and false otherwise. \n   know that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns dependable if the feed number is the generation of 3 prime numbers \n   and false otherwise. \n   know that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n    let a_i = 2, \n        i = 3;\n    while (i <= a) {\n        if (a_i % i === 0) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n};\n\n/*Write a function that returns dependable if the feed number is the generation of 3 prime numbers \n   and false otherwise. \n   know that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime_2 = (a) => {\n    let a_i = 2, \n        i = 3;\n    while (i <= a) {\n        if (a_i % i === 0) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n};\n\nconst isPrime = (a) => {\n    let i = 2;\n    while (i < a) {\n        if (a % i === 0) {\n            return false;\n        }\n        i += 1;\n    }\n    return true;\n};\n\n/*Write a function that returns dependable if the feed number is the generation of 3 prime numbers \n   and false otherwise. \n   know that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime_3 = (a) => {\n    let i = 2, \n        j = 3;\n    while (i < j) {\n        if (a % i === 0) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n};\n\nconst isMultiplyPrime_4 = (a) => {\n    let i = 2, \n        j = 3;\n    while (i < j) {\n        if (a % i === 0) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n};\n\nconst isMultiplyPrime_5 = (a) => {\n    let i = 2, \n        j = 3;\n    while (i < j) {\n        if (a % i === 0) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n};\n\nconst isMultiplyPrime_6 = (a) => {\n    let i = 2, \n        j = 3;\n    while (i < j) {\n        if (a % i === 0) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n};\n\nconst isMultiplyPrime_7 = (a) => {\n    let i = 2, \n        j = 3;\n    while (i < j) {\n        if (a % i === 0) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n};\n\nconst isMultiplyPrime_8 = (a) => {\n    let i = 2, \n        j = 3;\n    while (i < j) {\n        if (a % i === 0) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n};\n\nconst isMultiplyPrime_9 = (a) => {\n    let i = 2, \n        j = 3;\n    while (i < j) {\n        if (a % i === 0) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n};\n\nconst isMultiplyPrime_10 = (a) => {\n    let i = 2, \n        j = 3;\n    while (i < j) {\n        if (a % i === 0) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n};\n\nconst isMultiplyPrime_11 = (a) => {\n    let i = 2, \n        j = 3;\n    while (i < j) {\n        if (a % i === 0) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n};\n\nconst isMultiplyPrime_12 = (a) => {\n    let i = 2, \n        j = 3;\n    while (i < j) {\n        if (a % i === 0) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n};\n\nconst isMultiplyPrime_13 = (a) => {\n    let i = 2, \n        j = 3;\n    while (i < j) {\n        if (a % i === 0) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n};\n\nconst isMultiplyPrime_14 = (a) => {\n    let i = 2, \n        j = 3;\n    while (i < j) {\n        if (a % i === 0) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n};\n\nconst isMultiplyPrime_15 = (a) => {\n    let i = 2, \n        j = 3;\n    while (i < j) {\n        if (a % i === 0) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n};\n\nconst isMultiplyPrime_16 = (a) => {\n    let i = 2, \n        j = 3;\n    while (i < j) {\n        if (a % i === 0) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n};\n\nconst isMultiplyPrime_17 = (a) => {\n    let i = 2, \n        j = 3;\n    while (i < j) {\n        if (a % i === 0) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n};\n\nconst isMultiplyPrime"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function that returns dependable if a issue x is a simple \n   power of n and assumed in other case. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 1) {\n    return x === 1;\n  }\n\n  if (n === 2) {\n    return x === 2;\n  }\n\n  if (x % n === 0) {\n    return true;\n  }\n\n  return false;\n};\n\nconsole.log(isSimplePower(1, 4)); // true\nconsole.log(isSimplePower(2, 2)); // true\nconsole.log(isSimplePower(8, 2)); // true\nconsole.log(isSimplePower(3, 2)); // false\nconsole.log(isSimplePower(3, 1)); // false\nconsole.log(isSimplePower(5, 3)); // false\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and return on-key \n   if this ingeger is a block of some integer number. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integer a and return on-key \n   if this ingeger is a block of some integer number. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n    return (a & (a - 1)) === 0 && (a & (a + 1)) === 0;\n}\n\n/*\n  Write a function that takes an integer a and return on-key \n   if this ingeger is a block of some integer number. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube2 = (a) => {\n    return (a & (a - 1)) === 0 && (a & (a + 1)) === 0;\n}\n\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563,"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives \n   a hexadecimal number as a chain and count the number of hexadecimal \n   digits that are primes (flower number=== or a prime=== is a lifelike issue \n   greater than 1 that be not a product of two smaller lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime act are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you get to specify a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== five hundred (= decimal 13). \n   Note: you may wear the stimulation is always right or empty string=== \n   and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a function that receives \n   a hexadecimal number as a chain and count the number of hexadecimal \n   digits that are primes (flower number=== or a prime=== is a lifelike issue \n   greater than 1 that be not a product of two smaller lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime act are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you get to specify a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== five hundred (= decimal 13). \n   Note: you may wear the stimulation is always right or empty string=== \n   and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let sum = 0;\n  for (let i = 0; i < num.length; i += 1) {\n    sum += parseInt(num[i]);\n  }\n  let prime = 2;\n  let primeCount = 0;\n  let result = 0;\n  let hexDigits = [0, 0, 0, 0, 0, 0, 0, 0];\n  for (let i = 0; i < sum; i += 1) {\n    if (prime === sum) {\n      primeCount += 1;\n    } else if (primeCount!== 0) {\n      if (primeCount === 1) {\n        hexDigits[0] = parseInt(num[i]);\n        result += 1;\n      } else {\n        if (primeCount > 1) {\n          hexDigits[primeCount - 1] = parseInt(num[i]);\n          result += 1;\n        }\n        primeCount = 0;\n      }\n    } else {\n      prime = parseInt(num[i]);\n      primeCount = 1;\n    }\n  }\n  return result;\n}\n\nconsole.log(hexKey(\"AB\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task equal to commute it to \n   binary format. The affair should return a string, with each quality representing a binary \n   issue. Each quality in the string will be' 0' or' 1'. \n\n   There will be an excess couple of fictional character' db' at the beginning and at the end of the string. \n   The excess character are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal form and your task equal to commute it to \n   binary format. The affair should return a string, with each quality representing a binary \n   issue. Each quality in the string will be' 0' or' 1'. \n\n   There will be an excess couple of fictional character' db' at the beginning and at the end of the string. \n   The excess character are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = '';\n  let number = 0;\n  while (number < decimal) {\n    binary += (decimal % 2 === 0? '0' : '1');\n    decimal = decimal >> 1;\n  }\n  return binary.substring(0, binary.length - 1);\n};\n\n/* \n   Given two strings, return their longest common substring.\n\n   Examples:\n   commonSubstring(\"abracadabra\", \"babracadabra\") -> \"abrac\"\n   commonSubstring(\"abracadabra\", \"babracad\") -> \"abrac\"\n   commonSubstring(\"abracadabra\", \"babracad\") -> \"abrac\"\n   commonSubstring(\"abracadabra\", \"babracd\") -> \"abracd\"\n   commonSubstring(\"abracadabra\", \"babracd\") -> \"abracd\"\n   commonSubstring(\"abracadabra\", \"babracd\") -> \"abracd\"\n   commonSubstring(\"abracadabra\", \"babracd\") -> \"abracd\"\n*/\nconst commonSubstring = (string1, string2) => {\n  const substring = '';\n  let index = 0;\n  let start = 0;\n  let length = 0;\n  while (index < string1.length) {\n    start = index;\n    length = 0;\n    while (index < string1.length && index < string2.length) {\n      if (string1[index] === string2[index]) {\n        length += 1;\n      } else {\n        break;\n      }\n      index += 1;\n    }\n    substring += string1.substring(start, start + length);\n    index += 1;\n  }\n  return substring;\n};\n\n/* \n   Given two strings, return their distance in number of characters.\n\n   Examples:\n   distance(\"abracadabra\", \"babracadabra\") -> 4\n   distance(\"abracadabra\", \"babracad\") -> 4\n   distance(\"abracadabra\", \"babracad\") -> 4\n   distance(\"abracadabra\", \"babracd\") -> 5\n   distance(\"abracadabra\", \"babracd\") -> 5\n   distance(\"abracadabra\", \"babracd\") -> 5\n   distance(\"abracadabra\", \"babracd\") -> 5\n*/\nconst distance = (string1, string2) => {\n  const index = 0;\n  let start = 0;\n  let length = 0;\n  while (index < string1.length) {\n    start = index;\n    length = 0;\n    while (index < string1.length && index < string2.length) {\n      if (string1[index] === string2[index]) {\n        length += 1;\n      } else {\n        break;\n      }\n      index += 1;\n    }\n    if (length === 0) {\n      return -1;\n    }\n    index += 1;\n  }\n  return length;\n};\n\n/* \n   Given two strings, return their permutation.\n\n   Examples:\n   permutation(\"abracadabra\", \"babracadabra\") -> \"rabracadabra\"\n   permutation(\"abracadabra\", \"babracad\") -> \"abracadabra\"\n   permutation(\"abracadabra\", \"babracd\") -> \"abracdabra\"\n   permutation(\"abracadabra\", \"babracd\") -> \"abracdabra\"\n   permutation(\"abracadabra\", \"babracd\") -> \"abracdabra\"\n   permutation(\"abracadabra\", \"babracd\") -> \"abracdabra\"\n   permutation(\"abracadabra\", \"babracd\") -> \"abracdabra\"\n*/\nconst permutation = (string1, string2) => {\n  const stringPermutation = '';\n  let index = 0;\n  while (index < string1.length) {\n    stringPermutation += string1.charAt(index);\n    index += 1;\n  }\n  index = 0;\n  while (index < string2.length) {\n    stringPermutation += string2.charAt(index);\n    index += 1;\n  }\n  return stringPermutation;\n};\n\n/* \n   Given two strings, return their rotation.\n\n   Examples:\n   rotation(\"abracadabra\", \"babracadabra\") -> \"rabracadabra\"\n   rotation(\"abracadabra\", \"babracad\") -> \"abracadabra\"\n   rotation(\"abracadabra\", \"babracd\") -> \"rabracadabra\"\n   rotation(\"abracadabra\", \"babracd\") -> \"abracadabra\"\n   rotation(\"abracadabra\", \"babracd\") -> \"abracadabra\"\n   rotation(\"abracadabra\", \"babracd\") -> \"abracadabra\"\n   rotation(\"abracadabra\", \"babracd\") -> \"abracadabra\"\n*/\nconst rotation = (string1, string2) => {\n  const stringRotation = '';\n  let index = 0;\n  while (index < string1.length) {\n    stringRotation += string1.charAt(index);\n    index += 1;\n  }\n  index = 0;\n  while (index < string2.length) {\n    stringRotation += string2.charAt(index);\n    index += 1;\n  }\n  return stringRotation;\n};\n\n/* \n   Given two strings, return their mirror.\n\n   Examples:\n   mirror(\""}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task is to check if the drawstring is glad or not. \n   A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   Your task is to check if the drawstring is glad or not. \n   A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const map = {};\n  let current = 1;\n  let next = 0;\n  const res = [];\n  while (next < s.length) {\n    if (map[s[next]]) {\n      res.push(map[s[next]]);\n      current++;\n      next++;\n    } else {\n      next++;\n    }\n  }\n  return res.every((x) => x === current);\n};\n\n/*\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to pass the grades\n   to student. The teacher has been making her own algorithm for grading. \n   The alone problem is, she has lose the code she used for grading. \n   She has given you a list of grade point average for some students and you experience to write \n   a function that can output a list of letter grades use the following mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 speed of light \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher has to pass the grades\n   to student. The teacher has been making her own algorithm for grading. \n   The alone problem is, she has lose the code she used for grading. \n   She has given you a list of grade point average for some students and you experience to write \n   a function that can output a list of letter grades use the following mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 speed of light \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  if (!Array.isArray(grades)) {\n    throw new TypeError('grades is not an array');\n  }\n\n  let average = grades.reduce((sum, grade) => sum + grade) / grades.length;\n  let gradesLength = grades.length;\n\n  if (gradesLength === 1) {\n    return ['A+', grades[0].toFixed(0)];\n  }\n\n  if (average >= 3.7) {\n    return ['A+', grades[0].toFixed(0)];\n  }\n\n  if (average >= 3.3 && average < 3.7) {\n    return ['A', grades[0].toFixed(0)];\n  }\n\n  if (average >= 2.7 && average < 3.3) {\n    return ['B+', grades[0].toFixed(0)];\n  }\n\n  if (average >= 2.3 && average < 2.7) {\n    return ['B', grades[0].toFixed(0)];\n  }\n\n  if (average >= 1.7 && average < 2.3) {\n    return ['C-', grades[0].toFixed(0)];\n  }\n\n  if (average >= 1.3 && average < 1.7) {\n    return ['C', grades[0].toFixed(0)];\n  }\n\n  if (average >= 0.7 && average < 1.3) {\n    return ['D-', grades[0].toFixed(0)];\n  }\n\n  if (average >= 0.0 && average < 0.7) {\n    return ['D', grades[0].toFixed(0)];\n  }\n\n  return ['D+', grades[0].toFixed(0)];\n};\n\n/*\n   Given the list of letter grades, calculate the final grade. \n   It is the last week of the semester and the teacher has to pass the grades\n   to student. The teacher has been making her own algorithm for grading. \n   The alone problem is, she has lose the code she used for grading. \n   She has given you a list of letter grades and you experience to write \n   a function that can output a final grade.\n   The given list of letter grades is not complete.\n   The given list of letter grades may contain more grades than the number of students in the list.\n   Example:\n   numericalLetterGrade([4.0, 3, 1.7, 2, 3.5, 'A', 'B']) ==> 'A+'\n   */\nconst numericalFinalGrade = (grades) => {\n  if (!Array.isArray(grades)) {\n    throw new TypeError('grades is not an array');\n  }\n\n  let average = grades.reduce((sum, grade) => sum + grade) / grades.length;\n  let gradesLength = grades.length;\n\n  if (gradesLength === 1) {\n    return grades[0].toUpperCase();\n  }\n\n  if (average >= 3.7) {\n    return grades[0].toUpperCase();\n  }\n\n  if (average >= 3.3 && average < 3.7) {\n    return grades[0].toUpperCase();\n  }\n\n  if (average >= 2.7 && average < 3.3) {\n    return grades[0].toUpperCase();\n  }\n\n  if (average >= 2.3 && average < 2.7) {\n    return grades[0].toUpperCase();\n  }\n\n  if (average >= 1.7 && average < 2.3) {\n    return grades[0].toUpperCase();\n  }\n\n  if (average >= 1.3 && average < 1.7) {\n    return grades[0].toUpperCase();\n  }\n\n  if (average >= 0.7 && average < 1.3) {\n    return grades[0].toUpperCase();\n  }\n\n  if (average >= 0.0 && average < 0.7) {\n    return grades[0].toUpperCase();\n  }\n\n  return grades[0].toUpperCase();\n};\n\nexport default numericalLetterGrade;\nexport default numericalFinalGrade;\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a string and returns dependable if the string\n   distance is a prime numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = 0;\n  let check = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string.charCodeAt(i);\n  }\n\n  check = Math.floor(Math.sqrt(length));\n  let prime = true;\n\n  for (let i = 1; i <= check; i++) {\n    if (length % i === 0) {\n      prime = false;\n    }\n  }\n\n  return prime;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numeral of n-digit\n   convinced integers that begin or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numeral of n-digit\n   convinced integers that begin or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n   * /\n   * /\n  let nums = []\n  let ones = 0\n  for (let i = 1; i <= n; i++) {\n    nums.push(i)\n    if (i % 10 === 1) {\n      ones++\n    }\n  }\n  let result = 0\n  for (let i = 0; i < nums.length; i++) {\n    let current = nums[i]\n    let next = nums[i + 1]\n    let next1 = nums[i + 2]\n    let end = current + next + next1\n    if (end % 10 === 1) {\n      result++\n    }\n  }\n  return result\n * /\n */\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total union of its digit in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return the total union of its digit in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n    if (N === 0) {\n        return '0'\n    }\n    let str = ''\n    while (N > 0) {\n        str = str + (N % 2? '1' : '0')\n        N = Math.floor(N / 2)\n    }\n    return str\n}\n\nconsole.log(solve(147))\nconsole.log(solve(1000))\nconsole.log(solve(150))<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integer lst. add the even element that cost at curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let sum = 0;\n    let i = 0;\n    let j = 0;\n    while(i < lst.length) {\n        if(i % 2 === 0) {\n            sum += lst[i];\n        }\n        i += 1;\n    }\n    return sum;\n};\n\nmodule.exports = add;\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and return an coherent version of it. \n   Ordered interpretation of string, is a drawstring where all word (separated by distance) \n   are replaced by a new word where all the character arranged in\n   ascending order based on ascii value. \n   bill: You should keep the decree of word and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string and return an coherent version of it. \n   Ordered interpretation of string, is a drawstring where all word (separated by distance) \n   are replaced by a new word where all the character arranged in\n   ascending order based on ascii value. \n   bill: You should keep the decree of word and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let a = s.split(' ')\n  let b = []\n  let temp = ''\n  for(let i=0;i<a.length;i++){\n    let num = a[i].charCodeAt(0)\n    if(num>=65 && num<=90){\n      temp += a[i]\n    }else{\n      b.push(a[i])\n      temp +=''\n    }\n  }\n  return temp\n}\n\n//console.log(antiShuffle('Hi'))\n//console.log(antiShuffle('hello'))\n//console.log(antiShuffle('Hello World!!!'))<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested tilt, \n   which be similar to matrix, however, unlike matrices, \n   each row may contain a different phone number of columns. \n   hold lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (quarrel, columns), starting with 0. \n   Sort coordinate initially by row in ascend holy order. \n   Also, sort coordinates of the row by columns in descend order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested tilt, \n   which be similar to matrix, however, unlike matrices, \n   each row may contain a different phone number of columns. \n   hold lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (quarrel, columns), starting with 0. \n   Sort coordinate initially by row in ascend holy order. \n   Also, sort coordinates of the row by columns in descend order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  return lst.map(row => {\n    if (row.length < x) return []\n    return row.slice(0, x).map(column => {\n      return [column, row.indexOf(column)]\n    })\n  })\n}\n\nconst getRowSorted = (lst, x) => {\n  const l = getRow(lst, x)\n  const m = l.reduce((acc, [x, y]) => {\n    const l = acc[y] || []\n    l.push(x)\n    acc[y] = l\n    return acc\n  }, {})\n  return lst.map(row => {\n    return m[row.indexOf(row[x])] || []\n  })\n}\n\nconst getColumns = (lst, x) => {\n  const l = lst.map(row => {\n    return row.slice(x)\n  })\n  return lst.map(row => {\n    return l.reduce((acc, [x, y]) => {\n      acc.push(y)\n      return acc\n    }, [])\n  })\n}\n\nconst getRowSortedColumns = (lst, x) => {\n  const l = getRowSorted(lst, x)\n  return getColumns(l, 0)\n}\n\nconst getRowSortedColumnsSorted = (lst, x) => {\n  const l = getRowSortedColumns(lst, x)\n  return l.sort((a, b) => a[1] - b[1])\n}\n\nconst getRowSortedColumnsSortedSorted = (lst, x) => {\n  const l = getRowSortedColumnsSorted(lst, x)\n  return l.sort((a, b) => a[0] - b[0])\n}\n\nconst getRowSortedColumnsSortedSortedSorted = (lst, x) => {\n  const l = getRowSortedColumnsSortedSorted(lst, x)\n  return l.sort((a, b) => a[1] - b[1])\n}\n\nconst getRowSortedColumnsSortedSortedSortedSorted = (lst, x) => {\n  const l = getRowSortedColumnsSortedSorted(lst, x)\n  return l.sort((a, b) => a[0] - b[0])\n}\n\nconst getRowSortedColumnsSortedSortedSortedSortedSorted = (lst, x) => {\n  const l = getRowSortedColumnsSortedSortedSorted(lst, x)\n  return l.sort((a, b) => a[1] - b[1])\n}\n\nconst getRowSortedColumnsSortedSortedSortedSortedSorted = (lst, x) => {\n  const l = getRowSortedColumnsSortedSortedSorted(lst, x)\n  return l.sort((a, b) => a[0] - b[0])\n}\n\nconst getRowSortedColumnsSortedSortedSortedSortedSortedSorted = (lst, x) => {\n  const l = getRowSortedColumnsSortedSortedSortedSorted(lst, x)\n  return l.sort((a, b) => a[1] - b[1])\n}\n\nconst getRowSortedColumnsSortedSortedSortedSortedSortedSorted = (lst, x) => {\n  const l = getRowSortedColumnsSortedSortedSortedSorted(lst, x)\n  return l.sort((a, b) => a[0] - b[0])\n}\n\nconst getRowSortedColumnsSortedSortedSortedSortedSortedSorted = (lst, x) => {\n  const l = getRowSortedColumnsSortedSortedSortedSorted(lst, x)\n  return l.sort((a, b) => a[1] - b[1])\n}\n\nconst getRowSortedColumnsSortedSortedSortedSortedSortedSorted = (lst, x) => {\n  const l = getRowSortedColumnsSortedSortedSortedSorted(lst, x)\n  return l.sort((a, b) => a[0] - b[0])\n}\n\nconst getRowSortedColumnsSortedSortedSortedSortedSortedSorted = (lst, x) => {\n  const l = getRowSortedColumnsSortedSortedSortedSorted(lst, x)\n  return l.sort((a, b) => a[1] - b[1])\n}\n\nconst getRowSortedColumnsSortedSortedSortedSortedSortedSorted = (lst, x) => {\n  const l = getRowSortedColumnsSortedSortedSortedSorted(lst, x)\n  return l.sort((a, b) => a[0] - b[0])\n}\n\nconst getRowSortedColumnsSortedSortedSortedSortedSortedSorted = (lst, x) => {\n  const l = getRowSortedColumnsSortedSortedSortedSorted(lst, x)\n  return l.sort((a, b) =>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integer, return a copy of the give array after screen, \n   you will screen the given array in ascend order if the union (first exponent value, concluding index value) exist odd, \n   or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n   Note: \n   * don't change the yield array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non - negative integer, return a copy of the give array after screen, \n   you will screen the given array in ascend order if the union (first exponent value, concluding index value) exist odd, \n   or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n   Note: \n   * don't change the yield array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sorted = [];\n  for (let i = 0; i < array.length; i++) {\n    sorted.push(array[i]);\n  }\n  return sorted.sort(function(a, b) {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n};\n\nmodule.exports = sortArray;<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argumentation and \n   retort a string encrypted with the rudiment being rotated. \n   The alphabet should be rotated in a manner such that the letter \n   switch down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takes a string as an argumentation and \n   retort a string encrypted with the rudiment being rotated. \n   The alphabet should be rotated in a manner such that the letter \n   switch down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const len = s.length;\n  const l = len * 2;\n  let r = \"\";\n  for (let i = 0; i < l; i += 2) {\n    r += s[(i + 1) % len];\n  }\n  return r;\n};\n\n/*\n  Create a function decrypt that takes a string as an argumentation and \n   retort a string decrypted with the rudiment being rotated. \n   The alphabet should be rotated in a manner such that the letter \n   switch down by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  const len = s.length;\n  const l = len * 2;\n  let r = \"\";\n  for (let i = 0; i < l; i += 2) {\n    r += s[(i + 1) % len];\n  }\n  return r;\n};\n\n/*\n  Create a function encrypt_cipher that takes a string as an argumentation\n   and retort a string encrypted with the cipher.\n  For example:\n  encrypt_cipher('hi') returns 'ihti'\n  encrypt_cipher('asdfghjkl') returns 'tkhfhjkl'\n  encrypt_cipher('gf') returns 'fgt'\n  encrypt_cipher('et') returns 'tit'\n  */\nconst encrypt_cipher = (s) => {\n  const len = s.length;\n  let r = \"\";\n  for (let i = 0; i < len; i++) {\n    r += encrypt(s[i]);\n  }\n  return r;\n};\n\n/*\n  Create a function decrypt_cipher that takes a string as an argumentation\n   and retort a string decrypted with the cipher.\n  For example:\n  decrypt_cipher('ihti') returns 'hi'\n  decrypt_cipher('tkhfhjkl') returns 'asdfghjkl'\n  decrypt_cipher('fgt') returns 'gf'\n  decrypt_cipher('tit') returns 'et'\n  */\nconst decrypt_cipher = (s) => {\n  const len = s.length;\n  let r = \"\";\n  for (let i = 0; i < len; i++) {\n    r += decrypt(s[i]);\n  }\n  return r;\n};\n\n/*\n  Create a function encrypt_cipher that takes a string as an argumentation\n   and retort a string encrypted with the cipher.\n  For example:\n  encrypt_cipher('hi') returns 'ihti'\n  encrypt_cipher('asdfghjkl') returns 'tkhfhjkl'\n  encrypt_cipher('gf') returns 'fgt'\n  encrypt_cipher('et') returns 'tit'\n  */\nconst encrypt_cipher_all = (s) => {\n  const len = s.length;\n  let r = \"\";\n  for (let i = 0; i < len; i++) {\n    r += encrypt(s[i]);\n  }\n  return r;\n};\n\n/*\n  Create a function decrypt_cipher that takes a string as an argumentation\n   and retort a string decrypted with the cipher.\n  For example:\n  decrypt_cipher('ihti') returns 'hi'\n  decrypt_cipher('tkhfhjkl') returns 'asdfghjkl'\n  decrypt_cipher('fgt') returns 'gf'\n  decrypt_cipher('tit') returns 'et'\n  */\nconst decrypt_cipher_all = (s) => {\n  const len = s.length;\n  let r = \"\";\n  for (let i = 0; i < len; i++) {\n    r += decrypt(s[i]);\n  }\n  return r;\n};\n\n/*\n  Create a function encrypt_cipher that takes a string as an argumentation\n   and retort a string encrypted with the cipher.\n  For example:\n  encrypt_cipher('hi') returns 'ihti'\n  encrypt_cipher('asdfghjkl') returns 'tkhfhjkl'\n  encrypt_cipher('gf') returns 'fgt'\n  encrypt_cipher('et') returns 'tit'\n  */\nconst encrypt_cipher_all_rotated = (s) => {\n  const len = s.length;\n  let r = \"\";\n  for (let i = 0; i < len; i++) {\n    r += encrypt(s[i]);\n  }\n  return r;\n};\n\n/*\n  Create a function decrypt_cipher that takes a string as an argumentation\n   and retort a string decrypted with the cipher.\n  For example:\n  decrypt_cipher('ihti') returns 'hi'\n  decrypt_cipher('tkhfhjkl') returns 'asdfghjkl'\n  decrypt_cipher('fgt') returns 'gf'\n  decrypt_cipher('tit') returns 'et'\n  */\nconst decrypt_cipher_all_rotated = (s) => {\n  const len = s.length;\n  let r = \"\";\n  for (let i = 0; i < len; i++) {\n    r += decrypt(s[i]);\n  }\n  return r;\n};\n\nmodule.exports = {\n  encrypt,\n  decrypt,\n  encrypt_cipher,\n  decrypt_cipher,\n  encrypt_cipher_all,\n  decrypt_cipher_all,\n  encrypt_cipher_all_rotated,\n  decrypt_cipher_all_rotated\n"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write a function nextSmallest() that return the second smallest component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   Write a function nextSmallest() that return the second smallest component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   const index = Math.min(lst.length - 1, 0)\n   return lst[index + 1] || null\n }\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words, and your task equal to reckon the number \n   of boredoms. A boredom is a sentence that starts with the word \" I \". \n   Sentences are subtend by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n    let bores = 0\n    for(let i = 0; i < S.length; i++) {\n        let s = S.substring(i)\n        if(s.charAt(0) == 'I') {\n            bores++\n        }\n    }\n    return bores\n}\n\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather\"))<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes 3 numbers. \n   return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n   restitution fake in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if(x > y && x > z) {\n    return true\n  } else if(y > z && y > x) {\n    return true\n  } else if(z > x && z > y) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst anyInt_rest = (x, y, z) => {\n  if(x > y && x > z) {\n    return true\n  } else if(y > z && y > x) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst anyInt_rest_rest = (x, y, z) => {\n  if(x > y && x > z) {\n    return true\n  } else if(y > z && y > x) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst anyInt_rest_rest_rest = (x, y, z) => {\n  if(x > y && x > z) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst anyInt_rest_rest_rest_rest = (x, y, z) => {\n  if(x > y && x > z) {\n    return true\n  } else if(y > z && y > x) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst anyInt_rest_rest_rest_rest_rest = (x, y, z) => {\n  if(x > y && x > z) {\n    return true\n  } else if(y > z && y > x) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst anyInt_rest_rest_rest_rest_rest = (x, y, z) => {\n  if(x > y && x > z) {\n    return true\n  } else if(y > z && y > x) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst anyInt_rest_rest_rest_rest_rest = (x, y, z) => {\n  if(x > y && x > z) {\n    return true\n  } else if(y > z && y > x) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst anyInt_rest_rest_rest_rest_rest = (x, y, z) => {\n  if(x > y && x > z) {\n    return true\n  } else if(y > z && y > x) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst anyInt_rest_rest_rest_rest_rest = (x, y, z) => {\n  if(x > y && x > z) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst anyInt_rest_rest_rest_rest_rest = (x, y, z) => {\n  if(x > y && x > z) {\n    return true\n  } else if(y > z && y > x) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst anyInt_rest_rest_rest_rest_rest = (x, y, z) => {\n  if(x > y && x > z) {\n    return true\n  } else if(y > z && y > x) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst anyInt_rest_rest_rest_rest_rest = (x, y, z) => {\n  if(x > y && x > z) {\n    return true\n  } else if(y > z && y > x) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst anyInt_rest_rest_rest_rest_rest = (x, y, z) => {\n  if(x > y && x > z) {\n    return true\n  } else if(y > z && y > x) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst anyInt_rest_rest_rest_rest_rest = (x, y, z) => {\n  if(x > y && x > z) {\n    return true\n  } else if(y > z && y > x) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst anyInt_rest_rest_rest_rest_rest = (x, y, z) => {\n  if(x > y && x > z) {\n    return true\n  } else if(y > z && y > x) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst anyInt_rest_rest_rest_rest_rest = (x, y, z) => {\n  if(x > y && x > z) {\n    return true\n  } else if(y > z && y > x) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst anyInt_rest_rest_rest_rest_rest = (x, y, z) => {\n  if(x > y && x > z) {\n    return true\n  } else if(y > z && y > x) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst anyInt_rest_rest_rest_rest_rest = (x, y, z) => {\n  if(x > y && x > z) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst anyInt_rest_rest_rest_rest_rest = (x, y, z) => {\n  if(x > y && x > z) {\n    return true\n  } else if(y > z && y > x) {\n    return"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a message, and encodes in such a \n   means that it swap case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  return message.replace(/[a-z]/g, (c) => {\n    let char = c.toUpperCase();\n    let index = char.indexOf(\"2\");\n    char = char.substring(0, index) + char.substring(index + 1);\n    return char;\n  });\n};\n\n/*\n  Write a function that takes a message, and decodes in such a \n   means that it swaps case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> decode('test')\n  'tEST'\n  >>> decode('This is a message')\n  'This is a message'\n  */\nconst decode = (message) => {\n  return message.replace(/(.)(?=\\2)/g, (match, first) => {\n    return first + first.toLowerCase();\n  });\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n   means that it swaps case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  return message.replace(/(.)(?=\\2)/g, (match, first) => {\n    return first + first.toLowerCase();\n  });\n};\n\n/*\n  Write a function that takes a message, and decodes in such a \n   means that it swaps case of all letters, replace all vowels in \n   the message with the letter that appear 2 place ahead of that \n   vowel in the english alphabet. \n   Assume only letter. \n  \n   example:\n  >>> decode('test')\n  'tEST'\n  >>> decode('This is a message')\n  'This is a message'\n  */\nconst decode = (message) => {\n  return message.replace(/(.)(?=\\2)/g, (match, first) => {\n    return first + first.toLowerCase();\n  });\n};\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need to find the large choice value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers. \n   You need to find the large choice value and return the sum of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let digitSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    digitSum += lst[i].toString().length;\n  }\n  return digitSum;\n}\n\nconst lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3];\nconsole.log(skjkasdkd(lst));\n\n/*\nconst lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1];\nconsole.log(skjkasdkd(lst));\n\nconst lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3];\nconsole.log(skjkasdkd(lst));\n\nconst lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6];\nconsole.log(skjkasdkd(lst));\n\nconst lst = [0,81,12,3,1,21];\nconsole.log(skjkasdkd(lst));\n\nconst lst = [0,8,1,2,1,7];\nconsole.log(skjkasdkd(lst));\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys equal string in lower \n   case or all key are strings in upper lawsuit, else return false. \n   The routine should return false is the give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys equal string in lower \n   case or all key are strings in upper lawsuit, else return false. \n   The routine should return false is the give dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  return Object.keys(dict).every((key) => {\n    return key.toLowerCase() === key || key.toUpperCase() === key;\n  });\n};\n\n/*\n  Given a string, return true if all the characters in the string are in\n   the given array of allowed characters, else return false.\n  The array is a string of characters.\n  Examples:\n  checkAllowed({\"a\":\"A\"}) should return true.\n  checkAllowed({\"a\":\"A\", \"b\":\"B\"}) should return false.\n  checkAllowed({\"a\":\"A\", \"b\":\"B\", \"c\":\"C\"}) should return true.\n  checkAllowed({\"A\":\"A\", \"B\":\"B\", \"C\":\"C\"}) should return false.\n  checkAllowed({\"a\":\"A\", \"b\":\"B\", \"c\":\"C\", \"d\":\"D\"}) should return true.\n  checkAllowed({\"a\":\"A\", \"b\":\"B\", \"c\":\"C\", \"d\":\"D\", \"e\":\"E\"}) should return false.\n  checkAllowed({\"a\":\"A\", \"b\":\"B\", \"c\":\"C\", \"d\":\"D\", \"e\":\"E\", \"f\":\"F\"}) should return true.\n  checkAllowed({\"a\":\"A\", \"b\":\"B\", \"c\":\"C\", \"d\":\"D\", \"e\":\"E\", \"f\":\"F\", \"g\":\"G\"}) should return false.\n  checkAllowed({\"a\":\"A\", \"b\":\"B\", \"c\":\"C\", \"d\":\"D\", \"e\":\"E\", \"f\":\"F\", \"g\":\"G\", \"h\":\"H\"}) should return true.\n  */\nconst checkAllowed = (dict) => {\n  return Object.keys(dict).every((key) => {\n    return dict[key].every((char) => {\n      return char.match(/[a-zA-Z0-9]/)\n    });\n  });\n};\n\n/*\n  Given a string, return true if the string contains the given string \n   in the string, else return false.\n  The string is a string.\n  Examples:\n  checkContains({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkContains({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\"}) should return false.\n  checkContains({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"dynamite\"}) should return true.\n  checkContains({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"dynamite\", \"e\":\"elephant\"}) should return false.\n  */\nconst checkContains = (dict) => {\n  return Object.keys(dict).some((key) => {\n    return dict[key].indexOf(dict[key]) > -1;\n  });\n};\n\n/*\n  Given an array of strings, return true if all of the strings in the array\n   are in the given dictionary, else return false.\n  The dictionary is a string.\n  Examples:\n  checkAllStrings({\"a\":\"A\", \"b\":\"B\", \"c\":\"C\"}) should return true.\n  checkAllStrings({\"a\":\"A\", \"b\":\"B\", \"c\":\"C\", \"d\":\"D\"}) should return false.\n  checkAllStrings({\"a\":\"A\", \"b\":\"B\", \"c\":\"C\", \"d\":\"D\", \"e\":\"E\"}) should return true.\n  checkAllStrings({\"a\":\"A\", \"b\":\"B\", \"c\":\"C\", \"d\":\"D\", \"e\":\"E\", \"f\":\"F\"}) should return false.\n  checkAllStrings({\"a\":\"A\", \"b\":\"B\", \"c\":\"C\", \"d\":\"D\", \"e\":\"E\", \"f\":\"F\", \"g\":\"G\"}) should return true.\n  */\nconst checkAllStrings = (dict) => {\n  return Object.keys(dict).every((key) => {\n    return checkContains(dict[key]);\n  });\n};\n\n/*\n  Given a dictionary, return true if there is a word in the dictionary with \n   an odd number of letters, else return false.\n  The dictionary is a string.\n  Examples:\n  checkOdd({\"a\":\"A\", \"b\":\"B\", \"c\":\"C\"}) should return true.\n  checkOdd({\"a\":\"A\", \"b\":\"B\", \"c\":\"C\", \"d\":\"D\"}) should return false.\n  checkOdd({\"a\":\"A\", \"b\":\"B\", \"c\":\"C\", \"d\":\"D\", \"e\":\"E\"}) should return true.\n  checkOdd({\"a\":\"A\", \"b\":\"B\", \"c\":\"C\", \"d\":\"D\", \"e\":\"E\", \"f\":\"F\"}) should return false.\n  checkOdd({\"a\":\"A\", \"b\":\"B\", \"c\":\"C\", \"d\":\"D\", \"e\":\"E\", \"f\":\"F\", \"g\":\"G\"}) should return true.\n  */\nconst checkOdd = (dict) => {\n  return Object.keys(dict).every((key) => {\n    return checkAllStrings(dict[key]) && dict[key].length % 2!== 0;\n  });\n};\n\nmodule.exports = {\n  checkDictCase,\n  checkAllowed,\n  checkContains,\n  checkOdd\n};<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an non - negative integer and returns an array of the inaugural n\n   integers that be prime number and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n    let arr = []\n    let i = 2\n    while (i < n) {\n        if (isPrime(i)) {\n            arr.push(i)\n            i += 1\n        }\n        else {\n            i += 1\n        }\n    }\n    return arr\n}\n\n/*\nImplement a function that takes an non - negative integer and returns an array of the first k prime numbers.\nfor example:\n  countFrom(5) => [2,3]\n  countFrom(11) => [2,3,5,7]\n  countFrom(0) => []\n  countFrom(20) => [2,3,5,7,11,13,17,19]\n  countFrom(1) => []\n  countFrom(18) => [2,3,5,7,11,13,17]\n*/\nconst countFrom = (n) => {\n    let arr = []\n    let i = 2\n    while (i < n) {\n        if (isPrime(i)) {\n            arr.push(i)\n            i += 1\n        }\n        else {\n            i += 1\n        }\n    }\n    return arr.slice(0, n)\n}\n\n/*\nImplement a function that takes an non - negative integer and returns true if that number is a prime number and false otherwise.\nfor example:\n  isPrime(5) => true\n  isPrime(11) => true\n  isPrime(1) => false\n  isPrime(0) => false\n  isPrime(19) => true\n  isPrime(20) => false\n*/\nconst isPrime = (n) => {\n    if (n < 2) {\n        return false\n    }\n    let i = 2\n    while (i < n) {\n        if (n % i == 0) {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n/*\nImplement a function that takes an non - negative integer and returns the number of times it can be split into distinct primes.\nfor example:\n  numOfPrimeDivisors(19) => 4\n  numOfPrimeDivisors(20) => 5\n  numOfPrimeDivisors(1) => 1\n  numOfPrimeDivisors(8) => 3\n  numOfPrimeDivisors(10) => 3\n  numOfPrimeDivisors(20) => 2\n*/\nconst numOfPrimeDivisors = (n) => {\n    let arr = []\n    let i = 2\n    while (i < n) {\n        if (isPrime(i)) {\n            arr.push(i)\n            i += 1\n        }\n        else {\n            i += 1\n        }\n    }\n    return arr.length\n}\n\n/*\nImplement a function that takes an non - negative integer and returns the sum of the primes that can be created using the given number of distinct primes.\nfor example:\n  numPrimesInRange(2, 4) => 6\n  numPrimesInRange(3, 6) => 15\n  numPrimesInRange(4, 6) => 12\n  numPrimesInRange(2, 3) => 2\n  numPrimesInRange(3, 2) => 3\n  numPrimesInRange(2, 4) => 6\n*/\nconst numPrimesInRange = (n, k) => {\n    let sum = 0\n    let i = 2\n    while (i < n) {\n        if (isPrime(i)) {\n            sum += i\n            i += 1\n        }\n        else {\n            i += 1\n        }\n    }\n    return sum\n}\n\n/*\nImplement a function that takes a non - negative integer and returns the sum of the primes that can be created using the given number of distinct primes.\nfor example:\n  numPrimesInRange(2, 4) => 6\n  numPrimesInRange(3, 6) => 15\n  numPrimesInRange(4, 6) => 12\n  numPrimesInRange(2, 3) => 2\n  numPrimesInRange(3, 2) => 3\n  numPrimesInRange(2, 4) => 6\n*/\nconst sumPrimesInRange = (n, k) => {\n    let sum = 0\n    let i = 2\n    while (i < n) {\n        if (isPrime(i)) {\n            sum += i\n            i += 1\n        }\n        else {\n            i += 1\n        }\n    }\n    return sum\n}\n\n/*\nImplement a function that takes an non - negative integer and returns the sum of the distinct primes that can be created using the given number of distinct primes.\nfor example:\n  numPrimesInRange(2, 4) => 6\n  numPrimesInRange(3, 6) => 15\n  numPrimesInRange(4, 6) => 12\n  numPrimesInRange(2, 3) => 2\n  numPrimesInRange(3, 2) => 3\n  numPrimesInRange(2, 4) => 6\n*/\nconst sumDistinctPrimesInRange = (n, k) => {\n    let sum = 0\n    let i = 2\n    while (i < n) {\n        if (isPrime(i)) {\n            sum += i\n            i += 1\n        }\n        else {\n            i += 1\n        }\n    }\n    return sum\n}\n\n/*\nImplement a function that takes a non - negative integer and returns the sum of the distinct primes that can be created using the given number of distinct primes.\nfor example:\n  numPrimesInRange(2, 4) => 6\n  numPrimesInRange(3, 6) => 15\n  numPrimesInRange(4, 6) => 12\n  numPrimesInRange(2, 3) => 2\n  numPrimesInRange(3, 2) => 3\n  numPrimesInRange(2"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and return \n   the intersection of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes two integers and return \n   the intersection of their unit digits. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a < 0) {\n    a = -a\n  }\n  if (b < 0) {\n    b = -b\n  }\n\n  let result = 0\n\n  while (a > 0) {\n    result += b / a\n    a = a % 10\n    b = b % 10\n  }\n\n  return result\n}\n\n/*\n  Complete the function that takes two strings and return the result of the \n  string concatenation.\n  Use the \"+\" string operator.\n  For example, if your function receives the strings \"Java\" and \"Programmer\",\n  return the string \"JavaProgrammer\".\n  Hint: The first string will be a substring of the second string.\n  */\nconst concat = (a, b) => {\n  const firstString = a.slice(0, b.length)\n  const secondString = b.slice(0, a.length)\n\n  return firstString + secondString\n}\n\n/*\n  Complete the function that takes two strings and return the result of the \n  string concatenation.\n  Use the \"+\" string operator.\n  For example, if your function receives the strings \"Java\" and \"Programmer\",\n  return the string \"Java+Programmer\".\n  Hint: The first string will be a substring of the second string.\n  */\nconst add = (a, b) => {\n  return a + b\n}\n\n/*\n  Complete the function that takes two strings and return the result of the \n  string concatenation.\n  Use the \"+\" string operator.\n  For example, if your function receives the strings \"Java\" and \"Programmer\",\n  return the string \"Java+Programmer\".\n  Hint: The first string will be a substring of the second string.\n  */\nconst concatWithOperator = (a, b) => {\n  return a + '+' + b\n}\n\n/*\n  Complete the function that takes two strings and return the result of the \n  string concatenation.\n  Use the \"+\" string operator.\n  For example, if your function receives the strings \"Java\" and \"Programmer\",\n  return the string \"Java+Programmer\".\n  Hint: The first string will be a substring of the second string.\n  */\nconst addWithOperator = (a, b) => {\n  return a + '+' + b\n}\n\n/*\n  Complete the function that takes two strings and return the result of the \n  string concatenation.\n  Use the \"+\" string operator.\n  For example, if your function receives the strings \"Java\" and \"Programmer\",\n  return the string \"Java+Programmer\".\n  Hint: The first string will be a substring of the second string.\n  */\nconst concatWithPlus = (a, b) => {\n  return a + '+' + b\n}\n\n/*\n  Complete the function that takes two strings and return the result of the \n  string concatenation.\n  Use the \"+\" string operator.\n  For example, if your function receives the strings \"Java\" and \"Programmer\",\n  return the string \"Java+Programmer\".\n  Hint: The first string will be a substring of the second string.\n  */\nconst addWithPlus = (a, b) => {\n  return a + '+' + b\n}\n\n/*\n  Complete the function that takes two strings and return the result of the \n  string concatenation.\n  Use the \"+\" string operator.\n  For example, if your function receives the strings \"Java\" and \"Programmer\",\n  return the string \"Java+Programmer\".\n  Hint: The first string will be a substring of the second string.\n  */\nconst concatWithSpace = (a, b) => {\n  return a +'' + b\n}\n\n/*\n  Complete the function that takes two strings and return the result of the \n  string concatenation.\n  Use the \"+\" string operator.\n  For example, if your function receives the strings \"Java\" and \"Programmer\",\n  return the string \"Java+Programmer\".\n  Hint: The first string will be a substring of the second string.\n  */\nconst addWithSpace = (a, b) => {\n  return a +'' + b\n}\n\n/*\n  Complete the function that takes two strings and return the result of the \n  string concatenation.\n  Use the \"+\" string operator.\n  For example, if your function receives the strings \"Java\" and \"Programmer\",\n  return the string \"Java+Programmer\".\n  Hint: The first string will be a substring of the second string.\n  */\nconst concatWithSpacePlus = (a, b) => {\n  return a +'' + b\n}\n\n/*\n  Complete the function that takes two strings and return the result of the \n  string concatenation.\n  Use the \"+\" string operator.\n  For example, if your function receives the strings \"Java\" and \"Programmer\",\n  return the string \"Java+Programmer\".\n  Hint: The first string will be a substring of the second string.\n  */\nconst addWithSpacePlus = (a, b) => {\n  return a +'' + b\n}\n\n/*\n  Complete the function that takes two strings and return the result of the \n  string concatenation.\n  Use the \"+\" string operator.\n  For example, if your function receives the strings \"Java\" and \"Programmer\",\n  return the string \"Java+Programmer\".\n  Hint: The first string will be a substring of the second string.\n  */\nconst concatWithSpaceWithPlus = (a, b) => {\n  return a +'' + b\n}\n\n/*\n  Complete the function that takes two strings and return the result of the \n  string concatenation.\n  Use the \"+\" string operator.\n  For example, if your function receives the strings \"Java\" and \"Programmer\",\n  return the string \"Java+Programmer\".\n  Hint: The first string will be a substring of the second string.\n  */\nconst addWithSpaceWithPlus = (a, b) => {"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count the number of capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const upper = s.toUpperCase();\n  return upper.length % 2 === 0? upper.match(/[A-Z]/g).length : 0;\n};\n\n/*\n  Given a string s, count the number of capital vowels in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 0\n  countUpper('abcdefg') returns 1\n  countUpper('dBBE') returns 1\n  */\nconst countLower = (s) => {\n  const lower = s.toLowerCase();\n  return lower.length % 2 === 0? lower.match(/[a-z]/g).length : 0;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countLowerCase = (s) => {\n  const lower = s.toLowerCase();\n  return lower.length % 2 === 0? lower.match(/[a-z]/g).length : 0;\n};\n\nmodule.exports = {\n  countUpper,\n  countLower,\n  countLowerCase\n};\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) exemplify a issue \n   and returns the closest integer to it. If the number is equidistant \n   from two integers, polish it away from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value (string) exemplify a issue \n   and returns the closest integer to it. If the number is equidistant \n   from two integers, polish it away from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n    let floatValue = parseFloat(value);\n    if (floatValue % 1 === 0) {\n        return Math.round(floatValue);\n    } else {\n        let integerValue = floatValue | 0;\n        let diff = Math.abs(floatValue - integerValue);\n        let closestInteger = integerValue;\n        let secondClosestInteger = integerValue;\n        if (diff > 0.5) {\n            closestInteger = integerValue + 1;\n        } else if (diff > 0.1) {\n            secondClosestInteger = integerValue - 1;\n        }\n        return Math.abs(closestInteger - floatValue) < Math.abs(secondClosestInteger - floatValue)? closestInteger : secondClosestInteger;\n    }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to seduce a voltaic pile of n level of stone. \n   The first grade has n stone. \n   The number of stone in the next level is: \n       - the next odd issue if n is odd. \n       - the next even number if n is even. \n   Return the issue of stone in each level in a list, where component at index \n   i represents the number of stones in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  if (n === 0) return []\n  const piles = [n]\n  while (piles.length < n) {\n    const pile = piles[piles.length - 1]\n    const even = pile % 2 === 0\n    const nextPile = even? pile + 1 : pile\n    piles.push(nextPile)\n  }\n  return piles\n}\n\nexport { makeAPile }<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of words separated by comma or space. Your task is \n   to split the chain into words and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const tokens = s.split(/\\s+/g)\n  const words = tokens.filter((token) => token.length > 0)\n  return words\n}\n\n/*\n  You will be given a string of numbers separated by comma or space. Your task is \n   to split the chain into numbers and return an array of the number.\n  \n  For example:\n  numbersString(\"1,2,3,4,5\") == [1, 2, 3, 4, 5]\n  numbersString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  numbersString(\"1,2,3,4,5,6,7\") == [1, 2, 3, 4, 5, 6, 7]\n  numbersString(\"1,2,3,4,5,6,7,8\") == [1, 2, 3, 4, 5, 6, 7, 8]\n  */\nconst numbersString = (s) => {\n  const tokens = s.split(/\\s+/g)\n  const numbers = tokens.filter((token) => token.indexOf('0') === -1)\n  return numbers\n}\n\n/*\n  You will be given a string of numbers separated by comma or space. Your task is \n   to split the chain into numbers and return an array of the number.\n  \n  For example:\n  numbersString(\"1,2,3,4,5\") == [1, 2, 3, 4, 5]\n  numbersString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  numbersString(\"1,2,3,4,5,6,7\") == [1, 2, 3, 4, 5, 6, 7]\n  numbersString(\"1,2,3,4,5,6,7,8\") == [1, 2, 3, 4, 5, 6, 7, 8]\n  */\nconst numbersString2 = (s) => {\n  const tokens = s.split(/\\s+/g)\n  const numbers = tokens.filter((token) => token.indexOf('0')!== -1)\n  return numbers\n}\n\n/*\n  You will be given a string of numbers separated by comma or space. Your task is \n   to split the chain into numbers and return an array of the number.\n  \n  For example:\n  numbersString(\"1,2,3,4,5,6,7,8,9\") == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  numbersString(\"1,2,3,4,5,6,7,8,9,10\") == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  numbersString(\"1,2,3,4,5,6,7,8,9,10,11\") == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  numbersString(\"1,2,3,4,5,6,7,8,9,10,11,12\") == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  */\nconst numbersString3 = (s) => {\n  const tokens = s.split(/\\s+/g)\n  const numbers = tokens.filter((token) => token.indexOf('0')!== -1)\n  return numbers\n}\n\n/*\n  You will be given a string of numbers separated by comma or space. Your task is \n   to split the chain into numbers and return an array of the number.\n  \n  For example:\n  numbersString(\"1,2,3,4,5,6,7,8,9,10,11,12\") == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  numbersString(\"1,2,3,4,5,6,7,8,9,10,11,12,13\") == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n  numbersString(\"1,2,3,4,5,6,7,8,9,10,11,12,13,14\") == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  numbersString(\"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\") == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  numbersString(\"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16\") == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  */\nconst numbersString4 = (s) => {\n  const tokens = s.split(/\\s+/g)\n  const numbers = tokens.filter((token) => token.indexOf('0')!== -1)\n  return numbers\n}\n\n/*\n  You will be given a string of numbers separated by comma or space. Your task is \n   to split the chain into numbers and return an array of the number.\n  \n  For example:\n  numbersString(\"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16\") == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  numbersString(\"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17\") == [1"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and return the \n   big even integer numeral that is in the image [x, y] inclusive. If \n   there's no such issue, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive numbers x and y and return the \n   big even integer numeral that is in the image [x, y] inclusive. If \n   there's no such issue, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n\n  let num = -1;\n  if (x < y) {\n    num = chooseNum(y, x);\n  } else {\n    num = chooseNum(x, y);\n  }\n\n  if (num < 0) {\n    return -1;\n  }\n  return (num + 1) % 2 === 0? num : -1;\n};\n\nconsole.log(chooseNum(12, 15)); // 14\nconsole.log(chooseNum(13, 12)); // -1\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers n and m, and your task equal to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the nearest integer and convert that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = (n + m) / 2;\n  const binAvg = Math.round(avg);\n  const binMax = Math.pow(2, Math.floor(Math.log(binAvg) / Math.log(2)));\n  const remainder = binAvg - binMax;\n  const result = (binMax << 1) + remainder;\n  return result.toString(2);\n};\n\nmodule.exports = roundedAvg;\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all \n   element that haven't any tied finger. \n\n   Note: Returned list should be classify in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const map = {};\n  const list = [];\n  for (let i = 0; i < x; i++) {\n    const key = (Math.pow(10, i) - 1).toString();\n    if (!map[key]) {\n      map[key] = 1;\n      list.push(key);\n    }\n  }\n  return list.sort((a, b) => {\n    return a - b;\n  });\n};\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integer that are between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integer that are between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  return arr.reduce((pre, cur) => {\n    if (cur < 10) {\n      pre.push(`${cur}`)\n    }\n    return pre\n  }, []);\n}\n\nconst byName = (arr) => {\n  return arr.reduce((pre, cur) => {\n    if (cur < 10) {\n      pre.push(`${cur}`)\n    }\n    return pre\n  }, [])\n}\n\nconst byType = (arr) => {\n  return arr.reduce((pre, cur) => {\n    if (cur < 10) {\n      pre.push(`${cur}`)\n    }\n    return pre\n  }, [])\n}\n\nconst sort = (arr) => {\n  const names = byName(arr)\n  const types = byType(arr)\n  const length = byLength(arr)\n\n  return [names, types, length]\n}\n\nconst reverse = (arr) => {\n  const names = byName(arr)\n  const types = byType(arr)\n  const length = byLength(arr)\n\n  return [types, names, length]\n}\n\nmodule.exports = {\n  byLength,\n  byName,\n  byType,\n  sort,\n  reverse\n}\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter, \n   and return a list of size n, such that the value of the component at index i is the factorial of i if i is even \n   or the union of numbers from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takes n as a parameter, \n   and return a list of size n, such that the value of the component at index i is the factorial of i if i is even \n   or the union of numbers from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const list = [1];\n  let count = 1;\n  for (let i = 2; i <= n; i++) {\n    let product = 1;\n    for (let j = 1; j < i; j++) {\n      product *= j;\n    }\n    if (count % 2 === 0) {\n      list.push(product);\n    } else {\n      list.push(product, list[count - 1]);\n    }\n    count++;\n  }\n  return list;\n};\n\nconst test = (expected, actual) => {\n  if (expected === actual) {\n    console.log('PASSED:'+ expected +'==='+ actual);\n  } else {\n    console.log('FAILED:'+ expected +'==='+ actual);\n  }\n};\n\ntest(f(5), f(5));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the phone number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 1\n  let odd = 0\n  for (let i = 1; i < n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n    }\n  }\n  return [even, odd]\n}\n\nconst isPalindrome = (n) => {\n  let reverse = \"\"\n  while (n > 0) {\n    reverse = reverse + n % 10\n    n = Math.floor(n / 10)\n  }\n  return reverse === n\n}\n\nexport default evenOddPalindrome\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0. \n   If a number be negative, then its first sign digit will be minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which takes an array of integer and returns \n   the numeral of element which have a sum of finger > 0. \n   If a number be negative, then its first sign digit will be minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const len = arr.length;\n  const map = {};\n  const total = 0;\n  for (let i = 0; i < len; i++) {\n    const x = arr[i];\n    if (!map[x]) {\n      map[x] = true;\n      total += x;\n    }\n  }\n  return total;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordain. Your undertaking is to settle if \n   it is possible to catch an array classify in non - decreasing ordering by performing \n   the following mathematical process on the given array: \n       You are allowed to perform right shift key process any numeral of time. \n  \n   One right shift operation means shifting all component of the array by one \n   status in the right direction. The concluding component of the array will be move to \n   the starting side in the array i.e. 0th exponent. \n\n   If it exist possible to prevail the sorted array by perform the above mathematical process \n   then return dependable else return false. \n   If the grant array is empty then return on-key. \n\n   Note: The give list is guaranteed to have alone elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordain. Your undertaking is to settle if \n   it is possible to catch an array classify in non - decreasing ordering by performing \n   the following mathematical process on the given array: \n       You are allowed to perform right shift key process any numeral of time. \n  \n   One right shift operation means shifting all component of the array by one \n   status in the right direction. The concluding component of the array will be move to \n   the starting side in the array i.e. 0th exponent. \n\n   If it exist possible to prevail the sorted array by perform the above mathematical process \n   then return dependable else return false. \n   If the grant array is empty then return on-key. \n\n   Note: The give list is guaranteed to have alone elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < arr[i - 1]) {\n      let temp = arr[i];\n      arr[i] = arr[i - 1];\n      arr[i - 1] = temp;\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two tilt of number, \n   and determines whether it is possible to do an exchange of elements \n   between them to make lst1 a list of only even number. \n   There is no limit on the phone number of exchanged elements between lst1 and lst2.\n   If it is possible to exchange element between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function that takes two tilt of number, \n   and determines whether it is possible to do an exchange of elements \n   between them to make lst1 a list of only even number. \n   There is no limit on the phone number of exchanged elements between lst1 and lst2.\n   If it is possible to exchange element between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len = lst1.length;\n  let i, j;\n  for (i = 0; i < len - 1; i++) {\n    for (j = 0; j < len - 1; j++) {\n      if (lst1[i] === lst2[j] && lst1[i] % 2 === 0 && lst2[j] % 2 === 0) {\n        return \"YES\";\n      }\n    }\n  }\n  return \"NO\";\n}\n\n/*\n  Given a number n, calculate the number of digit 1 in n, \n  excluded. For example, if n = 1, the number of digit 1 is 0,\n  otherwise, return the number of digit 1 in n.\n  */\nconst countDigits = n => {\n  let digits = 0;\n  while (n > 0) {\n    digits += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return digits;\n}\n\n/*\n  Given two lists lst1 and lst2, return the intersection of two lists, \n  which should be sorted.\n  */\nconst listIntersection = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  const result = [];\n  let i, j, tmp;\n  for (i = 0; i < len1; i++) {\n    for (j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i]);\n        break;\n      }\n    }\n  }\n  return result;\n}\n\nconst _test = (lst1, lst2) => {\n  console.log(exchange(lst1, lst2));\n  console.log(exchange(lst2, lst1));\n  console.log(listIntersection(lst1, lst2));\n}\n\nexport default _test;\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space separated small letter letters, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const testString = test.toString();\n  let histogram = {};\n  for (let i = 0; i < testString.length; i++) {\n    if (histogram[testString[i]]) {\n      histogram[testString[i]]++;\n    } else {\n      histogram[testString[i]] = 1;\n    }\n  }\n  return histogram;\n};\n\nconst findMostCommon = (test) => {\n  let count = 1;\n  let mostCommon = test[0];\n  let testString = test.toString();\n  for (let i = 1; i < testString.length; i++) {\n    if (count > test[i]) {\n      count = test[i];\n      mostCommon = test[i];\n    }\n  }\n  return mostCommon;\n};\n\nconst findMostCommonString = (test) => {\n  let count = 1;\n  let mostCommon = test[0];\n  let testString = test.toString();\n  for (let i = 1; i < testString.length; i++) {\n    if (count > test[i]) {\n      count = test[i];\n      mostCommon = test[i];\n    }\n  }\n  return mostCommon;\n};\n\n/*\n  Given a string representing a space separated small letter letters, return the number of occurence of each letter in the string.\n  Example:\n  numbers('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  numbers('a b b a') == {'a': 2, 'b': 2}\n  numbers('a b c a b') == {'a': 2, 'b': 2}\n  numbers('') == {}\n  */\nconst numbers = (test) => {\n  let testString = test.toString();\n  let numbers = {};\n  for (let i = 0; i < testString.length; i++) {\n    if (numbers[testString[i]]) {\n      numbers[testString[i]]++;\n    } else {\n      numbers[testString[i]] = 1;\n    }\n  }\n  return numbers;\n};\n\n/*\n  Given a string representing a space separated small letter letters, return the number of occurence of each letter in the string.\n  Example:\n  numbers('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  numbers('a b b a') == {'a': 2, 'b': 2}\n  numbers('a b c a b') == {'a': 2, 'b': 2}\n  numbers('') == {}\n  */\nconst numbers2 = (test) => {\n  let testString = test.toString();\n  let numbers = {};\n  for (let i = 0; i < testString.length; i++) {\n    if (numbers[testString[i]]) {\n      numbers[testString[i]]++;\n    } else {\n      numbers[testString[i]] = 1;\n    }\n  }\n  return numbers;\n};\n\nconst findMostCommon2 = (test) => {\n  let count = 1;\n  let mostCommon = test[0];\n  let testString = test.toString();\n  for (let i = 1; i < testString.length; i++) {\n    if (count > test[i]) {\n      count = test[i];\n      mostCommon = test[i];\n    }\n  }\n  return mostCommon;\n};\n\nconst findMostCommonString2 = (test) => {\n  let count = 1;\n  let mostCommon = test[0];\n  let testString = test.toString();\n  for (let i = 1; i < testString.length; i++) {\n    if (count > test[i]) {\n      count = test[i];\n      mostCommon = test[i];\n    }\n  }\n  return mostCommon;\n};\n\nconst findMostCommon3 = (test) => {\n  let count = 1;\n  let mostCommon = test[0];\n  let testString = test.toString();\n  for (let i = 1; i < testString.length; i++) {\n    if (count > test[i]) {\n      count = test[i];\n      mostCommon = test[i];\n    }\n  }\n  return mostCommon;\n};\n\nconst findMostCommonString3 = (test) => {\n  let count = 1;\n  let mostCommon = test[0];\n  let testString = test.toString();\n  for (let i = 1; i < testString.length; i++) {\n    if (count > test[i]) {\n      count = test[i];\n      mostCommon = test[i];\n    }\n  }\n  return mostCommon;\n};\n\nconst findMostCommon4 = (test) => {\n  let count = 1;\n  let mostCommon = test[0];\n  let testString = test.toString();\n  for (let i = 1; i < testString.length; i++) {\n    if (count > test[i]) {\n      count = test[i];\n      mostCommon = test[i];\n    }\n  }\n  return mostCommon;\n};\n\nconst findMostCommonString4 = (test) => {\n  let count = 1;\n  let mostCommon = test[0];\n  let testString = test.toString();\n  for (let i = 1; i < testString.length; i++) {\n    if (count > test[i]) {\n      count = test[i];\n      mostCommon = test[i];\n    }\n  }\n  return mostCommon;\n};\n\nconst findMostCommon5 = (test) => {\n  let count = 1;"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings s and c, you have to erase all the character in s that are equal to any fictional character in c\n   then control if the result drawstring is palindrome. \n   A string is name palindrome if it reads the like backward as forth. \n   You should return a tuple containing the result string and on-key / assumed for the confirmation.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We are given two strings s and c, you have to erase all the character in s that are equal to any fictional character in c\n   then control if the result drawstring is palindrome. \n   A string is name palindrome if it reads the like backward as forth. \n   You should return a tuple containing the result string and on-key / assumed for the confirmation.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n    const result = [];\n    for (let i = 0; i < s.length; i++) {\n        const k = s[i];\n        const j = c.indexOf(k);\n        if (j >= 0) {\n            result.push(s.slice(i + 1));\n            i = j;\n        } else {\n            result.push(k);\n        }\n    }\n    return result;\n}\n\nconst reverse = (s) => {\n    let result = '';\n    for (let i = s.length - 1; i >= 0; i--) {\n        result += s[i];\n    }\n    return result;\n}\n\nconst palindrome = (s) => {\n    let i = 0;\n    while (i < s.length / 2) {\n        if (s[i]!== s[s.length - i - 1]) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\n\nconst main = () => {\n    let s = 'abcdedcba';\n    let c = 'ab';\n    let result = reverseDelete(s, c);\n    console.log(`The result is ${reverse(result)}`);\n    console.log(`The result is ${palindrome(result)}`);\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consist of alone digits, return a list.\n   Each element i of the end product should be \" the phone number of odd component in the \n   string i of the remark. \" where all the i's should be replaced by the number \n   of odd digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consist of alone digits, return a list.\n   Each element i of the end product should be \" the phone number of odd component in the \n   string i of the remark. \" where all the i's should be replaced by the number \n   of odd digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  return lst.reduce((res, x) => {\n    if (!x.startsWith(' ') &&!x.startsWith('.') &&!x.startsWith('-')) {\n      const odd = x.split('').reduce((prev, curr) => (curr === '0'? 1 : 0));\n      if (odd === 0) {\n        res.push(x);\n      }\n    }\n    return res;\n  }, []);\n};\n\n// console.log(oddCount(['1234567']));\nconsole.log(oddCount(['3',\"11111111\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find the minimal sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const result = [];\n  let sum = 0;\n  let sub = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sub += nums[i];\n    if (sum!== 0) {\n      if (sub > sum) {\n        sum = sub;\n        result = [i - 1, sum];\n      }\n    } else {\n      sum = sub;\n      result = [i, sum];\n    }\n  }\n  return result;\n};\n\nexport default minSubArraySum;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row exemplify a individual well, \n   and each 1 in a course represents a single unit of water. \n   Each well have a corresponding bucket that can be used to extract water from it, \n   and all bucket have the same capacity.\n   Your task is to use the buckets to evacuate the well. \n   Output the act of time you necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells. Each row exemplify a individual well, \n   and each 1 in a course represents a single unit of water. \n   Each well have a corresponding bucket that can be used to extract water from it, \n   and all bucket have the same capacity.\n   Your task is to use the buckets to evacuate the well. \n   Output the act of time you necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const height = grid.length;\n  const width = grid[0].length;\n\n  const[minx, miny, maxx, maxy] = [[0, 0], [height - 1, 0], [0, width - 1], [height - 1, width - 1]];\n\n  let fill = [0, 0];\n  for (let x = minx; x < maxx; x++) {\n    fill[1] = 0;\n    for (let y = miny; y < maxy; y++) {\n      fill[0] = grid[x][y]? (fill[0] + 1) : 0;\n      fill[1] += fill[0];\n    }\n  }\n\n  let filled = fill[0] >= capacity? fill[0] : capacity;\n\n  return filled;\n};\n\nconst solve = (grid, bucket_capacity) => {\n  const fill = maxFill(grid, bucket_capacity);\n  return fill;\n};\n\nconsole.log(solve([[1, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 1));\nconsole.log(solve([[1, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 2));\nconsole.log(solve([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0]], 5));\nconsole.log(solve([[0, 0, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 10));\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - negative integer according to \n   number of one in their binary theatrical performance in ascend orderliness. \n   For similar phone number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArray = []\n  for (let i = 0; i < arr.length; i++) {\n    let currentNumber = arr[i]\n    let index = 0\n    while (index < sortedArray.length) {\n      if (currentNumber < sortedArray[index]) {\n        sortedArray.splice(index, 0, currentNumber)\n      }\n      index++\n    }\n  }\n  return sortedArray\n}\n\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tax to follow through \n   a function that returns a list of all word from string s that hold exactly \n   n consonant, in ordering these words appear in the chain s.\n   If the string s is empty then the function should return an empty list.\n   bill: you may assume the stimulation bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you have been tax to follow through \n   a function that returns a list of all word from string s that hold exactly \n   n consonant, in ordering these words appear in the chain s.\n   If the string s is empty then the function should return an empty list.\n   bill: you may assume the stimulation bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const stringLength = s.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < stringLength) {\n    const word = s.substring(i, j)\n    if (isConsonant(word)) {\n      if (word.length === n) {\n        result.push(word)\n      }\n      j += 1\n    } else {\n      if (j > i) {\n        result.push(s.substring(i, j))\n      }\n      i = j + 1\n    }\n    j = i\n  }\n  if (j > i) {\n    result.push(s.substring(i, j))\n  }\n  return result\n}\n\nconst isConsonant = (s) => {\n  return s.length > 0 && s.length < 4\n}\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n   two consonant from the good slope of the word (case sensible). \n  \n   vowel in the beginning and termination doesn't count. Return empty string if you didn't \n   find any vowel met the above condition. \n\n   You may bear that the given chain contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n   two consonant from the good slope of the word (case sensible). \n  \n   vowel in the beginning and termination doesn't count. Return empty string if you didn't \n   find any vowel met the above condition. \n\n   You may bear that the given chain contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let wordLength = word.length\n  if (wordLength === 1) return word\n  let firstIndex = 0\n  let lastIndex = wordLength - 1\n  let closestVowel = \"\"\n  while (firstIndex <= lastIndex) {\n    let vowelIndex = findVowel(word, firstIndex, lastIndex)\n    if (vowelIndex > -1) {\n      let vowelLength = word.length - vowelIndex\n      let lastVowel = word[vowelIndex + 1]\n      let vowel = word.slice(vowelIndex, vowelIndex + vowelLength)\n      let vowelDiff = Math.abs(vowel.toUpperCase() - lastVowel.toUpperCase())\n      if (vowelDiff === 0) {\n        return word\n      }\n      if (vowelDiff < closestVowel.length) {\n        closestVowel = vowel\n      }\n    }\n    if (firstIndex === lastIndex) {\n      return \"\"\n    }\n    let nextVowelIndex = findVowel(word, firstIndex + 1, lastIndex)\n    if (nextVowelIndex > -1) {\n      let nextVowel = word.slice(nextVowelIndex, nextVowelIndex + 1)\n      let nextVowelDiff = Math.abs(nextVowel.toUpperCase() - vowel.toUpperCase())\n      if (nextVowelDiff < closestVowel.length) {\n        closestVowel = nextVowel\n      }\n    }\n    firstIndex++\n  }\n  return closestVowel\n}\n\nconst findVowel = (word, firstIndex, lastIndex) => {\n  let vowel = \"\"\n  for (let i = firstIndex; i <= lastIndex; i++) {\n    if (vowel.length > 0) {\n      break\n    }\n    if (isVowel(word[i])) {\n      vowel = word[i]\n      if (vowel.toUpperCase() === \"A\" || vowel.toUpperCase() === \"E\" || vowel.toUpperCase() === \"I\" || vowel.toUpperCase() === \"O\" || vowel.toUpperCase() === \"U\") {\n        return i\n      }\n    }\n  }\n  return -1\n}\n\nconst isVowel = (letter) => {\n  return (letter.toUpperCase() === \"A\" || letter.toUpperCase() === \"E\" || letter.toUpperCase() === \"I\" || letter.toUpperCase() === \"O\" || letter.toUpperCase() === \"U\" || letter.toUpperCase() === \"Y\")\n}\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of capable \n   digression' (' or close parentheses')' merely. \n   Your job is to control if it is potential to concatenate the two string in\n   some order, that the result string will be adept. \n   A string S is considered to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings, both strings consist of capable \n   digression' (' or close parentheses')' merely. \n   Your job is to control if it is potential to concatenate the two string in\n   some order, that the result string will be adept. \n   A string S is considered to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let isGood = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === ')') {\n      if (lst[i + 1]!== '(') {\n        isGood = false;\n        break;\n      }\n      i++;\n    } else if (lst[i] === '(') {\n      if (lst[i - 1]!== ')') {\n        isGood = false;\n        break;\n      }\n      i--;\n    }\n  }\n  return isGood;\n};\n\nconsole.log(matchParens(['()(', ')'])); // true\nconsole.log(matchParens(['())', ')'])); // false\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of duration k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of duration k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const sorted = arr.slice(0).sort();\n  let i = 0;\n  const max = sorted[i];\n  for (; i < k; i++) {\n    if (sorted[i] > max) {\n      max = sorted[i];\n    }\n  }\n  return [...sorted.slice(i), max];\n};\n\nexport { maximum };\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in even military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integer, return the sum of all of the curious element that constitute in even military position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  return lst.reduce((a, b) => a + Math.pow(b, 2), 0)\n}\n\nconsole.log(solution([5, 8, 7, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [...new Array(k)].map((_, i) => arr[i]);\n  const sum = result.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nconst addElements2 = (arr, k) => {\n  const result = [...new Array(k)].map((_, i) => arr[i]);\n  const sum = result.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\nexport { addElements, addElements2 };\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that take the curious number in collatz sequence. \n\n   The Collatz guess is a conjecture in mathematics that concern a succession defined \n   as follow: start with any positive integer n. Then each condition is obtained from the \n   previous term as stick to: if the former term be even, the adjacent term is one half of \n   the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list classify in increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that take the curious number in collatz sequence. \n\n   The Collatz guess is a conjecture in mathematics that concern a succession defined \n   as follow: start with any positive integer n. Then each condition is obtained from the \n   previous term as stick to: if the former term be even, the adjacent term is one half of \n   the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n   condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list classify in increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const odd = [];\n  const start = n;\n  const end = n;\n  let index = 1;\n  while (index < start) {\n    if (index % 2 === 0) {\n      end = end / 2;\n    } else {\n      end = end * 3 + 1;\n    }\n    odd.push(end);\n    index++;\n  }\n  return odd;\n}\n\n/*\n  Given a positive integer n, return a sorted list that take the curious number in fibonacci sequence. \n\n   The Fibonacci sequence is a natural sequence defined as follow: start with 1 and next term is sum of previous two. \n   The conjecture is that if n is odd, then the sequence will always be odd, because the odd number will take the same place of the even number. \n   For example:\n   getOddFibonacci(6) returns [1, 3, 5, 8].\n\n  For example:\n  getOddFibonacci(15) returns [1, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584].\n*/\nconst getOddFibonacci = (n) => {\n  const odd = [];\n  const start = 1;\n  const end = 1;\n  let index = 2;\n  while (index < n) {\n    if (index % 2 === 0) {\n      end = end + start;\n    } else {\n      end = end * 2 + start;\n    }\n    odd.push(end);\n    index++;\n  }\n  return odd;\n}\n\nmodule.exports = {\n  getOddCollatz,\n  getOddFibonacci\n}\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a grant date chain and \n   reappearance genuine if the date is valid differently false. \n   The date is valid if all of the following rule are satisfied: \n   1. The date string is not empty. \n   2. The issue of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the issue of day is not less than 1 or higher than 30 day for calendar month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. \n   3. The month should not be less than 1 or high than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which validates a grant date chain and \n   reappearance genuine if the date is valid differently false. \n   The date is valid if all of the following rule are satisfied: \n   1. The date string is not empty. \n   2. The issue of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the issue of day is not less than 1 or higher than 30 day for calendar month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. \n   3. The month should not be less than 1 or high than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateSplit = date.split('-');\n  if (dateSplit.length === 3) {\n    const year = dateSplit[2];\n    const month = dateSplit[1];\n    const day = dateSplit[0];\n    if (isInt(year) && isInt(month) && isInt(day)) {\n      const monthLength = monthLength(month);\n      const dayInMonth = dayInMonth(month, year);\n      if (monthLength === day && dayInMonth === day) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nconst monthLength = (month) => {\n  if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n    return 31;\n  } else if (month === 4 || month === 6 || month === 9 || month === 11) {\n    return 30;\n  } else {\n    return 0;\n  }\n};\n\nconst dayInMonth = (month, year) => {\n  const months = {\n    1: 31,\n    3: 31,\n    5: 31,\n    7: 31,\n    8: 31,\n    10: 31,\n    12: 31\n  };\n  return months[month] || 0;\n};\n\nexport default {\n  validDate\n};\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no commas exists you should return the phone number of lower - sheath letters with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = txt.split(\" \");\n  let ret = words.filter(w => w.length > 0);\n  return ret;\n}\n\nconst makeSentence = (txt) => {\n  let words = splitWords(txt);\n  let sentence = \"\";\n  if (words.length > 0) {\n    sentence = words[0];\n    words.shift();\n    while (words.length > 0) {\n      sentence += \", \" + words.shift();\n    }\n  }\n  return sentence;\n}\n\nconst makePronoun = (txt) => {\n  let words = splitWords(txt);\n  let pronoun = \"\";\n  if (words.length > 0) {\n    let firstWord = words.shift();\n    if (firstWord.length > 0) {\n      pronoun += firstWord;\n      if (firstWord.length === 1) {\n        pronoun += \" \";\n      }\n    }\n    while (words.length > 0) {\n      pronoun += \" \" + words.shift();\n    }\n  }\n  return pronoun;\n}\n\nconst makeAdjective = (txt) => {\n  let words = splitWords(txt);\n  let adjective = \"\";\n  if (words.length > 0) {\n    let firstWord = words.shift();\n    if (firstWord.length > 0) {\n      adjective += firstWord;\n      if (firstWord.length === 1) {\n        adjective += \" \";\n      }\n    }\n    while (words.length > 0) {\n      adjective += \" \" + words.shift();\n    }\n  }\n  return adjective;\n}\n\nconst makeAdverb = (txt) => {\n  let words = splitWords(txt);\n  let adverb = \"\";\n  if (words.length > 0) {\n    let firstWord = words.shift();\n    if (firstWord.length > 0) {\n      adverb += firstWord;\n      if (firstWord.length === 1) {\n        adverb += \" \";\n      }\n    }\n    while (words.length > 0) {\n      adverb += \" \" + words.shift();\n    }\n  }\n  return adverb;\n}\n\nconst makeNoun = (txt) => {\n  let words = splitWords(txt);\n  let noun = \"\";\n  if (words.length > 0) {\n    let firstWord = words.shift();\n    if (firstWord.length > 0) {\n      noun += firstWord;\n      if (firstWord.length === 1) {\n        noun += \" \";\n      }\n    }\n    while (words.length > 0) {\n      noun += \" \" + words.shift();\n    }\n  }\n  return noun;\n}\n\nconst makeVerb = (txt) => {\n  let words = splitWords(txt);\n  let verb = \"\";\n  if (words.length > 0) {\n    let firstWord = words.shift();\n    if (firstWord.length > 0) {\n      verb += firstWord;\n      if (firstWord.length === 1) {\n        verb += \" \";\n      }\n    }\n    while (words.length > 0) {\n      verb += \" \" + words.shift();\n    }\n  }\n  return verb;\n}\n\nconst makePrep = (txt) => {\n  let words = splitWords(txt);\n  let prep = \"\";\n  if (words.length > 0) {\n    let firstWord = words.shift();\n    if (firstWord.length > 0) {\n      prep += firstWord;\n      if (firstWord.length === 1) {\n        prep += \" \";\n      }\n    }\n    while (words.length > 0) {\n      prep += \" \" + words.shift();\n    }\n  }\n  return prep;\n}\n\nconst makePerson = (txt) => {\n  let words = splitWords(txt);\n  let person = \"\";\n  if (words.length > 0) {\n    let firstWord = words.shift();\n    if (firstWord.length > 0) {\n      person += firstWord;\n      if (firstWord.length === 1) {\n        person += \" \";\n      }\n    }\n    while (words.length > 0) {\n      person += \" \" + words.shift();\n    }\n  }\n  return person;\n}\n\nconst makeCombo = (txt) => {\n  let words = splitWords(txt);\n  let combo = \"\";\n  if (words.length > 0) {\n    let firstWord = words.shift();\n    if (firstWord.length > 0) {\n      combo += firstWord;\n      if (firstWord.length === 1) {\n        combo += \" \";\n      }\n    }\n    while (words.length > 0) {\n      combo += \" \" + words.shift();\n    }\n  }\n  return combo;\n}\n\nconst makePlural = (txt) => {\n  let words = splitWords(txt);\n  let plural = \"\";\n  if (words.length > 0) {\n    let firstWord = words.shift();\n    if (firstWord.length > 0) {\n      plural += firstWord;\n      if (firstWord.length === 1) {\n        plural += \" \";\n      }\n    }\n    while (words.length > 0) {\n      plural += \" \" + words.shift();\n    }\n  }\n  return plural;\n}\n\nconst makeConjunction = (txt) => {\n  let words = splitWords(txt);\n  let conj = \"\";\n  if (words.length > 0) {\n    let firstWord = words.shift();\n    if (firstWord.length > 0) {\n      conj += firstWord;\n      if (first"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted \n   in ascending decree. If list have more than 1 extra of the like \n   number, return false. simulate no minus numbers and alone integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are sorted \n   in ascending decree. If list have more than 1 extra of the like \n   number, return false. simulate no minus numbers and alone integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  // if lst is empty\n  if (lst.length === 0) return true\n  // if lst has one item\n  if (lst.length === 1) return true\n  // if lst has one item\n  if (lst.length === 2) return true\n  // if lst has more than 2 items\n  if (lst.length > 2) return false\n  let last = lst[lst.length - 1]\n  let prev = lst[lst.length - 2]\n  // if first item is smaller than last item\n  if (last < prev) return isSorted(lst.slice(1, lst.length - 1))\n  // if first item is larger than last item\n  if (last > prev) return false\n  // if first item is equal to last item\n  return isSorted(lst.slice(1, lst.length - 1))\n}\n\n// console.log(isSorted([1, 2, 3, 4, 5, 6, 7]))\n// console.log(isSorted([1, 2, 2, 3, 3, 4, 5, 6, 7]))\n// console.log(isSorted([1, 2, 2, 3, 3, 4, 5, 6, 7, 8]))\n// console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n// console.log(isSorted([1, 3, 2, 4, 5, 6, 7, 8, 9, 10]))\n// console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n// console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n// console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n// console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n// console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n// console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n// console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n// console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n// console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\n// console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n// console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]))\n// console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]))\n// console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]))\n// console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]))\n// console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]))\n// console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]))\n// console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]))\n// console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]))\n// console.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval equal a couple of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval equal a couple of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let [start1, end1] = interval1;\n  let [start2, end2] = interval2;\n\n  if (start1 > start2) {\n    [start1, start2] = [start2, start1];\n  }\n\n  if (end1 < end2) {\n    [end1, end2] = [end2, end1];\n  }\n\n  if (start1 >= end2) {\n    return \"NO\";\n  }\n\n  if (start2 >= end1) {\n    return \"NO\";\n  }\n\n  return \"YES\";\n};\n\nconsole.log(intersection((-1, 1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n   union of magnitude of integer multiply by product of all signs \n   of each number in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need to return\n   union of magnitude of integer multiply by product of all signs \n   of each number in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const sign = (n) => (n >= 0? 1 : -1);\n  const signMult = (arr) => arr.reduce((prev, n) => {\n    return (prev * sign(n));\n  }, 1);\n  const signProduct = (arr) => {\n    return arr.reduce((prev, n) => {\n      return signMult(n) * sign(prev);\n    }, 1);\n  };\n  const product = (arr) => {\n    return arr.reduce((prev, n) => {\n      return prev * n;\n    }, 1);\n  };\n  return (arr) => {\n    if (arr.length === 0) {\n      return null;\n    }\n    return signProduct(arr);\n  };\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of integer multiply by product of all signs of each number \n   in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> sumSigns([1, 2, 2, -4]) == 2\n  >>> sumSigns([0, 1]) == 1\n  >>> sumSigns([]) == 0\n  */\nconst sumSigns = (arr) => {\n  const sign = (n) => (n >= 0? 1 : -1);\n  const signMult = (arr) => arr.reduce((prev, n) => {\n    return (prev * sign(n));\n  }, 1);\n  const signProduct = (arr) => {\n    return arr.reduce((prev, n) => {\n      return signMult(n) * sign(prev);\n    }, 1);\n  };\n  const sum = (arr) => {\n    return arr.reduce((prev, n) => {\n      return prev + n;\n    }, 0);\n  };\n  return (arr) => {\n    if (arr.length === 0) {\n      return null;\n    }\n    return sumProduct(arr);\n  };\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   product of integer multiply by product of all signs of each number \n   in the array, act by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> productSigns([1, 2, 2, -4]) == 2\n  >>> productSigns([0, 1]) == 0\n  >>> productSigns([]) == 1\n  */\nconst productSigns = (arr) => {\n  const sign = (n) => (n >= 0? 1 : -1);\n  const signMult = (arr) => arr.reduce((prev, n) => {\n    return (prev * sign(n));\n  }, 1);\n  const signProduct = (arr) => {\n    return arr.reduce((prev, n) => {\n      return signMult(n) * sign(prev);\n    }, 1);\n  };\n  const product = (arr) => {\n    return arr.reduce((prev, n) => {\n      return prev * n;\n    }, 1);\n  };\n  return (arr) => {\n    if (arr.length === 0) {\n      return null;\n    }\n    return signProduct(arr);\n  };\n};\n\nmodule.exports = {\n  prodSigns,\n  sumSigns,\n  productSigns\n};\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cell of the grid incorporate a value. Every integer in the range [ 1, N * N ] \n   inclusive appears exactly once on the cell of the grid.\n\n   You induce to find the minimum path of length k in the grid. You can begin \n   from any cell, and in each step you can move to any of the neighbor cells, \n   in early password, you can go to cell which partake an edge with you current \n   cell. \n   Please note that a path of duration k means travel to exactly k cells (not \n   inevitably discrete). \n   You CANNOT go off the grid.\n   A way A (of distance k) is considered less than a way barn (of length k) if \n   after have the arrange tilt of the values on the cell that A and B plump \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early son, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we consume \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the solution is unique. \n   Return an ordered list of the values on the cells that the minimum way move through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cell of the grid incorporate a value. Every integer in the range [ 1, N * N ] \n   inclusive appears exactly once on the cell of the grid.\n\n   You induce to find the minimum path of length k in the grid. You can begin \n   from any cell, and in each step you can move to any of the neighbor cells, \n   in early password, you can go to cell which partake an edge with you current \n   cell. \n   Please note that a path of duration k means travel to exactly k cells (not \n   inevitably discrete). \n   You CANNOT go off the grid.\n   A way A (of distance k) is considered less than a way barn (of length k) if \n   after have the arrange tilt of the values on the cell that A and B plump \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early son, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we consume \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the solution is unique. \n   Return an ordered list of the values on the cells that the minimum way move through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const m = grid.length\n  const n = grid[0].length\n  let visited = new Array(m)\n  let visited_min = new Array(m)\n\n  for (let i = 0; i < m; i++) {\n    visited[i] = new Array(n)\n    for (let j = 0; j < n; j++) {\n      visited[i][j] = 0\n    }\n  }\n\n  let current_min = 0\n  let current_min_pos = 0\n  let dp = new Array(m)\n  dp[0] = 1\n\n  for (let i = 0; i < m; i++) {\n    dp[i] = dp[i - 1]\n\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] === undefined) continue\n      \n      let min_path = 0\n      let min_path_pos = 0\n      let min_path_val = 0\n      let min_path_val_pos = 0\n\n      let min_path_tmp = 0\n      let min_path_tmp_pos = 0\n\n      let tmp_pos = j\n\n      let tmp_val = grid[i][j]\n\n      let tmp_val_pos = i\n\n      while (dp[tmp_pos] > 0) {\n        min_path_tmp = dp[tmp_pos]\n        min_path_tmp_pos = tmp_pos\n\n        for (let t = tmp_pos; t < m; t++) {\n          tmp_val = grid[t][tmp_pos]\n\n          if (visited[t][tmp_pos] === undefined) {\n            tmp_val_pos = t\n            break\n          }\n\n          min_path_tmp += visited[t][tmp_pos]\n          min_path_val_pos = t\n          min_path_val = tmp_val\n          dp[t] = min_path_tmp\n          tmp_pos = t\n          visited[t][tmp_pos]++\n        }\n      }\n\n      if (min_path_tmp > min_path) {\n        current_min = min_path_val\n        current_min_pos = min_path_tmp_pos\n      }\n    }\n  }\n\n  let sol = []\n\n  for (let i = 0; i < m; i++) {\n    if (visited[i][current_min_pos] === undefined) continue\n\n    sol.push(current_min)\n    visited[i][current_min_pos] = undefined\n  }\n\n  return sol\n}\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))\nconsole.log(minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1))\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied profoundly by mathematicians in \n   the final couple hundred. However, what people don't know is Tribonacci sequence. \n   Tribonacci succession is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is curious.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied profoundly by mathematicians in \n   the final couple hundred. However, what people don't know is Tribonacci sequence. \n   Tribonacci succession is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is curious.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n === 0) return []\n  const [a, b, c] = [1, 1, 1]\n  let result = [1]\n  for (let i = 2; i <= n; i++) {\n    result.push(b)\n    result.push(c)\n    a = b\n    b = c\n    c = a + b + c\n  }\n  return result\n}\n\nconsole.log(tri(5))\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the leftover digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the leftover digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let digits = [];\n  while (n > 0) {\n    let remainder = n % 10;\n    digits.unshift(remainder);\n    n = n / 10;\n  }\n  return digits;\n}\n\nlet product = 0;\nfor (let i = 1; i < 10; i++) {\n  let digits = digits(i);\n  if (digits.length === 1 && digits[0] % 2 === 0) {\n    continue;\n  }\n  product += i;\n}\n\nconsole.log(product);\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ assumed \n   isNested('[]') ➞ assumed \n   isNested('[[][]]') ➞ dependable \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes a string as input which check entirely square brackets. \n   The affair should return true if and entirely if there is a valid posteriority of bracket \n   where at least one bracket in the posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ assumed \n   isNested('[]') ➞ assumed \n   isNested('[[][]]') ➞ dependable \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n  let {\n    length,\n    [:bracketIndex] = range(0, string.length - 1) => {\n      let brackets = [0, 0]\n      let isOpen = false\n      for (let index = 0; index < length; index++) {\n        if (string[index] === '[' && string[index + 1] === '[' &&!isOpen) {\n          brackets[0] = index\n          isOpen = true\n        } else if (string[index] === ']' && string[index + 1] === ']' && isOpen) {\n          brackets[1] = index\n          isOpen = false\n        }\n      }\n      if (brackets[0]!== brackets[1]) {\n        return true\n      }\n    }\n  } = isNested\n  if (length === 0) {\n    return false\n  }\n  return isNested(string.slice(bracketIndex + 1))\n}\n\n/*\n  Write a function that takes a string and returns a boolean, which determines if it is a palindrome. \n   isPalindrome('this is a palindrome') ➞ true \n   isPalindrome('this is a palindrome') ➞ true \n   isPalindrome('this is a palindrome') ➞ true \n   isPalindrome('this is a palindrome') ➞ false \n   * / \n const isPalindrome = (string) = > {\n  let isPalindrome = (string.slice(0, string.length - 1) === string.slice(1, string.length))\n  return isPalindrome\n}\n\n/*\n  Write a function that takes a string and returns a boolean, which determines if it is a palindrome. \n   isPalindrome('this is a palindrome') ➞ true \n   isPalindrome('this is a palindrome') ➞ true \n   isPalindrome('this is a palindrome') ➞ false \n   * / \n const isPalindrome = (string) = > {\n  let {\n    length,\n    [:start] = range(0, string.length - 1) => {\n      let index = start\n      while (string[index] === string[index + 1]) {\n        index++\n      }\n      return index\n    }\n  } = isPalindrome\n  return isPalindrome\n}\n\n/*\n  Write a function that takes a string and returns a boolean, which determines if it is a palindrome. \n   isPalindrome('this is a palindrome') ➞ true \n   isPalindrome('this is a palindrome') ➞ true \n   isPalindrome('this is a palindrome') ➞ true \n   * / \n const isPalindrome = (string) = > {\n  let {\n    length,\n    [:start] = range(0, string.length - 1) => {\n      let index = start\n      while (string[index] === string[index + 1]) {\n        index++\n      }\n      return index\n    }\n  } = isPalindrome\n  return isPalindrome\n}\n\n/*\n  Write a function that takes a string and returns a boolean, which determines if it is a palindrome. \n   isPalindrome('this is a palindrome') ➞ false \n   isPalindrome('this is a palindrome') ➞ true \n   * / \n const isPalindrome = (string) = > {\n  let {\n    length,\n    [:start] = range(0, string.length - 1) => {\n      let index = start\n      while (string[index] === string[index + 1]) {\n        index++\n      }\n      return index\n    }\n  } = isPalindrome\n  return isPalindrome\n}\n\n/*\n  Write a function that takes a string and returns a boolean, which determines if it is a palindrome. \n   isPalindrome('this is a palindrome') ➞ false \n   isPalindrome('this is a palindrome') ➞ false \n   * / \n const isPalindrome = (string) = > {\n  let {\n    length,\n    [:start] = range(0, string.length - 1) => {\n      let index = start\n      while (string[index] === string[index + 1]) {\n        index++\n      }\n      return index\n    }\n  } = isPalindrome\n  return isPalindrome\n}\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need to return the sum of squared numbers in the give list,\n   round each component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You need to return the sum of squared numbers in the give list,\n   round each component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n    let total = 0;\n    for (let i = 0; i < lst.length; i++) {\n        total += Math.pow(Math.floor(lst[i]), 2);\n    }\n    return total;\n};\n\nconsole.log(sumSquares([1, 2, 3]));\nconsole.log(sumSquares([1, 4, 9]));\nconsole.log(sumSquares([1, 3, 5, 7]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([-2.4, 1, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetical quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns true if the final quality \n   of a given string constitute an alphabetical quality and is not \n   a function of a word, and fake otherwise. \n   Note: \" word \" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let letter = txt.charAt(txt.length - 1)\n  return!(letter === \" \" ||\n    letter.match(/\\d/) ||\n    letter.match(/[^\\w]/));\n}\n\n/* Given a list of words, return a list of the words that can be found in \n   the dictionary. */\nconst listWordsInDictionary = (words) => {\n  let dictionary = new Set()\n  words.forEach((word) => {\n    dictionary.add(word)\n  })\n  return dictionary\n}\n\n/* Given two lists of words, return a list of all the words that can be \n   found in both the lists. */\nconst listWordsInBoth = (words1, words2) => {\n  let words = []\n  words1.forEach((word) => {\n    if (words2.indexOf(word)!== -1) {\n      words.push(word)\n    }\n  })\n  return words\n}\n\n/* Given a list of words, return a list of all the words that can be \n   found in the list. */\nconst listWordsInList = (words) => {\n  let words1 = listWordsInDictionary(words)\n  let words2 = listWordsInDictionary(words)\n  return listWordsInBoth(words1, words2)\n}\n\n/* Given a list of words, return a list of all the words that can be \n   found in the list and are not function of a word. */\nconst listWordsNotFunction = (words) => {\n  let words1 = listWordsInDictionary(words)\n  let words2 = listWordsInDictionary(words)\n  return words1.filter((word) => {\n    return!checkIfLastCharIsALetter(word)\n  })\n}\n\n/* Given a list of words, return a list of all the words that can be \n   found in the list and are not function of a word, and can be found \n   in a dictionary. */\nconst listWordsNotFunctionInDictionary = (words) => {\n  let words1 = listWordsInDictionary(words)\n  let words2 = listWordsNotFunction(words)\n  return words1.filter((word) => {\n    return words2.indexOf(word)!== -1\n  })\n}\n\n/* Given a list of words, return a list of all the words that can be \n   found in the list and are not function of a word, and can be found \n   in the dictionary. */\nconst listWordsNotFunctionInDictionaryWithWords = (words) => {\n  let words1 = listWordsInDictionary(words)\n  let words2 = listWordsNotFunctionInDictionary(words)\n  return words1.filter((word) => {\n    return words2.indexOf(word)!== -1\n  })\n}\n\n/* Given a list of words, return a list of all the words that can be \n   found in the list and are not function of a word, and can be found \n   in a dictionary. */\nconst listWordsNotFunctionNotInDictionary = (words) => {\n  let words1 = listWordsNotFunctionInDictionary(words)\n  let words2 = listWordsInDictionary(words)\n  return words1.filter((word) => {\n    return words2.indexOf(word) === -1\n  })\n}\n\n/* Given a list of words, return a list of all the words that can be \n   found in the list and are not function of a word, and can be found \n   in the dictionary. */\nconst listWordsNotFunctionNotInDictionaryWithWords = (words) => {\n  let words1 = listWordsNotFunctionNotInDictionary(words)\n  let words2 = listWordsInDictionary(words)\n  return words1.filter((word) => {\n    return words2.indexOf(word) === -1\n  })\n}\n\n/* Given a list of words, return a list of all the words that can be \n   found in the list and are not function of a word, and can be found \n   in the dictionary. */\nconst listWordsNotFunctionNotInDictionaryWithWordsAndWords = (words) => {\n  let words1 = listWordsNotFunctionNotInDictionaryWithWords(words)\n  let words2 = listWordsInDictionary(words)\n  return words1.filter((word) => {\n    return words2.indexOf(word)!== -1\n  })\n}\n\n/* Given a list of words, return a list of all the words that can be \n   found in the list and are not function of a word, and can be found \n   in the dictionary. */\nconst listWordsNotFunctionNotInDictionaryWithWordsAndWords2 = (words) => {\n  let words1 = listWordsNotFunctionNotInDictionaryWithWords(words)\n  let words2 = listWordsInDictionary(words)\n  return words1.filter((word) => {\n    return words2.indexOf(word)!== -1\n  })\n}\n\n/* Given a list of words, return a list of all the words that can be \n   found in the list and are not function of a word, and can be found \n   in the dictionary. */\nconst listWordsNotFunctionNotInDictionaryWithWordsAndWords2AndWords = (words) => {\n  let words1 = listWordsNotFunctionNotInDictionaryWithWordsAndWords(words)\n  let words2 = listWordsInDictionary(words)\n  return words1.filter((word) => {\n    return words2.indexOf(word)!== -1\n  })\n}\n\n/* Given a list of words, return a list of all the words that can be \n   found in the list and are not function of a word, and can be found \n   in the dictionary. */\nconst listWordsNotFunctionNotInDictionaryWithWordsAndWords2AndWords2 = (words) => {\n  let words"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the largest exponent of an element which \n   constitute not capital than or adequate to the element immediately preceding it. If \n   no such component exists then return -1. The give array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const arrLength = arr.length\n  let largestIndex = -1\n  let largestValue = 0\n  let largestValueIndex = 0\n  for(let i = 0; i < arrLength; i++){\n    if(largestValue < arr[i]){\n      largestValue = arr[i]\n      largestIndex = i\n      largestValueIndex = i\n    }\n  }\n  return largestValueIndex\n}\n\nexport default canArrange\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' equal \n   the big of damaging integer, and 'b' is the smallest \n   of positive integers in a list.\n   If there is no negative or plus integers, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tuple (a, b), where 'a' equal \n   the big of damaging integer, and 'b' is the smallest \n   of positive integers in a list.\n   If there is no negative or plus integers, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n    let largest = null;\n    let smallest = null;\n    \n    for(let i = 0; i < lst.length; i++) {\n        let num = lst[i];\n        if(num < 0) {\n            if(smallest!== null) {\n                return (smallest, largest);\n            }\n        }\n        else if(num > 0) {\n            if(largest!== null) {\n                return (smallest, largest);\n            }\n        }\n        \n        if(largest === null) {\n            largest = num;\n        }\n        else if(largest < num) {\n            largest = num;\n        }\n        \n        if(smallest === null) {\n            smallest = num;\n        }\n        else if(smallest > num) {\n            smallest = num;\n        }\n    }\n    \n    return (smallest, largest);\n};\n\nlargestSmallestIntegers([2, 4, 1, 3, 5, 7])\n// => (1, 7)\n// largestSmallestIntegers([])\n// => (null, null)\n// largestSmallestIntegers([0])\n// => (null, null)\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, float, or string representing \n   real issue, and returns the large variable in its give variable character. \n   Return null if the value are equal. \n   eminence: If a real number is represented as a string, the floating compass point might constitute. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes integers, float, or string representing \n   real issue, and returns the large variable in its give variable character. \n   Return null if the value are equal. \n   eminence: If a real number is represented as a string, the floating compass point might constitute. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n   let a = parseInt(a);\n   let b = parseInt(b);\n   if(isNaN(a) || isNaN(b)) {\n     return null;\n   }\n   if(a > b) {\n     return a;\n   } else {\n     return b;\n   }\n }\n */\n\nfunction compareOne(a, b) {\n  let a = parseInt(a);\n  let b = parseInt(b);\n  if(isNaN(a) || isNaN(b)) {\n    return null;\n  }\n  if(a > b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\n/*\n  Compare two strings. If both of them are not numbers, return null. If the first string is not a number, return null. If the second string is not a number, return null.\n  compareOne(\"1\", \" 2,3 \") ➞ \" 2,3 \" \n  compareOne(\"1\", \"2\") ➞ null \n  compareOne(\"1\", 1) ➞ null \n  * /\nfunction compareOne(a, b) = > {\n  let a = parseInt(a);\n  let b = parseInt(b);\n  if(isNaN(a) || isNaN(b)) {\n    return null;\n  }\n  if(a > b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n */\n\nfunction compareOne(a, b) {\n  let a = parseInt(a);\n  let b = parseInt(b);\n  if(isNaN(a) || isNaN(b)) {\n    return null;\n  }\n  if(a > b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\n/*\n  Compare two strings. If both of them are not numbers, return null. If the first string is not a number, return null. If the second string is not a number, return null.\n  compareOne(\"1\", \" 2,3 \") ➞ \" 2,3 \" \n  compareOne(\"1\", \"2\") ➞ null \n  compareOne(\"1\", 1) ➞ null \n  * /\nfunction compareOne(a, b) = > {\n  let a = parseInt(a);\n  let b = parseInt(b);\n  if(isNaN(a) || isNaN(b)) {\n    return null;\n  }\n  if(a > b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n */\n\nfunction compareOne(a, b) {\n  let a = parseInt(a);\n  let b = parseInt(b);\n  if(isNaN(a) || isNaN(b)) {\n    return null;\n  }\n  if(a > b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\n/*\n  Compare two strings. If both of them are not numbers, return null. If the first string is not a number, return null. If the second string is not a number, return null.\n  compareOne(\"1\", \" 2,3 \") ➞ \" 2,3 \" \n  compareOne(\"1\", \"2\") ➞ null \n  compareOne(\"1\", 1) ➞ null \n  * /\nfunction compareOne(a, b) = > {\n  let a = parseInt(a);\n  let b = parseInt(b);\n  if(isNaN(a) || isNaN(b)) {\n    return null;\n  }\n  if(a > b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n */\n\nfunction compareOne(a, b) {\n  let a = parseInt(a);\n  let b = parseInt(b);\n  if(isNaN(a) || isNaN(b)) {\n    return null;\n  }\n  if(a > b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\n/*\n  Compare two strings. If both of them are not numbers, return null. If the first string is not a number, return null. If the second string is not a number, return null.\n  compareOne(\"1\", \" 2,3 \") ➞ \" 2,3 \" \n  compareOne(\"1\", \"2\") ➞ null \n  compareOne(\"1\", 1) ➞ null \n  * /\nfunction compareOne(a, b) = > {\n  let a = parseInt(a);\n  let b = parseInt(b);\n  if(isNaN(a) || isNaN(b)) {\n    return null;\n  }\n  if(a > b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n */\n\nfunction compareOne(a, b) {\n  let a = parseInt(a);\n  let b = parseInt(b);\n  if(isNaN(a) || isNaN(b)) {\n    return null;\n  }\n  if(a > b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\n/*\n  Compare two strings. If both of them are not numbers, return null. If the first string is not a number, return null. If the second string is not a number, return null.\n  compareOne(\"1\", \" 2,3 \") ➞ \" 2,3 \" \n  compareOne(\"1\", \"2\") ➞ null \n  compareOne(\"1\", 1) ➞ null \n  "}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the union of precisely 4 cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number n can be written as the union of precisely 4 cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const number = n | 0\n  const sum = (number & 1) + (number & 2) + (number & 4) + (number & 8)\n  return sum === number\n}\n\n/*\n  Evaluate whether the given number n is an even or not\n  Example\n  isEven(2) == true\n  isEven(5) == false\n  isEven(10) == true\n  */\nconst isEven = (n) => {\n  return n % 2 === 0\n}\n\n/*\n  Evaluate whether the given number n is an odd or not\n  Example\n  isOdd(3) == false\n  isOdd(5) == true\n  isOdd(10) == false\n  */\nconst isOdd = (n) => {\n  return n % 2!== 0\n}\n\n/*\n  Evaluate whether the given number n is a prime number or not\n  Example\n  isPrime(2) == false\n  isPrime(3) == true\n  isPrime(5) == false\n  isPrime(10) == true\n  isPrime(12) == false\n  isPrime(15) == true\n  */\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false\n  }\n\n  if (n === 2) {\n    return true\n  }\n\n  let max = Math.sqrt(n)\n\n  for (let i = 3; i <= max; i += 2) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/*\n  Evaluate whether the given number n is a power of two or not\n  Example\n  isPowerOfTwo(1) == false\n  isPowerOfTwo(2) == true\n  isPowerOfTwo(4) == true\n  isPowerOfTwo(5) == false\n  isPowerOfTwo(10) == true\n  isPowerOfTwo(15) == true\n  isPowerOfTwo(20) == true\n  */\nconst isPowerOfTwo = (n) => {\n  return n > 0 && n === Math.floor(n)\n}\n\n/*\n  Evaluate whether the given number n is a power of 3 or not\n  Example\n  isPowerOfThree(1) == false\n  isPowerOfThree(2) == false\n  isPowerOfThree(3) == true\n  isPowerOfThree(4) == true\n  isPowerOfThree(5) == false\n  isPowerOfThree(10) == false\n  isPowerOfThree(15) == true\n  isPowerOfThree(20) == true\n  */\nconst isPowerOfThree = (n) => {\n  return n > 0 && n === Math.floor(n) && n % 1 === 0\n}\n\n/*\n  Evaluate whether the given number n is a power of 5 or not\n  Example\n  isPowerOfFive(1) == false\n  isPowerOfFive(2) == false\n  isPowerOfFive(3) == false\n  isPowerOfFive(4) == false\n  isPowerOfFive(5) == true\n  isPowerOfFive(6) == false\n  isPowerOfFive(10) == false\n  isPowerOfFive(15) == false\n  isPowerOfFive(20) == false\n  */\nconst isPowerOfFive = (n) => {\n  return n > 0 && n === Math.floor(n) && n % 1 === 0 && n % 2 === 0 && n % 3 === 0 && n % 5 === 0\n}\n\n/*\n  Evaluate whether the given number n is a power of 7 or not\n  Example\n  isPowerOfSeven(1) == false\n  isPowerOfSeven(2) == false\n  isPowerOfSeven(3) == false\n  isPowerOfSeven(4) == false\n  isPowerOfSeven(5) == false\n  isPowerOfSeven(6) == false\n  isPowerOfSeven(7) == true\n  isPowerOfSeven(8) == false\n  isPowerOfSeven(10) == false\n  isPowerOfSeven(15) == false\n  isPowerOfSeven(20) == false\n  */\nconst isPowerOfSeven = (n) => {\n  return n > 0 && n === Math.floor(n) && n % 1 === 0 && n % 2 === 0 && n % 3 === 0 && n % 5 === 0 && n % 7 === 0\n}\n\n/*\n  Evaluate whether the given number n is an even number or not\n  Example\n  isEven(3) == true\n  isEven(6) == false\n  isEven(9) == true\n  isEven(12) == false\n  isEven(15) == true\n  isEven(20) == false\n  */\nconst isEvenNumber = (n) => {\n  return n % 2 === 0\n}\n\n/*\n  Evaluate whether the given number n is an odd number or not\n  Example\n  isOdd(3) == false\n  isOdd(6) == true\n  isOdd(9) == false\n  isOdd(12) == true\n  isOdd(15) == false\n  isOdd(20) == true\n  */\nconst isOddNumber = (n) => {\n  return n % 2!== 0\n}\n\n/*\n  Evaluate whether the given number n is a number that is equal to the sum of 4 cocksure even numbers or not\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  isEqualToSumEven(10) == true\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(15) == true\n  isEqualToSumEven(20) == true\n  */\nconst isEqualToSum = (n) => {\n  return isEvenNumber(n) && isOddNumber(n) && isEvenNumber(n + n) && isOddNumber(n + n + n)\n}\n\n/*\n  Evaluate whether the given number n is a number that is an odd number or not\n  Example\n  isOdd"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const nFactorial = 1\n  return nFactorial * (nFactorial - 1) * (nFactorial - 2) *... * 1;\n}\n\n/*\n  The function will receive an integer as input and should return the sum of\n  the factorial of the numbers less than n.\n  */\nconst sumOfFactorial = (n) => {\n  const sum = 0\n  while (n > 1) {\n    sum += nFactorial\n    n--\n  }\n  return sum;\n}\n\n/*\n  The function will receive an integer as input and should return the sum of\n  the numbers less than n which are also prime.\n  */\nconst sumOfPrimeFactorial = (n) => {\n  const sum = 0\n  while (n > 1) {\n    const prime = isPrime(n)\n    if (prime) {\n      sum += nFactorial\n    }\n    n--\n  }\n  return sum;\n}\n\n/*\n  The function will receive an integer as input and should return the sum of\n  the numbers less than n which are also divisible by 3 and 5.\n  */\nconst sumOfTripleFactorial = (n) => {\n  const sum = 0\n  while (n > 1) {\n    const multiple = isMultiple(n, 3)\n    const multiple2 = isMultiple(n, 5)\n    if (multiple && multiple2) {\n      sum += nFactorial\n    }\n    n--\n  }\n  return sum;\n}\n\nconst isPrime = (n) => {\n  const d = 2\n  while (d <= n / 2) {\n    if (n % d === 0) {\n      return false\n    }\n    d++\n  }\n  return true\n}\n\nconst isMultiple = (n, multiple) => {\n  return n % multiple === 0\n}\n\n/*\n  The function will receive an integer as input and should return the sum of the\n  numbers less than n which are also divisible by 3 and 5.\n  */\nconst sumOfTripleFactorial = (n) => {\n  const sum = 0\n  while (n > 1) {\n    const multiple = isMultiple(n, 3)\n    const multiple2 = isMultiple(n, 5)\n    if (multiple && multiple2) {\n      sum += nFactorial\n    }\n    n--\n  }\n  return sum;\n}\n\n/*\n  The function will receive an integer as input and should return the sum of the\n  numbers less than n which are also divisible by 3 and 5.\n  */\nconst sumOfTripleFactorial = (n) => {\n  const sum = 0\n  while (n > 1) {\n    const multiple = isMultiple(n, 3)\n    const multiple2 = isMultiple(n, 5)\n    if (multiple && multiple2) {\n      sum += nFactorial\n    }\n    n--\n  }\n  return sum;\n}\n\n/*\n  The function will receive an integer as input and should return the sum of the\n  numbers less than n which are also divisible by 3 and 5.\n  */\nconst sumOfTripleFactorial = (n) => {\n  const sum = 0\n  while (n > 1) {\n    const multiple = isMultiple(n, 3)\n    const multiple2 = isMultiple(n, 5)\n    if (multiple && multiple2) {\n      sum += nFactorial\n    }\n    n--\n  }\n  return sum;\n}\n\n/*\n  The function will receive an integer as input and should return the sum of the\n  numbers less than n which are also divisible by 3 and 5.\n  */\nconst sumOfTripleFactorial = (n) => {\n  const sum = 0\n  while (n > 1) {\n    const multiple = isMultiple(n, 3)\n    const multiple2 = isMultiple(n, 5)\n    if (multiple && multiple2) {\n      sum += nFactorial\n    }\n    n--\n  }\n  return sum;\n}\n\n/*\n  The function will receive an integer as input and should return the sum of the\n  numbers less than n which are also divisible by 3 and 5.\n  */\nconst sumOfTripleFactorial = (n) => {\n  const sum = 0\n  while (n > 1) {\n    const multiple = isMultiple(n, 3)\n    const multiple2 = isMultiple(n, 5)\n    if (multiple && multiple2) {\n      sum += nFactorial\n    }\n    n--\n  }\n  return sum;\n}\n\nconst isPrime = (n) => {\n  const d = 2\n  while (d <= n / 2) {\n    if (n % d === 0) {\n      return false\n    }\n    d++\n  }\n  return true\n}\n\nconst isMultiple = (n, multiple) => {\n  return n % multiple === 0\n}\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 consecutive spaces, \n   then replace all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  newText = newText.replace(/([A-Z])/g, \"$1_\");\n  newText = newText.replace(/([a-z])/g, \"$1_\");\n  newText = newText.replace(/\\s{2,}/g, \"-\");\n  return newText;\n}\n\nconst upperCaseLetters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nconst lowerCaseLetters = \"abcdefghijklmnopqrstuvwxyz\";\nconst number = \"0123456789\";\n\nconst generateRandomString = (size) => {\n  let str = \"\";\n  for (let i = 0; i < size; i++) {\n    let letter = Math.floor(Math.random() * (upperCaseLetters.length + lowerCaseLetters.length + number.length));\n    str += letter;\n  }\n  return str;\n}\n\nconst generateRandomString2 = (size) => {\n  let str = \"\";\n  for (let i = 0; i < size; i++) {\n    let letter = Math.floor(Math.random() * (upperCaseLetters.length + lowerCaseLetters.length + number.length));\n    str += letter;\n  }\n  return str;\n}\n\nconst generateRandomString3 = (size) => {\n  let str = \"\";\n  for (let i = 0; i < size; i++) {\n    let letter = Math.floor(Math.random() * (upperCaseLetters.length + lowerCaseLetters.length + number.length));\n    str += letter;\n  }\n  return str;\n}\n\nconst generateRandomString4 = (size) => {\n  let str = \"\";\n  for (let i = 0; i < size; i++) {\n    let letter = Math.floor(Math.random() * (upperCaseLetters.length + lowerCaseLetters.length + number.length));\n    str += letter;\n  }\n  return str;\n}\n\nconst generateRandomString5 = (size) => {\n  let str = \"\";\n  for (let i = 0; i < size; i++) {\n    let letter = Math.floor(Math.random() * (upperCaseLetters.length + lowerCaseLetters.length + number.length));\n    str += letter;\n  }\n  return str;\n}\n\nconst generateRandomString6 = (size) => {\n  let str = \"\";\n  for (let i = 0; i < size; i++) {\n    let letter = Math.floor(Math.random() * (upperCaseLetters.length + lowerCaseLetters.length + number.length));\n    str += letter;\n  }\n  return str;\n}\n\nconst generateRandomString7 = (size) => {\n  let str = \"\";\n  for (let i = 0; i < size; i++) {\n    let letter = Math.floor(Math.random() * (upperCaseLetters.length + lowerCaseLetters.length + number.length));\n    str += letter;\n  }\n  return str;\n}\n\nconst generateRandomString8 = (size) => {\n  let str = \"\";\n  for (let i = 0; i < size; i++) {\n    let letter = Math.floor(Math.random() * (upperCaseLetters.length + lowerCaseLetters.length + number.length));\n    str += letter;\n  }\n  return str;\n}\n\nconst generateRandomString9 = (size) => {\n  let str = \"\";\n  for (let i = 0; i < size; i++) {\n    let letter = Math.floor(Math.random() * (upperCaseLetters.length + lowerCaseLetters.length + number.length));\n    str += letter;\n  }\n  return str;\n}\n\nconst generateRandomString10 = (size) => {\n  let str = \"\";\n  for (let i = 0; i < size; i++) {\n    let letter = Math.floor(Math.random() * (upperCaseLetters.length + lowerCaseLetters.length + number.length));\n    str += letter;\n  }\n  return str;\n}\n\nconst generateRandomString11 = (size) => {\n  let str = \"\";\n  for (let i = 0; i < size; i++) {\n    let letter = Math.floor(Math.random() * (upperCaseLetters.length + lowerCaseLetters.length + number.length));\n    str += letter;\n  }\n  return str;\n}\n\nconst generateRandomString12 = (size) => {\n  let str = \"\";\n  for (let i = 0; i < size; i++) {\n    let letter = Math.floor(Math.random() * (upperCaseLetters.length + lowerCaseLetters.length + number.length));\n    str += letter;\n  }\n  return str;\n}\n\nconst generateRandomString13 = (size) => {\n  let str = \"\";\n  for (let i = 0; i < size; i++) {\n    let letter = Math.floor(Math.random() * (upperCaseLetters.length + lowerCaseLetters.length + number.length));\n    str += letter;\n  }\n  return str;\n}\n\nconst generateRandomString14 = (size) => {\n  let str = \"\";\n  for (let i = 0; i < size; i++) {\n    let letter = Math.floor(Math.random() * (upperCaseLetters.length + lowerCaseLetters.length + number.length));\n    str += letter;\n  }\n  return str;\n}\n\nconst generateRandomString15 = (size) => {\n  let str = \"\";\n  for (let i = 0; i < size; i++) {\n    let letter = Math.floor(Math.random() * (upperCaseLetters.length + lowerCaseLetters.length + number.length));\n    str += letter;\n  }\n  return str;\n}\n"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string exemplify a file's name, and fall \n  ' Yes' if the the file's name is valid, and returns' No' differently. \n   A file's name is considered to be valid if and only if all the following condition \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains precisely one department of transportation'.' \n   - The substring before the department of transportation should not be empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a string exemplify a file's name, and fall \n 'Yes' if the the file's name is valid, and returns' No' differently. \n   A file's name is considered to be valid if and only if all the following condition \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains precisely one department of transportation'.' \n   - The substring before the department of transportation should not be empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if(file_name.length>3) {\n    if(file_name.match(/[0-9]/)) {\n      return \"No\"\n    }\n    else if(file_name.match(/[a-zA-Z]/)) {\n      return \"Yes\"\n    }\n  }\n  else {\n    return \"No\"\n  }\n}\n\n// A function which takes a string exemplify a file's name, and fall \n/*Create a function which takes a string exemplify a file's name, and fall \n 'Yes' if the the file's name is valid, and returns' No' differently. \n   A file's name is considered to be valid if and only if all the following condition \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains precisely one department of transportation'.' \n   - The substring before the department of transportation should not be empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n  if(file_name.length>3) {\n    if(file_name.match(/[0-9]/)) {\n      return \"No\"\n    }\n    else if(file_name.match(/[a-zA-Z]/)) {\n      return \"Yes\"\n    }\n  }\n  else {\n    return \"No\"\n  }\n}\n\nconst check_file_name = (file_name) => {\n  return fileNameCheck(file_name)\n}\n\nconst check_file_name2 = (file_name) => {\n  return fileNameCheck2(file_name)\n}\n\nmodule.exports = {\n  fileNameCheck: check_file_name,\n  fileNameCheck2: check_file_name2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the routine shall feather the integer entry if its exponent is a \n   multiple of 3 and will cube the integer submission if its index equal a multiple of 4 and not a multiple of 3. The function will not \n   change the submission in the list whose indexes are not a multiple of 3 or 4. The function shall then return the union of all submission. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for(let item of lst) {\n    if(item.exponent % 3 === 0) {\n      sum += Math.pow(item.value, 2);\n    }\n    if(item.exponent % 4 === 0) {\n      sum += Math.pow(item.value, 3);\n    }\n  }\n  return sum;\n};\n\nmodule.exports = sumSquares;<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n   the sentence contains some news separate by a space, \n   and you have to return a chain that contains the quarrel from the original sentence,\n   whose duration are choice numbers, \n   the order of the words in the new chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representing a sentence,\n   the sentence contains some news separate by a space, \n   and you have to return a chain that contains the quarrel from the original sentence,\n   whose duration are choice numbers, \n   the order of the words in the new chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split(' ')\n  return words\n}\n\nconst chain = (sentence) => {\n  let chain = []\n  let words = wordsInSentence(sentence)\n  let firstWord = words[0]\n  let secondWord = words[1]\n  let thirdWord = words[2]\n  let fourthWord = words[3]\n  let chainEnd = firstWord\n  if (firstWord === secondWord) {\n    chainEnd = secondWord\n    chain.push(firstWord)\n    chain.push(secondWord)\n    chain.push(thirdWord)\n    chain.push(fourthWord)\n  } else if (secondWord === thirdWord) {\n    chainEnd = thirdWord\n    chain.push(firstWord)\n    chain.push(secondWord)\n    chain.push(thirdWord)\n    chain.push(fourthWord)\n  } else if (thirdWord === fourthWord) {\n    chainEnd = fourthWord\n    chain.push(firstWord)\n    chain.push(secondWord)\n    chain.push(thirdWord)\n    chain.push(fourthWord)\n  } else {\n    chainEnd = words[4]\n    chain.push(firstWord)\n    chain.push(secondWord)\n    chain.push(thirdWord)\n    chain.push(fourthWord)\n  }\n  return chain\n}\n\nconsole.log(chain('This is a test'))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression \n   x * n. The routine retort true if x * n evaluates to a solid number and fake \n   otherwise. Both x and n, are drawstring representation of a fraction, and have the follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive unharmed numbers. \n\n   You can wear that x, and n are valid fraction, and do not hold zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a function that will simplify the expression \n   x * n. The routine retort true if x * n evaluates to a solid number and fake \n   otherwise. Both x and n, are drawstring representation of a fraction, and have the follow format, \n   < numerator>/<denominator > where both numerator and denominator are positive unharmed numbers. \n\n   You can wear that x, and n are valid fraction, and do not hold zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n   return (x.replace(/^0*(\\d)/, \"$1\").replace(/^0*(\\d)$/, \"$1\") === n.replace(/^0*(\\d)/, \"$1\").replace(/^0*(\\d)$/, \"$1\"))\n}\n*/\n\nfunction simplify(x, n) {\n  let is_simplified = false;\n  let numerator = x.replace(/^0*(\\d)/, \"$1\");\n  let denominator = n.replace(/^0*(\\d)/, \"$1\");\n\n  if (numerator === denominator) {\n    is_simplified = true;\n  }\n\n  return is_simplified;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integer \n   in ascending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts the given list of integer \n   in ascending ordering according to the kernel of their digits. \n   eminence: if there are respective detail with like sum of their digits, \n   order them based on their exponent in original list.\n\n   For model:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const getPoint = (num) => num % 10\n  const getSum = (num) => getPoint(num) + getPoint(num) + getPoint(num)\n  const sortByExp = (a, b) => {\n    if (getSum(a) > getSum(b)) {\n      return 1\n    } else if (getSum(a) < getSum(b)) {\n      return -1\n    } else {\n      return 0\n    }\n  }\n\n  return nums.sort(sortByExp)\n}\n\n// const orderByPoints = (nums) => {\n//   return nums.sort((a, b) => {\n//     const sumA = sumDigits(a)\n//     const sumB = sumDigits(b)\n//     const diff = sumA - sumB\n//     if (diff > 0) {\n//       return 1\n//     } else if (diff < 0) {\n//       return -1\n//     } else {\n//       return 0\n//     }\n//   })\n// }\n\n// const sumDigits = (num) => num.toString().split('').reduce((a, b) => a + b)\n\n// const sumDigits = (num) => {\n//   if (num === 0) return 0\n//   let res = 0\n//   do {\n//     res += num % 10\n//     num = Math.floor(num / 10)\n//   } while (num > 0)\n//   return res\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numeral as stimulation and reappearance \n   the numeral of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an array of numeral as stimulation and reappearance \n   the numeral of elements in the array that be great than 10 and both \n   first and final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let odd = [];\n  let even = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 1) {\n        odd.push(nums[i]);\n      }\n    } else {\n      if (nums[i] % 2 === 1) {\n        even.push(nums[i]);\n      }\n    }\n  }\n  return odd.concat(even);\n};\n\n//console.log(specialFilter([15, -73, 14, -15]));\n//console.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to produce an integer array a of duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to produce an integer array a of duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n    let a = new Array(n)\n    for (let i = 0; i < n; i++) {\n        a[i] = i * i - i + 1\n    }\n    let count = 0\n    for (let i = 0; i < n - 1; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\n/*\n  You are given a positive integer n. You have to produce an integer array a of duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n      The only valid triple is (1, 13, 21).\n      The only valid triple is (3, 7, 13).\n  */\nconst getMaxTriples2 = (n) => {\n    let a = new Array(n)\n    for (let i = 0; i < n; i++) {\n        a[i] = i * i - i + 1\n    }\n    let count = 0\n    for (let i = 0; i < n - 1; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nconsole.log(getMaxTriples(3))\nconsole.log(getMaxTriples(5))\nconsole.log(getMaxTriples(6))\nconsole.log(getMaxTriples(7))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   equal Mercury, the future one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a function that takes two satellite name as string planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits are \n   settle between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun \n   equal Mercury, the future one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a function that takes two satellite name as string planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits are \n   settle between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  var all = []\n  var planet1_pos = get_planet_position(planet1)\n  var planet2_pos = get_planet_position(planet2)\n  for (var i = 0; i < planet1_pos.length; i++) {\n    var planet1_pos_i = planet1_pos[i]\n    var planet2_pos_i = planet2_pos[i]\n    if (is_close_to_sun(planet1_pos_i, planet2_pos_i)) {\n      all.push(planet1_pos_i)\n    }\n  }\n  return all\n}\n\nconst is_close_to_sun = (planet1, planet2) => {\n  var planet1_pos = get_planet_position(planet1)\n  var planet2_pos = get_planet_position(planet2)\n  return planet1_pos.every(x => planet2_pos.indexOf(x)!== -1)\n}\n\nconst get_planet_position = (planet) => {\n  var all_pos = []\n  var planet_pos = planet.split(\" \")\n  for (var i = 0; i < planet_pos.length; i++) {\n    var pos = planet_pos[i].split(\"/\")\n    all_pos.push(pos)\n  }\n  return all_pos\n}\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a argument, \n   deletes the drawstring that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of strings in screen order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings as a argument, \n   deletes the drawstring that take leftover lengths from it, \n   and returns the resulted list with a classify order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may check duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list classify by that principle. \n   If two words experience the like length, sort the list alphabetically. \n   The function should return a list of strings in screen order. \n   You may simulate that all words will have the like duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i].length;\n    }\n    let list = [];\n    for (let i = 0; i < lst.length; i++) {\n        let word = lst[i];\n        let length = word.length;\n        let count = 1;\n        while (sum > length) {\n            list.push(word);\n            sum -= length;\n            count++;\n        }\n        list.push(word);\n    }\n    return list;\n};\nconst list_sort = (lst) => {\n    let sorted = sortedListSum(lst);\n    return sorted.sort((a, b) => {\n        if (a.length < b.length) {\n            return -1;\n        }\n        if (a.length > b.length) {\n            return 1;\n        }\n        return 0;\n    });\n};\n\n// console.log(list_sort([\"a\", \"aa\", \"aaa\", \"ab\"]));\nconsole.log(list_sort([\"ab\", \"aa\", \"aaa\", \"cd\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n equal \n   a choice number and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y\n  }\n  if (n === y) {\n    return x\n  }\n  return n\n}\n\nconsole.log(xOrY(3, 8, 5)) // 5\nconsole.log(xOrY(15, 8, 5)) // 8\nconsole.log(xOrY(7, 34, 12)) // 34\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numeral \n   in the list that be odd. Ignore numbers that constitute negative or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input signal list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   for(let i = 0; i < lst.length; i++) {\n      if(lst[i] % 2 === 1) {\n         return (lst[i] * lst[i]);\n      }\n   }\n   return 0;\n}\n\nfunction doubleTheDifference(lst) {\n    if(lst.length === 0) return 0;\n    let diff = 0;\n    for(let i = 0; i < lst.length; i++) {\n        let num = lst[i];\n        if(num > 0) {\n            diff += num;\n        } else {\n            diff -= num;\n        }\n    }\n    return diff;\n}\n\nconsole.log(doubleTheDifference([1, 3, 2, 0]));\nconsole.log(doubleTheDifference([-1, -2, 0]));\nconsole.log(doubleTheDifference([9, -2]));\nconsole.log(doubleTheDifference([0]));\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the solution of some long - expect \n   consequence is last known. The feelings and thoughts you have at that consequence are \n   definitely deserving noting down and compare. \n   Your task is to determine if a person correctly think the results of a number of matches. \n   You are feed two array of scores and guess of adequate length, where each index shows a match. \n   Return an array of the like length announce how far off each guess was. If they have estimate correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling when the solution of some long - expect \n   consequence is last known. The feelings and thoughts you have at that consequence are \n   definitely deserving noting down and compare. \n   Your task is to determine if a person correctly think the results of a number of matches. \n   You are feed two array of scores and guess of adequate length, where each index shows a match. \n   Return an array of the like length announce how far off each guess was. If they have estimate correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  // let's get all the scores in the array\n  const scores = game.slice(0, guess.length);\n  // and the scores we get from the guess\n  const guess_scores = guess.slice(0, scores.length);\n\n  // calculate the difference\n  const diff = scores.filter(score => score - guess_scores[score] === 0);\n  // return that\n  return diff;\n};\n\nconst compare2 = (game, guess) => {\n  // let's get all the scores in the array\n  const scores = game.slice(0, guess.length);\n  // and the scores we get from the guess\n  const guess_scores = guess.slice(0, scores.length);\n\n  // calculate the difference\n  const diff = scores.filter(score => score - guess_scores[score] === 0);\n  // return that\n  return diff;\n};\n\nconst compare3 = (game, guess) => {\n  // let's get all the scores in the array\n  const scores = game.slice(0, guess.length);\n  // and the scores we get from the guess\n  const guess_scores = guess.slice(0, scores.length);\n\n  // calculate the difference\n  const diff = scores.filter(score => score - guess_scores[score] === 0);\n  // return that\n  return diff;\n};\n\nconst compare4 = (game, guess) => {\n  // let's get all the scores in the array\n  const scores = game.slice(0, guess.length);\n  // and the scores we get from the guess\n  const guess_scores = guess.slice(0, scores.length);\n\n  // calculate the difference\n  const diff = scores.filter(score => score - guess_scores[score] === 0);\n  // return that\n  return diff;\n};\n\nconst compare5 = (game, guess) => {\n  // let's get all the scores in the array\n  const scores = game.slice(0, guess.length);\n  // and the scores we get from the guess\n  const guess_scores = guess.slice(0, scores.length);\n\n  // calculate the difference\n  const diff = scores.filter(score => score - guess_scores[score] === 0);\n  // return that\n  return diff;\n};\n\nconst compare6 = (game, guess) => {\n  // let's get all the scores in the array\n  const scores = game.slice(0, guess.length);\n  // and the scores we get from the guess\n  const guess_scores = guess.slice(0, scores.length);\n\n  // calculate the difference\n  const diff = scores.filter(score => score - guess_scores[score] === 0);\n  // return that\n  return diff;\n};\n\nconst compare7 = (game, guess) => {\n  // let's get all the scores in the array\n  const scores = game.slice(0, guess.length);\n  // and the scores we get from the guess\n  const guess_scores = guess.slice(0, scores.length);\n\n  // calculate the difference\n  const diff = scores.filter(score => score - guess_scores[score] === 0);\n  // return that\n  return diff;\n};\n\nconst compare8 = (game, guess) => {\n  // let's get all the scores in the array\n  const scores = game.slice(0, guess.length);\n  // and the scores we get from the guess\n  const guess_scores = guess.slice(0, scores.length);\n\n  // calculate the difference\n  const diff = scores.filter(score => score - guess_scores[score] === 0);\n  // return that\n  return diff;\n};\n\nconst compare9 = (game, guess) => {\n  // let's get all the scores in the array\n  const scores = game.slice(0, guess.length);\n  // and the scores we get from the guess\n  const guess_scores = guess.slice(0, scores.length);\n\n  // calculate the difference\n  const diff = scores.filter(score => score - guess_scores[score] === 0);\n  // return that\n  return diff;\n};\n\nconst compare10 = (game, guess) => {\n  // let's get all the scores in the array\n  const scores = game.slice(0, guess.length);\n  // and the scores we get from the guess\n  const guess_scores = guess.slice(0, scores.length);\n\n  // calculate the difference\n  const diff = scores.filter(score => score - guess_scores[score] === 0);\n  // return that\n  return diff;\n};\n\nconst compare11 = (game, guess) => {\n  // let's get all the scores in the array\n  const scores = game.slice(0, guess.length);\n  // and the scores we get from the guess\n  const guess_scores = guess.slice(0, scores.length);\n\n  // calculate the difference\n  const diff = scores.filter(score => score - guess_scores[score] === 0);\n  // return that\n  return diff;\n};\n\nconst compare12 = (game, guess) => {\n  // let's get all the scores in the array\n  const scores = game.slice(0, guess.length);\n  // and the scores we get from the guess\n  const guess_scores = guess.slice(0, scores.length);\n\n  // calculate the difference\n  const diff = scores.filter(score => score - guess_scores"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be use to load extra class to the course. The \n   strength of the extension is as follows: Let CAP equal the number of the capital \n   letters in the propagation's name, and let SM embody the number of lowercase letters \n   in the extension's name, the persuasiveness is give by the fraction CAP - SM. \n   You should discover the strong extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there embody two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be use to load extra class to the course. The \n   strength of the extension is as follows: Let CAP equal the number of the capital \n   letters in the propagation's name, and let SM embody the number of lowercase letters \n   in the extension's name, the persuasiveness is give by the fraction CAP - SM. \n   You should discover the strong extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there embody two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let cap = class_name.split('.').map(el => el.charAt(0).toUpperCase()).reduce((a, b) => a + b);\n  let sm = class_name.split('.').map(el => el.charAt(0)).reduce((a, b) => a + b.toLowerCase());\n  let strength = extensions.map(el => cap - sm).reduce((a, b) => a + b);\n  return class_name + '.' + extensions[strength.indexOf(Math.max(...strength))];\n};\n\n//StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\nconst strongestExtension = (class_name, extensions) => {\n  let cap = class_name.split('.').map(el => el.charAt(0).toUpperCase()).reduce((a, b) => a + b);\n  let sm = class_name.split('.').map(el => el.charAt(0)).reduce((a, b) => a + b.toLowerCase());\n  let strength = extensions.map(el => cap - sm).reduce((a, b) => a + b);\n  return class_name + '.' + extensions[strength.indexOf(Math.max(...strength))];\n};\n\nconsole.log(strongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]));\n\n/*\n  4. Given a string S, return the number of letters in S,\n  excluding those that are whitespace.\n\n  Example:\n  let isWhitespace = function(char) {\n    return char.match(/^\\s/);\n  };\n  for each character in string\n    if character is not whitespace\n      return 1;\n*/\nconst numLettersInString = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (!isWhitespace(S[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(numLettersInString(\"  a  b  c\"));\n\n/*\n  5. Given a list of students, return a list of students sorted in\n  ascending order of their grade.\n\n  Example:\n  let sortByGrade = function(student) {\n    return student.grade;\n  };\n  for each student in list\n    sort student.grade\n*/\nconst sortByGrade = (students) => {\n  return students.sort((a, b) => a.grade - b.grade);\n};\n\nconsole.log(sortByGrade([\n  {name: \"John\", grade: 2},\n  {name: \"Adam\", grade: 3},\n  {name: \"Lisa\", grade: 4},\n  {name: \"Eve\", grade: 6},\n  {name: \"Bob\", grade: 9},\n]));\n\n/*\n  6. Given a string S, return the number of times the substring 'cat'\n  occurs in S.\n*/\nconst numSubstrsInString = (S) => {\n  let count = 0;\n  let start = 0;\n  while (start < S.length) {\n    if (S.indexOf('cat', start) > -1) {\n      count++;\n      start += 3;\n    } else {\n      start++;\n    }\n  }\n  return count;\n};\n\nconsole.log(numSubstrsInString(\"the cat is on the mat\"));\n\n/*\n  7. Given a list of students, return the average grade of the students.\n*/\nconst averageGrade = (students) => {\n  let sum = 0;\n  for (let i = 0; i < students.length; i++) {\n    sum += students[i].grade;\n  }\n  return sum / students.length;\n};\n\nconsole.log(averageGrade([\n  {name: \"John\", grade: 2},\n  {name: \"Adam\", grade: 3},\n  {name: \"Lisa\", grade: 4},\n  {name: \"Eve\", grade: 6},\n  {name: \"Bob\", grade: 9},\n]));\n\n/*\n  8. Given a string S, return the number of times the substring 'cat'\n  occurs in S.\n\n  Example:\n  let numSubstrsInString = function(S) {\n    let count = 0;\n    let start = 0;\n    while (start < S.length) {\n      if (S.indexOf('cat', start) > -1) {\n        count++;\n        start += 3;\n      } else {\n        start++;\n      }\n    }\n    return count;\n  };\n  numSubstrsInString(\"the cat is on the mat\")\n*/\nconst numSubstrsInString = (S) => {\n  let count = 0;\n  let start = 0;\n  while (start < S.length) {\n    if (S.indexOf('cat', start) > -1) {\n      count++;\n      start += 3;\n    } else {\n      start++;\n    }\n  }\n  return count;\n};\n\nconsole.log(numSubstrsInString(\"the cat is on the mat\")"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > fake \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > fake \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   var a_ = a.toUpperCase();\n   var b_ = b.toUpperCase();\n   var n_ = a_.length;\n   var m_ = b_.length;\n   var s_ = new Array(n_);\n   var i_ = 0;\n   var j_ = 0;\n   var k_ = 0;\n   var v_ = 0;\n   var kv_ = 0;\n   var d_ = 0;\n   for(var i = 0; i < n_; i++) {\n     s_[i] = a_[i];\n   }\n   for(var j = 0; j < m_; j++) {\n     s_[n_ - j - 1] = b_[j];\n   }\n   while(i_ < n_) {\n     while(j_ < m_) {\n       v_ = 0;\n       for(var k = i_; k < n_; k++) {\n         v_ += s_[k];\n       }\n       if(v_ == b_.charCodeAt(j_)) {\n         d_ = 0;\n         for(var k = i_; k < n_; k++) {\n           d_ += s_[k] * k;\n         }\n         if(d_ == a_.charCodeAt(i_)) {\n           return true;\n         }\n       }\n       j_++;\n     }\n     i_++;\n     j_ = 0;\n   }\n   return false;\n }\n * / \n */\n\n/*\n * http://www.geeksforgeeks.org/check-if-two-given-strings-are-anagrams/\n */\npublic class _07_CyclicPattern {\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(cyclicPatternCheck(\"abcd\", \"abd\"));\n\t\tSystem.out.println(cyclicPatternCheck(\"hello\", \"ell\"));\n\t\tSystem.out.println(cyclicPatternCheck(\"whassup\", \"psus\"));\n\t\tSystem.out.println(cyclicPatternCheck(\"abab\", \"baa\"));\n\t\tSystem.out.println(cyclicPatternCheck(\"efef\", \"eeff\"));\n\t\tSystem.out.println(cyclicPatternCheck(\"himenss\", \"simen\"));\n\t}\n\n\tstatic boolean cyclicPatternCheck(String a, String b) {\n\t\tString a_ = a.toUpperCase();\n\t\tString b_ = b.toUpperCase();\n\t\tint n_ = a_.length();\n\t\tint m_ = b_.length();\n\t\tif (n_!= m_)\n\t\t\treturn false;\n\t\tint d = 0;\n\t\tfor (int i = 0; i < n_; i++) {\n\t\t\tint k = a_.charAt(i);\n\t\t\tint j = b_.charAt(i);\n\t\t\td += (k - j) * i;\n\t\t}\n\t\treturn d == a_.charAt(n_ - 1);\n\t}\n}\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let count = 0;\n    while (num > 0) {\n        if (num % 2 === 0) {\n            count++;\n        }\n        num = num / 2;\n    }\n    return (count, num);\n};\n\nmodule.exports = evenOddCount;<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  // store the result in an array\n  let numArray = [number];\n\n  // reverse the number\n  numArray.reverse();\n\n  // keep looping until we are done\n  while (numArray.length > 1) {\n    // compare the current number with the next number\n    if (numArray[numArray.length - 1] - numArray[numArray.length - 2] > 1) {\n      // increase the current number by 1\n      numArray[numArray.length - 1] = (numArray[numArray.length - 1] - 1);\n    } else if (numArray[numArray.length - 1] - numArray[numArray.length - 2] < 1) {\n      // decrease the current number by 1\n      numArray[numArray.length - 1] = (numArray[numArray.length - 1] + 1);\n    }\n\n    // remove the last element in the array and add it to the front\n    numArray.pop();\n    numArray.unshift(numArray[numArray.length - 1]);\n  }\n\n  // return the roman numeral\n  return numArray[0];\n};\n\n/*\n  Given a positive integer, return its roman numeral equivalent as a string. \n   restriction: 1 < = num < = 3999 \n\n   Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(3000) =='mcdxc'\n  */\nconst intToRoman = (number) => {\n  // store the result in an array\n  let numArray = [number];\n\n  // reverse the number\n  numArray.reverse();\n\n  // keep looping until we are done\n  while (numArray.length > 1) {\n    // compare the current number with the next number\n    if (numArray[numArray.length - 1] - numArray[numArray.length - 2] > 1) {\n      // increase the current number by 1\n      numArray[numArray.length - 1] = (numArray[numArray.length - 1] - 1);\n    } else if (numArray[numArray.length - 1] - numArray[numArray.length - 2] < 1) {\n      // decrease the current number by 1\n      numArray[numArray.length - 1] = (numArray[numArray.length - 1] + 1);\n    }\n\n    // remove the last element in the array and add it to the front\n    numArray.pop();\n    numArray.unshift(numArray[numArray.length - 1]);\n  }\n\n  // return the roman numeral\n  return numArray[0];\n};\n\n/*\n  Given a positive integer, return its roman numeral equivalent as a string. \n   restriction: 1 < = num < = 3999 \n\n   Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(3000) =='mcdxc'\n  */\nconst intToRoman = (number) => {\n  // store the result in an array\n  let numArray = [number];\n\n  // reverse the number\n  numArray.reverse();\n\n  // keep looping until we are done\n  while (numArray.length > 1) {\n    // compare the current number with the next number\n    if (numArray[numArray.length - 1] - numArray[numArray.length - 2] > 1) {\n      // increase the current number by 1\n      numArray[numArray.length - 1] = (numArray[numArray.length - 1] - 1);\n    } else if (numArray[numArray.length - 1] - numArray[numArray.length - 2] < 1) {\n      // decrease the current number by 1\n      numArray[numArray.length - 1] = (numArray[numArray.length - 1] + 1);\n    }\n\n    // remove the last element in the array and add it to the front\n    numArray.pop();\n    numArray.unshift(numArray[numArray.length - 1]);\n  }\n\n  // return the roman numeral\n  return numArray[0];\n};\n\n/*\n  Given a positive integer, return its roman numeral equivalent as a string. \n   restriction: 1 < = num < = 3999 \n\n   Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(3000) =='mcdxc'\n  */\nconst intToRoman = (number) => {\n  // store the result in an array\n  let numArray = [number];\n\n  // reverse the number\n  numArray.reverse();\n\n  // keep looping until we are done\n  while (numArray.length > 1) {\n    // compare the current number with the next number\n    if (numArray[numArray.length - 1] - numArray[numArray.length - 2] > 1) {\n      // increase the current number by 1\n      numArray[numArray.length - 1] = (numArray[numArray.length - 1] - 1);\n    } else if (numArray[numArray.length - 1] - numArray[numArray.length - 2] < 1) {\n      // decrease the current number by 1\n      numArray[numArray.length - 1] = (numArray[numArray.length - 1] + 1);\n    }\n\n    // remove the last element in the array and add it to the front\n    numArray.pop();\n    numArray.unshift(numArray[numArray.length - 1]);\n  }\n\n  // return the roman numeral\n  return numArray[0];\n};\n\n/*\n  Given a positive integer, return its roman numeral equivalent as a string. \n   restriction: 1 < = num < = 3999 \n\n   Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(3000) =='mcdxc'\n  */\nconst intToRoman = (number) => {\n  // store the result in an array\n  let numArray = [number];\n\n  // reverse the number\n  numArray.reverse();\n\n  // keep looping until we are done\n  while (numArray."}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. refund on-key if the three \n   sides form a justly - angled triangulum, fake differently. \n   A correctly - angle triangle is a triangle in which one slant is right slant or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    const sides = [a, b, c];\n    const x = Math.abs(sides[1] - sides[0]);\n    const y = Math.abs(sides[2] - sides[0]);\n    if (sides[0] + sides[1] < sides[2] && sides[0] + sides[1] < sides[2] + sides[0]) {\n        return false;\n    }\n    if (sides[0] < sides[1] && sides[0] < sides[2] + sides[1] && sides[0] + sides[1] < sides[2] && sides[0] + sides[1] < sides[2]) {\n        return true;\n    }\n    if (sides[0] + sides[1] < sides[2] && sides[0] + sides[1] < sides[2] && sides[0] < sides[1] && sides[0] < sides[2]) {\n        return true;\n    }\n    if (sides[0] + sides[1] < sides[2] && sides[0] + sides[1] < sides[2] && sides[0] < sides[1] && sides[0] + sides[1] < sides[2]) {\n        return true;\n    }\n    if (sides[0] < sides[1] && sides[0] < sides[2] && sides[0] + sides[1] < sides[2] && sides[0] < sides[1] && sides[0] < sides[2]) {\n        return true;\n    }\n    if (sides[0] < sides[1] && sides[0] < sides[2] && sides[0] + sides[1] < sides[2] && sides[0] < sides[1] && sides[0] < sides[2]) {\n        return true;\n    }\n    if (sides[0] < sides[1] && sides[0] < sides[2] && sides[0] + sides[1] < sides[2] && sides[0] + sides[1] < sides[2]) {\n        return true;\n    }\n    if (sides[0] + sides[1] < sides[2] && sides[0] + sides[1] < sides[2] && sides[0] + sides[1] < sides[2] && sides[0] < sides[1] && sides[0] < sides[2]) {\n        return true;\n    }\n    if (sides[0] < sides[1] && sides[0] < sides[2] && sides[0] + sides[1] < sides[2] && sides[0] + sides[1] < sides[2] && sides[0] < sides[1] && sides[0] < sides[2]) {\n        return true;\n    }\n    return false;\n};\n\nmodule.exports = rightAngleTriangle;\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings. \n   The list check unlike words. Return the news with maximum numeral \n   of unique quality. If multiple string have maximal number of alone \n   characters, return the one which comes foremost in lexicographical ordering. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings. \n   The list check unlike words. Return the news with maximum numeral \n   of unique quality. If multiple string have maximal number of alone \n   characters, return the one which comes foremost in lexicographical ordering. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   let result = words[0];\n   for (let i = 1; i < words.length; i++) {\n     let cur = words[i];\n     if (cur.length > result.length) {\n       result = cur;\n     }\n   }\n   return result;\n }\n*/\n\nconst findMax = (words) => {\n  const result = words[0];\n  for (let i = 1; i < words.length; i++) {\n    let cur = words[i];\n    if (cur.length > result.length) {\n      result = cur;\n    }\n  }\n  return result;\n};\n\nconsole.log(findMax([\"name\", \" of \", \" string \"]));\nconsole.log(findMax([\"name\", \" enam \", \" plot \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" milliliter \"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have corrode a sealed number of carrot, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [ total number of eat carrot after your meals, \n                                   the number of carrots left after your meals ] \n   if there exist not enough remaining carrots, you will eat all remaining carrots, but will still be athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have corrode a sealed number of carrot, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [ total number of eat carrot after your meals, \n                                   the number of carrots left after your meals ] \n   if there exist not enough remaining carrots, you will eat all remaining carrots, but will still be athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    if (number < need) {\n        return [need - number, remaining]\n    }\n    if (remaining >= need) {\n        return [0, remaining - need]\n    }\n    return [number, remaining]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operation, and \n   the second list be a list of integers. Use the two given lists to build up the algebric \n   formulation and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operation, and \n   the second list be a list of integers. Use the two given lists to build up the algebric \n   formulation and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  if (operand.length === 1) {\n    return operand[0]\n  }\n\n  const result = operand[0]\n  for (let i = 1; i < operand.length - 1; i++) {\n    result = operator[operand[i]](result)\n  }\n  return result\n}\n\nconst doAlgebraArray = (operator, operand) => {\n  return operand.map(n => doAlgebra(operator, n))\n}\n\n/*\n  Given a positive integer, return the factorial of that integer. \n\n  Example:\n  input = 1\n  result = 1\n  => 1\n\n  Example:\n  input = 2\n  result = 2\n  => 2\n\n  Example:\n  input = 3\n  result = 6\n  => 6\n\n  Note:\n      The factorial is the product of the numbers 1 to n.\n\n  */\nconst doFactorial = n => {\n  if (n === 1) {\n    return 1\n  }\n  return n * doFactorial(n - 1)\n}\n\n/*\n  Given a list of numbers, return a list of numbers whose sum is the largest.\n  The list may not contain duplicate elements.\n\n  Example:\n  input = [1, 2, 3, 3]\n  result = [1, 2, 3]\n  => [1, 2, 3]\n\n  Example:\n  input = [1, 3, 1, 2, 5]\n  result = [1, 3, 2, 5]\n  => [1, 3, 2, 5]\n\n  Example:\n  input = [1, 3, 1, 2, 5]\n  result = [1, 3, 2, 5]\n  => [1, 3, 2, 5]\n\n  Note:\n      All elements in the input list are integers.\n      All elements in the result list are integers.\n      The input list may contain any number of elements.\n      The result list may contain any number of elements.\n\n  */\nconst doFindMax = (input) => {\n  let result = input\n  for (let i = 0; i < input.length - 1; i++) {\n    for (let j = i + 1; j < input.length; j++) {\n      const newSum = input[i] + input[j]\n      if (newSum > result[i]) {\n        result = [...result,...newSum]\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Given two lists, return a list that contains the union of the two lists. \n\n  Example:\n  input1 = [1, 2, 3, 4]\n  input2 = [2, 3, 4]\n  result = [1, 2, 3, 4]\n  => [1, 2, 3, 4]\n\n  Example:\n  input1 = [1, 2, 3, 4]\n  input2 = [2, 3, 4]\n  result = [1, 2, 3, 4]\n  => [1, 2, 3, 4]\n\n  Example:\n  input1 = [1, 2, 3, 4]\n  input2 = [2, 3, 4]\n  result = [1, 2, 3, 4]\n  => [1, 2, 3, 4]\n\n  Note:\n      The input lists may contain any number of elements.\n      The result list may contain any number of elements.\n\n  */\nconst doUnion = (list1, list2) => {\n  let result = []\n  for (let i = 0; i < list1.length; i++) {\n    result.push(list1[i])\n  }\n  for (let i = 0; i < list2.length; i++) {\n    result.push(list2[i])\n  }\n  return result\n}\n\n/*\n  Given two lists, return a list that contains the intersection of the two lists. \n\n  Example:\n  input1 = [1, 2, 3, 4]\n  input2 = [2, 3, 4]\n  result = [2, 3, 4]\n  => [2, 3, 4]\n\n  Example:\n  input1 = [1, 2, 3, 4]\n  input2 = [2, 3, 4]\n  result = [2, 3, 4]\n  => [2, 3, 4]\n\n  Note:\n      The input lists may contain any number of elements.\n      The result list may contain any number of elements.\n\n  */\nconst doIntersection = (list1, list2) => {\n  let result = []\n  for (let i = 0; i < list1.length; i++) {\n    const element = list1[i]\n    if (list2.indexOf(element) >= 0) {\n      result.push(element)\n    }\n  }\n  return result\n}\n\n/*\n  Given two lists, return a list that contains the difference of the two lists. \n\n  Example:\n  input1 = [1, 2, 3, 4]\n  input2 = [2, 3, 4]\n  result = [1]\n  => [1]\n\n  Example:\n  input1 = [1, 2, 3, 4]\n  input2 = [2, 3, 4]\n  result = []\n  => []\n\n  Note:\n      The input lists may contain any number of elements.\n      The result list may contain any number of elements.\n\n  */\nconst doDifference = (list1, list2) => {\n  let result = []\n  for (let i = 0; i < list1.length; i++) {\n    const element = list1[i"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse its sheath from depleted to upper or vise versa, \n   otherwise keep it as it is. \n   If the string hold no letters, change by reversal the string. \n   The function should return the result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const array = s.split(\"\");\n  let isLetter = true;\n  let newArray = [];\n  for (let i = 0; i < array.length; i++) {\n    if (array[i]!== \"#\") {\n      if (isLetter) {\n        newArray.push(array[i].toUpperCase());\n      } else {\n        newArray.push(array[i].toLowerCase());\n      }\n      isLetter =!isLetter;\n    }\n  }\n  return newArray.join(\"\");\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    const md5 = new crypto.createHash('md5');\n    md5.update(text);\n    return md5.digest('hex');\n};\n\n/*\n  Given a string 'text' of type'string', return its md5 hash equivalent\n   drawstring. If 'text' is an empty bowed stringed instrument, return\n   null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    const md5 = new crypto.createHash('md5');\n    md5.update(text);\n    return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return the md5 hash of the substring of 'text'\n   starting at the 'offset' and ending at the 'length' parameters.\n\n  >>> stringToMd5('Hello world', 2, 3) == 'aecb3a2a9b9b1c7b9e2d9a8f0e'\n  */\nconst stringToMd5 = (text, offset, length) => {\n    const md5 = new crypto.createHash('md5');\n    md5.update(text.substring(offset, offset + length));\n    return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return the md5 hash of the substring of 'text'\n   starting at the 'offset' parameter.\n\n  >>> stringToMd5('Hello world', 2) == 'aecb3a2a9b9b1c7b9e2d9a8f0e'\n  */\nconst stringToMd5 = (text, offset) => {\n    const md5 = new crypto.createHash('md5');\n    md5.update(text.substring(offset, offset + 1));\n    return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return the md5 hash of the substring of 'text'\n   starting at the 'offset' parameter and the 'length' parameter.\n\n  >>> stringToMd5('Hello world', 2, 3) == 'aecb3a2a9b9b1c7b9e2d9a8f0e'\n  */\nconst stringToMd5 = (text, offset, length) => {\n    const md5 = new crypto.createHash('md5');\n    md5.update(text.substring(offset, offset + length));\n    return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return the md5 hash of the substring of 'text'\n   that starts at the 'offset' parameter and ends at the 'offset' parameter\n   plus 'length' parameters.\n\n  >>> stringToMd5('Hello world', 2, 3) == 'aecb3a2a9b9b1c7b9e2d9a8f0e'\n  */\nconst stringToMd5 = (text, offset, length) => {\n    const md5 = new crypto.createHash('md5');\n    md5.update(text.substring(offset, offset + length));\n    return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return the md5 hash of the substring of 'text'\n   that starts at the 'offset' parameter and ends at the 'offset' parameter.\n\n  >>> stringToMd5('Hello world', 2) == 'aecb3a2a9b9b1c7b9e2d9a8f0e'\n  */\nconst stringToMd5 = (text, offset) => {\n    const md5 = new crypto.createHash('md5');\n    md5.update(text.substring(offset, offset + 1));\n    return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return the md5 hash of the substring of 'text'\n   that starts at the 'offset' parameter and ends at the 'offset' parameter\n   plus the 'length' parameter.\n\n  >>> stringToMd5('Hello world', 2, 3) == 'aecb3a2a9b9b1c7b9e2d9a8f0e'\n  */\nconst stringToMd5 = (text, offset, length) => {\n    const md5 = new crypto.createHash('md5');\n    md5.update(text.substring(offset, offset + length));\n    return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return the md5 hash of the substring of 'text'\n   that starts at the 'offset' parameter and ends at the 'offset' parameter\n   plus 'length' parameters.\n\n  >>> stringToMd5('Hello world', 2, 3) == 'aecb3a2a9b9b1c7b9e2d9a8f0e'\n  */\nconst stringToMd5 = (text, offset, length) => {\n    const md5 = new crypto.createHash('md5');\n    md5.update(text.substring(offset, offset + length));\n    return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return the md5 hash of the substring of 'text'\n   that starts at the 'offset' parameter and ends at the 'offset' parameter.\n\n  >>> stringToMd5('Hello world', 2) == 'aecb3a2a9b9b1c7b9e2d9a8f0e'\n  */\nconst stringToMd5 = (text, offset) => {\n    const md5 = new crypto.createHash('md5');\n    md5.update(text.substring(offset, offset + 1));\n    return md5.digest('hex');\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even finger between a\n   and b, in ascend order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even finger between a\n   and b, in ascend order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let i = a,\n    j = b;\n  const result = [];\n  while (i < j) {\n    if (i % 2 === 0) {\n      result.push(i);\n      i += 2;\n    } else {\n      j -= 2;\n    }\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>"}
