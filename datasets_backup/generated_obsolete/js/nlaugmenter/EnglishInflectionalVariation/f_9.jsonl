{"task_id": "JavaScript/0", "prompt": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const nums = Array.from(numbers);\n  const max = Math.max(...nums);\n  const min = Math.min(...nums);\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[i]!== nums[j] &&\n        Math.abs(nums[i] - nums[j]) < threshold &&\n        Math.abs(max - nums[i]) < threshold &&\n        Math.abs(min - nums[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  This function can be used to check if there is any pair of numbers that have\n  the same value within the given array.\n  >>> isIn(['x', 'x', 'y'], 'x')\n  false\n  >>> isIn(['x', 'x', 'y'], 'y')\n  true\n  >>> isIn([1, 2, 3, 4], 1)\n  false\n  >>> isIn([1, 2, 3, 4], 3)\n  true\n  */\nconst isIn = (numbers, value) => {\n  return numbers.indexOf(value) > -1;\n};\n\n/*\n  >>> isIn([1, 2, 3, 4], 3)\n  true\n  >>> isIn([1, 2, 3, 4], 5)\n  false\n  >>> isIn([1, 2, 3, 4], 'x')\n  false\n  >>> isIn([1, 2, 3, 4], 1)\n  false\n  >>> isIn([1, 2, 3, 4], 2)\n  true\n  */\nconst isInArray = (array, value) => {\n  return array.indexOf(value) > -1;\n};\n\nconst sumOfSquares = (numbers) => {\n  const sum = numbers.reduce((a, b) => a + b);\n  return sum * sum;\n};\n\nconst sumOfProducts = (numbers) => {\n  const sum = numbers.reduce((a, b) => a + b);\n  return sum * sum;\n};\n\nconst mean = (numbers) => {\n  return sumOfProducts(numbers) / numbers.length;\n};\n\nconst stdDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const sumOfSquares = sumOfSquares(numbers);\n  return Math.sqrt(sumOfSquares - mean * mean);\n};\n\nconst productOfTriples = (numbers) => {\n  const sum = numbers.reduce((a, b) => a + b);\n  return sum * sum * sum;\n};\n\nconst sumOfFibonacci = (n) => {\n  const f1 = 1;\n  const f2 = 1;\n  let s = 0;\n  for (let i = 1; i < n; i++) {\n    s += f1;\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return s;\n};\n\n/*\n  This function can be used to check if the given sum is the sum of the given\n  triplets.\n  >>> isSumOfTriplets(3, [1, 1, 1])\n  true\n  >>> isSumOfTriplets(4, [1, 1, 1])\n  false\n  >>> isSumOfTriplets(4, [1, 2, 3])\n  true\n  >>> isSumOfTriplets(4, [1, 2, 3, 4])\n  false\n  >>> isSumOfTriplets(4, [1, 1, 1, 1])\n  false\n  */\nconst isSumOfTriplets = (n, triplets) => {\n  return sumOfFibonacci(triplets.length) === n;\n};\n\n/*\n  This function can be used to check if the given sum is the sum of the given\n  numbers.\n  >>> isSumOfNumbers(3, [1, 2, 3])\n  true\n  >>> isSumOfNumbers(3, [1, 2, 3, 4])\n  false\n  >>> isSumOfNumbers(3, [1, 2, 3, 4, 5])\n  false\n  >>> isSumOfNumbers(3, [1, 2, 3, 4, 5, 6])\n  true\n  */\nconst isSumOfNumbers = (n, numbers) => {\n  return sumOfProducts(numbers) === n;\n};\n\n/*\n  This function can be used to check if the given sum is the sum of the given\n  numbers.\n  >>> isSumOfProducts(3, [1, 2, 3])\n  true\n  >>> isSumOfProducts(3, [1, 2, 3, 4])\n  false\n  >>> isSumOfProducts(3, [1, 2, 3, 4, 5])\n  false\n  >>> isSumOfProducts(3, [1, 2, 3, 4, 5, 6])\n  true\n  */\nconst isSumOfProducts = (n, numbers) => {\n  return sumOfProducts(numbers) === n;\n};\n\n/*\n  This function can be used to check if the given sum is the sum of the given\n  numbers.\n  >>> isMean(3, [1, 2, 3])\n  true\n  >>> isMean(3, [1, 2, 3, 4])\n  false\n  >>> isMean(3, [1, 2, 3, 4, 5])\n  false\n  >>> isMean(3, [1, 2, 3, 4, 5, 6])\n  true\n  */\nconst isMean = (n, numbers) => {\n  return sumOfProducts(numbers) / numbers.length === n;\n};\n\n/*\n  This function can be used to check if the given standard deviation is the\n  standard deviation of the given numbers.\n  >>> isStandardDeviation(3, [1, 2, 3])\n  true\n  >>> isStandardDeviation"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  //Split on whitespace\n  const split_parens = paren_string.split(/\\s+/);\n  let current_level = 0;\n  let start = 0;\n  let end = 0;\n  const group_arr = [];\n\n  //Recursively handle each group of parentheses\n  while(end <= split_parens.length) {\n    //Ignore opening brace\n    if(split_parens[end].match(/\\(/)) {\n      if(split_parens[end].match(/\\(/)) {\n        current_level++;\n      }\n      //Ignore closing brace\n    } else if(split_parens[end].match(/\\)/)) {\n      if(split_parens[end].match(/\\)/)) {\n        current_level--;\n      }\n    }\n    //Ignore whitespace\n    if(!split_parens[end].match(/\\s/)) {\n      //If we are at the end of the string, we are done\n      if(end === split_parens.length) {\n        return group_arr;\n      }\n      //If we are not at the end of the string, and we are at a level of zero,\n      //we are at the start of a group.\n      if(current_level === 0) {\n        //We are at a level of zero, so we are at the start of a group.\n        group_arr.push(paren_string.substring(start, end));\n        start = end + 1;\n        end = start;\n      }\n    }\n    end++;\n  }\n  return group_arr;\n};\n\nmodule.exports = separateParenGroups;\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    let integerPart = Math.floor(number);\n    let decimalPart = number - integerPart;\n    if (decimalPart == 0) {\n        return integerPart;\n    } else {\n        return integerPart + Math.floor(decimalPart * Math.pow(10, 0));\n    }\n};\n\n/* Gives the number of digits of a number (always positive)\n  >>> getDigitCount(5)\n  5\n  >>> getDigitCount(5.5)\n  2\n  >>> getDigitCount(5.9999)\n  2\n  >>> getDigitCount(5.99999)\n  3\n  >>> getDigitCount(0.1)\n  1\n  >>> getDigitCount(0.11)\n  2\n  >>> getDigitCount(-0.11)\n  2\n  >>> getDigitCount(-0.1)\n  1\n  >>> getDigitCount(0)\n  0\n  */\nconst getDigitCount = (number) => {\n    return Math.floor(truncateNumber(number));\n};\n\n/* Gives the number of decimals of a number\n  >>> getDecimalCount(5.5)\n  1\n  >>> getDecimalCount(5.9999)\n  2\n  >>> getDecimalCount(5.99999)\n  3\n  >>> getDecimalCount(0.1)\n  0\n  >>> getDecimalCount(0.11)\n  1\n  >>> getDecimalCount(0.11111)\n  2\n  >>> getDecimalCount(-0.11111)\n  2\n  >>> getDecimalCount(-0.1)\n  0\n  >>> getDecimalCount(0)\n  0\n  */\nconst getDecimalCount = (number) => {\n    return getDigitCount(number) - 1;\n};\n\n/* Gives the number of decimals of a number\n  >>> getFractionCount(5.5)\n  0\n  >>> getFractionCount(5.9999)\n  1\n  >>> getFractionCount(5.99999)\n  2\n  >>> getFractionCount(0.1)\n  0\n  >>> getFractionCount(0.11)\n  1\n  >>> getFractionCount(0.11111)\n  1\n  >>> getFractionCount(-0.11111)\n  1\n  >>> getFractionCount(-0.1)\n  0\n  >>> getFractionCount(0)\n  0\n  */\nconst getFractionCount = (number) => {\n    return getDigitCount(number) - getDecimalCount(number);\n};\n\n/* Gives the number of decimals of a number\n  >>> getFractionCount(5)\n  0\n  >>> getFractionCount(5.5)\n  1\n  >>> getFractionCount(5.9999)\n  2\n  >>> getFractionCount(5.99999)\n  3\n  >>> getFractionCount(0.1)\n  0\n  >>> getFractionCount(0.11)\n  1\n  >>> getFractionCount(0.11111)\n  1\n  >>> getFractionCount(-0.11111)\n  1\n  >>> getFractionCount(-0.1)\n  0\n  >>> getFractionCount(0)\n  0\n  */\nconst getFractionCount = (number) => {\n    return getDecimalCount(number) - getDigitCount(number);\n};\n\n/* Gives the sign of a number\n  >>> getSign(5.5)\n  1\n  >>> getSign(5)\n  1\n  >>> getSign(-5.5)\n  -1\n  >>> getSign(-5)\n  -1\n  >>> getSign(0.1)\n  1\n  >>> getSign(0.11)\n  1\n  >>> getSign(0.11111)\n  1\n  >>> getSign(-0.11111)\n  -1\n  >>> getSign(-0.1)\n  -1\n  >>> getSign(0)\n  0\n  */\nconst getSign = (number) => {\n    return number > 0? 1 : number < 0? -1 : 0;\n};\n\n/* Gives the string representation of a number\n  >>> getString(5.5)\n  '5.5'\n  >>> getString(5)\n  '5'\n  >>> getString(-5.5)\n  '-5.5'\n  >>> getString(-5)\n  '-5'\n  >>> getString(0.1)\n  '0.1'\n  >>> getString(0.11)\n  '0.11'\n  >>> getString(0.11111)\n  '0.11111'\n  >>> getString(-0.11111)\n  '-0.11111'\n  >>> getString(-0.1)\n  '-0.1'\n  >>> getString(0)\n  '0'\n  */\nconst getString = (number) => {\n    return String(number);\n};\n\nmodule.exports = {\n    getDigitCount,\n    getDecimalCount,\n    getFractionCount,\n    getSign,\n    getString\n};\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n    const { length } = operations\n    let i = 0\n\n    while (i < length) {\n        if (operations[i] < 0) {\n            return true\n        }\n\n        i++\n    }\n\n    return false\n}\n\nexport default belowZero\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let center = 0;\n  let sum = 0;\n  let absDeviation = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    center = sum / numbers.length;\n    absDeviation = Math.abs(numbers[i] - center);\n  }\n  return absDeviation;\n};\n\nmodule.exports = meanAbsoluteDeviation;\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  for (let i = 0; i < numbers.length - 1; i += 1) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n  }\n  result.push(numbers[numbers.length - 1]);\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const groups = paren_string.split(' ');\n  const groups_stack = [];\n  let max_level = 0;\n  for (let i = 0; i < groups.length; i++) {\n    const paren_group = groups[i].split('');\n    let level = 1;\n    let paren_group_stack = [];\n    for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j] === '(') {\n        level++;\n      }\n      if (paren_group[j] === ')') {\n        level--;\n      }\n      if (level === 0) {\n        paren_group_stack.push(paren_group.slice(0, j + 1));\n        break;\n      }\n    }\n    if (level > max_level) {\n      max_level = level;\n      groups_stack.push(paren_group_stack);\n    }\n  }\n  return groups_stack;\n};\n\n/*\n  Given a string that contains the original text and the new text to be added, replace the old text with the new text.\n\n  >>> replaceText('This is a sample', 'This is a new sample')\n  'This is a new sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a sample')\n  'This is a sample'\n  >>> replaceText('This is a sample', 'This is a"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n    return strings.filter(item => {\n        return item.indexOf(substring) > -1;\n    });\n}\n\n/* Filter an input list of strings only for ones that do not contain gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n    return strings.filter(item => {\n        return item.indexOf(substring) === -1;\n    });\n}\n\n/* Filter an input list of strings by their length\n  >>> filterByLength([], 0)\n  []\n  >>> filterByLength(['abc', 'bacd', 'cde', 'array'], 3)\n  ['abc', 'bacd', 'array']\n  */\nconst filterByLength = (strings, length) => {\n    return strings.filter(item => {\n        return item.length === length;\n    });\n}\n\n/* Filter an input list of strings by their length\n  >>> filterByLength([], 0)\n  []\n  >>> filterByLength(['abc', 'bacd', 'cde', 'array'], 3)\n  ['abc', 'bacd', 'array']\n  */\nconst filterByLengthNot = (strings, length) => {\n    return strings.filter(item => {\n        return item.length!== length;\n    });\n}\n\n/* Filter an input list of strings by their length\n  >>> filterByLength([], 0)\n  []\n  >>> filterByLength(['abc', 'bacd', 'cde', 'array'], 3)\n  ['abc', 'bacd', 'array']\n  */\nconst filterByLengthGreaterThan = (strings, length) => {\n    return strings.filter(item => {\n        return item.length > length;\n    });\n}\n\n/* Filter an input list of strings by their length\n  >>> filterByLength([], 0)\n  []\n  >>> filterByLength(['abc', 'bacd', 'cde', 'array'], 3)\n  ['abc', 'bacd', 'array']\n  */\nconst filterByLengthLessThan = (strings, length) => {\n    return strings.filter(item => {\n        return item.length < length;\n    });\n}\n\n/* Filter an input list of strings by their length\n  >>> filterByLength([], 0)\n  []\n  >>> filterByLength(['abc', 'bacd', 'cde', 'array'], 3)\n  ['abc', 'bacd', 'array']\n  */\nconst filterByLengthEqual = (strings, length) => {\n    return strings.filter(item => {\n        return item.length === length;\n    });\n}\n\n/* Filter an input list of strings by their length\n  >>> filterByLength([], 0)\n  []\n  >>> filterByLength(['abc', 'bacd', 'cde', 'array'], 3)\n  ['abc', 'bacd', 'array']\n  */\nconst filterByLengthNotEqual = (strings, length) => {\n    return strings.filter(item => {\n        return item.length!== length;\n    });\n}\n\nmodule.exports = {\n    filterBySubstring,\n    filterByNotSubstring,\n    filterByLength,\n    filterByLengthNot,\n    filterByLengthGreaterThan,\n    filterByLengthLessThan,\n    filterByLengthEqual,\n    filterByLengthNotEqual\n};<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((acc, num) => {\n    acc += num\n    return acc\n  }, 0)\n\n  const product = numbers.reduce((acc, num) => {\n    acc *= num\n    return acc\n  }, 1)\n\n  return (sum, product)\n}\n\nexport default sumProduct\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const list = numbers.slice(0, -1);\n  const max = list.reduce((a, b) => a > b? a : b);\n  return list.concat([max]);\n};\n\nexport default rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let result = string;\n  if (string.length <= 2) {\n    return string;\n  }\n\n  let prefix = string.split('').reverse().join('');\n  let postfix = string.split('').reverse().join('');\n\n  result = prefix + postfix;\n  if (isPalindrome(result)) {\n    return result;\n  }\n\n  result = string.split('').reverse().join('');\n  return result;\n};\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithm is: - Find the longest postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makeLongestPalindrome('')\n  ''\n  >>> makeLongestPalindrome('cat')\n  'cat'\n  >>> makeLongestPalindrome('cata')\n  'cata'\n  >>> makeLongestPalindrome('cataa')\n  'cataa'\n  */\nconst makeLongestPalindrome = (string) => {\n  let result = string;\n  if (string.length <= 2) {\n    return string;\n  }\n\n  let prefix = string.split('').reverse().join('');\n  let postfix = string.split('').reverse().join('');\n\n  result = prefix + postfix;\n  if (isPalindrome(result)) {\n    return result;\n  }\n\n  result = string.split('').reverse().join('');\n  return result;\n};\n\n/* Tests if supplied string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Tests if supplied string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithm is: - Find the longest postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makeLongestPalindrome('')\n  ''\n  >>> makeLongestPalindrome('cat')\n  'cat'\n  >>> makeLongestPalindrome('cata')\n  'cata'\n  >>> makeLongestPalindrome('cataa')\n  'cataa'\n  */\nconst makeLongestPalindrome = (string) => {\n  let result = string;\n  if (string.length <= 2) {\n    return string;\n  }\n\n  let prefix = string.split('').reverse().join('');\n  let postfix = string.split('').reverse().join('');\n\n  result = prefix + postfix;\n  if (isPalindrome(result)) {\n    return result;\n  }\n\n  result = string.split('').reverse().join('');\n  return result;\n};\n\nmodule.exports = {\n  makePalindrome,\n  makeLongestPalindrome\n};\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const charA = a.split('');\n  const charB = b.split('');\n  const result = charA.reduce((acc, char, index) => {\n    return charA[index] === charB[index]? acc : acc ^ char;\n  }, 0);\n  return result.toString();\n};\n\n//console.log(stringXor('0101', '1010'));\n\n/*\nInput:\n  1 2 3 4 5 6 7 8 9\n\nOutput:\n  1 2 3 4 5 6 7 8 9\n\nExplanation:\n  The binary representation of the number one is: 101011101.\n  The binary representation of the number two is: 101011110.\n  The binary representation of the number three is: 101011110.\n  The binary representation of the number four is: 101011110.\n  The binary representation of the number five is: 101011110.\n  The binary representation of the number six is: 101011110.\n  The binary representation of the number seven is: 101011110.\n  The binary representation of the number eight is: 101011110.\n  The binary representation of the number nine is: 101011110.\n  Hence the concatenation of these binary representations is: 1010111101011110.\n  This is the binary XOR of the numbers one and two and one and three and so on...\n  */\n\nconst stringXor = (arr) => {\n  const result = [];\n  let curr = 0;\n  let prev = arr[0];\n  let count = 0;\n  for (let i = 1; i < arr.length; i++) {\n    let next = arr[i];\n    curr = prev ^ next;\n    prev = next;\n    count++;\n    if (count % 2 === 1) {\n      result.push(curr.toString());\n    }\n  }\n  return result.join('');\n};\n\nconsole.log(stringXor(['1', '2', '3', '4', '5', '6', '7', '8', '9']));\n\n/*\nInput:\n  1 2 3 4 5 6 7 8 9\n\nOutput:\n  1 2 3 4 5 6 7 8 9\n\nExplanation:\n  The binary representation of the number one is: 101011101.\n  The binary representation of the number two is: 101011110.\n  The binary representation of the number three is: 101011110.\n  The binary representation of the number four is: 101011110.\n  The binary representation of the number five is: 101011110.\n  The binary representation of the number six is: 101011110.\n  The binary representation of the number seven is: 101011110.\n  The binary representation of the number eight is: 101011110.\n  The binary representation of the number nine is: 101011110.\n  Hence the concatenation of these binary representations is: 1010111101011110.\n  This is the binary XOR of the numbers one and two and one and three and so on...\n  */\nconst stringXor = (arr) => {\n  const result = [];\n  let curr = 0;\n  let prev = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    let next = arr[i];\n    curr = prev ^ next;\n    prev = next;\n    result.push(curr.toString());\n  }\n  return result.join('');\n};\n\nconsole.log(stringXor(['1', '2', '3', '4', '5', '6', '7', '8', '9']));\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let result = strings[0];\n  let length = strings[0].length;\n\n  for (let i = 1; i < strings.length; i++) {\n    const string = strings[i];\n    if (string.length > length) {\n      length = string.length;\n      result = string;\n    }\n  }\n\n  return result;\n};\n\n/*\n  The following function is a simple version of the longest function with one change. It accepts an array of strings instead of a list of strings.\n\n  >>> longest_array(['a', 'b', 'c'])\n  'a'\n  >>> longest_array(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest_array = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let result = strings[0];\n  let length = strings[0].length;\n\n  for (let i = 1; i < strings.length; i++) {\n    const string = strings[i];\n    if (string.length > length) {\n      length = string.length;\n      result = string;\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = {\n  longest,\n  longest_array,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n    let result = 1;\n    let temp;\n    while (b!== 0) {\n        temp = b;\n        result = Math.floor(a / b);\n        a = b;\n        b = temp;\n    }\n    return result;\n};\n\n/* Return a number of unique prime numbers less than N\n  >>> uniquePrimeNumbers(10000)\n  8989\n  >>> uniquePrimeNumbers(9000)\n  9993\n  >>> uniquePrimeNumbers(10000)\n  8989\n  >>> uniquePrimeNumbers(9000)\n  9993\n  >>> uniquePrimeNumbers(10000)\n  8989\n  >>> uniquePrimeNumbers(9000)\n  9993\n  */\nconst uniquePrimeNumbers = (N) => {\n    let result = 1;\n    let temp = 2;\n    while (result < N) {\n        while (N % temp === 0) {\n            N = N / temp;\n            result = result * temp;\n        }\n        temp++;\n    }\n    return result;\n};\n\n/* Return the sum of all primes less than N\n  >>> sumOfPrimes(10000)\n  9837\n  >>> sumOfPrimes(9000)\n  9911\n  >>> sumOfPrimes(10000)\n  9837\n  >>> sumOfPrimes(9000)\n  9911\n  >>> sumOfPrimes(10000)\n  9837\n  >>> sumOfPrimes(9000)\n  9911\n  */\nconst sumOfPrimes = (N) => {\n    let result = 0;\n    let temp = 2;\n    while (temp < N) {\n        while (N % temp === 0) {\n            N = N / temp;\n            result += temp;\n        }\n        temp++;\n    }\n    return result;\n};\n\n/* Return the greatest common divisor of two numbers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n    let result = 1;\n    let temp;\n    while (b!== 0) {\n        temp = b;\n        result = Math.floor(a / b);\n        a = b;\n        b = temp;\n    }\n    return result;\n};\n\n/* Return the sum of all primes less than N\n  >>> sumOfPrimes(10000)\n  9837\n  >>> sumOfPrimes(9000)\n  9911\n  >>> sumOfPrimes(10000)\n  9837\n  >>> sumOfPrimes(9000)\n  9911\n  >>> sumOfPrimes(10000)\n  9837\n  >>> sumOfPrimes(9000)\n  9911\n  */\nconst sumOfPrimes = (N) => {\n    let result = 0;\n    let temp = 2;\n    while (temp < N) {\n        while (N % temp === 0) {\n            N = N / temp;\n            result += temp;\n        }\n        temp++;\n    }\n    return result;\n};\n\n/* Return a number of unique prime numbers less than N\n  >>> uniquePrimeNumbers(10000)\n  8989\n  >>> uniquePrimeNumbers(9000)\n  9993\n  >>> uniquePrimeNumbers(10000)\n  8989\n  >>> uniquePrimeNumbers(9000)\n  9993\n  >>> uniquePrimeNumbers(10000)\n  8989\n  >>> uniquePrimeNumbers(9000)\n  9993\n  */\nconst uniquePrimeNumbers = (N) => {\n    let result = 1;\n    let temp = 2;\n    while (result < N) {\n        while (N % temp === 0) {\n            N = N / temp;\n            result = result * temp;\n        }\n        temp++;\n    }\n    return result;\n};\n\n/* Return the sum of all primes less than N\n  >>> sumOfPrimes(10000)\n  9837\n  >>> sumOfPrimes(9000)\n  9911\n  >>> sumOfPrimes(10000)\n  9837\n  >>> sumOfPrimes(9000)\n  9911\n  >>> sumOfPrimes(10000)\n  9837\n  >>> sumOfPrimes(9000)\n  9911\n  */\nconst sumOfPrimes = (N) => {\n    let result = 0;\n    let temp = 2;\n    while (temp < N) {\n        while (N % temp === 0) {\n            N = N / temp;\n            result += temp;\n        }\n        temp++;\n    }\n    return result;\n};\n\n/* Return the greatest common divisor of two numbers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n    let result = 1;\n    let temp;\n    while (b!== 0) {\n        temp = b;\n        result = Math.floor(a / b);\n        a = b;\n        b = temp;\n    }\n    return result;\n};\n\n/* Return the sum of all primes less than N\n  >>> sumOfPrimes(10000)\n  9837\n  >>> sumOfPrimes(9000)\n  9911\n  >>> sumOfPrimes(10000)\n  9837\n  >>> sumOfPrimes(9000)\n  9911\n  >>> sumOfPrimes(10000)\n  9837\n  >>> sumOfPrimes(9000)\n  9911\n  */\nconst sumOfPrimes = (N) => {\n    let result = 0;\n    let temp = 2;\n    while (temp < N) {\n        while (N % temp === 0) {\n            N = N / temp;\n            result += temp;\n        }\n        temp++;\n    }\n    return result;\n};\n\nmodule.exports = {\n    greatestCommonDivisor,\n    sumOfPrimes,\n    sumOfPrimes,\n    uniquePrimeNumbers\n};<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  let char = ''\n  for (let i = 0; i < string.length; i++) {\n    char = string[i]\n    prefixes.push(char)\n    prefixes = prefixes.concat(allPrefixes(string.slice(0, i + 1)))\n  }\n  return prefixes\n}\n\n/* Return a list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['', 'b', 'bc', 'c', 'cd', 'd', 'de', 'e', 'ec', 'ed', 'ee', 'ef', 'eg', 'eh', 'ej', 'ek', 'el', 'em', 'en', 'ep', 'er', 'es', 'et', 'eu', 'ev', 'ew', 'ex', 'ey', 'ez', 'ex', 'fx', 'g', 'gh', 'gj', 'gk', 'gl', 'gm', 'gn', 'gp', 'gr', 'gs', 'gt', 'gu', 'gv', 'gx', 'gy', 'gz', 'gx', 'h', 'hc', 'hd', 'he', 'hf', 'hg', 'hh', 'hj', 'hk', 'hl', 'hm', 'hn', 'hp', 'hr', 'hs', 'ht', 'hu', 'hv', 'hx', 'hy', 'hz', 'hx', 'i', 'ic', 'id', 'ie', 'if', 'ig', 'ih', 'ij', 'ik', 'il', 'im', 'in', 'ip', 'ir', 'is', 'it', 'iu', 'iv', 'ix', 'iy', 'iz', 'ix', 'j', 'jc', 'jd', 'je', 'jf', 'jg', 'jj', 'jk', 'jl', 'jm', 'jn', 'jp', 'jr', 'js', 'jt', 'ju', 'jv', 'jx', 'jy', 'jz', 'jx', 'k', 'kc', 'kd', 'ke', 'kf', 'kg', 'kh', 'kj', 'kk', 'kl', 'km', 'kn', 'kp', 'kr', 'ks', 'kt', 'ku', 'kv', 'kw', 'kx', 'ky', 'kz', 'kx', 'l', 'lc', 'ld', 'le', 'lf', 'lg', 'lh', 'lj', 'lk', 'll', 'lm', 'ln', 'lp', 'lr', 'ls', 'lt', 'lu', 'lv', 'lx', 'ly', 'lz', 'lx','m','mc','md','me','mf','mg','mh','mj','mk','ml','mm','mn','mp','mr','ms','mt','mu','mv','mw','mx','my','mz','mw', 'n', 'nc', 'nd', 'ne', 'nf', 'ng', 'nh', 'nj', 'nk', 'nl', 'nm', 'nn', 'np', 'nr', 'ns', 'nt', 'nu', 'nv', 'nw', 'nx', 'ny', 'nz', 'nx', 'o', 'oc', 'od', 'oe', 'of', 'og', 'oh', 'oj', 'ok', 'ol', 'om', 'on', 'op', 'or', 'os', 'ot', 'ou', 'ov', 'ow', 'ox', 'oy', 'oz', 'ox', 'p', 'pc', 'pd', 'pe', 'pf', 'pg', 'ph', 'pj', 'pk', 'pl', 'pm', 'pn', 'po', 'pp', 'pr', 'ps', 'pt', 'pu', 'pv', 'pw', 'px', 'py', 'pz', 'pw', 'q', 'qc', 'qd', 'qe', 'qf', 'qg', 'qh', 'qj', 'qk', 'ql', 'qm', 'qn', 'qp', 'qr', 'qs', 'qt', 'qu', 'qv', 'qw', 'qx', 'qy', 'qz', 'qx', 'r', 'rc', 'rd','re', 'rf', 'rg', 'rh', 'rj', 'rk', 'rl', 'rm', 'rn', 'rp', 'rq', 'rr', 'rs', 'rt', 'ru', 'rv', 'rw', 'rx', 'ry', 'rz', 'rw','s','sc','sd','se','sf','sg','sh','si','sj','sk','sl','sm','sn','sp','sq','sr','ss','st','su','sv','sw','sx','sy','sz','sx', 't', 'tc', 'td', 'te', 'tf', 'tg', 'th', 'tj', 'tk', 'tl', 'tm', 'tn', 'tp', 'tr', 'ts', 'tt', 'tu', 'tv', 'tw', 'tx', 'ty', 'tz', 'tx', 'u', 'uc', 'ud', 'ue', 'uf', 'ug', 'uh', 'ui', 'uj', 'uk', 'ul', 'um', 'un', 'up', 'ur', 'us', 'ut', 'uw', 'ux', 'uy', 'uz', 'ux', 'v', 'vc', 'vd','ve', 'vf', 'vg', 'vh', 'vj', 'vk', 'vl', 'vm', 'vn', 'vp', 'vr', 'vs', 'vt', 'vu', 'vv', 'vw', 'vx', 'vy', 'vz', 'vw', 'w', 'wc', 'wd', 'we', 'wf', 'wg', 'wh', 'wj', 'wk', 'wl', 'wm', 'wn', 'wp', 'wr', 'ws', 'wt', 'wu', 'wv', 'ww', 'wx', 'wy', 'wz', 'wx', 'x', 'xc', 'xd', 'xe', 'xf', 'xg',"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const string = \"\"\n  for (let i = 0; i < n; i++) {\n    string = `${string} ${i}`\n  }\n  return string\n}\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3)\n  '0 1 2'\n  >>> stringSequence(5, 3)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, count) => {\n  const string = \"\"\n  for (let i = 0; i < count; i++) {\n    string = `${string} ${n + i}`\n  }\n  return string\n}\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 2)\n  '0 1 2'\n  >>> stringSequence(5, 3, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, count, offset) => {\n  const string = \"\"\n  for (let i = 0; i < count; i++) {\n    string = `${string} ${n + i + offset}`\n  }\n  return string\n}\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 2, 1)\n  '0 1 2 3'\n  >>> stringSequence(5, 3, 2, 1)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, count, offset, count2) => {\n  const string = \"\"\n  for (let i = 0; i < count; i++) {\n    string = `${string} ${n + i + offset}`\n  }\n  for (let i = 0; i < count2; i++) {\n    string = `${string} ${i}`\n  }\n  return string\n}\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 2, 1, 2)\n  '0 1 2 3 2'\n  >>> stringSequence(5, 3, 2, 1, 2)\n  '0 1 2 3 4 5 2'\n  */\nconst stringSequence = (n, count, offset, count2, offset2) => {\n  const string = \"\"\n  for (let i = 0; i < count; i++) {\n    string = `${string} ${n + i + offset}`\n  }\n  for (let i = 0; i < count2; i++) {\n    string = `${string} ${i + offset2}`\n  }\n  return string\n}\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 2, 1, 2, 1)\n  '0 1 2 3 2 3'\n  >>> stringSequence(5, 3, 2, 1, 2, 1)\n  '0 1 2 3 4 5 2 3'\n  */\nconst stringSequence = (n, count, offset, count2, offset2, count3) => {\n  const string = \"\"\n  for (let i = 0; i < count; i++) {\n    string = `${string} ${n + i + offset}`\n  }\n  for (let i = 0; i < count2; i++) {\n    string = `${string} ${i + offset2}`\n  }\n  for (let i = 0; i < count3; i++) {\n    string = `${string} ${i}`\n  }\n  return string\n}\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 2, 1, 2, 1, 2)\n  '0 1 2 3 2 3 2'\n  >>> stringSequence(5, 3, 2, 1, 2, 1, 2)\n  '0 1 2 3 4 5 2 3 2'\n  */\nconst stringSequence = (n, count, offset, count2, offset2, count3, offset3) => {\n  const string = \"\"\n  for (let i = 0; i < count; i++) {\n    string = `${string} ${n + i + offset}`\n  }\n  for (let i = 0; i < count2; i++) {\n    string = `${string} ${i + offset2}`\n  }\n  for (let i = 0; i < count3; i++) {\n    string = `${string} ${i + offset3}`\n  }\n  return string\n}\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 2, 1, 2, 1, 2, 1)\n  '0 1 2 3 2 3 2 3'\n  >>> stringSequence(5, 3, 2, 1, 2, 1, 2, 1)\n  '0 1 2 3 4 5 2 3 2 3'\n  */\nconst stringSequence = (n, count, offset, count2, offset2, count3, offset3, count4) => {\n  const string = \"\"\n  for (let i = 0; i < count; i++) {\n    string = `${string} ${n + i + offset}`\n  }\n  for (let i = 0; i < count2; i++) {\n    string = `${string} ${i + offset2}`\n  }\n  for (let i = 0; i < count3; i++) {\n    string = `${string} ${i + offset3}`\n  }\n  for (let i = 0; i < count4; i++) {\n    string = `${string} ${i}`\n  }\n  return string\n}\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 2, 1, 2, 1, 2, 1, 2)\n  '0 1 2 3 2 3 2 3'\n  >>> stringSequence(5, 3, 2, 1, 2, 1, 2, 1, 2)\n  '0 1 2 3 4 5 2 3 2 3"}
{"task_id": "JavaScript/16", "prompt": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('')\n  const counts = {}\n  chars.forEach((char, index) => {\n    if (counts[char] === undefined) {\n      counts[char] = 1\n    } else {\n      counts[char]++\n    }\n  })\n  return Object.keys(counts).length\n}\n\n/**\n  * Gives a string, finds out how many of each character the string consists of\n  >>> countCharacterOccurrences('ABCD')\n  {'A': 4, 'B': 2, 'C': 4, 'D': 2}\n  >>> countCharacterOccurrences('JERRY')\n  {'J': 2, 'E': 3, 'R': 2, 'Y': 2}\n  */\nconst countCharacterOccurrences = (string) => {\n  const chars = string.toLowerCase().split('')\n  const counts = {}\n  chars.forEach((char, index) => {\n    if (counts[char] === undefined) {\n      counts[char] = 1\n    } else {\n      counts[char]++\n    }\n  })\n  return counts\n}\n\n/**\n  * Given a list of strings, find out the largest string in the list\n  * Note: If there is no largest string, return empty string\n  >>> largestStringInList(['abcd', 'ABC', 'xyz', 'a'])\n  'ABC'\n  >>> largestStringInList(['abc', 'xyz', 'a', 'a'])\n  ''\n  */\nconst largestStringInList = (strings) => {\n  const largest = strings.reduce((max, string) => {\n    if (string.length > max.length) {\n      return string\n    }\n    return max\n  }, '')\n  return largest\n}\n\n/**\n  * Given a string, find out the longest substring that doesn't contain any\n  * character from a given set\n  * Note: If there is no such substring, return an empty string\n  >>> longestSubstring('abcdefgh', {'e'})\n  'def'\n  >>> longestSubstring('abcdefgh', {'a', 'd', 'h'})\n  ''\n  */\nconst longestSubstring = (string, chars) => {\n  let length = 0\n  let substring = ''\n  let start = 0\n  let currentChar = string[start]\n  for (let i = 1; i < string.length; i++) {\n    if (chars.indexOf(currentChar) === -1) {\n      substring = string.slice(start, i)\n      length = i - start\n      break\n    }\n    currentChar = string[i]\n  }\n  return substring\n}\n\n/**\n  * Given a string, find out the number of times a given string occurs\n  * Note: If the string does not occur, return 0\n  >>> countOccurrences('abcde', 'e')\n  2\n  >>> countOccurrences('abcdef', 'e')\n  0\n  */\nconst countOccurrences = (string, substring) => {\n  const count = string.split(substring).filter((_, index) => index > 0).length\n  return count\n}\n\n/**\n  * Given a string, find out the number of times a given string occurs\n  * Note: If the string does not occur, return 0\n  >>> countOccurrences('abcde', 'xyz')\n  0\n  >>> countOccurrences('abcde', 'e')\n  2\n  */\nconst countOccurrences2 = (string, substring) => {\n  const counts = {}\n  let current = ''\n  let index = 0\n  while (index < string.length) {\n    current = string[index]\n    if (current === substring) {\n      if (counts[current] === undefined) {\n        counts[current] = 1\n      } else {\n        counts[current]++\n      }\n    }\n    index++\n  }\n  return Object.keys(counts).length\n}\n\n/**\n  * Given a string, find out the number of times a given string occurs\n  * Note: If the string does not occur, return 0\n  >>> countOccurrences2('abcde', 'e')\n  2\n  >>> countOccurrences2('abcde', 'xyz')\n  0\n  */\nconst countOccurrences3 = (string, substring) => {\n  const counts = {}\n  let current = ''\n  let index = 0\n  while (index < string.length) {\n    current = string[index]\n    if (current === substring) {\n      if (counts[current] === undefined) {\n        counts[current] = 1\n      } else {\n        counts[current]++\n      }\n    }\n    index++\n  }\n  return Object.keys(counts).length\n}\n\n/**\n  * Given a string, find out the number of times a given string occurs\n  * Note: If the string does not occur, return 0\n  >>> countOccurrences2('abcde', 'e')\n  2\n  >>> countOccurrences2('abcde', 'xyz')\n  0\n  */\nconst countOccurrences4 = (string, substring) => {\n  const counts = {}\n  let current = ''\n  let index = 0\n  while (index < string.length) {\n    current = string[index]\n    if (current === substring) {\n      if (counts[current] === undefined) {\n        counts[current] = 1\n      } else {\n        counts[current]++\n      }\n    }\n    index++\n  }\n  return Object.keys(counts).length\n}\n\n/**\n  * Given a string, find out the number of times a given string occurs\n  * Note: If the string does not occur, return 0\n  >>> countOccurrences3('abcde', 'e')\n  2\n  >>> countOccurrences3('abcde', 'xyz')\n  0\n  */\nconst countOccurrences5 = (string, substring) => {\n  const counts = {}\n  let current = ''\n  let index = 0\n"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_string_length = music_string.length;\n  const num_whole_notes = 0;\n  const num_half_notes = 0;\n  const num_quarter_notes = 0;\n\n  for (let i = 0; i < music_string_length; i++) {\n    if (music_string[i] === 'o') {\n      num_whole_notes += 1;\n    } else if (music_string[i] === '|') {\n      num_half_notes += 1;\n    } else if (music_string[i] === '.') {\n      num_quarter_notes += 1;\n    }\n  }\n\n  return [num_whole_notes, num_half_notes, num_quarter_notes];\n};\n\nmodule.exports = parseMusic;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    let j = i;\n    let char = string[i];\n    while (j < string.length && string[j] === char) {\n      j++;\n    }\n    if (j === string.length) {\n      count += 1;\n    }\n  }\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n    return numbers.split(' ').sort((a, b) => {\n        return a.localeCompare(b);\n    });\n}\n\n/* Input is a string of a space-delimited string of numbers from 'one' to 'ten'. Valid choices was 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine' and 'ten'. Return the string with numbers sort from smaller to larger.\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumeric = (numbers) => {\n    return numbers.split(' ').sort((a, b) => {\n        return parseInt(a) - parseInt(b);\n    });\n}\n\n/* Input is a string of the letter 'A' to 'Z' and 'a' to 'z'. Return the string with 'A' to 'Z' and 'a' to 'z' in lowercase.\n  >>> lowerCase('AAZ')\n  'az'\n  */\nconst lowerCase = (string) => {\n    return string.toLowerCase();\n}\n\n/* Input is a string of the letter 'A' to 'Z' and 'a' to 'z' and '0' to '9'. Return the string with '0' to '9' in uppercase.\n  >>> upperCase('AZa0')\n  'AZa0'\n  */\nconst upperCase = (string) => {\n    return string.toUpperCase();\n}\n\n/* Input is a string of the letters 'A' to 'Z' and 'a' to 'z' and '0' to '9'. Return the string with '0' to '9' in lowercase.\n  >>> lowerCase('AZa0')\n  'az0'\n  */\nconst lowerCaseWithDigits = (string) => {\n    return string.replace(/[^\\d]/g, '').toLowerCase();\n}\n\n/* Input is a string of the letters 'A' to 'Z' and 'a' to 'z' and '0' to '9'. Return the string with '0' to '9' in uppercase.\n  >>> upperCase('AZa0')\n  'AZa0'\n  */\nconst upperCaseWithDigits = (string) => {\n    return string.replace(/[^\\d]/g, '').toUpperCase();\n}\n\n/* Input is a string of the letters 'A' to 'Z' and 'a' to 'z' and '0' to '9'. Return the string with '0' to '9' in lowercase.\n  >>> lowerCaseWithDigits('AZa0')\n  'az0'\n  */\nconst lowerCaseWithDigits = (string) => {\n    return string.replace(/[^\\d]/g, '').toLowerCase();\n}\n\n/* Input is a string of the letters 'A' to 'Z' and 'a' to 'z' and '0' to '9'. Return the string with '0' to '9' in uppercase.\n  >>> upperCaseWithDigits('AZa0')\n  'AZa0'\n  */\nconst upperCaseWithDigits = (string) => {\n    return string.replace(/[^\\d]/g, '').toUpperCase();\n}\n\n/* Input is a string of the letters 'A' to 'Z' and 'a' to 'z' and '0' to '9' and '*'. Return the string with '0' to '9' in lowercase.\n  >>> lowerCaseWithDigits('AZa0*')\n  'az0'\n  */\nconst lowerCaseWithDigitsAndStar = (string) => {\n    return string.replace(/[^\\d*]/g, '').toLowerCase();\n}\n\n/* Input is a string of the letters 'A' to 'Z' and 'a' to 'z' and '0' to '9' and '*'. Return the string with '0' to '9' in uppercase.\n  >>> upperCaseWithDigitsAndStar('AZa0*')\n  'AZa0'\n  */\nconst upperCaseWithDigitsAndStar = (string) => {\n    return string.replace(/[^\\d*]/g, '').toUpperCase();\n}\n\n/* Input is a string of the letters 'A' to 'Z' and 'a' to 'z' and '0' to '9' and '*'. Return the string with '0' to '9' in lowercase.\n  >>> lowerCaseWithDigitsAndStar('AZa0*')\n  'az0'\n  */\nconst lowerCaseWithDigitsAndStar = (string) => {\n    return string.replace(/[^\\d*]/g, '').toLowerCase();\n}\n\n/* Input is a string of the letters 'A' to 'Z' and 'a' to 'z' and '0' to '9' and '*'. Return the string with '0' to '9' in uppercase.\n  >>> upperCaseWithDigitsAndStar('AZa0*')\n  'AZa0'\n  */\nconst upperCaseWithDigitsAndStar = (string) => {\n    return string.replace(/[^\\d*]/g, '').toUpperCase();\n}\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  let result = [min, max];\n  numbers.forEach((num) => {\n    if (min > num) {\n      min = num;\n    }\n    if (max < num) {\n      max = num;\n    }\n    if (max - min < num - min) {\n      result[1] = num;\n    } else {\n      result[0] = num;\n    }\n  });\n  return result;\n};\n\n/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  let result = [min, max];\n  for (let i = 1; i < numbers.length; i++) {\n    for (let j = 1; j < numbers.length; j++) {\n      if (numbers[i] < numbers[j]) {\n        if (min > numbers[i]) {\n          min = numbers[i];\n        }\n        if (max < numbers[j]) {\n          max = numbers[j];\n        }\n        if (max - min < numbers[j] - min) {\n          result[1] = numbers[j];\n        } else {\n          result[0] = numbers[j];\n        }\n      }\n    }\n  }\n  return result;\n};\n\n// TEST\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  [2.0, 2.2]\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  [2.0, 2.0]\n  */\nconsole.log(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]));\nconsole.log(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]));\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const r = max - min\n  return numbers.map(x => x - min) / r\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transform to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const r = max - min\n  return numbers.map(x => x - min) / r\n}\n\n/* Gives list of numbers (of at least two elements), apply a log transform to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.2, 0.4, 0.6, 0.8]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const r = max - min\n  return numbers.map(x => Math.log(x - min) / Math.log(r))\n}\n\n/* Gives list of numbers (of at least two elements), apply a power transform to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const r = max - min\n  return numbers.map(x => Math.pow(x - min, 2) / r)\n}\n\n/* Gives list of numbers (of at least two elements), apply a square root transform to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const r = max - min\n  return numbers.map(x => Math.sqrt(x - min) / r)\n}\n\n/* Gives list of numbers (of at least two elements), apply a square root transform to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const r = max - min\n  return numbers.map(x => x - min) / r\n}\n\n/* Gives list of numbers (of at least two elements), apply a inverse power transform to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const r = max - min\n  return numbers.map(x => r / (Math.pow(x - min, 2) + r))\n}\n\n/* Gives list of numbers (of at least two elements), apply a inverse square root transform to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const r = max - min\n  return numbers.map(x => r / (Math.sqrt(x - min) + r))\n}\n\n/* Gives list of numbers (of at least two elements), apply a inverse log transform to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const r = max - min\n  return numbers.map(x => r / (Math.log(x - min) + r))\n}\n\n/* Gives list of numbers (of at least two elements), apply a inverse log transform to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.5"}
{"task_id": "JavaScript/22", "prompt": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const result = [];\n  for (const value of values) {\n    if (typeof value === 'number') {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\nconst filterStrings = (values) => {\n  const result = [];\n  for (const value of values) {\n    if (typeof value ==='string') {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\nconst filterStringsOrNumbers = (values) => {\n  const result = [];\n  for (const value of values) {\n    if (typeof value ==='string' || typeof value === 'number') {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\nconst filterBooleans = (values) => {\n  const result = [];\n  for (const value of values) {\n    if (typeof value === 'boolean') {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\nconst filterNone = (values) => {\n  const result = [];\n  for (const value of values) {\n    if (value!== undefined && value!== null) {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\nconst filterNoneOrIntegers = (values) => {\n  const result = [];\n  for (const value of values) {\n    if (value!== undefined && value!== null && typeof value === 'number') {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\nconst filterNoneOrStrings = (values) => {\n  const result = [];\n  for (const value of values) {\n    if (value!== undefined && value!== null && typeof value ==='string') {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\nconst filterNoneOrStringsOrNumbers = (values) => {\n  const result = [];\n  for (const value of values) {\n    if (value!== undefined && value!== null && typeof value ==='string' || typeof value === 'number') {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\nconst filterNoneOrBooleans = (values) => {\n  const result = [];\n  for (const value of values) {\n    if (value!== undefined && value!== null && typeof value === 'boolean') {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\nconst filterNoneOrNoneOrIntegers = (values) => {\n  const result = [];\n  for (const value of values) {\n    if (value!== undefined && value!== null && typeof value === 'number') {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\nconst filterNoneOrNoneOrStrings = (values) => {\n  const result = [];\n  for (const value of values) {\n    if (value!== undefined && value!== null && typeof value ==='string') {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\nconst filterNoneOrNoneOrStringsOrNumbers = (values) => {\n  const result = [];\n  for (const value of values) {\n    if (value!== undefined && value!== null && typeof value ==='string' || typeof value === 'number') {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\nconst filterNoneOrNoneOrBooleans = (values) => {\n  const result = [];\n  for (const value of values) {\n    if (value!== undefined && value!== null && typeof value === 'boolean') {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\nexport default function filter(values, predicate) {\n  const result = [];\n  for (const value of values) {\n    if (predicate(value)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\nexport default strlen\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 0\n  while(n%largest > 0){\n    largest += 1\n  }\n  return largest\n}\n\n/* For a given number n, find the largest positive integer p such that n is evenly divisible by p */\nconst largestDivisorP = (n) => {\n  let largestP = 0\n  while(n%largestP < 0){\n    largestP += 1\n  }\n  return largestP\n}\n\n/* For a given number n, find the largest positive integer p such that n is not evenly divisible by p */\nconst largestDivisorN = (n) => {\n  let largestN = 0\n  while(n%largestN > 0){\n    largestN += 1\n  }\n  return largestN\n}\n\n/* For a given number n, find the smallest positive integer p such that n is evenly divisible by p */\nconst smallestDivisorP = (n) => {\n  let smallestP = largestDivisorP(n)\n  while(n%smallestP!= 0){\n    smallestP -= 1\n  }\n  return smallestP\n}\n\n/* For a given number n, find the smallest positive integer p such that n is not evenly divisible by p */\nconst smallestDivisorN = (n) => {\n  let smallestN = largestDivisorN(n)\n  while(n%smallestN!= 0){\n    smallestN += 1\n  }\n  return smallestN\n}\n\n/* For a given number n, find the largest positive integer p such that n is not evenly divisible by p */\nconst largestNotDivisibleP = (n) => {\n  let largestP = 0\n  while(n%largestP > 0){\n    largestP += 1\n  }\n  return largestP\n}\n\n/* For a given number n, find the largest positive integer p such that n is not evenly divisible by p */\nconst largestNotDivisibleN = (n) => {\n  let largestN = largestNotDivisibleP(n)\n  while(n%largestN < 0){\n    largestN += 1\n  }\n  return largestN\n}\n\n/*\n  For a given number n, find the smallest positive integer p such that n is not evenly divisible by p\n  n is a prime number\n  n is a composite number\n  n is a perfect number\n  n is a composite perfect number\n*/\nconst smallestNotDivisibleP = (n) => {\n  let smallestP = largestNotDivisibleP(n)\n  while(n%smallestP == 0){\n    smallestP -= 1\n  }\n  return smallestP\n}\n\n/*\n  For a given number n, find the smallest positive integer p such that n is not evenly divisible by p\n  n is a prime number\n  n is a composite number\n  n is a perfect number\n  n is a composite perfect number\n*/\nconst smallestNotDivisibleN = (n) => {\n  let smallestN = largestNotDivisibleN(n)\n  while(n%smallestN == 0){\n    smallestN += 1\n  }\n  return smallestN\n}\n\n/*\n  Given a number n, find the smallest positive integer p such that n is evenly divisible by p\n  n is a prime number\n  n is a composite number\n  n is a perfect number\n  n is a composite perfect number\n*/\nconst smallestDivisibleP = (n) => {\n  let smallestP = largestDivisorP(n)\n  while(n%smallestP!= 0){\n    smallestP -= 1\n  }\n  return smallestP\n}\n\n/*\n  Given a number n, find the smallest positive integer p such that n is evenly divisible by p\n  n is a prime number\n  n is a composite number\n  n is a perfect number\n  n is a composite perfect number\n*/\nconst smallestDivisibleN = (n) => {\n  let smallestN = largestDivisorN(n)\n  while(n%smallestN!= 0){\n    smallestN += 1\n  }\n  return smallestN\n}\n\n/*\n  Given a number n, find the largest positive integer p such that n is evenly divisible by p\n  n is a prime number\n  n is a composite number\n  n is a perfect number\n  n is a composite perfect number\n*/\nconst largestDivisibleP = (n) => {\n  let largestP = 0\n  while(n%largestP < 0){\n    largestP += 1\n  }\n  return largestP\n}\n\n/*\n  Given a number n, find the largest positive integer p such that n is evenly divisible by p\n  n is a prime number\n  n is a composite number\n  n is a perfect number\n  n is a composite perfect number\n*/\nconst largestDivisibleN = (n) => {\n  let largestN = largestDivisibleP(n)\n  while(n%largestN > 0){\n    largestN += 1\n  }\n  return largestN\n}\n\n/*\n  Given a number n, find the largest positive integer p such that n is not evenly divisible by p\n  n is a prime number\n  n is a composite number\n  n is a perfect number\n  n is a composite perfect number\n*/\nconst largestNotDivisibleP = (n) => {\n  let largestP = largestNotDivisibleP(n)\n  while(n%largestP == 0){\n    largestP += 1\n  }\n  return largestP\n}\n\n/*\n  Given a number n, find the largest positive integer p such that n is not evenly divisible by p\n  n is a prime number\n  n is a composite number\n  n is a perfect number\n  n is a composite perfect number\n*/\nconst largestNotDivisibleN = (n) => {\n  let largestN = largestNotDivisibleN(n)\n  while(n%largestN < 0){\n    largestN += 1\n  }\n  return largestN\n}\n\n/*\n  Given a number n, find the smallest positive integer p such that n is not evenly divisible by p\n  n is a prime number\n  n is a composite number\n  n is a perfect number\n  n is a composite perfect number\n*/\nconst smallestNotDivisibleN = (n) => {\n  let smallestN = smallestNotDivisibleN(n)\n  while(n%smallestN == 0){\n    smallestN += 1\n  }\n  return smallestN\n}\n\n/*"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  // Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization.\n  // n - input number to factorize\n  // return - list of prime factors of given number\n  const n_list = Array(n).fill(1);\n  const result = [];\n  const factors = prime_factorization(n);\n  const is_prime = (x) => factors.includes(x);\n  const is_not_prime = (x) =>!is_prime(x);\n  for (const x of n_list) {\n    // Add 1 to the current number in the list\n    n_list[x]++;\n    while (n_list[x] > 0 && is_prime(x)) {\n      // If the current number has multiple factors then make list of factors\n      const factor = prime_factorization(x);\n      if (factor.length === 1) {\n        // If the number has only one factor then add that to the result\n        result.push(factor[0]);\n        n_list[x]--;\n      } else {\n        // If the number has more than one factor then add the number to the result\n        const index = factor.find(is_not_prime);\n        result.push(index + 1);\n        n_list[x]--;\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(factorize(8));\nconsole.log(factorize(25));\nconsole.log(factorize(70));\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newNumbers = [];\n  let lastIndex = -1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (lastIndex === -1 || lastIndex === i) {\n      newNumbers.push(numbers[i]);\n      lastIndex = i;\n    } else if (numbers[i] === numbers[lastIndex]) {\n      lastIndex++;\n    }\n  }\n  return newNumbers;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n    let lowercase = string.toLowerCase();\n    let uppercase = string.toUpperCase();\n    return lowercase.replace(/[a-z]/g, (char) => {\n        return char.toUpperCase();\n    }).replace(/[A-Z]/g, (char) => {\n        return char.toLowerCase();\n    });\n}\n\n/*\n  For a given array, creates a new array with the same elements but in reversed order.\n  >>> reverse([1, 2, 3])\n  [3, 2, 1]\n  */\nconst reverse = (array) => {\n    return array.slice().reverse();\n}\n\n/*\n  For a given array, creates a new array with the same elements but in reversed order.\n  >>> reverse([1, 2, 3])\n  [3, 2, 1]\n  */\nconst reverseArray = (array) => {\n    let reversedArray = reverse(array);\n    let current = reversedArray.pop();\n    while (reversedArray.length > 0) {\n        let next = reversedArray.pop();\n        reversedArray.push(current);\n        current = next;\n    }\n    return reversedArray;\n}\n\n/*\n  For a given array, returns a string with all the elements of the array.\n  >>> reverseArray([1, 2, 3])\n  '321'\n  */\nconst reverseString = (array) => {\n    let reversedArray = reverseArray(array);\n    let output = reversedArray.join('');\n    return output;\n}\n\n/*\n  For a given array, return an array with the same elements but reversed.\n  >>> reverseArray([1, 2, 3])\n  [3, 2, 1]\n  */\nconst reverseArray2 = (array) => {\n    return array.slice().reverse();\n}\n\n/*\n  For a given array, return an array with the same elements but reversed.\n  >>> reverseArray([1, 2, 3])\n  [3, 2, 1]\n  */\nconst reverseArray3 = (array) => {\n    return array.slice().reverse();\n}\n\n/*\n  For a given array, return an array with the same elements but reversed.\n  >>> reverseArray([1, 2, 3])\n  [3, 2, 1]\n  */\nconst reverseArray4 = (array) => {\n    return array.slice().reverse();\n}\n\n/*\n  For a given array, returns a string with all the elements of the array.\n  >>> reverseArray([1, 2, 3])\n  '321'\n  */\nconst reverseString2 = (array) => {\n    let reversedArray = reverseArray2(array);\n    let output = reversedArray.join('');\n    return output;\n}\n\n/*\n  For a given array, returns a string with all the elements of the array.\n  >>> reverseArray([1, 2, 3])\n  '321'\n  */\nconst reverseString3 = (array) => {\n    let reversedArray = reverseArray3(array);\n    let output = reversedArray.join('');\n    return output;\n}\n\n/*\n  For a given array, returns a string with all the elements of the array.\n  >>> reverseArray([1, 2, 3])\n  '321'\n  */\nconst reverseString4 = (array) => {\n    let reversedArray = reverseArray4(array);\n    let output = reversedArray.join('');\n    return output;\n}\n\nmodule.exports = {\n    flipCase,\n    reverse,\n    reverseArray,\n    reverseString,\n    reverseArray2,\n    reverseArray3,\n    reverseArray4,\n    reverseString2,\n    reverseString3,\n    reverseString4\n};<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (!Array.isArray(strings)) {\n    throw new TypeError('strings must be an array');\n  }\n\n  return strings.reduce((previous, current) => previous + current, '');\n};\n\n// Concatenate list of strings into a single string\n/* Concatenate list of strings into a single string\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([])\n  ''\n  */\nconst concatenate = (strings) => {\n  if (!Array.isArray(strings)) {\n    throw new TypeError('strings must be an array');\n  }\n\n  return strings.reduce((previous, current) => previous + current, '');\n};\n\n/*\n  Concatenate list of strings into a single string\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([])\n  ''\n  */\nconst concatenate = (strings) => {\n  if (!Array.isArray(strings)) {\n    throw new TypeError('strings must be an array');\n  }\n\n  return strings.reduce((previous, current) => previous + current, '');\n};\n\n/* Concatenate list of strings into a single string\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([])\n  ''\n  */\nconst concatenate = (strings) => {\n  if (!Array.isArray(strings)) {\n    throw new TypeError('strings must be an array');\n  }\n\n  return strings.reduce((previous, current) => previous + current, '');\n};\n\n/* Concatenate list of strings into a single string\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([])\n  ''\n  */\nconst concatenate = (strings) => {\n  if (!Array.isArray(strings)) {\n    throw new TypeError('strings must be an array');\n  }\n\n  return strings.reduce((previous, current) => previous + current, '');\n};\n\n/* Concatenate list of strings into a single string\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([])\n  ''\n  */\nconst concatenate = (strings) => {\n  if (!Array.isArray(strings)) {\n    throw new TypeError('strings must be an array');\n  }\n\n  return strings.reduce((previous, current) => previous + current, '');\n};\n\n/* Concatenate list of strings into a single string\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([])\n  ''\n  */\nconst concatenate = (strings) => {\n  if (!Array.isArray(strings)) {\n    throw new TypeError('strings must be an array');\n  }\n\n  return strings.reduce((previous, current) => previous + current, '');\n};\n\n/* Concatenate list of strings into a single string\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([])\n  ''\n  */\nconst concatenate = (strings) => {\n  if (!Array.isArray(strings)) {\n    throw new TypeError('strings must be an array');\n  }\n\n  return strings.reduce((previous, current) => previous + current, '');\n};\n\n/* Concatenate list of strings into a single string\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([])\n  ''\n  */\nconst concatenate = (strings) => {\n  if (!Array.isArray(strings)) {\n    throw new TypeError('strings must be an array');\n  }\n\n  return strings.reduce((previous, current) => previous + current, '');\n};\n\n/* Concatenate list of strings into a single string\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([])\n  ''\n  */\nconst concatenate = (strings) => {\n  if (!Array.isArray(strings)) {\n    throw new TypeError('strings must be an array');\n  }\n\n  return strings.reduce((previous, current) => previous + current, '');\n};\n\n/* Concatenate list of strings into a single string\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([])\n  ''\n  */\nconst concatenate = (strings) => {\n  if (!Array.isArray(strings)) {\n    throw new TypeError('strings must be an array');\n  }\n\n  return strings.reduce((previous, current) => previous + current, '');\n};\n\n/* Concatenate list of strings into a single string\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([])\n  ''\n  */\nconst concatenate = (strings) => {\n  if (!Array.isArray(strings)) {\n    throw new TypeError('strings must be an array');\n  }\n\n  return strings.reduce((previous, current) => previous + current, '');\n};\n\n/* Concatenate list of strings into a single string\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([])\n  ''\n  */\nconst concatenate = (strings) => {\n  if (!Array.isArray(strings)) {\n    throw new TypeError('strings must be an array');\n  }\n\n  return strings.reduce((previous, current) => previous + current, '');\n};\n\n/* Concatenate list of strings into a single string\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([])\n  ''\n  */\nconst concatenate = (strings) => {\n  if (!Array.isArray(strings)) {\n    throw new TypeError('strings must be an array');\n  }\n\n  return strings.reduce((previous, current) => previous + current, '');\n};\n\n/* Concatenate list of strings into a single string\n  >>> concatenate(["}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n    return strings.filter(\n        (s) => s.startsWith(prefix)\n    );\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix2 = (strings, prefix) => {\n    return [...new Set(strings.map((s) => s.startsWith(prefix)))];\n};\n\nmodule.exports = {\n    filterByPrefix,\n    filterByPrefix2\n};<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0)\n}\n\n/*\n  Returns the index of the largest element in the list.\n  >>> getMax([1, 2, 3, 4, 5])\n  5\n  >>> getMax([-1, 2, -4, 5, 6])\n  5\n  >>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  5\n  */\nconst getMax = (l) => {\n  return l.reduce((a, b) => {\n    return (a > b)? a : b\n  })\n}\n\n/*\n  Returns the index of the smallest element in the list.\n  >>> getMin([1, 2, 3, 4, 5])\n  1\n  >>> getMin([-1, 2, -4, 5, 6])\n  -4\n  >>> getMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst getMin = (l) => {\n  return l.reduce((a, b) => {\n    return (a < b)? a : b\n  })\n}\n\n/*\n  Returns the mean of the list.\n  >>> getMean([1, 2, 3, 4, 5])\n  3.5\n  >>> getMean([-1, 2, -4, 5, 6])\n  3.5\n  >>> getMean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3.5\n  */\nconst getMean = (l) => {\n  return l.reduce((a, b) => {\n    return a + b\n  }) / l.length\n}\n\n/*\n  Returns the sum of the list.\n  >>> getSum([1, 2, 3, 4, 5])\n  15\n  >>> getSum([-1, 2, -4, 5, 6])\n  15\n  >>> getSum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  55\n  */\nconst getSum = (l) => {\n  return l.reduce((a, b) => {\n    return a + b\n  })\n}\n\n/*\n  Returns the mode of the list.\n  >>> getMode([1, 2, 3, 4, 5])\n  2\n  >>> getMode([-1, 2, -4, 5, 6])\n  -4\n  >>> getMode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst getMode = (l) => {\n  return getMax(l)\n}\n\n/*\n  Returns the median of the list.\n  >>> getMedian([1, 2, 3, 4, 5])\n  3.0\n  >>> getMedian([-1, 2, -4, 5, 6])\n  3.0\n  >>> getMedian([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3.0\n  */\nconst getMedian = (l) => {\n  return getMean(getPositive(l))\n}\n\n/*\n  Returns the mode of the list.\n  >>> getMode([1, 2, 3, 4, 5])\n  2\n  >>> getMode([-1, 2, -4, 5, 6])\n  -4\n  >>> getMode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst getMode2 = (l) => {\n  return getMax(l)\n}\n\n/*\n  Returns the median of the list.\n  >>> getMedian([1, 2, 3, 4, 5])\n  3.0\n  >>> getMedian([-1, 2, -4, 5, 6])\n  3.0\n  >>> getMedian([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3.0\n  */\nconst getMedian2 = (l) => {\n  return getMean(getPositive(l))\n}\n\n/*\n  Returns the mode of the list.\n  >>> getMode([1, 2, 3, 4, 5])\n  2\n  >>> getMode([-1, 2, -4, 5, 6])\n  -4\n  >>> getMode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst getMedian3 = (l) => {\n  return getMode(l)\n}\n\n/*\n  Returns the mode of the list.\n  >>> getMode([1, 2, 3, 4, 5])\n  2\n  >>> getMode([-1, 2, -4, 5, 6])\n  -4\n  >>> getMode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst getMedian4 = (l) => {\n  return getMode2(l)\n}\n\n/*\n  Returns the mode of the list.\n  >>> getMode([1, 2, 3, 4, 5])\n  2\n  >>> getMode([-1, 2, -4, 5, 6])\n  -4\n  >>> getMode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst getMedian5 = (l) => {\n  return getMode3(l)\n}\n\n/*\n  Returns the mode of the list.\n  >>> getMode([1, 2, 3, 4, 5])\n  2\n  >>> getMode([-1, 2, -4, 5, 6])\n  -4\n  >>> getMode([5, 3, -5, 2, -3, 3, 9, 0"}
{"task_id": "JavaScript/31", "prompt": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  let x = Math.floor(Math.sqrt(n));\n  for (let i = 2; i <= x; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if a number is divisible by b, and false otherwise.\n  >>> isDivisible(8, 3)\n  true\n  >>> isDivisible(8, 4)\n  false\n  >>> isDivisible(8, 5)\n  true\n  >>> isDivisible(8, 6)\n  false\n  >>> isDivisible(8, 7)\n  true\n  >>> isDivisible(8, 8)\n  true\n  >>> isDivisible(8, 9)\n  false\n  >>> isDivisible(8, 10)\n  false\n  */\nconst isDivisible = (n, b) => {\n  return (n % b === 0);\n};\n\n/*Return true if a number is divisible by all numbers in b, and false otherwise.\n  >>> isDivisibleAll(8, [3, 4, 6, 8, 9])\n  true\n  >>> isDivisibleAll(8, [3, 4, 6, 7, 9])\n  false\n  >>> isDivisibleAll(8, [3, 4, 5, 6, 7, 9])\n  true\n  >>> isDivisibleAll(8, [3, 4, 5, 7, 9])\n  false\n  >>> isDivisibleAll(8, [3, 4, 5, 8, 9])\n  true\n  >>> isDivisibleAll(8, [3, 4, 5, 7, 8, 9])\n  true\n  >>> isDivisibleAll(8, [3, 4, 6, 8, 9])\n  false\n  >>> isDivisibleAll(8, [3, 4, 6, 7, 8, 9])\n  true\n  */\nconst isDivisibleAll = (n, b) => {\n  return (b.every(element => isDivisible(n, element)));\n};\n\n/*Return a list of prime numbers less than n.\n  >>> primeList(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  >>> primeList(25)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  */\nconst primeList = (n) => {\n  let primes = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Return a list of numbers that are divisible by all numbers in b.\n  >>> divisors(8, [3, 4, 6, 8, 9])\n  [3, 4, 6, 8, 9]\n  >>> divisors(8, [3, 4, 5, 6, 7, 9])\n  [3, 4, 5, 6, 7, 9]\n  >>> divisors(8, [3, 4, 5, 8, 9])\n  [3, 4, 5, 8, 9]\n  >>> divisors(8, [3, 4, 5, 7, 9])\n  [3, 4, 5, 7, 9]\n  >>> divisors(8, [3, 4, 6, 8, 9])\n  []\n  >>> divisors(8, [3, 4, 6, 7, 8, 9])\n  [3, 4, 6, 7, 8, 9]\n  */\nconst divisors = (n, b) => {\n  let divisors = [];\n  for (let i = 1; i < n; i++) {\n    if (isDivisibleAll(n, b)) {\n      divisors.push(n);\n    }\n  }\n  return divisors;\n};\n\n/*Return a list of numbers that are divisible by a number in b.\n  >>> divisors(8, [3, 4, 6, 8, 9])\n  [3, 4, 6, 8, 9]\n  >>> divisors(8, [3, 4, 5, 6, 7, 9])\n  [3, 4, 5, 6, 7, 9]\n  >>> divisors(8, [3, 4, 5, 8, 9])\n  [3, 4, 5, 8, 9]\n  >>> divisors(8, [3, 4, 6, 8, 9])\n  []\n  >>> divisors(8, [3, 4, 6, 7, 8, 9])\n  [3, 4, 6, 7, 8, 9]\n  */\nconst divisorsBy = (n, b) => {\n  let divisors = [];\n  for (let i = 1; i < n; i++) {\n    if (isDivisible(n, b)) {\n      divisors.push(n);\n    }\n  }\n  return divisors;\n};\n\n/*Return a list of numbers that are divisible by a number in b.\n  >>> divisors(8, [3, 4, 6, 8, 9])\n  [3, 4, 6, 8, 9]\n  >>> divisors(8, [3, 4, 5, 6, 7, 9])\n  [3, 4, 5, 6, 7, 9]\n  >>> divisors(8, [3, 4, 5, 8, 9])\n  [3, 4, 5, 8, 9]\n  >>> divisors(8, [3, 4, 6, 8, 9])\n  []\n  >>> divisors(8, [3, 4, 6, 7, 8, 9])\n  [3, 4, 6, 7, 8, 9]\n  */\nconst divisorsByAll = (n, b) => {\n  let divisors = [];\n  for (let i = 1; i < n; i++) {\n    if ("}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const x = Math.pow(2, -1)\n  const n = xs.length\n  const poly = xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0)\n  const t = (x * poly)\n  for (let i = 0; i < n; i++) {\n    const x0 = Math.pow(x, i)\n    if (Math.abs(t - x0) < Math.pow(10, -15)) {\n      return x0\n    }\n  }\n  return 0\n}\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  return l.sort((a, b) => {\n    return a % 3 === b % 3? a - b : b - a;\n  });\n};\n\n//Test\nconsole.log(sortThird([1, 2, 3]));\nconsole.log(sortThird([5, 6, 3, 4, 8, 9, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return l.reduce((acc, item) => {\n    if (!acc.includes(item)) {\n      acc.push(item);\n    }\n    return acc;\n  }, []);\n};\n\n/**\n  * Return the length of a string\n  * @param {string} str\n  * @returns {number}\n  */\nconst strlen = (str) => {\n  return str.length;\n};\n\n/**\n  * Return the length of a list\n  * @param {Array} l\n  * @returns {number}\n  */\nconst listlen = (l) => {\n  return l.length;\n};\n\n/**\n  * Return the length of an object\n  * @param {Object} o\n  * @returns {number}\n  */\nconst objlen = (o) => {\n  return Object.keys(o).length;\n};\n\n/**\n  * Return the length of a list\n  * @param {Array} l\n  * @returns {number}\n  */\nconst listlen2 = (l) => {\n  return l.length;\n};\n\n/**\n  * Return a new list containing elements that are present in the first\n  * list but not the second\n  * @param {Array} list1\n  * @param {Array} list2\n  * @returns {Array}\n  */\nconst listdiff = (list1, list2) => {\n  const diff = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (!list2.includes(list1[i])) {\n      diff.push(list1[i]);\n    }\n  }\n  return diff;\n};\n\n/**\n  * Return a new list containing elements that are present in both lists\n  * @param {Array} list1\n  * @param {Array} list2\n  * @returns {Array}\n  */\nconst listinter = (list1, list2) => {\n  const inter = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list2.includes(list1[i])) {\n      inter.push(list1[i]);\n    }\n  }\n  return inter;\n};\n\n/**\n  * Return a new list containing elements that are present in both lists\n  * @param {Array} list1\n  * @param {Array} list2\n  * @returns {Array}\n  */\nconst listinter2 = (list1, list2) => {\n  const inter = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list2.includes(list1[i])) {\n      inter.push(list1[i]);\n    }\n  }\n  return inter;\n};\n\n/**\n  * Return a new list containing elements that are present in the first\n  * list but not the second\n  * @param {Array} list1\n  * @param {Array} list2\n  * @returns {Array}\n  */\nconst listdiff2 = (list1, list2) => {\n  const diff = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (!list2.includes(list1[i])) {\n      diff.push(list1[i]);\n    }\n  }\n  return diff;\n};\n\n/**\n  * Return the intersection of two lists\n  * @param {Array} list1\n  * @param {Array} list2\n  * @returns {Array}\n  */\nconst listinter3 = (list1, list2) => {\n  const inter = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list2.includes(list1[i])) {\n      inter.push(list1[i]);\n    }\n  }\n  return inter;\n};\n\n/**\n  * Return the intersection of two lists\n  * @param {Array} list1\n  * @param {Array} list2\n  * @returns {Array}\n  */\nconst listinter4 = (list1, list2) => {\n  const inter = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list2.includes(list1[i])) {\n      inter.push(list1[i]);\n    }\n  }\n  return inter;\n};\n\n/**\n  * Return a new list containing elements that are present in both lists\n  * @param {Array} list1\n  * @param {Array} list2\n  * @returns {Array}\n  */\nconst listunion = (list1, list2) => {\n  const union = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list2.includes(list1[i])) {\n      union.push(list1[i]);\n    }\n  }\n  return union;\n};\n\n/**\n  * Return a new list containing elements that are present in both lists\n  * @param {Array} list1\n  * @param {Array} list2\n  * @returns {Array}\n  */\nconst listunion2 = (list1, list2) => {\n  const union = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list2.includes(list1[i])) {\n      union.push(list1[i]);\n    }\n  }\n  return union;\n};\n\n/**\n  * Return a new list containing elements that are present in the first\n  * list but not the second\n  * @param {Array} list1\n  * @param {Array} list2\n  * @returns {Array}\n  */\nconst listdiff3 = (list1, list2) => {\n  const diff = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (!list2.includes(list1[i])) {\n      diff.push(list1[i]);\n    }\n  }\n  return diff;\n};\n\n/**\n  * Return a new list containing elements that are present in both lists\n  * @param {Array} list1\n  * @param {Array} list2"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let result = -Infinity;\n  l.forEach((el) => {\n    if (el > result) result = el;\n  });\n  return result;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizz = 0;\n  let buzz = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0) {\n      fizz++;\n    } else if (i % 13 === 0) {\n      buzz++;\n    }\n  }\n  if (fizz === 3) {\n    return 'fizz';\n  } else if (buzz === 3) {\n    return 'buzz';\n  } else if (fizz === buzz) {\n    return 'fizz buzz';\n  } else {\n    return fizz;\n  }\n};\n\n// # BEGIN SOLUTION\nconst fizzBuzz = (n) => {\n  let fizz = 0;\n  let buzz = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0) {\n      fizz++;\n    } else if (i % 13 === 0) {\n      buzz++;\n    }\n  }\n  if (fizz === 3) {\n    return 'fizz';\n  } else if (buzz === 3) {\n    return 'buzz';\n  } else if (fizz === buzz) {\n    return 'fizz buzz';\n  } else {\n    return fizz;\n  }\n};\n// # END SOLUTION\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let lEven = []\n  let lOdd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      lEven.push(l[i])\n    } else {\n      lOdd.push(l[i])\n    }\n  }\n  return [...lEven,...lOdd]\n}\n\nmodule.exports = sortEven\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group[2] + group[0] + group[1]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoded string. */ const decodeCyclic_reverse = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group[2] + group[1] + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n == 1) {\n    return 2;\n  }\n  const a = primeFib(n - 1);\n  const b = primeFib(n - 2);\n  const c = primeFib(n - 3);\n  return a + b + c;\n};\n\nconsole.log(primeFib(5));\n\n/*\n  primeSqr returning n-th number that is a square of a Fibonacci number and it's also prime.\n  >>> primeSqr(1)\n  2\n  >>> primeSqr(2)\n  4\n  >>> primeSqr(3)\n  9\n  >>> primeSqr(4)\n  16\n  >>> primeSqr(5)\n  37\n  */\nconst primeSqr = (n) => {\n  if (n == 1) {\n    return 2;\n  }\n  const a = primeFib(n - 1);\n  const b = primeFib(n - 2);\n  const c = primeFib(n - 3);\n  return a * a + b * b + c * c;\n};\n\nconsole.log(primeSqr(5));\n\n/*\n  primePow returning n-th number that is a power of a Fibonacci number and it's also prime.\n  >>> primePow(1)\n  2\n  >>> primePow(2)\n  4\n  >>> primePow(3)\n  9\n  >>> primePow(4)\n  16\n  >>> primePow(5)\n  37\n  >>> primePow(6)\n  89\n  >>> primePow(7)\n  144\n  */\nconst primePow = (n) => {\n  if (n == 1) {\n    return 2;\n  }\n  const a = primeFib(n - 1);\n  const b = primeFib(n - 2);\n  const c = primeFib(n - 3);\n  return a * a * a + b * b * b + c * c * c;\n};\n\nconsole.log(primePow(5));\n\n/*\n  primePower returning n-th number that is a power of a Fibonacci number and it's also prime.\n  >>> primePower(1)\n  2\n  >>> primePower(2)\n  4\n  >>> primePower(3)\n  9\n  >>> primePower(4)\n  16\n  >>> primePower(5)\n  37\n  >>> primePower(6)\n  89\n  >>> primePower(7)\n  144\n  */\nconst primePower = (n) => {\n  if (n == 1) {\n    return 2;\n  }\n  const a = primeFib(n - 1);\n  const b = primeFib(n - 2);\n  const c = primeFib(n - 3);\n  return a * a * a * a + b * b * b * b + c * c * c * c;\n};\n\nconsole.log(primePower(5));\n\n/*\n  primePow2 returning n-th number that is a power of a Fibonacci number and it's also prime.\n  >>> primePow2(1)\n  2\n  >>> primePow2(2)\n  4\n  >>> primePow2(3)\n  9\n  >>> primePow2(4)\n  16\n  >>> primePow2(5)\n  37\n  >>> primePow2(6)\n  89\n  >>> primePow2(7)\n  144\n  */\nconst primePow2 = (n) => {\n  if (n == 1) {\n    return 2;\n  }\n  const a = primeFib(n - 1);\n  const b = primeFib(n - 2);\n  const c = primeFib(n - 3);\n  return a * a * a * a * a + b * b * b * b * b + c * c * c * c * c;\n};\n\nconsole.log(primePow2(5));\n\n/*\n  primePow3 returning n-th number that is a power of a Fibonacci number and it's also prime.\n  >>> primePow3(1)\n  2\n  >>> primePow3(2)\n  4\n  >>> primePow3(3)\n  9\n  >>> primePow3(4)\n  16\n  >>> primePow3(5)\n  37\n  >>> primePow3(6)\n  89\n  >>> primePow3(7)\n  144\n  */\nconst primePow3 = (n) => {\n  if (n == 1) {\n    return 2;\n  }\n  const a = primeFib(n - 1);\n  const b = primeFib(n - 2);\n  const c = primeFib(n - 3);\n  return a * a * a * a * a * a + b * b * b * b * b + c * c * c * c * c * c;\n};\n\nconsole.log(primePow3(5));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let ret = false\n  for (let i = 0; i < l.length - 2; i++) {\n    if (l[i] + l[i + 1] + l[i + 2] === 0) {\n      ret = true\n      break\n    }\n  }\n  return ret\n}\n\n/*\n  findDuplicates takes a list of integers as an input. it returning the number of distinct elements in the list.\n\n  >>> findDuplicates([1, 2, 3, 1, 4, 5, 1])\n  2\n  >>> findDuplicates([1, 2, 3, 4, 5, 6, 7])\n  1\n  >>> findDuplicates([1, 1])\n  1\n  >>> findDuplicates([1])\n  1\n  */\nconst findDuplicates = (l) => {\n  let ret = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] === l[i + 1]) {\n      ret++\n    }\n  }\n  return ret\n}\n\n/*\n  findTriplesSumToZero takes a list of integers as an input. it returning the number of distinct elements in the list.\n\n  >>> findTriplesSumToZero([1, 2, 3, 4, 5, 6, 7])\n  3\n  >>> findTriplesSumToZero([1, 2, 3, 4, 5, 6, 7, 8])\n  2\n  >>> findTriplesSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1\n  >>> findTriplesSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  0\n  >>> findTriplesSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  0\n  >>> findTriplesSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  0\n  >>> findTriplesSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  0\n  >>> findTriplesSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  0\n  >>> findTriplesSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  0\n  >>> findTriplesSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  0\n  >>> findTriplesSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  0\n  >>> findTriplesSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  0\n  >>> findTriplesSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  0\n  >>> findTriplesSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  0\n  >>> findTriplesSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  0\n  >>> findTriplesSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  0\n  >>> findTriplesSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  0\n  >>> findTriplesSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  0\n  >>> findTriplesSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  0\n  >>> findTriplesSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  0\n  >>> findTriplesSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  0\n  >>> findTriplesSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  0\n  >>> findTriplesSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n    var left = 0;\n    var right = 0;\n    var curr = 0;\n    for (var i = 0; i < n; i++) {\n        var car = i % 2;\n        if (car === 0) {\n            curr += 1;\n            left += 1;\n        } else {\n            curr += 1;\n            right += 1;\n        }\n    }\n    return (left + right) % 2 === 0? 2 * n - 1 - (curr + right) : curr;\n};\n\nconsole.log(carRaceCollision(3)); // 3\nconsole.log(carRaceCollision(4)); // 7\nconsole.log(carRaceCollision(5)); // 4\nconsole.log(carRaceCollision(6)); // 6\nconsole.log(carRaceCollision(7)); // 8\nconsole.log(carRaceCollision(8)); // 5\nconsole.log(carRaceCollision(9)); // 9\nconsole.log(carRaceCollision(10)); // 6\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const inc = (l, i, a) => {\n    if (i < l.length) {\n      return [l[i], a].concat(inc(l, i + 1, a));\n    }\n    return l.slice(0, i).concat(a);\n  };\n  return inc(l, 0, []);\n};\n\nexport default incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  return l.reduce((previousValue, currentValue, i) => {\n    if (previousValue === 0 && currentValue!== 0) {\n      return true;\n    }\n    if (previousValue!== 0 && currentValue === 0) {\n      return false;\n    }\n    return previousValue + currentValue;\n  }, 0) === 0;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const d = x.toString(base);\n  const r = d.replace(/\\d/g, (x) => {\n    return x.toString(10);\n  });\n  return r;\n};\n\n// test\nchangeBase(12, 3);\nchangeBase(123, 2);\nchangeBase(1000, 2);\nchangeBase(1111, 2);\nchangeBase(12345, 2);\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs((a * h) / 2)\n}\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs((a * h) / 2)\n}\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs((a * h) / 2)\n}\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs((a * h) / 2)\n}\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs((a * h) / 2)\n}\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs((a * h) / 2)\n}\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs((a * h) / 2)\n}\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs((a * h) / 2)\n}\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs((a * h) / 2)\n}\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs((a * h) / 2)\n}\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs((a * h) / 2)\n}\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs((a * h) / 2)\n}\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs((a * h) / 2)\n}\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs((a * h) / 2)\n}\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs((a * h) / 2)\n}\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs((a * h) / 2)\n}\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs((a * h) / 2)\n}\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs((a * h) / 2)\n}\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs((a * h) / 2)\n}\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs((a * h) / 2)\n}\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs((a * h) / 2)\n}\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs((a * h) / 2)\n}\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs((a * h) / 2)\n}\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs((a * h) / 2)\n}\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 2) return n;\n  else return fib4(n - 1) + fib4(n - 2);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return undefined;\n  if (l.length === 1) return l[0];\n  let middle = Math.floor((l.length - 1) / 2);\n  return (l[middle] + l[middle + 1]) / 2;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let length = text.length;\n    let first = text.charAt(0);\n    let last = text.charAt(length - 1);\n    let reverse = text.charAt(0);\n    for(let i = 1; i < length - 1; i++){\n        if(first === reverse){\n            return true;\n        }\n        reverse = first;\n        first = last;\n        last = reverse;\n    }\n    return false;\n};\n\n/*\n  Check if two strings are anagram\n  >>> isAnagram('abc', 'bca')\n  false\n  >>> isAnagram('abc', 'cba')\n  true\n  >>> isAnagram('abc', 'cba')\n  true\n  >>> isAnagram('abc', 'abc')\n  true\n  >>> isAnagram('abc', 'abc')\n  true\n  >>> isAnagram('abc', 'abd')\n  false\n  */\nconst isAnagram = (a, b) => {\n    let aLength = a.length;\n    let bLength = b.length;\n    let length = aLength > bLength? bLength : aLength;\n    let counter = {};\n    for(let i = 0; i < length; i++){\n        counter[a.charAt(i)] = (counter[a.charAt(i)] || 0) + 1;\n    }\n    for(let i = 0; i < length; i++){\n        if(counter[b.charAt(i)] === 0){\n            return false;\n        }\n        counter[b.charAt(i)] = (counter[b.charAt(i)] || 0) - 1;\n    }\n    return true;\n};\n\n/*\n  Check if string contains all of the characters\n  >>> containsAll('abc', 'abd')\n  false\n  >>> containsAll('abc', 'abc')\n  true\n  >>> containsAll('abc', 'cba')\n  true\n  >>> containsAll('abc', 'cba')\n  true\n  >>> containsAll('abc', 'abc')\n  true\n  >>> containsAll('abc', 'abd')\n  true\n  */\nconst containsAll = (str, characters) => {\n    let length = characters.length;\n    let contains = characters.every((char, index) => {\n        return str.indexOf(char)!== -1;\n    });\n    return contains;\n};\n\n/*\n  Check if string contains any of the characters\n  >>> containsAny('abc', 'abd')\n  true\n  >>> containsAny('abc', 'cba')\n  true\n  >>> containsAny('abc', 'cba')\n  true\n  >>> containsAny('abc', 'cba')\n  true\n  >>> containsAny('abc', 'abc')\n  true\n  >>> containsAny('abc', 'abd')\n  true\n  */\nconst containsAny = (str, characters) => {\n    let length = characters.length;\n    let contains = characters.some((char, index) => {\n        return str.indexOf(char)!== -1;\n    });\n    return contains;\n};\n\n/*\n  Check if two strings are equal ignoring the case\n  >>> equalsIgnoreCase('abc', 'ABC')\n  true\n  >>> equalsIgnoreCase('abc', 'abc')\n  true\n  >>> equalsIgnoreCase('abc', 'ABC')\n  true\n  >>> equalsIgnoreCase('abc', 'ABC')\n  true\n  >>> equalsIgnoreCase('abc', 'Abc')\n  false\n  >>> equalsIgnoreCase('abc', 'AbC')\n  false\n  >>> equalsIgnoreCase('abc', 'aBC')\n  false\n  >>> equalsIgnoreCase('abc', 'Abc')\n  true\n  >>> equalsIgnoreCase('abc', 'abc')\n  true\n  >>> equalsIgnoreCase('abc', 'abc')\n  true\n  >>> equalsIgnoreCase('abc', 'abc')\n  true\n  >>> equalsIgnoreCase('abc', 'abc')\n  true\n  >>> equalsIgnoreCase('abc', 'abc')\n  true\n  >>> equalsIgnoreCase('abc', 'abc')\n  true\n  */\nconst equalsIgnoreCase = (a, b) => {\n    let length = a.length;\n    let bLength = b.length;\n    let min = Math.min(length, bLength);\n    let i = 0;\n    while(i < min && a.charAt(i) === b.charAt(i)){\n        i++;\n    }\n    if(i === min){\n        return true;\n    }\n    return false;\n};\n\n/*\n  Check if two strings are similar\n  >>> similar('abc', 'abc')\n  true\n  >>> similar('abc', 'abc')\n  true\n  >>> similar('abc', 'abc')\n  true\n  >>> similar('abc', 'abcd')\n  false\n  >>> similar('abc', 'abcd')\n  false\n  >>> similar('abc', 'a')\n  false\n  >>> similar('abc', 'abd')\n  false\n  >>> similar('abc', 'abcd')\n  false\n  >>> similar('abc', 'abcd')\n  false\n  >>> similar('abc', 'abcd')\n  false\n  >>> similar('abc', 'abcd')\n  false\n  >>> similar('abc', 'abcd')\n  false\n  */\nconst similar = (a, b) => {\n    let length = a.length;\n    let bLength = b.length;\n    let min = Math.min(length, bLength);\n    let i = 0;\n    while(i < min && a.charAt(i) === b.charAt(i)){\n        i++;\n    }\n    if(i === min){\n        return true;\n    }\n    return false;\n};\n\nmodule.exports = {\n    isPalindrome: isPalindrome,\n    isAnagram: isAnagram,\n    containsAll: containsAll,\n    containsAny: containsAny,\n    equalsIgnoreCase: equalsIgnoreCase,\n    similar: similar\n};<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n    const mod = n % p;\n    if (mod === 0) return p;\n    else return mod;\n};\n\n// Modulo, division and power\nconst mod = (n, p) => {\n    const modp = modp(n, p);\n    const modp2 = modp(modp, p);\n    const modp3 = modp2 * p;\n    return modp3;\n};\n\n// If it's a prime number, it can't be divisible by any other number\nconst isPrime = (n) => {\n    const prime = /^(2|3|5|7|11|13|17|19|23|29|31|37|41|43|47|53|59|61|67|71|73|79|83|89|97)$/;\n    return prime.test(n);\n};\n\n// If it's a multiple of a prime number, it can't be divisible by any other number\nconst isMultiple = (n) => {\n    const multiple = /^(2|3|5|7|11|13|17|19|23|29|31|37|41|43|47|53|59|61|67|71|73|79|83|89|97)$/;\n    return multiple.test(n);\n};\n\n// Calculate the prime factorization of n\nconst primeFactorization = (n) => {\n    const primeFactors = [];\n    const i = 1;\n    while (i <= n) {\n        if (isPrime(i)) {\n            primeFactors.push(i);\n            n -= i;\n        }\n        i += 1;\n    }\n    return primeFactors;\n};\n\n// Calculate the number of factors of n\nconst factorization = (n) => {\n    const factors = [];\n    const i = 1;\n    while (i <= n) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n    return factors;\n};\n\n// Calculate the sum of all the primes less than n\nconst primeSum = (n) => {\n    const primeSum = 0;\n    let i = 1;\n    while (i <= n) {\n        if (isPrime(i)) {\n            primeSum += i;\n        }\n        i += 1;\n    }\n    return primeSum;\n};\n\n// Calculate the sum of the prime factors of n\nconst primeFactorSum = (n) => {\n    const primeFactorSum = 0;\n    let i = 1;\n    while (i <= n) {\n        if (n % i === 0) {\n            primeFactorSum += i;\n            n /= i;\n        }\n        i += 1;\n    }\n    return primeFactorSum;\n};\n\n// Calculate the number of different prime factors of n\nconst primeFactorDiff = (n) => {\n    const primeFactors = primeFactorization(n);\n    return primeFactors.length;\n};\n\n// Calculate the number of different prime factors of n\nconst factorDiff = (n) => {\n    const factors = factorization(n);\n    return factors.length;\n};\n\n// If it's a perfect number, it can't be divisible by any other number\nconst isPerfect = (n) => {\n    const perfect = /^(1|3|5|7|9|11|13|15|17|19|21|23|25|27|29|31|33|35|37|39|41|43|45|47|49|51|53|55|57|59|61|63|65|67|69|71|73|75|77|79|81|83|85|87|89|91|93|95|97|99)$/;\n    return perfect.test(n);\n};\n\n// If it's a perfect square, it can't be divisible by any other number\nconst isPerfectSquare = (n) => {\n    const perfectSquare = /^(1|4|9|16|25|36|49|64|81|100)$/;\n    return perfectSquare.test(n);\n};\n\n// Calculate the sum of the multiples of n\nconst multipleSum = (n) => {\n    const multipleSum = 0;\n    let i = 1;\n    while (i <= n) {\n        if (n % i === 0) {\n            multipleSum += i;\n            n /= i;\n        }\n        i += 1;\n    }\n    return multipleSum;\n};\n\n// Calculate the sum of the multiples of n\nconst perfectSum = (n) => {\n    const perfectSum = 0;\n    let i = 1;\n    while (i <= n) {\n        if (isPerfect(i)) {\n            perfectSum += i;\n            n -= i;\n        }\n        i += 1;\n    }\n    return perfectSum;\n};\n\n// Calculate the sum of the multiples of n\nconst primeSumPerfect = (n) => {\n    const perfectSum = 0;\n    let i = 1;\n    while (i <= n) {\n        if (isPerfect(i)) {\n            perfectSum += i;\n        }\n        i += 1;\n    }\n    return perfectSum;\n};\n\n// Calculate the sum of the multiples of n\nconst primeSumMultiple = (n) => {\n    const multipleSum = 0;\n    let i = 1;\n    while (i <= n) {\n        if (isMultiple(i)) {\n            multipleSum += i;\n            n -= i;\n        }\n        i += 1;\n    }\n    return multipleSum;\n};\n\n// Calculate the sum of the multiples of n\nconst primeSumPerfectMultiple = (n) => {\n    const perfectSum = 0;\n    let i = 1;\n    while (i <= n) {\n        if (isMultiple(i) && isPerfect(i)) {\n            perfectSum += i;\n            n -= i;\n        }\n        i += 1;\n    }\n    return perfectSum;"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode((\"a\".charCodeAt(0) + (ch.charCodeAt(0) - 5) % 26) - 1) + \"a\").joins(\"\");\n}\n\n/*\n  returns decoding string by shifting every character by 5 in the alphabets. */ const decodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a','e','i','o','u']\n  return text.replace(/[a-z]/g, (letter) => {\n    const index = vowels.indexOf(letter)\n    if (index!== -1) {\n      return letter\n    }\n  })\n}\n\n/*\n  removeDiacritics is a function that takes string and returns string without diacritics.\n  >>> removeDiacritics('àa')\n  'aaa'\n  >>> removeDiacritics('àaà')\n  'aaa'\n  >>> removeDiacritics('àaààa')\n  'aaa'\n  >>> removeDiacritics('àaààaààa')\n  'aaa'\n  >>> removeDiacritics('àaààaààaààa')\n  'aaa'\n  >>> removeDiacritics('àaààaààaààaààaààaàaàaààaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaàaà"}
{"task_id": "JavaScript/52", "prompt": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every((v, i) => v < t);\n};\n\nmodule.exports = belowThreshold;\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n}\n\n// export the function\nconst addExported = add;\n\nexport default addExported;\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const chars0 = s0.split('');\n    const chars1 = s1.split('');\n    for (let i = 0; i < chars0.length; i++) {\n        if (chars0[i]!= chars1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\nmodule.exports = sameChars;\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  "}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketsLength = brackets.length\n  for(let i = 0; i < bracketsLength; i++) {\n    if(brackets[i] === '<') {\n      if(i === bracketsLength - 1) {\n        return false\n      } else if(brackets[i + 1] === '>') {\n        bracketsLength -= 1\n      }\n    } else if(brackets[i] === '>') {\n      if(i === 0) {\n        return false\n      } else if(brackets[i - 1] === '<') {\n        bracketsLength -= 1\n      }\n    }\n  }\n  return true\n}\n\nmodule.exports = correctBracketing\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const a = l.slice(0)\n  const b = l.slice(1)\n  const i = a.indexOf(b[0])\n  if (i == -1) return false\n  if (i == 0) return a[1] >= b[1]\n  return a[i + 1] >= b[i + 1]\n}\n\n/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic(['a', 'b', 'c', 'd', 'e'])\n  true\n  >>> monotonic(['a', 'b', 'c', 'f', 'e'])\n  false\n  >>> monotonic(['a', 'b', 'c', 'd', 'f', 'e'])\n  true\n  */\nconst monotonic = (l) => {\n  const a = l.slice(0)\n  const b = l.slice(1)\n  const i = a.indexOf(b[0])\n  if (i == -1) return false\n  if (i == 0) return a[1] >= b[1]\n  return a[i + 1] >= b[i + 1]\n}\n\n/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'])\n  true\n  >>> monotonic(['a', 'b', 'c', 'f', 'e', 'g', 'h', 'i', 'j'])\n  false\n  >>> monotonic(['a', 'b', 'c', 'd', 'f', 'e', 'g', 'h', 'i', 'j'])\n  true\n  */\nconst monotonic = (l) => {\n  const a = l.slice(0)\n  const b = l.slice(1)\n  const i = a.indexOf(b[0])\n  if (i == -1) return false\n  if (i == 0) return a[1] >= b[1]\n  return a[i + 1] >= b[i + 1]\n}\n\n/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'])\n  true\n  >>> monotonic(['a', 'b', 'c', 'f', 'e', 'g', 'h', 'i', 'j', 'k'])\n  false\n  >>> monotonic(['a', 'b', 'c', 'd', 'f', 'e', 'g', 'h', 'i', 'j', 'k'])\n  true\n  */\nconst monotonic = (l) => {\n  const a = l.slice(0)\n  const b = l.slice(1)\n  const i = a.indexOf(b[0])\n  if (i == -1) return false\n  if (i == 0) return a[1] >= b[1]\n  return a[i + 1] >= b[i + 1]\n}\n\n/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'])\n  true\n  >>> monotonic(['a', 'b', 'c', 'f', 'e', 'g', 'h', 'i', 'j', 'k', 'l'])\n  false\n  >>> monotonic(['a', 'b', 'c', 'd', 'f', 'e', 'g', 'h', 'i', 'j', 'k', 'l'])\n  true\n  */\nconst monotonic = (l) => {\n  const a = l.slice(0)\n  const b = l.slice(1)\n  const i = a.indexOf(b[0])\n  if (i == -1) return false\n  if (i == 0) return a[1] >= b[1]\n  return a[i + 1] >= b[i + 1]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  if (l1.length === 0 || l2.length === 0) {\n    return []\n  }\n  let count = 0\n  let result = []\n  let i = 0\n  let j = 0\n  let a = l1[i]\n  let b = l2[j]\n  while (a && b) {\n    if (a === b) {\n      result.push(a)\n      count++\n      i++\n      j++\n    } else if (a < b) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return result.slice(0, count)\n}\n\n/*Return true if l1 is equal to l2.\n  >>> common([1, 3, 5, 6, 7, 8], [1, 3, 5, 6, 7, 8])\n  True\n  >>> common([1, 3, 5, 6, 7, 8], [1, 3, 5, 6, 7, 9])\n  False\n  >>> common([1, 3, 5, 6, 7, 8], [1, 3, 5, 6, 7, 8, 9])\n  False\n  >>> common([1, 3, 5, 6, 7, 8, 9], [1, 3, 5, 6, 7, 8])\n  True\n  >>> common([1, 3, 5, 6, 7, 8, 9], [1, 3, 5, 6, 7, 9])\n  False\n\n  */\nconst common2 = (l1, l2) => {\n  let i = 0\n  let j = 0\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      i++\n      j++\n    } else if (l1[i] < l2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return i === l1.length\n}\n\n/* Return true if l1 and l2 are equal.\n  >>> common([1, 3, 5, 6, 7, 8], [1, 3, 5, 6, 7, 8, 9])\n  False\n  >>> common([1, 3, 5, 6, 7, 8, 9], [1, 3, 5, 6, 7, 8])\n  True\n  >>> common([1, 3, 5, 6, 7, 8, 9], [1, 3, 5, 6, 7, 8, 9, 10])\n  False\n\n  */\nconst common3 = (l1, l2) => {\n  let i = 0\n  let j = 0\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      i++\n      j++\n    } else if (l1[i] < l2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return i === l1.length\n}\n\n/*Return true if l1 and l2 are equal.\n  >>> common2([1, 3, 5, 6, 7, 8], [1, 3, 5, 6, 7, 8, 9])\n  True\n  >>> common2([1, 3, 5, 6, 7, 8, 9], [1, 3, 5, 6, 7, 8])\n  True\n  >>> common2([1, 3, 5, 6, 7, 8, 9], [1, 3, 5, 6, 7, 9])\n  False\n  >>> common2([1, 3, 5, 6, 7, 8, 9], [1, 3, 5, 6, 7, 8, 9, 10])\n  False\n  >>> common2([1, 3, 5, 6, 7, 8, 9, 10], [1, 3, 5, 6, 7, 8, 9])\n  True\n\n  */\nconst common4 = (l1, l2) => {\n  let i = 0\n  let j = 0\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      i++\n      j++\n    } else if (l1[i] < l2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return i === l1.length\n}\n\nmodule.exports = {\n  common,\n  common2,\n  common3,\n  common4\n}\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": false, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) return 1\n\n  const factor = (x) => {\n    if (x === 1) return n\n\n    const y = largestPrimeFactor(n / x)\n    return n / x === 1? 1 : y\n\n    return largestPrimeFactor(n / x)\n  }\n\n  return factor(2)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum +="}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const len = brackets.length\n  const isBalanced = (i) => {\n    return (i + 1 < len) && (brackets[i + 1] === \"(\" && brackets[i] === \")\")\n  }\n\n  return brackets.every(isBalanced)\n}\n\nmodule.exports = correctBracketing\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return [\n   ...(xs[1]? xs[0] + 1 : 0),\n   ...(xs[2]? xs[1] * xs[0] + xs[1] : 0),\n   ...(xs[3]? xs[2] * xs[0] + xs[2] * xs[1] + xs[1] : 0),\n  ];\n};\n\n/**\n  @param {number[]} xs\n  @returns {number[]}\n  */\nconst difference = (xs) => {\n  return [...xs,...xs.slice(1, -1)].map((x) => x * x);\n};\n\n/**\n  @param {number[]} xs\n  @returns {number[]}\n  */\nconst sum = (xs) => {\n  return xs.map((x) => x + 1);\n};\n\n/**\n  @param {number[]} xs\n  @returns {number[]}\n  */\nconst product = (xs) => {\n  return xs.map((x) => x * x);\n};\n\nconst polynomial = (xs) => {\n  return derivative(sum(product(xs)));\n};\n\nconst main = () => {\n  const [a, b, c] = [2, 3, 4];\n  console.log(a + b);\n  console.log(polynomial([a, b, c]));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  const fib = (previous, current) => {\n    const tmp = current;\n    return previous + tmp;\n  };\n  return fib(0, 1) + fib(1, 0);\n};\n\nconst fibfib2 = (n) => {\n  const fib = (previous, current) => {\n    const tmp = current;\n    return previous + tmp;\n  };\n  return fib(0, 1) + fib(1, 0);\n};\n\nconst fibfib3 = (n) => {\n  const fib = (previous, current) => {\n    const tmp = current;\n    return previous + tmp;\n  };\n  return fib(0, 1) + fib(1, 0);\n};\n\nconst fibfib4 = (n) => {\n  const fib = (previous, current) => {\n    const tmp = current;\n    return previous + tmp;\n  };\n  return fib(0, 1) + fib(1, 0);\n};\n\nconst fibfib5 = (n) => {\n  const fib = (previous, current) => {\n    const tmp = current;\n    return previous + tmp;\n  };\n  return fib(0, 1) + fib(1, 0);\n};\n\nconst fibfib6 = (n) => {\n  const fib = (previous, current) => {\n    const tmp = current;\n    return previous + tmp;\n  };\n  return fib(0, 1) + fib(1, 0);\n};\n\nconst fibfib7 = (n) => {\n  const fib = (previous, current) => {\n    const tmp = current;\n    return previous + tmp;\n  };\n  return fib(0, 1) + fib(1, 0);\n};\n\nconst fibfib8 = (n) => {\n  const fib = (previous, current) => {\n    const tmp = current;\n    return previous + tmp;\n  };\n  return fib(0, 1) + fib(1, 0);\n};\n\nconst fibfib9 = (n) => {\n  const fib = (previous, current) => {\n    const tmp = current;\n    return previous + tmp;\n  };\n  return fib(0, 1) + fib(1, 0);\n};\n\nconst fibfib10 = (n) => {\n  const fib = (previous, current) => {\n    const tmp = current;\n    return previous + tmp;\n  };\n  return fib(0, 1) + fib(1, 0);\n};\n\nconst fibfib11 = (n) => {\n  const fib = (previous, current) => {\n    const tmp = current;\n    return previous + tmp;\n  };\n  return fib(0, 1) + fib(1, 0);\n};\n\nconst fibfib12 = (n) => {\n  const fib = (previous, current) => {\n    const tmp = current;\n    return previous + tmp;\n  };\n  return fib(0, 1) + fib(1, 0);\n};\n\nconst fibfib13 = (n) => {\n  const fib = (previous, current) => {\n    const tmp = current;\n    return previous + tmp;\n  };\n  return fib(0, 1) + fib(1, 0);\n};\n\nconst fibfib14 = (n) => {\n  const fib = (previous, current) => {\n    const tmp = current;\n    return previous + tmp;\n  };\n  return fib(0, 1) + fib(1, 0);\n};\n\nconst fibfib15 = (n) => {\n  const fib = (previous, current) => {\n    const tmp = current;\n    return previous + tmp;\n  };\n  return fib(0, 1) + fib(1, 0);\n};\n\nconst fibfib16 = (n) => {\n  const fib = (previous, current) => {\n    const tmp = current;\n    return previous + tmp;\n  };\n  return fib(0, 1) + fib(1, 0);\n};\n\nconst fibfib17 = (n) => {\n  const fib = (previous, current) => {\n    const tmp = current;\n    return previous + tmp;\n  };\n  return fib(0, 1) + fib(1, 0);\n};\n\nconst fibfib18 = (n) => {\n  const fib = (previous, current) => {\n    const tmp = current;\n    return previous + tmp;\n  };\n  return fib(0, 1) + fib(1, 0);\n};\n\nconst fibfib19 = (n) => {\n  const fib = (previous, current) => {\n    const tmp = current;\n    return previous + tmp;\n  };\n  return fib(0, 1) + fib(1, 0);\n};\n\nconst fibfib20 = (n) => {\n  const fib = (previous, current) => {\n    const tmp = current;\n    return previous + tmp;\n  };\n  return fib(0, 1) + fib(1, 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n    let count = 0\n    for (let i = 0; i < s.length; i++) {\n        if (vowels[s.charAt(i)]) {\n            count++\n        }\n    }\n    return count\n}\n\nconst vowels = ['a', 'e', 'i', 'o', 'u']\n\nconsole.log(vowelsCount('abcde'))\nconsole.log(vowelsCount('ACEDY'))\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift > x.length) {\n    return x.reverse().join('');\n  }\n  return x.slice(shift, x.length).reverse().join('');\n}\n\nconst circularShift2 = (x, shift) => {\n  if (shift > x.length) {\n    return x.reverse().join('');\n  }\n  const length = x.length;\n  const digit = x.charAt(length - shift);\n  const reversed = x.slice(0, length - shift).reverse().join('');\n  return reversed + digit;\n}\n\n// Tests\nconsole.log(circularShift(12, 1));\nconsole.log(circularShift(12, 2));\nconsole.log(circularShift(12, 3));\nconsole.log(circularShift(12, 4));\nconsole.log(circularShift(12, 5));\nconsole.log(circularShift(12, 6));\nconsole.log(circularShift(12, 7));\nconsole.log(circularShift(12, 8));\nconsole.log(circularShift(12, 9));\nconsole.log(circularShift(12, 10));\nconsole.log(circularShift(12, 11));\nconsole.log(circularShift(12, 12));\nconsole.log(circularShift(12, 13));\nconsole.log(circularShift(12, 14));\nconsole.log(circularShift(12, 15));\nconsole.log(circularShift(12, 16));\nconsole.log(circularShift(12, 17));\nconsole.log(circularShift(12, 18));\nconsole.log(circularShift(12, 19));\nconsole.log(circularShift(12, 20));\nconsole.log(circularShift(12, 21));\nconsole.log(circularShift(12, 22));\nconsole.log(circularShift(12, 23));\nconsole.log(circularShift(12, 24));\nconsole.log(circularShift(12, 25));\nconsole.log(circularShift(12, 26));\nconsole.log(circularShift(12, 27));\nconsole.log(circularShift(12, 28));\nconsole.log(circularShift(12, 29));\nconsole.log(circularShift(12, 30));\nconsole.log(circularShift(12, 31));\nconsole.log(circularShift(12, 32));\nconsole.log(circularShift(12, 33));\nconsole.log(circularShift(12, 34));\nconsole.log(circularShift(12, 35));\nconsole.log(circularShift(12, 36));\nconsole.log(circularShift(12, 37));\nconsole.log(circularShift(12, 38));\nconsole.log(circularShift(12, 39));\nconsole.log(circularShift(12, 40));\nconsole.log(circularShift(12, 41));\nconsole.log(circularShift(12, 42));\nconsole.log(circularShift(12, 43));\nconsole.log(circularShift(12, 44));\nconsole.log(circularShift(12, 45));\nconsole.log(circularShift(12, 46));\nconsole.log(circularShift(12, 47));\nconsole.log(circularShift(12, 48));\nconsole.log(circularShift(12, 49));\nconsole.log(circularShift(12, 50));\nconsole.log(circularShift(12, 51));\nconsole.log(circularShift(12, 52));\nconsole.log(circularShift(12, 53));\nconsole.log(circularShift(12, 54));\nconsole.log(circularShift(12, 55));\nconsole.log(circularShift(12, 56));\nconsole.log(circularShift(12, 57));\nconsole.log(circularShift(12, 58));\nconsole.log(circularShift(12, 59));\nconsole.log(circularShift(12, 60));\nconsole.log(circularShift(12, 61));\nconsole.log(circularShift(12, 62));\nconsole.log(circularShift(12, 63));\nconsole.log(circularShift(12, 64));\nconsole.log(circularShift(12, 65));\nconsole.log(circularShift(12, 66));\nconsole.log(circularShift(12, 67));\nconsole.log(circularShift(12, 68));\nconsole.log(circularShift(12, 69));\nconsole.log(circularShift(12, 70));\nconsole.log(circularShift(12, 71));\nconsole.log(circularShift(12, 72));\nconsole.log(circularShift(12, 73));\nconsole.log(circularShift(12, 74));\nconsole.log(circularShift(12, 75));\nconsole.log(circularShift(12, 76));\nconsole.log(circularShift(12, 77));\nconsole.log(circularShift(12, 78));\nconsole.log(circularShift(12, 79));\nconsole.log(circularShift(12, 80));\nconsole.log(circularShift(12, 81));\nconsole.log(circularShift(12, 82));\nconsole.log(circularShift(12, 83));\nconsole.log(circularShift(12, 84));\nconsole.log(circularShift(12, 85));\nconsole.log(circularShift(12, 86));\nconsole.log(circularShift(12, 87));\nconsole.log(circularShift(12, 88));\nconsole.log(circularShift(12, 89));\nconsole.log(circularShift(12, 90));\nconsole.log(circularShift(12, 91));\nconsole.log(circularShift(12, 92));\nconsole.log(circularShift(12, 93));\nconsole.log(circularShift(12, 94));\nconsole.log(circularShift(12, 95));\nconsole.log(circularShift(12, 96));\nconsole.log(circularShift(12, 97));\nconsole.log(circularShift(12, 98));\nconsole.log(circularShift(12, 99));\nconsole.log(circularShift(12, 100));\nconsole.log(circularShift(12, 101"}
{"task_id": "JavaScript/66", "prompt": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const arr = [];\n  s.split(\"\").forEach((d) => arr.push(d.charCodeAt(0)));\n  const sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] - arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a string as input and returns the sum of the digits in the number.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const arr = [];\n  s.split(\"\").forEach((d) => arr.push(d));\n  const sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a string as input and returns the sum of the digits in the number.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const arr = [];\n  s.split(\"\").forEach((d) => arr.push(d.charCodeAt(0)));\n  const sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] - arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a string as input and returns the sum of the digits in the number.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n*/\nconst digitSum = (s) => {\n  const arr = [];\n  s.split(\"\").forEach((d) => arr.push(d.charCodeAt(0)));\n  const sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a string as input and returns the sum of the digits in the number.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n*/\nconst digitSum = (s) => {\n  const arr = [];\n  s.split(\"\").forEach((d) => arr.push(d.charCodeAt(0)));\n  const sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] - arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a string as input and returns the sum of the digits in the number.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n*/\nconst digitSum = (s) => {\n  const arr = [];\n  s.split(\"\").forEach((d) => arr.push(d.charCodeAt(0)));\n  const sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] - arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a string as input and returns the sum of the digits in the number.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n*/\nconst digitSum = (s) => {\n  const arr = [];\n  s.split(\"\").forEach((d) => arr.push(d.charCodeAt(0)));\n  const sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] - arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a string as input and returns the sum of the digits in the number.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n*/\nconst digitSum = (s) => {\n  const arr = [];\n  s.split(\"\").forEach((d) => arr.push(d.charCodeAt(0)));\n  const sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] - arr[i] % 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes a string as input and returns the sum of the digits in the number.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\""}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  // console.log(`fruitDistribution(s, n) = ${s}, ${n}`);\n  let result = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalFruitCount = 0;\n\n  for (let i = 0; i < n; i++) {\n    if (s.charAt(i) === 'a') {\n      appleCount++;\n    } else if (s.charAt(i) === 'o') {\n      orangeCount++;\n    } else if (s.charAt(i) ==='m') {\n      mangoCount++;\n    }\n  }\n\n  totalFruitCount = appleCount + orangeCount + mangoCount;\n\n  return totalFruitCount;\n};\n\nconsole.log(`fruitDistribution(\"5 apple and 6 oranges\", 19) ->${fruitDistribution(\"5 apple and 6 oranges\", 19)}`);\nconsole.log(`fruitDistribution(\"0 apple and 1 oranges\", 3) ->${fruitDistribution(\"0 apple and 1 oranges\", 3)}`);\nconsole.log(`fruitDistribution(\"2 apple and 3 oranges\", 100) ->${fruitDistribution(\"2 apple and 3 oranges\", 100)}`);\nconsole.log(`fruitDistribution(\"100 apple and 1 oranges\", 120) ->${fruitDistribution(\"100 apple and 1 oranges\", 120)}`);\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  arr.sort((a, b) => a - b)\n  let len = arr.length\n  let [node, nodeIndex] = arr.reduce((acc, curr) => {\n    if (curr % 2 === 0) {\n      acc.push([curr, acc.length])\n    }\n    return acc\n  }, [])\n  return [node, nodeIndex]\n}\n\nconst solution = pluck([4, 2, 3])\nconsole.log(solution)\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const max = lst.reduce((acc, curr) => (acc > curr? acc : curr), 0)\n\n  const isGreater = (a, b) => (a > b? a : b)\n\n  const maxFreq = (lst) => {\n    const [last,...rest] = lst\n    const restArr = rest.map(i => isGreater(i, last))\n    return max(...restArr)\n  }\n\n  return maxFreq(lst) === max? lst : search(lst.filter(x => x > 0))\n}\n\nexport default search\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let odd = true\n  for (let i = 0; i < lst.length; i += 2) {\n    if (odd) {\n      lst.splice(i, 0, lst.splice(i + 1, 1)[0])\n      odd = false\n    } else {\n      lst.splice(i + 1, 0, lst.splice(i, 1)[0])\n      odd = true\n    }\n  }\n  return lst\n}\n\nconst mergeSort = (arr) => {\n  if (arr.length === 1) {\n    return arr\n  }\n\n  let mid = Math.floor(arr.length / 2)\n  let left = mergeSort(arr.slice(0, mid))\n  let right = mergeSort(arr.slice(mid, arr.length))\n\n  return merge(left, right)\n}\n\nconst merge = (left, right) => {\n  let leftLen = left.length\n  let rightLen = right.length\n  let result = []\n\n  for (let i = 0; i < leftLen + rightLen; i++) {\n    if (i >= leftLen) {\n      result.push(right[i - leftLen])\n    } else if (i >= rightLen) {\n      result.push(left[i - rightLen])\n    } else {\n      if (left[i] < right[i]) {\n        result.push(left[i])\n      } else {\n        result.push(right[i])\n      }\n    }\n  }\n\n  return result\n}\n\nmodule.exports = {\n  strangeSortList,\n  mergeSort\n}\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const area = (a + b) * (c - a) / 2;\n  return Math.round(area * 100) / 100;\n};\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (!q) {\n    return false;\n  }\n\n  const len = q.length;\n  let i = 0;\n  while (i < len) {\n    if (q[i] > w) {\n      return false;\n    }\n    i++;\n  }\n\n  return isPalindromic(q);\n};\n\nexport {\n  willItFly\n};\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const newArr = arr.slice().reverse()\n  const len = arr.length\n\n  let i = 0\n  let j = 0\n\n  let min = -1\n\n  while (i < len) {\n    while (j < len) {\n      if (newArr[i]!== newArr[j]) {\n        if (min === -1) {\n          min = j\n        }\n        newArr[j] = newArr[i]\n      }\n      j++\n    }\n    i++\n    j = i\n  }\n  return min\n}\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]))\nconsole.log(smallestChange([1, 2, 3, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const result = lst1.reduce((lst1, elem) => {\n    const lst2Len = lst2.length;\n    const index = lst1.indexOf(elem);\n    if (index === -1) {\n      return lst1;\n    }\n    if (lst2Len === lst1.length) {\n      return lst1;\n    }\n    if (lst2Len === lst1.length - 1) {\n      return [...lst1,...lst2];\n    }\n    return [...lst1,...lst2.slice(index + 1)];\n  }, []);\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  return isPrime(a) && isPrime(a - 3) && isPrime(a - 5);\n};\n\nconst isMultiplyPrime = (a) => {\n  return isPrime(a) && isPrime(a - 3) && isPrime(a - 5);\n};\n\n//const isMultiplyPrime = (a) => {\n//  return isPrime(a) && isPrime(a - 3) && isPrime(a - 5);\n//};\n\nconst isPrime = (a) => {\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a === 5) return true;\n  if (a === 7) return true;\n  if (a === 11) return true;\n  if (a === 13) return true;\n  if (a === 17) return true;\n  if (a === 19) return true;\n  if (a === 23) return true;\n  if (a === 29) return true;\n  if (a === 31) return true;\n  if (a === 37) return true;\n  if (a === 41) return true;\n  if (a === 43) return true;\n  if (a === 47) return true;\n  if (a === 53) return true;\n  if (a === 59) return true;\n  if (a === 61) return true;\n  if (a === 67) return true;\n  if (a === 71) return true;\n  if (a === 73) return true;\n  if (a === 79) return true;\n  if (a === 83) return true;\n  if (a === 89) return true;\n  if (a === 97) return true;\n  if (a === 101) return true;\n  if (a === 103) return true;\n  if (a === 107) return true;\n  if (a === 109) return true;\n  if (a === 113) return true;\n  if (a === 127) return true;\n  if (a === 131) return true;\n  if (a === 137) return true;\n  if (a === 139) return true;\n  if (a === 149) return true;\n  if (a === 151) return true;\n  if (a === 157) return true;\n  if (a === 163) return true;\n  if (a === 167) return true;\n  if (a === 169) return true;\n  if (a === 173) return true;\n  if (a === 179) return true;\n  if (a === 181) return true;\n  if (a === 191) return true;\n  if (a === 193) return true;\n  if (a === 197) return true;\n  if (a === 199) return true;\n  if (a === 211) return true;\n  if (a === 223) return true;\n  if (a === 227) return true;\n  if (a === 229) return true;\n  if (a === 233) return true;\n  if (a === 239) return true;\n  if (a === 241) return true;\n  if (a === 251) return true;\n  if (a === 257) return true;\n  if (a === 263) return true;\n  if (a === 269) return true;\n  if (a === 271) return true;\n  if (a === 277) return true;\n  if (a === 281) return true;\n  if (a === 283) return true;\n  if (a === 293) return true;\n  if (a === 307) return true;\n  if (a === 311) return true;\n  if (a === 313) return true;\n  if (a === 317) return true;\n  if (a === 331) return true;\n  if (a === 337) return true;\n  if (a === 347) return true;\n  if (a === 349) return true;\n  if (a === 353) return true;\n  if (a === 359) return true;\n  if (a === 367) return true;\n  if (a === 373) return true;\n  if (a === 379) return true;\n  if (a === 383) return true;\n  if (a === 389) return true;\n  if (a === 397) return true;\n  if (a === 401) return true;\n  if (a === 409) return true;\n  if (a === 419) return true;\n  if (a === 421) return true;\n  if (a === 431) return true;\n  if (a === 433) return true;\n  if (a === 439) return true;\n  if (a === 447) return true;\n  if (a === 457) return true;\n  if (a === 461) return true;\n  if (a === 463) return true;\n  if (a === 467) return true;\n  if (a === 479) return true;\n  if (a === 487) return true;\n  if (a === 491) return true;\n  if (a === 499) return true;\n  if (a === 503) return true;\n  if (a === 509) return true;\n  if (a === 521) return true;\n  if (a === 523) return true;\n  if (a === 541) return true;\n  if (a === 547) return true;\n  if (a === 557) return true;\n  if (a === 563) return true;\n  if (a === 569) return true;\n  if (a === 571) return true;\n  if (a === 577) return true;\n  if (a === 587) return true;\n  if (a === 593) return true;\n  if (a === 599) return true;\n  if (a === 601) return true;\n  if (a === 607) return true;\n  if (a === 613) return true;\n  if (a === 617) return true;\n  if (a === 619) return true;\n  if (a === 631) return true;\n  if (a === 641) return true;\n  if (a === 643) return true;\n  if (a === 647) return true;\n  if (a === 653) return true"}
{"task_id": "JavaScript/76", "prompt": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x <= 0 || n <= 0) {\n    return false;\n  }\n\n  return (x % n) === 0;\n};\n\nexport default isSimplePower;\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true\n  if (a === 1) return true\n  if (a % 3 === 0) return true\n  if (a % 5 === 0) return true\n  if (a % 7 === 0) return true\n  if (a % 9 === 0) return true\n  if (a % 11 === 0) return true\n  if (a % 13 === 0) return true\n  if (a % 15 === 0) return true\n  if (a % 17 === 0) return true\n  if (a % 19 === 0) return true\n  if (a % 21 === 0) return true\n  if (a % 23 === 0) return true\n  if (a % 25 === 0) return true\n  if (a % 27 === 0) return true\n  if (a % 29 === 0) return true\n  if (a % 31 === 0) return true\n  if (a % 33 === 0) return true\n  if (a % 35 === 0) return true\n  if (a % 37 === 0) return true\n  if (a % 39 === 0) return true\n  if (a % 41 === 0) return true\n  if (a % 43 === 0) return true\n  if (a % 45 === 0) return true\n  if (a % 47 === 0) return true\n  if (a % 49 === 0) return true\n  if (a % 51 === 0) return true\n  if (a % 53 === 0) return true\n  if (a % 55 === 0) return true\n  if (a % 57 === 0) return true\n  if (a % 59 === 0) return true\n  if (a % 61 === 0) return true\n  if (a % 63 === 0) return true\n  if (a % 65 === 0) return true\n  if (a % 67 === 0) return true\n  if (a % 69 === 0) return true\n  if (a % 71 === 0) return true\n  if (a % 73 === 0) return true\n  if (a % 75 === 0) return true\n  if (a % 77 === 0) return true\n  if (a % 79 === 0) return true\n  if (a % 81 === 0) return true\n  if (a % 83 === 0) return true\n  if (a % 85 === 0) return true\n  if (a % 87 === 0) return true\n  if (a % 89 === 0) return true\n  if (a % 91 === 0) return true\n  if (a % 93 === 0) return true\n  if (a % 95 === 0) return true\n  if (a % 97 === 0) return true\n  if (a % 99 === 0) return true\n  if (a % 101 === 0) return true\n  if (a % 103 === 0) return true\n  if (a % 105 === 0) return true\n  if (a % 107 === 0) return true\n  if (a % 109 === 0) return true\n  if (a % 111 === 0) return true\n  if (a % 113 === 0) return true\n  if (a % 115 === 0) return true\n  if (a % 117 === 0) return true\n  if (a % 119 === 0) return true\n  if (a % 121 === 0) return true\n  if (a % 123 === 0) return true\n  if (a % 125 === 0) return true\n  if (a % 127 === 0) return true\n  if (a % 129 === 0) return true\n  if (a % 131 === 0) return true\n  if (a % 133 === 0) return true\n  if (a % 135 === 0) return true\n  if (a % 137 === 0) return true\n  if (a % 139 === 0) return true\n  if (a % 141 === 0) return true\n  if (a % 143 === 0) return true\n  if (a % 145 === 0) return true\n  if (a % 147 === 0) return true\n  if (a % 149 === 0) return true\n  if (a % 151 === 0) return true\n  if (a % 153 === 0) return true\n  if (a % 155 === 0) return true\n  if (a % 157 === 0) return true\n  if (a % 159 === 0) return true\n  if (a % 161 === 0) return true\n  if (a % 163 === 0) return true\n  if (a % 165 === 0) return true\n  if (a % 167 === 0) return true\n  if (a % 169 === 0) return true\n  if (a % 171 === 0) return true\n  if (a % 173 === 0) return true\n  if (a % 175 === 0) return true\n  if (a % 177 === 0) return true\n  if (a % 179 === 0) return true\n  if (a % 181 === 0) return true\n  if (a % 183 === 0) return true\n  if (a % 185 === 0) return true\n  if (a % 187 === 0) return true\n  if (a % 189 === 0) return true\n  if (a % 191 === 0) return true\n  if (a % 193 === 0) return true\n  if (a % 195 === 0) return true\n  if (a % 197 === 0) return true\n  if (a % 199 === 0) return true\n  if (a % 201 === 0) return true\n  if (a % 203 === 0) return true\n  if (a % 205 === 0) return true\n  if (a % 207 === 0) return true\n  if (a % 209 === 0) return true\n  if (a % 211 === 0) return true\n  if (a % 213 === 0) return true\n  if (a % 215 === 0) return true\n  if (a % 217 === 0) return true\n  if (a % 219 === 0) return true\n  if (a % 221 === 0) return true\n  if (a % 223 === 0) return true\n  if (a % 225 === 0) return true\n  if (a % 227 === 0) return true\n  if (a % 229 === 0) return true\n  if (a % 231 === 0) return true\n  if (a % 233 === 0) return true\n  if (a % 235 === 0"}
{"task_id": "JavaScript/78", "prompt": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n    const str = num.toUpperCase();\n    const digits = str.split(\"\");\n    const isPrime = (num) => {\n        let num2 = 1;\n        for (let i = 2; i <= num; i++) {\n            if (num % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    const getCount = (num) => {\n        const prime = isPrime(num);\n        if (prime) {\n            return 1;\n        }\n        const count = 0;\n        for (let i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i === 0) {\n                const num2 = num / i;\n                if (isPrime(num2)) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    };\n    return getCount(parseInt(digits[1], 16));\n};\nconsole.log(hexKey(\"AB\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  for (let i = 0; i < decimal.length; i += 1) {\n    binary += (decimal[i] === 1? 1 : 0) + (decimal[i] === 0? 1 : 0);\n  }\n  return 'db' + binary + 'db';\n};\n\n// TEST CODE\n// const test = decimalToBinary(15);\n// console.log(test);\n\nconst decimalToBinary_2 = (decimal) => {\n  let binary = '';\n  for (let i = 0; i < decimal.length; i += 1) {\n    binary += (decimal[i] === 1? 1 : 0) + (decimal[i] === 0? 1 : 0);\n  }\n  return 'db' + binary + 'db';\n};\n\n// TEST CODE\n// const test = decimalToBinary_2(15);\n// console.log(test);\n\nconst decimalToBinary_3 = (decimal) => {\n  let binary = '';\n  for (let i = 0; i < decimal.length; i += 1) {\n    binary += (decimal[i] === 1? '1' : '0') + (decimal[i] === 0? '1' : '0');\n  }\n  return 'db' + binary + 'db';\n};\n\n// TEST CODE\n// const test = decimalToBinary_3(15);\n// console.log(test);\n\nconst decimalToBinary_4 = (decimal) => {\n  let binary = '';\n  for (let i = 0; i < decimal.length; i += 1) {\n    binary += (decimal[i] === 1? '1' : '0');\n  }\n  return 'db' + binary + 'db';\n};\n\n// TEST CODE\n// const test = decimalToBinary_4(15);\n// console.log(test);\n\nconst decimalToBinary_5 = (decimal) => {\n  let binary = '';\n  for (let i = 0; i < decimal.length; i += 1) {\n    binary += (decimal[i] === 1? '1' : '0');\n  }\n  return 'db' + binary + 'db';\n};\n\n// TEST CODE\n// const test = decimalToBinary_5(15);\n// console.log(test);\n\nconst decimalToBinary_6 = (decimal) => {\n  let binary = '';\n  for (let i = 0; i < decimal.length; i += 1) {\n    binary += (decimal[i] === 1? '1' : '0');\n  }\n  return 'db' + binary + 'db';\n};\n\n// TEST CODE\n// const test = decimalToBinary_6(15);\n// console.log(test);\n\nconst decimalToBinary_7 = (decimal) => {\n  let binary = '';\n  for (let i = 0; i < decimal.length; i += 1) {\n    binary += (decimal[i] === 1? '1' : '0');\n  }\n  return 'db' + binary + 'db';\n};\n\n// TEST CODE\n// const test = decimalToBinary_7(15);\n// console.log(test);\n\nconst decimalToBinary_8 = (decimal) => {\n  let binary = '';\n  for (let i = 0; i < decimal.length; i += 1) {\n    binary += (decimal[i] === 1? '1' : '0');\n  }\n  return 'db' + binary + 'db';\n};\n\n// TEST CODE\n// const test = decimalToBinary_8(15);\n// console.log(test);\n\nconst decimalToBinary_9 = (decimal) => {\n  let binary = '';\n  for (let i = 0; i < decimal.length; i += 1) {\n    binary += (decimal[i] === 1? '1' : '0');\n  }\n  return 'db' + binary + 'db';\n};\n\n// TEST CODE\n// const test = decimalToBinary_9(15);\n// console.log(test);\n\nconst decimalToBinary_10 = (decimal) => {\n  let binary = '';\n  for (let i = 0; i < decimal.length; i += 1) {\n    binary += (decimal[i] === 1? '1' : '0');\n  }\n  return 'db' + binary + 'db';\n};\n\n// TEST CODE\n// const test = decimalToBinary_10(15);\n// console.log(test);\n\nconst decimalToBinary_11 = (decimal) => {\n  let binary = '';\n  for (let i = 0; i < decimal.length; i += 1) {\n    binary += (decimal[i] === 1? '1' : '0');\n  }\n  return 'db' + binary + 'db';\n};\n\n// TEST CODE\n// const test = decimalToBinary_11(15);\n// console.log(test);\n\nconst decimalToBinary_12 = (decimal) => {\n  let binary = '';\n  for (let i = 0; i < decimal.length; i += 1) {\n    binary += (decimal[i] === 1? '1' : '0');\n  }\n  return 'db' + binary + 'db';\n};\n\n// TEST CODE\n// const test = decimalToBinary_12(15);\n// console.log(test);\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if(s.length < 3) return false;\n  let hash = {};\n  for(let i=0; i<s.length; i++){\n    if(!hash[s[i]]){\n      hash[s[i]] = true;\n    }else{\n      return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('abc'));\nconsole.log(isHappy('x'));\nconsole.log(isHappy('xz'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('abcdd'));\nconsole.log(isHappy('xy'));\nconsole.log(isHappy('xyyx'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradesA = grades.filter((grade) => grade >= 4.0);\n  let gradesB = grades.filter((grade) => grade >= 3.0);\n  let gradesC = grades.filter((grade) => grade >= 1.0);\n\n  let result = [];\n\n  if (gradesA.length === 0) {\n    result.push('A');\n  } else {\n    let gradesAplus = gradesA.filter((grade) => grade <= 3.7);\n    let gradesAminus = gradesA.filter((grade) => grade > 3.7);\n    let gradesAplusminus = gradesAminus.filter((grade) => grade <= 3.3);\n    let gradesBplusminus = gradesB.filter((grade) => grade <= 2.7);\n    let gradesBplus = gradesB.filter((grade) => grade > 2.7);\n    let gradesBminus = gradesB.filter((grade) => grade > 2.7);\n    let gradesCminus = gradesC.filter((grade) => grade <= 1.7);\n\n    if (gradesAplus.length > 0) {\n      result.push('A+');\n    }\n    if (gradesAminus.length > 0) {\n      result.push('A-');\n    }\n    if (gradesAplusminus.length > 0) {\n      result.push('A+-');\n    }\n    if (gradesBplusminus.length > 0) {\n      result.push('B+-');\n    }\n    if (gradesBplus.length > 0) {\n      result.push('B+');\n    }\n    if (gradesBminus.length > 0) {\n      result.push('B-');\n    }\n    if (gradesCminus.length > 0) {\n      result.push('C-');\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n    return isPrime(string.length)\n}\n\n/*Write a function that returns true if the number is a prime or false otherwise.\n  Examples\n  primeNumber(3) == true\n  primeNumber(2) == false\n  primeNumber(8) == true\n  primeNumber(7) == false\n  */\nconst primeNumber = (number) => {\n    return isPrime(number)\n}\n\n/*Write a function that takes an integer n and returns true if the number is a prime or false otherwise.\n  Examples\n  primeNumber(2) == true\n  primeNumber(3) == false\n  primeNumber(5) == true\n  primeNumber(7) == false\n  */\nconst primeNumber = (number) => {\n    return isPrime(number)\n}\n\n/*Write a function that takes a number n and returns true if the number is a prime or false otherwise.\n  Examples\n  primeNumber(3) == true\n  primeNumber(2) == false\n  primeNumber(8) == true\n  primeNumber(7) == false\n  */\nconst primeNumber = (number) => {\n    return isPrime(number)\n}\n\n/*Write a function that takes an integer n and returns true if the number is a prime or false otherwise.\n  Examples\n  primeNumber(2) == true\n  primeNumber(3) == false\n  primeNumber(5) == true\n  primeNumber(7) == false\n  */\nconst primeNumber = (number) => {\n    return isPrime(number)\n}\n\n/*Write a function that takes an integer n and returns true if the number is a prime or false otherwise.\n  Examples\n  primeNumber(2) == true\n  primeNumber(3) == false\n  primeNumber(5) == true\n  primeNumber(7) == false\n  */\nconst primeNumber = (number) => {\n    return isPrime(number)\n}\n\n/*Write a function that takes an integer n and returns true if the number is a prime or false otherwise.\n  Examples\n  primeNumber(2) == true\n  primeNumber(3) == false\n  primeNumber(5) == true\n  primeNumber(7) == false\n  */\nconst primeNumber = (number) => {\n    return isPrime(number)\n}\n\n/*Write a function that takes an integer n and returns true if the number is a prime or false otherwise.\n  Examples\n  primeNumber(2) == true\n  primeNumber(3) == false\n  primeNumber(5) == true\n  primeNumber(7) == false\n  */\nconst primeNumber = (number) => {\n    return isPrime(number)\n}\n\n/*Write a function that takes an integer n and returns true if the number is a prime or false otherwise.\n  Examples\n  primeNumber(2) == true\n  primeNumber(3) == false\n  primeNumber(5) == true\n  primeNumber(7) == false\n  */\nconst primeNumber = (number) => {\n    return isPrime(number)\n}\n\n/*Write a function that takes an integer n and returns true if the number is a prime or false otherwise.\n  Examples\n  primeNumber(2) == true\n  primeNumber(3) == false\n  primeNumber(5) == true\n  primeNumber(7) == false\n  */\nconst primeNumber = (number) => {\n    return isPrime(number)\n}\n\n/*Write a function that takes an integer n and returns true if the number is a prime or false otherwise.\n  Examples\n  primeNumber(2) == true\n  primeNumber(3) == false\n  primeNumber(5) == true\n  primeNumber(7) == false\n  */\nconst primeNumber = (number) => {\n    return isPrime(number)\n}\n\n/*Write a function that takes an integer n and returns true if the number is a prime or false otherwise.\n  Examples\n  primeNumber(2) == true\n  primeNumber(3) == false\n  primeNumber(5) == true\n  primeNumber(7) == false\n  */\nconst primeNumber = (number) => {\n    return isPrime(number)\n}\n\n/*Write a function that takes an integer n and returns true if the number is a prime or false otherwise.\n  Examples\n  primeNumber(2) == true\n  primeNumber(3) == false\n  primeNumber(5) == true\n  primeNumber(7) == false\n  */\nconst primeNumber = (number) => {\n    return isPrime(number)\n}\n\n/*Write a function that takes an integer n and returns true if the number is a prime or false otherwise.\n  Examples\n  primeNumber(2) == true\n  primeNumber(3) == false\n  primeNumber(5) == true\n  primeNumber(7) == false\n  */\nconst primeNumber = (number) => {\n    return isPrime(number)\n}\n\n/*Write a function that takes an integer n and returns true if the number is a prime or false otherwise.\n  Examples\n  primeNumber(2) == true\n  primeNumber(3) == false\n  primeNumber(5) == true\n  primeNumber(7) == false\n  */\nconst primeNumber = (number) => {\n    return isPrime(number)\n}\n\n/*Write a function that takes an integer n and returns true if the number is a prime or false otherwise.\n  Examples\n  primeNumber(2) == true\n  primeNumber(3) == false\n  primeNumber(5) == true\n  primeNumber(7) == false\n  */\nconst primeNumber = (number) => {\n    return isPrime(number)\n}\n\n/*Write a function that takes an integer n and returns true if the number is a prime or false otherwise.\n  Examples\n  primeNumber(2) == true\n  primeNumber(3) == false\n  primeNumber(5) == true\n  primeNumber(7) == false\n  */\nconst primeNumber = (number) => {\n    return isPrime(number)\n}\n\n/*Write a function that takes an integer n and returns true if the number is a prime or false otherwise.\n  Examples\n  primeNumber(2) == true\n  primeNumber(3) == false\n  primeNumber(5) == true\n  primeNumber(7) == false\n  */\nconst primeNumber = (number"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n  const num = [...Array(n).keys()];\n  const count = (n) => num.reduce((acc, n) => {\n    const x = n.toString();\n    if (x.length === n) return acc;\n    return acc + x.indexOf('1') + x.indexOf('2');\n  }, 0);\n  return count;\n};\n\nconsole.log(startsOneEnds(9));\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const sums = Array(9).fill(0);\n  \n  for (let i = 1; i <= N; i++) {\n    const currentDigit = i % 2;\n    sums[currentDigit] += 1;\n  }\n  \n  return sums.reduce((prev, curr) => prev + curr);\n};\n\nexport default solve;\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let odd = 0\n  let even = 0\n  let index = 0\n  let ret = []\n  while (index < lst.length) {\n    if (lst[index] % 2 === 0) {\n      ret.push(lst[index])\n    } else {\n      ret.push(lst[index] + odd)\n      odd += lst[index]\n    }\n    index += 1\n  }\n  return ret\n}\n\nconsole.log(add([4, 2, 6, 7]))\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const c ='';\n  const d = 'A';\n  const s_ = s.split(c);\n  const e = new Array(s_.length);\n  const f = new Array(s_.length);\n  const g = [];\n  const h = [];\n  const a = [];\n  const b = [];\n  let i = 0;\n  while (i < s_.length) {\n    e[i] = d.charCodeAt(0);\n    f[i] = d.charCodeAt(0);\n    g[i] = d.charCodeAt(0);\n    h[i] = d.charCodeAt(0);\n    a[i] = d.charCodeAt(0);\n    b[i] = d.charCodeAt(0);\n    i++;\n  }\n  for (i = 0; i < s_.length; i++) {\n    while (s_[i].length > 0) {\n      if (s_[i].charCodeAt(0) > e[i]) {\n        e[i] = s_[i].charCodeAt(0);\n      }\n      if (s_[i].charCodeAt(s_[i].length - 1) > f[i]) {\n        f[i] = s_[i].charCodeAt(s_[i].length - 1);\n      }\n      if (s_[i].charCodeAt(0) > g[i]) {\n        g[i] = s_[i].charCodeAt(0);\n      }\n      if (s_[i].charCodeAt(s_[i].length - 1) > h[i]) {\n        h[i] = s_[i].charCodeAt(s_[i].length - 1);\n      }\n      if (s_[i].charCodeAt(0) > a[i]) {\n        a[i] = s_[i].charCodeAt(0);\n      }\n      if (s_[i].charCodeAt(s_[i].length - 1) > b[i]) {\n        b[i] = s_[i].charCodeAt(s_[i].length - 1);\n      }\n      s_[i] = s_[i].replace(/[A-Za-z]/g, (x) => {\n        return String.fromCharCode(d.charCodeAt(0) + (x.charCodeAt(0) - d.charCodeAt(0)));\n      });\n    }\n  }\n  for (i = 0; i < s_.length; i++) {\n    return s_[i] + c + d.charAt(e[i]);\n  }\n};\n\nconst s = antiShuffle('Hello World!!');\nconsole.log(s);\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getCol = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowCol = (lst, x) => {\n  let row = []\n  let col = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n    col.push(lst[i][x])\n  }\n  return [row, col]\n}\n\nconst getCoord = (lst, x) => {\n  let [row, col] = getRowCol(lst, x)\n  let [rowLength, colLength] = [row.length, col.length]\n  let rowCol = []\n  for (let i = 0; i < rowLength; i++) {\n    rowCol.push([row[i], col[i]])\n  }\n  return rowCol\n}\n\nconst getRowCol2 = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  return [row, getCol(lst, x)]\n}\n\nconst getCoord2 = (lst, x) => {\n  let [row, col] = getRowCol2(lst, x)\n  let [rowLength, colLength] = [row.length, col.length]\n  let rowCol = []\n  for (let i = 0; i < rowLength; i++) {\n    rowCol.push([row[i], col[i]])\n  }\n  return rowCol\n}\n\nconst sort = (a, b) => {\n  let x = a[0]\n  let y = b[0]\n  if (x < y) {\n    return -1\n  } else if (x > y) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\nconst getRowCols = (lst, x) => {\n  let [row, col] = getRowCol2(lst, x)\n  let [rowLength, colLength] = [row.length, col.length]\n  let rowCols = []\n  for (let i = 0; i < rowLength; i++) {\n    rowCols.push([row[i], col[i]])\n  }\n  return rowCols\n}\n\nconst getCoords = (lst, x) => {\n  let rowCols = getRowCols(lst, x)\n  return rowCols\n}\n\nconst getCoords2 = (lst, x) => {\n  let [row, col] = getRowCol2(lst, x)\n  let [rowLength, colLength] = [row.length, col.length]\n  let rowCols = []\n  for (let i = 0; i < rowLength; i++) {\n    rowCols.push([row[i], col[i]])\n  }\n  return rowCols\n}\n\nconst getRowCols2 = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  let [rowLength, colLength] = [row.length, x]\n  let rowCols = []\n  for (let i = 0; i < rowLength; i++) {\n    rowCols.push([row[i], i])\n  }\n  return rowCols\n}\n\nconst getCoords3 = (lst, x) => {\n  let rowCols = getRowCols2(lst, x)\n  return rowCols\n}\n\nconst getRowCols3 = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  let [rowLength, colLength] = [row.length, x]\n  let rowCols = []\n  for (let i = 0; i < rowLength; i++) {\n    rowCols.push([row[i], i])\n  }\n  return rowCols\n}\n\nconst getCoords4 = (lst, x) => {\n  let rowCols = getRowCols3(lst, x)\n  return rowCols\n}\n\nconst getRowCols4 = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x])\n  }\n  let [rowLength, colLength] = [row.length, x]\n  let rowCols = []\n  for (let i = 0; i < rowLength; i++) {\n    rowCols.push([row[i], i])\n  }\n  return rowCols\n}\n\nconst getCoords5 = (lst,"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n    const a = array.slice();\n    let sorted = a.slice();\n    sorted.sort((a, b) => {\n        return a - b;\n    });\n    return sorted;\n}\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  return s.split('').reduce((a, b) => {\n    return a + b.charCodeAt(1) + b.charCodeAt(0)\n  }, '')\n}\n\nconst decrypt = (s) => {\n  return s.split('').reduce((a, b) => {\n    return a + b.charCodeAt(0) + b.charCodeAt(1)\n  }, '')\n}\n\nconst main = (args) => {\n  let key = args[0]\n  let s = args[1]\n  let result = decrypt(encrypt(s))\n  console.log(result)\n}\n\nmain(process.argv)\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n    if (lst.length === 0) return null\n    const max = lst[0]\n    const min = lst[0]\n    let index = 0\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > max) {\n        max = lst[i]\n        index = i\n      }\n      if (lst[i] < min) {\n        min = lst[i]\n        index = i\n      }\n    }\n    if (index === 0) return null\n    return lst[index - 1]\n  }\n  const nextSmallest = (lst) => {\n    const max = lst[0]\n    const min = lst[0]\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > max) {\n        max = lst[i]\n      }\n      if (lst[i] < min) {\n        min = lst[i]\n      }\n    }\n    if (max === min) return null\n    return lst[Math.floor(Math.random() * lst.length)]\n  }\n  const nextSmallest = (lst) => {\n    const max = lst[0]\n    const min = lst[0]\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > max) {\n        max = lst[i]\n      }\n      if (lst[i] < min) {\n        min = lst[i]\n      }\n    }\n    if (max === min) return null\n    return lst[Math.floor(Math.random() * lst.length)]\n  }\n  const nextSmallest = (lst) => {\n    const max = lst[0]\n    const min = lst[0]\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > max) {\n        max = lst[i]\n      }\n      if (lst[i] < min) {\n        min = lst[i]\n      }\n    }\n    if (max === min) return null\n    return lst[Math.floor(Math.random() * lst.length)]\n  }\n  const nextSmallest = (lst) => {\n    const max = lst[0]\n    const min = lst[0]\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > max) {\n        max = lst[i]\n      }\n      if (lst[i] < min) {\n        min = lst[i]\n      }\n    }\n    if (max === min) return null\n    return lst[Math.floor(Math.random() * lst.length)]\n  }\n  const nextSmallest = (lst) => {\n    const max = lst[0]\n    const min = lst[0]\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > max) {\n        max = lst[i]\n      }\n      if (lst[i] < min) {\n        min = lst[i]\n      }\n    }\n    if (max === min) return null\n    return lst[Math.floor(Math.random() * lst.length)]\n  }\n  const nextSmallest = (lst) => {\n    const max = lst[0]\n    const min = lst[0]\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > max) {\n        max = lst[i]\n      }\n      if (lst[i] < min) {\n        min = lst[i]\n      }\n    }\n    if (max === min) return null\n    return lst[Math.floor(Math.random() * lst.length)]\n  }\n  const nextSmallest = (lst) => {\n    const max = lst[0]\n    const min = lst[0]\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > max) {\n        max = lst[i]\n      }\n      if (lst[i] < min) {\n        min = lst[i]\n      }\n    }\n    if (max === min) return null\n    return lst[Math.floor(Math.random() * lst.length)]\n  }\n  const nextSmallest = (lst) => {\n    const max = lst[0]\n    const min = lst[0]\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > max) {\n        max = lst[i]\n      }\n      if (lst[i] < min) {\n        min = lst[i]\n      }\n    }\n    if (max === min) return null\n    return lst[Math.floor(Math.random() * lst.length)]\n  }\n  const nextSmallest = (lst) => {\n    const max = lst[0]\n    const min = lst[0]\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > max) {\n        max = lst[i]\n      }\n      if (lst[i] < min) {\n        min = lst[i]\n      }\n    }\n    if (max === min) return null\n    return lst[Math.floor(Math.random() * lst.length)]\n  }\n  const nextSmallest = (lst) => {\n    const max = lst[0]\n    const min = lst[0]\n    for (let i = 1; i < lst.length;"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n    const regex = /(I)(\\s|\\S*)/;\n    const re = regex.exec(S);\n    if(re === null){\n        return 0;\n    }\n    return re.index + 1;\n}\n\n/*\n  Given a sentence, it will check if the sentence contains a word that start with \"I\". Sentences was delimits by '.', '?' or '!'. For example:\n  >>> containsI(\"Hello world\")\n  True\n  >>> containsI(\"The sky is blue. The sun is shining. I love this weather\")\n  True\n  */\nconst containsI = (S) => {\n    const regex = /(I)(\\s|\\S*)/;\n    const re = regex.exec(S);\n    if(re === null){\n        return false;\n    }\n    return true;\n}\n\n/*\n  Given a sentence, it will check if the sentence contains a word that start with \"I\". Sentences was delimits by '.', '?' or '!'. For example:\n  >>> containsI(\"Hello world\")\n  True\n  >>> containsI(\"The sky is blue. The sun is shining. I love this weather\")\n  True\n  */\nconst containsBored = (S) => {\n    const regex = /(I)(\\s|\\S*)/;\n    const re = regex.exec(S);\n    if(re === null){\n        return false;\n    }\n    return true;\n}\n\n/*\n  Given a sentence, it will check if the sentence contains a word that start with \"I\". Sentences was delimits by '.', '?' or '!'. For example:\n  >>> containsI(\"Hello world\")\n  True\n  >>> containsI(\"The sky is blue. The sun is shining. I love this weather\")\n  True\n  */\nconst containsBored2 = (S) => {\n    const regex = /(I)(\\s|\\S*)/;\n    const re = regex.exec(S);\n    if(re === null){\n        return false;\n    }\n    return true;\n}\n\n/*\n  Given a sentence, it will check if the sentence contains a word that start with \"I\". Sentences was delimits by '.', '?' or '!'. For example:\n  >>> containsI(\"Hello world\")\n  True\n  >>> containsI(\"The sky is blue. The sun is shining. I love this weather\")\n  True\n  */\nconst containsBored3 = (S) => {\n    const regex = /(I)(\\s|\\S*)/;\n    const re = regex.exec(S);\n    if(re === null){\n        return false;\n    }\n    return true;\n}\n\n/*\n  Given a sentence, it will check if the sentence contains a word that start with \"I\". Sentences was delimits by '.', '?' or '!'. For example:\n  >>> containsI(\"Hello world\")\n  True\n  >>> containsI(\"The sky is blue. The sun is shining. I love this weather\")\n  True\n  */\nconst containsBored4 = (S) => {\n    const regex = /(I)(\\s|\\S*)/;\n    const re = regex.exec(S);\n    if(re === null){\n        return false;\n    }\n    return true;\n}\n\n/*\n  Given a sentence, it will check if the sentence contains a word that start with \"I\". Sentences was delimits by '.', '?' or '!'. For example:\n  >>> containsI(\"Hello world\")\n  True\n  >>> containsI(\"The sky is blue. The sun is shining. I love this weather\")\n  True\n  */\nconst containsBored5 = (S) => {\n    const regex = /(I)(\\s|\\S*)/;\n    const re = regex.exec(S);\n    if(re === null){\n        return false;\n    }\n    return true;\n}\n\n/*\n  Given a sentence, it will check if the sentence contains a word that start with \"I\". Sentences was delimits by '.', '?' or '!'. For example:\n  >>> containsI(\"Hello world\")\n  True\n  >>> containsI(\"The sky is blue. The sun is shining. I love this weather\")\n  True\n  */\nconst containsBored6 = (S) => {\n    const regex = /(I)(\\s|\\S*)/;\n    const re = regex.exec(S);\n    if(re === null){\n        return false;\n    }\n    return true;\n}\n\n/*\n  Given a sentence, it will check if the sentence contains a word that start with \"I\". Sentences was delimits by '.', '?' or '!'. For example:\n  >>> containsI(\"Hello world\")\n  True\n  >>> containsI(\"The sky is blue. The sun is shining. I love this weather\")\n  True\n  */\nconst containsBored7 = (S) => {\n    const regex = /(I)(\\s|\\S*)/;\n    const re = regex.exec(S);\n    if(re === null){\n        return false;\n    }\n    return true;\n}\n\n/*\n  Given a sentence, it will check if the sentence contains a word that start with \"I\". Sentences was delimits by '.', '?' or '!'. For example:\n  >>> containsI(\"Hello world\")\n  True\n  >>> containsI(\"The sky is blue. The sun is shining. I love this weather\")\n  True\n  */\nconst containsBored8 = (S) => {\n    const regex = /(I)(\\s|\\S*)/;\n    const re = regex.exec(S);\n    if(re === null){\n        return false;\n    }\n    return true;\n}\n\n/*\n  Given a sentence, it will check if the sentence contains a word that start with \"I\". Sentences was delimits by '.', '?' or '!'. For example:\n  >>> containsI(\"Hello world\")\n  True\n  >>> containsI(\"The sky is blue. The sun is shining. I love this weather\")\n  True\n  */"}
{"task_id": "JavaScript/92", "prompt": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return isInt(x) && isInt(y) && isInt(z) &&\n    (x + y === z || x === z - y) && (x + y === z || x === z - y)\n}\n\n/**\n  * Create a functions that takes 3 numbers. Returns trueer if all numbers are equal, and were not all integers.\n  Examples\n  allInt(3, 3, 3) ➞ false\n  allInt(2, 3, 2) ➞ false\n  allInt(3, 2, 3) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  return isInt(x) && isInt(y) && isInt(z) && x === y && x === z\n}\n\n/**\n  * Create a functions that takes 3 numbers. Returns trueer if all numbers are equal, and were not all integers.\n  Examples\n  allEqInt(3, 3, 3) ➞ false\n  allEqInt(2, 3, 2) ➞ false\n  allEqInt(3, 2, 3) ➞ false\n  */\nconst allEqInt = (x, y, z) => {\n  return isInt(x) && isInt(y) && isInt(z) && x === y && x === z\n}\n\n/**\n  * Create a functions that takes 3 numbers. Returns trueer if any number is equal to the sum of the other two, and were not all integers.\n  Examples\n  anyEqInt(5, 2, 7) ➞ true\n  anyEqInt(3, 2, 2) ➞ false\n  anyEqInt(3, -2, 1) ➞ true\n  anyEqInt(3.6, -2.2, 2) ➞ true\n  */\nconst anyEqInt = (x, y, z) => {\n  return isInt(x) && isInt(y) && isInt(z) &&\n    (x + y!== z) && (x + y!== z) && (x + y!== z)\n}\n\n/**\n  * Create a functions that takes 3 numbers. Returns trueer if all numbers are equal, and were not all integers.\n  Examples\n  allEqEqInt(3, 3, 3) ➞ false\n  allEqEqInt(2, 3, 2) ➞ false\n  allEqEqInt(3, 2, 3) ➞ false\n  */\nconst allEqEqInt = (x, y, z) => {\n  return isInt(x) && isInt(y) && isInt(z) && x === y && x === z\n}\n\n/**\n  * Create a functions that takes 3 numbers. Returns trueer if any number is equal to the sum of the other two, and were not all integers.\n  Examples\n  anyEqEqInt(5, 2, 7) ➞ true\n  anyEqEqInt(3, 2, 2) ➞ false\n  anyEqEqInt(3, -2, 1) ➞ true\n  anyEqEqInt(3.6, -2.2, 2) ➞ true\n  */\nconst anyEqEqInt = (x, y, z) => {\n  return isInt(x) && isInt(y) && isInt(z) &&\n    (x + y === z) && (x + y === z) && (x + y === z)\n}\n\n/**\n  * Create a functions that takes 3 numbers. Returns trueer if any number is equal to the sum of the other two, and were not all integers.\n  Examples\n  anyEqEqInt(5, 2, 7) ➞ true\n  anyEqEqInt(3, 2, 2) ➞ false\n  anyEqEqInt(3, -2, 1) ➞ true\n  anyEqEqInt(3.6, -2.2, 2) ➞ true\n  */\nconst anyEqEqEqInt = (x, y, z) => {\n  return isInt(x) && isInt(y) && isInt(z) &&\n    (x + y === z) && (x + y === z) && (x + y === z)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const letters = []\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    if (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U' || letter === 'Y') {\n      let index = letters.indexOf(letter.toLowerCase())\n      if (index === -1) {\n        index = letters.length\n        letters.push(letter.toLowerCase())\n      }\n      message[i] = letters[index]\n    } else if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u' || letter === 'y') {\n      let index = letters.indexOf(letter.toUpperCase())\n      if (index === -1) {\n        index = letters.length\n        letters.push(letter.toUpperCase())\n      }\n      message[i] = letters[index]\n    }\n  }\n  return message\n}\n\nconst decode = (message) => {\n  const letters = []\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    if (letter === 'T' || letter === 'G' || letter === 'S' || letter === 'K' || letter === 'C' || letter === 'M' || letter === 'G' || letter === 'S' || letter === 'C' || letter === 'Z') {\n      let index = letters.indexOf(letter.toUpperCase())\n      if (index === -1) {\n        index = letters.length\n        letters.push(letter.toUpperCase())\n      }\n      message[i] = letters[index]\n    } else if (letter === 'H' || letter === 'K' || letter === 'S' || letter === 'C' || letter === 'G' || letter === 'W' || letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U' || letter === 'Y') {\n      let index = letters.indexOf(letter.toLowerCase())\n      if (index === -1) {\n        index = letters.length\n        letters.push(letter.toLowerCase())\n      }\n      message[i] = letters[index]\n    }\n  }\n  return message\n}\n\nmodule.exports = {\n  encode,\n  decode\n}\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let prime = 0;\n    let primeSum = 0;\n\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] > prime) {\n            prime = lst[i];\n        }\n    }\n\n    for (let i = 0; i < prime; i++) {\n        for (let j = 0; j < 10; j++) {\n            let val = i * 10 + j;\n\n            if (lst.indexOf(val)!== -1) {\n                primeSum += val;\n            }\n        }\n    }\n\n    return primeSum;\n};\n\nconst main = () => {\n    const lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3];\n\n    console.log(skjkasdkd(lst));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict);\n  let hasAllKeys = true;\n  keys.forEach((key) => {\n    if (!key.toLowerCase().startsWith(key.toUpperCase())) {\n      hasAllKeys = false;\n    }\n  });\n  return hasAllKeys;\n};\n\nconst checkDictType = (dict) => {\n  if (Object.keys(dict).every( (key) => typeof dict[key] === \"string\")) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst checkDictEmpty = (dict) => {\n  if (Object.keys(dict).every( (key) => dict[key] === \"\")) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst checkDictLength = (dict) => {\n  if (Object.keys(dict).every( (key) => dict[key].length > 1)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nmodule.exports = {\n  checkDictCase,\n  checkDictType,\n  checkDictEmpty,\n  checkDictLength\n};\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for(let i=1; i<=n; i++){\n    let isPrime = true;\n    for(let j=2; j<i; j++){\n      if(i%j === 0){\n        isPrime = false;\n        break;\n      }\n    }\n    if(isPrime){\n      arr.push(i);\n    }\n  }\n  return arr;\n}\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  return a.toString().split('').map(digit => {\n    const multiplier = Math.pow(10, b - (digit - '0').length);\n    return a.toString().slice(0, -digit.length).split('').map(digit => {\n      return parseInt(digit, 10) * multiplier;\n    }).reduce((total, n) => {\n      return total + n;\n    });\n  });\n};\n\nconst multiply = (a, b) => {\n  return a.toString().split('').map(digit => {\n    const multiplier = Math.pow(10, b - (digit - '0').length);\n    return a.toString().slice(0, -digit.length).split('').map(digit => {\n      return parseInt(digit, 10) * multiplier;\n    }).reduce((total, n) => {\n      return total + n;\n    });\n  });\n};\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i+=2) {\n    if (s[i].toUpperCase() === s[i+1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nexport default countUpper;\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const stringValue = parseInt(value);\n  let intValue;\n  if (stringValue === Infinity) {\n    intValue = Infinity;\n  } else if (stringValue === -Infinity) {\n    intValue = -Infinity;\n  } else {\n    intValue = Math.floor(stringValue);\n    if (Math.abs(intValue - stringValue) < Math.abs(intValue - (intValue + 1))) {\n      intValue = intValue + 1;\n    }\n  }\n  return intValue;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  if (n === 1) {\n    return [n]\n  }\n  if (n % 2 === 0) {\n    return [...makeAPile(n - 1), n]\n  }\n  return [...makeAPile(n - 1), n,...makeAPile(n - 1)]\n}\n\nconsole.log(makeAPile(3))\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = [];\n  const regex = /([A-Za-z0-9]+)[\\s,\\.]*/g;\n  let match = regex.exec(s);\n  while(match!== null) {\n    words.push(match[1]);\n    match = regex.exec(s);\n  }\n  return words;\n};\n\n/*\n  Given an array of words, you will return an array of the words' length.\n  \n  For example:\n  wordsArray(\"Hi, my name is John\") == [5, 11]\n  wordsArray(\"One, two, three, four, five, six\") == [5, 7, 5]\n  */\nconst wordsArray = (s) => {\n  const words = [];\n  const regex = /([A-Za-z0-9]+)[\\s,\\.]*/g;\n  let match = regex.exec(s);\n  while(match!== null) {\n    words.push(match[0].length);\n    match = regex.exec(s);\n  }\n  return words;\n};\n\n/*\n  Given an array of numbers, you will return the largest number.\n  \n  For example:\n  numbersArray([1, 2, 3, 4, 5, 6]) == 6\n  numbersArray([1, 2, 3, 4, 5]) == 5\n  */\nconst numbersArray = (s) => {\n  const numbers = [];\n  for(let i = 0; i < s.length; i++) {\n    if(s[i]!=='') {\n      numbers.push(s[i]);\n    }\n  }\n  return Math.max(...numbers);\n};\n\n/*\n  Given a string of number separated by comma or space, you will return the sum of the numbers.\n  \n  For example:\n  numbersString(\"1, 2, 3, 4, 5, 6\") == 21\n  numbersString(\"1, 2, 3, 4, 5\") == 15\n  numbersString(\"1, 2, 3, 4, 5, 6\") == 21\n  numbersString(\"1, 2, 3\") == 6\n  */\nconst numbersString = (s) => {\n  let sum = 0;\n  const regex = /([A-Za-z0-9]+)[\\s,\\.]*/g;\n  let match = regex.exec(s);\n  while(match!== null) {\n    sum += Number(match[0]);\n    match = regex.exec(s);\n  }\n  return sum;\n};\n\n/*\n  Given an array of words, you will return the sum of the lengths of the words.\n  \n  For example:\n  wordsLengthArray(\"Hi, my name is John\") == 17\n  wordsLengthArray(\"One, two, three, four, five, six\") == 21\n  wordsLengthArray(\"One, two, three, four, five, six\") == 21\n  wordsLengthArray(\"One, two, three, four, five\") == 11\n  */\nconst wordsLengthArray = (s) => {\n  let sum = 0;\n  const regex = /([A-Za-z0-9]+)[\\s,\\.]*/g;\n  let match = regex.exec(s);\n  while(match!== null) {\n    sum += match[0].length;\n    match = regex.exec(s);\n  }\n  return sum;\n};\n\n/*\n  Given an array of words, you will return the number of words.\n  \n  For example:\n  wordsNumberArray(\"Hi, my name is John\") == 1\n  wordsNumberArray(\"One, two, three, four, five, six\") == 6\n  wordsNumberArray(\"One, two, three, four, five, six\") == 6\n  wordsNumberArray(\"One, two, three, four, five\") == 5\n  */\nconst wordsNumberArray = (s) => {\n  const regex = /([A-Za-z0-9]+)[\\s,\\.]*/g;\n  let match = regex.exec(s);\n  let count = 0;\n  while(match!== null) {\n    count++;\n    match = regex.exec(s);\n  }\n  return count;\n};\n\n/*\n  Given a string, you will return the number of spaces in the string.\n  \n  For example:\n  spaceNumber(\"Hi, my name is John\") == 5\n  spaceNumber(\"One, two, three, four, five, six\") == 9\n  spaceNumber(\"One, two, three, four, five, six\") == 9\n  spaceNumber(\"One, two, three, four, five\") == 5\n  spaceNumber(\"One, two, three, four, five, six\") == 5\n  */\nconst spaceNumber = (s) => {\n  const regex = /([A-Za-z0-9]+)[\\s,\\.]*/g;\n  let match = regex.exec(s);\n  let count = 0;\n  while(match!== null) {\n    count++;\n    match = regex.exec(s);\n  }\n  return count;\n};\n\n/*\n  Given a string, you will return the number of numbers in the string.\n  \n  For example:\n  numberNumber(\"Hi, my name is John\") == 5\n  numberNumber(\"One, two, three, four, five, six\") == 6\n  numberNumber(\"One, two, three, four, five, six\") == 6\n  numberNumber(\"One, two, three, four, five\") == 5\n  numberNumber(\"One, two, three, four, five, six\") == 5\n  */\nconst numberNumber = (s) => {\n  const regex = /([A-Za-z0-9]+)[\\s,\\.]*/g;\n  let match = regex.exec(s);\n  let count = 0;\n  while(match!== null) {\n    count++;\n    match = regex.exec(s);\n  }\n  return count;\n};\n\n/*\n  Given a string,"}
{"task_id": "JavaScript/102", "prompt": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const number = Math.floor((x + y) / 2)\n  return number <= y? number : -1\n}\n\nmodule.exports = chooseNum\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = (n + m) / 2;\n  return roundedBin(avg);\n};\n\n/*\n  Given a binary number, return the average.\n  Example:\n  roundedBin(0b100101) => \"1\"\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b110110) => -1\n  roundedBin(0b111111) => -1\n  roundedBin(0b111111) => -1\n  roundedBin(0b110110) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b111100) => -1\n  roundedBin(0b1111"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n    const sorted = [];\n    for (let i = 0; i < x; i++) {\n        const num = parseInt(i);\n        if (num < 10) {\n            continue;\n        }\n        sorted.push(num);\n    }\n    return sorted;\n}\n\n// let a = uniqueDigits([15, 33, 1422, 1]);\n// console.log(a);\n// a = uniqueDigits([152, 323, 1422, 10]);\n// console.log(a);\n\nmodule.exports = uniqueDigits;\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const names = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\"\n  };\n  const result = [];\n  const nums = [];\n  const str = arr.join(\"\");\n  let i = 0;\n  while(i < str.length) {\n    nums.push(str[i]);\n    i++;\n  }\n  nums.sort();\n  i = 0;\n  while(i < nums.length) {\n    result.push(names[nums[i]]);\n    i++;\n  }\n  return result;\n};\n\nconsole.log(byLength([1, 2, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([]));\nconsole.log(byLength([1, -1, 55]));\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = []\n  let max = Math.floor(n/2)\n  for (let i = 1; i <= max; i++) {\n    if (n % 2 === 0) {\n      result.push(1)\n      result.push(i)\n      result.push(Math.pow(i, n))\n    } else {\n      let sum = 0\n      for (let j = 1; j <= i; j++) {\n        sum += j\n      }\n      result.push(sum)\n    }\n  }\n  return result\n}\n\n/*\n  Takes the list of sizes as a parameter, and returns a list of the sum of each number from 0 to size - 1, where size is the last element of the list.\n  Example:\n  s(5) == [1, 1, 1, 1, 1]\n  */\nconst s = (n) => {\n  let result = []\n  for (let i = 0; i <= n; i++) {\n    result.push(i)\n  }\n  return result\n}\n\n/*\n  Takes the list of sizes as a parameter, and returns a list of the sum of each number from 0 to size - 1, where size is the last element of the list,\n  and the list is in descending order.\n  Example:\n  s(5) == [1, 1, 1, 1, 1]\n  */\nconst sd = (n) => {\n  let result = []\n  for (let i = n; i >= 0; i--) {\n    result.push(i)\n  }\n  return result\n}\n\nmodule.exports = {\n  f,\n  s,\n  sd\n}\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let i = 0;\n  let evenOdd = [];\n  let isOdd = false;\n  let even = 0;\n\n  while (i < n) {\n    if (i % 2 === 0) {\n      if (isOdd) {\n        evenOdd.push(i);\n      }\n      isOdd = false;\n    } else {\n      isOdd = true;\n    }\n\n    i++;\n  }\n\n  return (evenOdd);\n};\n\n// TEST\n\n/*\n  Input: 12\n  Output: (4, 6)\n  Explanation:\n  Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n*/\nconsole.log(evenOddPalindrome(12));\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  arr.forEach((num) => {\n    sum += num;\n  });\n  return sum > 0? arr.filter((num) => num > 0).length : 0;\n};\n\n/*\n  Writes a function countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  arr.forEach((num) => {\n    sum += num;\n  });\n  return sum > 0? arr.filter((num) => num > 0).length : 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const n = arr.length\n  if (n <= 1) return true\n  let i = 0\n  while (i < n - 1) {\n    let j = i + 1\n    while (j < n && arr[j] <= arr[i]) j++\n    if (j < n) {\n      const tmp = arr[i]\n      for (let k = i; k < j; k++) {\n        arr[k] = arr[k + 1]\n      }\n      arr[j] = tmp\n    } else {\n      break\n    }\n    i = j\n  }\n  return i == n - 1\n}\n\nmoveOneBall([3, 4, 5, 1, 2])\nmoveOneBall([3, 5, 4, 1, 2])\nmoveOneBall([3, 5, 4, 1, 2, 4, 3, 1, 2])\nmoveOneBall([3, 5, 4, 1, 2, 4, 3, 1, 2, 5, 6, 4, 3, 1, 2])\nmoveOneBall([3, 5, 4, 1, 2, 4, 3, 1, 2, 5, 6, 4, 3, 1, 2, 5, 6])\nmoveOneBall([3, 5, 4, 1, 2, 4, 3, 1, 2, 5, 6, 4, 3, 1, 2, 5, 6, 7])\nmoveOneBall([3, 5, 4, 1, 2, 4, 3, 1, 2, 5, 6, 4, 3, 1, 2, 5, 6, 7, 9, 8, 7, 6, 5, 4, 3, 1, 2])\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n    if (lst1.length === 0 || lst2.length === 0) {\n        return false;\n    }\n\n    let res = \"\";\n\n    for (let i = 0; i < lst1.length; i++) {\n        let num1 = lst1[i];\n        let num2 = lst2[i];\n        if (num1 % 2!== 0 && num2 % 2!== 0) {\n            res += \"NO\";\n            return res;\n        } else {\n            res += \"YES\";\n        }\n    }\n\n    return res;\n}\n\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase();\n  const letterCount = {};\n  for (let i = 0; i < test.length; i++) {\n    if (!letterCount[test[i]]) {\n      letterCount[test[i]] = 1;\n    } else {\n      letterCount[test[i]]++;\n    }\n  }\n  return letterCount;\n};\n\nexport default histogram;<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n    let i = 0;\n    let j = 0;\n    let len = 0;\n    let result = [];\n    while (i < s.length) {\n        if (c.indexOf(s[i]) > -1) {\n            i += 1;\n        } else {\n            result.push(s[i]);\n            i += 1;\n        }\n    }\n    len = result.length;\n    while (j < len / 2) {\n        if (result[j] === result[j + len - 1]) {\n            result.splice(j, 1);\n            result.splice(j + len - 1, 1);\n            len -= 2;\n        } else {\n            j += 1;\n        }\n    }\n    return [result, (s === result.join(''))];\n};\n\nmodule.exports = reverseDelete;<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const lstLen = lst.length\n  let cnt = 0\n  let result = []\n  for (let i = 0; i < lstLen; i++) {\n    for (let j = 0; j < lstLen; j++) {\n      if (lst[i].length === lst[j].length) {\n        let str = lst[i].replace(/\\D/g, '')\n        let k = 0\n        while (k < str.length) {\n          let isOdd = (str[k] === str[k + 1])\n          if (isOdd) {\n            cnt++\n            k += 2\n          } else {\n            k += 1\n          }\n        }\n      }\n    }\n  }\n  result = [`the number of odd elements ${cnt} of the str4ng ${lstLen} of the ${lstLen}put.`]\n  return result\n}\n\nmodule.exports = oddCount\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = (i, j) => nums[i] + nums[j];\n  const max = Math.max;\n  let sum_array = nums;\n  let sub_sum_array = sum_array;\n  let min = sum_array[0];\n  let i = 0;\n  let j = 0;\n  while (i < sum_array.length) {\n    if (sum_array[i]!== 0) {\n      min = Math.min(min, sum_array[i]);\n      sub_sum_array = sum_array.slice(i + 1);\n    } else {\n      if (sub_sum_array.length > 0) {\n        min = Math.min(min, sub_sum_array[0]);\n      }\n      break;\n    }\n    i++;\n  }\n  return min;\n};\n\nexport default minSubArraySum;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length\n  const m = grid[0].length\n\n  let cnt = 0\n  let i = 0\n  let j = 0\n\n  while (i < n && j < m) {\n    if (grid[i][j] === 1) {\n      cnt += 1\n      j += 1\n    } else {\n      i += 1\n    }\n  }\n\n  return cnt\n}\n\nconst test = (grid, capacity) => {\n  console.log(`Input:`)\n  console.log(`  grid:`)\n  console.log(`    ${grid}`)\n  console.log(`  bucket_capacity:`)\n  console.log(`    ${capacity}`)\n  console.log(`Output:`)\n  console.log(`  cnt:`)\n  console.log(`    ${cnt}`)\n}\n\nconst main = async () => {\n  const grid = [\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1]\n  ]\n\n  let capacity = 1\n  let cnt = 0\n\n  while (cnt < maxFill(grid, capacity)) {\n    cnt = maxFill(grid, capacity)\n    capacity++\n  }\n\n  test(grid, capacity)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const result = [];\n  const sortedArray = arr.slice();\n  sortedArray.sort(\n    (a, b) => {\n      const aDigits = a.toString().split('');\n      const bDigits = b.toString().split('');\n      const aIndex = aDigits.findIndex(digit => parseInt(digit, 10) > 0);\n      const bIndex = bDigits.findIndex(digit => parseInt(digit, 10) > 0);\n      if (aIndex === -1 && bIndex === -1) {\n        return a - b;\n      } else if (aIndex === -1) {\n        return -1;\n      } else if (bIndex === -1) {\n        return 1;\n      } else {\n        const aDigit = aDigits[aIndex];\n        const bDigit = bDigits[bIndex];\n        if (aDigit === '1' && bDigit === '1') {\n          return a - b;\n        } else if (aDigit === '0') {\n          return -1;\n        } else if (bDigit === '0') {\n          return 1;\n        } else {\n          return aDigit.localeCompare(bDigit);\n        }\n      }\n    }\n  );\n\n  for (let i = 0; i < sortedArray.length; i++) {\n    result.push(sortedArray[i]);\n  }\n\n  return result;\n};\n\nexport default sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let result = [];\n  let index = 0;\n  while (index < s.length) {\n    let word = '';\n    let count = 0;\n    while (index < s.length && count < n) {\n      if (s[index].toUpperCase() === s[index]) {\n        word += s[index];\n        index++;\n      } else {\n        break;\n      }\n      count++;\n    }\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nmodule.exports = selectWords;\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  if (word.length === 0) {\n    return '';\n  }\n  let vowel = '';\n  let firstConsonant = word[0];\n  let lastConsonant = word[word.length - 1];\n  let indexOfFirstVowel = 0;\n  let indexOfLastVowel = word.length - 1;\n  let vowelCount = 0;\n  for (let i = 0; i < word.length; i++) {\n    if (word[i].toUpperCase() === firstConsonant.toUpperCase()) {\n      indexOfFirstVowel = i;\n      break;\n    }\n  }\n  for (let i = word.length - 1; i >= 0; i--) {\n    if (word[i].toUpperCase() === lastConsonant.toUpperCase()) {\n      indexOfLastVowel = i;\n      break;\n    }\n  }\n  for (let i = indexOfFirstVowel; i < indexOfLastVowel; i++) {\n    if (word[i].toUpperCase() === lastConsonant.toUpperCase() &&\n        word[i - 1].toUpperCase() === firstConsonant.toUpperCase()) {\n      if (i === indexOfFirstVowel) {\n        vowel = firstConsonant;\n      } else if (i === indexOfLastVowel) {\n        vowel = lastConsonant;\n      } else {\n        vowel = word[i];\n      }\n      vowelCount++;\n    }\n  }\n  return vowel.toUpperCase();\n};\n\nconsole.log(getClosestVowel('yogurt'));\nconsole.log(getClosestVowel('FULL'));\nconsole.log(getClosestVowel('quick'));\nconsole.log(getClosestVowel('ab'));\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  const len = lst.length;\n  for (let i = 0; i < len; i++) {\n    stack.push(lst[i]);\n  }\n\n  let start = 0;\n  let count = 0;\n  while (stack.length > 0) {\n    count++;\n    const cur = stack.pop();\n    if (cur === '(') {\n      stack.push(cur);\n      continue;\n    }\n\n    const right = stack.pop();\n    if (right!== '(') {\n      return 'No';\n    }\n\n    stack.push(cur, right);\n  }\n\n  return count === 1? 'Yes' : 'No';\n};\n\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(match"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  if (k === 1) return arr\n  if (k === 0) return []\n  const max = arr.slice(0, k)\n  let maxIndex = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (max.indexOf(arr[i]) === -1) {\n      max.push(arr[i])\n      if (max.length > k) {\n        max.splice(0, 1)\n        maxIndex = 0\n      } else {\n        maxIndex++\n      }\n    }\n  }\n  return max.slice(0, k)\n}\n\nexport default maximum\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  return lst.reduce((pre, curr, i) => {\n    if (i % 2 === 0) {\n      return pre + curr;\n    }\n    return pre;\n  });\n}\n\n// console.log(solution([3, 3, 3, 3, 3]));\n// console.log(solution([5, 8, 7, 1]));\n// console.log(solution([30, 13, 24, 321]));<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n    const result = [];\n    for (let i = 0; i < arr.length; i += 1) {\n        const sum = arr[i] + arr[i + k];\n        if (sum < 10) {\n            result.push(sum);\n        }\n    }\n    return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const oddCollatz = []\n\n  oddCollatz.push(n)\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddCollatz.push(n)\n    }\n\n    n = parseInt(n / 2)\n  }\n\n  return oddCollatz\n}\n\n/*\n  Gives a positive integers n, return a sorted list that had the odd numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odd, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n  */\nconst getOddCollatz = (n) => {\n  const oddCollatz = []\n\n  oddCollatz.push(n)\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddCollatz.push(n)\n    }\n\n    n = parseInt(n / 2)\n  }\n\n  return oddCollatz\n}\n\nconst getOddCollatz = (n) => {\n  const oddCollatz = []\n\n  oddCollatz.push(n)\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddCollatz.push(n)\n    }\n\n    n = parseInt(n / 2)\n  }\n\n  return oddCollatz\n}\n\nconst getOddCollatz = (n) => {\n  const oddCollatz = []\n\n  oddCollatz.push(n)\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddCollatz.push(n)\n    }\n\n    n = parseInt(n / 2)\n  }\n\n  return oddCollatz\n}\n\nconst getOddCollatz = (n) => {\n  const oddCollatz = []\n\n  oddCollatz.push(n)\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddCollatz.push(n)\n    }\n\n    n = parseInt(n / 2)\n  }\n\n  return oddCollatz\n}\n\nconst getOddCollatz = (n) => {\n  const oddCollatz = []\n\n  oddCollatz.push(n)\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddCollatz.push(n)\n    }\n\n    n = parseInt(n / 2)\n  }\n\n  return oddCollatz\n}\n\nconst getOddCollatz = (n) => {\n  const oddCollatz = []\n\n  oddCollatz.push(n)\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddCollatz.push(n)\n    }\n\n    n = parseInt(n / 2)\n  }\n\n  return oddCollatz\n}\n\nconst getOddCollatz = (n) => {\n  const oddCollatz = []\n\n  oddCollatz.push(n)\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddCollatz.push(n)\n    }\n\n    n = parseInt(n / 2)\n  }\n\n  return oddCollatz\n}\n\nconst getOddCollatz = (n) => {\n  const oddCollatz = []\n\n  oddCollatz.push(n)\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddCollatz.push(n)\n    }\n\n    n = parseInt(n / 2)\n  }\n\n  return oddCollatz\n}\n\nconst getOddCollatz = (n) => {\n  const oddCollatz = []\n\n  oddCollatz.push(n)\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddCollatz.push(n)\n    }\n\n    n = parseInt(n / 2)\n  }\n\n  return oddCollatz\n}\n\nconst getOddCollatz = (n) => {\n  const oddCollatz = []\n\n  oddCollatz.push(n)\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddCollatz.push(n)\n    }\n\n    n = parseInt(n / 2)\n  }\n\n  return oddCollatz\n}\n\nconst getOddCollatz = (n) => {\n  const oddCollatz = []\n\n  oddCollatz.push(n)\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddCollatz.push(n)\n    }\n\n    n = parseInt(n / 2)\n  }\n\n  return oddCollatz\n}\n\nconst getOddCollatz = (n) => {\n  const oddCollatz = []\n\n  oddCollatz.push(n)\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddCollatz.push(n)\n    }\n\n    n = parseInt(n / 2)\n  }\n\n  return oddCollatz\n}\n\nconst getOddCollatz = (n) => {\n  const oddCollatz = []\n\n  oddCollatz.push(n)\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddCollatz.push(n)\n    }\n\n    n = parse"}
{"task_id": "JavaScript/124", "prompt": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n    let d = new Date(date);\n    if(d.getDate() >= 1 && d.getDate() <= 31)\n    {\n        if(d.getMonth() >= 1 && d.getMonth() <= 12)\n        {\n            if(d.getDate() >= 1 && d.getDate() <= 30)\n            {\n                if(d.getMonth() >= 1 && d.getMonth() <= 2)\n                {\n                    return false;\n                }\n                else\n                {\n                    return true;\n                }\n            }\n            else\n            {\n                return false;\n            }\n        }\n        else\n        {\n            return false;\n        }\n    }\n    else\n    {\n        return false;\n    }\n}\n\n/*\nYou had to write a function which validates a given string and returns true if the string is valid otherwise false. The string is valid if all of the following rule was satisfies: 1. The string is not empty. 2. The string does not contain any invalid character. 3. The string is lower case. 4. The string is only consists of number.\n*/\nconst validString = (string) => {\n    if(string.length === 0)\n    {\n        return false;\n    }\n    if(string.match(/[^0-9]/i))\n    {\n        return false;\n    }\n    if(string.toLowerCase() === string)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n\nconst validEmail = (email) => {\n    if(email.length > 0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n\nconst validate = (value) => {\n    if(value.length > 0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n\nmodule.exports = {\n    validDate: validDate,\n    validString: validString,\n    validEmail: validEmail,\n    validate: validate\n}<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.toLowerCase().split(/\\s+/).filter(w => w.length > 0)\n}\n\n/**\n  Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsCount = (txt) => {\n  return txt.toLowerCase().split(/\\s+/).filter(w => w.length > 0).length\n}\n\nconst splitWordsCountStr = (txt) => {\n  return txt.toLowerCase().split(/\\s+/).filter(w => w.length > 0).length\n}\n\nconst splitWordsCountCount = (txt) => {\n  return txt.toLowerCase().split(/\\s+/).filter(w => w.length > 0).length\n}\n\nconst splitWordsCountStrCount = (txt) => {\n  return txt.toLowerCase().split(/\\s+/).filter(w => w.length > 0).length\n}\n\nconst splitWordsCountCountCount = (txt) => {\n  return txt.toLowerCase().split(/\\s+/).filter(w => w.length > 0).length\n}\n\nconst splitWordsCountStrCountCount = (txt) => {\n  return txt.toLowerCase().split(/\\s+/).filter(w => w.length > 0).length\n}\n\nconst splitWordsCountStrCountCountCount = (txt) => {\n  return txt.toLowerCase().split(/\\s+/).filter(w => w.length > 0).length\n}\n\nconst splitWordsCountStrCountCountCountCount = (txt) => {\n  return txt.toLowerCase().split(/\\s+/).filter(w => w.length > 0).length\n}\n\nconst splitWordsCountStrCountCountCountCountCount = (txt) => {\n  return txt.toLowerCase().split(/\\s+/).filter(w => w.length > 0).length\n}\n\nconst splitWordsCountStrCountCountCountCountCountCount = (txt) => {\n  return txt.toLowerCase().split(/\\s+/).filter(w => w.length > 0).length\n}\n\nconst splitWordsCountStrCountCountCountCountCountCountCount = (txt) => {\n  return txt.toLowerCase().split(/\\s+/).filter(w => w.length > 0).length\n}\n\nconst splitWordsCountStrCountCountCountCountCountCountCountCount = (txt) => {\n  return txt.toLowerCase().split(/\\s+/).filter(w => w.length > 0).length\n}\n\nconst splitWordsCountStrCountCountCountCountCountCountCountCountCount = (txt) => {\n  return txt.toLowerCase().split(/\\s+/).filter(w => w.length > 0).length\n}\n\nconst splitWordsCountStrCountCountCountCountCountCountCountCountCountCount = (txt) => {\n  return txt.toLowerCase().split(/\\s+/).filter(w => w.length > 0).length\n}\n\nconst splitWordsCountStrCountCountCountCountCountCountCountCountCountCountCount = (txt) => {\n  return txt.toLowerCase().split(/\\s+/).filter(w => w.length > 0).length\n}\n\nconst splitWordsCountStrCountCountCountCountCountCountCountCountCountCountCountCount = (txt) => {\n  return txt.toLowerCase().split(/\\s+/).filter(w => w.length > 0).length\n}\n\nconst splitWordsCountStrCountCountCountCountCountCountCountCountCountCountCountCountCount = (txt) => {\n  return txt.toLowerCase().split(/\\s+/).filter(w => w.length > 0).length\n}\n\nconst splitWordsCountStrCountCountCountCountCountCountCountCountCountCountCountCountCountCount = (txt) => {\n  return txt.toLowerCase().split(/\\s+/).filter(w => w.length > 0).length\n}\n\nconst splitWordsCountStrCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount = (txt) => {\n  return txt.toLowerCase().split(/\\s+/).filter(w => w.length > 0).length\n}\n\nconst splitWordsCountStrCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount = (txt) => {\n  return txt.toLowerCase().split(/\\s+/).filter(w => w.length > 0).length\n}\n\nconst splitWordsCountStrCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount = (txt) => {\n  return txt.toLowerCase().split(/\\s+/).filter(w => w.length > 0).length\n}\n\nconst splitWordsCountStrCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount = (txt) => {\n  return txt.toLowerCase().split(/\\s+/).filter(w => w.length > 0).length\n}\n\nconst splitWordsCountStrCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount = (txt) => {\n  return txt.toLowerCase().split(/\\s+/).filter(w => w.length > 0).length\n}\n\nconst splitWordsCountStrCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount"}
{"task_id": "JavaScript/126", "prompt": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  return lst.every((x, i) => {\n    if (i > 0 && x <= lst[i - 1]) {\n      return false;\n    }\n    return true;\n  })\n}\n\nmodule.exports = isSorted\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n\n  if (start1 >= start2 && end1 <= end2) {\n    return 'YES'\n  }\n\n  if (start1 <= start2 && end1 >= end2) {\n    return 'YES'\n  }\n\n  if (start1 < start2 && end1 > end2) {\n    return 'NO'\n  }\n\n  return 'NO'\n}\n\nexport { intersection }\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (!arr || arr.length === 0) return null;\n\n  let res = 0;\n  for (let i = 0; i < arr.length; i++) {\n    res = res + Math.sign(arr[i]) * Math.abs(arr[i]);\n  }\n  return res;\n};\n\nconsole.log(prodSigns([1, 2, 2, -4]));\nconsole.log(prodSigns([0, 1]));\nconsole.log(prodSigns([]));\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length\n  if (k > n * n) {\n    return []\n  }\n  const dp = new Array(n * n + 1)\n  dp[0] = 1\n  for (let i = 1; i <= n * n; i++) {\n    dp[i] = Infinity\n    for (let j = 0; j < n * n; j++) {\n      if (i - j > 0 && grid[j][i - j]!== undefined) {\n        dp[i] = Math.min(dp[i], dp[j] + 1)\n      }\n    }\n  }\n  const minPaths = []\n  for (let i = 1; i <= n * n; i++) {\n    if (dp[i] === k) {\n      minPaths.push(grid[k - 1][i - 1])\n    }\n  }\n  return minPaths\n}\n\nconst test = (grid, k) => {\n  const n = grid.length\n  let res = []\n  for (let i = 1; i <= n * n; i++) {\n    if (i - k > 0) {\n      res.push(grid[k - 1][i - 1])\n    }\n  }\n  console.log(res)\n}\n\ntest([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i - 1]);\n  }\n  return tri;\n};\n\nconsole.log(tri(3));\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    result += i * j;\n    i++;\n    j++;\n    if (j > n) {\n      j = 1;\n    }\n  }\n  return result;\n};\n\nconst largest = (n) => {\n  let result = 0;\n  let i = 1;\n  while (i <= n) {\n    result += i;\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = {\n  digits,\n  largest\n};\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  const nestedCount = (string) => string.match(/\\[\\[\\]\\]/)\n  const nonNestedCount = (string) => string.match(/\\[\\]/)\n\n  return (string) =>\n    nestedCount(string) > 0 &&\n    nonNestedCount(string) > 0\n}\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n    return lst.reduce((sum, elem) => sum + elem * elem, 0);\n};\n\nconst sumSquared = (lst) => {\n    return lst.reduce((sum, elem) => sum + elem * elem, 0);\n};\n\nconst sumSquaredRounded = (lst) => {\n    return lst.reduce((sum, elem) => sum + Math.round(elem * elem), 0);\n};\n\nmodule.exports = { sumSquares, sumSquaredRounded };\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const isAlpha = /^[a-zA-Z]+$/\n  const isAlphaNum = /^[a-zA-Z0-9]+$/\n  const isNum = /^[0-9]+$/\n  const isWord = /^[a-zA-Z0-9]+$/\n  const hasSpace = /\\s+/\n  const words = /\\s+/\n  const lastChar = txt[txt.length - 1]\n  const lastCharIsAlpha = isAlpha.test(lastChar)\n  const lastCharIsAlphaNum = isAlphaNum.test(lastChar)\n  const lastCharIsNum = isNum.test(lastChar)\n  const lastCharIsWord = isWord.test(lastChar)\n  const hasSpaceInLast = hasSpace.test(txt)\n  const isLastCharAlpha = lastCharIsAlpha\n  const isLastCharAlphaNum = lastCharIsAlphaNum\n  const isLastCharNum = lastCharIsNum\n  const isLastCharWord = lastCharIsWord\n  const hasSpaceInLastOrLast = hasSpaceInLast || isLastCharAlphaNum || isLastCharNum || isLastCharWord\n\n  return!hasSpaceInLastOrLast\n}\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length === 0) return -1\n  let max = 0\n  let index = 0\n  let length = arr.length\n\n  for (let i = 1; i < length; i++) {\n    if (arr[i] <= arr[index]) {\n      index = i\n    } else {\n      if (arr[i] > arr[max]) {\n        max = i\n      }\n    }\n  }\n\n  return max\n}\n\nmodule.exports = canArrange\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return (null, null);\n  }\n  let max = -Infinity;\n  let min = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    let x = lst[i];\n    if (x < 0) {\n      max = Math.max(x, max);\n    }\n    else {\n      min = Math.min(x, min);\n    }\n  }\n  if (max === -Infinity) {\n    return (null, null);\n  }\n  return ([max, min]);\n};\n\nconst findMaximum = (lst) => {\n  let max = -Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    let x = lst[i];\n    if (x > max) {\n      max = x;\n    }\n  }\n  return max;\n};\n\nconst findMinimum = (lst) => {\n  let min = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    let x = lst[i];\n    if (x < min) {\n      min = x;\n    }\n  }\n  return min;\n};\n\nconst findMaximumAndMinimum = (lst) => {\n  let max = -Infinity;\n  let min = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    let x = lst[i];\n    if (x > max) {\n      max = x;\n    }\n    if (x < min) {\n      min = x;\n    }\n  }\n  return [max, min];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  let [max, min] = largestSmallestIntegers(lst);\n  if (max === null) {\n    return largestSmallestIntegers(lst.filter(x => x >= 0));\n  }\n  if (min === null) {\n    return largestSmallestIntegers(lst.filter(x => x < 0));\n  }\n  return largestSmallestIntegers(lst.filter(x => x >= 0 && x < min));\n};\n\nconst testLargestSmallestIntegers = () => {\n  console.log(\n    largestSmallestIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n  console.log(\n    largestSmallestIntegers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]));\n  console.log(\n    largestSmallestIntegers([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n  console.log(\n    largestSmallestIntegers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13]));\n  console.log(\n    largestSmallestIntegers([-2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14]));\n  console.log(\n    largestSmallestIntegers([-3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]));\n  console.log(\n    largestSmallestIntegers([-4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16]));\n  console.log(\n    largestSmallestIntegers([-5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17]));\n  console.log(\n    largestSmallestIntegers([-6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18]));\n  console.log(\n    largestSmallestIntegers([-7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]));\n  console.log(\n    largestSmallestIntegers([-8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]));\n  console.log(\n    largestSmallestIntegers([-9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21]));\n  console.log(\n    largestSmallestIntegers([-10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22]));\n  console.log(\n    largestSmallestIntegers([-11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23]));\n  console.log(\n    largestSmallestIntegers([-12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24]));\n  console.log(\n    largestSmallestIntegers([-13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25]));\n  console.log(\n    largestSmallestIntegers([-14, -15, -16, -17"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is . or , compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n    let result = a;\n    if (typeof a === 'number') {\n      if (typeof b === 'number') {\n        if (a > b) result = b;\n      } else if (typeof b ==='string') {\n        if (parseFloat(a) > parseFloat(b)) result = b;\n      }\n    } else if (typeof a ==='string') {\n      if (typeof b === 'number') {\n        if (parseFloat(a) > parseFloat(b)) result = b;\n      } else if (typeof b ==='string') {\n        if (a > b) result = b;\n      }\n    }\n    return result;\n  };\n  const compare = compareOne;\n  const compareTwo = (a, b) => {\n    let result = a;\n    if (typeof a === 'number') {\n      if (typeof b === 'number') {\n        if (a > b) result = b;\n      } else if (typeof b ==='string') {\n        if (parseFloat(a) > parseFloat(b)) result = b;\n      }\n    } else if (typeof a ==='string') {\n      if (typeof b === 'number') {\n        if (parseFloat(a) > parseFloat(b)) result = b;\n      } else if (typeof b ==='string') {\n        if (a > b) result = b;\n      }\n    }\n    return result;\n  };\n  const compareThree = (a, b, c) => {\n    let result = a;\n    if (typeof a === 'number') {\n      if (typeof b === 'number') {\n        if (typeof c === 'number') {\n          if (a > b) {\n            if (a > c) result = c;\n          } else if (c > b) result = b;\n        } else if (typeof c ==='string') {\n          if (parseFloat(a) > parseFloat(b)) {\n            if (parseFloat(a) > parseFloat(c)) result = c;\n          } else if (parseFloat(c) > parseFloat(b)) result = b;\n        }\n      } else if (typeof b ==='string') {\n        if (typeof c === 'number') {\n          if (parseFloat(a) > parseFloat(b)) {\n            if (parseFloat(a) > parseFloat(c)) result = c;\n          } else if (parseFloat(c) > parseFloat(b)) result = b;\n        } else if (typeof c ==='string') {\n          if (a > b) {\n            if (parseFloat(a) > parseFloat(c)) result = c;\n          } else if (parseFloat(c) > parseFloat(b)) result = b;\n        }\n      }\n    } else if (typeof a ==='string') {\n      if (typeof b === 'number') {\n        if (typeof c === 'number') {\n          if (parseFloat(a) > parseFloat(b)) {\n            if (parseFloat(a) > parseFloat(c)) result = c;\n          } else if (parseFloat(c) > parseFloat(b)) result = b;\n        } else if (typeof c ==='string') {\n          if (a > b) {\n            if (parseFloat(a) > parseFloat(c)) result = c;\n          } else if (parseFloat(c) > parseFloat(b)) result = b;\n        }\n      } else if (typeof b ==='string') {\n        if (typeof c === 'number') {\n          if (a > b) {\n            if (parseFloat(a) > parseFloat(c)) result = c;\n          } else if (parseFloat(c) > parseFloat(b)) result = b;\n        } else if (typeof c ==='string') {\n          if (a > b) {\n            if (parseFloat(a) > parseFloat(c)) result = c;\n          } else if (parseFloat(c) > parseFloat(b)) result = b;\n        }\n      }\n    }\n    return result;\n  };\n  const compareFour = (a, b, c, d) => {\n    let result = a;\n    if (typeof a === 'number') {\n      if (typeof b === 'number') {\n        if (typeof c === 'number') {\n          if (typeof d === 'number') {\n            if (a > b) {\n              if (a > c) {\n                if (a > d) result = d;\n              } else if (c > d) result = d;\n            } else if (c > d) result = d;\n          } else if (typeof d ==='string') {\n            if (parseFloat(a) > parseFloat(b)) {\n              if (parseFloat(a) > parseFloat(c)) {\n                if (parseFloat(a) > parseFloat(d)) result = d;\n              } else if (parseFloat(c) > parseFloat(d)) result = d;\n            } else if (parseFloat(c) > parseFloat(d)) result = d;\n          }\n        } else if (typeof d ==='string') {\n          if (parseFloat(a) > parseFloat(b)) {\n            if (parseFloat(a) > parseFloat(c)) {\n              if (parseFloat(a) > parseFloat(d)) result = d;\n            } else if (parseFloat(c) > parseFloat(d)) result = d;\n          } else if (parseFloat(c) > parseFloat(d)) result = d;\n        }\n      } else if (typeof c ==='string') {\n        if (typeof d === 'number') {\n          if (parseFloat(a) > parseFloat(b)) {\n            if (parseFloat(a) > parseFloat(c)) {\n              if (parseFloat(a) > parseFloat(d)) result"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if(n === 1) { return false; }\n  return (n % 2 === 0) && (n % 4 === 0);\n}\n\nconst isEqualToSumEvenOrOdd = (n) => {\n  if(n === 1) { return false; }\n  return (n % 2 === 0) || (n % 4 === 0);\n}\n\nexport default {\n  isEqualToSumEven,\n  isEqualToSumEvenOrOdd\n}<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  // use recursion to find the factorial of n\n  return (n)? specialFactorial(n-1) + specialFactorial(n-2) + specialFactorial(n-3) + 1 : 1;\n};\n\n// example call\nconst n = 3;\nconsole.log(specialFactorial(n));\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/ /g, '_')\n}\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst removeSpaces = (text) => {\n  return text.replace(/\\s/g, '')\n}\n\n// ********** BEGIN MAIN **********\nconst main = (text) => {\n  const all = removeSpaces(text)\n  return fixSpaces(all)\n}\n\n// ********** END MAIN **********\n\nexport { main }\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let valid = true\n  let file_name_split = file_name.split(\".\")\n  let file_name_length = file_name_split.length\n  let i = 0\n  let is_valid = true\n\n  /*Validate file name*/\n  while (valid && i < file_name_length) {\n    let substring = file_name_split[i]\n    if (!/[0-9]/.test(substring)) {\n      valid = false\n      break\n    }\n    i++\n  }\n  /*Validate file extension*/\n  if (valid && i!= file_name_length) {\n    let extension = file_name_split[i]\n    if (!(/txt|exe|dll/i.test(extension) || /\\.txt$|\\.exe$|\\.dll$/i.test(extension))) {\n      valid = false\n    }\n  }\n\n  return valid? 'Yes' : 'No'\n}\n\n/*\n  Given a string, it returns the next larger string which can be obtained\n  by adding one char to the end of the original string.\n  Examples:\n  nextString('a') -> 'b'\n  nextString('c') -> 'd'\n  nextString('e') -> 'f'\n  nextString('g') -> 'h'\n  nextString('i') -> 'j'\n  nextString('j') -> 'k'\n  nextString('k') -> 'l'\n  nextString('l') ->'m'\n  nextString('m') -> 'n'\n  nextString('n') -> 'o'\n  nextString('o') -> 'p'\n  nextString('p') -> 'q'\n  nextString('q') -> 'r'\n  nextString('r') ->'s'\n  nextString('s') -> 't'\n  nextString('t') -> 'u'\n  nextString('u') -> 'v'\n  nextString('v') -> 'w'\n  nextString('w') -> 'x'\n  nextString('x') -> 'y'\n  nextString('y') -> 'z'\n  nextString('z') -> 'a'\n*/\nconst nextString = (original_string) => {\n  let next_string = original_string + '1'\n  if (next_string.length > original_string.length) {\n    return next_string\n  }\n  return original_string\n}\n\n/*\n  Given a string, it returns the previous larger string which can be obtained\n  by adding one char to the end of the original string.\n  Examples:\n  previousString('a') -> 'a'\n  previousString('b') -> 'a'\n  previousString('c') -> 'b'\n  previousString('d') -> 'c'\n  previousString('e') -> 'd'\n  previousString('f') -> 'e'\n  previousString('g') -> 'f'\n  previousString('h') -> 'g'\n  previousString('i') -> 'h'\n  previousString('j') -> 'i'\n  previousString('k') -> 'j'\n  previousString('l') -> 'k'\n  previousString('m') -> 'l'\n  previousString('n') ->'m'\n  previousString('o') -> 'n'\n  previousString('p') -> 'o'\n  previousString('q') -> 'p'\n  previousString('r') -> 'q'\n  previousString('s') -> 'r'\n  previousString('t') ->'s'\n  previousString('u') -> 't'\n  previousString('v') -> 'u'\n  previousString('w') -> 'v'\n  previousString('x') -> 'w'\n  previousString('y') -> 'x'\n  previousString('z') -> 'y'\n*/\nconst previousString = (original_string) => {\n  let previous_string = original_string.substring(0, original_string.length - 1)\n  if (previous_string.length > original_string.length) {\n    return previous_string\n  }\n  return original_string\n}\n\n/*\n  Given a string, it returns the next larger string which can be obtained\n  by removing one char from the end of the original string.\n  Examples:\n  nextRemove('a') -> 'a'\n  nextRemove('b') -> 'b'\n  nextRemove('c') -> 'c'\n  nextRemove('d') -> 'd'\n  nextRemove('e') -> 'e'\n  nextRemove('f') -> 'f'\n  nextRemove('g') -> 'g'\n  nextRemove('h') -> 'h'\n  nextRemove('i') -> 'i'\n  nextRemove('j') -> 'j'\n  nextRemove('k') -> 'k'\n  nextRemove('l') -> 'l'\n  nextRemove('m') ->'m'\n  nextRemove('n') -> 'n'\n  nextRemove('o') -> 'o'\n  nextRemove('p') -> 'p'\n  nextRemove('q') -> 'q'\n  nextRemove('r') -> 'r'\n  nextRemove('s') ->'s'\n  nextRemove('t') -> 't'\n  nextRemove('u') -> 'u'\n  nextRemove('v') -> 'v'\n  nextRemove('w') -> 'w'\n  nextRemove('x') -> 'x'\n  nextRemove('y') -> 'y'\n  nextRemove('z') -> 'z'\n*/\nconst nextRemove = ("}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n    if (lst.length === 0) {\n        return 0;\n    }\n\n    const lstSquared = lst.map(i => i * i);\n\n    let sumSquares = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0 || i % 4 === 0) {\n            sumSquares += lstSquared[i];\n        }\n    }\n    return sumSquares;\n};\n\nmodule.exports = sumSquares;\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let sentenceArray = sentence.split(\" \")\n  let newSentence = \"\"\n  for (let i = 0; i < sentenceArray.length; i++) {\n    if (isPrime(sentenceArray[i].length)) {\n      newSentence += sentenceArray[i]\n    }\n  }\n  return newSentence\n}\n\nfunction isPrime(n) {\n  let isPrime = false\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false\n      break\n    }\n    i += 1\n  }\n  if (isPrime) {\n    return true\n  }\n  return false\n}\n\nconsole.log(wordsInSentence(\"This is a test\"))\nconsole.log(wordsInSentence(\"lets go for swimming\"))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n\tconst nums = x.split(\"/\").map(n => parseInt(n));\n\tconst d = n.split(\"/\").map(n => parseInt(n));\n\tif(!d.every(x => x > 0)) return false;\n\tconst sum = d.reduce((a, b) => a + b, 0);\n\tconst mod = sum % n.length;\n\tif(mod === 0) return true;\n\telse return false;\n};\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let result = [];\n  let sum = 0;\n  for (let num of nums) {\n    sum += num;\n    if (sum in result) {\n      result.splice(result.indexOf(sum), 1);\n      result.unshift(num);\n    } else {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\n/*\n  Finds the middle point of the given list of points.\n\n For example:\n  >>> findMiddle([1, 2, 3])\n  2\n  >>> findMiddle([1, 2, 3, 4])\n  2\n  >>> findMiddle([1, 2, 3, 4, 5])\n  2\n  >>> findMiddle([1, 2, 3, 4, 5, 6])\n  3\n  */\nconst findMiddle = (nums) => {\n  let sum = 0;\n  let middle;\n  let middleIndex;\n  let half = nums.length / 2;\n  for (let i = 0; i < half; i++) {\n    sum += nums[i];\n  }\n  middleIndex = sum / half;\n  middle = nums[middleIndex];\n  return middle;\n};\n\n/*\n  Finds the middle point of the given list of points.\n\n For example:\n  >>> findMiddle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  5\n  >>> findMiddle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  7\n  >>> findMiddle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  9\n  */\nconst findMiddleOfArray = (nums) => {\n  let sum = 0;\n  let middle;\n  let middleIndex;\n  let half = nums.length / 2;\n  for (let i = 0; i < half; i++) {\n    sum += nums[i];\n  }\n  middleIndex = sum / half;\n  middle = nums[middleIndex];\n  return middle;\n};\n\nmodule.exports = {\n  findMiddle,\n  orderByPoints,\n  findMiddleOfArray\n};\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  return (a) => {\n    const first = Math.floor(a / 10)\n    const last = a % 10\n\n    return nums.filter(n => {\n      return (n > 10 && first!== last && (first + last) % 2 === 1)\n    })\n  }\n}\n\n// const specialFilter = (nums) => {\n//   return (a) => {\n//     const first = Math.floor(a / 10)\n//     const last = a % 10\n//     const odd = a % 2 === 1\n//     const greaterThan = nums.filter(n => n > 10)\n//     const sameFirst = nums.filter(n => n % 10 === first)\n//     const sameLast = nums.filter(n => n % 10 === last)\n//     return odd? 1 : 0\n//   }\n// }\n\nconst specialFilter = (nums) => {\n  return (a) => {\n    const first = Math.floor(a / 10)\n    const last = a % 10\n\n    return nums.filter(n => {\n      return n % 2 === 1 && n % 10 === first && n % 10 === last\n    })\n  }\n}\n\nexport { specialFilter }\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const arr = Array.from({length: n})\n  const result = []\n  let current = 1\n  let j = 0\n  let k = 0\n  while (current < n) {\n    for (let i = 0; i < n; i++) {\n      if (i === j) {\n        continue\n      }\n      if (k === j) {\n        break\n      }\n      if (arr[i] + arr[j] + arr[k] % 3 === current) {\n        result.push([arr[i], arr[j], arr[k]])\n        k++\n      }\n    }\n    j++\n    current++\n  }\n  return result\n}\n\nmodule.exports = getMaxTriples\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let x = (x) => {\n    let y = (y) => {\n      if (x.indexOf(y)!== -1) {\n        return x\n      } else {\n        return y +'' + x\n      }\n    };\n    return x.toLowerCase().split(' ').map(y).join(' ')\n  }\n  let x1 = bf(x1);\n  let x2 = bf(x2);\n  return (x1.concat(x2)).sort().filter(y => x1.indexOf(y)!== -1)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const result = [];\n  for (const item of lst) {\n    result.push(item.length);\n  }\n  result.sort((a, b) => a - b);\n  return result;\n};\n\nmodule.exports = sortedListSum;\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  if (n <= 3) return true\n  if (n % 3 === 0) return false\n  if (n < 1e7) return false\n  for (let i = n; i > 2; i--) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*\n  The value of x should be a positive integer.\n  The value of y should be a positive integer.\n  The value of n should be a positive integer.\n  The value of m should be a positive integer.\n  \n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrYTwo = (x, y, n, m) => {\n  if (isPrime(n)) {\n    return xOrY(x, y, n)\n  } else {\n    return xOrY(y, x, m)\n  }\n}\n\nconst main = () => {\n  console.log(xOrYTwo(5, 7, 11, 7))\n  console.log(xOrYTwo(9, 3, 11, 9))\n  console.log(xOrYTwo(7, 7, 11, 9))\n  console.log(xOrYTwo(11, 7, 11, 9))\n  console.log(xOrYTwo(7, 7, 11, 7))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n    if (lst.length === 0) {\n        return 0\n    }\n    let s = 0\n    lst.forEach(n => {\n        if (n > 0) {\n            s += n * n\n        }\n    })\n    return s\n}\n\n/* Gives a list of numbers, return the sum of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference2 = (lst) => {\n    if (lst.length === 0) {\n        return 0\n    }\n    let s = 0\n    lst.forEach(n => {\n        if (n > 0) {\n            s += n * n\n        }\n    })\n    return s\n}\n\n/* Gives a list of numbers, return the sum of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference3 = (lst) => {\n    if (lst.length === 0) {\n        return 0\n    }\n    let sum = 0\n    for (let n of lst) {\n        if (n > 0) {\n            sum += n * n\n        }\n    }\n    return sum\n}\n\n/* Gives a list of numbers, return the sum of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference4 = (lst) => {\n    if (lst.length === 0) {\n        return 0\n    }\n    let sum = 0\n    let diff = 0\n    for (let n of lst) {\n        if (n > 0) {\n            sum += n * n\n        } else {\n            diff += n * n\n        }\n    }\n    return sum + diff\n}\n\n/* Gives a list of numbers, return the sum of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference5 = (lst) => {\n    if (lst.length === 0) {\n        return 0\n    }\n    let sum = 0\n    let diff = 0\n    for (let n of lst) {\n        if (n > 0) {\n            sum += n * n\n        } else {\n            diff += n * n\n        }\n    }\n    return sum + diff\n}\n\n/* Gives a list of numbers, return the sum of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference6 = (lst) => {\n    if (lst.length === 0) {\n        return 0\n    }\n    let sum = 0\n    let diff = 0\n    for (let n of lst) {\n        if (n > 0) {\n            sum += n * n\n        } else {\n            diff += n * n\n        }\n    }\n    return sum + diff\n}\n\n/* Gives a list of numbers, return the sum of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference7 = (lst) => {\n    if (lst.length === 0) {\n        return 0\n    }\n    let sum = 0\n    let diff = 0\n    for (let n of lst) {\n        if (n > 0) {\n            sum += n * n\n        } else {\n            diff += n * n\n        }\n    }\n    return sum + diff\n}\n\n/* Gives a list of numbers, return the sum of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference8 = (lst) => {\n    if (lst.length === 0) {\n        return 0\n    }\n    let sum = 0\n    let diff = 0\n    for (let n of lst) {\n        if (n > 0) {\n            sum += n * n\n"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const length = game.length\n  const guesses = game.length\n  const score = game.slice()\n  const guess = guess.slice()\n  const result = score.slice()\n  let i = 0\n  let j = 0\n  while (i < length && j < guesses) {\n    if (guess[j] === score[i]) {\n      result[j] = 0\n      i++\n      j++\n    } else {\n      result[j] = Math.abs(guess[j] - score[i])\n      j++\n    }\n  }\n  return result\n}\n\nmodule.exports = compare<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  if (extensions.length === 0) {\n    return class_name\n  }\n  const classNameExtensionStrengthMap = {};\n  const classNameExtensionStrengthMapCount = 0;\n  const classNameExtensionStrengthMapCountMax = 0;\n  extensions.forEach(extension => {\n    const name = extension.toLowerCase();\n    const cap = name.length - name.replace(/[a-z]/g, '').length;\n    const strength = (cap - name.split('.').reduce((a, b) => a - b.length, 0)) / name.length;\n    if (strength > 0) {\n      classNameExtensionStrengthMapCount++;\n      classNameExtensionStrengthMap[name] = classNameExtensionStrengthMapCount;\n      classNameExtensionStrengthMapCountMax = Math.max(classNameExtensionStrengthMapCountMax, classNameExtensionStrengthMapCount);\n    }\n  });\n  const classNameExtensionStrengthMax = classNameExtensionStrengthMapCountMax;\n  let bestClassName = '';\n  for (const extension in classNameExtensionStrengthMap) {\n    const strength = classNameExtensionStrengthMap[extension];\n    if (strength > classNameExtensionStrengthMax) {\n      bestClassName = `${class_name}.${extension}`;\n      break;\n    }\n  }\n  return bestClassName;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n\tfor(let i = 0; i < b.length; i++){\n\t\tlet c = b[i];\n\t\tlet d = a[0];\n\t\tfor(let j = 0; j < c.length; j++){\n\t\t\tif(a[1] === c[j]){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\ta = a.concat(a.splice(1,1));\n\t}\n\treturn false;\n}\n\nfunction isPalindrome(n) {\n\tif(n.length === 0) {\n\t\treturn true;\n\t}\n\n\tlet half = Math.floor(n.length / 2);\n\n\tfor(let i = 0; i < half; i++){\n\t\tif(n[i]!== n[n.length - i - 1]){\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nconst isPalindrome = (n) => {\n\tlet half = Math.floor(n.length / 2);\n\n\tfor(let i = 0; i < half; i++){\n\t\tif(n[i]!== n[n.length - i - 1]){\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nfunction isPalindrome(n) {\n\treturn n === n.split('').reverse().join('');\n}\n\nfunction reverse(n) {\n\treturn n.split('').reverse().join('');\n}\n\nfunction rotate(n) {\n\tlet nn = new Array(n);\n\tlet half = Math.floor(n / 2);\n\n\tfor(let i = 0; i < half; i++){\n\t\tnn[i] = n[n.length - 1 - i];\n\t}\n\n\tfor(let i = half; i < n; i++){\n\t\tnn[i] = n[i - half];\n\t}\n\n\treturn nn.join('');\n}\n\nfunction multiply(n) {\n\tlet nn = new Array(n);\n\tlet half = Math.floor(n / 2);\n\n\tfor(let i = 0; i < half; i++){\n\t\tnn[i] = n[n.length - 1 - i];\n\t}\n\n\tfor(let i = half; i < n; i++){\n\t\tnn[i] = n[i - half];\n\t}\n\n\treturn nn.join('');\n}\n\nfunction isPalindrome(n) {\n\treturn n === reverse(n);\n}\n\nconst isPalindrome = (n) => {\n\treturn n === reverse(n);\n}\n\nfunction isPalindrome(n) {\n\treturn n === multiply(n);\n}\n\nfunction isPalindrome(n) {\n\treturn n === rotate(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPalindrome(n);\n}\n\nfunction isPalindrome(n) {\n\treturn isPal"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let even = 0;\n    let odd = 0;\n    let total = 0;\n    for (let i = 0; i < num.toString().length; i++) {\n        if (num % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        total += (num % 2 === 0)? even : odd;\n        num = Math.floor(num / 2);\n    }\n    return (total, even);\n};\n\nconsole.log(evenOddCount(123));\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  if (number === 0) {\n    return 'zero';\n  }\n  let dic = { 1: 'one', 5: 'five', 10: 'ten', 50: 'fifty', 100: 'onehundred' };\n  let num = number;\n  let result = '';\n  for (let i = 1; i < num; i++) {\n    if (num % i === 0) {\n      result += dic[i];\n      num = num / i;\n    }\n  }\n  if (num > 1) {\n    result +='' + dic[num];\n  }\n  return result.toLowerCase();\n};\n\nconst intToRoman = (number) => {\n  if (number === 0) {\n    return 'zero';\n  }\n  let dic = { 1: 'I', 5: 'V', 10: 'X', 50: 'L', 100: 'C', 500: 'D', 1000: 'M' };\n  let num = number;\n  let result = '';\n  for (let i = 1; i < num; i++) {\n    if (num % i === 0) {\n      result += dic[i];\n      num = num / i;\n    }\n  }\n  if (num > 1) {\n    result +='' + dic[num];\n  }\n  return result.toUpperCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in uppercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToUpperRoman = (number) => {\n  if (number === 0) {\n    return 'zero';\n  }\n  let dic = { 1: 'I', 5: 'V', 10: 'X', 50: 'L', 100: 'C', 500: 'D', 1000: 'M' };\n  let num = number;\n  let result = '';\n  for (let i = 1; i < num; i++) {\n    if (num % i === 0) {\n      result += dic[i];\n      num = num / i;\n    }\n  }\n  if (num > 1) {\n    result +='' + dic[num];\n  }\n  return result.toUpperCase();\n};\n\nconst main = () => {\n  let num = 5;\n  console.log(intToRoman(num));\n  console.log(intToRoman(num).toUpperCase());\n  console.log(intToMiniRoman(num));\n  console.log(intToUpperRoman(num));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    const s1 = Math.sqrt(a * a + b * b);\n    const s2 = Math.sqrt(a * a + c * c);\n    const s3 = Math.sqrt(b * b + c * c);\n    return ((s1 + s2 + s3) == 0);\n}\n\nconst checkTriangles = (triangles) => {\n    const triangleArray = [];\n    for (let i = 0; i < triangles.length; i++) {\n        triangleArray[i] = [triangles[i][0], triangles[i][1], triangles[i][2]];\n    }\n    for (let i = 0; i < triangleArray.length - 2; i++) {\n        for (let j = i + 1; j < triangleArray.length - 1; j++) {\n            for (let k = j + 1; k < triangleArray.length; k++) {\n                if (rightAngleTriangle(triangleArray[i][1], triangleArray[j][1], triangleArray[k][1])) {\n                    console.log(`${triangleArray[i][0]} - ${triangleArray[j][0]} - ${triangleArray[k][0]}`);\n                }\n            }\n        }\n    }\n}\n\ncheckTriangles([[1, 2, 3], [4, 5, 6], [7, 8, 9]]);\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n  const uniqueWords = new Set(words)\n  let max = 0\n  let maxWord = ''\n  for (let word of words) {\n    if (uniqueWords.has(word)) {\n      const uniqueCount = uniqueWords.count(word)\n      if (uniqueCount > max) {\n        max = uniqueCount\n        maxWord = word\n      }\n    }\n  }\n  return maxWord\n}\n\n/*Write a functions that accepting a list of strings. The list containing different words. Return the words with minimum number of unique character. If multiple strings had minimum number of unique character, return the one which comes first in lexicographical order. findMin([\"name\", \"of\", \"string\"]) === \"name\" findMin([\"name\", \"enam\", \"games\"]) === \"name\" */ const findMin = (words) => {\n  const uniqueWords = new Set(words)\n  let min = Number.MAX_SAFE_INTEGER\n  let minWord = ''\n  for (let word of words) {\n    if (uniqueWords.has(word)) {\n      const uniqueCount = uniqueWords.count(word)\n      if (uniqueCount < min) {\n        min = uniqueCount\n        minWord = word\n      }\n    }\n  }\n  return minWord\n}\n\n/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"of\" findMax([\"name\", \"enam\", \"games\"]) === \"name\" */ const findMaxMin = (words) => {\n  const uniqueWords = new Set(words)\n  let max = 0\n  let maxWord = ''\n  let min = Number.MAX_SAFE_INTEGER\n  let minWord = ''\n  for (let word of words) {\n    if (uniqueWords.has(word)) {\n      const uniqueCount = uniqueWords.count(word)\n      if (uniqueCount > max) {\n        max = uniqueCount\n        maxWord = word\n      }\n      if (uniqueCount < min) {\n        min = uniqueCount\n        minWord = word\n      }\n    }\n  }\n  return maxWord +'' + minWord\n}\n\n/*Write a functions that accepting a list of strings. The list containing different words. Return the words with minimum number of unique character. If multiple strings had minimum number of unique character, return the one which comes first in lexicographical order. */ const findMaxMin = (words) => {\n  const uniqueWords = new Set(words)\n  let min = Number.MAX_SAFE_INTEGER\n  let minWord = ''\n  let max = 0\n  for (let word of words) {\n    if (uniqueWords.has(word)) {\n      const uniqueCount = uniqueWords.count(word)\n      if (uniqueCount < min) {\n        min = uniqueCount\n        minWord = word\n      }\n      if (uniqueCount > max) {\n        max = uniqueCount\n      }\n    }\n  }\n  return minWord +'' + max\n}\n\n/*Write a function that accepting a list of strings. The list containing different words. Return the words with minimum and maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. */ const findMaxMin = (words) => {\n  const uniqueWords = new Set(words)\n  let max = 0\n  let maxWord = ''\n  let min = Number.MAX_SAFE_INTEGER\n  let minWord = ''\n  for (let word of words) {\n    if (uniqueWords.has(word)) {\n      const uniqueCount = uniqueWords.count(word)\n      if (uniqueCount > max) {\n        max = uniqueCount\n        maxWord = word\n      }\n      if (uniqueCount < min) {\n        min = uniqueCount\n        minWord = word\n      }\n    }\n  }\n  return minWord +'' + maxWord\n}\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = []\n  let total = 0\n  \n  while (number >= need) {\n    total += number\n    result.push(number)\n    number -= need\n  }\n  \n  if (number > 0) {\n    total += number\n    result.push(number)\n  }\n  \n  return [total, remaining]\n}\n\n/*\n  You are a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat2 = (number, need, remaining) => {\n  const result = []\n  let total = 0\n  \n  while (number >= need) {\n    total += number\n    result.push(number)\n    number -= need\n  }\n  \n  if (number > 0) {\n    total += number\n    result.push(number)\n  }\n  \n  return [total, remaining]\n}\n\n/*\n  You are a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat3 = (number, need, remaining) => {\n  const result = []\n  let total = 0\n  \n  while (number >= need) {\n    total += number\n    result.push(number)\n    number -= need\n  }\n  \n  if (number > 0) {\n    total += number\n    result.push(number)\n  }\n  \n  return [total, remaining]\n}\n\n/*\n  You are a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat4 = (number, need, remaining) => {\n  const result = []\n  let total = 0\n  \n  while (number >= need) {\n    total += number\n    result.push(number)\n    number -= need\n  }\n  \n  if (number > 0) {\n    total += number\n    result.push(number)\n  }\n  \n  return [total, remaining]\n}\n\nconst number = prompt(\"Please enter number: \")\nconst need = prompt(\"Please enter need: \")\nconst remaining = prompt(\"Please enter remaining: \")\n\nconst res = eat(number, need, remaining)\n\nconst res2 = eat2(number, need, remaining)\n\nconst res3 = eat3(number, need, remaining)\n\nconst res4 = eat4(number, need, remaining)\n\nconsole.log(res)\nconsole.log(res2)\nconsole.log(res3)\nconsole."}
{"task_id": "JavaScript/160", "prompt": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    const operatorList = operator.split('')\n    const operandList = operand.map((x) => parseInt(x))\n    let result = 0\n    operandList.forEach((x, i) => {\n        if (operatorList.length - 1 === i) {\n            result = result + x\n        } else {\n            result = result + operatorList[i + 1] * x\n        }\n    })\n    return result\n}\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra2 = (operator, operand) => {\n    const operatorList = operator.split('')\n    const operandList = operand.map((x) => parseInt(x))\n    let result = 0\n    for (let i = 0; i < operatorList.length; i++) {\n        if (operatorList[i] === '+') {\n            result += operandList[i + 1]\n        } else if (operatorList[i] === '-') {\n            result -= operandList[i + 1]\n        } else if (operatorList[i] === '*') {\n            result *= operandList[i + 1]\n        } else if (operatorList[i] === '/') {\n            result /= operandList[i + 1]\n        } else if (operatorList[i] === '//') {\n            result = Math.floor(result / operandList[i + 1])\n        } else if (operatorList[i] === '**') {\n            result = Math.pow(result, operandList[i + 1])\n        }\n    }\n    return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n    const operatorList = operator.split('')\n    const operandList = operand.map((x) => parseInt(x))\n    let result = 0\n    for (let i = 0; i < operatorList.length; i++) {\n        if (operatorList[i] === '+') {\n            result += operandList[i + 1]\n        } else if (operatorList[i] === '-') {\n            result -= operandList[i + 1]\n        } else if (operatorList[i] === '*') {\n            result *= operandList[i + 1]\n        } else if (operatorList[i] === '/') {\n            result /= operandList[i + 1]\n        } else if (operatorList[i] === '//') {\n            result = Math.floor(result / operandList[i + 1])\n        } else if (operatorList[i] === '**') {\n            result = Math.pow(result, operandList[i + 1])\n        }\n    }\n    return result\n}\n\nconsole.log(doAlgebra('+', ['2', '3', '4', '5']))\nconsole.log(doAlgebra('*', ['2', '3', '4', '5']))\nconsole.log(doAlgebra('-', ['2', '3', '4', '5']))\nconsole.log(doAlgebra('//', ['2', '3', '4', '5']))\nconsole.log(doAlgebra('**', ['2', '3', '4', '5']))\nconsole.log(doAlgebra2('+', ['2', '3', '4', '5']))\nconsole.log(doAlgebra2('-', ['2', '3', '4', '5']))\nconsole.log(doAlgebra2('*', ['2', '3', '4', '5']))\nconsole.log(doAlgebra2('//', ['2', '3', '4', '5']))\nconsole.log(doAlgebra2('**', ['2', '3', '4', '5']))\nconsole.log(doAlgebra3('+', ['2', '3', '4', '5']))\nconsole.log(doAlgebra3('-', ['2', '3', '4', '5']))\nconsole.log(doAlgebra3('*', ['2', '3', '4', '5']))\nconsole.log(doAlgebra3('//', ['2', '3', '4', '5']))\nconsole.log(doAlgebra3('**', ['2', '3', '4', '5']))<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const arr = s.split('')\n  let result = ''\n  let index = 0\n\n  while (index < arr.length) {\n    if (isAlpha(arr[index])) {\n      arr[index] = toUpperCase(arr[index])\n    } else {\n      arr[index] = toLowerCase(arr[index])\n    }\n\n    if (isAlpha(arr[index])) {\n      result += arr[index]\n    }\n\n    index++\n  }\n\n  return result\n}\n\nconst isAlpha = (c) => {\n  const alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\n  return alpha.includes(c)\n}\n\nconst toUpperCase = (c) => {\n  if (c.toUpperCase() === c) {\n    return c.toUpperCase()\n  }\n\n  return c.toLowerCase()\n}\n\nconst toLowerCase = (c) => {\n  if (c.toLowerCase() === c) {\n    return c.toLowerCase()\n  }\n\n  return c.toUpperCase()\n}\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null;\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nmodule.exports = stringToMd5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let res = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    }\n  }\n  return res;\n}\n\ndescribe('generateIntegers', () => {\n  it('should return [] if a is greater than b', () => {\n    expect(generateIntegers(10, 2)).toEqual([]);\n  });\n\n  it('should return [] if a is less than 1', () => {\n    expect(generateIntegers(-2, 3)).toEqual([]);\n  });\n\n  it('should return [2, 4, 6, 8] if a is 2 and b is 8', () => {\n    expect(generateIntegers(2, 8)).toEqual([2, 4, 6, 8]);\n  });\n\n  it('should return [2, 4, 6, 8] if a is 8 and b is 2', () => {\n    expect(generateIntegers(8, 2)).toEqual([2, 4, 6, 8]);\n  });\n});\n<|endoftext|>"}
